
STM32F746NGH6U_HAL_LwIP_HTTP_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e6b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004150  0801e888  0801e888  0002e888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080229d8  080229d8  000401f4  2**0
                  CONTENTS
  4 .ARM          00000008  080229d8  080229d8  000329d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080229e0  080229e0  000401f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080229e0  080229e0  000329e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080229e4  080229e4  000329e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080229e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027f1c  200001f4  08022bdc  000401f4  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20028110  08022bdc  00048110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a33c  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000882f  00000000  00000000  0008a560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021d0  00000000  00000000  00092d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002078  00000000  00000000  00094f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037ba3  00000000  00000000  00096fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00037126  00000000  00000000  000ceb7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001129b5  00000000  00000000  00105ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00218656  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0dc  00000000  00000000  002186ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801e86c 	.word	0x0801e86c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0801e86c 	.word	0x0801e86c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4a07      	ldr	r2, [pc, #28]	; (8001058 <vApplicationGetIdleTaskMemory+0x2c>)
 800103c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <vApplicationGetIdleTaskMemory+0x30>)
 8001042:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800104a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800104c:	bf00      	nop
 800104e:	3714      	adds	r7, #20
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000a10 	.word	0x20000a10
 800105c:	20000a64 	.word	0x20000a64

08001060 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b090      	sub	sp, #64	; 0x40
 8001064:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem */
  osSemaphoreDef(BinarySem);
 8001066:	2300      	movs	r3, #0
 8001068:	63bb      	str	r3, [r7, #56]	; 0x38
 800106a:	2300      	movs	r3, #0
 800106c:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinarySemHandle = osSemaphoreCreate(osSemaphore(BinarySem), 1);
 800106e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001072:	2101      	movs	r1, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f004 fc03 	bl	8005880 <osSemaphoreCreate>
 800107a:	4603      	mov	r3, r0
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <MX_FREERTOS_Init+0x70>)
 800107e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_FREERTOS_Init+0x74>)
 8001082:	f107 041c 	add.w	r4, r7, #28
 8001086:	461d      	mov	r5, r3
 8001088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800108c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001090:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f004 faf3 	bl	8005686 <osThreadCreate>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <MX_FREERTOS_Init+0x78>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of pwmTask */
  osThreadDef(pwmTask, StartPwmTask, osPriorityAboveNormal, 0, 256);
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <MX_FREERTOS_Init+0x7c>)
 80010a8:	463c      	mov	r4, r7
 80010aa:	461d      	mov	r5, r3
 80010ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwmTaskHandle = osThreadCreate(osThread(pwmTask), NULL);
 80010b8:	463b      	mov	r3, r7
 80010ba:	2100      	movs	r1, #0
 80010bc:	4618      	mov	r0, r3
 80010be:	f004 fae2 	bl	8005686 <osThreadCreate>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <MX_FREERTOS_Init+0x80>)
 80010c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010c8:	bf00      	nop
 80010ca:	3740      	adds	r7, #64	; 0x40
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bdb0      	pop	{r4, r5, r7, pc}
 80010d0:	20021604 	.word	0x20021604
 80010d4:	0801e89c 	.word	0x0801e89c
 80010d8:	20021600 	.word	0x20021600
 80010dc:	0801e8b8 	.word	0x0801e8b8
 80010e0:	20021608 	.word	0x20021608

080010e4 <StartDefaultTask>:
  */

extern struct netif gnetif;
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80010ec:	f003 fe16 	bl	8004d1c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  char * write_buf = pvPortMalloc(64);
 80010f0:	2040      	movs	r0, #64	; 0x40
 80010f2:	f007 f8d7 	bl	80082a4 <pvPortMalloc>
 80010f6:	6278      	str	r0, [r7, #36]	; 0x24
  struct netbuf * nb;
  volatile err_t res;
  ip_addr_t local_ip;
  ip_addr_t remote_ip;

  while(gnetif.ip_addr.addr == 0) osDelay(1);
 80010f8:	e002      	b.n	8001100 <StartDefaultTask+0x1c>
 80010fa:	2001      	movs	r0, #1
 80010fc:	f004 fb0f 	bl	800571e <osDelay>
 8001100:	4b5e      	ldr	r3, [pc, #376]	; (800127c <StartDefaultTask+0x198>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f8      	beq.n	80010fa <StartDefaultTask+0x16>
  local_ip = gnetif.ip_addr;
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <StartDefaultTask+0x198>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
  printf("Client IP: %s\r\n", ip4addr_ntoa(&gnetif.ip_addr));
 800110e:	485c      	ldr	r0, [pc, #368]	; (8001280 <StartDefaultTask+0x19c>)
 8001110:	f017 f8b0 	bl	8018274 <ip4addr_ntoa>
 8001114:	4603      	mov	r3, r0
 8001116:	4619      	mov	r1, r3
 8001118:	485a      	ldr	r0, [pc, #360]	; (8001284 <StartDefaultTask+0x1a0>)
 800111a:	f019 f909 	bl	801a330 <iprintf>

  netconn_gethostbyname(DOMAIN_NAME, &remote_ip);
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	4619      	mov	r1, r3
 8001124:	4858      	ldr	r0, [pc, #352]	; (8001288 <StartDefaultTask+0x1a4>)
 8001126:	f007 ff1b 	bl	8008f60 <netconn_gethostbyname>
  printf("Server IP: %s\r\n\r\n", ip4addr_ntoa(&remote_ip));
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4618      	mov	r0, r3
 8001130:	f017 f8a0 	bl	8018274 <ip4addr_ntoa>
 8001134:	4603      	mov	r3, r0
 8001136:	4619      	mov	r1, r3
 8001138:	4854      	ldr	r0, [pc, #336]	; (800128c <StartDefaultTask+0x1a8>)
 800113a:	f019 f8f9 	bl	801a330 <iprintf>

  sprintf(write_buf, "GET / HTTP/1.1\r\nHost: %s\r\n\r\n", DOMAIN_NAME);
 800113e:	4a52      	ldr	r2, [pc, #328]	; (8001288 <StartDefaultTask+0x1a4>)
 8001140:	4953      	ldr	r1, [pc, #332]	; (8001290 <StartDefaultTask+0x1ac>)
 8001142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001144:	f019 f9c8 	bl	801a4d8 <siprintf>

  /* Infinite loop */
  for(;;){

	  nc = netconn_new(NETCONN_TCP);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2010      	movs	r0, #16
 800114e:	f007 faab 	bl	80086a8 <netconn_new_with_proto_and_callback>
 8001152:	6238      	str	r0, [r7, #32]
	  if(nc != NULL){
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 8088 	beq.w	800126c <StartDefaultTask+0x188>

		  netconn_set_recvtimeout(nc, TIMEOUT);
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001162:	61da      	str	r2, [r3, #28]
		  res = netconn_bind(nc, &local_ip, 0);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	6a38      	ldr	r0, [r7, #32]
 800116e:	f007 fb55 	bl	800881c <netconn_bind>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]
		  if(res == ERR_OK){
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	b25b      	sxtb	r3, r3
 800117a:	2b00      	cmp	r3, #0
 800117c:	d166      	bne.n	800124c <StartDefaultTask+0x168>

			  res = netconn_connect(nc, &remote_ip, PORT);
 800117e:	f107 030c 	add.w	r3, r7, #12
 8001182:	2250      	movs	r2, #80	; 0x50
 8001184:	4619      	mov	r1, r3
 8001186:	6a38      	ldr	r0, [r7, #32]
 8001188:	f007 fb80 	bl	800888c <netconn_connect>
 800118c:	4603      	mov	r3, r0
 800118e:	75fb      	strb	r3, [r7, #23]
			  if(res == ERR_OK){
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	b25b      	sxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d152      	bne.n	800123e <StartDefaultTask+0x15a>

				  for(;;){

					  res = netconn_write(nc, write_buf, strlen(write_buf), NETCONN_COPY);
 8001198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119a:	f7ff f839 	bl	8000210 <strlen>
 800119e:	4602      	mov	r2, r0
 80011a0:	2300      	movs	r3, #0
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011a8:	6a38      	ldr	r0, [r7, #32]
 80011aa:	f007 fdaf 	bl	8008d0c <netconn_write_partly>
 80011ae:	4603      	mov	r3, r0
 80011b0:	75fb      	strb	r3, [r7, #23]
					  printf("send:\r\n%s", write_buf);
 80011b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011b4:	4837      	ldr	r0, [pc, #220]	; (8001294 <StartDefaultTask+0x1b0>)
 80011b6:	f019 f8bb 	bl	801a330 <iprintf>
					  if(res != ERR_OK){
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	b25b      	sxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <StartDefaultTask+0xec>

						  printf("\r\n\r\nnetconn_write error: %d\r\n\r\n", res);
 80011c2:	7dfb      	ldrb	r3, [r7, #23]
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	4619      	mov	r1, r3
 80011c8:	4833      	ldr	r0, [pc, #204]	; (8001298 <StartDefaultTask+0x1b4>)
 80011ca:	f019 f8b1 	bl	801a330 <iprintf>
						  break;
 80011ce:	e043      	b.n	8001258 <StartDefaultTask+0x174>
					  }
					  res = netconn_recv(nc, &nb);
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4619      	mov	r1, r3
 80011d6:	6a38      	ldr	r0, [r7, #32]
 80011d8:	f007 fd1e 	bl	8008c18 <netconn_recv>
 80011dc:	4603      	mov	r3, r0
 80011de:	75fb      	strb	r3, [r7, #23]
					  if(res == ERR_OK){
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d117      	bne.n	8001218 <StartDefaultTask+0x134>

						  uint16_t len = netbuf_len(nb);
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	891b      	ldrh	r3, [r3, #8]
 80011ee:	83fb      	strh	r3, [r7, #30]
						  netbuf_copy(nb, recv_buf, len);
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	8bfa      	ldrh	r2, [r7, #30]
 80011f6:	2300      	movs	r3, #0
 80011f8:	4928      	ldr	r1, [pc, #160]	; (800129c <StartDefaultTask+0x1b8>)
 80011fa:	f00c facb 	bl	800d794 <pbuf_copy_partial>
						  netbuf_delete(nb);
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4618      	mov	r0, r3
 8001202:	f009 fb5b 	bl	800a8bc <netbuf_delete>
						  recv_buf[len] = 0;
 8001206:	8bfb      	ldrh	r3, [r7, #30]
 8001208:	4a24      	ldr	r2, [pc, #144]	; (800129c <StartDefaultTask+0x1b8>)
 800120a:	2100      	movs	r1, #0
 800120c:	54d1      	strb	r1, [r2, r3]
						  printf("recv:\r\n%s", recv_buf);
 800120e:	4923      	ldr	r1, [pc, #140]	; (800129c <StartDefaultTask+0x1b8>)
 8001210:	4823      	ldr	r0, [pc, #140]	; (80012a0 <StartDefaultTask+0x1bc>)
 8001212:	f019 f88d 	bl	801a330 <iprintf>
 8001216:	e006      	b.n	8001226 <StartDefaultTask+0x142>

					  } else {

						  printf("\r\n\r\nnetconn_recv error: %d\r\n\r\n", res);
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	b25b      	sxtb	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	4821      	ldr	r0, [pc, #132]	; (80012a4 <StartDefaultTask+0x1c0>)
 8001220:	f019 f886 	bl	801a330 <iprintf>
						  break;
 8001224:	e018      	b.n	8001258 <StartDefaultTask+0x174>
					  }
					  xSemaphoreGive(BinarySemHandle);
 8001226:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <StartDefaultTask+0x1c4>)
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	f004 ff44 	bl	80060bc <xQueueGenericSend>
					  osDelay(TIMEOUT);
 8001234:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001238:	f004 fa71 	bl	800571e <osDelay>
					  res = netconn_write(nc, write_buf, strlen(write_buf), NETCONN_COPY);
 800123c:	e7ac      	b.n	8001198 <StartDefaultTask+0xb4>
				  }
			  } else printf("netconn_connect error: %d\r\n", res);
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4619      	mov	r1, r3
 8001244:	4819      	ldr	r0, [pc, #100]	; (80012ac <StartDefaultTask+0x1c8>)
 8001246:	f019 f873 	bl	801a330 <iprintf>
 800124a:	e005      	b.n	8001258 <StartDefaultTask+0x174>
		  }	else printf("netconn_bind error: %d\r\n", res);
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	4817      	ldr	r0, [pc, #92]	; (80012b0 <StartDefaultTask+0x1cc>)
 8001254:	f019 f86c 	bl	801a330 <iprintf>
		  netconn_close(nc);
 8001258:	6a38      	ldr	r0, [r7, #32]
 800125a:	f007 fe59 	bl	8008f10 <netconn_close>
		  netconn_delete(nc);
 800125e:	6a38      	ldr	r0, [r7, #32]
 8001260:	f007 fac0 	bl	80087e4 <netconn_delete>
		  printf("connection closed and deleted\r\n");
 8001264:	4813      	ldr	r0, [pc, #76]	; (80012b4 <StartDefaultTask+0x1d0>)
 8001266:	f019 f8e9 	bl	801a43c <puts>
 800126a:	e002      	b.n	8001272 <StartDefaultTask+0x18e>
	  } else printf("netconn_new error\r\n");
 800126c:	4812      	ldr	r0, [pc, #72]	; (80012b8 <StartDefaultTask+0x1d4>)
 800126e:	f019 f8e5 	bl	801a43c <puts>
	  osDelay(TIMEOUT);
 8001272:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001276:	f004 fa52 	bl	800571e <osDelay>
	  nc = netconn_new(NETCONN_TCP);
 800127a:	e765      	b.n	8001148 <StartDefaultTask+0x64>
 800127c:	200216b0 	.word	0x200216b0
 8001280:	200216b4 	.word	0x200216b4
 8001284:	0801e8d4 	.word	0x0801e8d4
 8001288:	0801e8e4 	.word	0x0801e8e4
 800128c:	0801e8f0 	.word	0x0801e8f0
 8001290:	0801e904 	.word	0x0801e904
 8001294:	0801e924 	.word	0x0801e924
 8001298:	0801e930 	.word	0x0801e930
 800129c:	20000210 	.word	0x20000210
 80012a0:	0801e950 	.word	0x0801e950
 80012a4:	0801e95c 	.word	0x0801e95c
 80012a8:	20021604 	.word	0x20021604
 80012ac:	0801e97c 	.word	0x0801e97c
 80012b0:	0801e998 	.word	0x0801e998
 80012b4:	0801e9b4 	.word	0x0801e9b4
 80012b8:	0801e9d4 	.word	0x0801e9d4

080012bc <StartPwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPwmTask */
void StartPwmTask(void const * argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPwmTask */
	xSemaphoreTake(BinarySemHandle, (TickType_t) 10);
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <StartPwmTask+0x70>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	210a      	movs	r1, #10
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fa18 	bl	8006700 <xQueueSemaphoreTake>
  /* Infinite loop */
  for(;;){

	  if(xSemaphoreTake(BinarySemHandle, (TickType_t) 10) == pdTRUE){
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <StartPwmTask+0x70>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	210a      	movs	r1, #10
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 fa12 	bl	8006700 <xQueueSemaphoreTake>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d1f6      	bne.n	80012d0 <StartPwmTask+0x14>

		  char * ptr = strchr(recv_buf, '$');
 80012e2:	2124      	movs	r1, #36	; 0x24
 80012e4:	4812      	ldr	r0, [pc, #72]	; (8001330 <StartPwmTask+0x74>)
 80012e6:	f019 f988 	bl	801a5fa <strchr>
 80012ea:	60f8      	str	r0, [r7, #12]
		  if(ptr != NULL){
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d018      	beq.n	8001324 <StartPwmTask+0x68>

			  uint16_t brightness = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	817b      	strh	r3, [r7, #10]
			  sscanf(ptr + 1, "%hu", &brightness);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	3301      	adds	r3, #1
 80012fa:	f107 020a 	add.w	r2, r7, #10
 80012fe:	490d      	ldr	r1, [pc, #52]	; (8001334 <StartPwmTask+0x78>)
 8001300:	4618      	mov	r0, r3
 8001302:	f019 f909 	bl	801a518 <siscanf>
			  TIM12->CCR1 = brightness;	//	0 - min 100 - max
 8001306:	897a      	ldrh	r2, [r7, #10]
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <StartPwmTask+0x7c>)
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
			  printf("brightness = %d\r\n", brightness);
 800130c:	897b      	ldrh	r3, [r7, #10]
 800130e:	4619      	mov	r1, r3
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <StartPwmTask+0x80>)
 8001312:	f019 f80d 	bl	801a330 <iprintf>
		  	  memset(recv_buf, 0, BUF_LENGTH);
 8001316:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800131a:	2100      	movs	r1, #0
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <StartPwmTask+0x74>)
 800131e:	f018 f985 	bl	801962c <memset>
 8001322:	e7d5      	b.n	80012d0 <StartPwmTask+0x14>
		  } else printf("\r\n$ not found\r\n");
 8001324:	4806      	ldr	r0, [pc, #24]	; (8001340 <StartPwmTask+0x84>)
 8001326:	f019 f889 	bl	801a43c <puts>
	  if(xSemaphoreTake(BinarySemHandle, (TickType_t) 10) == pdTRUE){
 800132a:	e7d1      	b.n	80012d0 <StartPwmTask+0x14>
 800132c:	20021604 	.word	0x20021604
 8001330:	20000210 	.word	0x20000210
 8001334:	0801e9e8 	.word	0x0801e9e8
 8001338:	40001800 	.word	0x40001800
 800133c:	0801e9ec 	.word	0x0801e9ec
 8001340:	0801ea00 	.word	0x0801ea00

08001344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b087      	sub	sp, #28
 8001348:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_GPIO_Init+0x8c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a1a      	ldr	r2, [pc, #104]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_GPIO_Init+0x8c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a0e      	ldr	r2, [pc, #56]	; (80013d0 <MX_GPIO_Init+0x8c>)
 8001398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_GPIO_Init+0x8c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_GPIO_Init+0x8c>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <MX_GPIO_Init+0x8c>)
 80013b0:	f043 0304 	orr.w	r3, r3, #4
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_GPIO_Init+0x8c>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

}
 80013c2:	bf00      	nop
 80013c4:	371c      	adds	r7, #28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800

080013d4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80013d8:	f3bf 8f4f 	dsb	sy
}
 80013dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013de:	f3bf 8f6f 	isb	sy
}
 80013e2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <SCB_EnableICache+0x48>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80013ec:	f3bf 8f4f 	dsb	sy
}
 80013f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013f2:	f3bf 8f6f 	isb	sy
}
 80013f6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <SCB_EnableICache+0x48>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <SCB_EnableICache+0x48>)
 80013fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001402:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001404:	f3bf 8f4f 	dsb	sy
}
 8001408:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800140a:	f3bf 8f6f 	isb	sy
}
 800140e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001428:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800142c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001438:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800143c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001440:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00b      	beq.n	8001460 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001448:	e000      	b.n	800144c <ITM_SendChar+0x2c>
    {
      __NOP();
 800144a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800144c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f9      	beq.n	800144a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001456:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e009      	b.n	8001498 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffc7 	bl	8001420 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf1      	blt.n	8001484 <_write+0x16>
  return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80014b0:	f7ff ff90 	bl	80013d4 <SCB_EnableICache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f000 facc 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f810 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f7ff ff42 	bl	8001344 <MX_GPIO_Init>
  MX_TIM12_Init();
 80014c0:	f000 fa00 	bl	80018c4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 80014c4:	2100      	movs	r1, #0
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <main+0x2c>)
 80014c8:	f002 fd4e 	bl	8003f68 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80014cc:	f7ff fdc8 	bl	8001060 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80014d0:	f004 f8c2 	bl	8005658 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <main+0x28>
 80014d6:	bf00      	nop
 80014d8:	20021658 	.word	0x20021658

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	; 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2230      	movs	r2, #48	; 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f018 f89e 	bl	801962c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <SystemClock_Config+0xd4>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	4a2a      	ldr	r2, [pc, #168]	; (80015b0 <SystemClock_Config+0xd4>)
 8001506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150a:	6413      	str	r3, [r2, #64]	; 0x40
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <SystemClock_Config+0xd4>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <SystemClock_Config+0xd8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <SystemClock_Config+0xd8>)
 800151e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <SystemClock_Config+0xd8>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001530:	2301      	movs	r3, #1
 8001532:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001542:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001544:	2319      	movs	r3, #25
 8001546:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001548:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800154c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800154e:	2302      	movs	r3, #2
 8001550:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001552:	2302      	movs	r3, #2
 8001554:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0320 	add.w	r3, r7, #32
 800155a:	4618      	mov	r0, r3
 800155c:	f001 ff3a 	bl	80033d4 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001566:	f000 f839 	bl	80015dc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800156a:	f001 fee3 	bl	8003334 <HAL_PWREx_EnableOverDrive>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001574:	f000 f832 	bl	80015dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	230f      	movs	r3, #15
 800157a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800157c:	2302      	movs	r3, #2
 800157e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001584:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001590:	f107 030c 	add.w	r3, r7, #12
 8001594:	2107      	movs	r1, #7
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f9c0 	bl	800391c <HAL_RCC_ClockConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80015a2:	f000 f81b 	bl	80015dc <Error_Handler>
  }
}
 80015a6:	bf00      	nop
 80015a8:	3750      	adds	r7, #80	; 0x50
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40007000 	.word	0x40007000

080015b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ca:	f000 fa5d 	bl	8001a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40010000 	.word	0x40010000

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_MspInit+0x4c>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_MspInit+0x4c>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_MspInit+0x4c>)
 800160c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001610:	6453      	str	r3, [r2, #68]	; 0x44
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_MspInit+0x4c>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	210f      	movs	r1, #15
 8001622:	f06f 0001 	mvn.w	r0, #1
 8001626:	f000 fb2b 	bl	8001c80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001648:	2200      	movs	r2, #0
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	2019      	movs	r0, #25
 800164e:	f000 fb17 	bl	8001c80 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001652:	2019      	movs	r0, #25
 8001654:	f000 fb30 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <HAL_InitTick+0xa0>)
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	4a1e      	ldr	r2, [pc, #120]	; (80016d8 <HAL_InitTick+0xa0>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6453      	str	r3, [r2, #68]	; 0x44
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_InitTick+0xa0>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001670:	f107 0210 	add.w	r2, r7, #16
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fb10 	bl	8003ca0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001680:	f002 fafa 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 8001684:	4603      	mov	r3, r0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800168a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_InitTick+0xa4>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	3b01      	subs	r3, #1
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_InitTick+0xa8>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <HAL_InitTick+0xac>)
 800169c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_InitTick+0xa8>)
 80016a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016a4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016a6:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_InitTick+0xa8>)
 80016a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016aa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <HAL_InitTick+0xa8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_InitTick+0xa8>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <HAL_InitTick+0xa8>)
 80016ba:	f002 fb23 	bl	8003d04 <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d104      	bne.n	80016ce <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80016c4:	4806      	ldr	r0, [pc, #24]	; (80016e0 <HAL_InitTick+0xa8>)
 80016c6:	f002 fb7f 	bl	8003dc8 <HAL_TIM_Base_Start_IT>
 80016ca:	4603      	mov	r3, r0
 80016cc:	e000      	b.n	80016d0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3730      	adds	r7, #48	; 0x30
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	431bde83 	.word	0x431bde83
 80016e0:	2002160c 	.word	0x2002160c
 80016e4:	40010000 	.word	0x40010000

080016e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <NMI_Handler+0x4>

080016ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <MemManage_Handler+0x4>

080016fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fe:	e7fe      	b.n	80016fe <BusFault_Handler+0x4>

08001700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <UsageFault_Handler+0x4>

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800171a:	f002 fd65 	bl	80041e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2002160c 	.word	0x2002160c

08001728 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <ETH_IRQHandler+0x10>)
 800172e:	f000 feb3 	bl	8002498 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20022fc4 	.word	0x20022fc4

0800173c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
	return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_kill>:

int _kill(int pid, int sig)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001756:	4b05      	ldr	r3, [pc, #20]	; (800176c <_kill+0x20>)
 8001758:	2216      	movs	r2, #22
 800175a:	601a      	str	r2, [r3, #0]
	return -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	200280fc 	.word	0x200280fc

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe5 	bl	800174c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001782:	e7fe      	b.n	8001782 <_exit+0x12>

08001784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001796:	f3af 8000 	nop.w
 800179a:	4601      	mov	r1, r0
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	b2ca      	uxtb	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	dbf0      	blt.n	8001796 <_read+0x12>
	}

return len;
 80017b4:	687b      	ldr	r3, [r7, #4]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_close>:
	}
	return len;
}

int _close(int file)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
	return -1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017e6:	605a      	str	r2, [r3, #4]
	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <_isatty>:

int _isatty(int file)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
	return 1;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
	return 0;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b480      	push	{r7}
 800182a:	b087      	sub	sp, #28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	; (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d205      	bcs.n	8001864 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <_sbrk+0x6c>)
 800185a:	220c      	movs	r2, #12
 800185c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e009      	b.n	8001878 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <_sbrk+0x64>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4413      	add	r3, r2
 8001872:	4a06      	ldr	r2, [pc, #24]	; (800188c <_sbrk+0x64>)
 8001874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001876:	68fb      	ldr	r3, [r7, #12]
}
 8001878:	4618      	mov	r0, r3
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20050000 	.word	0x20050000
 8001888:	00004000 	.word	0x00004000
 800188c:	20000e64 	.word	0x20000e64
 8001890:	20028110 	.word	0x20028110
 8001894:	200280fc 	.word	0x200280fc

08001898 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <SystemInit+0x28>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <SystemInit+0x28>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <SystemInit+0x28>)
 80018ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018b2:	609a      	str	r2, [r3, #8]
#endif
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <MX_TIM12_Init>:

TIM_HandleTypeDef htim12;

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]
 80018da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <MX_TIM12_Init+0x80>)
 80018de:	4a1a      	ldr	r2, [pc, #104]	; (8001948 <MX_TIM12_Init+0x84>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 80018e2:	4b18      	ldr	r3, [pc, #96]	; (8001944 <MX_TIM12_Init+0x80>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b16      	ldr	r3, [pc, #88]	; (8001944 <MX_TIM12_Init+0x80>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 80018ee:	4b15      	ldr	r3, [pc, #84]	; (8001944 <MX_TIM12_Init+0x80>)
 80018f0:	2263      	movs	r2, #99	; 0x63
 80018f2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <MX_TIM12_Init+0x80>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <MX_TIM12_Init+0x80>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001900:	4810      	ldr	r0, [pc, #64]	; (8001944 <MX_TIM12_Init+0x80>)
 8001902:	f002 fad9 	bl	8003eb8 <HAL_TIM_PWM_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 800190c:	f7ff fe66 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001910:	2360      	movs	r3, #96	; 0x60
 8001912:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001918:	2300      	movs	r3, #0
 800191a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2200      	movs	r2, #0
 8001924:	4619      	mov	r1, r3
 8001926:	4807      	ldr	r0, [pc, #28]	; (8001944 <MX_TIM12_Init+0x80>)
 8001928:	f002 fd7e 	bl	8004428 <HAL_TIM_PWM_ConfigChannel>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001932:	f7ff fe53 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <MX_TIM12_Init+0x80>)
 8001938:	f000 f828 	bl	800198c <HAL_TIM_MspPostInit>

}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20021658 	.word	0x20021658
 8001948:	40001800 	.word	0x40001800

0800194c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <HAL_TIM_PWM_MspInit+0x38>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10b      	bne.n	8001976 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_TIM_PWM_MspInit+0x3c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_TIM_PWM_MspInit+0x3c>)
 8001964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_TIM_PWM_MspInit+0x3c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001976:	bf00      	nop
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40001800 	.word	0x40001800
 8001988:	40023800 	.word	0x40023800

0800198c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_TIM_MspPostInit+0x64>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d11b      	bne.n	80019e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_TIM_MspPostInit+0x68>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a10      	ldr	r2, [pc, #64]	; (80019f4 <HAL_TIM_MspPostInit+0x68>)
 80019b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_TIM_MspPostInit+0x68>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c6:	2340      	movs	r3, #64	; 0x40
 80019c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80019d6:	2309      	movs	r3, #9
 80019d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <HAL_TIM_MspPostInit+0x6c>)
 80019e2:	f001 fafb 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3720      	adds	r7, #32
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40001800 	.word	0x40001800
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40021c00 	.word	0x40021c00

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a02:	e003      	b.n	8001a0c <LoopCopyDataInit>

08001a04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a0a:	3104      	adds	r1, #4

08001a0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a0e:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a14:	d3f6      	bcc.n	8001a04 <CopyDataInit>
  ldr  r2, =_sbss
 8001a16:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a18:	e002      	b.n	8001a20 <LoopFillZerobss>

08001a1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a1c:	f842 3b04 	str.w	r3, [r2], #4

08001a20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a24:	d3f9      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a26:	f7ff ff37 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f017 fda5 	bl	8019578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff fd3d 	bl	80014ac <main>
  bx  lr    
 8001a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a34:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001a38:	080229e8 	.word	0x080229e8
  ldr  r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a40:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8001a44:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8001a48:	20028110 	.word	0x20028110

08001a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_Init+0x34>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	; (8001a84 <HAL_Init+0x34>)
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a5e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_Init+0x34>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a07      	ldr	r2, [pc, #28]	; (8001a84 <HAL_Init+0x34>)
 8001a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f000 f8fc 	bl	8001c6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fde0 	bl	8001638 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001a78:	f7ff fdb6 	bl	80015e8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40023c00 	.word	0x40023c00

08001a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_IncTick+0x24>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_IncTick+0x24>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	200216a4 	.word	0x200216a4

08001ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <HAL_GetTick+0x14>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200216a4 	.word	0x200216a4

08001ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff ffee 	bl	8001ab0 <HAL_GetTick>
 8001ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d005      	beq.n	8001aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_Delay+0x44>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aee:	bf00      	nop
 8001af0:	f7ff ffde 	bl	8001ab0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d8f7      	bhi.n	8001af0 <HAL_Delay+0x28>
  {
  }
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008

08001b10 <__NVIC_SetPriorityGrouping>:
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x40>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	05fa0000 	.word	0x05fa0000

08001b58 <__NVIC_GetPriorityGrouping>:
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <__NVIC_GetPriorityGrouping+0x18>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	0a1b      	lsrs	r3, r3, #8
 8001b62:	f003 0307 	and.w	r3, r3, #7
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <__NVIC_EnableIRQ>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	db0b      	blt.n	8001b9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	f003 021f 	and.w	r2, r3, #31
 8001b8c:	4907      	ldr	r1, [pc, #28]	; (8001bac <__NVIC_EnableIRQ+0x38>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2001      	movs	r0, #1
 8001b96:	fa00 f202 	lsl.w	r2, r0, r2
 8001b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000e100 	.word	0xe000e100

08001bb0 <__NVIC_SetPriority>:
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	db0a      	blt.n	8001bda <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	490c      	ldr	r1, [pc, #48]	; (8001bfc <__NVIC_SetPriority+0x4c>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	0112      	lsls	r2, r2, #4
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001bd8:	e00a      	b.n	8001bf0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4908      	ldr	r1, [pc, #32]	; (8001c00 <__NVIC_SetPriority+0x50>)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	3b04      	subs	r3, #4
 8001be8:	0112      	lsls	r2, r2, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	440b      	add	r3, r1
 8001bee:	761a      	strb	r2, [r3, #24]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000e100 	.word	0xe000e100
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <NVIC_EncodePriority>:
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	f1c3 0307 	rsb	r3, r3, #7
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	bf28      	it	cs
 8001c22:	2304      	movcs	r3, #4
 8001c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d902      	bls.n	8001c34 <NVIC_EncodePriority+0x30>
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3b03      	subs	r3, #3
 8001c32:	e000      	b.n	8001c36 <NVIC_EncodePriority+0x32>
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	f04f 32ff 	mov.w	r2, #4294967295
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43da      	mvns	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	401a      	ands	r2, r3
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	43d9      	mvns	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	4313      	orrs	r3, r2
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3724      	adds	r7, #36	; 0x24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff4c 	bl	8001b10 <__NVIC_SetPriorityGrouping>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c92:	f7ff ff61 	bl	8001b58 <__NVIC_GetPriorityGrouping>
 8001c96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	6978      	ldr	r0, [r7, #20]
 8001c9e:	f7ff ffb1 	bl	8001c04 <NVIC_EncodePriority>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff80 	bl	8001bb0 <__NVIC_SetPriority>
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff ff54 	bl	8001b74 <__NVIC_EnableIRQ>
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001ce4:	4ba9      	ldr	r3, [pc, #676]	; (8001f8c <HAL_ETH_Init+0x2b8>)
 8001ce6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e181      	b.n	8001ffe <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f003 f874 	bl	8004dfc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	4b9e      	ldr	r3, [pc, #632]	; (8001f90 <HAL_ETH_Init+0x2bc>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	4a9d      	ldr	r2, [pc, #628]	; (8001f90 <HAL_ETH_Init+0x2bc>)
 8001d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d20:	4b9b      	ldr	r3, [pc, #620]	; (8001f90 <HAL_ETH_Init+0x2bc>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d2c:	4b99      	ldr	r3, [pc, #612]	; (8001f94 <HAL_ETH_Init+0x2c0>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a98      	ldr	r2, [pc, #608]	; (8001f94 <HAL_ETH_Init+0x2c0>)
 8001d32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d36:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d38:	4b96      	ldr	r3, [pc, #600]	; (8001f94 <HAL_ETH_Init+0x2c0>)
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4994      	ldr	r1, [pc, #592]	; (8001f94 <HAL_ETH_Init+0x2c0>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d5c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d5e:	f7ff fea7 	bl	8001ab0 <HAL_GetTick>
 8001d62:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d64:	e011      	b.n	8001d8a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001d66:	f7ff fea3 	bl	8001ab0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d74:	d909      	bls.n	8001d8a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2203      	movs	r2, #3
 8001d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e139      	b.n	8001ffe <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e4      	bne.n	8001d66 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f023 031c 	bic.w	r3, r3, #28
 8001daa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001dac:	f001 ff58 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8001db0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4a78      	ldr	r2, [pc, #480]	; (8001f98 <HAL_ETH_Init+0x2c4>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d908      	bls.n	8001dcc <HAL_ETH_Init+0xf8>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4a77      	ldr	r2, [pc, #476]	; (8001f9c <HAL_ETH_Init+0x2c8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d804      	bhi.n	8001dcc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e027      	b.n	8001e1c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	4a73      	ldr	r2, [pc, #460]	; (8001f9c <HAL_ETH_Init+0x2c8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d908      	bls.n	8001de6 <HAL_ETH_Init+0x112>
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	4a6d      	ldr	r2, [pc, #436]	; (8001f8c <HAL_ETH_Init+0x2b8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d204      	bcs.n	8001de6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f043 030c 	orr.w	r3, r3, #12
 8001de2:	61fb      	str	r3, [r7, #28]
 8001de4:	e01a      	b.n	8001e1c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4a68      	ldr	r2, [pc, #416]	; (8001f8c <HAL_ETH_Init+0x2b8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d303      	bcc.n	8001df6 <HAL_ETH_Init+0x122>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4a6b      	ldr	r2, [pc, #428]	; (8001fa0 <HAL_ETH_Init+0x2cc>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d911      	bls.n	8001e1a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	4a69      	ldr	r2, [pc, #420]	; (8001fa0 <HAL_ETH_Init+0x2cc>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d908      	bls.n	8001e10 <HAL_ETH_Init+0x13c>
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4a68      	ldr	r2, [pc, #416]	; (8001fa4 <HAL_ETH_Init+0x2d0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d804      	bhi.n	8001e10 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	61fb      	str	r3, [r7, #28]
 8001e0e:	e005      	b.n	8001e1c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f043 0310 	orr.w	r3, r3, #16
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	e000      	b.n	8001e1c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001e1a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001e24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e28:	2100      	movs	r1, #0
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fc17 	bl	800265e <HAL_ETH_WritePHYRegister>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001e3a:	6939      	ldr	r1, [r7, #16]
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fdcd 	bl	80029dc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e0d7      	b.n	8001ffe <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001e4e:	20ff      	movs	r0, #255	; 0xff
 8001e50:	f7ff fe3a 	bl	8001ac8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a5 	beq.w	8001fa8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e5e:	f7ff fe27 	bl	8001ab0 <HAL_GetTick>
 8001e62:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	461a      	mov	r2, r3
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fb8e 	bl	800258e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001e72:	f7ff fe1d 	bl	8001ab0 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d90f      	bls.n	8001ea4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e88:	6939      	ldr	r1, [r7, #16]
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fda6 	bl	80029dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e0ac      	b.n	8001ffe <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0da      	beq.n	8001e64 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fbd2 	bl	800265e <HAL_ETH_WritePHYRegister>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00b      	beq.n	8001ed8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001ec4:	6939      	ldr	r1, [r7, #16]
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fd88 	bl	80029dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e092      	b.n	8001ffe <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7ff fdea 	bl	8001ab0 <HAL_GetTick>
 8001edc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fb51 	bl	800258e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001eec:	f7ff fde0 	bl	8001ab0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d90f      	bls.n	8001f1e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fd69 	bl	80029dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e06f      	b.n	8001ffe <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0320 	and.w	r3, r3, #32
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0da      	beq.n	8001ede <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	2110      	movs	r1, #16
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 fb2c 	bl	800258e <HAL_ETH_ReadPHYRegister>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00b      	beq.n	8001f54 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fd4a 	bl	80029dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f50:	2301      	movs	r3, #1
 8001f52:	e054      	b.n	8001ffe <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f64:	60da      	str	r2, [r3, #12]
 8001f66:	e002      	b.n	8001f6e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
 8001f7e:	e035      	b.n	8001fec <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	e030      	b.n	8001fec <HAL_ETH_Init+0x318>
 8001f8a:	bf00      	nop
 8001f8c:	03938700 	.word	0x03938700
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	01312cff 	.word	0x01312cff
 8001f9c:	02160ebf 	.word	0x02160ebf
 8001fa0:	05f5e0ff 	.word	0x05f5e0ff
 8001fa4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 fb4c 	bl	800265e <HAL_ETH_WritePHYRegister>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00b      	beq.n	8001fe4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001fd0:	6939      	ldr	r1, [r7, #16]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 fd02 	bl	80029dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e00c      	b.n	8001ffe <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001fe4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001fe8:	f7ff fd6e 	bl	8001ac8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001fec:	6939      	ldr	r1, [r7, #16]
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fcf4 	bl	80029dc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3720      	adds	r7, #32
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop

08002008 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_ETH_DMATxDescListInit+0x20>
 8002024:	2302      	movs	r3, #2
 8002026:	e052      	b.n	80020ce <HAL_ETH_DMATxDescListInit+0xc6>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	68ba      	ldr	r2, [r7, #8]
 800203c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e030      	b.n	80020a6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	015b      	lsls	r3, r3, #5
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	4413      	add	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002054:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	461a      	mov	r2, r3
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	429a      	cmp	r2, r3
 8002086:	d208      	bcs.n	800209a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	015b      	lsls	r3, r3, #5
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4413      	add	r3, r2
 8002092:	461a      	mov	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	e002      	b.n	80020a0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	3301      	adds	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d3ca      	bcc.n	8002044 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f241 0310 	movw	r3, #4112	; 0x1010
 80020b8:	440b      	add	r3, r1
 80020ba:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr

080020da <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80020da:	b480      	push	{r7}
 80020dc:	b087      	sub	sp, #28
 80020de:	af00      	add	r7, sp, #0
 80020e0:	60f8      	str	r0, [r7, #12]
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_ETH_DMARxDescListInit+0x20>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e056      	b.n	80021a8 <HAL_ETH_DMARxDescListInit+0xce>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	e034      	b.n	8002180 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	015b      	lsls	r3, r3, #5
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4413      	add	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002126:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800212e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	461a      	mov	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	429a      	cmp	r2, r3
 8002160:	d208      	bcs.n	8002174 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	3301      	adds	r3, #1
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	4413      	add	r3, r2
 800216c:	461a      	mov	r2, r3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	e002      	b.n	800217a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d3c6      	bcc.n	8002116 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	f241 030c 	movw	r3, #4108	; 0x100c
 8002192:	440b      	add	r3, r1
 8002194:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d101      	bne.n	80021d8 <HAL_ETH_TransmitFrame+0x24>
 80021d4:	2302      	movs	r3, #2
 80021d6:	e0cd      	b.n	8002374 <HAL_ETH_TransmitFrame+0x1c0>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d109      	bne.n	8002202 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80021fe:	2301      	movs	r3, #1
 8002200:	e0b8      	b.n	8002374 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	da09      	bge.n	8002220 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2212      	movs	r2, #18
 8002210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0a9      	b.n	8002374 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002226:	4293      	cmp	r3, r2
 8002228:	d915      	bls.n	8002256 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	4a54      	ldr	r2, [pc, #336]	; (8002380 <HAL_ETH_TransmitFrame+0x1cc>)
 800222e:	fba2 2303 	umull	r2, r3, r2, r3
 8002232:	0a9b      	lsrs	r3, r3, #10
 8002234:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	4b51      	ldr	r3, [pc, #324]	; (8002380 <HAL_ETH_TransmitFrame+0x1cc>)
 800223a:	fba3 1302 	umull	r1, r3, r3, r2
 800223e:	0a9b      	lsrs	r3, r3, #10
 8002240:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	e001      	b.n	800225a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d11c      	bne.n	800229a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800226e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800227a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800228a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	461a      	mov	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	62da      	str	r2, [r3, #44]	; 0x2c
 8002298:	e04b      	b.n	8002332 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e044      	b.n	800232a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022ae:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d107      	bne.n	80022c6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022c4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022ce:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d116      	bne.n	8002308 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80022e8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	4a25      	ldr	r2, [pc, #148]	; (8002384 <HAL_ETH_TransmitFrame+0x1d0>)
 80022ee:	fb02 f203 	mul.w	r2, r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80022fa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002306:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002316:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3301      	adds	r3, #1
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	429a      	cmp	r2, r3
 8002330:	d3b6      	bcc.n	80022a0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f241 0314 	movw	r3, #4116	; 0x1014
 800233a:	4413      	add	r3, r2
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00d      	beq.n	8002362 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	f241 0314 	movw	r3, #4116	; 0x1014
 800234e:	4413      	add	r3, r2
 8002350:	2204      	movs	r2, #4
 8002352:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	f241 0304 	movw	r3, #4100	; 0x1004
 800235c:	4413      	add	r3, r2
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	ac02b00b 	.word	0xac02b00b
 8002384:	fffffa0c 	.word	0xfffffa0c

08002388 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800239e:	2302      	movs	r3, #2
 80023a0:	e074      	b.n	800248c <HAL_ETH_GetReceivedFrame_IT+0x104>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2202      	movs	r2, #2
 80023ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80023b2:	e05a      	b.n	800246a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c8:	d10d      	bne.n	80023e6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
 80023e4:	e041      	b.n	800246a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	461a      	mov	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	; 0x28
 800240a:	e02e      	b.n	800246a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	2b01      	cmp	r3, #1
 8002424:	d103      	bne.n	800242e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800243a:	1f1a      	subs	r2, r3, #4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	461a      	mov	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e010      	b.n	800248c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	db02      	blt.n	800247a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b03      	cmp	r3, #3
 8002478:	d99c      	bls.n	80023b4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	f241 0314 	movw	r3, #4116	; 0x1014
 80024a8:	4413      	add	r3, r2
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b40      	cmp	r3, #64	; 0x40
 80024b2:	d112      	bne.n	80024da <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f002 fd43 	bl	8004f40 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	f241 0314 	movw	r3, #4116	; 0x1014
 80024c2:	4413      	add	r3, r2
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024d8:	e01b      	b.n	8002512 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	f241 0314 	movw	r3, #4116	; 0x1014
 80024e2:	4413      	add	r3, r2
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d111      	bne.n	8002512 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f839 	bl	8002566 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80024fc:	4413      	add	r3, r2
 80024fe:	2201      	movs	r2, #1
 8002500:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f241 0314 	movw	r3, #4116	; 0x1014
 800251a:	4413      	add	r3, r2
 800251c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002520:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	f241 0314 	movw	r3, #4116	; 0x1014
 800252a:	4413      	add	r3, r2
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002536:	d112      	bne.n	800255e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f81e 	bl	800257a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	f241 0314 	movw	r3, #4116	; 0x1014
 8002546:	4413      	add	r3, r2
 8002548:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800254c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	460b      	mov	r3, r1
 8002598:	607a      	str	r2, [r7, #4]
 800259a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b82      	cmp	r3, #130	; 0x82
 80025ae:	d101      	bne.n	80025b4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
 80025b2:	e050      	b.n	8002656 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2282      	movs	r2, #130	; 0x82
 80025b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f003 031c 	and.w	r3, r3, #28
 80025ca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8a1b      	ldrh	r3, [r3, #16]
 80025d0:	02db      	lsls	r3, r3, #11
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f023 0302 	bic.w	r3, r3, #2
 80025ee:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002600:	f7ff fa56 	bl	8001ab0 <HAL_GetTick>
 8002604:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002606:	e015      	b.n	8002634 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002608:	f7ff fa52 	bl	8001ab0 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002616:	d309      	bcc.n	800262c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e014      	b.n	8002656 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e4      	bne.n	8002608 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	b29b      	uxth	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b086      	sub	sp, #24
 8002662:	af00      	add	r7, sp, #0
 8002664:	60f8      	str	r0, [r7, #12]
 8002666:	460b      	mov	r3, r1
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b42      	cmp	r3, #66	; 0x42
 800267e:	d101      	bne.n	8002684 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002680:	2302      	movs	r3, #2
 8002682:	e04e      	b.n	8002722 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2242      	movs	r2, #66	; 0x42
 8002688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f003 031c 	and.w	r3, r3, #28
 800269a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8a1b      	ldrh	r3, [r3, #16]
 80026a0:	02db      	lsls	r3, r3, #11
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80026aa:	897b      	ldrh	r3, [r7, #10]
 80026ac:	019b      	lsls	r3, r3, #6
 80026ae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026da:	f7ff f9e9 	bl	8001ab0 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026e0:	e015      	b.n	800270e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80026e2:	f7ff f9e5 	bl	8001ab0 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d309      	bcc.n	8002706 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e00d      	b.n	8002722 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1e4      	bne.n	80026e2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_ETH_Start+0x16>
 800273c:	2302      	movs	r3, #2
 800273e:	e01f      	b.n	8002780 <HAL_ETH_Start+0x56>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb45 	bl	8002de0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fb7c 	bl	8002e54 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fc13 	bl	8002f88 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 fbb0 	bl	8002ec8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 fbdd 	bl	8002f28 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002796:	2b01      	cmp	r3, #1
 8002798:	d101      	bne.n	800279e <HAL_ETH_Stop+0x16>
 800279a:	2302      	movs	r3, #2
 800279c:	e01f      	b.n	80027de <HAL_ETH_Stop+0x56>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 fba2 	bl	8002ef8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fbcf 	bl	8002f58 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fb67 	bl	8002e8e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fbe1 	bl	8002f88 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fb27 	bl	8002e1a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_ETH_ConfigMAC+0x1c>
 8002800:	2302      	movs	r3, #2
 8002802:	e0e4      	b.n	80029ce <HAL_ETH_ConfigMAC+0x1e6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 80b1 	beq.w	800297e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4b6c      	ldr	r3, [pc, #432]	; (80029d8 <HAL_ETH_ConfigMAC+0x1f0>)
 8002828:	4013      	ands	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002834:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800283a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002840:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8002846:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800284c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002852:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002858:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800285e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002864:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800286a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002870:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8002876:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800288e:	2001      	movs	r0, #1
 8002890:	f7ff f91a 	bl	8001ac8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028a4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80028aa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80028b0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80028b6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80028bc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80028c2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80028ce:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80028d0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff f8f4 	bl	8001ac8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80028f0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028fa:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	f64f 7341 	movw	r3, #65345	; 0xff41
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002918:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800291e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002924:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800292a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002930:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002948:	2001      	movs	r0, #1
 800294a:	f7ff f8bd 	bl	8001ac8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800296e:	2001      	movs	r0, #1
 8002970:	f7ff f8aa 	bl	8001ac8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	61da      	str	r2, [r3, #28]
 800297c:	e01e      	b.n	80029bc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800298c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	4313      	orrs	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff f88a 	bl	8001ac8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	ff20810f 	.word	0xff20810f

080029dc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0b0      	sub	sp, #192	; 0xc0
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029f8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d103      	bne.n	8002a2a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a26:	663b      	str	r3, [r7, #96]	; 0x60
 8002a28:	e001      	b.n	8002a2e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002a2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a32:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002a34:	2300      	movs	r3, #0
 8002a36:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002a40:	2300      	movs	r3, #0
 8002a42:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002a48:	2340      	movs	r3, #64	; 0x40
 8002a4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002ab0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ab4:	4bab      	ldr	r3, [pc, #684]	; (8002d64 <ETH_MACDMAConfig+0x388>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002abc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002ac0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002ac4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002ac8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002ace:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002ad2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002ad6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002adc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ae0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002ae4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002ae8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002aec:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002aee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002af0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002af2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f7fe ffd9 	bl	8001ac8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b1e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b24:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002b28:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002b2e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002b34:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002b3a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002b40:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002b44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002b4c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002b4e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	f7fe ffb4 	bl	8001ac8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b68:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b72:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002b7c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002b88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b8c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b90:	4013      	ands	r3, r2
 8002b92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002b96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b9a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002b9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ba0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002ba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002ba6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002bac:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002bae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002bb2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002bb8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002bba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bcc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7fe ff75 	bl	8001ac8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002be6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002be8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002bec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7fe ff60 	bl	8001ac8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c10:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002c20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c24:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002c36:	2304      	movs	r3, #4
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002c40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c44:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002c46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002c4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c50:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002c56:	2300      	movs	r3, #0
 8002c58:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c66:	4413      	add	r3, r2
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002c6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <ETH_MACDMAConfig+0x38c>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c7a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c7e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002c80:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002c82:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002c84:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002c86:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002c88:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002c8a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002c8c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002c8e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002c90:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002c92:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002c96:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002c9a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002c9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cae:	4413      	add	r3, r2
 8002cb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cbe:	4413      	add	r3, r2
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	f7fe fefe 	bl	8001ac8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	f241 0318 	movw	r3, #4120	; 0x1018
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cda:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002ce0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002ce4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002ce8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002cec:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002cf2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002cf6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d04:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7fe fed7 	bl	8001ac8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d26:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d10d      	bne.n	8002d4c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	f241 031c 	movw	r3, #4124	; 0x101c
 8002d38:	4413      	add	r3, r2
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6811      	ldr	r1, [r2, #0]
 8002d40:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <ETH_MACDMAConfig+0x390>)
 8002d42:	431a      	orrs	r2, r3
 8002d44:	f241 031c 	movw	r3, #4124	; 0x101c
 8002d48:	440b      	add	r3, r1
 8002d4a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	461a      	mov	r2, r3
 8002d52:	2100      	movs	r1, #0
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f80b 	bl	8002d70 <ETH_MACAddressConfig>
}
 8002d5a:	bf00      	nop
 8002d5c:	37c0      	adds	r7, #192	; 0xc0
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	ff20810f 	.word	0xff20810f
 8002d68:	f8de3f23 	.word	0xf8de3f23
 8002d6c:	00010040 	.word	0x00010040

08002d70 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3305      	adds	r3, #5
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	3204      	adds	r2, #4
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <ETH_MACAddressConfig+0x68>)
 8002d92:	4413      	add	r3, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3303      	adds	r3, #3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	061a      	lsls	r2, r3, #24
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3302      	adds	r3, #2
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	041b      	lsls	r3, r3, #16
 8002daa:	431a      	orrs	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3301      	adds	r3, #1
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	4313      	orrs	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <ETH_MACAddressConfig+0x6c>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	6013      	str	r3, [r2, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40028040 	.word	0x40028040
 8002ddc:	40028044 	.word	0x40028044

08002de0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0208 	orr.w	r2, r2, #8
 8002dfa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e04:	2001      	movs	r0, #1
 8002e06:	f7fe fe5f 	bl	8001ac8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	601a      	str	r2, [r3, #0]
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0208 	bic.w	r2, r2, #8
 8002e34:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e3e:	2001      	movs	r0, #1
 8002e40:	f7fe fe42 	bl	8001ac8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	601a      	str	r2, [r3, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0204 	orr.w	r2, r2, #4
 8002e6e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f7fe fe25 	bl	8001ac8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	601a      	str	r2, [r3, #0]
}
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0204 	bic.w	r2, r2, #4
 8002ea8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f7fe fe08 	bl	8001ac8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	601a      	str	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ed8:	4413      	add	r3, r2
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6811      	ldr	r1, [r2, #0]
 8002ee0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ee4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ee8:	440b      	add	r3, r1
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f08:	4413      	add	r3, r2
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6811      	ldr	r1, [r2, #0]
 8002f10:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f14:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f18:	440b      	add	r3, r1
 8002f1a:	601a      	str	r2, [r3, #0]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	f043 0202 	orr.w	r2, r3, #2
 8002f44:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f48:	440b      	add	r3, r1
 8002f4a:	601a      	str	r2, [r3, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f68:	4413      	add	r3, r2
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6811      	ldr	r1, [r2, #0]
 8002f70:	f023 0202 	bic.w	r2, r3, #2
 8002f74:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f78:	440b      	add	r3, r1
 8002f7a:	601a      	str	r2, [r3, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f9c:	4413      	add	r3, r2
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002fa8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fac:	440b      	add	r3, r1
 8002fae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fb8:	4413      	add	r3, r2
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7fe fd82 	bl	8001ac8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6819      	ldr	r1, [r3, #0]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	f241 0318 	movw	r3, #4120	; 0x1018
 8002fce:	440b      	add	r3, r1
 8002fd0:	601a      	str	r2, [r3, #0]
}
 8002fd2:	bf00      	nop
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
 8002ffa:	e175      	b.n	80032e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8164 	bne.w	80032e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d00b      	beq.n	800303a <HAL_GPIO_Init+0x5e>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800302e:	2b11      	cmp	r3, #17
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b12      	cmp	r3, #18
 8003038:	d130      	bne.n	800309c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	2203      	movs	r2, #3
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4013      	ands	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003070:	2201      	movs	r2, #1
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	091b      	lsrs	r3, r3, #4
 8003086:	f003 0201 	and.w	r2, r3, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x100>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b12      	cmp	r3, #18
 80030da:	d123      	bne.n	8003124 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	08da      	lsrs	r2, r3, #3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3208      	adds	r2, #8
 80030e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	220f      	movs	r2, #15
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	08da      	lsrs	r2, r3, #3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3208      	adds	r2, #8
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0203 	and.w	r2, r3, #3
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 80be 	beq.w	80032e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	4b66      	ldr	r3, [pc, #408]	; (8003300 <HAL_GPIO_Init+0x324>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a65      	ldr	r2, [pc, #404]	; (8003300 <HAL_GPIO_Init+0x324>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_GPIO_Init+0x324>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800317e:	4a61      	ldr	r2, [pc, #388]	; (8003304 <HAL_GPIO_Init+0x328>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_GPIO_Init+0x32c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d037      	beq.n	800321a <HAL_GPIO_Init+0x23e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a57      	ldr	r2, [pc, #348]	; (800330c <HAL_GPIO_Init+0x330>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d031      	beq.n	8003216 <HAL_GPIO_Init+0x23a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a56      	ldr	r2, [pc, #344]	; (8003310 <HAL_GPIO_Init+0x334>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02b      	beq.n	8003212 <HAL_GPIO_Init+0x236>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a55      	ldr	r2, [pc, #340]	; (8003314 <HAL_GPIO_Init+0x338>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d025      	beq.n	800320e <HAL_GPIO_Init+0x232>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a54      	ldr	r2, [pc, #336]	; (8003318 <HAL_GPIO_Init+0x33c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d01f      	beq.n	800320a <HAL_GPIO_Init+0x22e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a53      	ldr	r2, [pc, #332]	; (800331c <HAL_GPIO_Init+0x340>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d019      	beq.n	8003206 <HAL_GPIO_Init+0x22a>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_GPIO_Init+0x344>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_GPIO_Init+0x226>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a51      	ldr	r2, [pc, #324]	; (8003324 <HAL_GPIO_Init+0x348>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00d      	beq.n	80031fe <HAL_GPIO_Init+0x222>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a50      	ldr	r2, [pc, #320]	; (8003328 <HAL_GPIO_Init+0x34c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d007      	beq.n	80031fa <HAL_GPIO_Init+0x21e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4f      	ldr	r2, [pc, #316]	; (800332c <HAL_GPIO_Init+0x350>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d101      	bne.n	80031f6 <HAL_GPIO_Init+0x21a>
 80031f2:	2309      	movs	r3, #9
 80031f4:	e012      	b.n	800321c <HAL_GPIO_Init+0x240>
 80031f6:	230a      	movs	r3, #10
 80031f8:	e010      	b.n	800321c <HAL_GPIO_Init+0x240>
 80031fa:	2308      	movs	r3, #8
 80031fc:	e00e      	b.n	800321c <HAL_GPIO_Init+0x240>
 80031fe:	2307      	movs	r3, #7
 8003200:	e00c      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003202:	2306      	movs	r3, #6
 8003204:	e00a      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003206:	2305      	movs	r3, #5
 8003208:	e008      	b.n	800321c <HAL_GPIO_Init+0x240>
 800320a:	2304      	movs	r3, #4
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x240>
 800320e:	2303      	movs	r3, #3
 8003210:	e004      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003212:	2302      	movs	r3, #2
 8003214:	e002      	b.n	800321c <HAL_GPIO_Init+0x240>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_GPIO_Init+0x240>
 800321a:	2300      	movs	r3, #0
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	f002 0203 	and.w	r2, r2, #3
 8003222:	0092      	lsls	r2, r2, #2
 8003224:	4093      	lsls	r3, r2
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800322c:	4935      	ldr	r1, [pc, #212]	; (8003304 <HAL_GPIO_Init+0x328>)
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	089b      	lsrs	r3, r3, #2
 8003232:	3302      	adds	r3, #2
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800323a:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_GPIO_Init+0x354>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800325e:	4a34      	ldr	r2, [pc, #208]	; (8003330 <HAL_GPIO_Init+0x354>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003264:	4b32      	ldr	r3, [pc, #200]	; (8003330 <HAL_GPIO_Init+0x354>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003288:	4a29      	ldr	r2, [pc, #164]	; (8003330 <HAL_GPIO_Init+0x354>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <HAL_GPIO_Init+0x354>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b2:	4a1f      	ldr	r2, [pc, #124]	; (8003330 <HAL_GPIO_Init+0x354>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b8:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_GPIO_Init+0x354>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <HAL_GPIO_Init+0x354>)
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3301      	adds	r3, #1
 80032e6:	61fb      	str	r3, [r7, #28]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	f67f ae86 	bls.w	8002ffc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40023800 	.word	0x40023800
 8003304:	40013800 	.word	0x40013800
 8003308:	40020000 	.word	0x40020000
 800330c:	40020400 	.word	0x40020400
 8003310:	40020800 	.word	0x40020800
 8003314:	40020c00 	.word	0x40020c00
 8003318:	40021000 	.word	0x40021000
 800331c:	40021400 	.word	0x40021400
 8003320:	40021800 	.word	0x40021800
 8003324:	40021c00 	.word	0x40021c00
 8003328:	40022000 	.word	0x40022000
 800332c:	40022400 	.word	0x40022400
 8003330:	40013c00 	.word	0x40013c00

08003334 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800333e:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	4a22      	ldr	r2, [pc, #136]	; (80033cc <HAL_PWREx_EnableOverDrive+0x98>)
 8003344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003348:	6413      	str	r3, [r2, #64]	; 0x40
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <HAL_PWREx_EnableOverDrive+0x98>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800335c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003360:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003362:	f7fe fba5 	bl	8001ab0 <HAL_GetTick>
 8003366:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003368:	e009      	b.n	800337e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800336a:	f7fe fba1 	bl	8001ab0 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003378:	d901      	bls.n	800337e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e022      	b.n	80033c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338a:	d1ee      	bne.n	800336a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003396:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003398:	f7fe fb8a 	bl	8001ab0 <HAL_GetTick>
 800339c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800339e:	e009      	b.n	80033b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033a0:	f7fe fb86 	bl	8001ab0 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ae:	d901      	bls.n	80033b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e007      	b.n	80033c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033c0:	d1ee      	bne.n	80033a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40007000 	.word	0x40007000

080033d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e291      	b.n	800390e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 8087 	beq.w	8003506 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f8:	4b96      	ldr	r3, [pc, #600]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b04      	cmp	r3, #4
 8003402:	d00c      	beq.n	800341e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003404:	4b93      	ldr	r3, [pc, #588]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 030c 	and.w	r3, r3, #12
 800340c:	2b08      	cmp	r3, #8
 800340e:	d112      	bne.n	8003436 <HAL_RCC_OscConfig+0x62>
 8003410:	4b90      	ldr	r3, [pc, #576]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003418:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341c:	d10b      	bne.n	8003436 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341e:	4b8d      	ldr	r3, [pc, #564]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d06c      	beq.n	8003504 <HAL_RCC_OscConfig+0x130>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d168      	bne.n	8003504 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e26b      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d106      	bne.n	800344e <HAL_RCC_OscConfig+0x7a>
 8003440:	4b84      	ldr	r3, [pc, #528]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a83      	ldr	r2, [pc, #524]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e02e      	b.n	80034ac <HAL_RCC_OscConfig+0xd8>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCC_OscConfig+0x9c>
 8003456:	4b7f      	ldr	r3, [pc, #508]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7e      	ldr	r2, [pc, #504]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800345c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	4b7c      	ldr	r3, [pc, #496]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7b      	ldr	r2, [pc, #492]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346c:	6013      	str	r3, [r2, #0]
 800346e:	e01d      	b.n	80034ac <HAL_RCC_OscConfig+0xd8>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0xc0>
 800347a:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a75      	ldr	r2, [pc, #468]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b73      	ldr	r3, [pc, #460]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a72      	ldr	r2, [pc, #456]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800348c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0xd8>
 8003494:	4b6f      	ldr	r3, [pc, #444]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800349a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a6b      	ldr	r2, [pc, #428]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fafc 	bl	8001ab0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe faf8 	bl	8001ab0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	; 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e21f      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ce:	4b61      	ldr	r3, [pc, #388]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0xe8>
 80034da:	e014      	b.n	8003506 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fae8 	bl	8001ab0 <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	e008      	b.n	80034f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e4:	f7fe fae4 	bl	8001ab0 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b64      	cmp	r3, #100	; 0x64
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e20b      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f6:	4b57      	ldr	r3, [pc, #348]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f0      	bne.n	80034e4 <HAL_RCC_OscConfig+0x110>
 8003502:	e000      	b.n	8003506 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d069      	beq.n	80035e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003512:	4b50      	ldr	r3, [pc, #320]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00b      	beq.n	8003536 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351e:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b08      	cmp	r3, #8
 8003528:	d11c      	bne.n	8003564 <HAL_RCC_OscConfig+0x190>
 800352a:	4b4a      	ldr	r3, [pc, #296]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d116      	bne.n	8003564 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_RCC_OscConfig+0x17a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e1df      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354e:	4b41      	ldr	r3, [pc, #260]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	493d      	ldr	r1, [pc, #244]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003562:	e040      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d023      	beq.n	80035b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800356c:	4b39      	ldr	r3, [pc, #228]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a38      	ldr	r2, [pc, #224]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe fa9a 	bl	8001ab0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7fe fa96 	bl	8001ab0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e1bd      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359e:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4929      	ldr	r1, [pc, #164]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
 80035b2:	e018      	b.n	80035e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b4:	4b27      	ldr	r3, [pc, #156]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a26      	ldr	r2, [pc, #152]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fa76 	bl	8001ab0 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c8:	f7fe fa72 	bl	8001ab0 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e199      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d038      	beq.n	8003664 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d019      	beq.n	800362e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	4a15      	ldr	r2, [pc, #84]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003606:	f7fe fa53 	bl	8001ab0 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800360e:	f7fe fa4f 	bl	8001ab0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e176      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003620:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x23a>
 800362c:	e01a      	b.n	8003664 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003632:	4a08      	ldr	r2, [pc, #32]	; (8003654 <HAL_RCC_OscConfig+0x280>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fe fa39 	bl	8001ab0 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003642:	f7fe fa35 	bl	8001ab0 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d903      	bls.n	8003658 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e15c      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
 8003654:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b91      	ldr	r3, [pc, #580]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1ee      	bne.n	8003642 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a4 	beq.w	80037ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003672:	4b8b      	ldr	r3, [pc, #556]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10d      	bne.n	800369a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	4b88      	ldr	r3, [pc, #544]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a87      	ldr	r2, [pc, #540]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369a:	4b82      	ldr	r3, [pc, #520]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80036a6:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7e      	ldr	r2, [pc, #504]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7fe f9fd 	bl	8001ab0 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7fe f9f9 	bl	8001ab0 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b64      	cmp	r3, #100	; 0x64
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e120      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036cc:	4b75      	ldr	r3, [pc, #468]	; (80038a4 <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x31a>
 80036e0:	4b6f      	ldr	r3, [pc, #444]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a6e      	ldr	r2, [pc, #440]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	e02d      	b.n	800374a <HAL_RCC_OscConfig+0x376>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x33c>
 80036f6:	4b6a      	ldr	r3, [pc, #424]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a69      	ldr	r2, [pc, #420]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	f023 0301 	bic.w	r3, r3, #1
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	4b67      	ldr	r3, [pc, #412]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a66      	ldr	r2, [pc, #408]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003708:	f023 0304 	bic.w	r3, r3, #4
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	e01c      	b.n	800374a <HAL_RCC_OscConfig+0x376>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b05      	cmp	r3, #5
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x35e>
 8003718:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a60      	ldr	r2, [pc, #384]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800371e:	f043 0304 	orr.w	r3, r3, #4
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
 8003724:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	4a5d      	ldr	r2, [pc, #372]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	6713      	str	r3, [r2, #112]	; 0x70
 8003730:	e00b      	b.n	800374a <HAL_RCC_OscConfig+0x376>
 8003732:	4b5b      	ldr	r3, [pc, #364]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a5a      	ldr	r2, [pc, #360]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
 800373e:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003744:	f023 0304 	bic.w	r3, r3, #4
 8003748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d015      	beq.n	800377e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003752:	f7fe f9ad 	bl	8001ab0 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003758:	e00a      	b.n	8003770 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375a:	f7fe f9a9 	bl	8001ab0 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	f241 3288 	movw	r2, #5000	; 0x1388
 8003768:	4293      	cmp	r3, r2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0ce      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	4b4b      	ldr	r3, [pc, #300]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0ee      	beq.n	800375a <HAL_RCC_OscConfig+0x386>
 800377c:	e014      	b.n	80037a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fe f997 	bl	8001ab0 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003784:	e00a      	b.n	800379c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003786:	f7fe f993 	bl	8001ab0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0b8      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800379c:	4b40      	ldr	r3, [pc, #256]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ee      	bne.n	8003786 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037a8:	7dfb      	ldrb	r3, [r7, #23]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d105      	bne.n	80037ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037ae:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80a4 	beq.w	800390c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c4:	4b36      	ldr	r3, [pc, #216]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d06b      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d149      	bne.n	800386c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a30      	ldr	r2, [pc, #192]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 80037de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e4:	f7fe f964 	bl	8001ab0 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe f960 	bl	8001ab0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e087      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69da      	ldr	r2, [r3, #28]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	019b      	lsls	r3, r3, #6
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	3b01      	subs	r3, #1
 8003824:	041b      	lsls	r3, r3, #16
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382c:	061b      	lsls	r3, r3, #24
 800382e:	4313      	orrs	r3, r2
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003832:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003836:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800383e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe f934 	bl	8001ab0 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800384c:	f7fe f930 	bl	8001ab0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e057      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b10      	ldr	r3, [pc, #64]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x478>
 800386a:	e04f      	b.n	800390c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0b      	ldr	r2, [pc, #44]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fe f91a 	bl	8001ab0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fe f916 	bl	8001ab0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e03d      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b03      	ldr	r3, [pc, #12]	; (80038a0 <HAL_RCC_OscConfig+0x4cc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x4ac>
 800389e:	e035      	b.n	800390c <HAL_RCC_OscConfig+0x538>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038a8:	4b1b      	ldr	r3, [pc, #108]	; (8003918 <HAL_RCC_OscConfig+0x544>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d028      	beq.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d121      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d11a      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d8:	4013      	ands	r3, r2
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d111      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	3b01      	subs	r3, #1
 80038f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40023800 	.word	0x40023800

0800391c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0d0      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b6a      	ldr	r3, [pc, #424]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d910      	bls.n	8003964 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b67      	ldr	r3, [pc, #412]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 020f 	bic.w	r2, r3, #15
 800394a:	4965      	ldr	r1, [pc, #404]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	4313      	orrs	r3, r2
 8003950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	4b63      	ldr	r3, [pc, #396]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e0b8      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d020      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800397c:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a58      	ldr	r2, [pc, #352]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003994:	4b53      	ldr	r3, [pc, #332]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800399e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a0:	4b50      	ldr	r3, [pc, #320]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	494d      	ldr	r1, [pc, #308]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d040      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b47      	ldr	r3, [pc, #284]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d115      	bne.n	80039fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e07f      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	4b41      	ldr	r3, [pc, #260]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e073      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b3d      	ldr	r3, [pc, #244]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e06b      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b39      	ldr	r3, [pc, #228]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4936      	ldr	r1, [pc, #216]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a10:	f7fe f84e 	bl	8001ab0 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7fe f84a 	bl	8001ab0 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e053      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d210      	bcs.n	8003a70 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 020f 	bic.w	r2, r3, #15
 8003a56:	4922      	ldr	r1, [pc, #136]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e032      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4b19      	ldr	r3, [pc, #100]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4916      	ldr	r1, [pc, #88]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	490e      	ldr	r1, [pc, #56]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aae:	f000 f821 	bl	8003af4 <HAL_RCC_GetSysClockFreq>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	490a      	ldr	r1, [pc, #40]	; (8003ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8003ac0:	5ccb      	ldrb	r3, [r1, r3]
 8003ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac6:	4a09      	ldr	r2, [pc, #36]	; (8003aec <HAL_RCC_ClockConfig+0x1d0>)
 8003ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003aca:	4b09      	ldr	r3, [pc, #36]	; (8003af0 <HAL_RCC_ClockConfig+0x1d4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fdb2 	bl	8001638 <HAL_InitTick>

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40023c00 	.word	0x40023c00
 8003ae4:	40023800 	.word	0x40023800
 8003ae8:	08022334 	.word	0x08022334
 8003aec:	20000000 	.word	0x20000000
 8003af0:	20000004 	.word	0x20000004

08003af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003af4:	b5b0      	push	{r4, r5, r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003afa:	2100      	movs	r1, #0
 8003afc:	6079      	str	r1, [r7, #4]
 8003afe:	2100      	movs	r1, #0
 8003b00:	60f9      	str	r1, [r7, #12]
 8003b02:	2100      	movs	r1, #0
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b06:	2100      	movs	r1, #0
 8003b08:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b0a:	4952      	ldr	r1, [pc, #328]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b0c:	6889      	ldr	r1, [r1, #8]
 8003b0e:	f001 010c 	and.w	r1, r1, #12
 8003b12:	2908      	cmp	r1, #8
 8003b14:	d00d      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x3e>
 8003b16:	2908      	cmp	r1, #8
 8003b18:	f200 8094 	bhi.w	8003c44 <HAL_RCC_GetSysClockFreq+0x150>
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x32>
 8003b20:	2904      	cmp	r1, #4
 8003b22:	d003      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x38>
 8003b24:	e08e      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b26:	4b4c      	ldr	r3, [pc, #304]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b28:	60bb      	str	r3, [r7, #8]
      break;
 8003b2a:	e08e      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b2c:	4b4b      	ldr	r3, [pc, #300]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b2e:	60bb      	str	r3, [r7, #8]
      break;
 8003b30:	e08b      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b32:	4948      	ldr	r1, [pc, #288]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b34:	6849      	ldr	r1, [r1, #4]
 8003b36:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b3a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b3c:	4945      	ldr	r1, [pc, #276]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b3e:	6849      	ldr	r1, [r1, #4]
 8003b40:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b44:	2900      	cmp	r1, #0
 8003b46:	d024      	beq.n	8003b92 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b48:	4942      	ldr	r1, [pc, #264]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b4a:	6849      	ldr	r1, [r1, #4]
 8003b4c:	0989      	lsrs	r1, r1, #6
 8003b4e:	4608      	mov	r0, r1
 8003b50:	f04f 0100 	mov.w	r1, #0
 8003b54:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b58:	f04f 0500 	mov.w	r5, #0
 8003b5c:	ea00 0204 	and.w	r2, r0, r4
 8003b60:	ea01 0305 	and.w	r3, r1, r5
 8003b64:	493d      	ldr	r1, [pc, #244]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b66:	fb01 f003 	mul.w	r0, r1, r3
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	fb01 f102 	mul.w	r1, r1, r2
 8003b70:	1844      	adds	r4, r0, r1
 8003b72:	493a      	ldr	r1, [pc, #232]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b74:	fba2 0101 	umull	r0, r1, r2, r1
 8003b78:	1863      	adds	r3, r4, r1
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	f7fd f8a0 	bl	8000cc8 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e04a      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	461a      	mov	r2, r3
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	ea02 0400 	and.w	r4, r2, r0
 8003baa:	ea03 0501 	and.w	r5, r3, r1
 8003bae:	4620      	mov	r0, r4
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	014b      	lsls	r3, r1, #5
 8003bbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bc0:	0142      	lsls	r2, r0, #5
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	1b00      	subs	r0, r0, r4
 8003bc8:	eb61 0105 	sbc.w	r1, r1, r5
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	018b      	lsls	r3, r1, #6
 8003bd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bda:	0182      	lsls	r2, r0, #6
 8003bdc:	1a12      	subs	r2, r2, r0
 8003bde:	eb63 0301 	sbc.w	r3, r3, r1
 8003be2:	f04f 0000 	mov.w	r0, #0
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	00d9      	lsls	r1, r3, #3
 8003bec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bf0:	00d0      	lsls	r0, r2, #3
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	1912      	adds	r2, r2, r4
 8003bf8:	eb45 0303 	adc.w	r3, r5, r3
 8003bfc:	f04f 0000 	mov.w	r0, #0
 8003c00:	f04f 0100 	mov.w	r1, #0
 8003c04:	0299      	lsls	r1, r3, #10
 8003c06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c0a:	0290      	lsls	r0, r2, #10
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	461a      	mov	r2, r3
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	f7fd f854 	bl	8000cc8 <__aeabi_uldivmod>
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	4613      	mov	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	3301      	adds	r3, #1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	60bb      	str	r3, [r7, #8]
      break;
 8003c42:	e002      	b.n	8003c4a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c44:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c46:	60bb      	str	r3, [r7, #8]
      break;
 8003c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bdb0      	pop	{r4, r5, r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	00f42400 	.word	0x00f42400
 8003c5c:	017d7840 	.word	0x017d7840

08003c60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000000 	.word	0x20000000

08003c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c7c:	f7ff fff0 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08022344 	.word	0x08022344

08003ca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	220f      	movs	r2, #15
 8003cae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0203 	and.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <HAL_RCC_GetClockConfig+0x60>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40023c00 	.word	0x40023c00

08003d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e049      	b.n	8003daa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f841 	bl	8003db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4610      	mov	r0, r2
 8003d44:	f000 fca8 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b083      	sub	sp, #12
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d001      	beq.n	8003de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e054      	b.n	8003e8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a26      	ldr	r2, [pc, #152]	; (8003e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d022      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x80>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0a:	d01d      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x80>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a22      	ldr	r2, [pc, #136]	; (8003e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d018      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x80>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a21      	ldr	r2, [pc, #132]	; (8003ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d013      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x80>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00e      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x80>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ea8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x80>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <HAL_TIM_Base_Start_IT+0xe4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d004      	beq.n	8003e48 <HAL_TIM_Base_Start_IT+0x80>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a1b      	ldr	r2, [pc, #108]	; (8003eb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d115      	bne.n	8003e74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	4b19      	ldr	r3, [pc, #100]	; (8003eb4 <HAL_TIM_Base_Start_IT+0xec>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b06      	cmp	r3, #6
 8003e58:	d015      	beq.n	8003e86 <HAL_TIM_Base_Start_IT+0xbe>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e60:	d011      	beq.n	8003e86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0201 	orr.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	e008      	b.n	8003e86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e000      	b.n	8003e88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	40010400 	.word	0x40010400
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40001800 	.word	0x40001800
 8003eb4:	00010007 	.word	0x00010007

08003eb8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e049      	b.n	8003f5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fd fd34 	bl	800194c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 fbce 	bl	8004698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_TIM_PWM_Start_IT+0x24>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e03c      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x9e>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d109      	bne.n	8003fa6 <HAL_TIM_PWM_Start_IT+0x3e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e02f      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x9e>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIM_PWM_Start_IT+0x58>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e022      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x9e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_PWM_Start_IT+0x72>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e015      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x9e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start_IT+0x8c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_TIM_PWM_Start_IT+0x9e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIM_PWM_Start_IT+0xa6>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e0d8      	b.n	80041c0 <HAL_TIM_PWM_Start_IT+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start_IT+0xb6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	e023      	b.n	8004066 <HAL_TIM_PWM_Start_IT+0xfe>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start_IT+0xc6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800402c:	e01b      	b.n	8004066 <HAL_TIM_PWM_Start_IT+0xfe>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start_IT+0xd6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800403c:	e013      	b.n	8004066 <HAL_TIM_PWM_Start_IT+0xfe>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b0c      	cmp	r3, #12
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start_IT+0xe6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800404c:	e00b      	b.n	8004066 <HAL_TIM_PWM_Start_IT+0xfe>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b10      	cmp	r3, #16
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start_IT+0xf6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800405c:	e003      	b.n	8004066 <HAL_TIM_PWM_Start_IT+0xfe>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b0c      	cmp	r3, #12
 800406a:	d841      	bhi.n	80040f0 <HAL_TIM_PWM_Start_IT+0x188>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_TIM_PWM_Start_IT+0x10c>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080040f1 	.word	0x080040f1
 800407c:	080040f1 	.word	0x080040f1
 8004080:	080040f1 	.word	0x080040f1
 8004084:	080040bb 	.word	0x080040bb
 8004088:	080040f1 	.word	0x080040f1
 800408c:	080040f1 	.word	0x080040f1
 8004090:	080040f1 	.word	0x080040f1
 8004094:	080040cd 	.word	0x080040cd
 8004098:	080040f1 	.word	0x080040f1
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	080040f1 	.word	0x080040f1
 80040a4:	080040df 	.word	0x080040df
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0202 	orr.w	r2, r2, #2
 80040b6:	60da      	str	r2, [r3, #12]
      break;
 80040b8:	e01b      	b.n	80040f2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0204 	orr.w	r2, r2, #4
 80040c8:	60da      	str	r2, [r3, #12]
      break;
 80040ca:	e012      	b.n	80040f2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0208 	orr.w	r2, r2, #8
 80040da:	60da      	str	r2, [r3, #12]
      break;
 80040dc:	e009      	b.n	80040f2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0210 	orr.w	r2, r2, #16
 80040ec:	60da      	str	r2, [r3, #12]
      break;
 80040ee:	e000      	b.n	80040f2 <HAL_TIM_PWM_Start_IT+0x18a>
    }

    default:
      break;
 80040f0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2201      	movs	r2, #1
 80040f8:	6839      	ldr	r1, [r7, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fdca 	bl	8004c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a30      	ldr	r2, [pc, #192]	; (80041c8 <HAL_TIM_PWM_Start_IT+0x260>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d004      	beq.n	8004114 <HAL_TIM_PWM_Start_IT+0x1ac>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <HAL_TIM_PWM_Start_IT+0x264>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_TIM_PWM_Start_IT+0x1b0>
 8004114:	2301      	movs	r3, #1
 8004116:	e000      	b.n	800411a <HAL_TIM_PWM_Start_IT+0x1b2>
 8004118:	2300      	movs	r3, #0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d007      	beq.n	800412e <HAL_TIM_PWM_Start_IT+0x1c6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a25      	ldr	r2, [pc, #148]	; (80041c8 <HAL_TIM_PWM_Start_IT+0x260>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d022      	beq.n	800417e <HAL_TIM_PWM_Start_IT+0x216>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004140:	d01d      	beq.n	800417e <HAL_TIM_PWM_Start_IT+0x216>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <HAL_TIM_PWM_Start_IT+0x268>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d018      	beq.n	800417e <HAL_TIM_PWM_Start_IT+0x216>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <HAL_TIM_PWM_Start_IT+0x26c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d013      	beq.n	800417e <HAL_TIM_PWM_Start_IT+0x216>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1f      	ldr	r2, [pc, #124]	; (80041d8 <HAL_TIM_PWM_Start_IT+0x270>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00e      	beq.n	800417e <HAL_TIM_PWM_Start_IT+0x216>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_TIM_PWM_Start_IT+0x264>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d009      	beq.n	800417e <HAL_TIM_PWM_Start_IT+0x216>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1b      	ldr	r2, [pc, #108]	; (80041dc <HAL_TIM_PWM_Start_IT+0x274>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_TIM_PWM_Start_IT+0x216>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a19      	ldr	r2, [pc, #100]	; (80041e0 <HAL_TIM_PWM_Start_IT+0x278>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d115      	bne.n	80041aa <HAL_TIM_PWM_Start_IT+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689a      	ldr	r2, [r3, #8]
 8004184:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8004186:	4013      	ands	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2b06      	cmp	r3, #6
 800418e:	d015      	beq.n	80041bc <HAL_TIM_PWM_Start_IT+0x254>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004196:	d011      	beq.n	80041bc <HAL_TIM_PWM_Start_IT+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0201 	orr.w	r2, r2, #1
 80041a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	e008      	b.n	80041bc <HAL_TIM_PWM_Start_IT+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0201 	orr.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e000      	b.n	80041be <HAL_TIM_PWM_Start_IT+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40010000 	.word	0x40010000
 80041cc:	40010400 	.word	0x40010400
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40000800 	.word	0x40000800
 80041d8:	40000c00 	.word	0x40000c00
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40001800 	.word	0x40001800
 80041e4:	00010007 	.word	0x00010007

080041e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d122      	bne.n	8004244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b02      	cmp	r3, #2
 800420a:	d11b      	bne.n	8004244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0202 	mvn.w	r2, #2
 8004214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	f003 0303 	and.w	r3, r3, #3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fa16 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fa08 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fa19 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b04      	cmp	r3, #4
 8004250:	d122      	bne.n	8004298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b04      	cmp	r3, #4
 800425e:	d11b      	bne.n	8004298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0204 	mvn.w	r2, #4
 8004268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9ec 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 8004284:	e005      	b.n	8004292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f9de 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f9ef 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d122      	bne.n	80042ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d11b      	bne.n	80042ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0208 	mvn.w	r2, #8
 80042bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2204      	movs	r2, #4
 80042c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9c2 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f9b4 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f9c5 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d122      	bne.n	8004340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b10      	cmp	r3, #16
 8004306:	d11b      	bne.n	8004340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f06f 0210 	mvn.w	r2, #16
 8004310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2208      	movs	r2, #8
 8004316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f998 	bl	800465c <HAL_TIM_IC_CaptureCallback>
 800432c:	e005      	b.n	800433a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f98a 	bl	8004648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f99b 	bl	8004670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b01      	cmp	r3, #1
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0201 	mvn.w	r2, #1
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fd f926 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004376:	2b80      	cmp	r3, #128	; 0x80
 8004378:	d10e      	bne.n	8004398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d107      	bne.n	8004398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fcad 	bl	8004cf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a6:	d10e      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b2:	2b80      	cmp	r3, #128	; 0x80
 80043b4:	d107      	bne.n	80043c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fca0 	bl	8004d06 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d0:	2b40      	cmp	r3, #64	; 0x40
 80043d2:	d10e      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043de:	2b40      	cmp	r3, #64	; 0x40
 80043e0:	d107      	bne.n	80043f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f949 	bl	8004684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d10e      	bne.n	800441e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0320 	and.w	r3, r3, #32
 800440a:	2b20      	cmp	r3, #32
 800440c:	d107      	bne.n	800441e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0220 	mvn.w	r2, #32
 8004416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 fc60 	bl	8004cde <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800441e:	bf00      	nop
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800443e:	2302      	movs	r3, #2
 8004440:	e0fd      	b.n	800463e <HAL_TIM_PWM_ConfigChannel+0x216>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b14      	cmp	r3, #20
 800444e:	f200 80f0 	bhi.w	8004632 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004452:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	080044ad 	.word	0x080044ad
 800445c:	08004633 	.word	0x08004633
 8004460:	08004633 	.word	0x08004633
 8004464:	08004633 	.word	0x08004633
 8004468:	080044ed 	.word	0x080044ed
 800446c:	08004633 	.word	0x08004633
 8004470:	08004633 	.word	0x08004633
 8004474:	08004633 	.word	0x08004633
 8004478:	0800452f 	.word	0x0800452f
 800447c:	08004633 	.word	0x08004633
 8004480:	08004633 	.word	0x08004633
 8004484:	08004633 	.word	0x08004633
 8004488:	0800456f 	.word	0x0800456f
 800448c:	08004633 	.word	0x08004633
 8004490:	08004633 	.word	0x08004633
 8004494:	08004633 	.word	0x08004633
 8004498:	080045b1 	.word	0x080045b1
 800449c:	08004633 	.word	0x08004633
 80044a0:	08004633 	.word	0x08004633
 80044a4:	08004633 	.word	0x08004633
 80044a8:	080045f1 	.word	0x080045f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f990 	bl	80047d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0208 	orr.w	r2, r2, #8
 80044c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0204 	bic.w	r2, r2, #4
 80044d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6999      	ldr	r1, [r3, #24]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	619a      	str	r2, [r3, #24]
      break;
 80044ea:	e0a3      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f9e2 	bl	80048bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	619a      	str	r2, [r3, #24]
      break;
 800452c:	e082      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fa39 	bl	80049ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0208 	orr.w	r2, r2, #8
 8004548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0204 	bic.w	r2, r2, #4
 8004558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69d9      	ldr	r1, [r3, #28]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	61da      	str	r2, [r3, #28]
      break;
 800456c:	e062      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fa8f 	bl	8004a98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69d9      	ldr	r1, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	021a      	lsls	r2, r3, #8
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	61da      	str	r2, [r3, #28]
      break;
 80045ae:	e041      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fac6 	bl	8004b48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0204 	bic.w	r2, r2, #4
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045ee:	e021      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 faf8 	bl	8004bec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800460a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004630:	e000      	b.n	8004634 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004632:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop

08004648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a40      	ldr	r2, [pc, #256]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d013      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d00f      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3d      	ldr	r2, [pc, #244]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a3c      	ldr	r2, [pc, #240]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3b      	ldr	r2, [pc, #236]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <TIM_Base_SetConfig+0x124>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d108      	bne.n	80046ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2f      	ldr	r2, [pc, #188]	; (80047ac <TIM_Base_SetConfig+0x114>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d02b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f8:	d027      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <TIM_Base_SetConfig+0x118>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d023      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <TIM_Base_SetConfig+0x11c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01f      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <TIM_Base_SetConfig+0x120>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d01b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a29      	ldr	r2, [pc, #164]	; (80047bc <TIM_Base_SetConfig+0x124>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d017      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <TIM_Base_SetConfig+0x128>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d013      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a27      	ldr	r2, [pc, #156]	; (80047c4 <TIM_Base_SetConfig+0x12c>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00f      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a26      	ldr	r2, [pc, #152]	; (80047c8 <TIM_Base_SetConfig+0x130>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d00b      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a25      	ldr	r2, [pc, #148]	; (80047cc <TIM_Base_SetConfig+0x134>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d007      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <TIM_Base_SetConfig+0x138>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d003      	beq.n	800474a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <TIM_Base_SetConfig+0x13c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d108      	bne.n	800475c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4313      	orrs	r3, r2
 800475a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	4313      	orrs	r3, r2
 8004768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <TIM_Base_SetConfig+0x114>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_Base_SetConfig+0xf8>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a0c      	ldr	r2, [pc, #48]	; (80047bc <TIM_Base_SetConfig+0x124>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d103      	bne.n	8004798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	615a      	str	r2, [r3, #20]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40010000 	.word	0x40010000
 80047b0:	40000400 	.word	0x40000400
 80047b4:	40000800 	.word	0x40000800
 80047b8:	40000c00 	.word	0x40000c00
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800
 80047cc:	40001800 	.word	0x40001800
 80047d0:	40001c00 	.word	0x40001c00
 80047d4:	40002000 	.word	0x40002000

080047d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0201 	bic.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <TIM_OC1_SetConfig+0xd8>)
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0303 	bic.w	r3, r3, #3
 800480e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0302 	bic.w	r3, r3, #2
 8004820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a21      	ldr	r2, [pc, #132]	; (80048b4 <TIM_OC1_SetConfig+0xdc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_OC1_SetConfig+0x64>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a20      	ldr	r2, [pc, #128]	; (80048b8 <TIM_OC1_SetConfig+0xe0>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d10c      	bne.n	8004856 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f023 0308 	bic.w	r3, r3, #8
 8004842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a16      	ldr	r2, [pc, #88]	; (80048b4 <TIM_OC1_SetConfig+0xdc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_OC1_SetConfig+0x8e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <TIM_OC1_SetConfig+0xe0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d111      	bne.n	800488a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	697a      	ldr	r2, [r7, #20]
 80048a2:	621a      	str	r2, [r3, #32]
}
 80048a4:	bf00      	nop
 80048a6:	371c      	adds	r7, #28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	fffeff8f 	.word	0xfffeff8f
 80048b4:	40010000 	.word	0x40010000
 80048b8:	40010400 	.word	0x40010400

080048bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	f023 0210 	bic.w	r2, r3, #16
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4b2e      	ldr	r3, [pc, #184]	; (80049a0 <TIM_OC2_SetConfig+0xe4>)
 80048e8:	4013      	ands	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	021b      	lsls	r3, r3, #8
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0320 	bic.w	r3, r3, #32
 8004906:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <TIM_OC2_SetConfig+0xe8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_OC2_SetConfig+0x68>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a22      	ldr	r2, [pc, #136]	; (80049a8 <TIM_OC2_SetConfig+0xec>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10d      	bne.n	8004940 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800493e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <TIM_OC2_SetConfig+0xe8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d003      	beq.n	8004950 <TIM_OC2_SetConfig+0x94>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <TIM_OC2_SetConfig+0xec>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d113      	bne.n	8004978 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004956:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	621a      	str	r2, [r3, #32]
}
 8004992:	bf00      	nop
 8004994:	371c      	adds	r7, #28
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	feff8fff 	.word	0xfeff8fff
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40010400 	.word	0x40010400

080049ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4b2d      	ldr	r3, [pc, #180]	; (8004a8c <TIM_OC3_SetConfig+0xe0>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a22      	ldr	r2, [pc, #136]	; (8004a90 <TIM_OC3_SetConfig+0xe4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_OC3_SetConfig+0x66>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <TIM_OC3_SetConfig+0xe8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d10d      	bne.n	8004a2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <TIM_OC3_SetConfig+0xe4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC3_SetConfig+0x92>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <TIM_OC3_SetConfig+0xe8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d113      	bne.n	8004a66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	fffeff8f 	.word	0xfffeff8f
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40010400 	.word	0x40010400

08004a98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4b1e      	ldr	r3, [pc, #120]	; (8004b3c <TIM_OC4_SetConfig+0xa4>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a13      	ldr	r2, [pc, #76]	; (8004b40 <TIM_OC4_SetConfig+0xa8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC4_SetConfig+0x68>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <TIM_OC4_SetConfig+0xac>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d109      	bne.n	8004b14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	019b      	lsls	r3, r3, #6
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	621a      	str	r2, [r3, #32]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	feff8fff 	.word	0xfeff8fff
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40010400 	.word	0x40010400

08004b48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4b1b      	ldr	r3, [pc, #108]	; (8004be0 <TIM_OC5_SetConfig+0x98>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <TIM_OC5_SetConfig+0x9c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_OC5_SetConfig+0x5e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a11      	ldr	r2, [pc, #68]	; (8004be8 <TIM_OC5_SetConfig+0xa0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d109      	bne.n	8004bba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	621a      	str	r2, [r3, #32]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	fffeff8f 	.word	0xfffeff8f
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40010400 	.word	0x40010400

08004bec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4b1c      	ldr	r3, [pc, #112]	; (8004c88 <TIM_OC6_SetConfig+0x9c>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	051b      	lsls	r3, r3, #20
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <TIM_OC6_SetConfig+0xa0>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_OC6_SetConfig+0x60>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <TIM_OC6_SetConfig+0xa4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d109      	bne.n	8004c60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	029b      	lsls	r3, r3, #10
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	621a      	str	r2, [r3, #32]
}
 8004c7a:	bf00      	nop
 8004c7c:	371c      	adds	r7, #28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	feff8fff 	.word	0xfeff8fff
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400

08004c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6a1a      	ldr	r2, [r3, #32]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	401a      	ands	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1a      	ldr	r2, [r3, #32]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f003 031f 	and.w	r3, r3, #31
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	621a      	str	r2, [r3, #32]
}
 8004cd2:	bf00      	nop
 8004cd4:	371c      	adds	r7, #28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004d1c:	b5b0      	push	{r4, r5, r7, lr}
 8004d1e:	b08e      	sub	sp, #56	; 0x38
 8004d20:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004d22:	2100      	movs	r1, #0
 8004d24:	2000      	movs	r0, #0
 8004d26:	f005 ff57 	bl	800abd8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004d2a:	4b2a      	ldr	r3, [pc, #168]	; (8004dd4 <MX_LWIP_Init+0xb8>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004d30:	4b29      	ldr	r3, [pc, #164]	; (8004dd8 <MX_LWIP_Init+0xbc>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004d36:	4b29      	ldr	r3, [pc, #164]	; (8004ddc <MX_LWIP_Init+0xc0>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004d3c:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <MX_LWIP_Init+0xc4>)
 8004d3e:	9302      	str	r3, [sp, #8]
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <MX_LWIP_Init+0xc8>)
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	4b24      	ldr	r3, [pc, #144]	; (8004ddc <MX_LWIP_Init+0xc0>)
 8004d4a:	4a23      	ldr	r2, [pc, #140]	; (8004dd8 <MX_LWIP_Init+0xbc>)
 8004d4c:	4921      	ldr	r1, [pc, #132]	; (8004dd4 <MX_LWIP_Init+0xb8>)
 8004d4e:	4826      	ldr	r0, [pc, #152]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004d50:	f007 fc9c 	bl	800c68c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004d54:	4824      	ldr	r0, [pc, #144]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004d56:	f007 fe53 	bl	800ca00 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004d5a:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004d5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d60:	089b      	lsrs	r3, r3, #2
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004d6c:	481e      	ldr	r0, [pc, #120]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004d6e:	f007 fe57 	bl	800ca20 <netif_set_up>
 8004d72:	e002      	b.n	8004d7a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004d74:	481c      	ldr	r0, [pc, #112]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004d76:	f007 febf 	bl	800caf8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004d7a:	491c      	ldr	r1, [pc, #112]	; (8004dec <MX_LWIP_Init+0xd0>)
 8004d7c:	481a      	ldr	r0, [pc, #104]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004d7e:	f007 ff55 	bl	800cc2c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004d82:	2300      	movs	r3, #0
 8004d84:	623b      	str	r3, [r7, #32]
 8004d86:	2300      	movs	r3, #0
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004d8a:	f107 0320 	add.w	r3, r7, #32
 8004d8e:	2101      	movs	r1, #1
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fd75 	bl	8005880 <osSemaphoreCreate>
 8004d96:	4603      	mov	r3, r0
 8004d98:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <MX_LWIP_Init+0xd4>)
 8004d9a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004d9c:	4b15      	ldr	r3, [pc, #84]	; (8004df4 <MX_LWIP_Init+0xd8>)
 8004d9e:	4a12      	ldr	r2, [pc, #72]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004da0:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004da2:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <MX_LWIP_Init+0xd4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a13      	ldr	r2, [pc, #76]	; (8004df4 <MX_LWIP_Init+0xd8>)
 8004da8:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <MX_LWIP_Init+0xdc>)
 8004dac:	1d3c      	adds	r4, r7, #4
 8004dae:	461d      	mov	r5, r3
 8004db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004db4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004db8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004dbc:	1d3b      	adds	r3, r7, #4
 8004dbe:	490d      	ldr	r1, [pc, #52]	; (8004df4 <MX_LWIP_Init+0xd8>)
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fc60 	bl	8005686 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004dc6:	4808      	ldr	r0, [pc, #32]	; (8004de8 <MX_LWIP_Init+0xcc>)
 8004dc8:	f010 fa10 	bl	80151ec <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004dcc:	bf00      	nop
 8004dce:	3728      	adds	r7, #40	; 0x28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bdb0      	pop	{r4, r5, r7, pc}
 8004dd4:	200216e8 	.word	0x200216e8
 8004dd8:	200216ec 	.word	0x200216ec
 8004ddc:	200216f0 	.word	0x200216f0
 8004de0:	0800aae9 	.word	0x0800aae9
 8004de4:	08005415 	.word	0x08005415
 8004de8:	200216b0 	.word	0x200216b0
 8004dec:	080054f9 	.word	0x080054f9
 8004df0:	20000e68 	.word	0x20000e68
 8004df4:	200216a8 	.word	0x200216a8
 8004df8:	0801ea18 	.word	0x0801ea18

08004dfc <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08e      	sub	sp, #56	; 0x38
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a44      	ldr	r2, [pc, #272]	; (8004f2c <HAL_ETH_MspInit+0x130>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	f040 8081 	bne.w	8004f22 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004e20:	4b43      	ldr	r3, [pc, #268]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	4a42      	ldr	r2, [pc, #264]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2c:	4b40      	ldr	r3, [pc, #256]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	4b3d      	ldr	r3, [pc, #244]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e42:	6313      	str	r3, [r2, #48]	; 0x30
 8004e44:	4b3a      	ldr	r3, [pc, #232]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	4a36      	ldr	r2, [pc, #216]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5c:	4b34      	ldr	r3, [pc, #208]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004e68:	4b31      	ldr	r3, [pc, #196]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	4a30      	ldr	r2, [pc, #192]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e72:	6313      	str	r3, [r2, #48]	; 0x30
 8004e74:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e80:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e86:	f043 0304 	orr.w	r3, r3, #4
 8004e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e8c:	4b28      	ldr	r3, [pc, #160]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e98:	4b25      	ldr	r3, [pc, #148]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9c:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <HAL_ETH_MspInit+0x134>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8004eb0:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ec2:	230b      	movs	r3, #11
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4819      	ldr	r0, [pc, #100]	; (8004f34 <HAL_ETH_MspInit+0x138>)
 8004ece:	f7fe f885 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004ed2:	2332      	movs	r3, #50	; 0x32
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eda:	2301      	movs	r3, #1
 8004edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ee2:	230b      	movs	r3, #11
 8004ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eea:	4619      	mov	r1, r3
 8004eec:	4812      	ldr	r0, [pc, #72]	; (8004f38 <HAL_ETH_MspInit+0x13c>)
 8004eee:	f7fe f875 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004ef2:	2386      	movs	r3, #134	; 0x86
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004efa:	2301      	movs	r3, #1
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004efe:	2303      	movs	r3, #3
 8004f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004f02:	230b      	movs	r3, #11
 8004f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	480b      	ldr	r0, [pc, #44]	; (8004f3c <HAL_ETH_MspInit+0x140>)
 8004f0e:	f7fe f865 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2105      	movs	r1, #5
 8004f16:	203d      	movs	r0, #61	; 0x3d
 8004f18:	f7fc feb2 	bl	8001c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004f1c:	203d      	movs	r0, #61	; 0x3d
 8004f1e:	f7fc fecb 	bl	8001cb8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004f22:	bf00      	nop
 8004f24:	3738      	adds	r7, #56	; 0x38
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40028000 	.word	0x40028000
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40021800 	.word	0x40021800
 8004f38:	40020800 	.word	0x40020800
 8004f3c:	40020000 	.word	0x40020000

08004f40 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <HAL_ETH_RxCpltCallback+0x1c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fd17 	bl	8005980 <osSemaphoreRelease>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000e6c 	.word	0x20000e6c

08004f60 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004f60:	b5b0      	push	{r4, r5, r7, lr}
 8004f62:	b090      	sub	sp, #64	; 0x40
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004f6c:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <low_level_init+0x190>)
 8004f6e:	4a61      	ldr	r2, [pc, #388]	; (80050f4 <low_level_init+0x194>)
 8004f70:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004f72:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <low_level_init+0x190>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004f78:	4b5d      	ldr	r3, [pc, #372]	; (80050f0 <low_level_init+0x190>)
 8004f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f7e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <low_level_init+0x190>)
 8004f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f86:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004f88:	4b59      	ldr	r3, [pc, #356]	; (80050f0 <low_level_init+0x190>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x44;
 8004f8e:	2344      	movs	r3, #68	; 0x44
 8004f90:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x88;
 8004f94:	2388      	movs	r3, #136	; 0x88
 8004f96:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x44;
 8004f9a:	2344      	movs	r3, #68	; 0x44
 8004f9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x88;
 8004fa0:	2388      	movs	r3, #136	; 0x88
 8004fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x44;
 8004fa6:	2344      	movs	r3, #68	; 0x44
 8004fa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x88;
 8004fac:	2388      	movs	r3, #136	; 0x88
 8004fae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004fb2:	4a4f      	ldr	r2, [pc, #316]	; (80050f0 <low_level_init+0x190>)
 8004fb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004fb8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004fba:	4b4d      	ldr	r3, [pc, #308]	; (80050f0 <low_level_init+0x190>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004fc0:	4b4b      	ldr	r3, [pc, #300]	; (80050f0 <low_level_init+0x190>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <low_level_init+0x190>)
 8004fc8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004fcc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004fce:	4848      	ldr	r0, [pc, #288]	; (80050f0 <low_level_init+0x190>)
 8004fd0:	f7fc fe80 	bl	8001cd4 <HAL_ETH_Init>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004fda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d108      	bne.n	8004ff4 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004fe8:	f043 0304 	orr.w	r3, r3, #4
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004ff4:	2304      	movs	r3, #4
 8004ff6:	4a40      	ldr	r2, [pc, #256]	; (80050f8 <low_level_init+0x198>)
 8004ff8:	4940      	ldr	r1, [pc, #256]	; (80050fc <low_level_init+0x19c>)
 8004ffa:	483d      	ldr	r0, [pc, #244]	; (80050f0 <low_level_init+0x190>)
 8004ffc:	f7fd f804 	bl	8002008 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005000:	2304      	movs	r3, #4
 8005002:	4a3f      	ldr	r2, [pc, #252]	; (8005100 <low_level_init+0x1a0>)
 8005004:	493f      	ldr	r1, [pc, #252]	; (8005104 <low_level_init+0x1a4>)
 8005006:	483a      	ldr	r0, [pc, #232]	; (80050f0 <low_level_init+0x190>)
 8005008:	f7fd f867 	bl	80020da <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2206      	movs	r2, #6
 8005010:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005014:	4b36      	ldr	r3, [pc, #216]	; (80050f0 <low_level_init+0x190>)
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	781a      	ldrb	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005020:	4b33      	ldr	r3, [pc, #204]	; (80050f0 <low_level_init+0x190>)
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	785a      	ldrb	r2, [r3, #1]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800502c:	4b30      	ldr	r3, [pc, #192]	; (80050f0 <low_level_init+0x190>)
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	789a      	ldrb	r2, [r3, #2]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005038:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <low_level_init+0x190>)
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	78da      	ldrb	r2, [r3, #3]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005044:	4b2a      	ldr	r3, [pc, #168]	; (80050f0 <low_level_init+0x190>)
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	791a      	ldrb	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <low_level_init+0x190>)
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	795a      	ldrb	r2, [r3, #5]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005062:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800506a:	f043 030a 	orr.w	r3, r3, #10
 800506e:	b2da      	uxtb	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8005076:	2300      	movs	r3, #0
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
 800507a:	2300      	movs	r3, #0
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800507e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fbfb 	bl	8005880 <osSemaphoreCreate>
 800508a:	4603      	mov	r3, r0
 800508c:	4a1e      	ldr	r2, [pc, #120]	; (8005108 <low_level_init+0x1a8>)
 800508e:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005090:	4b1e      	ldr	r3, [pc, #120]	; (800510c <low_level_init+0x1ac>)
 8005092:	f107 040c 	add.w	r4, r7, #12
 8005096:	461d      	mov	r5, r3
 8005098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800509a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800509c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80050a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80050a4:	f107 030c 	add.w	r3, r7, #12
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 faeb 	bl	8005686 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80050b0:	480f      	ldr	r0, [pc, #60]	; (80050f0 <low_level_init+0x190>)
 80050b2:	f7fd fb3a 	bl	800272a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80050b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050ba:	461a      	mov	r2, r3
 80050bc:	211d      	movs	r1, #29
 80050be:	480c      	ldr	r0, [pc, #48]	; (80050f0 <low_level_init+0x190>)
 80050c0:	f7fd fa65 	bl	800258e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	f043 030b 	orr.w	r3, r3, #11
 80050ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	461a      	mov	r2, r3
 80050d0:	211d      	movs	r1, #29
 80050d2:	4807      	ldr	r0, [pc, #28]	; (80050f0 <low_level_init+0x190>)
 80050d4:	f7fd fac3 	bl	800265e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80050d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050dc:	461a      	mov	r2, r3
 80050de:	211d      	movs	r1, #29
 80050e0:	4803      	ldr	r0, [pc, #12]	; (80050f0 <low_level_init+0x190>)
 80050e2:	f7fd fa54 	bl	800258e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80050e6:	bf00      	nop
 80050e8:	3740      	adds	r7, #64	; 0x40
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bdb0      	pop	{r4, r5, r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20022fc4 	.word	0x20022fc4
 80050f4:	40028000 	.word	0x40028000
 80050f8:	2002300c 	.word	0x2002300c
 80050fc:	200216f4 	.word	0x200216f4
 8005100:	20021774 	.word	0x20021774
 8005104:	20022f44 	.word	0x20022f44
 8005108:	20000e6c 	.word	0x20000e6c
 800510c:	0801ea3c 	.word	0x0801ea3c

08005110 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b08a      	sub	sp, #40	; 0x28
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800511a:	4b4b      	ldr	r3, [pc, #300]	; (8005248 <low_level_output+0x138>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005132:	4b45      	ldr	r3, [pc, #276]	; (8005248 <low_level_output+0x138>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	623b      	str	r3, [r7, #32]
 8005140:	e05a      	b.n	80051f8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	da03      	bge.n	8005152 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800514a:	23f8      	movs	r3, #248	; 0xf8
 800514c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005150:	e05c      	b.n	800520c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	895b      	ldrh	r3, [r3, #10]
 8005156:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005158:	2300      	movs	r3, #0
 800515a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800515c:	e02f      	b.n	80051be <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	18d0      	adds	r0, r2, r3
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	18d1      	adds	r1, r2, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	461a      	mov	r2, r3
 8005176:	f014 fa31 	bl	80195dc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	da03      	bge.n	8005190 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005188:	23f8      	movs	r3, #248	; 0xf8
 800518a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800518e:	e03d      	b.n	800520c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80051a0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80051ac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80051b8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	4413      	add	r3, r2
 80051c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d8c8      	bhi.n	800515e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	18d0      	adds	r0, r2, r3
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4619      	mov	r1, r3
 80051de:	f014 f9fd 	bl	80195dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4413      	add	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80051f2:	6a3b      	ldr	r3, [r7, #32]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1a1      	bne.n	8005142 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80051fe:	6979      	ldr	r1, [r7, #20]
 8005200:	4811      	ldr	r0, [pc, #68]	; (8005248 <low_level_output+0x138>)
 8005202:	f7fc ffd7 	bl	80021b4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800520c:	4b0e      	ldr	r3, [pc, #56]	; (8005248 <low_level_output+0x138>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	f241 0314 	movw	r3, #4116	; 0x1014
 8005214:	4413      	add	r3, r2
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00d      	beq.n	800523c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005220:	4b09      	ldr	r3, [pc, #36]	; (8005248 <low_level_output+0x138>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	f241 0314 	movw	r3, #4116	; 0x1014
 8005228:	4413      	add	r3, r2
 800522a:	2220      	movs	r2, #32
 800522c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <low_level_output+0x138>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	f241 0304 	movw	r3, #4100	; 0x1004
 8005236:	4413      	add	r3, r2
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800523c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005240:	4618      	mov	r0, r3
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20022fc4 	.word	0x20022fc4

0800524c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08c      	sub	sp, #48	; 0x30
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800526c:	2300      	movs	r3, #0
 800526e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005270:	484f      	ldr	r0, [pc, #316]	; (80053b0 <low_level_input+0x164>)
 8005272:	f7fd f889 	bl	8002388 <HAL_ETH_GetReceivedFrame_IT>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <low_level_input+0x34>

    return NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	e092      	b.n	80053a6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005280:	4b4b      	ldr	r3, [pc, #300]	; (80053b0 <low_level_input+0x164>)
 8005282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005284:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005286:	4b4a      	ldr	r3, [pc, #296]	; (80053b0 <low_level_input+0x164>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d007      	beq.n	80052a2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005292:	89fb      	ldrh	r3, [r7, #14]
 8005294:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005298:	4619      	mov	r1, r3
 800529a:	2000      	movs	r0, #0
 800529c:	f007 fd90 	bl	800cdc0 <pbuf_alloc>
 80052a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d04b      	beq.n	8005340 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80052a8:	4b41      	ldr	r3, [pc, #260]	; (80053b0 <low_level_input+0x164>)
 80052aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80052b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b6:	e040      	b.n	800533a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	895b      	ldrh	r3, [r3, #10]
 80052bc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80052c2:	e021      	b.n	8005308 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	18d0      	adds	r0, r2, r3
 80052cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	18d1      	adds	r1, r2, r3
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80052d8:	1a9b      	subs	r3, r3, r2
 80052da:	461a      	mov	r2, r3
 80052dc:	f014 f97e 	bl	80195dc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	4413      	add	r3, r2
 80052f2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80052f6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005302:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005312:	4293      	cmp	r3, r2
 8005314:	d8d6      	bhi.n	80052c4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	18d0      	adds	r0, r2, r3
 800531e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4619      	mov	r1, r3
 8005328:	f014 f958 	bl	80195dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	4413      	add	r3, r2
 8005332:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	62bb      	str	r3, [r7, #40]	; 0x28
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1bb      	bne.n	80052b8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005340:	4b1b      	ldr	r3, [pc, #108]	; (80053b0 <low_level_input+0x164>)
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	e00b      	b.n	8005364 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	3301      	adds	r3, #1
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	4b12      	ldr	r3, [pc, #72]	; (80053b0 <low_level_input+0x164>)
 8005366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	429a      	cmp	r2, r3
 800536c:	d3ee      	bcc.n	800534c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800536e:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <low_level_input+0x164>)
 8005370:	2200      	movs	r2, #0
 8005372:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005374:	4b0e      	ldr	r3, [pc, #56]	; (80053b0 <low_level_input+0x164>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	f241 0314 	movw	r3, #4116	; 0x1014
 800537c:	4413      	add	r3, r2
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <low_level_input+0x164>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005390:	4413      	add	r3, r2
 8005392:	2280      	movs	r2, #128	; 0x80
 8005394:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <low_level_input+0x164>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	f241 0308 	movw	r3, #4104	; 0x1008
 800539e:	4413      	add	r3, r2
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80053a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3730      	adds	r7, #48	; 0x30
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20022fc4 	.word	0x20022fc4

080053b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <ethernetif_input+0x58>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f04f 31ff 	mov.w	r1, #4294967295
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fa8b 	bl	80058e4 <osSemaphoreWait>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1f5      	bne.n	80053c0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80053d4:	480e      	ldr	r0, [pc, #56]	; (8005410 <ethernetif_input+0x5c>)
 80053d6:	f014 f86f 	bl	80194b8 <sys_mutex_lock>
        p = low_level_input( netif );
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7ff ff36 	bl	800524c <low_level_input>
 80053e0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	68f9      	ldr	r1, [r7, #12]
 80053ee:	68b8      	ldr	r0, [r7, #8]
 80053f0:	4798      	blx	r3
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d002      	beq.n	80053fe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80053f8:	68b8      	ldr	r0, [r7, #8]
 80053fa:	f007 ffc5 	bl	800d388 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80053fe:	4804      	ldr	r0, [pc, #16]	; (8005410 <ethernetif_input+0x5c>)
 8005400:	f014 f869 	bl	80194d6 <sys_mutex_unlock>
      } while(p!=NULL);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e4      	bne.n	80053d4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800540a:	e7d9      	b.n	80053c0 <ethernetif_input+0xc>
 800540c:	20000e6c 	.word	0x20000e6c
 8005410:	2002481c 	.word	0x2002481c

08005414 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <ethernetif_init+0x1c>
 8005422:	4b0e      	ldr	r3, [pc, #56]	; (800545c <ethernetif_init+0x48>)
 8005424:	f240 222b 	movw	r2, #555	; 0x22b
 8005428:	490d      	ldr	r1, [pc, #52]	; (8005460 <ethernetif_init+0x4c>)
 800542a:	480e      	ldr	r0, [pc, #56]	; (8005464 <ethernetif_init+0x50>)
 800542c:	f014 ff80 	bl	801a330 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2273      	movs	r2, #115	; 0x73
 8005434:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2274      	movs	r2, #116	; 0x74
 800543c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a09      	ldr	r2, [pc, #36]	; (8005468 <ethernetif_init+0x54>)
 8005444:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a08      	ldr	r2, [pc, #32]	; (800546c <ethernetif_init+0x58>)
 800544a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff fd87 	bl	8004f60 <low_level_init>

  return ERR_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	0801ea58 	.word	0x0801ea58
 8005460:	0801ea74 	.word	0x0801ea74
 8005464:	0801ea84 	.word	0x0801ea84
 8005468:	08017119 	.word	0x08017119
 800546c:	08005111 	.word	0x08005111

08005470 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005474:	f7fc fb1c 	bl	8001ab0 <HAL_GetTick>
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	461a      	mov	r2, r3
 8005496:	2101      	movs	r1, #1
 8005498:	4816      	ldr	r0, [pc, #88]	; (80054f4 <ethernetif_set_link+0x74>)
 800549a:	f7fd f878 	bl	800258e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d108      	bne.n	80054c8 <ethernetif_set_link+0x48>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f007 fb4b 	bl	800cb5c <netif_set_link_up>
 80054c6:	e011      	b.n	80054ec <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80054d0:	089b      	lsrs	r3, r3, #2
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <ethernetif_set_link+0x6c>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f007 fb70 	bl	800cbcc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80054ec:	20c8      	movs	r0, #200	; 0xc8
 80054ee:	f000 f916 	bl	800571e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80054f2:	e7cd      	b.n	8005490 <ethernetif_set_link+0x10>
 80054f4:	20022fc4 	.word	0x20022fc4

080054f8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800550e:	089b      	lsrs	r3, r3, #2
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d05d      	beq.n	80055d6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800551a:	4b34      	ldr	r3, [pc, #208]	; (80055ec <ethernetif_update_config+0xf4>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d03f      	beq.n	80055a2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005522:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005526:	2100      	movs	r1, #0
 8005528:	4830      	ldr	r0, [pc, #192]	; (80055ec <ethernetif_update_config+0xf4>)
 800552a:	f7fd f898 	bl	800265e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800552e:	f7fc fabf 	bl	8001ab0 <HAL_GetTick>
 8005532:	4603      	mov	r3, r0
 8005534:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	461a      	mov	r2, r3
 800553c:	2101      	movs	r1, #1
 800553e:	482b      	ldr	r0, [pc, #172]	; (80055ec <ethernetif_update_config+0xf4>)
 8005540:	f7fd f825 	bl	800258e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005544:	f7fc fab4 	bl	8001ab0 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005552:	d828      	bhi.n	80055a6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0320 	and.w	r3, r3, #32
 800555a:	2b00      	cmp	r3, #0
 800555c:	d0eb      	beq.n	8005536 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800555e:	f107 0308 	add.w	r3, r7, #8
 8005562:	461a      	mov	r2, r3
 8005564:	2110      	movs	r1, #16
 8005566:	4821      	ldr	r0, [pc, #132]	; (80055ec <ethernetif_update_config+0xf4>)
 8005568:	f7fd f811 	bl	800258e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005576:	4b1d      	ldr	r3, [pc, #116]	; (80055ec <ethernetif_update_config+0xf4>)
 8005578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	e002      	b.n	8005586 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005580:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <ethernetif_update_config+0xf4>)
 8005582:	2200      	movs	r2, #0
 8005584:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005590:	4b16      	ldr	r3, [pc, #88]	; (80055ec <ethernetif_update_config+0xf4>)
 8005592:	2200      	movs	r2, #0
 8005594:	609a      	str	r2, [r3, #8]
 8005596:	e016      	b.n	80055c6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005598:	4b14      	ldr	r3, [pc, #80]	; (80055ec <ethernetif_update_config+0xf4>)
 800559a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800559e:	609a      	str	r2, [r3, #8]
 80055a0:	e011      	b.n	80055c6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <ethernetif_update_config+0xb0>
          goto error;
 80055a6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80055a8:	4b10      	ldr	r3, [pc, #64]	; (80055ec <ethernetif_update_config+0xf4>)
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	08db      	lsrs	r3, r3, #3
 80055ae:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <ethernetif_update_config+0xf4>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	085b      	lsrs	r3, r3, #1
 80055b6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80055b8:	4313      	orrs	r3, r2
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	2100      	movs	r1, #0
 80055c0:	480a      	ldr	r0, [pc, #40]	; (80055ec <ethernetif_update_config+0xf4>)
 80055c2:	f7fd f84c 	bl	800265e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80055c6:	2100      	movs	r1, #0
 80055c8:	4808      	ldr	r0, [pc, #32]	; (80055ec <ethernetif_update_config+0xf4>)
 80055ca:	f7fd f90d 	bl	80027e8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80055ce:	4807      	ldr	r0, [pc, #28]	; (80055ec <ethernetif_update_config+0xf4>)
 80055d0:	f7fd f8ab 	bl	800272a <HAL_ETH_Start>
 80055d4:	e002      	b.n	80055dc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80055d6:	4805      	ldr	r0, [pc, #20]	; (80055ec <ethernetif_update_config+0xf4>)
 80055d8:	f7fd f8d6 	bl	8002788 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f807 	bl	80055f0 <ethernetif_notify_conn_changed>
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20022fc4 	.word	0x20022fc4

080055f0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005612:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005616:	2b84      	cmp	r3, #132	; 0x84
 8005618:	d005      	beq.n	8005626 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800561a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4413      	add	r3, r2
 8005622:	3303      	adds	r3, #3
 8005624:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005626:	68fb      	ldr	r3, [r7, #12]
}
 8005628:	4618      	mov	r0, r3
 800562a:	3714      	adds	r7, #20
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800563a:	f3ef 8305 	mrs	r3, IPSR
 800563e:	607b      	str	r3, [r7, #4]
  return(result);
 8005640:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005642:	2b00      	cmp	r3, #0
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
}
 800564c:	4618      	mov	r0, r3
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800565c:	f001 fd74 	bl	8007148 <vTaskStartScheduler>
  
  return osOK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	bd80      	pop	{r7, pc}

08005666 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800566a:	f7ff ffe3 	bl	8005634 <inHandlerMode>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005674:	f001 fe88 	bl	8007388 <xTaskGetTickCountFromISR>
 8005678:	4603      	mov	r3, r0
 800567a:	e002      	b.n	8005682 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800567c:	f001 fe74 	bl	8007368 <xTaskGetTickCount>
 8005680:	4603      	mov	r3, r0
  }
}
 8005682:	4618      	mov	r0, r3
 8005684:	bd80      	pop	{r7, pc}

08005686 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005688:	b089      	sub	sp, #36	; 0x24
 800568a:	af04      	add	r7, sp, #16
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d020      	beq.n	80056da <osThreadCreate+0x54>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d01c      	beq.n	80056da <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685c      	ldr	r4, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681d      	ldr	r5, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691e      	ldr	r6, [r3, #16]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ffa6 	bl	8005604 <makeFreeRtosPriority>
 80056b8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056c2:	9202      	str	r2, [sp, #8]
 80056c4:	9301      	str	r3, [sp, #4]
 80056c6:	9100      	str	r1, [sp, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	4632      	mov	r2, r6
 80056cc:	4629      	mov	r1, r5
 80056ce:	4620      	mov	r0, r4
 80056d0:	f001 fb68 	bl	8006da4 <xTaskCreateStatic>
 80056d4:	4603      	mov	r3, r0
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e01c      	b.n	8005714 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685c      	ldr	r4, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056e6:	b29e      	uxth	r6, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff ff88 	bl	8005604 <makeFreeRtosPriority>
 80056f4:	4602      	mov	r2, r0
 80056f6:	f107 030c 	add.w	r3, r7, #12
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	9200      	str	r2, [sp, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	4632      	mov	r2, r6
 8005702:	4629      	mov	r1, r5
 8005704:	4620      	mov	r0, r4
 8005706:	f001 fbb0 	bl	8006e6a <xTaskCreate>
 800570a:	4603      	mov	r3, r0
 800570c:	2b01      	cmp	r3, #1
 800570e:	d001      	beq.n	8005714 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005714:	68fb      	ldr	r3, [r7, #12]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800571e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <osDelay+0x16>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	e000      	b.n	8005736 <osDelay+0x18>
 8005734:	2301      	movs	r3, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f001 fcd0 	bl	80070dc <vTaskDelay>
  
  return osOK;
 800573c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	4619      	mov	r1, r3
 800575c:	2001      	movs	r0, #1
 800575e:	f000 fc92 	bl	8006086 <xQueueCreateMutexStatic>
 8005762:	4603      	mov	r3, r0
 8005764:	e003      	b.n	800576e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005766:	2001      	movs	r0, #1
 8005768:	f000 fc75 	bl	8006056 <xQueueCreateMutex>
 800576c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <osMutexWait+0x18>
    return osErrorParameter;
 800578c:	2380      	movs	r3, #128	; 0x80
 800578e:	e03a      	b.n	8005806 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d103      	bne.n	80057a4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	e009      	b.n	80057b8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <osMutexWait+0x40>
      ticks = 1;
 80057b4:	2301      	movs	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80057b8:	f7ff ff3c 	bl	8005634 <inHandlerMode>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d017      	beq.n	80057f2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80057c2:	f107 0308 	add.w	r3, r7, #8
 80057c6:	461a      	mov	r2, r3
 80057c8:	2100      	movs	r1, #0
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 f8ac 	bl	8006928 <xQueueReceiveFromISR>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d001      	beq.n	80057da <osMutexWait+0x62>
      return osErrorOS;
 80057d6:	23ff      	movs	r3, #255	; 0xff
 80057d8:	e015      	b.n	8005806 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d011      	beq.n	8005804 <osMutexWait+0x8c>
 80057e0:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <osMutexWait+0x98>)
 80057e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e6:	601a      	str	r2, [r3, #0]
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	e008      	b.n	8005804 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 ff83 	bl	8006700 <xQueueSemaphoreTake>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d001      	beq.n	8005804 <osMutexWait+0x8c>
    return osErrorOS;
 8005800:	23ff      	movs	r3, #255	; 0xff
 8005802:	e000      	b.n	8005806 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	e000ed04 	.word	0xe000ed04

08005814 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005824:	f7ff ff06 	bl	8005634 <inHandlerMode>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800582e:	f107 0308 	add.w	r3, r7, #8
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fde7 	bl	8006408 <xQueueGiveFromISR>
 800583a:	4603      	mov	r3, r0
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <osMutexRelease+0x30>
      return osErrorOS;
 8005840:	23ff      	movs	r3, #255	; 0xff
 8005842:	e017      	b.n	8005874 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d013      	beq.n	8005872 <osMutexRelease+0x5e>
 800584a:	4b0c      	ldr	r3, [pc, #48]	; (800587c <osMutexRelease+0x68>)
 800584c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	e00a      	b.n	8005872 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800585c:	2300      	movs	r3, #0
 800585e:	2200      	movs	r2, #0
 8005860:	2100      	movs	r1, #0
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fc2a 	bl	80060bc <xQueueGenericSend>
 8005868:	4603      	mov	r3, r0
 800586a:	2b01      	cmp	r3, #1
 800586c:	d001      	beq.n	8005872 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800586e:	23ff      	movs	r3, #255	; 0xff
 8005870:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005872:	68fb      	ldr	r3, [r7, #12]
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	e000ed04 	.word	0xe000ed04

08005880 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00f      	beq.n	80058b2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d10a      	bne.n	80058ae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2203      	movs	r2, #3
 800589e:	9200      	str	r2, [sp, #0]
 80058a0:	2200      	movs	r2, #0
 80058a2:	2100      	movs	r1, #0
 80058a4:	2001      	movs	r0, #1
 80058a6:	f000 fad9 	bl	8005e5c <xQueueGenericCreateStatic>
 80058aa:	4603      	mov	r3, r0
 80058ac:	e016      	b.n	80058dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e014      	b.n	80058dc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d110      	bne.n	80058da <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80058b8:	2203      	movs	r2, #3
 80058ba:	2100      	movs	r1, #0
 80058bc:	2001      	movs	r0, #1
 80058be:	f000 fb4f 	bl	8005f60 <xQueueGenericCreate>
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d005      	beq.n	80058d6 <osSemaphoreCreate+0x56>
 80058ca:	2300      	movs	r3, #0
 80058cc:	2200      	movs	r2, #0
 80058ce:	2100      	movs	r1, #0
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fbf3 	bl	80060bc <xQueueGenericSend>
      return sema;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	e000      	b.n	80058dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80058da:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d101      	bne.n	80058fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80058f8:	2380      	movs	r3, #128	; 0x80
 80058fa:	e03a      	b.n	8005972 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005906:	d103      	bne.n	8005910 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005908:	f04f 33ff 	mov.w	r3, #4294967295
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e009      	b.n	8005924 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d006      	beq.n	8005924 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <osSemaphoreWait+0x40>
      ticks = 1;
 8005920:	2301      	movs	r3, #1
 8005922:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005924:	f7ff fe86 	bl	8005634 <inHandlerMode>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d017      	beq.n	800595e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800592e:	f107 0308 	add.w	r3, r7, #8
 8005932:	461a      	mov	r2, r3
 8005934:	2100      	movs	r1, #0
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fff6 	bl	8006928 <xQueueReceiveFromISR>
 800593c:	4603      	mov	r3, r0
 800593e:	2b01      	cmp	r3, #1
 8005940:	d001      	beq.n	8005946 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005942:	23ff      	movs	r3, #255	; 0xff
 8005944:	e015      	b.n	8005972 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d011      	beq.n	8005970 <osSemaphoreWait+0x8c>
 800594c:	4b0b      	ldr	r3, [pc, #44]	; (800597c <osSemaphoreWait+0x98>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	e008      	b.n	8005970 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fecd 	bl	8006700 <xQueueSemaphoreTake>
 8005966:	4603      	mov	r3, r0
 8005968:	2b01      	cmp	r3, #1
 800596a:	d001      	beq.n	8005970 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800596c:	23ff      	movs	r3, #255	; 0xff
 800596e:	e000      	b.n	8005972 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005990:	f7ff fe50 	bl	8005634 <inHandlerMode>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d016      	beq.n	80059c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800599a:	f107 0308 	add.w	r3, r7, #8
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fd31 	bl	8006408 <xQueueGiveFromISR>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d001      	beq.n	80059b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80059ac:	23ff      	movs	r3, #255	; 0xff
 80059ae:	e017      	b.n	80059e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d013      	beq.n	80059de <osSemaphoreRelease+0x5e>
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <osSemaphoreRelease+0x68>)
 80059b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	e00a      	b.n	80059de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80059c8:	2300      	movs	r3, #0
 80059ca:	2200      	movs	r2, #0
 80059cc:	2100      	movs	r1, #0
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fb74 	bl	80060bc <xQueueGenericSend>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d001      	beq.n	80059de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80059da:	23ff      	movs	r3, #255	; 0xff
 80059dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80059f4:	f7ff fe1e 	bl	8005634 <inHandlerMode>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80059fe:	2382      	movs	r3, #130	; 0x82
 8005a00:	e003      	b.n	8005a0a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 f856 	bl	8006ab4 <vQueueDelete>

  return osOK; 
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005a12:	b590      	push	{r4, r7, lr}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af02      	add	r7, sp, #8
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d011      	beq.n	8005a48 <osMessageCreate+0x36>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00d      	beq.n	8005a48 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6859      	ldr	r1, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689a      	ldr	r2, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	2400      	movs	r4, #0
 8005a3e:	9400      	str	r4, [sp, #0]
 8005a40:	f000 fa0c 	bl	8005e5c <xQueueGenericCreateStatic>
 8005a44:	4603      	mov	r3, r0
 8005a46:	e008      	b.n	8005a5a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	4619      	mov	r1, r3
 8005a54:	f000 fa84 	bl	8005f60 <xQueueGenericCreate>
 8005a58:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd90      	pop	{r4, r7, pc}
	...

08005a64 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <osMessagePut+0x1e>
    ticks = 1;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005a82:	f7ff fdd7 	bl	8005634 <inHandlerMode>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d018      	beq.n	8005abe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005a8c:	f107 0210 	add.w	r2, r7, #16
 8005a90:	f107 0108 	add.w	r1, r7, #8
 8005a94:	2300      	movs	r3, #0
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fc16 	bl	80062c8 <xQueueGenericSendFromISR>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d001      	beq.n	8005aa6 <osMessagePut+0x42>
      return osErrorOS;
 8005aa2:	23ff      	movs	r3, #255	; 0xff
 8005aa4:	e018      	b.n	8005ad8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d014      	beq.n	8005ad6 <osMessagePut+0x72>
 8005aac:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <osMessagePut+0x7c>)
 8005aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	e00b      	b.n	8005ad6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005abe:	f107 0108 	add.w	r1, r7, #8
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 faf8 	bl	80060bc <xQueueGenericSend>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d001      	beq.n	8005ad6 <osMessagePut+0x72>
      return osErrorOS;
 8005ad2:	23ff      	movs	r3, #255	; 0xff
 8005ad4:	e000      	b.n	8005ad8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b08b      	sub	sp, #44	; 0x2c
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	617b      	str	r3, [r7, #20]
    return event;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	461c      	mov	r4, r3
 8005b06:	f107 0314 	add.w	r3, r7, #20
 8005b0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b12:	e054      	b.n	8005bbe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b22:	d103      	bne.n	8005b2c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	e009      	b.n	8005b40 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d006      	beq.n	8005b40 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <osMessageGet+0x5c>
      ticks = 1;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005b40:	f7ff fd78 	bl	8005634 <inHandlerMode>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d01c      	beq.n	8005b84 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005b4a:	f107 0220 	add.w	r2, r7, #32
 8005b4e:	f107 0314 	add.w	r3, r7, #20
 8005b52:	3304      	adds	r3, #4
 8005b54:	4619      	mov	r1, r3
 8005b56:	68b8      	ldr	r0, [r7, #8]
 8005b58:	f000 fee6 	bl	8006928 <xQueueReceiveFromISR>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d102      	bne.n	8005b68 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005b62:	2310      	movs	r3, #16
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e001      	b.n	8005b6c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d01d      	beq.n	8005bae <osMessageGet+0xca>
 8005b72:	4b15      	ldr	r3, [pc, #84]	; (8005bc8 <osMessageGet+0xe4>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e014      	b.n	8005bae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	3304      	adds	r3, #4
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	68b8      	ldr	r0, [r7, #8]
 8005b90:	f000 fcd0 	bl	8006534 <xQueueReceive>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d102      	bne.n	8005ba0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	617b      	str	r3, [r7, #20]
 8005b9e:	e006      	b.n	8005bae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <osMessageGet+0xc6>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e000      	b.n	8005bac <osMessageGet+0xc8>
 8005baa:	2340      	movs	r3, #64	; 0x40
 8005bac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	461c      	mov	r4, r3
 8005bb2:	f107 0314 	add.w	r3, r7, #20
 8005bb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005bba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	372c      	adds	r7, #44	; 0x2c
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd90      	pop	{r4, r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005bd4:	f7ff fd2e 	bl	8005634 <inHandlerMode>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 ff48 	bl	8006a74 <uxQueueMessagesWaitingFromISR>
 8005be4:	4603      	mov	r3, r0
 8005be6:	e003      	b.n	8005bf0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 ff23 	bl	8006a34 <uxQueueMessagesWaiting>
 8005bee:	4603      	mov	r3, r0
  }
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005c00:	f7ff fd18 	bl	8005634 <inHandlerMode>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <osMessageDelete+0x16>
    return osErrorISR;
 8005c0a:	2382      	movs	r3, #130	; 0x82
 8005c0c:	e003      	b.n	8005c16 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 ff50 	bl	8006ab4 <vQueueDelete>

  return osOK; 
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f103 0208 	add.w	r2, r3, #8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f04f 32ff 	mov.w	r2, #4294967295
 8005c36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f103 0208 	add.w	r2, r3, #8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f103 0208 	add.w	r2, r3, #8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689a      	ldr	r2, [r3, #8]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd6:	d103      	bne.n	8005ce0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	e00c      	b.n	8005cfa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	e002      	b.n	8005cee <vListInsert+0x2e>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d2f6      	bcs.n	8005ce8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	601a      	str	r2, [r3, #0]
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d32:	b480      	push	{r7}
 8005d34:	b085      	sub	sp, #20
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6892      	ldr	r2, [r2, #8]
 8005d48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6852      	ldr	r2, [r2, #4]
 8005d52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d103      	bne.n	8005d66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	1e5a      	subs	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3714      	adds	r7, #20
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10c      	bne.n	8005db6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	b672      	cpsid	i
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	b662      	cpsie	i
 8005db0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005db6:	f002 f949 	bl	800804c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	441a      	add	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de6:	3b01      	subs	r3, #1
 8005de8:	68f9      	ldr	r1, [r7, #12]
 8005dea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	441a      	add	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	22ff      	movs	r2, #255	; 0xff
 8005e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d114      	bne.n	8005e36 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01a      	beq.n	8005e4a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3310      	adds	r3, #16
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 fc05 	bl	8007628 <xTaskRemoveFromEventList>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d012      	beq.n	8005e4a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <xQueueGenericReset+0xd0>)
 8005e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	e009      	b.n	8005e4a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3310      	adds	r3, #16
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff feef 	bl	8005c1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3324      	adds	r3, #36	; 0x24
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff feea 	bl	8005c1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e4a:	f002 f933 	bl	80080b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e4e:	2301      	movs	r3, #1
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08e      	sub	sp, #56	; 0x38
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10c      	bne.n	8005e8a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e74:	b672      	cpsid	i
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	b662      	cpsie	i
 8005e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e86:	bf00      	nop
 8005e88:	e7fe      	b.n	8005e88 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10c      	bne.n	8005eaa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	b672      	cpsid	i
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	b662      	cpsie	i
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ea6:	bf00      	nop
 8005ea8:	e7fe      	b.n	8005ea8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <xQueueGenericCreateStatic+0x5a>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <xQueueGenericCreateStatic+0x5e>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueGenericCreateStatic+0x60>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10c      	bne.n	8005eda <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	b672      	cpsid	i
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	b662      	cpsie	i
 8005ed4:	623b      	str	r3, [r7, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <xQueueGenericCreateStatic+0x8a>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <xQueueGenericCreateStatic+0x8e>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <xQueueGenericCreateStatic+0x90>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10c      	bne.n	8005f0a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	b672      	cpsid	i
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	b662      	cpsie	i
 8005f04:	61fb      	str	r3, [r7, #28]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f0a:	2348      	movs	r3, #72	; 0x48
 8005f0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b48      	cmp	r3, #72	; 0x48
 8005f12:	d00c      	beq.n	8005f2e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	b672      	cpsid	i
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	b662      	cpsie	i
 8005f28:	61bb      	str	r3, [r7, #24]
}
 8005f2a:	bf00      	nop
 8005f2c:	e7fe      	b.n	8005f2c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00d      	beq.n	8005f56 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 f847 	bl	8005fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3730      	adds	r7, #48	; 0x30
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	; 0x28
 8005f64:	af02      	add	r7, sp, #8
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10c      	bne.n	8005f8e <xQueueGenericCreate+0x2e>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	b672      	cpsid	i
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	b662      	cpsie	i
 8005f88:	613b      	str	r3, [r7, #16]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d102      	bne.n	8005f9a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	61fb      	str	r3, [r7, #28]
 8005f98:	e004      	b.n	8005fa4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	3348      	adds	r3, #72	; 0x48
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f002 f97b 	bl	80082a4 <pvPortMalloc>
 8005fae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d011      	beq.n	8005fda <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	3348      	adds	r3, #72	; 0x48
 8005fbe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fc8:	79fa      	ldrb	r2, [r7, #7]
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f805 	bl	8005fe4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005fda:	69bb      	ldr	r3, [r7, #24]
	}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3720      	adds	r7, #32
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d103      	bne.n	8006000 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e002      	b.n	8006006 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006012:	2101      	movs	r1, #1
 8006014:	69b8      	ldr	r0, [r7, #24]
 8006016:	f7ff feb7 	bl	8005d88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800601a:	bf00      	nop
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00e      	beq.n	800604e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006042:	2300      	movs	r3, #0
 8006044:	2200      	movs	r2, #0
 8006046:	2100      	movs	r1, #0
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f837 	bl	80060bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006056:	b580      	push	{r7, lr}
 8006058:	b086      	sub	sp, #24
 800605a:	af00      	add	r7, sp, #0
 800605c:	4603      	mov	r3, r0
 800605e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006060:	2301      	movs	r3, #1
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	2300      	movs	r3, #0
 8006066:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	461a      	mov	r2, r3
 800606c:	6939      	ldr	r1, [r7, #16]
 800606e:	6978      	ldr	r0, [r7, #20]
 8006070:	f7ff ff76 	bl	8005f60 <xQueueGenericCreate>
 8006074:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f7ff ffd3 	bl	8006022 <prvInitialiseMutex>

		return xNewQueue;
 800607c:	68fb      	ldr	r3, [r7, #12]
	}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006086:	b580      	push	{r7, lr}
 8006088:	b088      	sub	sp, #32
 800608a:	af02      	add	r7, sp, #8
 800608c:	4603      	mov	r3, r0
 800608e:	6039      	str	r1, [r7, #0]
 8006090:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006092:	2301      	movs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
 8006096:	2300      	movs	r3, #0
 8006098:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800609a:	79fb      	ldrb	r3, [r7, #7]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2200      	movs	r2, #0
 80060a2:	6939      	ldr	r1, [r7, #16]
 80060a4:	6978      	ldr	r0, [r7, #20]
 80060a6:	f7ff fed9 	bl	8005e5c <xQueueGenericCreateStatic>
 80060aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7ff ffb8 	bl	8006022 <prvInitialiseMutex>

		return xNewQueue;
 80060b2:	68fb      	ldr	r3, [r7, #12]
	}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08e      	sub	sp, #56	; 0x38
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
 80060c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060ca:	2300      	movs	r3, #0
 80060cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10c      	bne.n	80060f2 <xQueueGenericSend+0x36>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	b672      	cpsid	i
 80060de:	f383 8811 	msr	BASEPRI, r3
 80060e2:	f3bf 8f6f 	isb	sy
 80060e6:	f3bf 8f4f 	dsb	sy
 80060ea:	b662      	cpsie	i
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060ee:	bf00      	nop
 80060f0:	e7fe      	b.n	80060f0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <xQueueGenericSend+0x44>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <xQueueGenericSend+0x48>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <xQueueGenericSend+0x4a>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10c      	bne.n	8006124 <xQueueGenericSend+0x68>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	b672      	cpsid	i
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	b662      	cpsie	i
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d103      	bne.n	8006132 <xQueueGenericSend+0x76>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <xQueueGenericSend+0x7a>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <xQueueGenericSend+0x7c>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10c      	bne.n	8006156 <xQueueGenericSend+0x9a>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	b672      	cpsid	i
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	b662      	cpsie	i
 8006150:	623b      	str	r3, [r7, #32]
}
 8006152:	bf00      	nop
 8006154:	e7fe      	b.n	8006154 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006156:	f001 fc2b 	bl	80079b0 <xTaskGetSchedulerState>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <xQueueGenericSend+0xaa>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <xQueueGenericSend+0xae>
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <xQueueGenericSend+0xb0>
 800616a:	2300      	movs	r3, #0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10c      	bne.n	800618a <xQueueGenericSend+0xce>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	b672      	cpsid	i
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	b662      	cpsie	i
 8006184:	61fb      	str	r3, [r7, #28]
}
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800618a:	f001 ff5f 	bl	800804c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	429a      	cmp	r2, r3
 8006198:	d302      	bcc.n	80061a0 <xQueueGenericSend+0xe4>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d129      	bne.n	80061f4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061a6:	f000 fcc2 	bl	8006b2e <prvCopyDataToQueue>
 80061aa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d010      	beq.n	80061d6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	3324      	adds	r3, #36	; 0x24
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fa35 	bl	8007628 <xTaskRemoveFromEventList>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d013      	beq.n	80061ec <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061c4:	4b3f      	ldr	r3, [pc, #252]	; (80062c4 <xQueueGenericSend+0x208>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	e00a      	b.n	80061ec <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d007      	beq.n	80061ec <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061dc:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <xQueueGenericSend+0x208>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061ec:	f001 ff62 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e063      	b.n	80062bc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d103      	bne.n	8006202 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fa:	f001 ff5b 	bl	80080b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	e05c      	b.n	80062bc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4618      	mov	r0, r3
 800620e:	f001 fa6f 	bl	80076f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006212:	2301      	movs	r3, #1
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006216:	f001 ff4d 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621a:	f000 fff9 	bl	8007210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800621e:	f001 ff15 	bl	800804c <vPortEnterCritical>
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006228:	b25b      	sxtb	r3, r3
 800622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622e:	d103      	bne.n	8006238 <xQueueGenericSend+0x17c>
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2200      	movs	r2, #0
 8006234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d103      	bne.n	800624e <xQueueGenericSend+0x192>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800624e:	f001 ff31 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006252:	1d3a      	adds	r2, r7, #4
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f001 fa5e 	bl	800771c <xTaskCheckForTimeOut>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d124      	bne.n	80062b0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006268:	f000 fd59 	bl	8006d1e <prvIsQueueFull>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d018      	beq.n	80062a4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	3310      	adds	r3, #16
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f001 f9ae 	bl	80075dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006282:	f000 fce4 	bl	8006c4e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006286:	f000 ffd1 	bl	800722c <xTaskResumeAll>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	f47f af7c 	bne.w	800618a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006292:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <xQueueGenericSend+0x208>)
 8006294:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006298:	601a      	str	r2, [r3, #0]
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	e772      	b.n	800618a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062a6:	f000 fcd2 	bl	8006c4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062aa:	f000 ffbf 	bl	800722c <xTaskResumeAll>
 80062ae:	e76c      	b.n	800618a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b2:	f000 fccc 	bl	8006c4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062b6:	f000 ffb9 	bl	800722c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3738      	adds	r7, #56	; 0x38
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	e000ed04 	.word	0xe000ed04

080062c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08e      	sub	sp, #56	; 0x38
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10c      	bne.n	80062fa <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	b672      	cpsid	i
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	b662      	cpsie	i
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <xQueueGenericSendFromISR+0x40>
 8006300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <xQueueGenericSendFromISR+0x44>
 8006308:	2301      	movs	r3, #1
 800630a:	e000      	b.n	800630e <xQueueGenericSendFromISR+0x46>
 800630c:	2300      	movs	r3, #0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10c      	bne.n	800632c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	b672      	cpsid	i
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	b662      	cpsie	i
 8006326:	623b      	str	r3, [r7, #32]
}
 8006328:	bf00      	nop
 800632a:	e7fe      	b.n	800632a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d103      	bne.n	800633a <xQueueGenericSendFromISR+0x72>
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <xQueueGenericSendFromISR+0x76>
 800633a:	2301      	movs	r3, #1
 800633c:	e000      	b.n	8006340 <xQueueGenericSendFromISR+0x78>
 800633e:	2300      	movs	r3, #0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10c      	bne.n	800635e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006348:	b672      	cpsid	i
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	b662      	cpsie	i
 8006358:	61fb      	str	r3, [r7, #28]
}
 800635a:	bf00      	nop
 800635c:	e7fe      	b.n	800635c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800635e:	f001 ff5d 	bl	800821c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006362:	f3ef 8211 	mrs	r2, BASEPRI
 8006366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636a:	b672      	cpsid	i
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	b662      	cpsie	i
 800637a:	61ba      	str	r2, [r7, #24]
 800637c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800637e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <xQueueGenericSendFromISR+0xcc>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d12c      	bne.n	80063ee <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063a4:	f000 fbc3 	bl	8006b2e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063a8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80063ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b0:	d112      	bne.n	80063d8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063bc:	3324      	adds	r3, #36	; 0x24
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 f932 	bl	8007628 <xTaskRemoveFromEventList>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00e      	beq.n	80063e8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e007      	b.n	80063e8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063dc:	3301      	adds	r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	b25a      	sxtb	r2, r3
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063e8:	2301      	movs	r3, #1
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80063ec:	e001      	b.n	80063f2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006400:	4618      	mov	r0, r3
 8006402:	3738      	adds	r7, #56	; 0x38
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08e      	sub	sp, #56	; 0x38
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10c      	bne.n	8006436 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	b672      	cpsid	i
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	b662      	cpsie	i
 8006430:	623b      	str	r3, [r7, #32]
}
 8006432:	bf00      	nop
 8006434:	e7fe      	b.n	8006434 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00c      	beq.n	8006458 <xQueueGiveFromISR+0x50>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006442:	b672      	cpsid	i
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	b662      	cpsie	i
 8006452:	61fb      	str	r3, [r7, #28]
}
 8006454:	bf00      	nop
 8006456:	e7fe      	b.n	8006456 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d103      	bne.n	8006468 <xQueueGiveFromISR+0x60>
 8006460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <xQueueGiveFromISR+0x64>
 8006468:	2301      	movs	r3, #1
 800646a:	e000      	b.n	800646e <xQueueGiveFromISR+0x66>
 800646c:	2300      	movs	r3, #0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10c      	bne.n	800648c <xQueueGiveFromISR+0x84>
	__asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	b672      	cpsid	i
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	b662      	cpsie	i
 8006486:	61bb      	str	r3, [r7, #24]
}
 8006488:	bf00      	nop
 800648a:	e7fe      	b.n	800648a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800648c:	f001 fec6 	bl	800821c <vPortValidateInterruptPriority>
	__asm volatile
 8006490:	f3ef 8211 	mrs	r2, BASEPRI
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	b672      	cpsid	i
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	b662      	cpsie	i
 80064a8:	617a      	str	r2, [r7, #20]
 80064aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80064ac:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064bc:	429a      	cmp	r2, r3
 80064be:	d22b      	bcs.n	8006518 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064da:	d112      	bne.n	8006502 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d016      	beq.n	8006512 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	3324      	adds	r3, #36	; 0x24
 80064e8:	4618      	mov	r0, r3
 80064ea:	f001 f89d 	bl	8007628 <xTaskRemoveFromEventList>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00e      	beq.n	8006512 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2201      	movs	r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e007      	b.n	8006512 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006506:	3301      	adds	r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	b25a      	sxtb	r2, r3
 800650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006512:	2301      	movs	r3, #1
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
 8006516:	e001      	b.n	800651c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006518:	2300      	movs	r3, #0
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f383 8811 	msr	BASEPRI, r3
}
 8006526:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800652a:	4618      	mov	r0, r3
 800652c:	3738      	adds	r7, #56	; 0x38
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08c      	sub	sp, #48	; 0x30
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006540:	2300      	movs	r3, #0
 8006542:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10c      	bne.n	8006568 <xQueueReceive+0x34>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	b672      	cpsid	i
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	b662      	cpsie	i
 8006562:	623b      	str	r3, [r7, #32]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <xQueueReceive+0x42>
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <xQueueReceive+0x46>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueReceive+0x48>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10c      	bne.n	800659a <xQueueReceive+0x66>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	b672      	cpsid	i
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	b662      	cpsie	i
 8006594:	61fb      	str	r3, [r7, #28]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800659a:	f001 fa09 	bl	80079b0 <xTaskGetSchedulerState>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d102      	bne.n	80065aa <xQueueReceive+0x76>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <xQueueReceive+0x7a>
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <xQueueReceive+0x7c>
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10c      	bne.n	80065ce <xQueueReceive+0x9a>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b8:	b672      	cpsid	i
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	b662      	cpsie	i
 80065c8:	61bb      	str	r3, [r7, #24]
}
 80065ca:	bf00      	nop
 80065cc:	e7fe      	b.n	80065cc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065ce:	f001 fd3d 	bl	800804c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01f      	beq.n	800661e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80065de:	68b9      	ldr	r1, [r7, #8]
 80065e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065e2:	f000 fb0e 	bl	8006c02 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1e5a      	subs	r2, r3, #1
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00f      	beq.n	8006616 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	3310      	adds	r3, #16
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 f814 	bl	8007628 <xTaskRemoveFromEventList>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006606:	4b3d      	ldr	r3, [pc, #244]	; (80066fc <xQueueReceive+0x1c8>)
 8006608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	f3bf 8f4f 	dsb	sy
 8006612:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006616:	f001 fd4d 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 800661a:	2301      	movs	r3, #1
 800661c:	e069      	b.n	80066f2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006624:	f001 fd46 	bl	80080b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006628:	2300      	movs	r3, #0
 800662a:	e062      	b.n	80066f2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006632:	f107 0310 	add.w	r3, r7, #16
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f85a 	bl	80076f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800663c:	2301      	movs	r3, #1
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006640:	f001 fd38 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006644:	f000 fde4 	bl	8007210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006648:	f001 fd00 	bl	800804c <vPortEnterCritical>
 800664c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006652:	b25b      	sxtb	r3, r3
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d103      	bne.n	8006662 <xQueueReceive+0x12e>
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006668:	b25b      	sxtb	r3, r3
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d103      	bne.n	8006678 <xQueueReceive+0x144>
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006678:	f001 fd1c 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800667c:	1d3a      	adds	r2, r7, #4
 800667e:	f107 0310 	add.w	r3, r7, #16
 8006682:	4611      	mov	r1, r2
 8006684:	4618      	mov	r0, r3
 8006686:	f001 f849 	bl	800771c <xTaskCheckForTimeOut>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d123      	bne.n	80066d8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006692:	f000 fb2e 	bl	8006cf2 <prvIsQueueEmpty>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d017      	beq.n	80066cc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800669c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669e:	3324      	adds	r3, #36	; 0x24
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4611      	mov	r1, r2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 ff99 	bl	80075dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ac:	f000 facf 	bl	8006c4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066b0:	f000 fdbc 	bl	800722c <xTaskResumeAll>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d189      	bne.n	80065ce <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80066ba:	4b10      	ldr	r3, [pc, #64]	; (80066fc <xQueueReceive+0x1c8>)
 80066bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	e780      	b.n	80065ce <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066ce:	f000 fabe 	bl	8006c4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066d2:	f000 fdab 	bl	800722c <xTaskResumeAll>
 80066d6:	e77a      	b.n	80065ce <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80066d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066da:	f000 fab8 	bl	8006c4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066de:	f000 fda5 	bl	800722c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066e4:	f000 fb05 	bl	8006cf2 <prvIsQueueEmpty>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f43f af6f 	beq.w	80065ce <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3730      	adds	r7, #48	; 0x30
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	e000ed04 	.word	0xe000ed04

08006700 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	; 0x38
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800670a:	2300      	movs	r3, #0
 800670c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006712:	2300      	movs	r3, #0
 8006714:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10c      	bne.n	8006736 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	623b      	str	r3, [r7, #32]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00c      	beq.n	8006758 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800673e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006742:	b672      	cpsid	i
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	b662      	cpsie	i
 8006752:	61fb      	str	r3, [r7, #28]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006758:	f001 f92a 	bl	80079b0 <xTaskGetSchedulerState>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <xQueueSemaphoreTake+0x68>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <xQueueSemaphoreTake+0x6c>
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <xQueueSemaphoreTake+0x6e>
 800676c:	2300      	movs	r3, #0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10c      	bne.n	800678c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	b672      	cpsid	i
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	b662      	cpsie	i
 8006786:	61bb      	str	r3, [r7, #24]
}
 8006788:	bf00      	nop
 800678a:	e7fe      	b.n	800678a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800678c:	f001 fc5e 	bl	800804c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	2b00      	cmp	r3, #0
 800679a:	d024      	beq.n	80067e6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	1e5a      	subs	r2, r3, #1
 80067a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d104      	bne.n	80067b6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80067ac:	f001 fac6 	bl	8007d3c <pvTaskIncrementMutexHeldCount>
 80067b0:	4602      	mov	r2, r0
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00f      	beq.n	80067de <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	3310      	adds	r3, #16
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 ff30 	bl	8007628 <xTaskRemoveFromEventList>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d007      	beq.n	80067de <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067ce:	4b55      	ldr	r3, [pc, #340]	; (8006924 <xQueueSemaphoreTake+0x224>)
 80067d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	f3bf 8f4f 	dsb	sy
 80067da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067de:	f001 fc69 	bl	80080b4 <vPortExitCritical>
				return pdPASS;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e099      	b.n	800691a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d113      	bne.n	8006814 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	b672      	cpsid	i
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	b662      	cpsie	i
 8006806:	617b      	str	r3, [r7, #20]
}
 8006808:	bf00      	nop
 800680a:	e7fe      	b.n	800680a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800680c:	f001 fc52 	bl	80080b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006810:	2300      	movs	r3, #0
 8006812:	e082      	b.n	800691a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	4618      	mov	r0, r3
 8006820:	f000 ff66 	bl	80076f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006824:	2301      	movs	r3, #1
 8006826:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006828:	f001 fc44 	bl	80080b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800682c:	f000 fcf0 	bl	8007210 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006830:	f001 fc0c 	bl	800804c <vPortEnterCritical>
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800683a:	b25b      	sxtb	r3, r3
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d103      	bne.n	800684a <xQueueSemaphoreTake+0x14a>
 8006842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800684a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006850:	b25b      	sxtb	r3, r3
 8006852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006856:	d103      	bne.n	8006860 <xQueueSemaphoreTake+0x160>
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	2200      	movs	r2, #0
 800685c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006860:	f001 fc28 	bl	80080b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006864:	463a      	mov	r2, r7
 8006866:	f107 030c 	add.w	r3, r7, #12
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f000 ff55 	bl	800771c <xTaskCheckForTimeOut>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d132      	bne.n	80068de <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006878:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800687a:	f000 fa3a 	bl	8006cf2 <prvIsQueueEmpty>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d026      	beq.n	80068d2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d109      	bne.n	80068a0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800688c:	f001 fbde 	bl	800804c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f8a9 	bl	80079ec <xTaskPriorityInherit>
 800689a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800689c:	f001 fc0a 	bl	80080b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	3324      	adds	r3, #36	; 0x24
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fe97 	bl	80075dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068b0:	f000 f9cd 	bl	8006c4e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068b4:	f000 fcba 	bl	800722c <xTaskResumeAll>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f47f af66 	bne.w	800678c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80068c0:	4b18      	ldr	r3, [pc, #96]	; (8006924 <xQueueSemaphoreTake+0x224>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	e75c      	b.n	800678c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80068d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068d4:	f000 f9bb 	bl	8006c4e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068d8:	f000 fca8 	bl	800722c <xTaskResumeAll>
 80068dc:	e756      	b.n	800678c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80068de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068e0:	f000 f9b5 	bl	8006c4e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068e4:	f000 fca2 	bl	800722c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068ea:	f000 fa02 	bl	8006cf2 <prvIsQueueEmpty>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f43f af4b 	beq.w	800678c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80068f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00d      	beq.n	8006918 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80068fc:	f001 fba6 	bl	800804c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006902:	f000 f8fc 	bl	8006afe <prvGetDisinheritPriorityAfterTimeout>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800690e:	4618      	mov	r0, r3
 8006910:	f001 f976 	bl	8007c00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006914:	f001 fbce 	bl	80080b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006918:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800691a:	4618      	mov	r0, r3
 800691c:	3738      	adds	r7, #56	; 0x38
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08e      	sub	sp, #56	; 0x38
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10c      	bne.n	8006958 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	b672      	cpsid	i
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	b662      	cpsie	i
 8006952:	623b      	str	r3, [r7, #32]
}
 8006954:	bf00      	nop
 8006956:	e7fe      	b.n	8006956 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <xQueueReceiveFromISR+0x3e>
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	d101      	bne.n	800696a <xQueueReceiveFromISR+0x42>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <xQueueReceiveFromISR+0x44>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10c      	bne.n	800698a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	b672      	cpsid	i
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	b662      	cpsie	i
 8006984:	61fb      	str	r3, [r7, #28]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800698a:	f001 fc47 	bl	800821c <vPortValidateInterruptPriority>
	__asm volatile
 800698e:	f3ef 8211 	mrs	r2, BASEPRI
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	b672      	cpsid	i
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	b662      	cpsie	i
 80069a6:	61ba      	str	r2, [r7, #24]
 80069a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d02f      	beq.n	8006a1a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069c8:	f000 f91b 	bl	8006c02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ce:	1e5a      	subs	r2, r3, #1
 80069d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80069d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d112      	bne.n	8006a04 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d016      	beq.n	8006a14 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	3310      	adds	r3, #16
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fe1c 	bl	8007628 <xTaskRemoveFromEventList>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00e      	beq.n	8006a14 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00b      	beq.n	8006a14 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	e007      	b.n	8006a14 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	b25a      	sxtb	r2, r3
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006a14:	2301      	movs	r3, #1
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
 8006a18:	e001      	b.n	8006a1e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f383 8811 	msr	BASEPRI, r3
}
 8006a28:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3738      	adds	r7, #56	; 0x38
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10c      	bne.n	8006a5c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a46:	b672      	cpsid	i
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	b662      	cpsie	i
 8006a56:	60bb      	str	r3, [r7, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8006a5c:	f001 faf6 	bl	800804c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006a66:	f001 fb25 	bl	80080b4 <vPortExitCritical>

	return uxReturn;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10c      	bne.n	8006aa0 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8006a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8a:	b672      	cpsid	i
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	b662      	cpsie	i
 8006a9a:	60fb      	str	r3, [r7, #12]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006aa6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10c      	bne.n	8006ae0 <vQueueDelete+0x2c>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	b672      	cpsid	i
 8006acc:	f383 8811 	msr	BASEPRI, r3
 8006ad0:	f3bf 8f6f 	isb	sy
 8006ad4:	f3bf 8f4f 	dsb	sy
 8006ad8:	b662      	cpsie	i
 8006ada:	60bb      	str	r3, [r7, #8]
}
 8006adc:	bf00      	nop
 8006ade:	e7fe      	b.n	8006ade <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f000 f935 	bl	8006d50 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d102      	bne.n	8006af6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f001 fca1 	bl	8008438 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d006      	beq.n	8006b1c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f1c3 0307 	rsb	r3, r3, #7
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	e001      	b.n	8006b20 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006b20:	68fb      	ldr	r3, [r7, #12]
	}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b086      	sub	sp, #24
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	60f8      	str	r0, [r7, #12]
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10d      	bne.n	8006b68 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d14d      	bne.n	8006bf0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 ffc7 	bl	8007aec <xTaskPriorityDisinherit>
 8006b5e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	e043      	b.n	8006bf0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d119      	bne.n	8006ba2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6858      	ldr	r0, [r3, #4]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	461a      	mov	r2, r3
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	f012 fd2f 	bl	80195dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	441a      	add	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d32b      	bcc.n	8006bf0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	605a      	str	r2, [r3, #4]
 8006ba0:	e026      	b.n	8006bf0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68d8      	ldr	r0, [r3, #12]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	461a      	mov	r2, r3
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	f012 fd15 	bl	80195dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	425b      	negs	r3, r3
 8006bbc:	441a      	add	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d207      	bcs.n	8006bde <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	425b      	negs	r3, r3
 8006bd8:	441a      	add	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d105      	bne.n	8006bf0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	3b01      	subs	r3, #1
 8006bee:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1c5a      	adds	r2, r3, #1
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bf8:	697b      	ldr	r3, [r7, #20]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d018      	beq.n	8006c46 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d303      	bcc.n	8006c36 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68d9      	ldr	r1, [r3, #12]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6838      	ldr	r0, [r7, #0]
 8006c42:	f012 fccb 	bl	80195dc <memcpy>
	}
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b084      	sub	sp, #16
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c56:	f001 f9f9 	bl	800804c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c60:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c62:	e011      	b.n	8006c88 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d012      	beq.n	8006c92 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3324      	adds	r3, #36	; 0x24
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 fcd9 	bl	8007628 <xTaskRemoveFromEventList>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d001      	beq.n	8006c80 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c7c:	f000 fdb4 	bl	80077e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	dce9      	bgt.n	8006c64 <prvUnlockQueue+0x16>
 8006c90:	e000      	b.n	8006c94 <prvUnlockQueue+0x46>
					break;
 8006c92:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	22ff      	movs	r2, #255	; 0xff
 8006c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006c9c:	f001 fa0a 	bl	80080b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ca0:	f001 f9d4 	bl	800804c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006caa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cac:	e011      	b.n	8006cd2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d012      	beq.n	8006cdc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3310      	adds	r3, #16
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fcb4 	bl	8007628 <xTaskRemoveFromEventList>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d001      	beq.n	8006cca <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006cc6:	f000 fd8f 	bl	80077e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	dce9      	bgt.n	8006cae <prvUnlockQueue+0x60>
 8006cda:	e000      	b.n	8006cde <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cdc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	22ff      	movs	r2, #255	; 0xff
 8006ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006ce6:	f001 f9e5 	bl	80080b4 <vPortExitCritical>
}
 8006cea:	bf00      	nop
 8006cec:	3710      	adds	r7, #16
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	b084      	sub	sp, #16
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cfa:	f001 f9a7 	bl	800804c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d06:	2301      	movs	r3, #1
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e001      	b.n	8006d10 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d10:	f001 f9d0 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 8006d14:	68fb      	ldr	r3, [r7, #12]
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3710      	adds	r7, #16
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b084      	sub	sp, #16
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d26:	f001 f991 	bl	800804c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d102      	bne.n	8006d3c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]
 8006d3a:	e001      	b.n	8006d40 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d40:	f001 f9b8 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 8006d44:	68fb      	ldr	r3, [r7, #12]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	e016      	b.n	8006d8c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006d5e:	4a10      	ldr	r2, [pc, #64]	; (8006da0 <vQueueUnregisterQueue+0x50>)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	00db      	lsls	r3, r3, #3
 8006d64:	4413      	add	r3, r2
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d10b      	bne.n	8006d86 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006d6e:	4a0c      	ldr	r2, [pc, #48]	; (8006da0 <vQueueUnregisterQueue+0x50>)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2100      	movs	r1, #0
 8006d74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006d78:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <vQueueUnregisterQueue+0x50>)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	00db      	lsls	r3, r3, #3
 8006d7e:	4413      	add	r3, r2
 8006d80:	2200      	movs	r2, #0
 8006d82:	605a      	str	r2, [r3, #4]
				break;
 8006d84:	e006      	b.n	8006d94 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b07      	cmp	r3, #7
 8006d90:	d9e5      	bls.n	8006d5e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006d92:	bf00      	nop
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	200247dc 	.word	0x200247dc

08006da4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08e      	sub	sp, #56	; 0x38
 8006da8:	af04      	add	r7, sp, #16
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10c      	bne.n	8006dd2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	b672      	cpsid	i
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	b662      	cpsie	i
 8006dcc:	623b      	str	r3, [r7, #32]
}
 8006dce:	bf00      	nop
 8006dd0:	e7fe      	b.n	8006dd0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10c      	bne.n	8006df2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	b672      	cpsid	i
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	b662      	cpsie	i
 8006dec:	61fb      	str	r3, [r7, #28]
}
 8006dee:	bf00      	nop
 8006df0:	e7fe      	b.n	8006df0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006df2:	2354      	movs	r3, #84	; 0x54
 8006df4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b54      	cmp	r3, #84	; 0x54
 8006dfa:	d00c      	beq.n	8006e16 <xTaskCreateStatic+0x72>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	b672      	cpsid	i
 8006e02:	f383 8811 	msr	BASEPRI, r3
 8006e06:	f3bf 8f6f 	isb	sy
 8006e0a:	f3bf 8f4f 	dsb	sy
 8006e0e:	b662      	cpsie	i
 8006e10:	61bb      	str	r3, [r7, #24]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006e16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d01e      	beq.n	8006e5c <xTaskCreateStatic+0xb8>
 8006e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01b      	beq.n	8006e5c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006e36:	2300      	movs	r3, #0
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	9302      	str	r3, [sp, #8]
 8006e3e:	f107 0314 	add.w	r3, r7, #20
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f850 	bl	8006ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e56:	f000 f8d7 	bl	8007008 <prvAddNewTaskToReadyList>
 8006e5a:	e001      	b.n	8006e60 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e60:	697b      	ldr	r3, [r7, #20]
	}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3728      	adds	r7, #40	; 0x28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b08c      	sub	sp, #48	; 0x30
 8006e6e:	af04      	add	r7, sp, #16
 8006e70:	60f8      	str	r0, [r7, #12]
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	603b      	str	r3, [r7, #0]
 8006e76:	4613      	mov	r3, r2
 8006e78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e7a:	88fb      	ldrh	r3, [r7, #6]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f001 fa10 	bl	80082a4 <pvPortMalloc>
 8006e84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00e      	beq.n	8006eaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e8c:	2054      	movs	r0, #84	; 0x54
 8006e8e:	f001 fa09 	bl	80082a4 <pvPortMalloc>
 8006e92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006ea0:	e005      	b.n	8006eae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ea2:	6978      	ldr	r0, [r7, #20]
 8006ea4:	f001 fac8 	bl	8008438 <vPortFree>
 8006ea8:	e001      	b.n	8006eae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d017      	beq.n	8006ee4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ebc:	88fa      	ldrh	r2, [r7, #6]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9303      	str	r3, [sp, #12]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	9302      	str	r3, [sp, #8]
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	9301      	str	r3, [sp, #4]
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f80e 	bl	8006ef4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ed8:	69f8      	ldr	r0, [r7, #28]
 8006eda:	f000 f895 	bl	8007008 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	e002      	b.n	8006eea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eea:	69bb      	ldr	r3, [r7, #24]
	}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b088      	sub	sp, #32
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f06:	6879      	ldr	r1, [r7, #4]
 8006f08:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006f0c:	440b      	add	r3, r1
 8006f0e:	009b      	lsls	r3, r3, #2
 8006f10:	4413      	add	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00c      	beq.n	8006f40 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	b672      	cpsid	i
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	b662      	cpsie	i
 8006f3a:	617b      	str	r3, [r7, #20]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01f      	beq.n	8006f86 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f46:	2300      	movs	r3, #0
 8006f48:	61fb      	str	r3, [r7, #28]
 8006f4a:	e012      	b.n	8006f72 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	7819      	ldrb	r1, [r3, #0]
 8006f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	3334      	adds	r3, #52	; 0x34
 8006f5c:	460a      	mov	r2, r1
 8006f5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	4413      	add	r3, r2
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d006      	beq.n	8006f7a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	61fb      	str	r3, [r7, #28]
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	2b0f      	cmp	r3, #15
 8006f76:	d9e9      	bls.n	8006f4c <prvInitialiseNewTask+0x58>
 8006f78:	e000      	b.n	8006f7c <prvInitialiseNewTask+0x88>
			{
				break;
 8006f7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f84:	e003      	b.n	8006f8e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	2b06      	cmp	r3, #6
 8006f92:	d901      	bls.n	8006f98 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f94:	2306      	movs	r3, #6
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	3304      	adds	r3, #4
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe fe55 	bl	8005c5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fe fe50 	bl	8005c5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	f1c3 0207 	rsb	r2, r3, #7
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fe2:	683a      	ldr	r2, [r7, #0]
 8006fe4:	68f9      	ldr	r1, [r7, #12]
 8006fe6:	69b8      	ldr	r0, [r7, #24]
 8006fe8:	f000 ff22 	bl	8007e30 <pxPortInitialiseStack>
 8006fec:	4602      	mov	r2, r0
 8006fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ffc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ffe:	bf00      	nop
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007010:	f001 f81c 	bl	800804c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007014:	4b2a      	ldr	r3, [pc, #168]	; (80070c0 <prvAddNewTaskToReadyList+0xb8>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	4a29      	ldr	r2, [pc, #164]	; (80070c0 <prvAddNewTaskToReadyList+0xb8>)
 800701c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800701e:	4b29      	ldr	r3, [pc, #164]	; (80070c4 <prvAddNewTaskToReadyList+0xbc>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d109      	bne.n	800703a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007026:	4a27      	ldr	r2, [pc, #156]	; (80070c4 <prvAddNewTaskToReadyList+0xbc>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800702c:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <prvAddNewTaskToReadyList+0xb8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d110      	bne.n	8007056 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007034:	f000 fbfc 	bl	8007830 <prvInitialiseTaskLists>
 8007038:	e00d      	b.n	8007056 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <prvAddNewTaskToReadyList+0xc0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007042:	4b20      	ldr	r3, [pc, #128]	; (80070c4 <prvAddNewTaskToReadyList+0xbc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	429a      	cmp	r2, r3
 800704e:	d802      	bhi.n	8007056 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007050:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <prvAddNewTaskToReadyList+0xbc>)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007056:	4b1d      	ldr	r3, [pc, #116]	; (80070cc <prvAddNewTaskToReadyList+0xc4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3301      	adds	r3, #1
 800705c:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <prvAddNewTaskToReadyList+0xc4>)
 800705e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	2201      	movs	r2, #1
 8007066:	409a      	lsls	r2, r3
 8007068:	4b19      	ldr	r3, [pc, #100]	; (80070d0 <prvAddNewTaskToReadyList+0xc8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4313      	orrs	r3, r2
 800706e:	4a18      	ldr	r2, [pc, #96]	; (80070d0 <prvAddNewTaskToReadyList+0xc8>)
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <prvAddNewTaskToReadyList+0xcc>)
 8007080:	441a      	add	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3304      	adds	r3, #4
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f7fe fdf5 	bl	8005c78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800708e:	f001 f811 	bl	80080b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007092:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <prvAddNewTaskToReadyList+0xc0>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d00e      	beq.n	80070b8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800709a:	4b0a      	ldr	r3, [pc, #40]	; (80070c4 <prvAddNewTaskToReadyList+0xbc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d207      	bcs.n	80070b8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80070a8:	4b0b      	ldr	r3, [pc, #44]	; (80070d8 <prvAddNewTaskToReadyList+0xd0>)
 80070aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	f3bf 8f4f 	dsb	sy
 80070b4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	20000f70 	.word	0x20000f70
 80070c4:	20000e70 	.word	0x20000e70
 80070c8:	20000f7c 	.word	0x20000f7c
 80070cc:	20000f8c 	.word	0x20000f8c
 80070d0:	20000f78 	.word	0x20000f78
 80070d4:	20000e74 	.word	0x20000e74
 80070d8:	e000ed04 	.word	0xe000ed04

080070dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d019      	beq.n	8007122 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070ee:	4b14      	ldr	r3, [pc, #80]	; (8007140 <vTaskDelay+0x64>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <vTaskDelay+0x34>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fa:	b672      	cpsid	i
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	b662      	cpsie	i
 800710a:	60bb      	str	r3, [r7, #8]
}
 800710c:	bf00      	nop
 800710e:	e7fe      	b.n	800710e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007110:	f000 f87e 	bl	8007210 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007114:	2100      	movs	r1, #0
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fe24 	bl	8007d64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800711c:	f000 f886 	bl	800722c <xTaskResumeAll>
 8007120:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d107      	bne.n	8007138 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <vTaskDelay+0x68>)
 800712a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007138:	bf00      	nop
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000f98 	.word	0x20000f98
 8007144:	e000ed04 	.word	0xe000ed04

08007148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b08a      	sub	sp, #40	; 0x28
 800714c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800714e:	2300      	movs	r3, #0
 8007150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007156:	463a      	mov	r2, r7
 8007158:	1d39      	adds	r1, r7, #4
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	4618      	mov	r0, r3
 8007160:	f7f9 ff64 	bl	800102c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	9202      	str	r2, [sp, #8]
 800716c:	9301      	str	r3, [sp, #4]
 800716e:	2300      	movs	r3, #0
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	2300      	movs	r3, #0
 8007174:	460a      	mov	r2, r1
 8007176:	4920      	ldr	r1, [pc, #128]	; (80071f8 <vTaskStartScheduler+0xb0>)
 8007178:	4820      	ldr	r0, [pc, #128]	; (80071fc <vTaskStartScheduler+0xb4>)
 800717a:	f7ff fe13 	bl	8006da4 <xTaskCreateStatic>
 800717e:	4603      	mov	r3, r0
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <vTaskStartScheduler+0xb8>)
 8007182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007184:	4b1e      	ldr	r3, [pc, #120]	; (8007200 <vTaskStartScheduler+0xb8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d002      	beq.n	8007192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800718c:	2301      	movs	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e001      	b.n	8007196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d118      	bne.n	80071ce <vTaskStartScheduler+0x86>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	b672      	cpsid	i
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	b662      	cpsie	i
 80071b0:	613b      	str	r3, [r7, #16]
}
 80071b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071b4:	4b13      	ldr	r3, [pc, #76]	; (8007204 <vTaskStartScheduler+0xbc>)
 80071b6:	f04f 32ff 	mov.w	r2, #4294967295
 80071ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071bc:	4b12      	ldr	r3, [pc, #72]	; (8007208 <vTaskStartScheduler+0xc0>)
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071c2:	4b12      	ldr	r3, [pc, #72]	; (800720c <vTaskStartScheduler+0xc4>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071c8:	f000 fec2 	bl	8007f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071cc:	e010      	b.n	80071f0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d10c      	bne.n	80071f0 <vTaskStartScheduler+0xa8>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	b672      	cpsid	i
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	b662      	cpsie	i
 80071ea:	60fb      	str	r3, [r7, #12]
}
 80071ec:	bf00      	nop
 80071ee:	e7fe      	b.n	80071ee <vTaskStartScheduler+0xa6>
}
 80071f0:	bf00      	nop
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	0801eaac 	.word	0x0801eaac
 80071fc:	08007801 	.word	0x08007801
 8007200:	20000f94 	.word	0x20000f94
 8007204:	20000f90 	.word	0x20000f90
 8007208:	20000f7c 	.word	0x20000f7c
 800720c:	20000f74 	.word	0x20000f74

08007210 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007214:	4b04      	ldr	r3, [pc, #16]	; (8007228 <vTaskSuspendAll+0x18>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3301      	adds	r3, #1
 800721a:	4a03      	ldr	r2, [pc, #12]	; (8007228 <vTaskSuspendAll+0x18>)
 800721c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800721e:	bf00      	nop
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	20000f98 	.word	0x20000f98

0800722c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007232:	2300      	movs	r3, #0
 8007234:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007236:	2300      	movs	r3, #0
 8007238:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800723a:	4b42      	ldr	r3, [pc, #264]	; (8007344 <xTaskResumeAll+0x118>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10c      	bne.n	800725c <xTaskResumeAll+0x30>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	b672      	cpsid	i
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	b662      	cpsie	i
 8007256:	603b      	str	r3, [r7, #0]
}
 8007258:	bf00      	nop
 800725a:	e7fe      	b.n	800725a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800725c:	f000 fef6 	bl	800804c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007260:	4b38      	ldr	r3, [pc, #224]	; (8007344 <xTaskResumeAll+0x118>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3b01      	subs	r3, #1
 8007266:	4a37      	ldr	r2, [pc, #220]	; (8007344 <xTaskResumeAll+0x118>)
 8007268:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800726a:	4b36      	ldr	r3, [pc, #216]	; (8007344 <xTaskResumeAll+0x118>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d161      	bne.n	8007336 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007272:	4b35      	ldr	r3, [pc, #212]	; (8007348 <xTaskResumeAll+0x11c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d05d      	beq.n	8007336 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800727a:	e02e      	b.n	80072da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800727c:	4b33      	ldr	r3, [pc, #204]	; (800734c <xTaskResumeAll+0x120>)
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3318      	adds	r3, #24
 8007288:	4618      	mov	r0, r3
 800728a:	f7fe fd52 	bl	8005d32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	3304      	adds	r3, #4
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fd4d 	bl	8005d32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	2201      	movs	r2, #1
 800729e:	409a      	lsls	r2, r3
 80072a0:	4b2b      	ldr	r3, [pc, #172]	; (8007350 <xTaskResumeAll+0x124>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	4a2a      	ldr	r2, [pc, #168]	; (8007350 <xTaskResumeAll+0x124>)
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4a27      	ldr	r2, [pc, #156]	; (8007354 <xTaskResumeAll+0x128>)
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3304      	adds	r3, #4
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7fe fcd9 	bl	8005c78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ca:	4b23      	ldr	r3, [pc, #140]	; (8007358 <xTaskResumeAll+0x12c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d302      	bcc.n	80072da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80072d4:	4b21      	ldr	r3, [pc, #132]	; (800735c <xTaskResumeAll+0x130>)
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072da:	4b1c      	ldr	r3, [pc, #112]	; (800734c <xTaskResumeAll+0x120>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1cc      	bne.n	800727c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072e8:	f000 fb42 	bl	8007970 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80072ec:	4b1c      	ldr	r3, [pc, #112]	; (8007360 <xTaskResumeAll+0x134>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d010      	beq.n	800731a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072f8:	f000 f858 	bl	80073ac <xTaskIncrementTick>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007302:	4b16      	ldr	r3, [pc, #88]	; (800735c <xTaskResumeAll+0x130>)
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3b01      	subs	r3, #1
 800730c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f1      	bne.n	80072f8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007314:	4b12      	ldr	r3, [pc, #72]	; (8007360 <xTaskResumeAll+0x134>)
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <xTaskResumeAll+0x130>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d009      	beq.n	8007336 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007322:	2301      	movs	r3, #1
 8007324:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007326:	4b0f      	ldr	r3, [pc, #60]	; (8007364 <xTaskResumeAll+0x138>)
 8007328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800732c:	601a      	str	r2, [r3, #0]
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007336:	f000 febd 	bl	80080b4 <vPortExitCritical>

	return xAlreadyYielded;
 800733a:	68bb      	ldr	r3, [r7, #8]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20000f98 	.word	0x20000f98
 8007348:	20000f70 	.word	0x20000f70
 800734c:	20000f30 	.word	0x20000f30
 8007350:	20000f78 	.word	0x20000f78
 8007354:	20000e74 	.word	0x20000e74
 8007358:	20000e70 	.word	0x20000e70
 800735c:	20000f84 	.word	0x20000f84
 8007360:	20000f80 	.word	0x20000f80
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <xTaskGetTickCount+0x1c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007374:	687b      	ldr	r3, [r7, #4]
}
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000f74 	.word	0x20000f74

08007388 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800738e:	f000 ff45 	bl	800821c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007392:	2300      	movs	r3, #0
 8007394:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007396:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <xTaskGetTickCountFromISR+0x20>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800739c:	683b      	ldr	r3, [r7, #0]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	20000f74 	.word	0x20000f74

080073ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b6:	4b4f      	ldr	r3, [pc, #316]	; (80074f4 <xTaskIncrementTick+0x148>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	f040 808a 	bne.w	80074d4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073c0:	4b4d      	ldr	r3, [pc, #308]	; (80074f8 <xTaskIncrementTick+0x14c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073c8:	4a4b      	ldr	r2, [pc, #300]	; (80074f8 <xTaskIncrementTick+0x14c>)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d122      	bne.n	800741a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80073d4:	4b49      	ldr	r3, [pc, #292]	; (80074fc <xTaskIncrementTick+0x150>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00c      	beq.n	80073f8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	b672      	cpsid	i
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	b662      	cpsie	i
 80073f2:	603b      	str	r3, [r7, #0]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTaskIncrementTick+0x4a>
 80073f8:	4b40      	ldr	r3, [pc, #256]	; (80074fc <xTaskIncrementTick+0x150>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	4b40      	ldr	r3, [pc, #256]	; (8007500 <xTaskIncrementTick+0x154>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a3e      	ldr	r2, [pc, #248]	; (80074fc <xTaskIncrementTick+0x150>)
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4a3e      	ldr	r2, [pc, #248]	; (8007500 <xTaskIncrementTick+0x154>)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	4b3d      	ldr	r3, [pc, #244]	; (8007504 <xTaskIncrementTick+0x158>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3301      	adds	r3, #1
 8007412:	4a3c      	ldr	r2, [pc, #240]	; (8007504 <xTaskIncrementTick+0x158>)
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	f000 faab 	bl	8007970 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800741a:	4b3b      	ldr	r3, [pc, #236]	; (8007508 <xTaskIncrementTick+0x15c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d348      	bcc.n	80074b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007424:	4b35      	ldr	r3, [pc, #212]	; (80074fc <xTaskIncrementTick+0x150>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800742e:	4b36      	ldr	r3, [pc, #216]	; (8007508 <xTaskIncrementTick+0x15c>)
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	601a      	str	r2, [r3, #0]
					break;
 8007436:	e03e      	b.n	80074b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007438:	4b30      	ldr	r3, [pc, #192]	; (80074fc <xTaskIncrementTick+0x150>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	429a      	cmp	r2, r3
 800744e:	d203      	bcs.n	8007458 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007450:	4a2d      	ldr	r2, [pc, #180]	; (8007508 <xTaskIncrementTick+0x15c>)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007456:	e02e      	b.n	80074b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	3304      	adds	r3, #4
 800745c:	4618      	mov	r0, r3
 800745e:	f7fe fc68 	bl	8005d32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d004      	beq.n	8007474 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	3318      	adds	r3, #24
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fc5f 	bl	8005d32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	2201      	movs	r2, #1
 800747a:	409a      	lsls	r2, r3
 800747c:	4b23      	ldr	r3, [pc, #140]	; (800750c <xTaskIncrementTick+0x160>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4313      	orrs	r3, r2
 8007482:	4a22      	ldr	r2, [pc, #136]	; (800750c <xTaskIncrementTick+0x160>)
 8007484:	6013      	str	r3, [r2, #0]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4a1f      	ldr	r2, [pc, #124]	; (8007510 <xTaskIncrementTick+0x164>)
 8007494:	441a      	add	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3304      	adds	r3, #4
 800749a:	4619      	mov	r1, r3
 800749c:	4610      	mov	r0, r2
 800749e:	f7fe fbeb 	bl	8005c78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <xTaskIncrementTick+0x168>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d3b9      	bcc.n	8007424 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074b4:	e7b6      	b.n	8007424 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074b6:	4b17      	ldr	r3, [pc, #92]	; (8007514 <xTaskIncrementTick+0x168>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4914      	ldr	r1, [pc, #80]	; (8007510 <xTaskIncrementTick+0x164>)
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d907      	bls.n	80074de <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e004      	b.n	80074de <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074d4:	4b10      	ldr	r3, [pc, #64]	; (8007518 <xTaskIncrementTick+0x16c>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	3301      	adds	r3, #1
 80074da:	4a0f      	ldr	r2, [pc, #60]	; (8007518 <xTaskIncrementTick+0x16c>)
 80074dc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074de:	4b0f      	ldr	r3, [pc, #60]	; (800751c <xTaskIncrementTick+0x170>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80074e6:	2301      	movs	r3, #1
 80074e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074ea:	697b      	ldr	r3, [r7, #20]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3718      	adds	r7, #24
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}
 80074f4:	20000f98 	.word	0x20000f98
 80074f8:	20000f74 	.word	0x20000f74
 80074fc:	20000f28 	.word	0x20000f28
 8007500:	20000f2c 	.word	0x20000f2c
 8007504:	20000f88 	.word	0x20000f88
 8007508:	20000f90 	.word	0x20000f90
 800750c:	20000f78 	.word	0x20000f78
 8007510:	20000e74 	.word	0x20000e74
 8007514:	20000e70 	.word	0x20000e70
 8007518:	20000f80 	.word	0x20000f80
 800751c:	20000f84 	.word	0x20000f84

08007520 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007526:	4b28      	ldr	r3, [pc, #160]	; (80075c8 <vTaskSwitchContext+0xa8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800752e:	4b27      	ldr	r3, [pc, #156]	; (80075cc <vTaskSwitchContext+0xac>)
 8007530:	2201      	movs	r2, #1
 8007532:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007534:	e041      	b.n	80075ba <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007536:	4b25      	ldr	r3, [pc, #148]	; (80075cc <vTaskSwitchContext+0xac>)
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753c:	4b24      	ldr	r3, [pc, #144]	; (80075d0 <vTaskSwitchContext+0xb0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	fab3 f383 	clz	r3, r3
 8007548:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	f1c3 031f 	rsb	r3, r3, #31
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	4920      	ldr	r1, [pc, #128]	; (80075d4 <vTaskSwitchContext+0xb4>)
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10c      	bne.n	8007580 <vTaskSwitchContext+0x60>
	__asm volatile
 8007566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756a:	b672      	cpsid	i
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	b662      	cpsie	i
 800757a:	607b      	str	r3, [r7, #4]
}
 800757c:	bf00      	nop
 800757e:	e7fe      	b.n	800757e <vTaskSwitchContext+0x5e>
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4a12      	ldr	r2, [pc, #72]	; (80075d4 <vTaskSwitchContext+0xb4>)
 800758c:	4413      	add	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	605a      	str	r2, [r3, #4]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	3308      	adds	r3, #8
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d104      	bne.n	80075b0 <vTaskSwitchContext+0x90>
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	605a      	str	r2, [r3, #4]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	4a08      	ldr	r2, [pc, #32]	; (80075d8 <vTaskSwitchContext+0xb8>)
 80075b8:	6013      	str	r3, [r2, #0]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
 80075c6:	bf00      	nop
 80075c8:	20000f98 	.word	0x20000f98
 80075cc:	20000f84 	.word	0x20000f84
 80075d0:	20000f78 	.word	0x20000f78
 80075d4:	20000e74 	.word	0x20000e74
 80075d8:	20000e70 	.word	0x20000e70

080075dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10c      	bne.n	8007606 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f0:	b672      	cpsid	i
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	b662      	cpsie	i
 8007600:	60fb      	str	r3, [r7, #12]
}
 8007602:	bf00      	nop
 8007604:	e7fe      	b.n	8007604 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <vTaskPlaceOnEventList+0x48>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3318      	adds	r3, #24
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7fe fb56 	bl	8005cc0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007614:	2101      	movs	r1, #1
 8007616:	6838      	ldr	r0, [r7, #0]
 8007618:	f000 fba4 	bl	8007d64 <prvAddCurrentTaskToDelayedList>
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	20000e70 	.word	0x20000e70

08007628 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10c      	bne.n	8007658 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	b672      	cpsid	i
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	b662      	cpsie	i
 8007652:	60fb      	str	r3, [r7, #12]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	3318      	adds	r3, #24
 800765c:	4618      	mov	r0, r3
 800765e:	f7fe fb68 	bl	8005d32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007662:	4b1d      	ldr	r3, [pc, #116]	; (80076d8 <xTaskRemoveFromEventList+0xb0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d11c      	bne.n	80076a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	3304      	adds	r3, #4
 800766e:	4618      	mov	r0, r3
 8007670:	f7fe fb5f 	bl	8005d32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	4b17      	ldr	r3, [pc, #92]	; (80076dc <xTaskRemoveFromEventList+0xb4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4313      	orrs	r3, r2
 8007682:	4a16      	ldr	r2, [pc, #88]	; (80076dc <xTaskRemoveFromEventList+0xb4>)
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <xTaskRemoveFromEventList+0xb8>)
 8007694:	441a      	add	r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	3304      	adds	r3, #4
 800769a:	4619      	mov	r1, r3
 800769c:	4610      	mov	r0, r2
 800769e:	f7fe faeb 	bl	8005c78 <vListInsertEnd>
 80076a2:	e005      	b.n	80076b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4619      	mov	r1, r3
 80076aa:	480e      	ldr	r0, [pc, #56]	; (80076e4 <xTaskRemoveFromEventList+0xbc>)
 80076ac:	f7fe fae4 	bl	8005c78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	4b0c      	ldr	r3, [pc, #48]	; (80076e8 <xTaskRemoveFromEventList+0xc0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d905      	bls.n	80076ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80076be:	2301      	movs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80076c2:	4b0a      	ldr	r3, [pc, #40]	; (80076ec <xTaskRemoveFromEventList+0xc4>)
 80076c4:	2201      	movs	r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	e001      	b.n	80076ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80076ce:	697b      	ldr	r3, [r7, #20]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000f98 	.word	0x20000f98
 80076dc:	20000f78 	.word	0x20000f78
 80076e0:	20000e74 	.word	0x20000e74
 80076e4:	20000f30 	.word	0x20000f30
 80076e8:	20000e70 	.word	0x20000e70
 80076ec:	20000f84 	.word	0x20000f84

080076f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076f8:	4b06      	ldr	r3, [pc, #24]	; (8007714 <vTaskInternalSetTimeOutState+0x24>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007700:	4b05      	ldr	r3, [pc, #20]	; (8007718 <vTaskInternalSetTimeOutState+0x28>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	605a      	str	r2, [r3, #4]
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr
 8007714:	20000f88 	.word	0x20000f88
 8007718:	20000f74 	.word	0x20000f74

0800771c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10c      	bne.n	8007746 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	b672      	cpsid	i
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	b662      	cpsie	i
 8007740:	613b      	str	r3, [r7, #16]
}
 8007742:	bf00      	nop
 8007744:	e7fe      	b.n	8007744 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800774c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007750:	b672      	cpsid	i
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	b662      	cpsie	i
 8007760:	60fb      	str	r3, [r7, #12]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007766:	f000 fc71 	bl	800804c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800776a:	4b1d      	ldr	r3, [pc, #116]	; (80077e0 <xTaskCheckForTimeOut+0xc4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007782:	d102      	bne.n	800778a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]
 8007788:	e023      	b.n	80077d2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4b15      	ldr	r3, [pc, #84]	; (80077e4 <xTaskCheckForTimeOut+0xc8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	429a      	cmp	r2, r3
 8007794:	d007      	beq.n	80077a6 <xTaskCheckForTimeOut+0x8a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	429a      	cmp	r2, r3
 800779e:	d302      	bcc.n	80077a6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077a0:	2301      	movs	r3, #1
 80077a2:	61fb      	str	r3, [r7, #28]
 80077a4:	e015      	b.n	80077d2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d20b      	bcs.n	80077c8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	1ad2      	subs	r2, r2, r3
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff ff97 	bl	80076f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	e004      	b.n	80077d2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077ce:	2301      	movs	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077d2:	f000 fc6f 	bl	80080b4 <vPortExitCritical>

	return xReturn;
 80077d6:	69fb      	ldr	r3, [r7, #28]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000f74 	.word	0x20000f74
 80077e4:	20000f88 	.word	0x20000f88

080077e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077e8:	b480      	push	{r7}
 80077ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077ec:	4b03      	ldr	r3, [pc, #12]	; (80077fc <vTaskMissedYield+0x14>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	601a      	str	r2, [r3, #0]
}
 80077f2:	bf00      	nop
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	20000f84 	.word	0x20000f84

08007800 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007808:	f000 f852 	bl	80078b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <prvIdleTask+0x28>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d9f9      	bls.n	8007808 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <prvIdleTask+0x2c>)
 8007816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007824:	e7f0      	b.n	8007808 <prvIdleTask+0x8>
 8007826:	bf00      	nop
 8007828:	20000e74 	.word	0x20000e74
 800782c:	e000ed04 	.word	0xe000ed04

08007830 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007836:	2300      	movs	r3, #0
 8007838:	607b      	str	r3, [r7, #4]
 800783a:	e00c      	b.n	8007856 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4613      	mov	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4a12      	ldr	r2, [pc, #72]	; (8007890 <prvInitialiseTaskLists+0x60>)
 8007848:	4413      	add	r3, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7fe f9e7 	bl	8005c1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3301      	adds	r3, #1
 8007854:	607b      	str	r3, [r7, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b06      	cmp	r3, #6
 800785a:	d9ef      	bls.n	800783c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800785c:	480d      	ldr	r0, [pc, #52]	; (8007894 <prvInitialiseTaskLists+0x64>)
 800785e:	f7fe f9de 	bl	8005c1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007862:	480d      	ldr	r0, [pc, #52]	; (8007898 <prvInitialiseTaskLists+0x68>)
 8007864:	f7fe f9db 	bl	8005c1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007868:	480c      	ldr	r0, [pc, #48]	; (800789c <prvInitialiseTaskLists+0x6c>)
 800786a:	f7fe f9d8 	bl	8005c1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800786e:	480c      	ldr	r0, [pc, #48]	; (80078a0 <prvInitialiseTaskLists+0x70>)
 8007870:	f7fe f9d5 	bl	8005c1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007874:	480b      	ldr	r0, [pc, #44]	; (80078a4 <prvInitialiseTaskLists+0x74>)
 8007876:	f7fe f9d2 	bl	8005c1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800787a:	4b0b      	ldr	r3, [pc, #44]	; (80078a8 <prvInitialiseTaskLists+0x78>)
 800787c:	4a05      	ldr	r2, [pc, #20]	; (8007894 <prvInitialiseTaskLists+0x64>)
 800787e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007880:	4b0a      	ldr	r3, [pc, #40]	; (80078ac <prvInitialiseTaskLists+0x7c>)
 8007882:	4a05      	ldr	r2, [pc, #20]	; (8007898 <prvInitialiseTaskLists+0x68>)
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000e74 	.word	0x20000e74
 8007894:	20000f00 	.word	0x20000f00
 8007898:	20000f14 	.word	0x20000f14
 800789c:	20000f30 	.word	0x20000f30
 80078a0:	20000f44 	.word	0x20000f44
 80078a4:	20000f5c 	.word	0x20000f5c
 80078a8:	20000f28 	.word	0x20000f28
 80078ac:	20000f2c 	.word	0x20000f2c

080078b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078b6:	e019      	b.n	80078ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078b8:	f000 fbc8 	bl	800804c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078bc:	4b10      	ldr	r3, [pc, #64]	; (8007900 <prvCheckTasksWaitingTermination+0x50>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fa32 	bl	8005d32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078ce:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <prvCheckTasksWaitingTermination+0x54>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	4a0b      	ldr	r2, [pc, #44]	; (8007904 <prvCheckTasksWaitingTermination+0x54>)
 80078d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078d8:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <prvCheckTasksWaitingTermination+0x58>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3b01      	subs	r3, #1
 80078de:	4a0a      	ldr	r2, [pc, #40]	; (8007908 <prvCheckTasksWaitingTermination+0x58>)
 80078e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078e2:	f000 fbe7 	bl	80080b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f810 	bl	800790c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078ec:	4b06      	ldr	r3, [pc, #24]	; (8007908 <prvCheckTasksWaitingTermination+0x58>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e1      	bne.n	80078b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20000f44 	.word	0x20000f44
 8007904:	20000f70 	.word	0x20000f70
 8007908:	20000f58 	.word	0x20000f58

0800790c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800791a:	2b00      	cmp	r3, #0
 800791c:	d108      	bne.n	8007930 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fd88 	bl	8008438 <vPortFree>
				vPortFree( pxTCB );
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd85 	bl	8008438 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800792e:	e01a      	b.n	8007966 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007936:	2b01      	cmp	r3, #1
 8007938:	d103      	bne.n	8007942 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fd7c 	bl	8008438 <vPortFree>
	}
 8007940:	e011      	b.n	8007966 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007948:	2b02      	cmp	r3, #2
 800794a:	d00c      	beq.n	8007966 <prvDeleteTCB+0x5a>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	b672      	cpsid	i
 8007952:	f383 8811 	msr	BASEPRI, r3
 8007956:	f3bf 8f6f 	isb	sy
 800795a:	f3bf 8f4f 	dsb	sy
 800795e:	b662      	cpsie	i
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <prvDeleteTCB+0x58>
	}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007976:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <prvResetNextTaskUnblockTime+0x38>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <prvResetNextTaskUnblockTime+0x3c>)
 8007982:	f04f 32ff 	mov.w	r2, #4294967295
 8007986:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007988:	e008      	b.n	800799c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <prvResetNextTaskUnblockTime+0x38>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	4a04      	ldr	r2, [pc, #16]	; (80079ac <prvResetNextTaskUnblockTime+0x3c>)
 800799a:	6013      	str	r3, [r2, #0]
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000f28 	.word	0x20000f28
 80079ac:	20000f90 	.word	0x20000f90

080079b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80079b6:	4b0b      	ldr	r3, [pc, #44]	; (80079e4 <xTaskGetSchedulerState+0x34>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80079be:	2301      	movs	r3, #1
 80079c0:	607b      	str	r3, [r7, #4]
 80079c2:	e008      	b.n	80079d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079c4:	4b08      	ldr	r3, [pc, #32]	; (80079e8 <xTaskGetSchedulerState+0x38>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079cc:	2302      	movs	r3, #2
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	e001      	b.n	80079d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079d2:	2300      	movs	r3, #0
 80079d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079d6:	687b      	ldr	r3, [r7, #4]
	}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr
 80079e4:	20000f7c 	.word	0x20000f7c
 80079e8:	20000f98 	.word	0x20000f98

080079ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d069      	beq.n	8007ad6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a06:	4b36      	ldr	r3, [pc, #216]	; (8007ae0 <xTaskPriorityInherit+0xf4>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d259      	bcs.n	8007ac4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db06      	blt.n	8007a26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a18:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <xTaskPriorityInherit+0xf4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	f1c3 0207 	rsb	r2, r3, #7
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6959      	ldr	r1, [r3, #20]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4a2b      	ldr	r2, [pc, #172]	; (8007ae4 <xTaskPriorityInherit+0xf8>)
 8007a38:	4413      	add	r3, r2
 8007a3a:	4299      	cmp	r1, r3
 8007a3c:	d13a      	bne.n	8007ab4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	3304      	adds	r3, #4
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fe f975 	bl	8005d32 <uxListRemove>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d115      	bne.n	8007a7a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a52:	4924      	ldr	r1, [pc, #144]	; (8007ae4 <xTaskPriorityInherit+0xf8>)
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	440b      	add	r3, r1
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <xTaskPriorityInherit+0x8e>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	2201      	movs	r2, #1
 8007a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6e:	43da      	mvns	r2, r3
 8007a70:	4b1d      	ldr	r3, [pc, #116]	; (8007ae8 <xTaskPriorityInherit+0xfc>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4013      	ands	r3, r2
 8007a76:	4a1c      	ldr	r2, [pc, #112]	; (8007ae8 <xTaskPriorityInherit+0xfc>)
 8007a78:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a7a:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <xTaskPriorityInherit+0xf4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	2201      	movs	r2, #1
 8007a8a:	409a      	lsls	r2, r3
 8007a8c:	4b16      	ldr	r3, [pc, #88]	; (8007ae8 <xTaskPriorityInherit+0xfc>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	4a15      	ldr	r2, [pc, #84]	; (8007ae8 <xTaskPriorityInherit+0xfc>)
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	4413      	add	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4a10      	ldr	r2, [pc, #64]	; (8007ae4 <xTaskPriorityInherit+0xf8>)
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	3304      	adds	r3, #4
 8007aaa:	4619      	mov	r1, r3
 8007aac:	4610      	mov	r0, r2
 8007aae:	f7fe f8e3 	bl	8005c78 <vListInsertEnd>
 8007ab2:	e004      	b.n	8007abe <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ab4:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <xTaskPriorityInherit+0xf4>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
 8007ac2:	e008      	b.n	8007ad6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ac8:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <xTaskPriorityInherit+0xf4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d201      	bcs.n	8007ad6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
	}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	20000e70 	.word	0x20000e70
 8007ae4:	20000e74 	.word	0x20000e74
 8007ae8:	20000f78 	.word	0x20000f78

08007aec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b086      	sub	sp, #24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d072      	beq.n	8007be8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b02:	4b3c      	ldr	r3, [pc, #240]	; (8007bf4 <xTaskPriorityDisinherit+0x108>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d00c      	beq.n	8007b26 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	b672      	cpsid	i
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	b662      	cpsie	i
 8007b20:	60fb      	str	r3, [r7, #12]
}
 8007b22:	bf00      	nop
 8007b24:	e7fe      	b.n	8007b24 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10c      	bne.n	8007b48 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b32:	b672      	cpsid	i
 8007b34:	f383 8811 	msr	BASEPRI, r3
 8007b38:	f3bf 8f6f 	isb	sy
 8007b3c:	f3bf 8f4f 	dsb	sy
 8007b40:	b662      	cpsie	i
 8007b42:	60bb      	str	r3, [r7, #8]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b4c:	1e5a      	subs	r2, r3, #1
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d044      	beq.n	8007be8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d140      	bne.n	8007be8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	3304      	adds	r3, #4
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fe f8e1 	bl	8005d32 <uxListRemove>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d115      	bne.n	8007ba2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7a:	491f      	ldr	r1, [pc, #124]	; (8007bf8 <xTaskPriorityDisinherit+0x10c>)
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10a      	bne.n	8007ba2 <xTaskPriorityDisinherit+0xb6>
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	2201      	movs	r2, #1
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	43da      	mvns	r2, r3
 8007b98:	4b18      	ldr	r3, [pc, #96]	; (8007bfc <xTaskPriorityDisinherit+0x110>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	4a17      	ldr	r2, [pc, #92]	; (8007bfc <xTaskPriorityDisinherit+0x110>)
 8007ba0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	f1c3 0207 	rsb	r2, r3, #7
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	2201      	movs	r2, #1
 8007bbc:	409a      	lsls	r2, r3
 8007bbe:	4b0f      	ldr	r3, [pc, #60]	; (8007bfc <xTaskPriorityDisinherit+0x110>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	4a0d      	ldr	r2, [pc, #52]	; (8007bfc <xTaskPriorityDisinherit+0x110>)
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4a08      	ldr	r2, [pc, #32]	; (8007bf8 <xTaskPriorityDisinherit+0x10c>)
 8007bd6:	441a      	add	r2, r3
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	4619      	mov	r1, r3
 8007bde:	4610      	mov	r0, r2
 8007be0:	f7fe f84a 	bl	8005c78 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007be8:	697b      	ldr	r3, [r7, #20]
	}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000e70 	.word	0x20000e70
 8007bf8:	20000e74 	.word	0x20000e74
 8007bfc:	20000f78 	.word	0x20000f78

08007c00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b088      	sub	sp, #32
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8087 	beq.w	8007d28 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10c      	bne.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	b672      	cpsid	i
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	b662      	cpsie	i
 8007c36:	60fb      	str	r3, [r7, #12]
}
 8007c38:	bf00      	nop
 8007c3a:	e7fe      	b.n	8007c3a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d902      	bls.n	8007c4c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	61fb      	str	r3, [r7, #28]
 8007c4a:	e002      	b.n	8007c52 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c50:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d065      	beq.n	8007d28 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d160      	bne.n	8007d28 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c66:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d10c      	bne.n	8007c8a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c74:	b672      	cpsid	i
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	b662      	cpsie	i
 8007c84:	60bb      	str	r3, [r7, #8]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	db04      	blt.n	8007ca8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	f1c3 0207 	rsb	r2, r3, #7
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	6959      	ldr	r1, [r3, #20]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007cb8:	4413      	add	r3, r2
 8007cba:	4299      	cmp	r1, r3
 8007cbc:	d134      	bne.n	8007d28 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fe f835 	bl	8005d32 <uxListRemove>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d115      	bne.n	8007cfa <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd2:	4918      	ldr	r1, [pc, #96]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	2201      	movs	r2, #1
 8007cea:	fa02 f303 	lsl.w	r3, r2, r3
 8007cee:	43da      	mvns	r2, r3
 8007cf0:	4b11      	ldr	r3, [pc, #68]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	4a10      	ldr	r2, [pc, #64]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007cf8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	2201      	movs	r2, #1
 8007d00:	409a      	lsls	r2, r3
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	4a0b      	ldr	r2, [pc, #44]	; (8007d38 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4a06      	ldr	r2, [pc, #24]	; (8007d34 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007d1a:	441a      	add	r2, r3
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7fd ffa8 	bl	8005c78 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d28:	bf00      	nop
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20000e70 	.word	0x20000e70
 8007d34:	20000e74 	.word	0x20000e74
 8007d38:	20000f78 	.word	0x20000f78

08007d3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d40:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d4e:	3201      	adds	r2, #1
 8007d50:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007d52:	4b03      	ldr	r3, [pc, #12]	; (8007d60 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d54:	681b      	ldr	r3, [r3, #0]
	}
 8007d56:	4618      	mov	r0, r3
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	20000e70 	.word	0x20000e70

08007d64 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d6e:	4b29      	ldr	r3, [pc, #164]	; (8007e14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d74:	4b28      	ldr	r3, [pc, #160]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd ffd9 	bl	8005d32 <uxListRemove>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10b      	bne.n	8007d9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007d86:	4b24      	ldr	r3, [pc, #144]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43da      	mvns	r2, r3
 8007d94:	4b21      	ldr	r3, [pc, #132]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007d9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da4:	d10a      	bne.n	8007dbc <prvAddCurrentTaskToDelayedList+0x58>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d007      	beq.n	8007dbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dac:	4b1a      	ldr	r3, [pc, #104]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	481a      	ldr	r0, [pc, #104]	; (8007e20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007db6:	f7fd ff5f 	bl	8005c78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dba:	e026      	b.n	8007e0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007dc4:	4b14      	ldr	r3, [pc, #80]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d209      	bcs.n	8007de8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dd4:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4619      	mov	r1, r3
 8007de0:	4610      	mov	r0, r2
 8007de2:	f7fd ff6d 	bl	8005cc0 <vListInsert>
}
 8007de6:	e010      	b.n	8007e0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007de8:	4b0f      	ldr	r3, [pc, #60]	; (8007e28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4619      	mov	r1, r3
 8007df4:	4610      	mov	r0, r2
 8007df6:	f7fd ff63 	bl	8005cc0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dfa:	4b0c      	ldr	r3, [pc, #48]	; (8007e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d202      	bcs.n	8007e0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e04:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6013      	str	r3, [r2, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000f74 	.word	0x20000f74
 8007e18:	20000e70 	.word	0x20000e70
 8007e1c:	20000f78 	.word	0x20000f78
 8007e20:	20000f5c 	.word	0x20000f5c
 8007e24:	20000f2c 	.word	0x20000f2c
 8007e28:	20000f28 	.word	0x20000f28
 8007e2c:	20000f90 	.word	0x20000f90

08007e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3b04      	subs	r3, #4
 8007e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	3b04      	subs	r3, #4
 8007e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f023 0201 	bic.w	r2, r3, #1
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3b04      	subs	r3, #4
 8007e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e60:	4a0c      	ldr	r2, [pc, #48]	; (8007e94 <pxPortInitialiseStack+0x64>)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3b14      	subs	r3, #20
 8007e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3b04      	subs	r3, #4
 8007e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f06f 0202 	mvn.w	r2, #2
 8007e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3b20      	subs	r3, #32
 8007e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e86:	68fb      	ldr	r3, [r7, #12]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3714      	adds	r7, #20
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	08007e99 	.word	0x08007e99

08007e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ea2:	4b14      	ldr	r3, [pc, #80]	; (8007ef4 <prvTaskExitError+0x5c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eaa:	d00c      	beq.n	8007ec6 <prvTaskExitError+0x2e>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	b672      	cpsid	i
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	b662      	cpsie	i
 8007ec0:	60fb      	str	r3, [r7, #12]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <prvTaskExitError+0x2c>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	b672      	cpsid	i
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	b662      	cpsie	i
 8007eda:	60bb      	str	r3, [r7, #8]
}
 8007edc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ede:	bf00      	nop
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d0fc      	beq.n	8007ee0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ee6:	bf00      	nop
 8007ee8:	bf00      	nop
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	2000000c 	.word	0x2000000c
	...

08007f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f00:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <pxCurrentTCBConst2>)
 8007f02:	6819      	ldr	r1, [r3, #0]
 8007f04:	6808      	ldr	r0, [r1, #0]
 8007f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0a:	f380 8809 	msr	PSP, r0
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f04f 0000 	mov.w	r0, #0
 8007f16:	f380 8811 	msr	BASEPRI, r0
 8007f1a:	4770      	bx	lr
 8007f1c:	f3af 8000 	nop.w

08007f20 <pxCurrentTCBConst2>:
 8007f20:	20000e70 	.word	0x20000e70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f28:	4808      	ldr	r0, [pc, #32]	; (8007f4c <prvPortStartFirstTask+0x24>)
 8007f2a:	6800      	ldr	r0, [r0, #0]
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f380 8808 	msr	MSP, r0
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f380 8814 	msr	CONTROL, r0
 8007f3a:	b662      	cpsie	i
 8007f3c:	b661      	cpsie	f
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	df00      	svc	0
 8007f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f4a:	bf00      	nop
 8007f4c:	e000ed08 	.word	0xe000ed08

08007f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007f56:	4b37      	ldr	r3, [pc, #220]	; (8008034 <xPortStartScheduler+0xe4>)
 8007f58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	22ff      	movs	r2, #255	; 0xff
 8007f66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007f70:	78fb      	ldrb	r3, [r7, #3]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	4b2f      	ldr	r3, [pc, #188]	; (8008038 <xPortStartScheduler+0xe8>)
 8007f7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f7e:	4b2f      	ldr	r3, [pc, #188]	; (800803c <xPortStartScheduler+0xec>)
 8007f80:	2207      	movs	r2, #7
 8007f82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f84:	e009      	b.n	8007f9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007f86:	4b2d      	ldr	r3, [pc, #180]	; (800803c <xPortStartScheduler+0xec>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	4a2b      	ldr	r2, [pc, #172]	; (800803c <xPortStartScheduler+0xec>)
 8007f8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa2:	2b80      	cmp	r3, #128	; 0x80
 8007fa4:	d0ef      	beq.n	8007f86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007fa6:	4b25      	ldr	r3, [pc, #148]	; (800803c <xPortStartScheduler+0xec>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f1c3 0307 	rsb	r3, r3, #7
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d00c      	beq.n	8007fcc <xPortStartScheduler+0x7c>
	__asm volatile
 8007fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb6:	b672      	cpsid	i
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	b662      	cpsie	i
 8007fc6:	60bb      	str	r3, [r7, #8]
}
 8007fc8:	bf00      	nop
 8007fca:	e7fe      	b.n	8007fca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007fcc:	4b1b      	ldr	r3, [pc, #108]	; (800803c <xPortStartScheduler+0xec>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	4a1a      	ldr	r2, [pc, #104]	; (800803c <xPortStartScheduler+0xec>)
 8007fd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007fd6:	4b19      	ldr	r3, [pc, #100]	; (800803c <xPortStartScheduler+0xec>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007fde:	4a17      	ldr	r2, [pc, #92]	; (800803c <xPortStartScheduler+0xec>)
 8007fe0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007fea:	4b15      	ldr	r3, [pc, #84]	; (8008040 <xPortStartScheduler+0xf0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a14      	ldr	r2, [pc, #80]	; (8008040 <xPortStartScheduler+0xf0>)
 8007ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ff4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ff6:	4b12      	ldr	r3, [pc, #72]	; (8008040 <xPortStartScheduler+0xf0>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a11      	ldr	r2, [pc, #68]	; (8008040 <xPortStartScheduler+0xf0>)
 8007ffc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008000:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008002:	f000 f8dd 	bl	80081c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008006:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <xPortStartScheduler+0xf4>)
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800800c:	f000 f8fc 	bl	8008208 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008010:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <xPortStartScheduler+0xf8>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a0c      	ldr	r2, [pc, #48]	; (8008048 <xPortStartScheduler+0xf8>)
 8008016:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800801a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800801c:	f7ff ff84 	bl	8007f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008020:	f7ff fa7e 	bl	8007520 <vTaskSwitchContext>
	prvTaskExitError();
 8008024:	f7ff ff38 	bl	8007e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	e000e400 	.word	0xe000e400
 8008038:	20000f9c 	.word	0x20000f9c
 800803c:	20000fa0 	.word	0x20000fa0
 8008040:	e000ed20 	.word	0xe000ed20
 8008044:	2000000c 	.word	0x2000000c
 8008048:	e000ef34 	.word	0xe000ef34

0800804c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	b672      	cpsid	i
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	b662      	cpsie	i
 8008066:	607b      	str	r3, [r7, #4]
}
 8008068:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800806a:	4b10      	ldr	r3, [pc, #64]	; (80080ac <vPortEnterCritical+0x60>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3301      	adds	r3, #1
 8008070:	4a0e      	ldr	r2, [pc, #56]	; (80080ac <vPortEnterCritical+0x60>)
 8008072:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008074:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <vPortEnterCritical+0x60>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d111      	bne.n	80080a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800807c:	4b0c      	ldr	r3, [pc, #48]	; (80080b0 <vPortEnterCritical+0x64>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00c      	beq.n	80080a0 <vPortEnterCritical+0x54>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808a:	b672      	cpsid	i
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	b662      	cpsie	i
 800809a:	603b      	str	r3, [r7, #0]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <vPortEnterCritical+0x52>
	}
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	2000000c 	.word	0x2000000c
 80080b0:	e000ed04 	.word	0xe000ed04

080080b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80080ba:	4b13      	ldr	r3, [pc, #76]	; (8008108 <vPortExitCritical+0x54>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d10c      	bne.n	80080dc <vPortExitCritical+0x28>
	__asm volatile
 80080c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c6:	b672      	cpsid	i
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	b662      	cpsie	i
 80080d6:	607b      	str	r3, [r7, #4]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80080dc:	4b0a      	ldr	r3, [pc, #40]	; (8008108 <vPortExitCritical+0x54>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	4a09      	ldr	r2, [pc, #36]	; (8008108 <vPortExitCritical+0x54>)
 80080e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80080e6:	4b08      	ldr	r3, [pc, #32]	; (8008108 <vPortExitCritical+0x54>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d105      	bne.n	80080fa <vPortExitCritical+0x46>
 80080ee:	2300      	movs	r3, #0
 80080f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f383 8811 	msr	BASEPRI, r3
}
 80080f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	2000000c 	.word	0x2000000c
 800810c:	00000000 	.word	0x00000000

08008110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008110:	f3ef 8009 	mrs	r0, PSP
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	4b15      	ldr	r3, [pc, #84]	; (8008170 <pxCurrentTCBConst>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	f01e 0f10 	tst.w	lr, #16
 8008120:	bf08      	it	eq
 8008122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	6010      	str	r0, [r2, #0]
 800812c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008134:	b672      	cpsid	i
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	b662      	cpsie	i
 8008144:	f7ff f9ec 	bl	8007520 <vTaskSwitchContext>
 8008148:	f04f 0000 	mov.w	r0, #0
 800814c:	f380 8811 	msr	BASEPRI, r0
 8008150:	bc09      	pop	{r0, r3}
 8008152:	6819      	ldr	r1, [r3, #0]
 8008154:	6808      	ldr	r0, [r1, #0]
 8008156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815a:	f01e 0f10 	tst.w	lr, #16
 800815e:	bf08      	it	eq
 8008160:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008164:	f380 8809 	msr	PSP, r0
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop

08008170 <pxCurrentTCBConst>:
 8008170:	20000e70 	.word	0x20000e70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop

08008178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
	__asm volatile
 800817e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008182:	b672      	cpsid	i
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	b662      	cpsie	i
 8008192:	607b      	str	r3, [r7, #4]
}
 8008194:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008196:	f7ff f909 	bl	80073ac <xTaskIncrementTick>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081a0:	4b06      	ldr	r3, [pc, #24]	; (80081bc <SysTick_Handler+0x44>)
 80081a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	f383 8811 	msr	BASEPRI, r3
}
 80081b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80081b4:	bf00      	nop
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	e000ed04 	.word	0xe000ed04

080081c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80081c0:	b480      	push	{r7}
 80081c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80081c4:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <vPortSetupTimerInterrupt+0x34>)
 80081c6:	2200      	movs	r2, #0
 80081c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <vPortSetupTimerInterrupt+0x38>)
 80081cc:	2200      	movs	r2, #0
 80081ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <vPortSetupTimerInterrupt+0x3c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a0a      	ldr	r2, [pc, #40]	; (8008200 <vPortSetupTimerInterrupt+0x40>)
 80081d6:	fba2 2303 	umull	r2, r3, r2, r3
 80081da:	099b      	lsrs	r3, r3, #6
 80081dc:	4a09      	ldr	r2, [pc, #36]	; (8008204 <vPortSetupTimerInterrupt+0x44>)
 80081de:	3b01      	subs	r3, #1
 80081e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80081e2:	4b04      	ldr	r3, [pc, #16]	; (80081f4 <vPortSetupTimerInterrupt+0x34>)
 80081e4:	2207      	movs	r2, #7
 80081e6:	601a      	str	r2, [r3, #0]
}
 80081e8:	bf00      	nop
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	e000e010 	.word	0xe000e010
 80081f8:	e000e018 	.word	0xe000e018
 80081fc:	20000000 	.word	0x20000000
 8008200:	10624dd3 	.word	0x10624dd3
 8008204:	e000e014 	.word	0xe000e014

08008208 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008208:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008218 <vPortEnableVFP+0x10>
 800820c:	6801      	ldr	r1, [r0, #0]
 800820e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008212:	6001      	str	r1, [r0, #0]
 8008214:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008216:	bf00      	nop
 8008218:	e000ed88 	.word	0xe000ed88

0800821c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008222:	f3ef 8305 	mrs	r3, IPSR
 8008226:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2b0f      	cmp	r3, #15
 800822c:	d916      	bls.n	800825c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800822e:	4a19      	ldr	r2, [pc, #100]	; (8008294 <vPortValidateInterruptPriority+0x78>)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008238:	4b17      	ldr	r3, [pc, #92]	; (8008298 <vPortValidateInterruptPriority+0x7c>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	7afa      	ldrb	r2, [r7, #11]
 800823e:	429a      	cmp	r2, r3
 8008240:	d20c      	bcs.n	800825c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	b672      	cpsid	i
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	b662      	cpsie	i
 8008256:	607b      	str	r3, [r7, #4]
}
 8008258:	bf00      	nop
 800825a:	e7fe      	b.n	800825a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800825c:	4b0f      	ldr	r3, [pc, #60]	; (800829c <vPortValidateInterruptPriority+0x80>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008264:	4b0e      	ldr	r3, [pc, #56]	; (80082a0 <vPortValidateInterruptPriority+0x84>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	429a      	cmp	r2, r3
 800826a:	d90c      	bls.n	8008286 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800826c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008270:	b672      	cpsid	i
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	b662      	cpsie	i
 8008280:	603b      	str	r3, [r7, #0]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <vPortValidateInterruptPriority+0x68>
	}
 8008286:	bf00      	nop
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	e000e3f0 	.word	0xe000e3f0
 8008298:	20000f9c 	.word	0x20000f9c
 800829c:	e000ed0c 	.word	0xe000ed0c
 80082a0:	20000fa0 	.word	0x20000fa0

080082a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	; 0x28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082b0:	f7fe ffae 	bl	8007210 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082b4:	4b5b      	ldr	r3, [pc, #364]	; (8008424 <pvPortMalloc+0x180>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082bc:	f000 f91a 	bl	80084f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082c0:	4b59      	ldr	r3, [pc, #356]	; (8008428 <pvPortMalloc+0x184>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4013      	ands	r3, r2
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f040 8092 	bne.w	80083f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01f      	beq.n	8008314 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80082d4:	2208      	movs	r2, #8
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4413      	add	r3, r2
 80082da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d016      	beq.n	8008314 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f023 0307 	bic.w	r3, r3, #7
 80082ec:	3308      	adds	r3, #8
 80082ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f003 0307 	and.w	r3, r3, #7
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00c      	beq.n	8008314 <pvPortMalloc+0x70>
	__asm volatile
 80082fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fe:	b672      	cpsid	i
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	b662      	cpsie	i
 800830e:	617b      	str	r3, [r7, #20]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d06b      	beq.n	80083f2 <pvPortMalloc+0x14e>
 800831a:	4b44      	ldr	r3, [pc, #272]	; (800842c <pvPortMalloc+0x188>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	429a      	cmp	r2, r3
 8008322:	d866      	bhi.n	80083f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008324:	4b42      	ldr	r3, [pc, #264]	; (8008430 <pvPortMalloc+0x18c>)
 8008326:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008328:	4b41      	ldr	r3, [pc, #260]	; (8008430 <pvPortMalloc+0x18c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800832e:	e004      	b.n	800833a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	429a      	cmp	r2, r3
 8008342:	d903      	bls.n	800834c <pvPortMalloc+0xa8>
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1f1      	bne.n	8008330 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800834c:	4b35      	ldr	r3, [pc, #212]	; (8008424 <pvPortMalloc+0x180>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008352:	429a      	cmp	r2, r3
 8008354:	d04d      	beq.n	80083f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2208      	movs	r2, #8
 800835c:	4413      	add	r3, r2
 800835e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	1ad2      	subs	r2, r2, r3
 8008370:	2308      	movs	r3, #8
 8008372:	005b      	lsls	r3, r3, #1
 8008374:	429a      	cmp	r2, r3
 8008376:	d921      	bls.n	80083bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4413      	add	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00c      	beq.n	80083a4 <pvPortMalloc+0x100>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	b672      	cpsid	i
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	b662      	cpsie	i
 800839e:	613b      	str	r3, [r7, #16]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	69bb      	ldr	r3, [r7, #24]
 80083ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083b6:	69b8      	ldr	r0, [r7, #24]
 80083b8:	f000 f8fe 	bl	80085b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083bc:	4b1b      	ldr	r3, [pc, #108]	; (800842c <pvPortMalloc+0x188>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	4a19      	ldr	r2, [pc, #100]	; (800842c <pvPortMalloc+0x188>)
 80083c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083ca:	4b18      	ldr	r3, [pc, #96]	; (800842c <pvPortMalloc+0x188>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b19      	ldr	r3, [pc, #100]	; (8008434 <pvPortMalloc+0x190>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d203      	bcs.n	80083de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083d6:	4b15      	ldr	r3, [pc, #84]	; (800842c <pvPortMalloc+0x188>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a16      	ldr	r2, [pc, #88]	; (8008434 <pvPortMalloc+0x190>)
 80083dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	4b11      	ldr	r3, [pc, #68]	; (8008428 <pvPortMalloc+0x184>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	2200      	movs	r2, #0
 80083f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083f2:	f7fe ff1b 	bl	800722c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00c      	beq.n	800841a <pvPortMalloc+0x176>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	b672      	cpsid	i
 8008406:	f383 8811 	msr	BASEPRI, r3
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	f3bf 8f4f 	dsb	sy
 8008412:	b662      	cpsie	i
 8008414:	60fb      	str	r3, [r7, #12]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <pvPortMalloc+0x174>
	return pvReturn;
 800841a:	69fb      	ldr	r3, [r7, #28]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3728      	adds	r7, #40	; 0x28
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20020fac 	.word	0x20020fac
 8008428:	20020fb8 	.word	0x20020fb8
 800842c:	20020fb0 	.word	0x20020fb0
 8008430:	20020fa4 	.word	0x20020fa4
 8008434:	20020fb4 	.word	0x20020fb4

08008438 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d04c      	beq.n	80084e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800844a:	2308      	movs	r3, #8
 800844c:	425b      	negs	r3, r3
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	4413      	add	r3, r2
 8008452:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	4b23      	ldr	r3, [pc, #140]	; (80084ec <vPortFree+0xb4>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4013      	ands	r3, r2
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10c      	bne.n	8008480 <vPortFree+0x48>
	__asm volatile
 8008466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846a:	b672      	cpsid	i
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	b662      	cpsie	i
 800847a:	60fb      	str	r3, [r7, #12]
}
 800847c:	bf00      	nop
 800847e:	e7fe      	b.n	800847e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <vPortFree+0x6a>
	__asm volatile
 8008488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848c:	b672      	cpsid	i
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	b662      	cpsie	i
 800849c:	60bb      	str	r3, [r7, #8]
}
 800849e:	bf00      	nop
 80084a0:	e7fe      	b.n	80084a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	4b11      	ldr	r3, [pc, #68]	; (80084ec <vPortFree+0xb4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4013      	ands	r3, r2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d019      	beq.n	80084e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d115      	bne.n	80084e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	4b0b      	ldr	r3, [pc, #44]	; (80084ec <vPortFree+0xb4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	43db      	mvns	r3, r3
 80084c2:	401a      	ands	r2, r3
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084c8:	f7fe fea2 	bl	8007210 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <vPortFree+0xb8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <vPortFree+0xb8>)
 80084d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084da:	6938      	ldr	r0, [r7, #16]
 80084dc:	f000 f86c 	bl	80085b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80084e0:	f7fe fea4 	bl	800722c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084e4:	bf00      	nop
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	20020fb8 	.word	0x20020fb8
 80084f0:	20020fb0 	.word	0x20020fb0

080084f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <prvHeapInit+0xac>)
 8008502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3307      	adds	r3, #7
 8008512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <prvHeapInit+0xac>)
 8008524:	4413      	add	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800852c:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <prvHeapInit+0xb0>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008532:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <prvHeapInit+0xb0>)
 8008534:	2200      	movs	r2, #0
 8008536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4413      	add	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008540:	2208      	movs	r2, #8
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0307 	bic.w	r3, r3, #7
 800854e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a15      	ldr	r2, [pc, #84]	; (80085a8 <prvHeapInit+0xb4>)
 8008554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <prvHeapInit+0xb4>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <prvHeapInit+0xb4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008574:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <prvHeapInit+0xb4>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4a0a      	ldr	r2, [pc, #40]	; (80085ac <prvHeapInit+0xb8>)
 8008582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <prvHeapInit+0xbc>)
 800858a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <prvHeapInit+0xc0>)
 800858e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008592:	601a      	str	r2, [r3, #0]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	20000fa4 	.word	0x20000fa4
 80085a4:	20020fa4 	.word	0x20020fa4
 80085a8:	20020fac 	.word	0x20020fac
 80085ac:	20020fb4 	.word	0x20020fb4
 80085b0:	20020fb0 	.word	0x20020fb0
 80085b4:	20020fb8 	.word	0x20020fb8

080085b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085c0:	4b28      	ldr	r3, [pc, #160]	; (8008664 <prvInsertBlockIntoFreeList+0xac>)
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <prvInsertBlockIntoFreeList+0x14>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d8f7      	bhi.n	80085c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d108      	bne.n	80085fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	441a      	add	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d118      	bne.n	8008640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <prvInsertBlockIntoFreeList+0xb0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d00d      	beq.n	8008636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	441a      	add	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	e008      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvInsertBlockIntoFreeList+0xb0>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e003      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d002      	beq.n	8008656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20020fa4 	.word	0x20020fa4
 8008668:	20020fac 	.word	0x20020fac

0800866c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	330c      	adds	r3, #12
 800867c:	461a      	mov	r2, r3
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f002 fa93 	bl	800abac <tcpip_send_msg_wait_sem>
 8008686:	4603      	mov	r3, r0
 8008688:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800868a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d103      	bne.n	800869a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008698:	e001      	b.n	800869e <netconn_apimsg+0x32>
  }
  return err;
 800869a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08c      	sub	sp, #48	; 0x30
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	603a      	str	r2, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
 80086b4:	460b      	mov	r3, r1
 80086b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	4618      	mov	r0, r3
 80086be:	f001 f85f 	bl	8009780 <netconn_alloc>
 80086c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d054      	beq.n	8008774 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80086ca:	79bb      	ldrb	r3, [r7, #6]
 80086cc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80086d2:	f107 0308 	add.w	r3, r7, #8
 80086d6:	4619      	mov	r1, r3
 80086d8:	4829      	ldr	r0, [pc, #164]	; (8008780 <netconn_new_with_proto_and_callback+0xd8>)
 80086da:	f7ff ffc7 	bl	800866c <netconn_apimsg>
 80086de:	4603      	mov	r3, r0
 80086e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80086e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d043      	beq.n	8008774 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <netconn_new_with_proto_and_callback+0x58>
 80086f4:	4b23      	ldr	r3, [pc, #140]	; (8008784 <netconn_new_with_proto_and_callback+0xdc>)
 80086f6:	22a3      	movs	r2, #163	; 0xa3
 80086f8:	4923      	ldr	r1, [pc, #140]	; (8008788 <netconn_new_with_proto_and_callback+0xe0>)
 80086fa:	4824      	ldr	r0, [pc, #144]	; (800878c <netconn_new_with_proto_and_callback+0xe4>)
 80086fc:	f011 fe18 	bl	801a330 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	3310      	adds	r3, #16
 8008704:	4618      	mov	r0, r3
 8008706:	f010 fdfe 	bl	8019306 <sys_mbox_valid>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d105      	bne.n	800871c <netconn_new_with_proto_and_callback+0x74>
 8008710:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <netconn_new_with_proto_and_callback+0xdc>)
 8008712:	22a4      	movs	r2, #164	; 0xa4
 8008714:	491e      	ldr	r1, [pc, #120]	; (8008790 <netconn_new_with_proto_and_callback+0xe8>)
 8008716:	481d      	ldr	r0, [pc, #116]	; (800878c <netconn_new_with_proto_and_callback+0xe4>)
 8008718:	f011 fe0a 	bl	801a330 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	3314      	adds	r3, #20
 8008720:	4618      	mov	r0, r3
 8008722:	f010 fdf0 	bl	8019306 <sys_mbox_valid>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <netconn_new_with_proto_and_callback+0x90>
 800872c:	4b15      	ldr	r3, [pc, #84]	; (8008784 <netconn_new_with_proto_and_callback+0xdc>)
 800872e:	22a6      	movs	r2, #166	; 0xa6
 8008730:	4918      	ldr	r1, [pc, #96]	; (8008794 <netconn_new_with_proto_and_callback+0xec>)
 8008732:	4816      	ldr	r0, [pc, #88]	; (800878c <netconn_new_with_proto_and_callback+0xe4>)
 8008734:	f011 fdfc 	bl	801a330 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873a:	330c      	adds	r3, #12
 800873c:	4618      	mov	r0, r3
 800873e:	f010 fe73 	bl	8019428 <sys_sem_valid>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d105      	bne.n	8008754 <netconn_new_with_proto_and_callback+0xac>
 8008748:	4b0e      	ldr	r3, [pc, #56]	; (8008784 <netconn_new_with_proto_and_callback+0xdc>)
 800874a:	22a9      	movs	r2, #169	; 0xa9
 800874c:	4912      	ldr	r1, [pc, #72]	; (8008798 <netconn_new_with_proto_and_callback+0xf0>)
 800874e:	480f      	ldr	r0, [pc, #60]	; (800878c <netconn_new_with_proto_and_callback+0xe4>)
 8008750:	f011 fdee 	bl	801a330 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	330c      	adds	r3, #12
 8008758:	4618      	mov	r0, r3
 800875a:	f010 fe58 	bl	801940e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	3310      	adds	r3, #16
 8008762:	4618      	mov	r0, r3
 8008764:	f010 fd48 	bl	80191f8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008768:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800876a:	2007      	movs	r0, #7
 800876c:	f003 ff5c 	bl	800c628 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008770:	2300      	movs	r3, #0
 8008772:	e000      	b.n	8008776 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008776:	4618      	mov	r0, r3
 8008778:	3730      	adds	r7, #48	; 0x30
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	08009755 	.word	0x08009755
 8008784:	0801eab4 	.word	0x0801eab4
 8008788:	0801eae8 	.word	0x0801eae8
 800878c:	0801eb0c 	.word	0x0801eb0c
 8008790:	0801eb34 	.word	0x0801eb34
 8008794:	0801eb4c 	.word	0x0801eb4c
 8008798:	0801eb70 	.word	0x0801eb70

0800879c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b08c      	sub	sp, #48	; 0x30
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d101      	bne.n	80087ae <netconn_prepare_delete+0x12>
    return ERR_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e014      	b.n	80087d8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80087b2:	2329      	movs	r3, #41	; 0x29
 80087b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80087b6:	f107 030c 	add.w	r3, r7, #12
 80087ba:	4619      	mov	r1, r3
 80087bc:	4808      	ldr	r0, [pc, #32]	; (80087e0 <netconn_prepare_delete+0x44>)
 80087be:	f7ff ff55 	bl	800866c <netconn_apimsg>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80087c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <netconn_prepare_delete+0x3a>
    return err;
 80087d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087d4:	e000      	b.n	80087d8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3730      	adds	r7, #48	; 0x30
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	08009cc1 	.word	0x08009cc1

080087e4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <netconn_delete+0x12>
    return ERR_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e00d      	b.n	8008812 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff ffd0 	bl	800879c <netconn_prepare_delete>
 80087fc:	4603      	mov	r3, r0
 80087fe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d102      	bne.n	800880e <netconn_delete+0x2a>
    netconn_free(conn);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 f82b 	bl	8009864 <netconn_free>
  }
  return err;
 800880e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008812:	4618      	mov	r0, r3
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
	...

0800881c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08e      	sub	sp, #56	; 0x38
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d109      	bne.n	8008844 <netconn_bind+0x28>
 8008830:	4b11      	ldr	r3, [pc, #68]	; (8008878 <netconn_bind+0x5c>)
 8008832:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008836:	4911      	ldr	r1, [pc, #68]	; (800887c <netconn_bind+0x60>)
 8008838:	4811      	ldr	r0, [pc, #68]	; (8008880 <netconn_bind+0x64>)
 800883a:	f011 fd79 	bl	801a330 <iprintf>
 800883e:	f06f 030f 	mvn.w	r3, #15
 8008842:	e015      	b.n	8008870 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800884a:	4b0e      	ldr	r3, [pc, #56]	; (8008884 <netconn_bind+0x68>)
 800884c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008856:	88fb      	ldrh	r3, [r7, #6]
 8008858:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	4619      	mov	r1, r3
 8008860:	4809      	ldr	r0, [pc, #36]	; (8008888 <netconn_bind+0x6c>)
 8008862:	f7ff ff03 	bl	800866c <netconn_apimsg>
 8008866:	4603      	mov	r3, r0
 8008868:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800886c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008870:	4618      	mov	r0, r3
 8008872:	3738      	adds	r7, #56	; 0x38
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	0801eab4 	.word	0x0801eab4
 800887c:	0801ebec 	.word	0x0801ebec
 8008880:	0801eb0c 	.word	0x0801eb0c
 8008884:	08022488 	.word	0x08022488
 8008888:	08009e8d 	.word	0x08009e8d

0800888c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08e      	sub	sp, #56	; 0x38
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <netconn_connect+0x28>
 80088a0:	4b11      	ldr	r3, [pc, #68]	; (80088e8 <netconn_connect+0x5c>)
 80088a2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80088a6:	4911      	ldr	r1, [pc, #68]	; (80088ec <netconn_connect+0x60>)
 80088a8:	4811      	ldr	r0, [pc, #68]	; (80088f0 <netconn_connect+0x64>)
 80088aa:	f011 fd41 	bl	801a330 <iprintf>
 80088ae:	f06f 030f 	mvn.w	r3, #15
 80088b2:	e015      	b.n	80088e0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80088ba:	4b0e      	ldr	r3, [pc, #56]	; (80088f4 <netconn_connect+0x68>)
 80088bc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80088ca:	f107 0314 	add.w	r3, r7, #20
 80088ce:	4619      	mov	r1, r3
 80088d0:	4809      	ldr	r0, [pc, #36]	; (80088f8 <netconn_connect+0x6c>)
 80088d2:	f7ff fecb 	bl	800866c <netconn_apimsg>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80088dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3738      	adds	r7, #56	; 0x38
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	0801eab4 	.word	0x0801eab4
 80088ec:	0801ec28 	.word	0x0801ec28
 80088f0:	0801eb0c 	.word	0x0801eb0c
 80088f4:	08022488 	.word	0x08022488
 80088f8:	0800a029 	.word	0x0800a029

080088fc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b088      	sub	sp, #32
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <netconn_recv_data+0x2c>
 8008914:	4b5e      	ldr	r3, [pc, #376]	; (8008a90 <netconn_recv_data+0x194>)
 8008916:	f44f 7212 	mov.w	r2, #584	; 0x248
 800891a:	495e      	ldr	r1, [pc, #376]	; (8008a94 <netconn_recv_data+0x198>)
 800891c:	485e      	ldr	r0, [pc, #376]	; (8008a98 <netconn_recv_data+0x19c>)
 800891e:	f011 fd07 	bl	801a330 <iprintf>
 8008922:	f06f 030f 	mvn.w	r3, #15
 8008926:	e0ae      	b.n	8008a86 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d109      	bne.n	8008948 <netconn_recv_data+0x4c>
 8008934:	4b56      	ldr	r3, [pc, #344]	; (8008a90 <netconn_recv_data+0x194>)
 8008936:	f240 224a 	movw	r2, #586	; 0x24a
 800893a:	4958      	ldr	r1, [pc, #352]	; (8008a9c <netconn_recv_data+0x1a0>)
 800893c:	4856      	ldr	r0, [pc, #344]	; (8008a98 <netconn_recv_data+0x19c>)
 800893e:	f011 fcf7 	bl	801a330 <iprintf>
 8008942:	f06f 030f 	mvn.w	r3, #15
 8008946:	e09e      	b.n	8008a86 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	3310      	adds	r3, #16
 800894c:	4618      	mov	r0, r3
 800894e:	f010 fcda 	bl	8019306 <sys_mbox_valid>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10e      	bne.n	8008976 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f000 fae6 	bl	8008f2a <netconn_err>
 800895e:	4603      	mov	r3, r0
 8008960:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008962:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800896a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800896e:	e08a      	b.n	8008a86 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8008970:	f06f 030a 	mvn.w	r3, #10
 8008974:	e087      	b.n	8008a86 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800897c:	f003 0302 	and.w	r3, r3, #2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d110      	bne.n	80089a6 <netconn_recv_data+0xaa>
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	f003 0304 	and.w	r3, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10b      	bne.n	80089a6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008994:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d024      	beq.n	80089f0 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3310      	adds	r3, #16
 80089aa:	f107 0218 	add.w	r2, r7, #24
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f010 fc8c 	bl	80192ce <sys_arch_mbox_tryfetch>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d129      	bne.n	8008a12 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fab3 	bl	8008f2a <netconn_err>
 80089c4:	4603      	mov	r3, r0
 80089c6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80089c8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 80089d0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80089d4:	e057      	b.n	8008a86 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089dc:	f003 0301 	and.w	r3, r3, #1
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d002      	beq.n	80089ea <netconn_recv_data+0xee>
        return ERR_CONN;
 80089e4:	f06f 030a 	mvn.w	r3, #10
 80089e8:	e04d      	b.n	8008a86 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80089ea:	f06f 0306 	mvn.w	r3, #6
 80089ee:	e04a      	b.n	8008a86 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f103 0010 	add.w	r0, r3, #16
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	69da      	ldr	r2, [r3, #28]
 80089fa:	f107 0318 	add.w	r3, r7, #24
 80089fe:	4619      	mov	r1, r3
 8008a00:	f010 fc26 	bl	8019250 <sys_arch_mbox_fetch>
 8008a04:	4603      	mov	r3, r0
 8008a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0a:	d102      	bne.n	8008a12 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 8008a0c:	f06f 0302 	mvn.w	r3, #2
 8008a10:	e039      	b.n	8008a86 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a1a:	2b10      	cmp	r3, #16
 8008a1c:	d117      	bne.n	8008a4e <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	f107 0217 	add.w	r2, r7, #23
 8008a24:	4611      	mov	r1, r2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fb2c 	bl	8009084 <lwip_netconn_is_err_msg>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008a32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a36:	f113 0f0f 	cmn.w	r3, #15
 8008a3a:	d101      	bne.n	8008a40 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e022      	b.n	8008a86 <netconn_recv_data+0x18a>
      }
      return err;
 8008a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a44:	e01f      	b.n	8008a86 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	891b      	ldrh	r3, [r3, #8]
 8008a4a:	83fb      	strh	r3, [r7, #30]
 8008a4c:	e00d      	b.n	8008a6a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d106      	bne.n	8008a62 <netconn_recv_data+0x166>
 8008a54:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <netconn_recv_data+0x194>)
 8008a56:	f240 2291 	movw	r2, #657	; 0x291
 8008a5a:	4911      	ldr	r1, [pc, #68]	; (8008aa0 <netconn_recv_data+0x1a4>)
 8008a5c:	480e      	ldr	r0, [pc, #56]	; (8008a98 <netconn_recv_data+0x19c>)
 8008a5e:	f011 fc67 	bl	801a330 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	891b      	ldrh	r3, [r3, #8]
 8008a68:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <netconn_recv_data+0x182>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	8bfa      	ldrh	r2, [r7, #30]
 8008a78:	2101      	movs	r1, #1
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3720      	adds	r7, #32
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	0801eab4 	.word	0x0801eab4
 8008a94:	0801eccc 	.word	0x0801eccc
 8008a98:	0801eb0c 	.word	0x0801eb0c
 8008a9c:	0801ecec 	.word	0x0801ecec
 8008aa0:	0801ed08 	.word	0x0801ed08

08008aa4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	60f8      	str	r0, [r7, #12]
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d005      	beq.n	8008ac2 <netconn_tcp_recvd_msg+0x1e>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d009      	beq.n	8008ad6 <netconn_tcp_recvd_msg+0x32>
 8008ac2:	4b0c      	ldr	r3, [pc, #48]	; (8008af4 <netconn_tcp_recvd_msg+0x50>)
 8008ac4:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008ac8:	490b      	ldr	r1, [pc, #44]	; (8008af8 <netconn_tcp_recvd_msg+0x54>)
 8008aca:	480c      	ldr	r0, [pc, #48]	; (8008afc <netconn_tcp_recvd_msg+0x58>)
 8008acc:	f011 fc30 	bl	801a330 <iprintf>
 8008ad0:	f06f 030f 	mvn.w	r3, #15
 8008ad4:	e00a      	b.n	8008aec <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4806      	ldr	r0, [pc, #24]	; (8008b00 <netconn_tcp_recvd_msg+0x5c>)
 8008ae6:	f7ff fdc1 	bl	800866c <netconn_apimsg>
 8008aea:	4603      	mov	r3, r0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	0801eab4 	.word	0x0801eab4
 8008af8:	0801ed14 	.word	0x0801ed14
 8008afc:	0801eb0c 	.word	0x0801eb0c
 8008b00:	0800a1b1 	.word	0x0800a1b1

08008b04 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b090      	sub	sp, #64	; 0x40
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	3310      	adds	r3, #16
 8008b16:	4618      	mov	r0, r3
 8008b18:	f010 fbf5 	bl	8019306 <sys_mbox_valid>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008b22:	f06f 030a 	mvn.w	r3, #10
 8008b26:	e072      	b.n	8008c0e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b2e:	b25b      	sxtb	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	da09      	bge.n	8008b48 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8008b46:	e03b      	b.n	8008bc0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008b48:	79fb      	ldrb	r3, [r7, #7]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	68b9      	ldr	r1, [r7, #8]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f7ff fed4 	bl	80088fc <netconn_recv_data>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008b5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008b62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008b66:	e052      	b.n	8008c0e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	f003 0308 	and.w	r3, r3, #8
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10e      	bne.n	8008b96 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <netconn_recv_data_tcp+0x80>
 8008b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b80:	891b      	ldrh	r3, [r3, #8]
 8008b82:	e000      	b.n	8008b86 <netconn_recv_data_tcp+0x82>
 8008b84:	2301      	movs	r3, #1
 8008b86:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008b88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008b8a:	f107 0214 	add.w	r2, r7, #20
 8008b8e:	4619      	mov	r1, r3
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f7ff ff87 	bl	8008aa4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d136      	bne.n	8008c0a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
 8008b9e:	f003 0310 	and.w	r3, r3, #16
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8008bb8:	f06f 0306 	mvn.w	r3, #6
 8008bbc:	e027      	b.n	8008c0e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8008bbe:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <netconn_recv_data_tcp+0xd0>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	2200      	movs	r2, #0
 8008bce:	2101      	movs	r1, #1
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10f      	bne.n	8008bfc <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f000 f9a4 	bl	8008f2a <netconn_err>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008be8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d002      	beq.n	8008bf6 <netconn_recv_data_tcp+0xf2>
          return err;
 8008bf0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008bf4:	e00b      	b.n	8008c0e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8008bf6:	f06f 030d 	mvn.w	r3, #13
 8008bfa:	e008      	b.n	8008c0e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008bfc:	2101      	movs	r1, #1
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 f956 	bl	8008eb0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008c04:	f06f 030e 	mvn.w	r3, #14
 8008c08:	e001      	b.n	8008c0e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8008c0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3740      	adds	r7, #64	; 0x40
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b086      	sub	sp, #24
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008c22:	2300      	movs	r3, #0
 8008c24:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d109      	bne.n	8008c40 <netconn_recv+0x28>
 8008c2c:	4b32      	ldr	r3, [pc, #200]	; (8008cf8 <netconn_recv+0xe0>)
 8008c2e:	f240 3263 	movw	r2, #867	; 0x363
 8008c32:	4932      	ldr	r1, [pc, #200]	; (8008cfc <netconn_recv+0xe4>)
 8008c34:	4832      	ldr	r0, [pc, #200]	; (8008d00 <netconn_recv+0xe8>)
 8008c36:	f011 fb7b 	bl	801a330 <iprintf>
 8008c3a:	f06f 030f 	mvn.w	r3, #15
 8008c3e:	e056      	b.n	8008cee <netconn_recv+0xd6>
  *new_buf = NULL;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d109      	bne.n	8008c60 <netconn_recv+0x48>
 8008c4c:	4b2a      	ldr	r3, [pc, #168]	; (8008cf8 <netconn_recv+0xe0>)
 8008c4e:	f240 3265 	movw	r2, #869	; 0x365
 8008c52:	492c      	ldr	r1, [pc, #176]	; (8008d04 <netconn_recv+0xec>)
 8008c54:	482a      	ldr	r0, [pc, #168]	; (8008d00 <netconn_recv+0xe8>)
 8008c56:	f011 fb6b 	bl	801a330 <iprintf>
 8008c5a:	f06f 030f 	mvn.w	r3, #15
 8008c5e:	e046      	b.n	8008cee <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c68:	2b10      	cmp	r3, #16
 8008c6a:	d13a      	bne.n	8008ce2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008c70:	2006      	movs	r0, #6
 8008c72:	f003 fc87 	bl	800c584 <memp_malloc>
 8008c76:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d102      	bne.n	8008c84 <netconn_recv+0x6c>
      return ERR_MEM;
 8008c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008c82:	e034      	b.n	8008cee <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008c84:	f107 030c 	add.w	r3, r7, #12
 8008c88:	2200      	movs	r2, #0
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7ff ff39 	bl	8008b04 <netconn_recv_data_tcp>
 8008c92:	4603      	mov	r3, r0
 8008c94:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008c96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d006      	beq.n	8008cac <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8008c9e:	6979      	ldr	r1, [r7, #20]
 8008ca0:	2006      	movs	r0, #6
 8008ca2:	f003 fcc1 	bl	800c628 <memp_free>
      return err;
 8008ca6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008caa:	e020      	b.n	8008cee <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <netconn_recv+0xa8>
 8008cb2:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <netconn_recv+0xe0>)
 8008cb4:	f240 3279 	movw	r2, #889	; 0x379
 8008cb8:	4913      	ldr	r1, [pc, #76]	; (8008d08 <netconn_recv+0xf0>)
 8008cba:	4811      	ldr	r0, [pc, #68]	; (8008d00 <netconn_recv+0xe8>)
 8008cbc:	f011 fb38 	bl	801a330 <iprintf>

    buf->p = p;
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	697a      	ldr	r2, [r7, #20]
 8008cdc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	e005      	b.n	8008cee <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f7ff fe08 	bl	80088fc <netconn_recv_data>
 8008cec:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	0801eab4 	.word	0x0801eab4
 8008cfc:	0801eccc 	.word	0x0801eccc
 8008d00:	0801eb0c 	.word	0x0801eb0c
 8008d04:	0801ecec 	.word	0x0801ecec
 8008d08:	0801ed64 	.word	0x0801ed64

08008d0c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af02      	add	r7, sp, #8
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	f107 0110 	add.w	r1, r7, #16
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	2201      	movs	r2, #1
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f805 	bl	8008d40 <netconn_write_vectors_partly>
 8008d36:	4603      	mov	r3, r0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b092      	sub	sp, #72	; 0x48
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	460b      	mov	r3, r1
 8008d50:	80fb      	strh	r3, [r7, #6]
 8008d52:	4613      	mov	r3, r2
 8008d54:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <netconn_write_vectors_partly+0x30>
 8008d5c:	4b4e      	ldr	r3, [pc, #312]	; (8008e98 <netconn_write_vectors_partly+0x158>)
 8008d5e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008d62:	494e      	ldr	r1, [pc, #312]	; (8008e9c <netconn_write_vectors_partly+0x15c>)
 8008d64:	484e      	ldr	r0, [pc, #312]	; (8008ea0 <netconn_write_vectors_partly+0x160>)
 8008d66:	f011 fae3 	bl	801a330 <iprintf>
 8008d6a:	f06f 030f 	mvn.w	r3, #15
 8008d6e:	e08f      	b.n	8008e90 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d78:	2b10      	cmp	r3, #16
 8008d7a:	d009      	beq.n	8008d90 <netconn_write_vectors_partly+0x50>
 8008d7c:	4b46      	ldr	r3, [pc, #280]	; (8008e98 <netconn_write_vectors_partly+0x158>)
 8008d7e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008d82:	4948      	ldr	r1, [pc, #288]	; (8008ea4 <netconn_write_vectors_partly+0x164>)
 8008d84:	4846      	ldr	r0, [pc, #280]	; (8008ea0 <netconn_write_vectors_partly+0x160>)
 8008d86:	f011 fad3 	bl	801a330 <iprintf>
 8008d8a:	f06f 0305 	mvn.w	r3, #5
 8008d8e:	e07f      	b.n	8008e90 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d104      	bne.n	8008da8 <netconn_write_vectors_partly+0x68>
 8008d9e:	797b      	ldrb	r3, [r7, #5]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d001      	beq.n	8008dac <netconn_write_vectors_partly+0x6c>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e000      	b.n	8008dae <netconn_write_vectors_partly+0x6e>
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008db2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <netconn_write_vectors_partly+0x86>
 8008dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008dc0:	f06f 0305 	mvn.w	r3, #5
 8008dc4:	e064      	b.n	8008e90 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008dca:	2300      	movs	r3, #0
 8008dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8008dce:	e015      	b.n	8008dfc <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8008dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	68ba      	ldr	r2, [r7, #8]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ddc:	4413      	add	r3, r2
 8008dde:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8008de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	68ba      	ldr	r2, [r7, #8]
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d202      	bcs.n	8008df6 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8008df0:	f06f 0305 	mvn.w	r3, #5
 8008df4:	e04c      	b.n	8008e90 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8008df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008df8:	3301      	adds	r3, #1
 8008dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8008dfc:	88fb      	ldrh	r3, [r7, #6]
 8008dfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e00:	429a      	cmp	r2, r3
 8008e02:	dbe5      	blt.n	8008dd0 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8008e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e040      	b.n	8008e90 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8008e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	da0a      	bge.n	8008e2a <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d102      	bne.n	8008e20 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8008e1a:	f06f 0305 	mvn.w	r3, #5
 8008e1e:	e037      	b.n	8008e90 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008e20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008e24:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008e32:	88fb      	ldrh	r3, [r7, #6]
 8008e34:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008e3a:	797b      	ldrb	r3, [r7, #5]
 8008e3c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008e48:	f107 0314 	add.w	r3, r7, #20
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4816      	ldr	r0, [pc, #88]	; (8008ea8 <netconn_write_vectors_partly+0x168>)
 8008e50:	f7ff fc0c 	bl	800866c <netconn_apimsg>
 8008e54:	4603      	mov	r3, r0
 8008e56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008e5a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d114      	bne.n	8008e8c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8008e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6c:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008e6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d10a      	bne.n	8008e8c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d006      	beq.n	8008e8c <netconn_write_vectors_partly+0x14c>
 8008e7e:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <netconn_write_vectors_partly+0x158>)
 8008e80:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008e84:	4909      	ldr	r1, [pc, #36]	; (8008eac <netconn_write_vectors_partly+0x16c>)
 8008e86:	4806      	ldr	r0, [pc, #24]	; (8008ea0 <netconn_write_vectors_partly+0x160>)
 8008e88:	f011 fa52 	bl	801a330 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008e8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3748      	adds	r7, #72	; 0x48
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	0801eab4 	.word	0x0801eab4
 8008e9c:	0801ed8c 	.word	0x0801ed8c
 8008ea0:	0801eb0c 	.word	0x0801eb0c
 8008ea4:	0801eda8 	.word	0x0801eda8
 8008ea8:	0800a5bd 	.word	0x0800a5bd
 8008eac:	0801edcc 	.word	0x0801edcc

08008eb0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b08c      	sub	sp, #48	; 0x30
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	460b      	mov	r3, r1
 8008eba:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <netconn_close_shutdown+0x26>
 8008ec2:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <netconn_close_shutdown+0x50>)
 8008ec4:	f240 4247 	movw	r2, #1095	; 0x447
 8008ec8:	490e      	ldr	r1, [pc, #56]	; (8008f04 <netconn_close_shutdown+0x54>)
 8008eca:	480f      	ldr	r0, [pc, #60]	; (8008f08 <netconn_close_shutdown+0x58>)
 8008ecc:	f011 fa30 	bl	801a330 <iprintf>
 8008ed0:	f06f 030f 	mvn.w	r3, #15
 8008ed4:	e010      	b.n	8008ef8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008eda:	78fb      	ldrb	r3, [r7, #3]
 8008edc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008ede:	2329      	movs	r3, #41	; 0x29
 8008ee0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008ee2:	f107 030c 	add.w	r3, r7, #12
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4808      	ldr	r0, [pc, #32]	; (8008f0c <netconn_close_shutdown+0x5c>)
 8008eea:	f7ff fbbf 	bl	800866c <netconn_apimsg>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008ef4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3730      	adds	r7, #48	; 0x30
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	0801eab4 	.word	0x0801eab4
 8008f04:	0801edf0 	.word	0x0801edf0
 8008f08:	0801eb0c 	.word	0x0801eb0c
 8008f0c:	0800a6d5 	.word	0x0800a6d5

08008f10 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008f18:	2103      	movs	r1, #3
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7ff ffc8 	bl	8008eb0 <netconn_close_shutdown>
 8008f20:	4603      	mov	r3, r0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <netconn_err+0x12>
    return ERR_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e00d      	b.n	8008f58 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008f3c:	f010 fafe 	bl	801953c <sys_arch_protect>
 8008f40:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7a1b      	ldrb	r3, [r3, #8]
 8008f46:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f010 fb02 	bl	8019558 <sys_arch_unprotect>
  return err;
 8008f54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08a      	sub	sp, #40	; 0x28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d109      	bne.n	8008f84 <netconn_gethostbyname+0x24>
 8008f70:	4b24      	ldr	r3, [pc, #144]	; (8009004 <netconn_gethostbyname+0xa4>)
 8008f72:	f240 5204 	movw	r2, #1284	; 0x504
 8008f76:	4924      	ldr	r1, [pc, #144]	; (8009008 <netconn_gethostbyname+0xa8>)
 8008f78:	4824      	ldr	r0, [pc, #144]	; (800900c <netconn_gethostbyname+0xac>)
 8008f7a:	f011 f9d9 	bl	801a330 <iprintf>
 8008f7e:	f06f 030f 	mvn.w	r3, #15
 8008f82:	e03b      	b.n	8008ffc <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <netconn_gethostbyname+0x3e>
 8008f8a:	4b1e      	ldr	r3, [pc, #120]	; (8009004 <netconn_gethostbyname+0xa4>)
 8008f8c:	f240 5205 	movw	r2, #1285	; 0x505
 8008f90:	491f      	ldr	r1, [pc, #124]	; (8009010 <netconn_gethostbyname+0xb0>)
 8008f92:	481e      	ldr	r0, [pc, #120]	; (800900c <netconn_gethostbyname+0xac>)
 8008f94:	f011 f9cc 	bl	801a330 <iprintf>
 8008f98:	f06f 030f 	mvn.w	r3, #15
 8008f9c:	e02e      	b.n	8008ffc <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 8008f9e:	f107 030f 	add.w	r3, r7, #15
 8008fa2:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 8008fa4:	f107 0310 	add.w	r3, r7, #16
 8008fa8:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f010 f9c3 	bl	8019342 <sys_sem_new>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 8008fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fcc:	e016      	b.n	8008ffc <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 8008fce:	69fa      	ldr	r2, [r7, #28]
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	480f      	ldr	r0, [pc, #60]	; (8009014 <netconn_gethostbyname+0xb4>)
 8008fd8:	f001 fde8 	bl	800abac <tcpip_send_msg_wait_sem>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f010 fa12 	bl	801940e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 8008fea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d002      	beq.n	8008ff8 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 8008ff2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ff6:	e001      	b.n	8008ffc <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 8008ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3728      	adds	r7, #40	; 0x28
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	0801eab4 	.word	0x0801eab4
 8009008:	0801ee0c 	.word	0x0801ee0c
 800900c:	0801eb0c 	.word	0x0801eb0c
 8009010:	0801ee30 	.word	0x0801ee30
 8009014:	0800a831 	.word	0x0800a831

08009018 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009026:	f113 0f0d 	cmn.w	r3, #13
 800902a:	d009      	beq.n	8009040 <lwip_netconn_err_to_msg+0x28>
 800902c:	f113 0f0d 	cmn.w	r3, #13
 8009030:	dc0c      	bgt.n	800904c <lwip_netconn_err_to_msg+0x34>
 8009032:	f113 0f0f 	cmn.w	r3, #15
 8009036:	d007      	beq.n	8009048 <lwip_netconn_err_to_msg+0x30>
 8009038:	f113 0f0e 	cmn.w	r3, #14
 800903c:	d002      	beq.n	8009044 <lwip_netconn_err_to_msg+0x2c>
 800903e:	e005      	b.n	800904c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009040:	4b0a      	ldr	r3, [pc, #40]	; (800906c <lwip_netconn_err_to_msg+0x54>)
 8009042:	e00e      	b.n	8009062 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009044:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <lwip_netconn_err_to_msg+0x58>)
 8009046:	e00c      	b.n	8009062 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <lwip_netconn_err_to_msg+0x5c>)
 800904a:	e00a      	b.n	8009062 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800904c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <lwip_netconn_err_to_msg+0x48>
 8009054:	4b08      	ldr	r3, [pc, #32]	; (8009078 <lwip_netconn_err_to_msg+0x60>)
 8009056:	227d      	movs	r2, #125	; 0x7d
 8009058:	4908      	ldr	r1, [pc, #32]	; (800907c <lwip_netconn_err_to_msg+0x64>)
 800905a:	4809      	ldr	r0, [pc, #36]	; (8009080 <lwip_netconn_err_to_msg+0x68>)
 800905c:	f011 f968 	bl	801a330 <iprintf>
      return NULL;
 8009060:	2300      	movs	r3, #0
  }
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	0802234c 	.word	0x0802234c
 8009070:	0802234d 	.word	0x0802234d
 8009074:	0802234e 	.word	0x0802234e
 8009078:	0801ee54 	.word	0x0801ee54
 800907c:	0801ee88 	.word	0x0801ee88
 8009080:	0801ee98 	.word	0x0801ee98

08009084 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d105      	bne.n	80090a0 <lwip_netconn_is_err_msg+0x1c>
 8009094:	4b12      	ldr	r3, [pc, #72]	; (80090e0 <lwip_netconn_is_err_msg+0x5c>)
 8009096:	2285      	movs	r2, #133	; 0x85
 8009098:	4912      	ldr	r1, [pc, #72]	; (80090e4 <lwip_netconn_is_err_msg+0x60>)
 800909a:	4813      	ldr	r0, [pc, #76]	; (80090e8 <lwip_netconn_is_err_msg+0x64>)
 800909c:	f011 f948 	bl	801a330 <iprintf>

  if (msg == &netconn_aborted) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a12      	ldr	r2, [pc, #72]	; (80090ec <lwip_netconn_is_err_msg+0x68>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d104      	bne.n	80090b2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	22f3      	movs	r2, #243	; 0xf3
 80090ac:	701a      	strb	r2, [r3, #0]
    return 1;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e012      	b.n	80090d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a0e      	ldr	r2, [pc, #56]	; (80090f0 <lwip_netconn_is_err_msg+0x6c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d104      	bne.n	80090c4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	22f2      	movs	r2, #242	; 0xf2
 80090be:	701a      	strb	r2, [r3, #0]
    return 1;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e009      	b.n	80090d8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a0b      	ldr	r2, [pc, #44]	; (80090f4 <lwip_netconn_is_err_msg+0x70>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d104      	bne.n	80090d6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	22f1      	movs	r2, #241	; 0xf1
 80090d0:	701a      	strb	r2, [r3, #0]
    return 1;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	0801ee54 	.word	0x0801ee54
 80090e4:	0801eec0 	.word	0x0801eec0
 80090e8:	0801ee98 	.word	0x0801ee98
 80090ec:	0802234c 	.word	0x0802234c
 80090f0:	0802234d 	.word	0x0802234d
 80090f4:	0802234e 	.word	0x0802234e

080090f8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d105      	bne.n	8009118 <recv_udp+0x20>
 800910c:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <recv_udp+0xe8>)
 800910e:	22e5      	movs	r2, #229	; 0xe5
 8009110:	4934      	ldr	r1, [pc, #208]	; (80091e4 <recv_udp+0xec>)
 8009112:	4835      	ldr	r0, [pc, #212]	; (80091e8 <recv_udp+0xf0>)
 8009114:	f011 f90c 	bl	801a330 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d105      	bne.n	800912a <recv_udp+0x32>
 800911e:	4b30      	ldr	r3, [pc, #192]	; (80091e0 <recv_udp+0xe8>)
 8009120:	22e6      	movs	r2, #230	; 0xe6
 8009122:	4932      	ldr	r1, [pc, #200]	; (80091ec <recv_udp+0xf4>)
 8009124:	4830      	ldr	r0, [pc, #192]	; (80091e8 <recv_udp+0xf0>)
 8009126:	f011 f903 	bl	801a330 <iprintf>
  conn = (struct netconn *)arg;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <recv_udp+0x44>
    pbuf_free(p);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f004 f927 	bl	800d388 <pbuf_free>
    return;
 800913a:	e04d      	b.n	80091d8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	68ba      	ldr	r2, [r7, #8]
 8009142:	429a      	cmp	r2, r3
 8009144:	d005      	beq.n	8009152 <recv_udp+0x5a>
 8009146:	4b26      	ldr	r3, [pc, #152]	; (80091e0 <recv_udp+0xe8>)
 8009148:	22ee      	movs	r2, #238	; 0xee
 800914a:	4929      	ldr	r1, [pc, #164]	; (80091f0 <recv_udp+0xf8>)
 800914c:	4826      	ldr	r0, [pc, #152]	; (80091e8 <recv_udp+0xf0>)
 800914e:	f011 f8ef 	bl	801a330 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	3310      	adds	r3, #16
 8009156:	4618      	mov	r0, r3
 8009158:	f010 f8d5 	bl	8019306 <sys_mbox_valid>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f004 f910 	bl	800d388 <pbuf_free>
    return;
 8009168:	e036      	b.n	80091d8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800916a:	2006      	movs	r0, #6
 800916c:	f003 fa0a 	bl	800c584 <memp_malloc>
 8009170:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d103      	bne.n	8009180 <recv_udp+0x88>
    pbuf_free(p);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f004 f905 	bl	800d388 <pbuf_free>
    return;
 800917e:	e02b      	b.n	80091d8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009186:	69bb      	ldr	r3, [r7, #24]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <recv_udp+0xa0>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	e000      	b.n	800919a <recv_udp+0xa2>
 8009198:	2300      	movs	r3, #0
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80091a2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	891b      	ldrh	r3, [r3, #8]
 80091a8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	3310      	adds	r3, #16
 80091ae:	69b9      	ldr	r1, [r7, #24]
 80091b0:	4618      	mov	r0, r3
 80091b2:	f010 f833 	bl	801921c <sys_mbox_trypost>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80091bc:	69b8      	ldr	r0, [r7, #24]
 80091be:	f001 fb7d 	bl	800a8bc <netbuf_delete>
    return;
 80091c2:	e009      	b.n	80091d8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <recv_udp+0xe0>
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	8afa      	ldrh	r2, [r7, #22]
 80091d2:	2100      	movs	r1, #0
 80091d4:	69f8      	ldr	r0, [r7, #28]
 80091d6:	4798      	blx	r3
  }
}
 80091d8:	3720      	adds	r7, #32
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop
 80091e0:	0801ee54 	.word	0x0801ee54
 80091e4:	0801eecc 	.word	0x0801eecc
 80091e8:	0801ee98 	.word	0x0801ee98
 80091ec:	0801eef0 	.word	0x0801eef0
 80091f0:	0801ef10 	.word	0x0801ef10

080091f4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d106      	bne.n	8009216 <recv_tcp+0x22>
 8009208:	4b36      	ldr	r3, [pc, #216]	; (80092e4 <recv_tcp+0xf0>)
 800920a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800920e:	4936      	ldr	r1, [pc, #216]	; (80092e8 <recv_tcp+0xf4>)
 8009210:	4836      	ldr	r0, [pc, #216]	; (80092ec <recv_tcp+0xf8>)
 8009212:	f011 f88d 	bl	801a330 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <recv_tcp+0x36>
 800921c:	4b31      	ldr	r3, [pc, #196]	; (80092e4 <recv_tcp+0xf0>)
 800921e:	f240 122d 	movw	r2, #301	; 0x12d
 8009222:	4933      	ldr	r1, [pc, #204]	; (80092f0 <recv_tcp+0xfc>)
 8009224:	4831      	ldr	r0, [pc, #196]	; (80092ec <recv_tcp+0xf8>)
 8009226:	f011 f883 	bl	801a330 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800922a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <recv_tcp+0x4c>
 8009232:	4b2c      	ldr	r3, [pc, #176]	; (80092e4 <recv_tcp+0xf0>)
 8009234:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009238:	492e      	ldr	r1, [pc, #184]	; (80092f4 <recv_tcp+0x100>)
 800923a:	482c      	ldr	r0, [pc, #176]	; (80092ec <recv_tcp+0xf8>)
 800923c:	f011 f878 	bl	801a330 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d102      	bne.n	8009250 <recv_tcp+0x5c>
    return ERR_VAL;
 800924a:	f06f 0305 	mvn.w	r3, #5
 800924e:	e045      	b.n	80092dc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	68ba      	ldr	r2, [r7, #8]
 8009256:	429a      	cmp	r2, r3
 8009258:	d006      	beq.n	8009268 <recv_tcp+0x74>
 800925a:	4b22      	ldr	r3, [pc, #136]	; (80092e4 <recv_tcp+0xf0>)
 800925c:	f240 1235 	movw	r2, #309	; 0x135
 8009260:	4925      	ldr	r1, [pc, #148]	; (80092f8 <recv_tcp+0x104>)
 8009262:	4822      	ldr	r0, [pc, #136]	; (80092ec <recv_tcp+0xf8>)
 8009264:	f011 f864 	bl	801a330 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	3310      	adds	r3, #16
 800926c:	4618      	mov	r0, r3
 800926e:	f010 f84a 	bl	8019306 <sys_mbox_valid>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d10d      	bne.n	8009294 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d008      	beq.n	8009290 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	891b      	ldrh	r3, [r3, #8]
 8009282:	4619      	mov	r1, r3
 8009284:	68b8      	ldr	r0, [r7, #8]
 8009286:	f005 f8f9 	bl	800e47c <tcp_recved>
      pbuf_free(p);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f004 f87c 	bl	800d388 <pbuf_free>
    }
    return ERR_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	e023      	b.n	80092dc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <recv_tcp+0xb2>
    msg = p;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	891b      	ldrh	r3, [r3, #8]
 80092a2:	83fb      	strh	r3, [r7, #30]
 80092a4:	e003      	b.n	80092ae <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80092a6:	4b15      	ldr	r3, [pc, #84]	; (80092fc <recv_tcp+0x108>)
 80092a8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	3310      	adds	r3, #16
 80092b2:	69b9      	ldr	r1, [r7, #24]
 80092b4:	4618      	mov	r0, r3
 80092b6:	f00f ffb1 	bl	801921c <sys_mbox_trypost>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d002      	beq.n	80092c6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80092c0:	f04f 33ff 	mov.w	r3, #4294967295
 80092c4:	e00a      	b.n	80092dc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <recv_tcp+0xe6>
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d2:	8bfa      	ldrh	r2, [r7, #30]
 80092d4:	2100      	movs	r1, #0
 80092d6:	6978      	ldr	r0, [r7, #20]
 80092d8:	4798      	blx	r3
  }

  return ERR_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3720      	adds	r7, #32
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	0801ee54 	.word	0x0801ee54
 80092e8:	0801ef30 	.word	0x0801ef30
 80092ec:	0801ee98 	.word	0x0801ee98
 80092f0:	0801ef54 	.word	0x0801ef54
 80092f4:	0801ef74 	.word	0x0801ef74
 80092f8:	0801ef8c 	.word	0x0801ef8c
 80092fc:	0802234e 	.word	0x0802234e

08009300 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <poll_tcp+0x22>
 8009314:	4b2b      	ldr	r3, [pc, #172]	; (80093c4 <poll_tcp+0xc4>)
 8009316:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800931a:	492b      	ldr	r1, [pc, #172]	; (80093c8 <poll_tcp+0xc8>)
 800931c:	482b      	ldr	r0, [pc, #172]	; (80093cc <poll_tcp+0xcc>)
 800931e:	f011 f807 	bl	801a330 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	785b      	ldrb	r3, [r3, #1]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d104      	bne.n	8009334 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800932a:	2101      	movs	r1, #1
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f000 ff75 	bl	800a21c <lwip_netconn_do_writemore>
 8009332:	e016      	b.n	8009362 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	2b04      	cmp	r3, #4
 800933a:	d112      	bne.n	8009362 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00a      	beq.n	800935a <poll_tcp+0x5a>
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	7a5b      	ldrb	r3, [r3, #9]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009352:	7a5a      	ldrb	r2, [r3, #9]
 8009354:	3a01      	subs	r2, #1
 8009356:	b2d2      	uxtb	r2, r2
 8009358:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800935a:	2101      	movs	r1, #1
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 fb49 	bl	80099f4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b00      	cmp	r3, #0
 800936e:	d023      	beq.n	80093b8 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d01f      	beq.n	80093b8 <poll_tcp+0xb8>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009380:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009384:	d318      	bcc.n	80093b8 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800938e:	2b04      	cmp	r3, #4
 8009390:	d812      	bhi.n	80093b8 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009398:	f023 0310 	bic.w	r3, r3, #16
 800939c:	b2da      	uxtb	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d005      	beq.n	80093b8 <poll_tcp+0xb8>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b0:	2200      	movs	r2, #0
 80093b2:	2102      	movs	r1, #2
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	0801ee54 	.word	0x0801ee54
 80093c8:	0801efac 	.word	0x0801efac
 80093cc:	0801ee98 	.word	0x0801ee98

080093d0 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d106      	bne.n	80093f6 <sent_tcp+0x26>
 80093e8:	4b21      	ldr	r3, [pc, #132]	; (8009470 <sent_tcp+0xa0>)
 80093ea:	f240 1293 	movw	r2, #403	; 0x193
 80093ee:	4921      	ldr	r1, [pc, #132]	; (8009474 <sent_tcp+0xa4>)
 80093f0:	4821      	ldr	r0, [pc, #132]	; (8009478 <sent_tcp+0xa8>)
 80093f2:	f010 ff9d 	bl	801a330 <iprintf>

  if (conn) {
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d034      	beq.n	8009466 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d104      	bne.n	800940e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009404:	2101      	movs	r1, #1
 8009406:	6978      	ldr	r0, [r7, #20]
 8009408:	f000 ff08 	bl	800a21c <lwip_netconn_do_writemore>
 800940c:	e007      	b.n	800941e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	785b      	ldrb	r3, [r3, #1]
 8009412:	2b04      	cmp	r3, #4
 8009414:	d103      	bne.n	800941e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009416:	2101      	movs	r1, #1
 8009418:	6978      	ldr	r0, [r7, #20]
 800941a:	f000 faeb 	bl	80099f4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01f      	beq.n	8009466 <sent_tcp+0x96>
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800942e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009432:	d318      	bcc.n	8009466 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800943c:	2b04      	cmp	r3, #4
 800943e:	d812      	bhi.n	8009466 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009446:	f023 0310 	bic.w	r3, r3, #16
 800944a:	b2da      	uxtb	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009456:	2b00      	cmp	r3, #0
 8009458:	d005      	beq.n	8009466 <sent_tcp+0x96>
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945e:	88fa      	ldrh	r2, [r7, #6]
 8009460:	2102      	movs	r1, #2
 8009462:	6978      	ldr	r0, [r7, #20]
 8009464:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3718      	adds	r7, #24
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	0801ee54 	.word	0x0801ee54
 8009474:	0801efac 	.word	0x0801efac
 8009478:	0801ee98 	.word	0x0801ee98

0800947c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b088      	sub	sp, #32
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d106      	bne.n	80094a0 <err_tcp+0x24>
 8009492:	4b61      	ldr	r3, [pc, #388]	; (8009618 <err_tcp+0x19c>)
 8009494:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009498:	4960      	ldr	r1, [pc, #384]	; (800961c <err_tcp+0x1a0>)
 800949a:	4861      	ldr	r0, [pc, #388]	; (8009620 <err_tcp+0x1a4>)
 800949c:	f010 ff48 	bl	801a330 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80094a0:	f010 f84c 	bl	801953c <sys_arch_protect>
 80094a4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	2200      	movs	r2, #0
 80094aa:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80094ac:	69fb      	ldr	r3, [r7, #28]
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094b8:	f043 0301 	orr.w	r3, r3, #1
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	785b      	ldrb	r3, [r3, #1]
 80094c8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	2200      	movs	r2, #0
 80094ce:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80094d0:	69b8      	ldr	r0, [r7, #24]
 80094d2:	f010 f841 	bl	8019558 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d005      	beq.n	80094ea <err_tcp+0x6e>
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e2:	2200      	movs	r2, #0
 80094e4:	2104      	movs	r1, #4
 80094e6:	69f8      	ldr	r0, [r7, #28]
 80094e8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d005      	beq.n	80094fe <err_tcp+0x82>
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f6:	2200      	movs	r2, #0
 80094f8:	2100      	movs	r1, #0
 80094fa:	69f8      	ldr	r0, [r7, #28]
 80094fc:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	2b00      	cmp	r3, #0
 8009504:	d005      	beq.n	8009512 <err_tcp+0x96>
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	2200      	movs	r2, #0
 800950c:	2102      	movs	r1, #2
 800950e:	69f8      	ldr	r0, [r7, #28]
 8009510:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fd7e 	bl	8009018 <lwip_netconn_err_to_msg>
 800951c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	3310      	adds	r3, #16
 8009522:	4618      	mov	r0, r3
 8009524:	f00f feef 	bl	8019306 <sys_mbox_valid>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d005      	beq.n	800953a <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	3310      	adds	r3, #16
 8009532:	6939      	ldr	r1, [r7, #16]
 8009534:	4618      	mov	r0, r3
 8009536:	f00f fe71 	bl	801921c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800953a:	69fb      	ldr	r3, [r7, #28]
 800953c:	3314      	adds	r3, #20
 800953e:	4618      	mov	r0, r3
 8009540:	f00f fee1 	bl	8019306 <sys_mbox_valid>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d005      	beq.n	8009556 <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	3314      	adds	r3, #20
 800954e:	6939      	ldr	r1, [r7, #16]
 8009550:	4618      	mov	r0, r3
 8009552:	f00f fe63 	bl	801921c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d005      	beq.n	8009568 <err_tcp+0xec>
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	2b04      	cmp	r3, #4
 8009560:	d002      	beq.n	8009568 <err_tcp+0xec>
 8009562:	7dfb      	ldrb	r3, [r7, #23]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d146      	bne.n	80095f6 <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	bf14      	ite	ne
 8009576:	2301      	movne	r3, #1
 8009578:	2300      	moveq	r3, #0
 800957a:	b2db      	uxtb	r3, r3
 800957c:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009584:	f023 0304 	bic.w	r3, r3, #4
 8009588:	b2da      	uxtb	r2, r3
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d13b      	bne.n	800960e <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	2b00      	cmp	r3, #0
 800959c:	d106      	bne.n	80095ac <err_tcp+0x130>
 800959e:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <err_tcp+0x19c>)
 80095a0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80095a4:	491f      	ldr	r1, [pc, #124]	; (8009624 <err_tcp+0x1a8>)
 80095a6:	481e      	ldr	r0, [pc, #120]	; (8009620 <err_tcp+0x1a4>)
 80095a8:	f010 fec2 	bl	801a330 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d104      	bne.n	80095bc <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	2200      	movs	r2, #0
 80095b8:	711a      	strb	r2, [r3, #4]
 80095ba:	e003      	b.n	80095c4 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c0:	78fa      	ldrb	r2, [r7, #3]
 80095c2:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	330c      	adds	r3, #12
 80095cc:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80095ce:	68b8      	ldr	r0, [r7, #8]
 80095d0:	f00f ff2a 	bl	8019428 <sys_sem_valid>
 80095d4:	4603      	mov	r3, r0
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d106      	bne.n	80095e8 <err_tcp+0x16c>
 80095da:	4b0f      	ldr	r3, [pc, #60]	; (8009618 <err_tcp+0x19c>)
 80095dc:	f240 12ef 	movw	r2, #495	; 0x1ef
 80095e0:	4911      	ldr	r1, [pc, #68]	; (8009628 <err_tcp+0x1ac>)
 80095e2:	480f      	ldr	r0, [pc, #60]	; (8009620 <err_tcp+0x1a4>)
 80095e4:	f010 fea4 	bl	801a330 <iprintf>
      conn->current_msg = NULL;
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2200      	movs	r2, #0
 80095ec:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80095ee:	68b8      	ldr	r0, [r7, #8]
 80095f0:	f00f ff00 	bl	80193f4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80095f4:	e00b      	b.n	800960e <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d008      	beq.n	8009610 <err_tcp+0x194>
 80095fe:	4b06      	ldr	r3, [pc, #24]	; (8009618 <err_tcp+0x19c>)
 8009600:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009604:	4909      	ldr	r1, [pc, #36]	; (800962c <err_tcp+0x1b0>)
 8009606:	4806      	ldr	r0, [pc, #24]	; (8009620 <err_tcp+0x1a4>)
 8009608:	f010 fe92 	bl	801a330 <iprintf>
  }
}
 800960c:	e000      	b.n	8009610 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800960e:	bf00      	nop
}
 8009610:	bf00      	nop
 8009612:	3720      	adds	r7, #32
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	0801ee54 	.word	0x0801ee54
 800961c:	0801efac 	.word	0x0801efac
 8009620:	0801ee98 	.word	0x0801ee98
 8009624:	0801efbc 	.word	0x0801efbc
 8009628:	0801efd8 	.word	0x0801efd8
 800962c:	0801eff4 	.word	0x0801eff4

08009630 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f005 fef9 	bl	800f438 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009646:	490a      	ldr	r1, [pc, #40]	; (8009670 <setup_tcp+0x40>)
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f005 ff07 	bl	800f45c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800964e:	4909      	ldr	r1, [pc, #36]	; (8009674 <setup_tcp+0x44>)
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f005 ff25 	bl	800f4a0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009656:	2202      	movs	r2, #2
 8009658:	4907      	ldr	r1, [pc, #28]	; (8009678 <setup_tcp+0x48>)
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f005 ff7c 	bl	800f558 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009660:	4906      	ldr	r1, [pc, #24]	; (800967c <setup_tcp+0x4c>)
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f005 ff3e 	bl	800f4e4 <tcp_err>
}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	080091f5 	.word	0x080091f5
 8009674:	080093d1 	.word	0x080093d1
 8009678:	08009301 	.word	0x08009301
 800967c:	0800947d 	.word	0x0800947d

08009680 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009688:	2300      	movs	r3, #0
 800968a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d006      	beq.n	80096a4 <pcb_new+0x24>
 8009696:	4b2b      	ldr	r3, [pc, #172]	; (8009744 <pcb_new+0xc4>)
 8009698:	f240 2265 	movw	r2, #613	; 0x265
 800969c:	492a      	ldr	r1, [pc, #168]	; (8009748 <pcb_new+0xc8>)
 800969e:	482b      	ldr	r0, [pc, #172]	; (800974c <pcb_new+0xcc>)
 80096a0:	f010 fe46 	bl	801a330 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d022      	beq.n	80096f8 <pcb_new+0x78>
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d133      	bne.n	800971e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681c      	ldr	r4, [r3, #0]
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	4618      	mov	r0, r3
 80096be:	f00b f9ba 	bl	8014a36 <udp_new_ip_type>
 80096c2:	4603      	mov	r3, r0
 80096c4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d02a      	beq.n	8009726 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	2b22      	cmp	r3, #34	; 0x22
 80096d8:	d104      	bne.n	80096e4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	6858      	ldr	r0, [r3, #4]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	4917      	ldr	r1, [pc, #92]	; (8009750 <pcb_new+0xd0>)
 80096f2:	f00b f927 	bl	8014944 <udp_recv>
      }
      break;
 80096f6:	e016      	b.n	8009726 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681c      	ldr	r4, [r3, #0]
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	4618      	mov	r0, r3
 8009700:	f005 fe8c 	bl	800f41c <tcp_new_ip_type>
 8009704:	4603      	mov	r3, r0
 8009706:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00b      	beq.n	800972a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff ff8a 	bl	8009630 <setup_tcp>
      }
      break;
 800971c:	e005      	b.n	800972a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	22fa      	movs	r2, #250	; 0xfa
 8009722:	711a      	strb	r2, [r3, #4]
      return;
 8009724:	e00a      	b.n	800973c <pcb_new+0xbc>
      break;
 8009726:	bf00      	nop
 8009728:	e000      	b.n	800972c <pcb_new+0xac>
      break;
 800972a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d102      	bne.n	800973c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	22ff      	movs	r2, #255	; 0xff
 800973a:	711a      	strb	r2, [r3, #4]
  }
}
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	bd90      	pop	{r4, r7, pc}
 8009742:	bf00      	nop
 8009744:	0801ee54 	.word	0x0801ee54
 8009748:	0801f038 	.word	0x0801f038
 800974c:	0801ee98 	.word	0x0801ee98
 8009750:	080090f9 	.word	0x080090f9

08009754 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d102      	bne.n	8009776 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff ff85 	bl	8009680 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800978c:	2300      	movs	r3, #0
 800978e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009790:	2007      	movs	r0, #7
 8009792:	f002 fef7 	bl	800c584 <memp_malloc>
 8009796:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <netconn_alloc+0x22>
    return NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	e056      	b.n	8009850 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	79fa      	ldrb	r2, [r7, #7]
 80097ac:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80097ba:	2b10      	cmp	r3, #16
 80097bc:	d004      	beq.n	80097c8 <netconn_alloc+0x48>
 80097be:	2b20      	cmp	r3, #32
 80097c0:	d105      	bne.n	80097ce <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80097c2:	2306      	movs	r3, #6
 80097c4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80097c6:	e00a      	b.n	80097de <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80097c8:	2306      	movs	r3, #6
 80097ca:	617b      	str	r3, [r7, #20]
      break;
 80097cc:	e007      	b.n	80097de <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80097ce:	4b22      	ldr	r3, [pc, #136]	; (8009858 <netconn_alloc+0xd8>)
 80097d0:	f240 22e5 	movw	r2, #741	; 0x2e5
 80097d4:	4921      	ldr	r1, [pc, #132]	; (800985c <netconn_alloc+0xdc>)
 80097d6:	4822      	ldr	r0, [pc, #136]	; (8009860 <netconn_alloc+0xe0>)
 80097d8:	f010 fdaa 	bl	801a330 <iprintf>
      goto free_and_return;
 80097dc:	e033      	b.n	8009846 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3310      	adds	r3, #16
 80097e2:	6979      	ldr	r1, [r7, #20]
 80097e4:	4618      	mov	r0, r3
 80097e6:	f00f fce5 	bl	80191b4 <sys_mbox_new>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d129      	bne.n	8009844 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	330c      	adds	r3, #12
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f00f fda3 	bl	8019342 <sys_sem_new>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d005      	beq.n	800980e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3310      	adds	r3, #16
 8009806:	4618      	mov	r0, r3
 8009808:	f00f fcf6 	bl	80191f8 <sys_mbox_free>
    goto free_and_return;
 800980c:	e01b      	b.n	8009846 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3314      	adds	r3, #20
 8009812:	4618      	mov	r0, r3
 8009814:	f00f fd88 	bl	8019328 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f04f 32ff 	mov.w	r2, #4294967295
 8009824:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2200      	movs	r2, #0
 8009830:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	7cfa      	ldrb	r2, [r7, #19]
 800983c:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	e005      	b.n	8009850 <netconn_alloc+0xd0>
    goto free_and_return;
 8009844:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009846:	68f9      	ldr	r1, [r7, #12]
 8009848:	2007      	movs	r0, #7
 800984a:	f002 feed 	bl	800c628 <memp_free>
  return NULL;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	0801ee54 	.word	0x0801ee54
 800985c:	0801f058 	.word	0x0801f058
 8009860:	0801ee98 	.word	0x0801ee98

08009864 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <netconn_free+0x1e>
 8009874:	4b1b      	ldr	r3, [pc, #108]	; (80098e4 <netconn_free+0x80>)
 8009876:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800987a:	491b      	ldr	r1, [pc, #108]	; (80098e8 <netconn_free+0x84>)
 800987c:	481b      	ldr	r0, [pc, #108]	; (80098ec <netconn_free+0x88>)
 800987e:	f010 fd57 	bl	801a330 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3310      	adds	r3, #16
 8009886:	4618      	mov	r0, r3
 8009888:	f00f fd3d 	bl	8019306 <sys_mbox_valid>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d006      	beq.n	80098a0 <netconn_free+0x3c>
 8009892:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <netconn_free+0x80>)
 8009894:	f240 3223 	movw	r2, #803	; 0x323
 8009898:	4915      	ldr	r1, [pc, #84]	; (80098f0 <netconn_free+0x8c>)
 800989a:	4814      	ldr	r0, [pc, #80]	; (80098ec <netconn_free+0x88>)
 800989c:	f010 fd48 	bl	801a330 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	3314      	adds	r3, #20
 80098a4:	4618      	mov	r0, r3
 80098a6:	f00f fd2e 	bl	8019306 <sys_mbox_valid>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d006      	beq.n	80098be <netconn_free+0x5a>
 80098b0:	4b0c      	ldr	r3, [pc, #48]	; (80098e4 <netconn_free+0x80>)
 80098b2:	f240 3226 	movw	r2, #806	; 0x326
 80098b6:	490f      	ldr	r1, [pc, #60]	; (80098f4 <netconn_free+0x90>)
 80098b8:	480c      	ldr	r0, [pc, #48]	; (80098ec <netconn_free+0x88>)
 80098ba:	f010 fd39 	bl	801a330 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	330c      	adds	r3, #12
 80098c2:	4618      	mov	r0, r3
 80098c4:	f00f fda3 	bl	801940e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	330c      	adds	r3, #12
 80098cc:	4618      	mov	r0, r3
 80098ce:	f00f fdbc 	bl	801944a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	2007      	movs	r0, #7
 80098d6:	f002 fea7 	bl	800c628 <memp_free>
}
 80098da:	bf00      	nop
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	0801ee54 	.word	0x0801ee54
 80098e8:	0801f080 	.word	0x0801f080
 80098ec:	0801ee98 	.word	0x0801ee98
 80098f0:	0801f0b0 	.word	0x0801f0b0
 80098f4:	0801f0ec 	.word	0x0801f0ec

080098f8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b086      	sub	sp, #24
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3310      	adds	r3, #16
 8009904:	4618      	mov	r0, r3
 8009906:	f00f fcfe 	bl	8019306 <sys_mbox_valid>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d02f      	beq.n	8009970 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009910:	e018      	b.n	8009944 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800991a:	2b10      	cmp	r3, #16
 800991c:	d10e      	bne.n	800993c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f107 020f 	add.w	r2, r7, #15
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fbac 	bl	8009084 <lwip_netconn_is_err_msg>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d108      	bne.n	8009944 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	4618      	mov	r0, r3
 8009936:	f003 fd27 	bl	800d388 <pbuf_free>
 800993a:	e003      	b.n	8009944 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	4618      	mov	r0, r3
 8009940:	f000 ffbc 	bl	800a8bc <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3310      	adds	r3, #16
 8009948:	f107 0210 	add.w	r2, r7, #16
 800994c:	4611      	mov	r1, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f00f fcbd 	bl	80192ce <sys_arch_mbox_tryfetch>
 8009954:	4603      	mov	r3, r0
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995a:	d1da      	bne.n	8009912 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	3310      	adds	r3, #16
 8009960:	4618      	mov	r0, r3
 8009962:	f00f fc49 	bl	80191f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3310      	adds	r3, #16
 800996a:	4618      	mov	r0, r3
 800996c:	f00f fcdc 	bl	8019328 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3314      	adds	r3, #20
 8009974:	4618      	mov	r0, r3
 8009976:	f00f fcc6 	bl	8019306 <sys_mbox_valid>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d034      	beq.n	80099ea <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009980:	e01d      	b.n	80099be <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f107 020e 	add.w	r2, r7, #14
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fb7a 	bl	8009084 <lwip_netconn_is_err_msg>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d113      	bne.n	80099be <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800999a:	6978      	ldr	r0, [r7, #20]
 800999c:	f7ff ffac 	bl	80098f8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d007      	beq.n	80099b8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f004 fc67 	bl	800e280 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80099b8:	6978      	ldr	r0, [r7, #20]
 80099ba:	f7ff ff53 	bl	8009864 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3314      	adds	r3, #20
 80099c2:	f107 0210 	add.w	r2, r7, #16
 80099c6:	4611      	mov	r1, r2
 80099c8:	4618      	mov	r0, r3
 80099ca:	f00f fc80 	bl	80192ce <sys_arch_mbox_tryfetch>
 80099ce:	4603      	mov	r3, r0
 80099d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d4:	d1d5      	bne.n	8009982 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	3314      	adds	r3, #20
 80099da:	4618      	mov	r0, r3
 80099dc:	f00f fc0c 	bl	80191f8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	3314      	adds	r3, #20
 80099e4:	4618      	mov	r0, r3
 80099e6:	f00f fc9f 	bl	8019328 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80099ea:	bf00      	nop
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b086      	sub	sp, #24
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	460b      	mov	r3, r1
 80099fe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d106      	bne.n	8009a18 <lwip_netconn_do_close_internal+0x24>
 8009a0a:	4ba1      	ldr	r3, [pc, #644]	; (8009c90 <lwip_netconn_do_close_internal+0x29c>)
 8009a0c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009a10:	49a0      	ldr	r1, [pc, #640]	; (8009c94 <lwip_netconn_do_close_internal+0x2a0>)
 8009a12:	48a1      	ldr	r0, [pc, #644]	; (8009c98 <lwip_netconn_do_close_internal+0x2a4>)
 8009a14:	f010 fc8c 	bl	801a330 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a20:	2b10      	cmp	r3, #16
 8009a22:	d006      	beq.n	8009a32 <lwip_netconn_do_close_internal+0x3e>
 8009a24:	4b9a      	ldr	r3, [pc, #616]	; (8009c90 <lwip_netconn_do_close_internal+0x29c>)
 8009a26:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009a2a:	499c      	ldr	r1, [pc, #624]	; (8009c9c <lwip_netconn_do_close_internal+0x2a8>)
 8009a2c:	489a      	ldr	r0, [pc, #616]	; (8009c98 <lwip_netconn_do_close_internal+0x2a4>)
 8009a2e:	f010 fc7f 	bl	801a330 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	785b      	ldrb	r3, [r3, #1]
 8009a36:	2b04      	cmp	r3, #4
 8009a38:	d006      	beq.n	8009a48 <lwip_netconn_do_close_internal+0x54>
 8009a3a:	4b95      	ldr	r3, [pc, #596]	; (8009c90 <lwip_netconn_do_close_internal+0x29c>)
 8009a3c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009a40:	4997      	ldr	r1, [pc, #604]	; (8009ca0 <lwip_netconn_do_close_internal+0x2ac>)
 8009a42:	4895      	ldr	r0, [pc, #596]	; (8009c98 <lwip_netconn_do_close_internal+0x2a4>)
 8009a44:	f010 fc74 	bl	801a330 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <lwip_netconn_do_close_internal+0x6a>
 8009a50:	4b8f      	ldr	r3, [pc, #572]	; (8009c90 <lwip_netconn_do_close_internal+0x29c>)
 8009a52:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009a56:	4993      	ldr	r1, [pc, #588]	; (8009ca4 <lwip_netconn_do_close_internal+0x2b0>)
 8009a58:	488f      	ldr	r0, [pc, #572]	; (8009c98 <lwip_netconn_do_close_internal+0x2a4>)
 8009a5a:	f010 fc69 	bl	801a330 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d106      	bne.n	8009a74 <lwip_netconn_do_close_internal+0x80>
 8009a66:	4b8a      	ldr	r3, [pc, #552]	; (8009c90 <lwip_netconn_do_close_internal+0x29c>)
 8009a68:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009a6c:	498e      	ldr	r1, [pc, #568]	; (8009ca8 <lwip_netconn_do_close_internal+0x2b4>)
 8009a6e:	488a      	ldr	r0, [pc, #552]	; (8009c98 <lwip_netconn_do_close_internal+0x2a4>)
 8009a70:	f010 fc5e 	bl	801a330 <iprintf>

  tpcb = conn->pcb.tcp;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7e:	7a1b      	ldrb	r3, [r3, #8]
 8009a80:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	f003 0301 	and.w	r3, r3, #1
 8009a88:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
 8009a8c:	f003 0302 	and.w	r3, r3, #2
 8009a90:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d102      	bne.n	8009a9e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	75bb      	strb	r3, [r7, #22]
 8009a9c:	e01f      	b.n	8009ade <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009a9e:	7bbb      	ldrb	r3, [r7, #14]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00e      	beq.n	8009ac2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009aa8:	2b05      	cmp	r3, #5
 8009aaa:	d007      	beq.n	8009abc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009ab0:	2b06      	cmp	r3, #6
 8009ab2:	d003      	beq.n	8009abc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009ab8:	2b08      	cmp	r3, #8
 8009aba:	d102      	bne.n	8009ac2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009abc:	2301      	movs	r3, #1
 8009abe:	75bb      	strb	r3, [r7, #22]
 8009ac0:	e00d      	b.n	8009ade <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009ac2:	7b7b      	ldrb	r3, [r7, #13]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d008      	beq.n	8009ada <lwip_netconn_do_close_internal+0xe6>
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	8b5b      	ldrh	r3, [r3, #26]
 8009acc:	f003 0310 	and.w	r3, r3, #16
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d002      	beq.n	8009ada <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	75bb      	strb	r3, [r7, #22]
 8009ad8:	e001      	b.n	8009ade <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009ada:	2300      	movs	r3, #0
 8009adc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009ade:	7dbb      	ldrb	r3, [r7, #22]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d003      	beq.n	8009aec <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	6938      	ldr	r0, [r7, #16]
 8009ae8:	f005 fca6 	bl	800f438 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	7d1b      	ldrb	r3, [r3, #20]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d104      	bne.n	8009afe <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009af4:	2100      	movs	r1, #0
 8009af6:	6938      	ldr	r0, [r7, #16]
 8009af8:	f005 fd16 	bl	800f528 <tcp_accept>
 8009afc:	e01d      	b.n	8009b3a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d007      	beq.n	8009b14 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009b04:	2100      	movs	r1, #0
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f005 fca8 	bl	800f45c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	6938      	ldr	r0, [r7, #16]
 8009b10:	f005 fd0a 	bl	800f528 <tcp_accept>
    }
    if (shut_tx) {
 8009b14:	7b7b      	ldrb	r3, [r7, #13]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6938      	ldr	r0, [r7, #16]
 8009b1e:	f005 fcbf 	bl	800f4a0 <tcp_sent>
    }
    if (shut_close) {
 8009b22:	7dbb      	ldrb	r3, [r7, #22]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6938      	ldr	r0, [r7, #16]
 8009b2e:	f005 fd13 	bl	800f558 <tcp_poll>
      tcp_err(tpcb, NULL);
 8009b32:	2100      	movs	r1, #0
 8009b34:	6938      	ldr	r0, [r7, #16]
 8009b36:	f005 fcd5 	bl	800f4e4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009b3a:	7dbb      	ldrb	r3, [r7, #22]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009b40:	6938      	ldr	r0, [r7, #16]
 8009b42:	f004 fa57 	bl	800dff4 <tcp_close>
 8009b46:	4603      	mov	r3, r0
 8009b48:	75fb      	strb	r3, [r7, #23]
 8009b4a:	e007      	b.n	8009b5c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	7b7a      	ldrb	r2, [r7, #13]
 8009b50:	4619      	mov	r1, r3
 8009b52:	6938      	ldr	r0, [r7, #16]
 8009b54:	f004 fa7a 	bl	800e04c <tcp_shutdown>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d102      	bne.n	8009b6a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8009b64:	2301      	movs	r3, #1
 8009b66:	757b      	strb	r3, [r7, #21]
 8009b68:	e016      	b.n	8009b98 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009b6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b72:	d10f      	bne.n	8009b94 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	7a5b      	ldrb	r3, [r3, #9]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10c      	bne.n	8009b98 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009b82:	7dbb      	ldrb	r3, [r7, #22]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d007      	beq.n	8009b98 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009b88:	6938      	ldr	r0, [r7, #16]
 8009b8a:	f004 fb79 	bl	800e280 <tcp_abort>
          err = ERR_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
 8009b92:	e001      	b.n	8009b98 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009b94:	2301      	movs	r3, #1
 8009b96:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009b98:	7d7b      	ldrb	r3, [r7, #21]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d044      	beq.n	8009c28 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	330c      	adds	r3, #12
 8009ba6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	7dfa      	ldrb	r2, [r7, #23]
 8009bae:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009bbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d129      	bne.n	8009c18 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8009bc4:	7dbb      	ldrb	r3, [r7, #22]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00c      	beq.n	8009be4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <lwip_netconn_do_close_internal+0x1f0>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2104      	movs	r1, #4
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
      }
      if (shut_rx) {
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d005      	beq.n	8009bfe <lwip_netconn_do_close_internal+0x20a>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
      }
      if (shut_tx) {
 8009bfe:	7b7b      	ldrb	r3, [r7, #13]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d009      	beq.n	8009c18 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d005      	beq.n	8009c18 <lwip_netconn_do_close_internal+0x224>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c10:	2200      	movs	r2, #0
 8009c12:	2102      	movs	r1, #2
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009c1e:	68b8      	ldr	r0, [r7, #8]
 8009c20:	f00f fbe8 	bl	80193f4 <sys_sem_signal>
    }
    return ERR_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e02e      	b.n	8009c86 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009c28:	7d7b      	ldrb	r3, [r7, #21]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d11e      	bne.n	8009c6c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	7d1b      	ldrb	r3, [r3, #20]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d106      	bne.n	8009c44 <lwip_netconn_do_close_internal+0x250>
 8009c36:	4b16      	ldr	r3, [pc, #88]	; (8009c90 <lwip_netconn_do_close_internal+0x29c>)
 8009c38:	f240 4241 	movw	r2, #1089	; 0x441
 8009c3c:	491b      	ldr	r1, [pc, #108]	; (8009cac <lwip_netconn_do_close_internal+0x2b8>)
 8009c3e:	4816      	ldr	r0, [pc, #88]	; (8009c98 <lwip_netconn_do_close_internal+0x2a4>)
 8009c40:	f010 fb76 	bl	801a330 <iprintf>
    if (shut_tx) {
 8009c44:	7b7b      	ldrb	r3, [r7, #13]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d003      	beq.n	8009c52 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009c4a:	4919      	ldr	r1, [pc, #100]	; (8009cb0 <lwip_netconn_do_close_internal+0x2bc>)
 8009c4c:	6938      	ldr	r0, [r7, #16]
 8009c4e:	f005 fc27 	bl	800f4a0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009c52:	2201      	movs	r2, #1
 8009c54:	4917      	ldr	r1, [pc, #92]	; (8009cb4 <lwip_netconn_do_close_internal+0x2c0>)
 8009c56:	6938      	ldr	r0, [r7, #16]
 8009c58:	f005 fc7e 	bl	800f558 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009c5c:	4916      	ldr	r1, [pc, #88]	; (8009cb8 <lwip_netconn_do_close_internal+0x2c4>)
 8009c5e:	6938      	ldr	r0, [r7, #16]
 8009c60:	f005 fc40 	bl	800f4e4 <tcp_err>
    tcp_arg(tpcb, conn);
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	6938      	ldr	r0, [r7, #16]
 8009c68:	f005 fbe6 	bl	800f438 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d106      	bne.n	8009c82 <lwip_netconn_do_close_internal+0x28e>
 8009c74:	4b06      	ldr	r3, [pc, #24]	; (8009c90 <lwip_netconn_do_close_internal+0x29c>)
 8009c76:	f240 424d 	movw	r2, #1101	; 0x44d
 8009c7a:	4910      	ldr	r1, [pc, #64]	; (8009cbc <lwip_netconn_do_close_internal+0x2c8>)
 8009c7c:	4806      	ldr	r0, [pc, #24]	; (8009c98 <lwip_netconn_do_close_internal+0x2a4>)
 8009c7e:	f010 fb57 	bl	801a330 <iprintf>
  return err;
 8009c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	0801ee54 	.word	0x0801ee54
 8009c94:	0801f128 	.word	0x0801f128
 8009c98:	0801ee98 	.word	0x0801ee98
 8009c9c:	0801f138 	.word	0x0801f138
 8009ca0:	0801f158 	.word	0x0801f158
 8009ca4:	0801f17c 	.word	0x0801f17c
 8009ca8:	0801efbc 	.word	0x0801efbc
 8009cac:	0801f190 	.word	0x0801f190
 8009cb0:	080093d1 	.word	0x080093d1
 8009cb4:	08009301 	.word	0x08009301
 8009cb8:	0800947d 	.word	0x0800947d
 8009cbc:	0801f1b4 	.word	0x0801f1b4

08009cc0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009cd4:	7afb      	ldrb	r3, [r7, #11]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00d      	beq.n	8009cf6 <lwip_netconn_do_delconn+0x36>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ce4:	2b10      	cmp	r3, #16
 8009ce6:	d006      	beq.n	8009cf6 <lwip_netconn_do_delconn+0x36>
 8009ce8:	4b61      	ldr	r3, [pc, #388]	; (8009e70 <lwip_netconn_do_delconn+0x1b0>)
 8009cea:	f240 425e 	movw	r2, #1118	; 0x45e
 8009cee:	4961      	ldr	r1, [pc, #388]	; (8009e74 <lwip_netconn_do_delconn+0x1b4>)
 8009cf0:	4861      	ldr	r0, [pc, #388]	; (8009e78 <lwip_netconn_do_delconn+0x1b8>)
 8009cf2:	f010 fb1d 	bl	801a330 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009cf6:	7afb      	ldrb	r3, [r7, #11]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d005      	beq.n	8009d08 <lwip_netconn_do_delconn+0x48>
 8009cfc:	7afb      	ldrb	r3, [r7, #11]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d002      	beq.n	8009d08 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8009d02:	7afb      	ldrb	r3, [r7, #11]
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d10a      	bne.n	8009d1e <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d10b      	bne.n	8009d26 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d103      	bne.n	8009d26 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	22fb      	movs	r2, #251	; 0xfb
 8009d22:	711a      	strb	r2, [r3, #4]
 8009d24:	e098      	b.n	8009e58 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009d26:	7afb      	ldrb	r3, [r7, #11]
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d10e      	bne.n	8009d4a <lwip_netconn_do_delconn+0x8a>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d34:	f003 0304 	and.w	r3, r3, #4
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d106      	bne.n	8009d4a <lwip_netconn_do_delconn+0x8a>
 8009d3c:	4b4c      	ldr	r3, [pc, #304]	; (8009e70 <lwip_netconn_do_delconn+0x1b0>)
 8009d3e:	f240 427a 	movw	r2, #1146	; 0x47a
 8009d42:	494e      	ldr	r1, [pc, #312]	; (8009e7c <lwip_netconn_do_delconn+0x1bc>)
 8009d44:	484c      	ldr	r0, [pc, #304]	; (8009e78 <lwip_netconn_do_delconn+0x1b8>)
 8009d46:	f010 faf3 	bl	801a330 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7ff fdcf 	bl	80098f8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d05f      	beq.n	8009e24 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d6e:	2b10      	cmp	r3, #16
 8009d70:	d00d      	beq.n	8009d8e <lwip_netconn_do_delconn+0xce>
 8009d72:	2b20      	cmp	r3, #32
 8009d74:	d151      	bne.n	8009e1a <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f00a fdfc 	bl	8014984 <udp_remove>
          break;
 8009d8c:	e046      	b.n	8009e1c <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d006      	beq.n	8009da6 <lwip_netconn_do_delconn+0xe6>
 8009d98:	4b35      	ldr	r3, [pc, #212]	; (8009e70 <lwip_netconn_do_delconn+0x1b0>)
 8009d9a:	f240 4294 	movw	r2, #1172	; 0x494
 8009d9e:	4938      	ldr	r1, [pc, #224]	; (8009e80 <lwip_netconn_do_delconn+0x1c0>)
 8009da0:	4835      	ldr	r0, [pc, #212]	; (8009e78 <lwip_netconn_do_delconn+0x1b8>)
 8009da2:	f010 fac5 	bl	801a330 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2204      	movs	r2, #4
 8009dac:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2203      	movs	r2, #3
 8009db2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7ff fe16 	bl	80099f4 <lwip_netconn_do_close_internal>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d04b      	beq.n	8009e66 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	785b      	ldrb	r3, [r3, #1]
 8009dd4:	2b04      	cmp	r3, #4
 8009dd6:	d006      	beq.n	8009de6 <lwip_netconn_do_delconn+0x126>
 8009dd8:	4b25      	ldr	r3, [pc, #148]	; (8009e70 <lwip_netconn_do_delconn+0x1b0>)
 8009dda:	f240 429a 	movw	r2, #1178	; 0x49a
 8009dde:	4929      	ldr	r1, [pc, #164]	; (8009e84 <lwip_netconn_do_delconn+0x1c4>)
 8009de0:	4825      	ldr	r0, [pc, #148]	; (8009e78 <lwip_netconn_do_delconn+0x1b8>)
 8009de2:	f010 faa5 	bl	801a330 <iprintf>
            UNLOCK_TCPIP_CORE();
 8009de6:	4828      	ldr	r0, [pc, #160]	; (8009e88 <lwip_netconn_do_delconn+0x1c8>)
 8009de8:	f00f fb75 	bl	80194d6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	330c      	adds	r3, #12
 8009df2:	2100      	movs	r1, #0
 8009df4:	4618      	mov	r0, r3
 8009df6:	f00f facc 	bl	8019392 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009dfa:	4823      	ldr	r0, [pc, #140]	; (8009e88 <lwip_netconn_do_delconn+0x1c8>)
 8009dfc:	f00f fb5c 	bl	80194b8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	785b      	ldrb	r3, [r3, #1]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d02d      	beq.n	8009e66 <lwip_netconn_do_delconn+0x1a6>
 8009e0a:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <lwip_netconn_do_delconn+0x1b0>)
 8009e0c:	f240 429e 	movw	r2, #1182	; 0x49e
 8009e10:	491c      	ldr	r1, [pc, #112]	; (8009e84 <lwip_netconn_do_delconn+0x1c4>)
 8009e12:	4819      	ldr	r0, [pc, #100]	; (8009e78 <lwip_netconn_do_delconn+0x1b8>)
 8009e14:	f010 fa8c 	bl	801a330 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009e18:	e025      	b.n	8009e66 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 8009e1a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2200      	movs	r2, #0
 8009e22:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d007      	beq.n	8009e3e <lwip_netconn_do_delconn+0x17e>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	6810      	ldr	r0, [r2, #0]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d007      	beq.n	8009e58 <lwip_netconn_do_delconn+0x198>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	6810      	ldr	r0, [r2, #0]
 8009e52:	2200      	movs	r2, #0
 8009e54:	2102      	movs	r1, #2
 8009e56:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f00f fae2 	bl	8019428 <sys_sem_valid>
 8009e64:	e000      	b.n	8009e68 <lwip_netconn_do_delconn+0x1a8>
          return;
 8009e66:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	0801ee54 	.word	0x0801ee54
 8009e74:	0801f1c4 	.word	0x0801f1c4
 8009e78:	0801ee98 	.word	0x0801ee98
 8009e7c:	0801f1d8 	.word	0x0801f1d8
 8009e80:	0801f1f8 	.word	0x0801f1f8
 8009e84:	0801f214 	.word	0x0801f214
 8009e88:	2002481c 	.word	0x2002481c

08009e8c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d025      	beq.n	8009eee <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d00e      	beq.n	8009ece <lwip_netconn_do_bind+0x42>
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d119      	bne.n	8009ee8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6858      	ldr	r0, [r3, #4]
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	6899      	ldr	r1, [r3, #8]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	899b      	ldrh	r3, [r3, #12]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	f00a fc48 	bl	8014758 <udp_bind>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]
        break;
 8009ecc:	e011      	b.n	8009ef2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6858      	ldr	r0, [r3, #4]
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	6899      	ldr	r1, [r3, #8]
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	899b      	ldrh	r3, [r3, #12]
 8009edc:	461a      	mov	r2, r3
 8009ede:	f004 f9db 	bl	800e298 <tcp_bind>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73fb      	strb	r3, [r7, #15]
        break;
 8009ee6:	e004      	b.n	8009ef2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009ee8:	23fa      	movs	r3, #250	; 0xfa
 8009eea:	73fb      	strb	r3, [r7, #15]
        break;
 8009eec:	e001      	b.n	8009ef2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009eee:	23fa      	movs	r3, #250	; 0xfa
 8009ef0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009ef8:	bf00      	nop
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d102      	bne.n	8009f22 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009f1c:	f06f 0305 	mvn.w	r3, #5
 8009f20:	e074      	b.n	800a00c <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	785b      	ldrb	r3, [r3, #1]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d006      	beq.n	8009f38 <lwip_netconn_do_connected+0x38>
 8009f2a:	4b3a      	ldr	r3, [pc, #232]	; (800a014 <lwip_netconn_do_connected+0x114>)
 8009f2c:	f240 5223 	movw	r2, #1315	; 0x523
 8009f30:	4939      	ldr	r1, [pc, #228]	; (800a018 <lwip_netconn_do_connected+0x118>)
 8009f32:	483a      	ldr	r0, [pc, #232]	; (800a01c <lwip_netconn_do_connected+0x11c>)
 8009f34:	f010 f9fc 	bl	801a330 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10d      	bne.n	8009f5c <lwip_netconn_do_connected+0x5c>
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <lwip_netconn_do_connected+0x5c>
 8009f4e:	4b31      	ldr	r3, [pc, #196]	; (800a014 <lwip_netconn_do_connected+0x114>)
 8009f50:	f240 5224 	movw	r2, #1316	; 0x524
 8009f54:	4932      	ldr	r1, [pc, #200]	; (800a020 <lwip_netconn_do_connected+0x120>)
 8009f56:	4831      	ldr	r0, [pc, #196]	; (800a01c <lwip_netconn_do_connected+0x11c>)
 8009f58:	f010 f9ea 	bl	801a330 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d008      	beq.n	8009f76 <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	79fa      	ldrb	r2, [r7, #7]
 8009f6a:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	330c      	adds	r3, #12
 8009f74:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f7e:	2b10      	cmp	r3, #16
 8009f80:	d106      	bne.n	8009f90 <lwip_netconn_do_connected+0x90>
 8009f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d102      	bne.n	8009f90 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 8009f8a:	69b8      	ldr	r0, [r7, #24]
 8009f8c:	f7ff fb50 	bl	8009630 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f96:	f003 0304 	and.w	r3, r3, #4
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	bf0c      	ite	eq
 8009f9e:	2301      	moveq	r3, #1
 8009fa0:	2300      	movne	r3, #0
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fac:	f023 0304 	bic.w	r3, r3, #4
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	f883 2020 	strb.w	r2, [r3, #32]
  LWIP_ASSERT("blocking connect state error",
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <lwip_netconn_do_connected+0xc4>
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10c      	bne.n	8009fde <lwip_netconn_do_connected+0xde>
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d102      	bne.n	8009fd0 <lwip_netconn_do_connected+0xd0>
 8009fca:	69fb      	ldr	r3, [r7, #28]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d006      	beq.n	8009fde <lwip_netconn_do_connected+0xde>
 8009fd0:	4b10      	ldr	r3, [pc, #64]	; (800a014 <lwip_netconn_do_connected+0x114>)
 8009fd2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8009fd6:	4913      	ldr	r1, [pc, #76]	; (800a024 <lwip_netconn_do_connected+0x124>)
 8009fd8:	4810      	ldr	r0, [pc, #64]	; (800a01c <lwip_netconn_do_connected+0x11c>)
 8009fda:	f010 f9a9 	bl	801a330 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d005      	beq.n	8009ffe <lwip_netconn_do_connected+0xfe>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	2102      	movs	r1, #2
 8009ffa:	69b8      	ldr	r0, [r7, #24]
 8009ffc:	4798      	blx	r3

  if (was_blocking) {
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 800a004:	69f8      	ldr	r0, [r7, #28]
 800a006:	f00f f9f5 	bl	80193f4 <sys_sem_signal>
  }
  return ERR_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3720      	adds	r7, #32
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	0801ee54 	.word	0x0801ee54
 800a018:	0801f21c 	.word	0x0801f21c
 800a01c:	0801ee98 	.word	0x0801ee98
 800a020:	0801f23c 	.word	0x0801f23c
 800a024:	0801f27c 	.word	0x0801f27c

0800a028 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a03e:	23f1      	movs	r3, #241	; 0xf1
 800a040:	75fb      	strb	r3, [r7, #23]
 800a042:	e0a0      	b.n	800a186 <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a04e:	2b10      	cmp	r3, #16
 800a050:	d00f      	beq.n	800a072 <lwip_netconn_do_connect+0x4a>
 800a052:	2b20      	cmp	r3, #32
 800a054:	f040 808c 	bne.w	800a170 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6858      	ldr	r0, [r3, #4]
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	6899      	ldr	r1, [r3, #8]
 800a062:	693b      	ldr	r3, [r7, #16]
 800a064:	899b      	ldrh	r3, [r3, #12]
 800a066:	461a      	mov	r2, r3
 800a068:	f00a fbfe 	bl	8014868 <udp_connect>
 800a06c:	4603      	mov	r3, r0
 800a06e:	75fb      	strb	r3, [r7, #23]
        break;
 800a070:	e089      	b.n	800a186 <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	785b      	ldrb	r3, [r3, #1]
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d102      	bne.n	800a082 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800a07c:	23f7      	movs	r3, #247	; 0xf7
 800a07e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a080:	e080      	b.n	800a184 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	785b      	ldrb	r3, [r3, #1]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a08c:	23f6      	movs	r3, #246	; 0xf6
 800a08e:	75fb      	strb	r3, [r7, #23]
        break;
 800a090:	e078      	b.n	800a184 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4618      	mov	r0, r3
 800a098:	f7ff faca 	bl	8009630 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6858      	ldr	r0, [r3, #4]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6899      	ldr	r1, [r3, #8]
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	899a      	ldrh	r2, [r3, #12]
 800a0aa:	4b3b      	ldr	r3, [pc, #236]	; (800a198 <lwip_netconn_do_connect+0x170>)
 800a0ac:	f004 fa7c 	bl	800e5a8 <tcp_connect>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a0b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d163      	bne.n	800a184 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bf14      	ite	ne
 800a0cc:	2301      	movne	r3, #1
 800a0ce:	2300      	moveq	r3, #0
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2203      	movs	r2, #3
 800a0da:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a0dc:	7bfb      	ldrb	r3, [r7, #15]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00b      	beq.n	800a0fa <lwip_netconn_do_connect+0xd2>
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0204 	orr.w	r2, r2, #4
 800a0f2:	b2d2      	uxtb	r2, r2
 800a0f4:	f883 2020 	strb.w	r2, [r3, #32]
 800a0f8:	e00a      	b.n	800a110 <lwip_netconn_do_connect+0xe8>
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f022 0204 	bic.w	r2, r2, #4
 800a10a:	b2d2      	uxtb	r2, r2
 800a10c:	f883 2020 	strb.w	r2, [r3, #32]
            if (non_blocking) {
 800a110:	7bfb      	ldrb	r3, [r7, #15]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 800a116:	23fb      	movs	r3, #251	; 0xfb
 800a118:	75fb      	strb	r3, [r7, #23]
        break;
 800a11a:	e033      	b.n	800a184 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	693a      	ldr	r2, [r7, #16]
 800a122:	625a      	str	r2, [r3, #36]	; 0x24
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	785b      	ldrb	r3, [r3, #1]
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d006      	beq.n	800a13c <lwip_netconn_do_connect+0x114>
 800a12e:	4b1b      	ldr	r3, [pc, #108]	; (800a19c <lwip_netconn_do_connect+0x174>)
 800a130:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a134:	491a      	ldr	r1, [pc, #104]	; (800a1a0 <lwip_netconn_do_connect+0x178>)
 800a136:	481b      	ldr	r0, [pc, #108]	; (800a1a4 <lwip_netconn_do_connect+0x17c>)
 800a138:	f010 f8fa 	bl	801a330 <iprintf>
              UNLOCK_TCPIP_CORE();
 800a13c:	481a      	ldr	r0, [pc, #104]	; (800a1a8 <lwip_netconn_do_connect+0x180>)
 800a13e:	f00f f9ca 	bl	80194d6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	330c      	adds	r3, #12
 800a148:	2100      	movs	r1, #0
 800a14a:	4618      	mov	r0, r3
 800a14c:	f00f f921 	bl	8019392 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a150:	4815      	ldr	r0, [pc, #84]	; (800a1a8 <lwip_netconn_do_connect+0x180>)
 800a152:	f00f f9b1 	bl	80194b8 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	785b      	ldrb	r3, [r3, #1]
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	d116      	bne.n	800a18e <lwip_netconn_do_connect+0x166>
 800a160:	4b0e      	ldr	r3, [pc, #56]	; (800a19c <lwip_netconn_do_connect+0x174>)
 800a162:	f240 5274 	movw	r2, #1396	; 0x574
 800a166:	490e      	ldr	r1, [pc, #56]	; (800a1a0 <lwip_netconn_do_connect+0x178>)
 800a168:	480e      	ldr	r0, [pc, #56]	; (800a1a4 <lwip_netconn_do_connect+0x17c>)
 800a16a:	f010 f8e1 	bl	801a330 <iprintf>
              return;
 800a16e:	e00e      	b.n	800a18e <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a170:	4b0a      	ldr	r3, [pc, #40]	; (800a19c <lwip_netconn_do_connect+0x174>)
 800a172:	f240 527d 	movw	r2, #1405	; 0x57d
 800a176:	490d      	ldr	r1, [pc, #52]	; (800a1ac <lwip_netconn_do_connect+0x184>)
 800a178:	480a      	ldr	r0, [pc, #40]	; (800a1a4 <lwip_netconn_do_connect+0x17c>)
 800a17a:	f010 f8d9 	bl	801a330 <iprintf>
 800a17e:	23fa      	movs	r3, #250	; 0xfa
 800a180:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a182:	e000      	b.n	800a186 <lwip_netconn_do_connect+0x15e>
        break;
 800a184:	bf00      	nop
    }
  }
  msg->err = err;
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	7dfa      	ldrb	r2, [r7, #23]
 800a18a:	711a      	strb	r2, [r3, #4]
 800a18c:	e000      	b.n	800a190 <lwip_netconn_do_connect+0x168>
              return;
 800a18e:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	08009f01 	.word	0x08009f01
 800a19c:	0801ee54 	.word	0x0801ee54
 800a1a0:	0801f214 	.word	0x0801f214
 800a1a4:	0801ee98 	.word	0x0801ee98
 800a1a8:	2002481c 	.word	0x2002481c
 800a1ac:	0801f29c 	.word	0x0801f29c

0800a1b0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d022      	beq.n	800a212 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1d6:	2b10      	cmp	r3, #16
 800a1d8:	d11b      	bne.n	800a212 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a1da:	693b      	ldr	r3, [r7, #16]
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1e6:	d202      	bcs.n	800a1ee <lwip_netconn_do_recv+0x3e>
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	e001      	b.n	800a1f2 <lwip_netconn_do_recv+0x42>
 800a1ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1f2:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	89fa      	ldrh	r2, [r7, #14]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	4618      	mov	r0, r3
 800a200:	f004 f93c 	bl	800e47c <tcp_recved>
        remaining -= recved;
 800a204:	89fb      	ldrh	r3, [r7, #14]
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e6      	bne.n	800a1e0 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a212:	bf00      	nop
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <lwip_netconn_do_writemore+0x24>
 800a232:	4b98      	ldr	r3, [pc, #608]	; (800a494 <lwip_netconn_do_writemore+0x278>)
 800a234:	f240 6273 	movw	r2, #1651	; 0x673
 800a238:	4997      	ldr	r1, [pc, #604]	; (800a498 <lwip_netconn_do_writemore+0x27c>)
 800a23a:	4898      	ldr	r0, [pc, #608]	; (800a49c <lwip_netconn_do_writemore+0x280>)
 800a23c:	f010 f878 	bl	801a330 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d006      	beq.n	800a256 <lwip_netconn_do_writemore+0x3a>
 800a248:	4b92      	ldr	r3, [pc, #584]	; (800a494 <lwip_netconn_do_writemore+0x278>)
 800a24a:	f240 6274 	movw	r2, #1652	; 0x674
 800a24e:	4994      	ldr	r1, [pc, #592]	; (800a4a0 <lwip_netconn_do_writemore+0x284>)
 800a250:	4892      	ldr	r0, [pc, #584]	; (800a49c <lwip_netconn_do_writemore+0x280>)
 800a252:	f010 f86d 	bl	801a330 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d106      	bne.n	800a26c <lwip_netconn_do_writemore+0x50>
 800a25e:	4b8d      	ldr	r3, [pc, #564]	; (800a494 <lwip_netconn_do_writemore+0x278>)
 800a260:	f240 6275 	movw	r2, #1653	; 0x675
 800a264:	498f      	ldr	r1, [pc, #572]	; (800a4a4 <lwip_netconn_do_writemore+0x288>)
 800a266:	488d      	ldr	r0, [pc, #564]	; (800a49c <lwip_netconn_do_writemore+0x280>)
 800a268:	f010 f862 	bl	801a330 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d106      	bne.n	800a282 <lwip_netconn_do_writemore+0x66>
 800a274:	4b87      	ldr	r3, [pc, #540]	; (800a494 <lwip_netconn_do_writemore+0x278>)
 800a276:	f240 6276 	movw	r2, #1654	; 0x676
 800a27a:	498b      	ldr	r1, [pc, #556]	; (800a4a8 <lwip_netconn_do_writemore+0x28c>)
 800a27c:	4887      	ldr	r0, [pc, #540]	; (800a49c <lwip_netconn_do_writemore+0x280>)
 800a27e:	f010 f857 	bl	801a330 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	699a      	ldr	r2, [r3, #24]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d306      	bcc.n	800a2a0 <lwip_netconn_do_writemore+0x84>
 800a292:	4b80      	ldr	r3, [pc, #512]	; (800a494 <lwip_netconn_do_writemore+0x278>)
 800a294:	f240 6277 	movw	r2, #1655	; 0x677
 800a298:	4984      	ldr	r1, [pc, #528]	; (800a4ac <lwip_netconn_do_writemore+0x290>)
 800a29a:	4880      	ldr	r0, [pc, #512]	; (800a49c <lwip_netconn_do_writemore+0x280>)
 800a29c:	f010 f848 	bl	801a330 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a4:	899b      	ldrh	r3, [r3, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d106      	bne.n	800a2b8 <lwip_netconn_do_writemore+0x9c>
 800a2aa:	4b7a      	ldr	r3, [pc, #488]	; (800a494 <lwip_netconn_do_writemore+0x278>)
 800a2ac:	f240 6279 	movw	r2, #1657	; 0x679
 800a2b0:	497f      	ldr	r1, [pc, #508]	; (800a4b0 <lwip_netconn_do_writemore+0x294>)
 800a2b2:	487a      	ldr	r0, [pc, #488]	; (800a49c <lwip_netconn_do_writemore+0x280>)
 800a2b4:	f010 f83c 	bl	801a330 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2bc:	7f1b      	ldrb	r3, [r3, #28]
 800a2be:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d104      	bne.n	800a2d8 <lwip_netconn_do_writemore+0xbc>
 800a2ce:	7ebb      	ldrb	r3, [r7, #26]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d001      	beq.n	800a2dc <lwip_netconn_do_writemore+0xc0>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e000      	b.n	800a2de <lwip_netconn_do_writemore+0xc2>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	685a      	ldr	r2, [r3, #4]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a30a:	d307      	bcc.n	800a31c <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 800a30c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a310:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a312:	7ebb      	ldrb	r3, [r7, #26]
 800a314:	f043 0302 	orr.w	r3, r3, #2
 800a318:	76bb      	strb	r3, [r7, #26]
 800a31a:	e001      	b.n	800a320 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a328:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a32a:	89fa      	ldrh	r2, [r7, #14]
 800a32c:	8bbb      	ldrh	r3, [r7, #28]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d216      	bcs.n	800a360 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 800a332:	89fb      	ldrh	r3, [r7, #14]
 800a334:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a336:	7e3b      	ldrb	r3, [r7, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00d      	beq.n	800a358 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 800a33c:	8bbb      	ldrh	r3, [r7, #28]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10e      	bne.n	800a360 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d102      	bne.n	800a352 <lwip_netconn_do_writemore+0x136>
 800a34c:	f06f 0306 	mvn.w	r3, #6
 800a350:	e000      	b.n	800a354 <lwip_netconn_do_writemore+0x138>
 800a352:	2300      	movs	r3, #0
 800a354:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a356:	e07d      	b.n	800a454 <lwip_netconn_do_writemore+0x238>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a358:	7ebb      	ldrb	r3, [r7, #26]
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a364:	691a      	ldr	r2, [r3, #16]
 800a366:	8bbb      	ldrh	r3, [r7, #28]
 800a368:	441a      	add	r2, r3
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d906      	bls.n	800a384 <lwip_netconn_do_writemore+0x168>
 800a376:	4b47      	ldr	r3, [pc, #284]	; (800a494 <lwip_netconn_do_writemore+0x278>)
 800a378:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a37c:	494d      	ldr	r1, [pc, #308]	; (800a4b4 <lwip_netconn_do_writemore+0x298>)
 800a37e:	4847      	ldr	r0, [pc, #284]	; (800a49c <lwip_netconn_do_writemore+0x280>)
 800a380:	f00f ffd6 	bl	801a330 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a384:	8bbb      	ldrh	r3, [r7, #28]
 800a386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d103      	bne.n	800a396 <lwip_netconn_do_writemore+0x17a>
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a394:	d209      	bcs.n	800a3aa <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a39a:	8bba      	ldrh	r2, [r7, #28]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d10b      	bne.n	800a3b8 <lwip_netconn_do_writemore+0x19c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	899b      	ldrh	r3, [r3, #12]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d906      	bls.n	800a3b8 <lwip_netconn_do_writemore+0x19c>
        write_more = 1;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a3ae:	7ebb      	ldrb	r3, [r7, #26]
 800a3b0:	f043 0302 	orr.w	r3, r3, #2
 800a3b4:	76bb      	strb	r3, [r7, #26]
 800a3b6:	e001      	b.n	800a3bc <lwip_netconn_do_writemore+0x1a0>
      } else {
        write_more = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6858      	ldr	r0, [r3, #4]
 800a3c0:	7ebb      	ldrb	r3, [r7, #26]
 800a3c2:	8bba      	ldrh	r2, [r7, #28]
 800a3c4:	6979      	ldr	r1, [r7, #20]
 800a3c6:	f007 ff75 	bl	80122b4 <tcp_write>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a3ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d12c      	bne.n	800a430 <lwip_netconn_do_writemore+0x214>
        conn->current_msg->msg.w.offset += len;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3da:	6999      	ldr	r1, [r3, #24]
 800a3dc:	8bba      	ldrh	r2, [r7, #28]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	440a      	add	r2, r1
 800a3e4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	6919      	ldr	r1, [r3, #16]
 800a3ec:	8bba      	ldrh	r2, [r7, #28]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	440a      	add	r2, r1
 800a3f4:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	691a      	ldr	r2, [r3, #16]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	429a      	cmp	r2, r3
 800a406:	d113      	bne.n	800a430 <lwip_netconn_do_writemore+0x214>
          conn->current_msg->msg.w.vector_cnt--;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	899a      	ldrh	r2, [r3, #12]
 800a40e:	3a01      	subs	r2, #1
 800a410:	b292      	uxth	r2, r2
 800a412:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	899b      	ldrh	r3, [r3, #12]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d008      	beq.n	800a430 <lwip_netconn_do_writemore+0x214>
            conn->current_msg->msg.w.vector++;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	3208      	adds	r2, #8
 800a426:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	2200      	movs	r2, #0
 800a42e:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a430:	7e7b      	ldrb	r3, [r7, #25]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d004      	beq.n	800a440 <lwip_netconn_do_writemore+0x224>
 800a436:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f43f af50 	beq.w	800a2e0 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a440:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <lwip_netconn_do_writemore+0x236>
 800a448:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a44c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a450:	d149      	bne.n	800a4e6 <lwip_netconn_do_writemore+0x2ca>
err_mem:
 800a452:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a454:	7e3b      	ldrb	r3, [r7, #24]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d02e      	beq.n	800a4b8 <lwip_netconn_do_writemore+0x29c>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45e:	699a      	ldr	r2, [r3, #24]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	695b      	ldr	r3, [r3, #20]
 800a466:	429a      	cmp	r2, r3
 800a468:	d226      	bcs.n	800a4b8 <lwip_netconn_do_writemore+0x29c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d005      	beq.n	800a47e <lwip_netconn_do_writemore+0x262>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	2200      	movs	r2, #0
 800a478:	2103      	movs	r1, #3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a484:	f043 0310 	orr.w	r3, r3, #16
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f883 2020 	strb.w	r2, [r3, #32]
 800a490:	e029      	b.n	800a4e6 <lwip_netconn_do_writemore+0x2ca>
 800a492:	bf00      	nop
 800a494:	0801ee54 	.word	0x0801ee54
 800a498:	0801efac 	.word	0x0801efac
 800a49c:	0801ee98 	.word	0x0801ee98
 800a4a0:	0801f2b4 	.word	0x0801f2b4
 800a4a4:	0801efbc 	.word	0x0801efbc
 800a4a8:	0801f2d4 	.word	0x0801f2d4
 800a4ac:	0801f2ec 	.word	0x0801f2ec
 800a4b0:	0801f32c 	.word	0x0801f32c
 800a4b4:	0801f354 	.word	0x0801f354
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a4c0:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a4c4:	d305      	bcc.n	800a4d2 <lwip_netconn_do_writemore+0x2b6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d909      	bls.n	800a4e6 <lwip_netconn_do_writemore+0x2ca>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d005      	beq.n	800a4e6 <lwip_netconn_do_writemore+0x2ca>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4de:	2200      	movs	r2, #0
 800a4e0:	2103      	movs	r1, #3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a4e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d11d      	bne.n	800a52a <lwip_netconn_do_writemore+0x30e>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f2:	699a      	ldr	r2, [r3, #24]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	695b      	ldr	r3, [r3, #20]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d002      	beq.n	800a504 <lwip_netconn_do_writemore+0x2e8>
 800a4fe:	7e3b      	ldrb	r3, [r7, #24]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d001      	beq.n	800a508 <lwip_netconn_do_writemore+0x2ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a504:	2301      	movs	r3, #1
 800a506:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	4618      	mov	r0, r3
 800a50e:	f008 fcbb 	bl	8012e88 <tcp_output>
 800a512:	4603      	mov	r3, r0
 800a514:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a516:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a51a:	f113 0f04 	cmn.w	r3, #4
 800a51e:	d12c      	bne.n	800a57a <lwip_netconn_do_writemore+0x35e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a520:	7b3b      	ldrb	r3, [r7, #12]
 800a522:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a524:	2301      	movs	r3, #1
 800a526:	76fb      	strb	r3, [r7, #27]
 800a528:	e027      	b.n	800a57a <lwip_netconn_do_writemore+0x35e>
      }
    } else if (err == ERR_MEM) {
 800a52a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a52e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a532:	d120      	bne.n	800a576 <lwip_netconn_do_writemore+0x35a>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	4618      	mov	r0, r3
 800a53a:	f008 fca5 	bl	8012e88 <tcp_output>
 800a53e:	4603      	mov	r3, r0
 800a540:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a542:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a546:	f113 0f04 	cmn.w	r3, #4
 800a54a:	d104      	bne.n	800a556 <lwip_netconn_do_writemore+0x33a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a54c:	7b7b      	ldrb	r3, [r7, #13]
 800a54e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a550:	2301      	movs	r3, #1
 800a552:	76fb      	strb	r3, [r7, #27]
 800a554:	e011      	b.n	800a57a <lwip_netconn_do_writemore+0x35e>
      } else if (dontblock) {
 800a556:	7e3b      	ldrb	r3, [r7, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00e      	beq.n	800a57a <lwip_netconn_do_writemore+0x35e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <lwip_netconn_do_writemore+0x350>
 800a566:	f06f 0306 	mvn.w	r3, #6
 800a56a:	e000      	b.n	800a56e <lwip_netconn_do_writemore+0x352>
 800a56c:	2300      	movs	r3, #0
 800a56e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a570:	2301      	movs	r3, #1
 800a572:	76fb      	strb	r3, [r7, #27]
 800a574:	e001      	b.n	800a57a <lwip_netconn_do_writemore+0x35e>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a576:	2301      	movs	r3, #1
 800a578:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a57a:	7efb      	ldrb	r3, [r7, #27]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d015      	beq.n	800a5ac <lwip_netconn_do_writemore+0x390>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	330c      	adds	r3, #12
 800a588:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58e:	7ffa      	ldrb	r2, [r7, #31]
 800a590:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d006      	beq.n	800a5b2 <lwip_netconn_do_writemore+0x396>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a5a4:	68b8      	ldr	r0, [r7, #8]
 800a5a6:	f00e ff25 	bl	80193f4 <sys_sem_signal>
 800a5aa:	e002      	b.n	800a5b2 <lwip_netconn_do_writemore+0x396>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a5ac:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b0:	e000      	b.n	800a5b4 <lwip_netconn_do_writemore+0x398>
  }
#endif
  return ERR_OK;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3720      	adds	r7, #32
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe fcac 	bl	8008f2a <netconn_err>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a5d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d166      	bne.n	800a6ac <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5e8:	2b10      	cmp	r3, #16
 800a5ea:	d15d      	bne.n	800a6a8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	785b      	ldrb	r3, [r3, #1]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a5f6:	23fb      	movs	r3, #251	; 0xfb
 800a5f8:	73fb      	strb	r3, [r7, #15]
 800a5fa:	e057      	b.n	800a6ac <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d04d      	beq.n	800a6a2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2201      	movs	r2, #1
 800a60c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	d006      	beq.n	800a626 <lwip_netconn_do_write+0x6a>
 800a618:	4b28      	ldr	r3, [pc, #160]	; (800a6bc <lwip_netconn_do_write+0x100>)
 800a61a:	f240 7223 	movw	r2, #1827	; 0x723
 800a61e:	4928      	ldr	r1, [pc, #160]	; (800a6c0 <lwip_netconn_do_write+0x104>)
 800a620:	4828      	ldr	r0, [pc, #160]	; (800a6c4 <lwip_netconn_do_write+0x108>)
 800a622:	f00f fe85 	bl	801a330 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d106      	bne.n	800a63c <lwip_netconn_do_write+0x80>
 800a62e:	4b23      	ldr	r3, [pc, #140]	; (800a6bc <lwip_netconn_do_write+0x100>)
 800a630:	f240 7224 	movw	r2, #1828	; 0x724
 800a634:	4924      	ldr	r1, [pc, #144]	; (800a6c8 <lwip_netconn_do_write+0x10c>)
 800a636:	4823      	ldr	r0, [pc, #140]	; (800a6c4 <lwip_netconn_do_write+0x108>)
 800a638:	f00f fe7a 	bl	801a330 <iprintf>
        msg->conn->current_msg = msg;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68ba      	ldr	r2, [r7, #8]
 800a642:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2100      	movs	r1, #0
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff fde6 	bl	800a21c <lwip_netconn_do_writemore>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d02e      	beq.n	800a6b4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	785b      	ldrb	r3, [r3, #1]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d006      	beq.n	800a66e <lwip_netconn_do_write+0xb2>
 800a660:	4b16      	ldr	r3, [pc, #88]	; (800a6bc <lwip_netconn_do_write+0x100>)
 800a662:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a666:	4919      	ldr	r1, [pc, #100]	; (800a6cc <lwip_netconn_do_write+0x110>)
 800a668:	4816      	ldr	r0, [pc, #88]	; (800a6c4 <lwip_netconn_do_write+0x108>)
 800a66a:	f00f fe61 	bl	801a330 <iprintf>
          UNLOCK_TCPIP_CORE();
 800a66e:	4818      	ldr	r0, [pc, #96]	; (800a6d0 <lwip_netconn_do_write+0x114>)
 800a670:	f00e ff31 	bl	80194d6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	330c      	adds	r3, #12
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f00e fe88 	bl	8019392 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a682:	4813      	ldr	r0, [pc, #76]	; (800a6d0 <lwip_netconn_do_write+0x114>)
 800a684:	f00e ff18 	bl	80194b8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d110      	bne.n	800a6b4 <lwip_netconn_do_write+0xf8>
 800a692:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <lwip_netconn_do_write+0x100>)
 800a694:	f240 722c 	movw	r2, #1836	; 0x72c
 800a698:	490c      	ldr	r1, [pc, #48]	; (800a6cc <lwip_netconn_do_write+0x110>)
 800a69a:	480a      	ldr	r0, [pc, #40]	; (800a6c4 <lwip_netconn_do_write+0x108>)
 800a69c:	f00f fe48 	bl	801a330 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a6a0:	e008      	b.n	800a6b4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a6a2:	23f5      	movs	r3, #245	; 0xf5
 800a6a4:	73fb      	strb	r3, [r7, #15]
 800a6a6:	e001      	b.n	800a6ac <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a6a8:	23fa      	movs	r3, #250	; 0xfa
 800a6aa:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	7bfa      	ldrb	r2, [r7, #15]
 800a6b0:	711a      	strb	r2, [r3, #4]
 800a6b2:	e000      	b.n	800a6b6 <lwip_netconn_do_write+0xfa>
        return;
 800a6b4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	0801ee54 	.word	0x0801ee54
 800a6c0:	0801f1f8 	.word	0x0801f1f8
 800a6c4:	0801ee98 	.word	0x0801ee98
 800a6c8:	0801f380 	.word	0x0801f380
 800a6cc:	0801f214 	.word	0x0801f214
 800a6d0:	2002481c 	.word	0x2002481c

0800a6d4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	785b      	ldrb	r3, [r3, #1]
 800a6e6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d069      	beq.n	800a7c6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	781b      	ldrb	r3, [r3, #0]
 800a6f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a6fc:	2b10      	cmp	r3, #16
 800a6fe:	d162      	bne.n	800a7c6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a704:	2b03      	cmp	r3, #3
 800a706:	d002      	beq.n	800a70e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a708:	7afb      	ldrb	r3, [r7, #11]
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d05b      	beq.n	800a7c6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a70e:	7afb      	ldrb	r3, [r7, #11]
 800a710:	2b03      	cmp	r3, #3
 800a712:	d103      	bne.n	800a71c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	22f5      	movs	r2, #245	; 0xf5
 800a718:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a71a:	e059      	b.n	800a7d0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a71c:	7afb      	ldrb	r3, [r7, #11]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d103      	bne.n	800a72a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	22fb      	movs	r2, #251	; 0xfb
 800a726:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a728:	e052      	b.n	800a7d0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	7a1b      	ldrb	r3, [r3, #8]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d004      	beq.n	800a740 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff f8dc 	bl	80098f8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a746:	2b00      	cmp	r3, #0
 800a748:	d006      	beq.n	800a758 <lwip_netconn_do_close+0x84>
 800a74a:	4b23      	ldr	r3, [pc, #140]	; (800a7d8 <lwip_netconn_do_close+0x104>)
 800a74c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a750:	4922      	ldr	r1, [pc, #136]	; (800a7dc <lwip_netconn_do_close+0x108>)
 800a752:	4823      	ldr	r0, [pc, #140]	; (800a7e0 <lwip_netconn_do_close+0x10c>)
 800a754:	f00f fdec 	bl	801a330 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2204      	movs	r2, #4
 800a75e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2100      	movs	r1, #0
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff f940 	bl	80099f4 <lwip_netconn_do_close_internal>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d029      	beq.n	800a7ce <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	785b      	ldrb	r3, [r3, #1]
 800a780:	2b04      	cmp	r3, #4
 800a782:	d006      	beq.n	800a792 <lwip_netconn_do_close+0xbe>
 800a784:	4b14      	ldr	r3, [pc, #80]	; (800a7d8 <lwip_netconn_do_close+0x104>)
 800a786:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a78a:	4916      	ldr	r1, [pc, #88]	; (800a7e4 <lwip_netconn_do_close+0x110>)
 800a78c:	4814      	ldr	r0, [pc, #80]	; (800a7e0 <lwip_netconn_do_close+0x10c>)
 800a78e:	f00f fdcf 	bl	801a330 <iprintf>
        UNLOCK_TCPIP_CORE();
 800a792:	4815      	ldr	r0, [pc, #84]	; (800a7e8 <lwip_netconn_do_close+0x114>)
 800a794:	f00e fe9f 	bl	80194d6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	330c      	adds	r3, #12
 800a79e:	2100      	movs	r1, #0
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f00e fdf6 	bl	8019392 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a7a6:	4810      	ldr	r0, [pc, #64]	; (800a7e8 <lwip_netconn_do_close+0x114>)
 800a7a8:	f00e fe86 	bl	80194b8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	785b      	ldrb	r3, [r3, #1]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00b      	beq.n	800a7ce <lwip_netconn_do_close+0xfa>
 800a7b6:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <lwip_netconn_do_close+0x104>)
 800a7b8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a7bc:	4909      	ldr	r1, [pc, #36]	; (800a7e4 <lwip_netconn_do_close+0x110>)
 800a7be:	4808      	ldr	r0, [pc, #32]	; (800a7e0 <lwip_netconn_do_close+0x10c>)
 800a7c0:	f00f fdb6 	bl	801a330 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a7c4:	e003      	b.n	800a7ce <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	22f5      	movs	r2, #245	; 0xf5
 800a7ca:	711a      	strb	r2, [r3, #4]
 800a7cc:	e000      	b.n	800a7d0 <lwip_netconn_do_close+0xfc>
      return;
 800a7ce:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	0801ee54 	.word	0x0801ee54
 800a7dc:	0801f1f8 	.word	0x0801f1f8
 800a7e0:	0801ee98 	.word	0x0801ee98
 800a7e4:	0801f214 	.word	0x0801f214
 800a7e8:	2002481c 	.word	0x2002481c

0800a7ec <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d104      	bne.n	800a80c <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	22fa      	movs	r2, #250	; 0xfa
 800a808:	701a      	strb	r2, [r3, #0]
 800a80a:	e008      	b.n	800a81e <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	4618      	mov	r0, r3
 800a824:	f00e fde6 	bl	80193f4 <sys_sem_signal>
}
 800a828:	bf00      	nop
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}

0800a830 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 800a830:	b590      	push	{r4, r7, lr}
 800a832:	b087      	sub	sp, #28
 800a834:	af02      	add	r7, sp, #8
 800a836:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 800a83c:	2300      	movs	r3, #0
 800a83e:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6818      	ldr	r0, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6859      	ldr	r1, [r3, #4]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	68dc      	ldr	r4, [r3, #12]
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	4a15      	ldr	r2, [pc, #84]	; (800a8a8 <lwip_netconn_do_gethostbyname+0x78>)
 800a854:	f001 f9c8 	bl	800bbe8 <dns_gethostbyname_addrtype>
 800a858:	4603      	mov	r3, r0
 800a85a:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	f993 3000 	ldrsb.w	r3, [r3]
 800a864:	f113 0f05 	cmn.w	r3, #5
 800a868:	d119      	bne.n	800a89e <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 800a86a:	4810      	ldr	r0, [pc, #64]	; (800a8ac <lwip_netconn_do_gethostbyname+0x7c>)
 800a86c:	f00e fe33 	bl	80194d6 <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	2100      	movs	r1, #0
 800a876:	4618      	mov	r0, r3
 800a878:	f00e fd8b 	bl	8019392 <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 800a87c:	480b      	ldr	r0, [pc, #44]	; (800a8ac <lwip_netconn_do_gethostbyname+0x7c>)
 800a87e:	f00e fe1b 	bl	80194b8 <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	f993 3000 	ldrsb.w	r3, [r3]
 800a88a:	f113 0f05 	cmn.w	r3, #5
 800a88e:	d106      	bne.n	800a89e <lwip_netconn_do_gethostbyname+0x6e>
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <lwip_netconn_do_gethostbyname+0x80>)
 800a892:	f640 0271 	movw	r2, #2161	; 0x871
 800a896:	4907      	ldr	r1, [pc, #28]	; (800a8b4 <lwip_netconn_do_gethostbyname+0x84>)
 800a898:	4807      	ldr	r0, [pc, #28]	; (800a8b8 <lwip_netconn_do_gethostbyname+0x88>)
 800a89a:	f00f fd49 	bl	801a330 <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a89e:	bf00      	nop
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd90      	pop	{r4, r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0800a7ed 	.word	0x0800a7ed
 800a8ac:	2002481c 	.word	0x2002481c
 800a8b0:	0801ee54 	.word	0x0801ee54
 800a8b4:	0801f3ac 	.word	0x0801f3ac
 800a8b8:	0801ee98 	.word	0x0801ee98

0800a8bc <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b082      	sub	sp, #8
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d013      	beq.n	800a8f2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00b      	beq.n	800a8ea <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f002 fd56 	bl	800d388 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	605a      	str	r2, [r3, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	685a      	ldr	r2, [r3, #4]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	2006      	movs	r0, #6
 800a8ee:	f001 fe9b 	bl	800c628 <memp_free>
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a906:	f009 fb77 	bl	8013ff8 <sys_timeouts_sleeptime>
 800a90a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d10b      	bne.n	800a92c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a914:	4813      	ldr	r0, [pc, #76]	; (800a964 <tcpip_timeouts_mbox_fetch+0x68>)
 800a916:	f00e fdde 	bl	80194d6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a91a:	2200      	movs	r2, #0
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f00e fc96 	bl	8019250 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a924:	480f      	ldr	r0, [pc, #60]	; (800a964 <tcpip_timeouts_mbox_fetch+0x68>)
 800a926:	f00e fdc7 	bl	80194b8 <sys_mutex_lock>
    return;
 800a92a:	e018      	b.n	800a95e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d102      	bne.n	800a938 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a932:	f009 fb27 	bl	8013f84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a936:	e7e6      	b.n	800a906 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a938:	480a      	ldr	r0, [pc, #40]	; (800a964 <tcpip_timeouts_mbox_fetch+0x68>)
 800a93a:	f00e fdcc 	bl	80194d6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f00e fc84 	bl	8019250 <sys_arch_mbox_fetch>
 800a948:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a94a:	4806      	ldr	r0, [pc, #24]	; (800a964 <tcpip_timeouts_mbox_fetch+0x68>)
 800a94c:	f00e fdb4 	bl	80194b8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a956:	d102      	bne.n	800a95e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a958:	f009 fb14 	bl	8013f84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a95c:	e7d3      	b.n	800a906 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	2002481c 	.word	0x2002481c

0800a968 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a970:	4810      	ldr	r0, [pc, #64]	; (800a9b4 <tcpip_thread+0x4c>)
 800a972:	f00e fda1 	bl	80194b8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a976:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <tcpip_thread+0x50>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a97e:	4b0e      	ldr	r3, [pc, #56]	; (800a9b8 <tcpip_thread+0x50>)
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a0e      	ldr	r2, [pc, #56]	; (800a9bc <tcpip_thread+0x54>)
 800a984:	6812      	ldr	r2, [r2, #0]
 800a986:	4610      	mov	r0, r2
 800a988:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a98a:	f107 030c 	add.w	r3, r7, #12
 800a98e:	4619      	mov	r1, r3
 800a990:	480b      	ldr	r0, [pc, #44]	; (800a9c0 <tcpip_thread+0x58>)
 800a992:	f7ff ffb3 	bl	800a8fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d106      	bne.n	800a9aa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <tcpip_thread+0x5c>)
 800a99e:	2291      	movs	r2, #145	; 0x91
 800a9a0:	4909      	ldr	r1, [pc, #36]	; (800a9c8 <tcpip_thread+0x60>)
 800a9a2:	480a      	ldr	r0, [pc, #40]	; (800a9cc <tcpip_thread+0x64>)
 800a9a4:	f00f fcc4 	bl	801a330 <iprintf>
      continue;
 800a9a8:	e003      	b.n	800a9b2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f000 f80f 	bl	800a9d0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a9b2:	e7ea      	b.n	800a98a <tcpip_thread+0x22>
 800a9b4:	2002481c 	.word	0x2002481c
 800a9b8:	20020fbc 	.word	0x20020fbc
 800a9bc:	20020fc0 	.word	0x20020fc0
 800a9c0:	20020fc4 	.word	0x20020fc4
 800a9c4:	0801f3d4 	.word	0x0801f3d4
 800a9c8:	0801f404 	.word	0x0801f404
 800a9cc:	0801f424 	.word	0x0801f424

0800a9d0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	781b      	ldrb	r3, [r3, #0]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d026      	beq.n	800aa2e <tcpip_thread_handle_msg+0x5e>
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	dc2b      	bgt.n	800aa3c <tcpip_thread_handle_msg+0x6c>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <tcpip_thread_handle_msg+0x1e>
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d015      	beq.n	800aa18 <tcpip_thread_handle_msg+0x48>
 800a9ec:	e026      	b.n	800aa3c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	6850      	ldr	r0, [r2, #4]
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	6892      	ldr	r2, [r2, #8]
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4798      	blx	r3
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d004      	beq.n	800aa0e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f002 fcbd 	bl	800d388 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	2009      	movs	r0, #9
 800aa12:	f001 fe09 	bl	800c628 <memp_free>
      break;
 800aa16:	e018      	b.n	800aa4a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6892      	ldr	r2, [r2, #8]
 800aa20:	4610      	mov	r0, r2
 800aa22:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	2008      	movs	r0, #8
 800aa28:	f001 fdfe 	bl	800c628 <memp_free>
      break;
 800aa2c:	e00d      	b.n	800aa4a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	6892      	ldr	r2, [r2, #8]
 800aa36:	4610      	mov	r0, r2
 800aa38:	4798      	blx	r3
      break;
 800aa3a:	e006      	b.n	800aa4a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aa3c:	4b05      	ldr	r3, [pc, #20]	; (800aa54 <tcpip_thread_handle_msg+0x84>)
 800aa3e:	22cf      	movs	r2, #207	; 0xcf
 800aa40:	4905      	ldr	r1, [pc, #20]	; (800aa58 <tcpip_thread_handle_msg+0x88>)
 800aa42:	4806      	ldr	r0, [pc, #24]	; (800aa5c <tcpip_thread_handle_msg+0x8c>)
 800aa44:	f00f fc74 	bl	801a330 <iprintf>
      break;
 800aa48:	bf00      	nop
  }
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	0801f3d4 	.word	0x0801f3d4
 800aa58:	0801f404 	.word	0x0801f404
 800aa5c:	0801f424 	.word	0x0801f424

0800aa60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aa6c:	481a      	ldr	r0, [pc, #104]	; (800aad8 <tcpip_inpkt+0x78>)
 800aa6e:	f00e fc4a 	bl	8019306 <sys_mbox_valid>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d105      	bne.n	800aa84 <tcpip_inpkt+0x24>
 800aa78:	4b18      	ldr	r3, [pc, #96]	; (800aadc <tcpip_inpkt+0x7c>)
 800aa7a:	22fc      	movs	r2, #252	; 0xfc
 800aa7c:	4918      	ldr	r1, [pc, #96]	; (800aae0 <tcpip_inpkt+0x80>)
 800aa7e:	4819      	ldr	r0, [pc, #100]	; (800aae4 <tcpip_inpkt+0x84>)
 800aa80:	f00f fc56 	bl	801a330 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800aa84:	2009      	movs	r0, #9
 800aa86:	f001 fd7d 	bl	800c584 <memp_malloc>
 800aa8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800aa92:	f04f 33ff 	mov.w	r3, #4294967295
 800aa96:	e01a      	b.n	800aace <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aab0:	6979      	ldr	r1, [r7, #20]
 800aab2:	4809      	ldr	r0, [pc, #36]	; (800aad8 <tcpip_inpkt+0x78>)
 800aab4:	f00e fbb2 	bl	801921c <sys_mbox_trypost>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aabe:	6979      	ldr	r1, [r7, #20]
 800aac0:	2009      	movs	r0, #9
 800aac2:	f001 fdb1 	bl	800c628 <memp_free>
    return ERR_MEM;
 800aac6:	f04f 33ff 	mov.w	r3, #4294967295
 800aaca:	e000      	b.n	800aace <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800aacc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20020fc4 	.word	0x20020fc4
 800aadc:	0801f3d4 	.word	0x0801f3d4
 800aae0:	0801f44c 	.word	0x0801f44c
 800aae4:	0801f424 	.word	0x0801f424

0800aae8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aaf8:	f003 0318 	and.w	r3, r3, #24
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d006      	beq.n	800ab0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ab00:	4a08      	ldr	r2, [pc, #32]	; (800ab24 <tcpip_input+0x3c>)
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff ffab 	bl	800aa60 <tcpip_inpkt>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	e005      	b.n	800ab1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ab0e:	4a06      	ldr	r2, [pc, #24]	; (800ab28 <tcpip_input+0x40>)
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7ff ffa4 	bl	800aa60 <tcpip_inpkt>
 800ab18:	4603      	mov	r3, r0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	08019009 	.word	0x08019009
 800ab28:	08017b69 	.word	0x08017b69

0800ab2c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b084      	sub	sp, #16
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ab36:	4819      	ldr	r0, [pc, #100]	; (800ab9c <tcpip_try_callback+0x70>)
 800ab38:	f00e fbe5 	bl	8019306 <sys_mbox_valid>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d106      	bne.n	800ab50 <tcpip_try_callback+0x24>
 800ab42:	4b17      	ldr	r3, [pc, #92]	; (800aba0 <tcpip_try_callback+0x74>)
 800ab44:	f240 125d 	movw	r2, #349	; 0x15d
 800ab48:	4916      	ldr	r1, [pc, #88]	; (800aba4 <tcpip_try_callback+0x78>)
 800ab4a:	4817      	ldr	r0, [pc, #92]	; (800aba8 <tcpip_try_callback+0x7c>)
 800ab4c:	f00f fbf0 	bl	801a330 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ab50:	2008      	movs	r0, #8
 800ab52:	f001 fd17 	bl	800c584 <memp_malloc>
 800ab56:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ab5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab62:	e017      	b.n	800ab94 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ab76:	68f9      	ldr	r1, [r7, #12]
 800ab78:	4808      	ldr	r0, [pc, #32]	; (800ab9c <tcpip_try_callback+0x70>)
 800ab7a:	f00e fb4f 	bl	801921c <sys_mbox_trypost>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d006      	beq.n	800ab92 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ab84:	68f9      	ldr	r1, [r7, #12]
 800ab86:	2008      	movs	r0, #8
 800ab88:	f001 fd4e 	bl	800c628 <memp_free>
    return ERR_MEM;
 800ab8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab90:	e000      	b.n	800ab94 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20020fc4 	.word	0x20020fc4
 800aba0:	0801f3d4 	.word	0x0801f3d4
 800aba4:	0801f44c 	.word	0x0801f44c
 800aba8:	0801f424 	.word	0x0801f424

0800abac <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60f8      	str	r0, [r7, #12]
 800abb4:	60b9      	str	r1, [r7, #8]
 800abb6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800abb8:	4806      	ldr	r0, [pc, #24]	; (800abd4 <tcpip_send_msg_wait_sem+0x28>)
 800abba:	f00e fc7d 	bl	80194b8 <sys_mutex_lock>
  fn(apimsg);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68b8      	ldr	r0, [r7, #8]
 800abc2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800abc4:	4803      	ldr	r0, [pc, #12]	; (800abd4 <tcpip_send_msg_wait_sem+0x28>)
 800abc6:	f00e fc86 	bl	80194d6 <sys_mutex_unlock>
  return ERR_OK;
 800abca:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	2002481c 	.word	0x2002481c

0800abd8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b084      	sub	sp, #16
 800abdc:	af02      	add	r7, sp, #8
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800abe2:	f001 f845 	bl	800bc70 <lwip_init>

  tcpip_init_done = initfunc;
 800abe6:	4a17      	ldr	r2, [pc, #92]	; (800ac44 <tcpip_init+0x6c>)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800abec:	4a16      	ldr	r2, [pc, #88]	; (800ac48 <tcpip_init+0x70>)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800abf2:	2106      	movs	r1, #6
 800abf4:	4815      	ldr	r0, [pc, #84]	; (800ac4c <tcpip_init+0x74>)
 800abf6:	f00e fadd 	bl	80191b4 <sys_mbox_new>
 800abfa:	4603      	mov	r3, r0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d006      	beq.n	800ac0e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ac00:	4b13      	ldr	r3, [pc, #76]	; (800ac50 <tcpip_init+0x78>)
 800ac02:	f240 2261 	movw	r2, #609	; 0x261
 800ac06:	4913      	ldr	r1, [pc, #76]	; (800ac54 <tcpip_init+0x7c>)
 800ac08:	4813      	ldr	r0, [pc, #76]	; (800ac58 <tcpip_init+0x80>)
 800ac0a:	f00f fb91 	bl	801a330 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ac0e:	4813      	ldr	r0, [pc, #76]	; (800ac5c <tcpip_init+0x84>)
 800ac10:	f00e fc36 	bl	8019480 <sys_mutex_new>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d006      	beq.n	800ac28 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <tcpip_init+0x78>)
 800ac1c:	f240 2265 	movw	r2, #613	; 0x265
 800ac20:	490f      	ldr	r1, [pc, #60]	; (800ac60 <tcpip_init+0x88>)
 800ac22:	480d      	ldr	r0, [pc, #52]	; (800ac58 <tcpip_init+0x80>)
 800ac24:	f00f fb84 	bl	801a330 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ac28:	2300      	movs	r3, #0
 800ac2a:	9300      	str	r3, [sp, #0]
 800ac2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac30:	2200      	movs	r2, #0
 800ac32:	490c      	ldr	r1, [pc, #48]	; (800ac64 <tcpip_init+0x8c>)
 800ac34:	480c      	ldr	r0, [pc, #48]	; (800ac68 <tcpip_init+0x90>)
 800ac36:	f00e fc5b 	bl	80194f0 <sys_thread_new>
}
 800ac3a:	bf00      	nop
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20020fbc 	.word	0x20020fbc
 800ac48:	20020fc0 	.word	0x20020fc0
 800ac4c:	20020fc4 	.word	0x20020fc4
 800ac50:	0801f3d4 	.word	0x0801f3d4
 800ac54:	0801f45c 	.word	0x0801f45c
 800ac58:	0801f424 	.word	0x0801f424
 800ac5c:	2002481c 	.word	0x2002481c
 800ac60:	0801f480 	.word	0x0801f480
 800ac64:	0800a969 	.word	0x0800a969
 800ac68:	0801f4a4 	.word	0x0801f4a4

0800ac6c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	4603      	mov	r3, r0
 800ac74:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac76:	88fb      	ldrh	r3, [r7, #6]
 800ac78:	021b      	lsls	r3, r3, #8
 800ac7a:	b21a      	sxth	r2, r3
 800ac7c:	88fb      	ldrh	r3, [r7, #6]
 800ac7e:	0a1b      	lsrs	r3, r3, #8
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	b21b      	sxth	r3, r3
 800ac84:	4313      	orrs	r3, r2
 800ac86:	b21b      	sxth	r3, r3
 800ac88:	b29b      	uxth	r3, r3
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	061a      	lsls	r2, r3, #24
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	021b      	lsls	r3, r3, #8
 800aca6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acaa:	431a      	orrs	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	0a1b      	lsrs	r3, r3, #8
 800acb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800acb4:	431a      	orrs	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	0e1b      	lsrs	r3, r3, #24
 800acba:	4313      	orrs	r3, r2
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 800acc8:	b480      	push	{r7}
 800acca:	b087      	sub	sp, #28
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	60fa      	str	r2, [r7, #12]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	1c5a      	adds	r2, r3, #1
 800ace2:	60ba      	str	r2, [r7, #8]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 800ace8:	7dfa      	ldrb	r2, [r7, #23]
 800acea:	7dbb      	ldrb	r3, [r7, #22]
 800acec:	429a      	cmp	r2, r3
 800acee:	d016      	beq.n	800ad1e <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 800acf0:	7dfb      	ldrb	r3, [r7, #23]
 800acf2:	f043 0320 	orr.w	r3, r3, #32
 800acf6:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800acf8:	7d7b      	ldrb	r3, [r7, #21]
 800acfa:	2b60      	cmp	r3, #96	; 0x60
 800acfc:	d90c      	bls.n	800ad18 <lwip_strnicmp+0x50>
 800acfe:	7d7b      	ldrb	r3, [r7, #21]
 800ad00:	2b7a      	cmp	r3, #122	; 0x7a
 800ad02:	d809      	bhi.n	800ad18 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800ad04:	7dbb      	ldrb	r3, [r7, #22]
 800ad06:	f043 0320 	orr.w	r3, r3, #32
 800ad0a:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 800ad0c:	7d7a      	ldrb	r2, [r7, #21]
 800ad0e:	7d3b      	ldrb	r3, [r7, #20]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d003      	beq.n	800ad1c <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800ad14:	2301      	movs	r3, #1
 800ad16:	e00c      	b.n	800ad32 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e00a      	b.n	800ad32 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800ad1c:	bf00      	nop
      }
    }
    len--;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <lwip_strnicmp+0x68>
 800ad2a:	7dfb      	ldrb	r3, [r7, #23]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1d1      	bne.n	800acd4 <lwip_strnicmp+0xc>
  return 0;
 800ad30:	2300      	movs	r3, #0
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	371c      	adds	r7, #28
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800ad42:	bf00      	nop
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	6039      	str	r1, [r7, #0]
 800ad56:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800ad58:	79fb      	ldrb	r3, [r7, #7]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d80f      	bhi.n	800ad7e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d006      	beq.n	800ad72 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800ad64:	79fb      	ldrb	r3, [r7, #7]
 800ad66:	4909      	ldr	r1, [pc, #36]	; (800ad8c <dns_setserver+0x40>)
 800ad68:	683a      	ldr	r2, [r7, #0]
 800ad6a:	6812      	ldr	r2, [r2, #0]
 800ad6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800ad70:	e005      	b.n	800ad7e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800ad72:	79fb      	ldrb	r3, [r7, #7]
 800ad74:	4905      	ldr	r1, [pc, #20]	; (800ad8c <dns_setserver+0x40>)
 800ad76:	4a06      	ldr	r2, [pc, #24]	; (800ad90 <dns_setserver+0x44>)
 800ad78:	6812      	ldr	r2, [r2, #0]
 800ad7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ad7e:	bf00      	nop
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
 800ad8a:	bf00      	nop
 800ad8c:	2002144c 	.word	0x2002144c
 800ad90:	08022488 	.word	0x08022488

0800ad94 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800ad98:	f000 fc54 	bl	800b644 <dns_check_entries>
}
 800ad9c:	bf00      	nop
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800adaa:	2300      	movs	r3, #0
 800adac:	73fb      	strb	r3, [r7, #15]
 800adae:	e02e      	b.n	800ae0e <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800adb0:	7bfa      	ldrb	r2, [r7, #15]
 800adb2:	491b      	ldr	r1, [pc, #108]	; (800ae20 <dns_lookup+0x80>)
 800adb4:	4613      	mov	r3, r2
 800adb6:	011b      	lsls	r3, r3, #4
 800adb8:	4413      	add	r3, r2
 800adba:	011b      	lsls	r3, r3, #4
 800adbc:	440b      	add	r3, r1
 800adbe:	330a      	adds	r3, #10
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d120      	bne.n	800ae08 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800adc6:	7bfa      	ldrb	r2, [r7, #15]
 800adc8:	4613      	mov	r3, r2
 800adca:	011b      	lsls	r3, r3, #4
 800adcc:	4413      	add	r3, r2
 800adce:	011b      	lsls	r3, r3, #4
 800add0:	3310      	adds	r3, #16
 800add2:	4a13      	ldr	r2, [pc, #76]	; (800ae20 <dns_lookup+0x80>)
 800add4:	4413      	add	r3, r2
 800add6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f7ff ff73 	bl	800acc8 <lwip_strnicmp>
 800ade2:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10f      	bne.n	800ae08 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d00a      	beq.n	800ae04 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800adee:	7bfa      	ldrb	r2, [r7, #15]
 800adf0:	490b      	ldr	r1, [pc, #44]	; (800ae20 <dns_lookup+0x80>)
 800adf2:	4613      	mov	r3, r2
 800adf4:	011b      	lsls	r3, r3, #4
 800adf6:	4413      	add	r3, r2
 800adf8:	011b      	lsls	r3, r3, #4
 800adfa:	440b      	add	r3, r1
 800adfc:	3304      	adds	r3, #4
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	e007      	b.n	800ae18 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	73fb      	strb	r3, [r7, #15]
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	2b03      	cmp	r3, #3
 800ae12:	d9cd      	bls.n	800adb0 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 800ae14:	f06f 030f 	mvn.w	r3, #15
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3710      	adds	r7, #16
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20020fdc 	.word	0x20020fdc

0800ae24 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 800ae36:	8b7b      	ldrh	r3, [r7, #26]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f002 fe86 	bl	800db4c <pbuf_try_get_at>
 800ae40:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	db04      	blt.n	800ae52 <dns_compare_name+0x2e>
 800ae48:	8b7b      	ldrh	r3, [r7, #26]
 800ae4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d102      	bne.n	800ae58 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 800ae52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae56:	e06c      	b.n	800af32 <dns_compare_name+0x10e>
    }
    response_offset++;
 800ae58:	8b7b      	ldrh	r3, [r7, #26]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae64:	2bc0      	cmp	r3, #192	; 0xc0
 800ae66:	d144      	bne.n	800aef2 <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 800ae68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae6c:	e061      	b.n	800af32 <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 800ae6e:	8b7b      	ldrh	r3, [r7, #26]
 800ae70:	4619      	mov	r1, r3
 800ae72:	68b8      	ldr	r0, [r7, #8]
 800ae74:	f002 fe6a 	bl	800db4c <pbuf_try_get_at>
 800ae78:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	da02      	bge.n	800ae86 <dns_compare_name+0x62>
          return 0xFFFF;
 800ae80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae84:	e055      	b.n	800af32 <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	74fb      	strb	r3, [r7, #19]
 800ae8c:	7cfb      	ldrb	r3, [r7, #19]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	4a2a      	ldr	r2, [pc, #168]	; (800af3c <dns_compare_name+0x118>)
 800ae92:	4413      	add	r3, r2
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	f003 0303 	and.w	r3, r3, #3
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d103      	bne.n	800aea6 <dns_compare_name+0x82>
 800ae9e:	7cfb      	ldrb	r3, [r7, #19]
 800aea0:	f103 0220 	add.w	r2, r3, #32
 800aea4:	e000      	b.n	800aea8 <dns_compare_name+0x84>
 800aea6:	7cfa      	ldrb	r2, [r7, #19]
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	74bb      	strb	r3, [r7, #18]
 800aeac:	7cbb      	ldrb	r3, [r7, #18]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	4922      	ldr	r1, [pc, #136]	; (800af3c <dns_compare_name+0x118>)
 800aeb2:	440b      	add	r3, r1
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	f003 0303 	and.w	r3, r3, #3
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d102      	bne.n	800aec4 <dns_compare_name+0xa0>
 800aebe:	7cbb      	ldrb	r3, [r7, #18]
 800aec0:	3320      	adds	r3, #32
 800aec2:	e000      	b.n	800aec6 <dns_compare_name+0xa2>
 800aec4:	7cbb      	ldrb	r3, [r7, #18]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d002      	beq.n	800aed0 <dns_compare_name+0xac>
          return 0xFFFF;
 800aeca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aece:	e030      	b.n	800af32 <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 800aed0:	8b7b      	ldrh	r3, [r7, #26]
 800aed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d102      	bne.n	800aee0 <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 800aeda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aede:	e028      	b.n	800af32 <dns_compare_name+0x10e>
        }
        response_offset++;
 800aee0:	8b7b      	ldrh	r3, [r7, #26]
 800aee2:	3301      	adds	r3, #1
 800aee4:	837b      	strh	r3, [r7, #26]
        ++query;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3301      	adds	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
        --n;
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dcba      	bgt.n	800ae6e <dns_compare_name+0x4a>
      }
      ++query;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3301      	adds	r3, #1
 800aefc:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 800aefe:	8b7b      	ldrh	r3, [r7, #26]
 800af00:	4619      	mov	r1, r3
 800af02:	68b8      	ldr	r0, [r7, #8]
 800af04:	f002 fe22 	bl	800db4c <pbuf_try_get_at>
 800af08:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	da02      	bge.n	800af16 <dns_compare_name+0xf2>
      return 0xFFFF;
 800af10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af14:	e00d      	b.n	800af32 <dns_compare_name+0x10e>
    }
  } while (n != 0);
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d18c      	bne.n	800ae36 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 800af1c:	8b7b      	ldrh	r3, [r7, #26]
 800af1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af22:	4293      	cmp	r3, r2
 800af24:	d102      	bne.n	800af2c <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 800af26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af2a:	e002      	b.n	800af32 <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 800af2c:	8b7b      	ldrh	r3, [r7, #26]
 800af2e:	3301      	adds	r3, #1
 800af30:	b29b      	uxth	r3, r3
}
 800af32:	4618      	mov	r0, r3
 800af34:	3720      	adds	r7, #32
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	080224a8 	.word	0x080224a8

0800af40 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 800af4c:	887b      	ldrh	r3, [r7, #2]
 800af4e:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 800af50:	89fb      	ldrh	r3, [r7, #14]
 800af52:	1c5a      	adds	r2, r3, #1
 800af54:	81fa      	strh	r2, [r7, #14]
 800af56:	4619      	mov	r1, r3
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f002 fdf7 	bl	800db4c <pbuf_try_get_at>
 800af5e:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	db02      	blt.n	800af6c <dns_skip_name+0x2c>
 800af66:	89fb      	ldrh	r3, [r7, #14]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d102      	bne.n	800af72 <dns_skip_name+0x32>
      return 0xFFFF;
 800af6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af70:	e02f      	b.n	800afd2 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af78:	2bc0      	cmp	r3, #192	; 0xc0
 800af7a:	d01e      	beq.n	800afba <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 800af7c:	89fa      	ldrh	r2, [r7, #14]
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4413      	add	r3, r2
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	8912      	ldrh	r2, [r2, #8]
 800af86:	4293      	cmp	r3, r2
 800af88:	db02      	blt.n	800af90 <dns_skip_name+0x50>
        return 0xFFFF;
 800af8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af8e:	e020      	b.n	800afd2 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	b29a      	uxth	r2, r3
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	4413      	add	r3, r2
 800af98:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 800af9a:	89fb      	ldrh	r3, [r7, #14]
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f002 fdd4 	bl	800db4c <pbuf_try_get_at>
 800afa4:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	da02      	bge.n	800afb2 <dns_skip_name+0x72>
      return 0xFFFF;
 800afac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afb0:	e00f      	b.n	800afd2 <dns_skip_name+0x92>
    }
  } while (n != 0);
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1cb      	bne.n	800af50 <dns_skip_name+0x10>
 800afb8:	e000      	b.n	800afbc <dns_skip_name+0x7c>
      break;
 800afba:	bf00      	nop

  if (offset == 0xFFFF) {
 800afbc:	89fb      	ldrh	r3, [r7, #14]
 800afbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d102      	bne.n	800afcc <dns_skip_name+0x8c>
    return 0xFFFF;
 800afc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800afca:	e002      	b.n	800afd2 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 800afcc:	89fb      	ldrh	r3, [r7, #14]
 800afce:	3301      	adds	r3, #1
 800afd0:	b29b      	uxth	r3, r3
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
	...

0800afdc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b090      	sub	sp, #64	; 0x40
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800afe6:	79fa      	ldrb	r2, [r7, #7]
 800afe8:	4613      	mov	r3, r2
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	4413      	add	r3, r2
 800afee:	011b      	lsls	r3, r3, #4
 800aff0:	4a6c      	ldr	r2, [pc, #432]	; (800b1a4 <dns_send+0x1c8>)
 800aff2:	4413      	add	r3, r2
 800aff4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800aff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff8:	7adb      	ldrb	r3, [r3, #11]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d906      	bls.n	800b00c <dns_send+0x30>
 800affe:	4b6a      	ldr	r3, [pc, #424]	; (800b1a8 <dns_send+0x1cc>)
 800b000:	f240 22fa 	movw	r2, #762	; 0x2fa
 800b004:	4969      	ldr	r1, [pc, #420]	; (800b1ac <dns_send+0x1d0>)
 800b006:	486a      	ldr	r0, [pc, #424]	; (800b1b0 <dns_send+0x1d4>)
 800b008:	f00f f992 	bl	801a330 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800b00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00e:	7adb      	ldrb	r3, [r3, #11]
 800b010:	461a      	mov	r2, r3
 800b012:	4b68      	ldr	r3, [pc, #416]	; (800b1b4 <dns_send+0x1d8>)
 800b014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d109      	bne.n	800b030 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800b01c:	79fb      	ldrb	r3, [r7, #7]
 800b01e:	2100      	movs	r1, #0
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f959 	bl	800b2d8 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800b026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b028:	2200      	movs	r2, #0
 800b02a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	e0b4      	b.n	800b19a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800b030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b032:	3310      	adds	r3, #16
 800b034:	4618      	mov	r0, r3
 800b036:	f7f5 f8eb 	bl	8000210 <strlen>
 800b03a:	4603      	mov	r3, r0
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	3312      	adds	r3, #18
 800b040:	b29b      	uxth	r3, r3
 800b042:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b046:	4619      	mov	r1, r3
 800b048:	2036      	movs	r0, #54	; 0x36
 800b04a:	f001 feb9 	bl	800cdc0 <pbuf_alloc>
 800b04e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	2b00      	cmp	r3, #0
 800b054:	f000 8095 	beq.w	800b182 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800b058:	f107 0310 	add.w	r3, r7, #16
 800b05c:	220c      	movs	r2, #12
 800b05e:	2100      	movs	r1, #0
 800b060:	4618      	mov	r0, r3
 800b062:	f00e fae3 	bl	801962c <memset>
    hdr.id = lwip_htons(entry->txid);
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	891b      	ldrh	r3, [r3, #8]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fdfe 	bl	800ac6c <lwip_htons>
 800b070:	4603      	mov	r3, r0
 800b072:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800b074:	2301      	movs	r3, #1
 800b076:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800b078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b07c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800b07e:	f107 0310 	add.w	r3, r7, #16
 800b082:	220c      	movs	r2, #12
 800b084:	4619      	mov	r1, r3
 800b086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b088:	f002 fc32 	bl	800d8f0 <pbuf_take>
    hostname = entry->name;
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	3310      	adds	r3, #16
 800b090:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800b092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b094:	3b01      	subs	r3, #1
 800b096:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800b098:	230c      	movs	r3, #12
 800b09a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	3301      	adds	r3, #1
 800b0a0:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800b0ac:	e007      	b.n	800b0be <dns_send+0xe2>
        ++n;
 800b0ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b0c4:	d003      	beq.n	800b0ce <dns_send+0xf2>
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1ef      	bne.n	800b0ae <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800b0ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800b0d6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b0d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0dc:	4413      	add	r3, r2
 800b0de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	dc53      	bgt.n	800b18e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800b0e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b0ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b0f0:	f002 fd4e 	bl	800db90 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800b0f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b0fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b100:	f002 fc88 	bl	800da14 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800b104:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b108:	b29a      	uxth	r2, r3
 800b10a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b10c:	4413      	add	r3, r2
 800b10e:	b29b      	uxth	r3, r3
 800b110:	3301      	adds	r3, #1
 800b112:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800b114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1bf      	bne.n	800b09c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800b11c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b11e:	2200      	movs	r2, #0
 800b120:	4619      	mov	r1, r3
 800b122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b124:	f002 fd34 	bl	800db90 <pbuf_put_at>
    query_idx++;
 800b128:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b12a:	3301      	adds	r3, #1
 800b12c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800b12e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b132:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800b134:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b138:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800b13a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b13c:	f107 010c 	add.w	r1, r7, #12
 800b140:	2204      	movs	r2, #4
 800b142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b144:	f002 fc66 	bl	800da14 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800b148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14a:	7bdb      	ldrb	r3, [r3, #15]
 800b14c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800b150:	2335      	movs	r3, #53	; 0x35
 800b152:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	7adb      	ldrb	r3, [r3, #11]
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4a16      	ldr	r2, [pc, #88]	; (800b1b4 <dns_send+0x1d8>)
 800b15c:	4413      	add	r3, r2
 800b15e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800b160:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b164:	4a14      	ldr	r2, [pc, #80]	; (800b1b8 <dns_send+0x1dc>)
 800b166:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b16a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b16c:	69fa      	ldr	r2, [r7, #28]
 800b16e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b170:	f009 f93c 	bl	80143ec <udp_sendto>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800b17a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b17c:	f002 f904 	bl	800d388 <pbuf_free>
 800b180:	e002      	b.n	800b188 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800b182:	23ff      	movs	r3, #255	; 0xff
 800b184:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800b188:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b18c:	e005      	b.n	800b19a <dns_send+0x1be>
        goto overflow_return;
 800b18e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800b190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b192:	f002 f8f9 	bl	800d388 <pbuf_free>
  return ERR_VAL;
 800b196:	f06f 0305 	mvn.w	r3, #5
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3740      	adds	r7, #64	; 0x40
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20020fdc 	.word	0x20020fdc
 800b1a8:	0801f4b4 	.word	0x0801f4b4
 800b1ac:	0801f4e4 	.word	0x0801f4e4
 800b1b0:	0801f4fc 	.word	0x0801f4fc
 800b1b4:	2002144c 	.word	0x2002144c
 800b1b8:	20020fc8 	.word	0x20020fc8

0800b1bc <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b084      	sub	sp, #16
 800b1c0:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800b1c2:	202e      	movs	r0, #46	; 0x2e
 800b1c4:	f009 fc37 	bl	8014a36 <udp_new_ip_type>
 800b1c8:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	e026      	b.n	800b222 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 800b1d4:	f00f f93a 	bl	801a44c <rand>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1e2:	d308      	bcc.n	800b1f6 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800b1e4:	88fb      	ldrh	r3, [r7, #6]
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	4910      	ldr	r1, [pc, #64]	; (800b22c <dns_alloc_random_port+0x70>)
 800b1ea:	68b8      	ldr	r0, [r7, #8]
 800b1ec:	f009 fab4 	bl	8014758 <udp_bind>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]
 800b1f4:	e001      	b.n	800b1fa <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 800b1f6:	23f8      	movs	r3, #248	; 0xf8
 800b1f8:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 800b1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1fe:	f113 0f08 	cmn.w	r3, #8
 800b202:	d0e7      	beq.n	800b1d4 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 800b204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d004      	beq.n	800b216 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 800b20c:	68b8      	ldr	r0, [r7, #8]
 800b20e:	f009 fbb9 	bl	8014984 <udp_remove>
    return NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	e005      	b.n	800b222 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 800b216:	2200      	movs	r2, #0
 800b218:	4905      	ldr	r1, [pc, #20]	; (800b230 <dns_alloc_random_port+0x74>)
 800b21a:	68b8      	ldr	r0, [r7, #8]
 800b21c:	f009 fb92 	bl	8014944 <udp_recv>
  return pcb;
 800b220:	68bb      	ldr	r3, [r7, #8]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	08022488 	.word	0x08022488
 800b230:	0800b6dd 	.word	0x0800b6dd

0800b234 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 800b234:	b590      	push	{r4, r7, lr}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800b23a:	2300      	movs	r3, #0
 800b23c:	71fb      	strb	r3, [r7, #7]
 800b23e:	e008      	b.n	800b252 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	4a23      	ldr	r2, [pc, #140]	; (800b2d0 <dns_alloc_pcb+0x9c>)
 800b244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d006      	beq.n	800b25a <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	3301      	adds	r3, #1
 800b250:	71fb      	strb	r3, [r7, #7]
 800b252:	79fb      	ldrb	r3, [r7, #7]
 800b254:	2b03      	cmp	r3, #3
 800b256:	d9f3      	bls.n	800b240 <dns_alloc_pcb+0xc>
 800b258:	e000      	b.n	800b25c <dns_alloc_pcb+0x28>
      break;
 800b25a:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 800b25c:	79fb      	ldrb	r3, [r7, #7]
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d811      	bhi.n	800b286 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 800b262:	79fc      	ldrb	r4, [r7, #7]
 800b264:	f7ff ffaa 	bl	800b1bc <dns_alloc_random_port>
 800b268:	4603      	mov	r3, r0
 800b26a:	4a19      	ldr	r2, [pc, #100]	; (800b2d0 <dns_alloc_pcb+0x9c>)
 800b26c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 800b270:	79fb      	ldrb	r3, [r7, #7]
 800b272:	4a17      	ldr	r2, [pc, #92]	; (800b2d0 <dns_alloc_pcb+0x9c>)
 800b274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d004      	beq.n	800b286 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 800b27c:	4a15      	ldr	r2, [pc, #84]	; (800b2d4 <dns_alloc_pcb+0xa0>)
 800b27e:	79fb      	ldrb	r3, [r7, #7]
 800b280:	7013      	strb	r3, [r2, #0]
      return i;
 800b282:	79fb      	ldrb	r3, [r7, #7]
 800b284:	e020      	b.n	800b2c8 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800b286:	2300      	movs	r3, #0
 800b288:	71fb      	strb	r3, [r7, #7]
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <dns_alloc_pcb+0xa0>)
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	71bb      	strb	r3, [r7, #6]
 800b292:	e015      	b.n	800b2c0 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 800b294:	79bb      	ldrb	r3, [r7, #6]
 800b296:	2b03      	cmp	r3, #3
 800b298:	d901      	bls.n	800b29e <dns_alloc_pcb+0x6a>
      idx = 0;
 800b29a:	2300      	movs	r3, #0
 800b29c:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 800b29e:	79bb      	ldrb	r3, [r7, #6]
 800b2a0:	4a0b      	ldr	r2, [pc, #44]	; (800b2d0 <dns_alloc_pcb+0x9c>)
 800b2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d004      	beq.n	800b2b4 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 800b2aa:	4a0a      	ldr	r2, [pc, #40]	; (800b2d4 <dns_alloc_pcb+0xa0>)
 800b2ac:	79bb      	ldrb	r3, [r7, #6]
 800b2ae:	7013      	strb	r3, [r2, #0]
      return idx;
 800b2b0:	79bb      	ldrb	r3, [r7, #6]
 800b2b2:	e009      	b.n	800b2c8 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800b2b4:	79fb      	ldrb	r3, [r7, #7]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	71fb      	strb	r3, [r7, #7]
 800b2ba:	79bb      	ldrb	r3, [r7, #6]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	71bb      	strb	r3, [r7, #6]
 800b2c0:	79fb      	ldrb	r3, [r7, #7]
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d9e6      	bls.n	800b294 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 800b2c6:	2304      	movs	r3, #4
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd90      	pop	{r4, r7, pc}
 800b2d0:	20020fc8 	.word	0x20020fc8
 800b2d4:	20020fd8 	.word	0x20020fd8

0800b2d8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800b2d8:	b590      	push	{r4, r7, lr}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	4603      	mov	r3, r0
 800b2e0:	6039      	str	r1, [r7, #0]
 800b2e2:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73fb      	strb	r3, [r7, #15]
 800b2e8:	e03d      	b.n	800b366 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800b2ea:	7bfa      	ldrb	r2, [r7, #15]
 800b2ec:	4957      	ldr	r1, [pc, #348]	; (800b44c <dns_call_found+0x174>)
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	005b      	lsls	r3, r3, #1
 800b2f2:	4413      	add	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	440b      	add	r3, r1
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d030      	beq.n	800b360 <dns_call_found+0x88>
 800b2fe:	7bfa      	ldrb	r2, [r7, #15]
 800b300:	4952      	ldr	r1, [pc, #328]	; (800b44c <dns_call_found+0x174>)
 800b302:	4613      	mov	r3, r2
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	4413      	add	r3, r2
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	440b      	add	r3, r1
 800b30c:	3308      	adds	r3, #8
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	79fa      	ldrb	r2, [r7, #7]
 800b312:	429a      	cmp	r2, r3
 800b314:	d124      	bne.n	800b360 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800b316:	7bfa      	ldrb	r2, [r7, #15]
 800b318:	494c      	ldr	r1, [pc, #304]	; (800b44c <dns_call_found+0x174>)
 800b31a:	4613      	mov	r3, r2
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	440b      	add	r3, r1
 800b324:	681c      	ldr	r4, [r3, #0]
 800b326:	79fa      	ldrb	r2, [r7, #7]
 800b328:	4613      	mov	r3, r2
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	4413      	add	r3, r2
 800b32e:	011b      	lsls	r3, r3, #4
 800b330:	3310      	adds	r3, #16
 800b332:	4a47      	ldr	r2, [pc, #284]	; (800b450 <dns_call_found+0x178>)
 800b334:	1898      	adds	r0, r3, r2
 800b336:	7bfa      	ldrb	r2, [r7, #15]
 800b338:	4944      	ldr	r1, [pc, #272]	; (800b44c <dns_call_found+0x174>)
 800b33a:	4613      	mov	r3, r2
 800b33c:	005b      	lsls	r3, r3, #1
 800b33e:	4413      	add	r3, r2
 800b340:	009b      	lsls	r3, r3, #2
 800b342:	440b      	add	r3, r1
 800b344:	3304      	adds	r3, #4
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	461a      	mov	r2, r3
 800b34a:	6839      	ldr	r1, [r7, #0]
 800b34c:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800b34e:	7bfa      	ldrb	r2, [r7, #15]
 800b350:	493e      	ldr	r1, [pc, #248]	; (800b44c <dns_call_found+0x174>)
 800b352:	4613      	mov	r3, r2
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	440b      	add	r3, r1
 800b35c:	2200      	movs	r2, #0
 800b35e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b360:	7bfb      	ldrb	r3, [r7, #15]
 800b362:	3301      	adds	r3, #1
 800b364:	73fb      	strb	r3, [r7, #15]
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d9be      	bls.n	800b2ea <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
 800b370:	e031      	b.n	800b3d6 <dns_call_found+0xfe>
    if (i == idx) {
 800b372:	7bfa      	ldrb	r2, [r7, #15]
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	429a      	cmp	r2, r3
 800b378:	d029      	beq.n	800b3ce <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800b37a:	7bfa      	ldrb	r2, [r7, #15]
 800b37c:	4934      	ldr	r1, [pc, #208]	; (800b450 <dns_call_found+0x178>)
 800b37e:	4613      	mov	r3, r2
 800b380:	011b      	lsls	r3, r3, #4
 800b382:	4413      	add	r3, r2
 800b384:	011b      	lsls	r3, r3, #4
 800b386:	440b      	add	r3, r1
 800b388:	330a      	adds	r3, #10
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d11f      	bne.n	800b3d0 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800b390:	7bfa      	ldrb	r2, [r7, #15]
 800b392:	492f      	ldr	r1, [pc, #188]	; (800b450 <dns_call_found+0x178>)
 800b394:	4613      	mov	r3, r2
 800b396:	011b      	lsls	r3, r3, #4
 800b398:	4413      	add	r3, r2
 800b39a:	011b      	lsls	r3, r3, #4
 800b39c:	440b      	add	r3, r1
 800b39e:	330f      	adds	r3, #15
 800b3a0:	7819      	ldrb	r1, [r3, #0]
 800b3a2:	79fa      	ldrb	r2, [r7, #7]
 800b3a4:	482a      	ldr	r0, [pc, #168]	; (800b450 <dns_call_found+0x178>)
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	011b      	lsls	r3, r3, #4
 800b3aa:	4413      	add	r3, r2
 800b3ac:	011b      	lsls	r3, r3, #4
 800b3ae:	4403      	add	r3, r0
 800b3b0:	330f      	adds	r3, #15
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4299      	cmp	r1, r3
 800b3b6:	d10b      	bne.n	800b3d0 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800b3b8:	79fa      	ldrb	r2, [r7, #7]
 800b3ba:	4925      	ldr	r1, [pc, #148]	; (800b450 <dns_call_found+0x178>)
 800b3bc:	4613      	mov	r3, r2
 800b3be:	011b      	lsls	r3, r3, #4
 800b3c0:	4413      	add	r3, r2
 800b3c2:	011b      	lsls	r3, r3, #4
 800b3c4:	440b      	add	r3, r1
 800b3c6:	330f      	adds	r3, #15
 800b3c8:	2204      	movs	r2, #4
 800b3ca:	701a      	strb	r2, [r3, #0]
        break;
 800b3cc:	e006      	b.n	800b3dc <dns_call_found+0x104>
      continue; /* only check other requests */
 800b3ce:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	73fb      	strb	r3, [r7, #15]
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	2b03      	cmp	r3, #3
 800b3da:	d9ca      	bls.n	800b372 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800b3dc:	79fa      	ldrb	r2, [r7, #7]
 800b3de:	491c      	ldr	r1, [pc, #112]	; (800b450 <dns_call_found+0x178>)
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	4413      	add	r3, r2
 800b3e6:	011b      	lsls	r3, r3, #4
 800b3e8:	440b      	add	r3, r1
 800b3ea:	330f      	adds	r3, #15
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d827      	bhi.n	800b442 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800b3f2:	79fa      	ldrb	r2, [r7, #7]
 800b3f4:	4916      	ldr	r1, [pc, #88]	; (800b450 <dns_call_found+0x178>)
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	011b      	lsls	r3, r3, #4
 800b3fa:	4413      	add	r3, r2
 800b3fc:	011b      	lsls	r3, r3, #4
 800b3fe:	440b      	add	r3, r1
 800b400:	330f      	adds	r3, #15
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	461a      	mov	r2, r3
 800b406:	4b13      	ldr	r3, [pc, #76]	; (800b454 <dns_call_found+0x17c>)
 800b408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f009 fab9 	bl	8014984 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800b412:	79fa      	ldrb	r2, [r7, #7]
 800b414:	490e      	ldr	r1, [pc, #56]	; (800b450 <dns_call_found+0x178>)
 800b416:	4613      	mov	r3, r2
 800b418:	011b      	lsls	r3, r3, #4
 800b41a:	4413      	add	r3, r2
 800b41c:	011b      	lsls	r3, r3, #4
 800b41e:	440b      	add	r3, r1
 800b420:	330f      	adds	r3, #15
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	4619      	mov	r1, r3
 800b426:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <dns_call_found+0x17c>)
 800b428:	2200      	movs	r2, #0
 800b42a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800b42e:	79fa      	ldrb	r2, [r7, #7]
 800b430:	4907      	ldr	r1, [pc, #28]	; (800b450 <dns_call_found+0x178>)
 800b432:	4613      	mov	r3, r2
 800b434:	011b      	lsls	r3, r3, #4
 800b436:	4413      	add	r3, r2
 800b438:	011b      	lsls	r3, r3, #4
 800b43a:	440b      	add	r3, r1
 800b43c:	330f      	adds	r3, #15
 800b43e:	2204      	movs	r2, #4
 800b440:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	bd90      	pop	{r4, r7, pc}
 800b44a:	bf00      	nop
 800b44c:	2002141c 	.word	0x2002141c
 800b450:	20020fdc 	.word	0x20020fdc
 800b454:	20020fc8 	.word	0x20020fc8

0800b458 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800b45e:	f00e fff5 	bl	801a44c <rand>
 800b462:	4603      	mov	r3, r0
 800b464:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b466:	2300      	movs	r3, #0
 800b468:	71fb      	strb	r3, [r7, #7]
 800b46a:	e01a      	b.n	800b4a2 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b46c:	79fa      	ldrb	r2, [r7, #7]
 800b46e:	4911      	ldr	r1, [pc, #68]	; (800b4b4 <dns_create_txid+0x5c>)
 800b470:	4613      	mov	r3, r2
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	4413      	add	r3, r2
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	440b      	add	r3, r1
 800b47a:	330a      	adds	r3, #10
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	2b02      	cmp	r3, #2
 800b480:	d10c      	bne.n	800b49c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800b482:	79fa      	ldrb	r2, [r7, #7]
 800b484:	490b      	ldr	r1, [pc, #44]	; (800b4b4 <dns_create_txid+0x5c>)
 800b486:	4613      	mov	r3, r2
 800b488:	011b      	lsls	r3, r3, #4
 800b48a:	4413      	add	r3, r2
 800b48c:	011b      	lsls	r3, r3, #4
 800b48e:	440b      	add	r3, r1
 800b490:	3308      	adds	r3, #8
 800b492:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b494:	88ba      	ldrh	r2, [r7, #4]
 800b496:	429a      	cmp	r2, r3
 800b498:	d100      	bne.n	800b49c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800b49a:	e7e0      	b.n	800b45e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b49c:	79fb      	ldrb	r3, [r7, #7]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	71fb      	strb	r3, [r7, #7]
 800b4a2:	79fb      	ldrb	r3, [r7, #7]
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d9e1      	bls.n	800b46c <dns_create_txid+0x14>
    }
  }

  return txid;
 800b4a8:	88bb      	ldrh	r3, [r7, #4]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20020fdc 	.word	0x20020fdc

0800b4b8 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00d      	beq.n	800b4e6 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7adb      	ldrb	r3, [r3, #11]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d109      	bne.n	800b4e6 <dns_backupserver_available+0x2e>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7adb      	ldrb	r3, [r3, #11]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	4a06      	ldr	r2, [pc, #24]	; (800b4f4 <dns_backupserver_available+0x3c>)
 800b4da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d001      	beq.n	800b4e6 <dns_backupserver_available+0x2e>
      ret = 1;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	2002144c 	.word	0x2002144c

0800b4f8 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800b502:	79fa      	ldrb	r2, [r7, #7]
 800b504:	4613      	mov	r3, r2
 800b506:	011b      	lsls	r3, r3, #4
 800b508:	4413      	add	r3, r2
 800b50a:	011b      	lsls	r3, r3, #4
 800b50c:	4a48      	ldr	r2, [pc, #288]	; (800b630 <dns_check_entry+0x138>)
 800b50e:	4413      	add	r3, r2
 800b510:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800b512:	79fb      	ldrb	r3, [r7, #7]
 800b514:	2b03      	cmp	r3, #3
 800b516:	d906      	bls.n	800b526 <dns_check_entry+0x2e>
 800b518:	4b46      	ldr	r3, [pc, #280]	; (800b634 <dns_check_entry+0x13c>)
 800b51a:	f240 421c 	movw	r2, #1052	; 0x41c
 800b51e:	4946      	ldr	r1, [pc, #280]	; (800b638 <dns_check_entry+0x140>)
 800b520:	4846      	ldr	r0, [pc, #280]	; (800b63c <dns_check_entry+0x144>)
 800b522:	f00e ff05 	bl	801a330 <iprintf>

  switch (entry->state) {
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	7a9b      	ldrb	r3, [r3, #10]
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d86f      	bhi.n	800b60e <dns_check_entry+0x116>
 800b52e:	a201      	add	r2, pc, #4	; (adr r2, 800b534 <dns_check_entry+0x3c>)
 800b530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b534:	0800b61f 	.word	0x0800b61f
 800b538:	0800b545 	.word	0x0800b545
 800b53c:	0800b577 	.word	0x0800b577
 800b540:	0800b5ed 	.word	0x0800b5ed
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800b544:	f7ff ff88 	bl	800b458 <dns_create_txid>
 800b548:	4603      	mov	r3, r0
 800b54a:	461a      	mov	r2, r3
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2202      	movs	r2, #2
 800b554:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2201      	movs	r2, #1
 800b560:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800b568:	79fb      	ldrb	r3, [r7, #7]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff fd36 	bl	800afdc <dns_send>
 800b570:	4603      	mov	r3, r0
 800b572:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800b574:	e058      	b.n	800b628 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	7b1b      	ldrb	r3, [r3, #12]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	b2da      	uxtb	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	731a      	strb	r2, [r3, #12]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	7b1b      	ldrb	r3, [r3, #12]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d14b      	bne.n	800b622 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	7b5b      	ldrb	r3, [r3, #13]
 800b58e:	3301      	adds	r3, #1
 800b590:	b2da      	uxtb	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	735a      	strb	r2, [r3, #13]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	7b5b      	ldrb	r3, [r3, #13]
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	d11b      	bne.n	800b5d6 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7ff ff8a 	bl	800b4b8 <dns_backupserver_available>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00c      	beq.n	800b5c4 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	7adb      	ldrb	r3, [r3, #11]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2201      	movs	r2, #1
 800b5ba:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	735a      	strb	r2, [r3, #13]
 800b5c2:	e00c      	b.n	800b5de <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800b5c4:	79fb      	ldrb	r3, [r7, #7]
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fe85 	bl	800b2d8 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	729a      	strb	r2, [r3, #10]
            break;
 800b5d4:	e028      	b.n	800b628 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	7b5a      	ldrb	r2, [r3, #13]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7ff fcfb 	bl	800afdc <dns_send>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800b5ea:	e01a      	b.n	800b622 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d008      	beq.n	800b606 <dns_check_entry+0x10e>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	1e5a      	subs	r2, r3, #1
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10f      	bne.n	800b626 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	729a      	strb	r2, [r3, #10]
      }
      break;
 800b60c:	e00b      	b.n	800b626 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <dns_check_entry+0x13c>)
 800b610:	f240 425b 	movw	r2, #1115	; 0x45b
 800b614:	490a      	ldr	r1, [pc, #40]	; (800b640 <dns_check_entry+0x148>)
 800b616:	4809      	ldr	r0, [pc, #36]	; (800b63c <dns_check_entry+0x144>)
 800b618:	f00e fe8a 	bl	801a330 <iprintf>
      break;
 800b61c:	e004      	b.n	800b628 <dns_check_entry+0x130>
      break;
 800b61e:	bf00      	nop
 800b620:	e002      	b.n	800b628 <dns_check_entry+0x130>
      break;
 800b622:	bf00      	nop
 800b624:	e000      	b.n	800b628 <dns_check_entry+0x130>
      break;
 800b626:	bf00      	nop
  }
}
 800b628:	bf00      	nop
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}
 800b630:	20020fdc 	.word	0x20020fdc
 800b634:	0801f4b4 	.word	0x0801f4b4
 800b638:	0801f524 	.word	0x0801f524
 800b63c:	0801f4fc 	.word	0x0801f4fc
 800b640:	0801f540 	.word	0x0801f540

0800b644 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b64a:	2300      	movs	r3, #0
 800b64c:	71fb      	strb	r3, [r7, #7]
 800b64e:	e006      	b.n	800b65e <dns_check_entries+0x1a>
    dns_check_entry(i);
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	4618      	mov	r0, r3
 800b654:	f7ff ff50 	bl	800b4f8 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b658:	79fb      	ldrb	r3, [r7, #7]
 800b65a:	3301      	adds	r3, #1
 800b65c:	71fb      	strb	r3, [r7, #7]
 800b65e:	79fb      	ldrb	r3, [r7, #7]
 800b660:	2b03      	cmp	r3, #3
 800b662:	d9f5      	bls.n	800b650 <dns_check_entries+0xc>
  }
}
 800b664:	bf00      	nop
 800b666:	bf00      	nop
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	4603      	mov	r3, r0
 800b678:	6039      	str	r1, [r7, #0]
 800b67a:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800b67c:	79fa      	ldrb	r2, [r7, #7]
 800b67e:	4613      	mov	r3, r2
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	4413      	add	r3, r2
 800b684:	011b      	lsls	r3, r3, #4
 800b686:	4a13      	ldr	r2, [pc, #76]	; (800b6d4 <dns_correct_response+0x64>)
 800b688:	4413      	add	r3, r2
 800b68a:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2203      	movs	r2, #3
 800b690:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a0e      	ldr	r2, [pc, #56]	; (800b6d8 <dns_correct_response+0x68>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d902      	bls.n	800b6a8 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	4a0c      	ldr	r2, [pc, #48]	; (800b6d8 <dns_correct_response+0x68>)
 800b6a6:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	1d1a      	adds	r2, r3, #4
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff fe11 	bl	800b2d8 <dns_call_found>

  if (entry->ttl == 0) {
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d106      	bne.n	800b6cc <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	7a9b      	ldrb	r3, [r3, #10]
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d102      	bne.n	800b6cc <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800b6cc:	bf00      	nop
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	20020fdc 	.word	0x20020fdc
 800b6d8:	00093a80 	.word	0x00093a80

0800b6dc <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800b6dc:	b590      	push	{r4, r7, lr}
 800b6de:	b091      	sub	sp, #68	; 0x44
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	60f8      	str	r0, [r7, #12]
 800b6e4:	60b9      	str	r1, [r7, #8]
 800b6e6:	607a      	str	r2, [r7, #4]
 800b6e8:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	891b      	ldrh	r3, [r3, #8]
 800b6ee:	2b0f      	cmp	r3, #15
 800b6f0:	f240 811e 	bls.w	800b930 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800b6f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	220c      	movs	r2, #12
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f002 f849 	bl	800d794 <pbuf_copy_partial>
 800b702:	4603      	mov	r3, r0
 800b704:	2b0c      	cmp	r3, #12
 800b706:	f040 8115 	bne.w	800b934 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800b70a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff faad 	bl	800ac6c <lwip_htons>
 800b712:	4603      	mov	r3, r0
 800b714:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b716:	2300      	movs	r3, #0
 800b718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b71c:	e102      	b.n	800b924 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 800b71e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b722:	4613      	mov	r3, r2
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	4413      	add	r3, r2
 800b728:	011b      	lsls	r3, r3, #4
 800b72a:	4a92      	ldr	r2, [pc, #584]	; (800b974 <dns_recv+0x298>)
 800b72c:	4413      	add	r3, r2
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b732:	7a9b      	ldrb	r3, [r3, #10]
 800b734:	2b02      	cmp	r3, #2
 800b736:	f040 80f0 	bne.w	800b91a <dns_recv+0x23e>
          (entry->txid == txid)) {
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 800b73e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b740:	429a      	cmp	r2, r3
 800b742:	f040 80ea 	bne.w	800b91a <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800b746:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b748:	4618      	mov	r0, r3
 800b74a:	f7ff fa8f 	bl	800ac6c <lwip_htons>
 800b74e:	4603      	mov	r3, r0
 800b750:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 800b752:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff fa89 	bl	800ac6c <lwip_htons>
 800b75a:	4603      	mov	r3, r0
 800b75c:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800b75e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b762:	b25b      	sxtb	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	f280 80e7 	bge.w	800b938 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800b76a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	f040 80e5 	bne.w	800b93c <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b778:	7adb      	ldrb	r3, [r3, #11]
 800b77a:	4619      	mov	r1, r3
 800b77c:	4b7e      	ldr	r3, [pc, #504]	; (800b978 <dns_recv+0x29c>)
 800b77e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b782:	429a      	cmp	r2, r3
 800b784:	f040 80dc 	bne.w	800b940 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800b788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b78a:	3310      	adds	r3, #16
 800b78c:	220c      	movs	r2, #12
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff fb47 	bl	800ae24 <dns_compare_name>
 800b796:	4603      	mov	r3, r0
 800b798:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800b79a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b79c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	f000 80cf 	beq.w	800b944 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800b7a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7a8:	f107 0114 	add.w	r1, r7, #20
 800b7ac:	2204      	movs	r2, #4
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f001 fff0 	bl	800d794 <pbuf_copy_partial>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b04      	cmp	r3, #4
 800b7b8:	f040 80c6 	bne.w	800b948 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800b7bc:	8afb      	ldrh	r3, [r7, #22]
 800b7be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c2:	f040 80c3 	bne.w	800b94c <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 800b7c6:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800b7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7cc:	f040 80be 	bne.w	800b94c <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800b7d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7d2:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	f200 80ba 	bhi.w	800b950 <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800b7dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b7de:	3304      	adds	r3, #4
 800b7e0:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800b7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7e6:	f003 030f 	and.w	r3, r3, #15
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d078      	beq.n	800b8e0 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800b7ee:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b7f0:	f7ff fe62 	bl	800b4b8 <dns_backupserver_available>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d07a      	beq.n	800b8f0 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 800b7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 800b800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b802:	2201      	movs	r2, #1
 800b804:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 800b806:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7ff fe74 	bl	800b4f8 <dns_check_entry>

            goto ignore_packet;
 800b810:	e0a9      	b.n	800b966 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 800b812:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b814:	4619      	mov	r1, r3
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fb92 	bl	800af40 <dns_skip_name>
 800b81c:	4603      	mov	r3, r0
 800b81e:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 800b820:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b826:	4293      	cmp	r3, r2
 800b828:	f000 8094 	beq.w	800b954 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800b82c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b82e:	f107 0118 	add.w	r1, r7, #24
 800b832:	220a      	movs	r2, #10
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f001 ffad 	bl	800d794 <pbuf_copy_partial>
 800b83a:	4603      	mov	r3, r0
 800b83c:	2b0a      	cmp	r3, #10
 800b83e:	f040 808b 	bne.w	800b958 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 800b842:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b844:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b848:	4293      	cmp	r3, r2
 800b84a:	f200 8087 	bhi.w	800b95c <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800b84e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b850:	330a      	adds	r3, #10
 800b852:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800b854:	8b7b      	ldrh	r3, [r7, #26]
 800b856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b85a:	d12b      	bne.n	800b8b4 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800b85c:	8b3b      	ldrh	r3, [r7, #24]
 800b85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b862:	d127      	bne.n	800b8b4 <dns_recv+0x1d8>
 800b864:	8c3b      	ldrh	r3, [r7, #32]
 800b866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b86a:	d123      	bne.n	800b8b4 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800b86c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b86e:	f107 0110 	add.w	r1, r7, #16
 800b872:	2204      	movs	r2, #4
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f001 ff8d 	bl	800d794 <pbuf_copy_partial>
 800b87a:	4603      	mov	r3, r0
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	d16f      	bne.n	800b960 <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800b880:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b884:	6939      	ldr	r1, [r7, #16]
 800b886:	483b      	ldr	r0, [pc, #236]	; (800b974 <dns_recv+0x298>)
 800b888:	4613      	mov	r3, r2
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	4413      	add	r3, r2
 800b88e:	011b      	lsls	r3, r3, #4
 800b890:	4403      	add	r3, r0
 800b892:	3304      	adds	r3, #4
 800b894:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f001 fd76 	bl	800d388 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff f9f9 	bl	800ac96 <lwip_htonl>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fedf 	bl	800b670 <dns_correct_response>
 800b8b2:	e05c      	b.n	800b96e <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800b8b4:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800b8b6:	8c3b      	ldrh	r3, [r7, #32]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff f9d7 	bl	800ac6c <lwip_htons>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	4423      	add	r3, r4
 800b8c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8c6:	da4d      	bge.n	800b964 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800b8c8:	8c3b      	ldrh	r3, [r7, #32]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7ff f9ce 	bl	800ac6c <lwip_htons>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8d6:	4413      	add	r3, r2
 800b8d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800b8da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800b8e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d004      	beq.n	800b8f0 <dns_recv+0x214>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	891b      	ldrh	r3, [r3, #8]
 800b8ea:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d390      	bcc.n	800b812 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f001 fd49 	bl	800d388 <pbuf_free>
        dns_call_found(i, NULL);
 800b8f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fceb 	bl	800b2d8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800b902:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b906:	491b      	ldr	r1, [pc, #108]	; (800b974 <dns_recv+0x298>)
 800b908:	4613      	mov	r3, r2
 800b90a:	011b      	lsls	r3, r3, #4
 800b90c:	4413      	add	r3, r2
 800b90e:	011b      	lsls	r3, r3, #4
 800b910:	440b      	add	r3, r1
 800b912:	330a      	adds	r3, #10
 800b914:	2200      	movs	r2, #0
 800b916:	701a      	strb	r2, [r3, #0]
        return;
 800b918:	e029      	b.n	800b96e <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b91a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b91e:	3301      	adds	r3, #1
 800b920:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b924:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b928:	2b03      	cmp	r3, #3
 800b92a:	f67f aef8 	bls.w	800b71e <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 800b92e:	e001      	b.n	800b934 <dns_recv+0x258>
    goto ignore_packet;
 800b930:	bf00      	nop
 800b932:	e018      	b.n	800b966 <dns_recv+0x28a>
ignore_packet:
 800b934:	bf00      	nop
 800b936:	e016      	b.n	800b966 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800b938:	bf00      	nop
 800b93a:	e014      	b.n	800b966 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800b93c:	bf00      	nop
 800b93e:	e012      	b.n	800b966 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 800b940:	bf00      	nop
 800b942:	e010      	b.n	800b966 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800b944:	bf00      	nop
 800b946:	e00e      	b.n	800b966 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800b948:	bf00      	nop
 800b94a:	e00c      	b.n	800b966 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800b94c:	bf00      	nop
 800b94e:	e00a      	b.n	800b966 <dns_recv+0x28a>
          goto ignore_packet;
 800b950:	bf00      	nop
 800b952:	e008      	b.n	800b966 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800b954:	bf00      	nop
 800b956:	e006      	b.n	800b966 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800b958:	bf00      	nop
 800b95a:	e004      	b.n	800b966 <dns_recv+0x28a>
              goto ignore_packet;
 800b95c:	bf00      	nop
 800b95e:	e002      	b.n	800b966 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 800b960:	bf00      	nop
 800b962:	e000      	b.n	800b966 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800b964:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f001 fd0e 	bl	800d388 <pbuf_free>
  return;
 800b96c:	bf00      	nop
}
 800b96e:	3744      	adds	r7, #68	; 0x44
 800b970:	46bd      	mov	sp, r7
 800b972:	bd90      	pop	{r4, r7, pc}
 800b974:	20020fdc 	.word	0x20020fdc
 800b978:	2002144c 	.word	0x2002144c

0800b97c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08a      	sub	sp, #40	; 0x28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b98e:	2300      	movs	r3, #0
 800b990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b994:	e056      	b.n	800ba44 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b996:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b99a:	4990      	ldr	r1, [pc, #576]	; (800bbdc <dns_enqueue+0x260>)
 800b99c:	4613      	mov	r3, r2
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	4413      	add	r3, r2
 800b9a2:	011b      	lsls	r3, r3, #4
 800b9a4:	440b      	add	r3, r1
 800b9a6:	330a      	adds	r3, #10
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d145      	bne.n	800ba3a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800b9ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	011b      	lsls	r3, r3, #4
 800b9b6:	4413      	add	r3, r2
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	3310      	adds	r3, #16
 800b9bc:	4a87      	ldr	r2, [pc, #540]	; (800bbdc <dns_enqueue+0x260>)
 800b9be:	4413      	add	r3, r2
 800b9c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f7ff f97e 	bl	800acc8 <lwip_strnicmp>
 800b9cc:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d133      	bne.n	800ba3a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	76fb      	strb	r3, [r7, #27]
 800b9d6:	e02d      	b.n	800ba34 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 800b9d8:	7efa      	ldrb	r2, [r7, #27]
 800b9da:	4981      	ldr	r1, [pc, #516]	; (800bbe0 <dns_enqueue+0x264>)
 800b9dc:	4613      	mov	r3, r2
 800b9de:	005b      	lsls	r3, r3, #1
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d120      	bne.n	800ba2e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 800b9ec:	7efa      	ldrb	r2, [r7, #27]
 800b9ee:	497c      	ldr	r1, [pc, #496]	; (800bbe0 <dns_enqueue+0x264>)
 800b9f0:	4613      	mov	r3, r2
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	4413      	add	r3, r2
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 800b9fe:	7efa      	ldrb	r2, [r7, #27]
 800ba00:	4977      	ldr	r1, [pc, #476]	; (800bbe0 <dns_enqueue+0x264>)
 800ba02:	4613      	mov	r3, r2
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	4413      	add	r3, r2
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	440b      	add	r3, r1
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	683a      	ldr	r2, [r7, #0]
 800ba10:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 800ba12:	7efa      	ldrb	r2, [r7, #27]
 800ba14:	4972      	ldr	r1, [pc, #456]	; (800bbe0 <dns_enqueue+0x264>)
 800ba16:	4613      	mov	r3, r2
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	4413      	add	r3, r2
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	440b      	add	r3, r1
 800ba20:	3308      	adds	r3, #8
 800ba22:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba26:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 800ba28:	f06f 0304 	mvn.w	r3, #4
 800ba2c:	e0d1      	b.n	800bbd2 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800ba2e:	7efb      	ldrb	r3, [r7, #27]
 800ba30:	3301      	adds	r3, #1
 800ba32:	76fb      	strb	r3, [r7, #27]
 800ba34:	7efb      	ldrb	r3, [r7, #27]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	d9ce      	bls.n	800b9d8 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800ba3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba3e:	3301      	adds	r3, #1
 800ba40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba48:	2b03      	cmp	r3, #3
 800ba4a:	d9a4      	bls.n	800b996 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 800ba52:	2304      	movs	r3, #4
 800ba54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ba58:	2300      	movs	r3, #0
 800ba5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba5e:	e027      	b.n	800bab0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 800ba60:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ba64:	4613      	mov	r3, r2
 800ba66:	011b      	lsls	r3, r3, #4
 800ba68:	4413      	add	r3, r2
 800ba6a:	011b      	lsls	r3, r3, #4
 800ba6c:	4a5b      	ldr	r2, [pc, #364]	; (800bbdc <dns_enqueue+0x260>)
 800ba6e:	4413      	add	r3, r2
 800ba70:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	7a9b      	ldrb	r3, [r3, #10]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d01f      	beq.n	800baba <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	7a9b      	ldrb	r3, [r3, #10]
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	d111      	bne.n	800baa6 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 800ba82:	4b58      	ldr	r3, [pc, #352]	; (800bbe4 <dns_enqueue+0x268>)
 800ba84:	781a      	ldrb	r2, [r3, #0]
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	7b9b      	ldrb	r3, [r3, #14]
 800ba8a:	1ad3      	subs	r3, r2, r3
 800ba8c:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 800ba8e:	7eba      	ldrb	r2, [r7, #26]
 800ba90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d906      	bls.n	800baa6 <dns_enqueue+0x12a>
        lseq = age;
 800ba98:	7ebb      	ldrb	r3, [r7, #26]
 800ba9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 800ba9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800baa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baaa:	3301      	adds	r3, #1
 800baac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab4:	2b03      	cmp	r3, #3
 800bab6:	d9d3      	bls.n	800ba60 <dns_enqueue+0xe4>
 800bab8:	e000      	b.n	800babc <dns_enqueue+0x140>
      break;
 800baba:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 800babc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d11f      	bne.n	800bb04 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 800bac4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d80b      	bhi.n	800bae4 <dns_enqueue+0x168>
 800bacc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800bad0:	4942      	ldr	r1, [pc, #264]	; (800bbdc <dns_enqueue+0x260>)
 800bad2:	4613      	mov	r3, r2
 800bad4:	011b      	lsls	r3, r3, #4
 800bad6:	4413      	add	r3, r2
 800bad8:	011b      	lsls	r3, r3, #4
 800bada:	440b      	add	r3, r1
 800badc:	330a      	adds	r3, #10
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	2b03      	cmp	r3, #3
 800bae2:	d002      	beq.n	800baea <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 800bae4:	f04f 33ff 	mov.w	r3, #4294967295
 800bae8:	e073      	b.n	800bbd2 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 800baea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800baee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 800baf2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800baf6:	4613      	mov	r3, r2
 800baf8:	011b      	lsls	r3, r3, #4
 800bafa:	4413      	add	r3, r2
 800bafc:	011b      	lsls	r3, r3, #4
 800bafe:	4a37      	ldr	r2, [pc, #220]	; (800bbdc <dns_enqueue+0x260>)
 800bb00:	4413      	add	r3, r2
 800bb02:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 800bb04:	2300      	movs	r3, #0
 800bb06:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800bb08:	2300      	movs	r3, #0
 800bb0a:	76fb      	strb	r3, [r7, #27]
 800bb0c:	e015      	b.n	800bb3a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 800bb0e:	7efa      	ldrb	r2, [r7, #27]
 800bb10:	4933      	ldr	r1, [pc, #204]	; (800bbe0 <dns_enqueue+0x264>)
 800bb12:	4613      	mov	r3, r2
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	4413      	add	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	440b      	add	r3, r1
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d108      	bne.n	800bb34 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 800bb22:	7efa      	ldrb	r2, [r7, #27]
 800bb24:	4613      	mov	r3, r2
 800bb26:	005b      	lsls	r3, r3, #1
 800bb28:	4413      	add	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4a2c      	ldr	r2, [pc, #176]	; (800bbe0 <dns_enqueue+0x264>)
 800bb2e:	4413      	add	r3, r2
 800bb30:	61fb      	str	r3, [r7, #28]
      break;
 800bb32:	e005      	b.n	800bb40 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800bb34:	7efb      	ldrb	r3, [r7, #27]
 800bb36:	3301      	adds	r3, #1
 800bb38:	76fb      	strb	r3, [r7, #27]
 800bb3a:	7efb      	ldrb	r3, [r7, #27]
 800bb3c:	2b03      	cmp	r3, #3
 800bb3e:	d9e6      	bls.n	800bb0e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d102      	bne.n	800bb4c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 800bb46:	f04f 33ff 	mov.w	r3, #4294967295
 800bb4a:	e042      	b.n	800bbd2 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bb52:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 800bb54:	6a3b      	ldr	r3, [r7, #32]
 800bb56:	2201      	movs	r2, #1
 800bb58:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 800bb5a:	4b22      	ldr	r3, [pc, #136]	; (800bbe4 <dns_enqueue+0x268>)
 800bb5c:	781a      	ldrb	r2, [r3, #0]
 800bb5e:	6a3b      	ldr	r3, [r7, #32]
 800bb60:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 800bb68:	69fb      	ldr	r3, [r7, #28]
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2bff      	cmp	r3, #255	; 0xff
 800bb72:	bf28      	it	cs
 800bb74:	23ff      	movcs	r3, #255	; 0xff
 800bb76:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 800bb78:	6a3b      	ldr	r3, [r7, #32]
 800bb7a:	3310      	adds	r3, #16
 800bb7c:	697a      	ldr	r2, [r7, #20]
 800bb7e:	68f9      	ldr	r1, [r7, #12]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f00d fd2b 	bl	80195dc <memcpy>
  entry->name[namelen] = 0;
 800bb86:	6a3a      	ldr	r2, [r7, #32]
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	3310      	adds	r3, #16
 800bb8e:	2200      	movs	r2, #0
 800bb90:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 800bb92:	f7ff fb4f 	bl	800b234 <dns_alloc_pcb>
 800bb96:	4603      	mov	r3, r0
 800bb98:	461a      	mov	r2, r3
 800bb9a:	6a3b      	ldr	r3, [r7, #32]
 800bb9c:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	7bdb      	ldrb	r3, [r3, #15]
 800bba2:	2b03      	cmp	r3, #3
 800bba4:	d908      	bls.n	800bbb8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 800bbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800bbb6:	e00c      	b.n	800bbd2 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 800bbb8:	4b0a      	ldr	r3, [pc, #40]	; (800bbe4 <dns_enqueue+0x268>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	4b08      	ldr	r3, [pc, #32]	; (800bbe4 <dns_enqueue+0x268>)
 800bbc2:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 800bbc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7ff fc95 	bl	800b4f8 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 800bbce:	f06f 0304 	mvn.w	r3, #4
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3728      	adds	r7, #40	; 0x28
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	20020fdc 	.word	0x20020fdc
 800bbe0:	2002141c 	.word	0x2002141c
 800bbe4:	20020fd9 	.word	0x20020fd9

0800bbe8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b086      	sub	sp, #24
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	60f8      	str	r0, [r7, #12]
 800bbf0:	60b9      	str	r1, [r7, #8]
 800bbf2:	607a      	str	r2, [r7, #4]
 800bbf4:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d006      	beq.n	800bc0a <dns_gethostbyname_addrtype+0x22>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 800bc0a:	f06f 030f 	mvn.w	r3, #15
 800bc0e:	e029      	b.n	800bc64 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f7f4 fafd 	bl	8000210 <strlen>
 800bc16:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	2bff      	cmp	r3, #255	; 0xff
 800bc1c:	d902      	bls.n	800bc24 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 800bc1e:	f06f 030f 	mvn.w	r3, #15
 800bc22:	e01f      	b.n	800bc64 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 800bc24:	68b9      	ldr	r1, [r7, #8]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f00c f9fa 	bl	8018020 <ip4addr_aton>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d001      	beq.n	800bc36 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e016      	b.n	800bc64 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	68f8      	ldr	r0, [r7, #12]
 800bc3a:	f7ff f8b1 	bl	800ada0 <dns_lookup>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	e00d      	b.n	800bc64 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 800bc48:	4b08      	ldr	r3, [pc, #32]	; (800bc6c <dns_gethostbyname_addrtype+0x84>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d102      	bne.n	800bc56 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 800bc50:	f06f 0305 	mvn.w	r3, #5
 800bc54:	e006      	b.n	800bc64 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	6979      	ldr	r1, [r7, #20]
 800bc5c:	68f8      	ldr	r0, [r7, #12]
 800bc5e:	f7ff fe8d 	bl	800b97c <dns_enqueue>
 800bc62:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	2002144c 	.word	0x2002144c

0800bc70 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bc7a:	f00d fbf3 	bl	8019464 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bc7e:	f000 f8d7 	bl	800be30 <mem_init>
  memp_init();
 800bc82:	f000 fc33 	bl	800c4ec <memp_init>
  pbuf_init();
  netif_init();
 800bc86:	f000 fcf9 	bl	800c67c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bc8a:	f008 f9ed 	bl	8014068 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bc8e:	f001 ffa1 	bl	800dbd4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800bc92:	f7ff f854 	bl	800ad3e <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bc96:	f008 f92d 	bl	8013ef4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bc9a:	bf00      	nop
 800bc9c:	3708      	adds	r7, #8
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
	...

0800bca4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	4603      	mov	r3, r0
 800bcac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bcae:	4b05      	ldr	r3, [pc, #20]	; (800bcc4 <ptr_to_mem+0x20>)
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	88fb      	ldrh	r3, [r7, #6]
 800bcb4:	4413      	add	r3, r2
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	370c      	adds	r7, #12
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20021454 	.word	0x20021454

0800bcc8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bcd0:	4b05      	ldr	r3, [pc, #20]	; (800bce8 <mem_to_ptr+0x20>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	b29b      	uxth	r3, r3
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	20021454 	.word	0x20021454

0800bcec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bcec:	b590      	push	{r4, r7, lr}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bcf4:	4b45      	ldr	r3, [pc, #276]	; (800be0c <plug_holes+0x120>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d206      	bcs.n	800bd0c <plug_holes+0x20>
 800bcfe:	4b44      	ldr	r3, [pc, #272]	; (800be10 <plug_holes+0x124>)
 800bd00:	f240 12df 	movw	r2, #479	; 0x1df
 800bd04:	4943      	ldr	r1, [pc, #268]	; (800be14 <plug_holes+0x128>)
 800bd06:	4844      	ldr	r0, [pc, #272]	; (800be18 <plug_holes+0x12c>)
 800bd08:	f00e fb12 	bl	801a330 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bd0c:	4b43      	ldr	r3, [pc, #268]	; (800be1c <plug_holes+0x130>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d306      	bcc.n	800bd24 <plug_holes+0x38>
 800bd16:	4b3e      	ldr	r3, [pc, #248]	; (800be10 <plug_holes+0x124>)
 800bd18:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bd1c:	4940      	ldr	r1, [pc, #256]	; (800be20 <plug_holes+0x134>)
 800bd1e:	483e      	ldr	r0, [pc, #248]	; (800be18 <plug_holes+0x12c>)
 800bd20:	f00e fb06 	bl	801a330 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	791b      	ldrb	r3, [r3, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d006      	beq.n	800bd3a <plug_holes+0x4e>
 800bd2c:	4b38      	ldr	r3, [pc, #224]	; (800be10 <plug_holes+0x124>)
 800bd2e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bd32:	493c      	ldr	r1, [pc, #240]	; (800be24 <plug_holes+0x138>)
 800bd34:	4838      	ldr	r0, [pc, #224]	; (800be18 <plug_holes+0x12c>)
 800bd36:	f00e fafb 	bl	801a330 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd42:	d906      	bls.n	800bd52 <plug_holes+0x66>
 800bd44:	4b32      	ldr	r3, [pc, #200]	; (800be10 <plug_holes+0x124>)
 800bd46:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bd4a:	4937      	ldr	r1, [pc, #220]	; (800be28 <plug_holes+0x13c>)
 800bd4c:	4832      	ldr	r0, [pc, #200]	; (800be18 <plug_holes+0x12c>)
 800bd4e:	f00e faef 	bl	801a330 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	881b      	ldrh	r3, [r3, #0]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff ffa4 	bl	800bca4 <ptr_to_mem>
 800bd5c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	429a      	cmp	r2, r3
 800bd64:	d024      	beq.n	800bdb0 <plug_holes+0xc4>
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	791b      	ldrb	r3, [r3, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d120      	bne.n	800bdb0 <plug_holes+0xc4>
 800bd6e:	4b2b      	ldr	r3, [pc, #172]	; (800be1c <plug_holes+0x130>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d01b      	beq.n	800bdb0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bd78:	4b2c      	ldr	r3, [pc, #176]	; (800be2c <plug_holes+0x140>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68fa      	ldr	r2, [r7, #12]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d102      	bne.n	800bd88 <plug_holes+0x9c>
      lfree = mem;
 800bd82:	4a2a      	ldr	r2, [pc, #168]	; (800be2c <plug_holes+0x140>)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	881a      	ldrh	r2, [r3, #0]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd98:	d00a      	beq.n	800bdb0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	881b      	ldrh	r3, [r3, #0]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff ff80 	bl	800bca4 <ptr_to_mem>
 800bda4:	4604      	mov	r4, r0
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff ff8e 	bl	800bcc8 <mem_to_ptr>
 800bdac:	4603      	mov	r3, r0
 800bdae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	885b      	ldrh	r3, [r3, #2]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff ff75 	bl	800bca4 <ptr_to_mem>
 800bdba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d01f      	beq.n	800be04 <plug_holes+0x118>
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	791b      	ldrb	r3, [r3, #4]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d11b      	bne.n	800be04 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bdcc:	4b17      	ldr	r3, [pc, #92]	; (800be2c <plug_holes+0x140>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d102      	bne.n	800bddc <plug_holes+0xf0>
      lfree = pmem;
 800bdd6:	4a15      	ldr	r2, [pc, #84]	; (800be2c <plug_holes+0x140>)
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	881a      	ldrh	r2, [r3, #0]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdec:	d00a      	beq.n	800be04 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	881b      	ldrh	r3, [r3, #0]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7ff ff56 	bl	800bca4 <ptr_to_mem>
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	68b8      	ldr	r0, [r7, #8]
 800bdfc:	f7ff ff64 	bl	800bcc8 <mem_to_ptr>
 800be00:	4603      	mov	r3, r0
 800be02:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800be04:	bf00      	nop
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd90      	pop	{r4, r7, pc}
 800be0c:	20021454 	.word	0x20021454
 800be10:	0801f560 	.word	0x0801f560
 800be14:	0801f590 	.word	0x0801f590
 800be18:	0801f5a8 	.word	0x0801f5a8
 800be1c:	20021458 	.word	0x20021458
 800be20:	0801f5d0 	.word	0x0801f5d0
 800be24:	0801f5ec 	.word	0x0801f5ec
 800be28:	0801f608 	.word	0x0801f608
 800be2c:	20021460 	.word	0x20021460

0800be30 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800be36:	4b1f      	ldr	r3, [pc, #124]	; (800beb4 <mem_init+0x84>)
 800be38:	3303      	adds	r3, #3
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	461a      	mov	r2, r3
 800be40:	4b1d      	ldr	r3, [pc, #116]	; (800beb8 <mem_init+0x88>)
 800be42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800be44:	4b1c      	ldr	r3, [pc, #112]	; (800beb8 <mem_init+0x88>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800be5e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800be62:	f7ff ff1f 	bl	800bca4 <ptr_to_mem>
 800be66:	4603      	mov	r3, r0
 800be68:	4a14      	ldr	r2, [pc, #80]	; (800bebc <mem_init+0x8c>)
 800be6a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800be6c:	4b13      	ldr	r3, [pc, #76]	; (800bebc <mem_init+0x8c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2201      	movs	r2, #1
 800be72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800be74:	4b11      	ldr	r3, [pc, #68]	; (800bebc <mem_init+0x8c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800be7e:	4b0f      	ldr	r3, [pc, #60]	; (800bebc <mem_init+0x8c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800be86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800be88:	4b0b      	ldr	r3, [pc, #44]	; (800beb8 <mem_init+0x88>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4a0c      	ldr	r2, [pc, #48]	; (800bec0 <mem_init+0x90>)
 800be8e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800be90:	480c      	ldr	r0, [pc, #48]	; (800bec4 <mem_init+0x94>)
 800be92:	f00d faf5 	bl	8019480 <sys_mutex_new>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d006      	beq.n	800beaa <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <mem_init+0x98>)
 800be9e:	f240 221f 	movw	r2, #543	; 0x21f
 800bea2:	490a      	ldr	r1, [pc, #40]	; (800becc <mem_init+0x9c>)
 800bea4:	480a      	ldr	r0, [pc, #40]	; (800bed0 <mem_init+0xa0>)
 800bea6:	f00e fa43 	bl	801a330 <iprintf>
  }
}
 800beaa:	bf00      	nop
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20024838 	.word	0x20024838
 800beb8:	20021454 	.word	0x20021454
 800bebc:	20021458 	.word	0x20021458
 800bec0:	20021460 	.word	0x20021460
 800bec4:	2002145c 	.word	0x2002145c
 800bec8:	0801f560 	.word	0x0801f560
 800becc:	0801f634 	.word	0x0801f634
 800bed0:	0801f5a8 	.word	0x0801f5a8

0800bed4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b086      	sub	sp, #24
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7ff fef3 	bl	800bcc8 <mem_to_ptr>
 800bee2:	4603      	mov	r3, r0
 800bee4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	881b      	ldrh	r3, [r3, #0]
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff feda 	bl	800bca4 <ptr_to_mem>
 800bef0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	885b      	ldrh	r3, [r3, #2]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7ff fed4 	bl	800bca4 <ptr_to_mem>
 800befc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf06:	d818      	bhi.n	800bf3a <mem_link_valid+0x66>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	885b      	ldrh	r3, [r3, #2]
 800bf0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf10:	d813      	bhi.n	800bf3a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bf16:	8afa      	ldrh	r2, [r7, #22]
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d004      	beq.n	800bf26 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	8afa      	ldrh	r2, [r7, #22]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d109      	bne.n	800bf3a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bf26:	4b08      	ldr	r3, [pc, #32]	; (800bf48 <mem_link_valid+0x74>)
 800bf28:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bf2a:	693a      	ldr	r2, [r7, #16]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d006      	beq.n	800bf3e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	885b      	ldrh	r3, [r3, #2]
 800bf34:	8afa      	ldrh	r2, [r7, #22]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d001      	beq.n	800bf3e <mem_link_valid+0x6a>
    return 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	e000      	b.n	800bf40 <mem_link_valid+0x6c>
  }
  return 1;
 800bf3e:	2301      	movs	r3, #1
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	20021458 	.word	0x20021458

0800bf4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b088      	sub	sp, #32
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d070      	beq.n	800c03c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f003 0303 	and.w	r3, r3, #3
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00d      	beq.n	800bf80 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bf64:	4b37      	ldr	r3, [pc, #220]	; (800c044 <mem_free+0xf8>)
 800bf66:	f240 2273 	movw	r2, #627	; 0x273
 800bf6a:	4937      	ldr	r1, [pc, #220]	; (800c048 <mem_free+0xfc>)
 800bf6c:	4837      	ldr	r0, [pc, #220]	; (800c04c <mem_free+0x100>)
 800bf6e:	f00e f9df 	bl	801a330 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf72:	f00d fae3 	bl	801953c <sys_arch_protect>
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f00d faed 	bl	8019558 <sys_arch_unprotect>
    return;
 800bf7e:	e05e      	b.n	800c03e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3b08      	subs	r3, #8
 800bf84:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bf86:	4b32      	ldr	r3, [pc, #200]	; (800c050 <mem_free+0x104>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	69fa      	ldr	r2, [r7, #28]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d306      	bcc.n	800bf9e <mem_free+0x52>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f103 020c 	add.w	r2, r3, #12
 800bf96:	4b2f      	ldr	r3, [pc, #188]	; (800c054 <mem_free+0x108>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d90d      	bls.n	800bfba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bf9e:	4b29      	ldr	r3, [pc, #164]	; (800c044 <mem_free+0xf8>)
 800bfa0:	f240 227f 	movw	r2, #639	; 0x27f
 800bfa4:	492c      	ldr	r1, [pc, #176]	; (800c058 <mem_free+0x10c>)
 800bfa6:	4829      	ldr	r0, [pc, #164]	; (800c04c <mem_free+0x100>)
 800bfa8:	f00e f9c2 	bl	801a330 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bfac:	f00d fac6 	bl	801953c <sys_arch_protect>
 800bfb0:	6138      	str	r0, [r7, #16]
 800bfb2:	6938      	ldr	r0, [r7, #16]
 800bfb4:	f00d fad0 	bl	8019558 <sys_arch_unprotect>
    return;
 800bfb8:	e041      	b.n	800c03e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bfba:	4828      	ldr	r0, [pc, #160]	; (800c05c <mem_free+0x110>)
 800bfbc:	f00d fa7c 	bl	80194b8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	791b      	ldrb	r3, [r3, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d110      	bne.n	800bfea <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bfc8:	4b1e      	ldr	r3, [pc, #120]	; (800c044 <mem_free+0xf8>)
 800bfca:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bfce:	4924      	ldr	r1, [pc, #144]	; (800c060 <mem_free+0x114>)
 800bfd0:	481e      	ldr	r0, [pc, #120]	; (800c04c <mem_free+0x100>)
 800bfd2:	f00e f9ad 	bl	801a330 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bfd6:	4821      	ldr	r0, [pc, #132]	; (800c05c <mem_free+0x110>)
 800bfd8:	f00d fa7d 	bl	80194d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bfdc:	f00d faae 	bl	801953c <sys_arch_protect>
 800bfe0:	6178      	str	r0, [r7, #20]
 800bfe2:	6978      	ldr	r0, [r7, #20]
 800bfe4:	f00d fab8 	bl	8019558 <sys_arch_unprotect>
    return;
 800bfe8:	e029      	b.n	800c03e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bfea:	69f8      	ldr	r0, [r7, #28]
 800bfec:	f7ff ff72 	bl	800bed4 <mem_link_valid>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d110      	bne.n	800c018 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bff6:	4b13      	ldr	r3, [pc, #76]	; (800c044 <mem_free+0xf8>)
 800bff8:	f240 2295 	movw	r2, #661	; 0x295
 800bffc:	4919      	ldr	r1, [pc, #100]	; (800c064 <mem_free+0x118>)
 800bffe:	4813      	ldr	r0, [pc, #76]	; (800c04c <mem_free+0x100>)
 800c000:	f00e f996 	bl	801a330 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c004:	4815      	ldr	r0, [pc, #84]	; (800c05c <mem_free+0x110>)
 800c006:	f00d fa66 	bl	80194d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c00a:	f00d fa97 	bl	801953c <sys_arch_protect>
 800c00e:	61b8      	str	r0, [r7, #24]
 800c010:	69b8      	ldr	r0, [r7, #24]
 800c012:	f00d faa1 	bl	8019558 <sys_arch_unprotect>
    return;
 800c016:	e012      	b.n	800c03e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c018:	69fb      	ldr	r3, [r7, #28]
 800c01a:	2200      	movs	r2, #0
 800c01c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c01e:	4b12      	ldr	r3, [pc, #72]	; (800c068 <mem_free+0x11c>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	69fa      	ldr	r2, [r7, #28]
 800c024:	429a      	cmp	r2, r3
 800c026:	d202      	bcs.n	800c02e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c028:	4a0f      	ldr	r2, [pc, #60]	; (800c068 <mem_free+0x11c>)
 800c02a:	69fb      	ldr	r3, [r7, #28]
 800c02c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c02e:	69f8      	ldr	r0, [r7, #28]
 800c030:	f7ff fe5c 	bl	800bcec <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c034:	4809      	ldr	r0, [pc, #36]	; (800c05c <mem_free+0x110>)
 800c036:	f00d fa4e 	bl	80194d6 <sys_mutex_unlock>
 800c03a:	e000      	b.n	800c03e <mem_free+0xf2>
    return;
 800c03c:	bf00      	nop
}
 800c03e:	3720      	adds	r7, #32
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	0801f560 	.word	0x0801f560
 800c048:	0801f650 	.word	0x0801f650
 800c04c:	0801f5a8 	.word	0x0801f5a8
 800c050:	20021454 	.word	0x20021454
 800c054:	20021458 	.word	0x20021458
 800c058:	0801f674 	.word	0x0801f674
 800c05c:	2002145c 	.word	0x2002145c
 800c060:	0801f690 	.word	0x0801f690
 800c064:	0801f6b8 	.word	0x0801f6b8
 800c068:	20021460 	.word	0x20021460

0800c06c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c078:	887b      	ldrh	r3, [r7, #2]
 800c07a:	3303      	adds	r3, #3
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	f023 0303 	bic.w	r3, r3, #3
 800c082:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c084:	8bfb      	ldrh	r3, [r7, #30]
 800c086:	2b0b      	cmp	r3, #11
 800c088:	d801      	bhi.n	800c08e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c08a:	230c      	movs	r3, #12
 800c08c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c08e:	8bfb      	ldrh	r3, [r7, #30]
 800c090:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c094:	d803      	bhi.n	800c09e <mem_trim+0x32>
 800c096:	8bfa      	ldrh	r2, [r7, #30]
 800c098:	887b      	ldrh	r3, [r7, #2]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d201      	bcs.n	800c0a2 <mem_trim+0x36>
    return NULL;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	e0d8      	b.n	800c254 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c0a2:	4b6e      	ldr	r3, [pc, #440]	; (800c25c <mem_trim+0x1f0>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d304      	bcc.n	800c0b6 <mem_trim+0x4a>
 800c0ac:	4b6c      	ldr	r3, [pc, #432]	; (800c260 <mem_trim+0x1f4>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d306      	bcc.n	800c0c4 <mem_trim+0x58>
 800c0b6:	4b6b      	ldr	r3, [pc, #428]	; (800c264 <mem_trim+0x1f8>)
 800c0b8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c0bc:	496a      	ldr	r1, [pc, #424]	; (800c268 <mem_trim+0x1fc>)
 800c0be:	486b      	ldr	r0, [pc, #428]	; (800c26c <mem_trim+0x200>)
 800c0c0:	f00e f936 	bl	801a330 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c0c4:	4b65      	ldr	r3, [pc, #404]	; (800c25c <mem_trim+0x1f0>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d304      	bcc.n	800c0d8 <mem_trim+0x6c>
 800c0ce:	4b64      	ldr	r3, [pc, #400]	; (800c260 <mem_trim+0x1f4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d307      	bcc.n	800c0e8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0d8:	f00d fa30 	bl	801953c <sys_arch_protect>
 800c0dc:	60b8      	str	r0, [r7, #8]
 800c0de:	68b8      	ldr	r0, [r7, #8]
 800c0e0:	f00d fa3a 	bl	8019558 <sys_arch_unprotect>
    return rmem;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	e0b5      	b.n	800c254 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	3b08      	subs	r3, #8
 800c0ec:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c0ee:	69b8      	ldr	r0, [r7, #24]
 800c0f0:	f7ff fdea 	bl	800bcc8 <mem_to_ptr>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	881a      	ldrh	r2, [r3, #0]
 800c0fc:	8afb      	ldrh	r3, [r7, #22]
 800c0fe:	1ad3      	subs	r3, r2, r3
 800c100:	b29b      	uxth	r3, r3
 800c102:	3b08      	subs	r3, #8
 800c104:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c106:	8bfa      	ldrh	r2, [r7, #30]
 800c108:	8abb      	ldrh	r3, [r7, #20]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d906      	bls.n	800c11c <mem_trim+0xb0>
 800c10e:	4b55      	ldr	r3, [pc, #340]	; (800c264 <mem_trim+0x1f8>)
 800c110:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c114:	4956      	ldr	r1, [pc, #344]	; (800c270 <mem_trim+0x204>)
 800c116:	4855      	ldr	r0, [pc, #340]	; (800c26c <mem_trim+0x200>)
 800c118:	f00e f90a 	bl	801a330 <iprintf>
  if (newsize > size) {
 800c11c:	8bfa      	ldrh	r2, [r7, #30]
 800c11e:	8abb      	ldrh	r3, [r7, #20]
 800c120:	429a      	cmp	r2, r3
 800c122:	d901      	bls.n	800c128 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c124:	2300      	movs	r3, #0
 800c126:	e095      	b.n	800c254 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c128:	8bfa      	ldrh	r2, [r7, #30]
 800c12a:	8abb      	ldrh	r3, [r7, #20]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d101      	bne.n	800c134 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	e08f      	b.n	800c254 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c134:	484f      	ldr	r0, [pc, #316]	; (800c274 <mem_trim+0x208>)
 800c136:	f00d f9bf 	bl	80194b8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff fdb0 	bl	800bca4 <ptr_to_mem>
 800c144:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	791b      	ldrb	r3, [r3, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d13f      	bne.n	800c1ce <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c14e:	69bb      	ldr	r3, [r7, #24]
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c156:	d106      	bne.n	800c166 <mem_trim+0xfa>
 800c158:	4b42      	ldr	r3, [pc, #264]	; (800c264 <mem_trim+0x1f8>)
 800c15a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c15e:	4946      	ldr	r1, [pc, #280]	; (800c278 <mem_trim+0x20c>)
 800c160:	4842      	ldr	r0, [pc, #264]	; (800c26c <mem_trim+0x200>)
 800c162:	f00e f8e5 	bl	801a330 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	881b      	ldrh	r3, [r3, #0]
 800c16a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c16c:	8afa      	ldrh	r2, [r7, #22]
 800c16e:	8bfb      	ldrh	r3, [r7, #30]
 800c170:	4413      	add	r3, r2
 800c172:	b29b      	uxth	r3, r3
 800c174:	3308      	adds	r3, #8
 800c176:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c178:	4b40      	ldr	r3, [pc, #256]	; (800c27c <mem_trim+0x210>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	693a      	ldr	r2, [r7, #16]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d106      	bne.n	800c190 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c182:	89fb      	ldrh	r3, [r7, #14]
 800c184:	4618      	mov	r0, r3
 800c186:	f7ff fd8d 	bl	800bca4 <ptr_to_mem>
 800c18a:	4603      	mov	r3, r0
 800c18c:	4a3b      	ldr	r2, [pc, #236]	; (800c27c <mem_trim+0x210>)
 800c18e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c190:	89fb      	ldrh	r3, [r7, #14]
 800c192:	4618      	mov	r0, r3
 800c194:	f7ff fd86 	bl	800bca4 <ptr_to_mem>
 800c198:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	2200      	movs	r2, #0
 800c19e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	89ba      	ldrh	r2, [r7, #12]
 800c1a4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	8afa      	ldrh	r2, [r7, #22]
 800c1aa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	89fa      	ldrh	r2, [r7, #14]
 800c1b0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1ba:	d047      	beq.n	800c24c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	881b      	ldrh	r3, [r3, #0]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7ff fd6f 	bl	800bca4 <ptr_to_mem>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	89fb      	ldrh	r3, [r7, #14]
 800c1ca:	8053      	strh	r3, [r2, #2]
 800c1cc:	e03e      	b.n	800c24c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c1ce:	8bfb      	ldrh	r3, [r7, #30]
 800c1d0:	f103 0214 	add.w	r2, r3, #20
 800c1d4:	8abb      	ldrh	r3, [r7, #20]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d838      	bhi.n	800c24c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c1da:	8afa      	ldrh	r2, [r7, #22]
 800c1dc:	8bfb      	ldrh	r3, [r7, #30]
 800c1de:	4413      	add	r3, r2
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	3308      	adds	r3, #8
 800c1e4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1ee:	d106      	bne.n	800c1fe <mem_trim+0x192>
 800c1f0:	4b1c      	ldr	r3, [pc, #112]	; (800c264 <mem_trim+0x1f8>)
 800c1f2:	f240 3216 	movw	r2, #790	; 0x316
 800c1f6:	4920      	ldr	r1, [pc, #128]	; (800c278 <mem_trim+0x20c>)
 800c1f8:	481c      	ldr	r0, [pc, #112]	; (800c26c <mem_trim+0x200>)
 800c1fa:	f00e f899 	bl	801a330 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c1fe:	89fb      	ldrh	r3, [r7, #14]
 800c200:	4618      	mov	r0, r3
 800c202:	f7ff fd4f 	bl	800bca4 <ptr_to_mem>
 800c206:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c208:	4b1c      	ldr	r3, [pc, #112]	; (800c27c <mem_trim+0x210>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	693a      	ldr	r2, [r7, #16]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d202      	bcs.n	800c218 <mem_trim+0x1ac>
      lfree = mem2;
 800c212:	4a1a      	ldr	r2, [pc, #104]	; (800c27c <mem_trim+0x210>)
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	2200      	movs	r2, #0
 800c21c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	881a      	ldrh	r2, [r3, #0]
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	8afa      	ldrh	r2, [r7, #22]
 800c22a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	89fa      	ldrh	r2, [r7, #14]
 800c230:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	881b      	ldrh	r3, [r3, #0]
 800c236:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c23a:	d007      	beq.n	800c24c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	881b      	ldrh	r3, [r3, #0]
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fd2f 	bl	800bca4 <ptr_to_mem>
 800c246:	4602      	mov	r2, r0
 800c248:	89fb      	ldrh	r3, [r7, #14]
 800c24a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c24c:	4809      	ldr	r0, [pc, #36]	; (800c274 <mem_trim+0x208>)
 800c24e:	f00d f942 	bl	80194d6 <sys_mutex_unlock>
  return rmem;
 800c252:	687b      	ldr	r3, [r7, #4]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3720      	adds	r7, #32
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20021454 	.word	0x20021454
 800c260:	20021458 	.word	0x20021458
 800c264:	0801f560 	.word	0x0801f560
 800c268:	0801f6ec 	.word	0x0801f6ec
 800c26c:	0801f5a8 	.word	0x0801f5a8
 800c270:	0801f704 	.word	0x0801f704
 800c274:	2002145c 	.word	0x2002145c
 800c278:	0801f724 	.word	0x0801f724
 800c27c:	20021460 	.word	0x20021460

0800c280 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b088      	sub	sp, #32
 800c284:	af00      	add	r7, sp, #0
 800c286:	4603      	mov	r3, r0
 800c288:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c28a:	88fb      	ldrh	r3, [r7, #6]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <mem_malloc+0x14>
    return NULL;
 800c290:	2300      	movs	r3, #0
 800c292:	e0e2      	b.n	800c45a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c294:	88fb      	ldrh	r3, [r7, #6]
 800c296:	3303      	adds	r3, #3
 800c298:	b29b      	uxth	r3, r3
 800c29a:	f023 0303 	bic.w	r3, r3, #3
 800c29e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c2a0:	8bbb      	ldrh	r3, [r7, #28]
 800c2a2:	2b0b      	cmp	r3, #11
 800c2a4:	d801      	bhi.n	800c2aa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c2aa:	8bbb      	ldrh	r3, [r7, #28]
 800c2ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2b0:	d803      	bhi.n	800c2ba <mem_malloc+0x3a>
 800c2b2:	8bba      	ldrh	r2, [r7, #28]
 800c2b4:	88fb      	ldrh	r3, [r7, #6]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d201      	bcs.n	800c2be <mem_malloc+0x3e>
    return NULL;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e0cd      	b.n	800c45a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c2be:	4869      	ldr	r0, [pc, #420]	; (800c464 <mem_malloc+0x1e4>)
 800c2c0:	f00d f8fa 	bl	80194b8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2c4:	4b68      	ldr	r3, [pc, #416]	; (800c468 <mem_malloc+0x1e8>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7ff fcfd 	bl	800bcc8 <mem_to_ptr>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	83fb      	strh	r3, [r7, #30]
 800c2d2:	e0b7      	b.n	800c444 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c2d4:	8bfb      	ldrh	r3, [r7, #30]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7ff fce4 	bl	800bca4 <ptr_to_mem>
 800c2dc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	791b      	ldrb	r3, [r3, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f040 80a7 	bne.w	800c436 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	881b      	ldrh	r3, [r3, #0]
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	8bfb      	ldrh	r3, [r7, #30]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	f1a3 0208 	sub.w	r2, r3, #8
 800c2f6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	f0c0 809c 	bcc.w	800c436 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	461a      	mov	r2, r3
 800c304:	8bfb      	ldrh	r3, [r7, #30]
 800c306:	1ad3      	subs	r3, r2, r3
 800c308:	f1a3 0208 	sub.w	r2, r3, #8
 800c30c:	8bbb      	ldrh	r3, [r7, #28]
 800c30e:	3314      	adds	r3, #20
 800c310:	429a      	cmp	r2, r3
 800c312:	d333      	bcc.n	800c37c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c314:	8bfa      	ldrh	r2, [r7, #30]
 800c316:	8bbb      	ldrh	r3, [r7, #28]
 800c318:	4413      	add	r3, r2
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	3308      	adds	r3, #8
 800c31e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c320:	8a7b      	ldrh	r3, [r7, #18]
 800c322:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c326:	d106      	bne.n	800c336 <mem_malloc+0xb6>
 800c328:	4b50      	ldr	r3, [pc, #320]	; (800c46c <mem_malloc+0x1ec>)
 800c32a:	f240 3287 	movw	r2, #903	; 0x387
 800c32e:	4950      	ldr	r1, [pc, #320]	; (800c470 <mem_malloc+0x1f0>)
 800c330:	4850      	ldr	r0, [pc, #320]	; (800c474 <mem_malloc+0x1f4>)
 800c332:	f00d fffd 	bl	801a330 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c336:	8a7b      	ldrh	r3, [r7, #18]
 800c338:	4618      	mov	r0, r3
 800c33a:	f7ff fcb3 	bl	800bca4 <ptr_to_mem>
 800c33e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2200      	movs	r2, #0
 800c344:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	881a      	ldrh	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	8bfa      	ldrh	r2, [r7, #30]
 800c352:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	8a7a      	ldrh	r2, [r7, #18]
 800c358:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	2201      	movs	r2, #1
 800c35e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	881b      	ldrh	r3, [r3, #0]
 800c364:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c368:	d00b      	beq.n	800c382 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	881b      	ldrh	r3, [r3, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	f7ff fc98 	bl	800bca4 <ptr_to_mem>
 800c374:	4602      	mov	r2, r0
 800c376:	8a7b      	ldrh	r3, [r7, #18]
 800c378:	8053      	strh	r3, [r2, #2]
 800c37a:	e002      	b.n	800c382 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	2201      	movs	r2, #1
 800c380:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c382:	4b39      	ldr	r3, [pc, #228]	; (800c468 <mem_malloc+0x1e8>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	697a      	ldr	r2, [r7, #20]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d127      	bne.n	800c3dc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c38c:	4b36      	ldr	r3, [pc, #216]	; (800c468 <mem_malloc+0x1e8>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c392:	e005      	b.n	800c3a0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7ff fc83 	bl	800bca4 <ptr_to_mem>
 800c39e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	791b      	ldrb	r3, [r3, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d004      	beq.n	800c3b2 <mem_malloc+0x132>
 800c3a8:	4b33      	ldr	r3, [pc, #204]	; (800c478 <mem_malloc+0x1f8>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	69ba      	ldr	r2, [r7, #24]
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d1f0      	bne.n	800c394 <mem_malloc+0x114>
          }
          lfree = cur;
 800c3b2:	4a2d      	ldr	r2, [pc, #180]	; (800c468 <mem_malloc+0x1e8>)
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c3b8:	4b2b      	ldr	r3, [pc, #172]	; (800c468 <mem_malloc+0x1e8>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	4b2e      	ldr	r3, [pc, #184]	; (800c478 <mem_malloc+0x1f8>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d00b      	beq.n	800c3dc <mem_malloc+0x15c>
 800c3c4:	4b28      	ldr	r3, [pc, #160]	; (800c468 <mem_malloc+0x1e8>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	791b      	ldrb	r3, [r3, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d006      	beq.n	800c3dc <mem_malloc+0x15c>
 800c3ce:	4b27      	ldr	r3, [pc, #156]	; (800c46c <mem_malloc+0x1ec>)
 800c3d0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c3d4:	4929      	ldr	r1, [pc, #164]	; (800c47c <mem_malloc+0x1fc>)
 800c3d6:	4827      	ldr	r0, [pc, #156]	; (800c474 <mem_malloc+0x1f4>)
 800c3d8:	f00d ffaa 	bl	801a330 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c3dc:	4821      	ldr	r0, [pc, #132]	; (800c464 <mem_malloc+0x1e4>)
 800c3de:	f00d f87a 	bl	80194d6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c3e2:	8bba      	ldrh	r2, [r7, #28]
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	4a23      	ldr	r2, [pc, #140]	; (800c478 <mem_malloc+0x1f8>)
 800c3ec:	6812      	ldr	r2, [r2, #0]
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d906      	bls.n	800c400 <mem_malloc+0x180>
 800c3f2:	4b1e      	ldr	r3, [pc, #120]	; (800c46c <mem_malloc+0x1ec>)
 800c3f4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c3f8:	4921      	ldr	r1, [pc, #132]	; (800c480 <mem_malloc+0x200>)
 800c3fa:	481e      	ldr	r0, [pc, #120]	; (800c474 <mem_malloc+0x1f4>)
 800c3fc:	f00d ff98 	bl	801a330 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f003 0303 	and.w	r3, r3, #3
 800c406:	2b00      	cmp	r3, #0
 800c408:	d006      	beq.n	800c418 <mem_malloc+0x198>
 800c40a:	4b18      	ldr	r3, [pc, #96]	; (800c46c <mem_malloc+0x1ec>)
 800c40c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c410:	491c      	ldr	r1, [pc, #112]	; (800c484 <mem_malloc+0x204>)
 800c412:	4818      	ldr	r0, [pc, #96]	; (800c474 <mem_malloc+0x1f4>)
 800c414:	f00d ff8c 	bl	801a330 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	f003 0303 	and.w	r3, r3, #3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d006      	beq.n	800c430 <mem_malloc+0x1b0>
 800c422:	4b12      	ldr	r3, [pc, #72]	; (800c46c <mem_malloc+0x1ec>)
 800c424:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c428:	4917      	ldr	r1, [pc, #92]	; (800c488 <mem_malloc+0x208>)
 800c42a:	4812      	ldr	r0, [pc, #72]	; (800c474 <mem_malloc+0x1f4>)
 800c42c:	f00d ff80 	bl	801a330 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c430:	697b      	ldr	r3, [r7, #20]
 800c432:	3308      	adds	r3, #8
 800c434:	e011      	b.n	800c45a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c436:	8bfb      	ldrh	r3, [r7, #30]
 800c438:	4618      	mov	r0, r3
 800c43a:	f7ff fc33 	bl	800bca4 <ptr_to_mem>
 800c43e:	4603      	mov	r3, r0
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c444:	8bfa      	ldrh	r2, [r7, #30]
 800c446:	8bbb      	ldrh	r3, [r7, #28]
 800c448:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c44c:	429a      	cmp	r2, r3
 800c44e:	f4ff af41 	bcc.w	800c2d4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c452:	4804      	ldr	r0, [pc, #16]	; (800c464 <mem_malloc+0x1e4>)
 800c454:	f00d f83f 	bl	80194d6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3720      	adds	r7, #32
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	2002145c 	.word	0x2002145c
 800c468:	20021460 	.word	0x20021460
 800c46c:	0801f560 	.word	0x0801f560
 800c470:	0801f724 	.word	0x0801f724
 800c474:	0801f5a8 	.word	0x0801f5a8
 800c478:	20021458 	.word	0x20021458
 800c47c:	0801f738 	.word	0x0801f738
 800c480:	0801f754 	.word	0x0801f754
 800c484:	0801f784 	.word	0x0801f784
 800c488:	0801f7b4 	.word	0x0801f7b4

0800c48c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	3303      	adds	r3, #3
 800c4a2:	f023 0303 	bic.w	r3, r3, #3
 800c4a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	60fb      	str	r3, [r7, #12]
 800c4ac:	e011      	b.n	800c4d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	881b      	ldrh	r3, [r3, #0]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	60fb      	str	r3, [r7, #12]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	885b      	ldrh	r3, [r3, #2]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	dbe7      	blt.n	800c4ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c4de:	bf00      	nop
 800c4e0:	bf00      	nop
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	80fb      	strh	r3, [r7, #6]
 800c4f6:	e009      	b.n	800c50c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c4f8:	88fb      	ldrh	r3, [r7, #6]
 800c4fa:	4a08      	ldr	r2, [pc, #32]	; (800c51c <memp_init+0x30>)
 800c4fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c500:	4618      	mov	r0, r3
 800c502:	f7ff ffc3 	bl	800c48c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c506:	88fb      	ldrh	r3, [r7, #6]
 800c508:	3301      	adds	r3, #1
 800c50a:	80fb      	strh	r3, [r7, #6]
 800c50c:	88fb      	ldrh	r3, [r7, #6]
 800c50e:	2b0d      	cmp	r3, #13
 800c510:	d9f2      	bls.n	800c4f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c512:	bf00      	nop
 800c514:	bf00      	nop
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	080223f8 	.word	0x080223f8

0800c520 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c528:	f00d f808 	bl	801953c <sys_arch_protect>
 800c52c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d015      	beq.n	800c568 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	6812      	ldr	r2, [r2, #0]
 800c544:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	f003 0303 	and.w	r3, r3, #3
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d006      	beq.n	800c55e <do_memp_malloc_pool+0x3e>
 800c550:	4b09      	ldr	r3, [pc, #36]	; (800c578 <do_memp_malloc_pool+0x58>)
 800c552:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c556:	4909      	ldr	r1, [pc, #36]	; (800c57c <do_memp_malloc_pool+0x5c>)
 800c558:	4809      	ldr	r0, [pc, #36]	; (800c580 <do_memp_malloc_pool+0x60>)
 800c55a:	f00d fee9 	bl	801a330 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c55e:	68f8      	ldr	r0, [r7, #12]
 800c560:	f00c fffa 	bl	8019558 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	e003      	b.n	800c570 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c568:	68f8      	ldr	r0, [r7, #12]
 800c56a:	f00c fff5 	bl	8019558 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	0801f7d8 	.word	0x0801f7d8
 800c57c:	0801f808 	.word	0x0801f808
 800c580:	0801f82c 	.word	0x0801f82c

0800c584 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c58e:	79fb      	ldrb	r3, [r7, #7]
 800c590:	2b0d      	cmp	r3, #13
 800c592:	d908      	bls.n	800c5a6 <memp_malloc+0x22>
 800c594:	4b0a      	ldr	r3, [pc, #40]	; (800c5c0 <memp_malloc+0x3c>)
 800c596:	f240 1257 	movw	r2, #343	; 0x157
 800c59a:	490a      	ldr	r1, [pc, #40]	; (800c5c4 <memp_malloc+0x40>)
 800c59c:	480a      	ldr	r0, [pc, #40]	; (800c5c8 <memp_malloc+0x44>)
 800c59e:	f00d fec7 	bl	801a330 <iprintf>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	e008      	b.n	800c5b8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c5a6:	79fb      	ldrb	r3, [r7, #7]
 800c5a8:	4a08      	ldr	r2, [pc, #32]	; (800c5cc <memp_malloc+0x48>)
 800c5aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7ff ffb6 	bl	800c520 <do_memp_malloc_pool>
 800c5b4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	0801f7d8 	.word	0x0801f7d8
 800c5c4:	0801f868 	.word	0x0801f868
 800c5c8:	0801f82c 	.word	0x0801f82c
 800c5cc:	080223f8 	.word	0x080223f8

0800c5d0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b084      	sub	sp, #16
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	f003 0303 	and.w	r3, r3, #3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d006      	beq.n	800c5f2 <do_memp_free_pool+0x22>
 800c5e4:	4b0d      	ldr	r3, [pc, #52]	; (800c61c <do_memp_free_pool+0x4c>)
 800c5e6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c5ea:	490d      	ldr	r1, [pc, #52]	; (800c620 <do_memp_free_pool+0x50>)
 800c5ec:	480d      	ldr	r0, [pc, #52]	; (800c624 <do_memp_free_pool+0x54>)
 800c5ee:	f00d fe9f 	bl	801a330 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c5f6:	f00c ffa1 	bl	801953c <sys_arch_protect>
 800c5fa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	689b      	ldr	r3, [r3, #8]
 800c600:	681a      	ldr	r2, [r3, #0]
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c60e:	68b8      	ldr	r0, [r7, #8]
 800c610:	f00c ffa2 	bl	8019558 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	0801f7d8 	.word	0x0801f7d8
 800c620:	0801f888 	.word	0x0801f888
 800c624:	0801f82c 	.word	0x0801f82c

0800c628 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	4603      	mov	r3, r0
 800c630:	6039      	str	r1, [r7, #0]
 800c632:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	2b0d      	cmp	r3, #13
 800c638:	d907      	bls.n	800c64a <memp_free+0x22>
 800c63a:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <memp_free+0x44>)
 800c63c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c640:	490b      	ldr	r1, [pc, #44]	; (800c670 <memp_free+0x48>)
 800c642:	480c      	ldr	r0, [pc, #48]	; (800c674 <memp_free+0x4c>)
 800c644:	f00d fe74 	bl	801a330 <iprintf>
 800c648:	e00c      	b.n	800c664 <memp_free+0x3c>

  if (mem == NULL) {
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d008      	beq.n	800c662 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	4a09      	ldr	r2, [pc, #36]	; (800c678 <memp_free+0x50>)
 800c654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c658:	6839      	ldr	r1, [r7, #0]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff ffb8 	bl	800c5d0 <do_memp_free_pool>
 800c660:	e000      	b.n	800c664 <memp_free+0x3c>
    return;
 800c662:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	0801f7d8 	.word	0x0801f7d8
 800c670:	0801f8a8 	.word	0x0801f8a8
 800c674:	0801f82c 	.word	0x0801f82c
 800c678:	080223f8 	.word	0x080223f8

0800c67c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c67c:	b480      	push	{r7}
 800c67e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c680:	bf00      	nop
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
	...

0800c68c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b086      	sub	sp, #24
 800c690:	af00      	add	r7, sp, #0
 800c692:	60f8      	str	r0, [r7, #12]
 800c694:	60b9      	str	r1, [r7, #8]
 800c696:	607a      	str	r2, [r7, #4]
 800c698:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d108      	bne.n	800c6b2 <netif_add+0x26>
 800c6a0:	4b5b      	ldr	r3, [pc, #364]	; (800c810 <netif_add+0x184>)
 800c6a2:	f240 1227 	movw	r2, #295	; 0x127
 800c6a6:	495b      	ldr	r1, [pc, #364]	; (800c814 <netif_add+0x188>)
 800c6a8:	485b      	ldr	r0, [pc, #364]	; (800c818 <netif_add+0x18c>)
 800c6aa:	f00d fe41 	bl	801a330 <iprintf>
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	e0a9      	b.n	800c806 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d108      	bne.n	800c6ca <netif_add+0x3e>
 800c6b8:	4b55      	ldr	r3, [pc, #340]	; (800c810 <netif_add+0x184>)
 800c6ba:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c6be:	4957      	ldr	r1, [pc, #348]	; (800c81c <netif_add+0x190>)
 800c6c0:	4855      	ldr	r0, [pc, #340]	; (800c818 <netif_add+0x18c>)
 800c6c2:	f00d fe35 	bl	801a330 <iprintf>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	e09d      	b.n	800c806 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d101      	bne.n	800c6d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c6d0:	4b53      	ldr	r3, [pc, #332]	; (800c820 <netif_add+0x194>)
 800c6d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c6da:	4b51      	ldr	r3, [pc, #324]	; (800c820 <netif_add+0x194>)
 800c6dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d101      	bne.n	800c6e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c6e4:	4b4e      	ldr	r3, [pc, #312]	; (800c820 <netif_add+0x194>)
 800c6e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	4a49      	ldr	r2, [pc, #292]	; (800c824 <netif_add+0x198>)
 800c6fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3324      	adds	r3, #36	; 0x24
 800c712:	2204      	movs	r2, #4
 800c714:	2100      	movs	r1, #0
 800c716:	4618      	mov	r0, r3
 800c718:	f00c ff88 	bl	801962c <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	2200      	movs	r2, #0
 800c720:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6a3a      	ldr	r2, [r7, #32]
 800c726:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c728:	4b3f      	ldr	r3, [pc, #252]	; (800c828 <netif_add+0x19c>)
 800c72a:	781a      	ldrb	r2, [r3, #0]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c736:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	68b9      	ldr	r1, [r7, #8]
 800c73e:	68f8      	ldr	r0, [r7, #12]
 800c740:	f000 f914 	bl	800c96c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	4798      	blx	r3
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <netif_add+0xc8>
    return NULL;
 800c750:	2300      	movs	r3, #0
 800c752:	e058      	b.n	800c806 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c75a:	2bff      	cmp	r3, #255	; 0xff
 800c75c:	d103      	bne.n	800c766 <netif_add+0xda>
        netif->num = 0;
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c766:	2300      	movs	r3, #0
 800c768:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c76a:	4b30      	ldr	r3, [pc, #192]	; (800c82c <netif_add+0x1a0>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	e02b      	b.n	800c7ca <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	429a      	cmp	r2, r3
 800c778:	d106      	bne.n	800c788 <netif_add+0xfc>
 800c77a:	4b25      	ldr	r3, [pc, #148]	; (800c810 <netif_add+0x184>)
 800c77c:	f240 128b 	movw	r2, #395	; 0x18b
 800c780:	492b      	ldr	r1, [pc, #172]	; (800c830 <netif_add+0x1a4>)
 800c782:	4825      	ldr	r0, [pc, #148]	; (800c818 <netif_add+0x18c>)
 800c784:	f00d fdd4 	bl	801a330 <iprintf>
        num_netifs++;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	3301      	adds	r3, #1
 800c78c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	2bff      	cmp	r3, #255	; 0xff
 800c792:	dd06      	ble.n	800c7a2 <netif_add+0x116>
 800c794:	4b1e      	ldr	r3, [pc, #120]	; (800c810 <netif_add+0x184>)
 800c796:	f240 128d 	movw	r2, #397	; 0x18d
 800c79a:	4926      	ldr	r1, [pc, #152]	; (800c834 <netif_add+0x1a8>)
 800c79c:	481e      	ldr	r0, [pc, #120]	; (800c818 <netif_add+0x18c>)
 800c79e:	f00d fdc7 	bl	801a330 <iprintf>
        if (netif2->num == netif->num) {
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d108      	bne.n	800c7c4 <netif_add+0x138>
          netif->num++;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	b2da      	uxtb	r2, r3
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c7c2:	e005      	b.n	800c7d0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	617b      	str	r3, [r7, #20]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1d0      	bne.n	800c772 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1be      	bne.n	800c754 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7dc:	2bfe      	cmp	r3, #254	; 0xfe
 800c7de:	d103      	bne.n	800c7e8 <netif_add+0x15c>
    netif_num = 0;
 800c7e0:	4b11      	ldr	r3, [pc, #68]	; (800c828 <netif_add+0x19c>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	e006      	b.n	800c7f6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <netif_add+0x19c>)
 800c7f4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c7f6:	4b0d      	ldr	r3, [pc, #52]	; (800c82c <netif_add+0x1a0>)
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c7fe:	4a0b      	ldr	r2, [pc, #44]	; (800c82c <netif_add+0x1a0>)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c804:	68fb      	ldr	r3, [r7, #12]
}
 800c806:	4618      	mov	r0, r3
 800c808:	3718      	adds	r7, #24
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	0801f8c4 	.word	0x0801f8c4
 800c814:	0801f958 	.word	0x0801f958
 800c818:	0801f914 	.word	0x0801f914
 800c81c:	0801f974 	.word	0x0801f974
 800c820:	08022488 	.word	0x08022488
 800c824:	0800cc4f 	.word	0x0800cc4f
 800c828:	2002149c 	.word	0x2002149c
 800c82c:	2002809c 	.word	0x2002809c
 800c830:	0801f998 	.word	0x0801f998
 800c834:	0801f9ac 	.word	0x0801f9ac

0800c838 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f003 f82d 	bl	800f8a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c84a:	6839      	ldr	r1, [r7, #0]
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f008 f8ff 	bl	8014a50 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c852:	bf00      	nop
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b086      	sub	sp, #24
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d106      	bne.n	800c87c <netif_do_set_ipaddr+0x20>
 800c86e:	4b1d      	ldr	r3, [pc, #116]	; (800c8e4 <netif_do_set_ipaddr+0x88>)
 800c870:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c874:	491c      	ldr	r1, [pc, #112]	; (800c8e8 <netif_do_set_ipaddr+0x8c>)
 800c876:	481d      	ldr	r0, [pc, #116]	; (800c8ec <netif_do_set_ipaddr+0x90>)
 800c878:	f00d fd5a 	bl	801a330 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d106      	bne.n	800c890 <netif_do_set_ipaddr+0x34>
 800c882:	4b18      	ldr	r3, [pc, #96]	; (800c8e4 <netif_do_set_ipaddr+0x88>)
 800c884:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c888:	4917      	ldr	r1, [pc, #92]	; (800c8e8 <netif_do_set_ipaddr+0x8c>)
 800c88a:	4818      	ldr	r0, [pc, #96]	; (800c8ec <netif_do_set_ipaddr+0x90>)
 800c88c:	f00d fd50 	bl	801a330 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3304      	adds	r3, #4
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d01c      	beq.n	800c8d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	3304      	adds	r3, #4
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c8ae:	f107 0314 	add.w	r3, r7, #20
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7ff ffbf 	bl	800c838 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <netif_do_set_ipaddr+0x6a>
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	e000      	b.n	800c8c8 <netif_do_set_ipaddr+0x6c>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c8cc:	2101      	movs	r1, #1
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f000 f8d2 	bl	800ca78 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e000      	b.n	800c8da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c8d8:	2300      	movs	r3, #0
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3718      	adds	r7, #24
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	0801f8c4 	.word	0x0801f8c4
 800c8e8:	0801f9dc 	.word	0x0801f9dc
 800c8ec:	0801f914 	.word	0x0801f914

0800c8f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b085      	sub	sp, #20
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	3308      	adds	r3, #8
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	429a      	cmp	r2, r3
 800c908:	d00a      	beq.n	800c920 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d002      	beq.n	800c916 <netif_do_set_netmask+0x26>
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	e000      	b.n	800c918 <netif_do_set_netmask+0x28>
 800c916:	2300      	movs	r3, #0
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c91c:	2301      	movs	r3, #1
 800c91e:	e000      	b.n	800c922 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c920:	2300      	movs	r3, #0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c92e:	b480      	push	{r7}
 800c930:	b085      	sub	sp, #20
 800c932:	af00      	add	r7, sp, #0
 800c934:	60f8      	str	r0, [r7, #12]
 800c936:	60b9      	str	r1, [r7, #8]
 800c938:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	330c      	adds	r3, #12
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d00a      	beq.n	800c95e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <netif_do_set_gw+0x26>
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	e000      	b.n	800c956 <netif_do_set_gw+0x28>
 800c954:	2300      	movs	r3, #0
 800c956:	68fa      	ldr	r2, [r7, #12]
 800c958:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c95a:	2301      	movs	r3, #1
 800c95c:	e000      	b.n	800c960 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c97e:	2300      	movs	r3, #0
 800c980:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c988:	4b1c      	ldr	r3, [pc, #112]	; (800c9fc <netif_set_addr+0x90>)
 800c98a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c992:	4b1a      	ldr	r3, [pc, #104]	; (800c9fc <netif_set_addr+0x90>)
 800c994:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c99c:	4b17      	ldr	r3, [pc, #92]	; (800c9fc <netif_set_addr+0x90>)
 800c99e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <netif_set_addr+0x42>
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d101      	bne.n	800c9b2 <netif_set_addr+0x46>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e000      	b.n	800c9b4 <netif_set_addr+0x48>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d006      	beq.n	800c9ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c9bc:	f107 0310 	add.w	r3, r7, #16
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	68b9      	ldr	r1, [r7, #8]
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	f7ff ff49 	bl	800c85c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c9ca:	69fa      	ldr	r2, [r7, #28]
 800c9cc:	6879      	ldr	r1, [r7, #4]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7ff ff8e 	bl	800c8f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c9d4:	69ba      	ldr	r2, [r7, #24]
 800c9d6:	6839      	ldr	r1, [r7, #0]
 800c9d8:	68f8      	ldr	r0, [r7, #12]
 800c9da:	f7ff ffa8 	bl	800c92e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d106      	bne.n	800c9f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c9e4:	f107 0310 	add.w	r3, r7, #16
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	68b9      	ldr	r1, [r7, #8]
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f7ff ff35 	bl	800c85c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c9f2:	bf00      	nop
 800c9f4:	3720      	adds	r7, #32
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	08022488 	.word	0x08022488

0800ca00 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ca08:	4a04      	ldr	r2, [pc, #16]	; (800ca1c <netif_set_default+0x1c>)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ca0e:	bf00      	nop
 800ca10:	370c      	adds	r7, #12
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	200280a0 	.word	0x200280a0

0800ca20 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d107      	bne.n	800ca3e <netif_set_up+0x1e>
 800ca2e:	4b0f      	ldr	r3, [pc, #60]	; (800ca6c <netif_set_up+0x4c>)
 800ca30:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ca34:	490e      	ldr	r1, [pc, #56]	; (800ca70 <netif_set_up+0x50>)
 800ca36:	480f      	ldr	r0, [pc, #60]	; (800ca74 <netif_set_up+0x54>)
 800ca38:	f00d fc7a 	bl	801a330 <iprintf>
 800ca3c:	e013      	b.n	800ca66 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca44:	f003 0301 	and.w	r3, r3, #1
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10c      	bne.n	800ca66 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca52:	f043 0301 	orr.w	r3, r3, #1
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca5e:	2103      	movs	r1, #3
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f809 	bl	800ca78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ca66:	3708      	adds	r7, #8
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	0801f8c4 	.word	0x0801f8c4
 800ca70:	0801fa4c 	.word	0x0801fa4c
 800ca74:	0801f914 	.word	0x0801f914

0800ca78 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d106      	bne.n	800ca98 <netif_issue_reports+0x20>
 800ca8a:	4b18      	ldr	r3, [pc, #96]	; (800caec <netif_issue_reports+0x74>)
 800ca8c:	f240 326d 	movw	r2, #877	; 0x36d
 800ca90:	4917      	ldr	r1, [pc, #92]	; (800caf0 <netif_issue_reports+0x78>)
 800ca92:	4818      	ldr	r0, [pc, #96]	; (800caf4 <netif_issue_reports+0x7c>)
 800ca94:	f00d fc4c 	bl	801a330 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ca9e:	f003 0304 	and.w	r3, r3, #4
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d01e      	beq.n	800cae4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800caac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d017      	beq.n	800cae4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cab4:	78fb      	ldrb	r3, [r7, #3]
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d013      	beq.n	800cae6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	3304      	adds	r3, #4
 800cac2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00e      	beq.n	800cae6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cace:	f003 0308 	and.w	r3, r3, #8
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d007      	beq.n	800cae6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	3304      	adds	r3, #4
 800cada:	4619      	mov	r1, r3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f00a fe09 	bl	80176f4 <etharp_request>
 800cae2:	e000      	b.n	800cae6 <netif_issue_reports+0x6e>
    return;
 800cae4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	0801f8c4 	.word	0x0801f8c4
 800caf0:	0801fa68 	.word	0x0801fa68
 800caf4:	0801f914 	.word	0x0801f914

0800caf8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d107      	bne.n	800cb16 <netif_set_down+0x1e>
 800cb06:	4b12      	ldr	r3, [pc, #72]	; (800cb50 <netif_set_down+0x58>)
 800cb08:	f240 329b 	movw	r2, #923	; 0x39b
 800cb0c:	4911      	ldr	r1, [pc, #68]	; (800cb54 <netif_set_down+0x5c>)
 800cb0e:	4812      	ldr	r0, [pc, #72]	; (800cb58 <netif_set_down+0x60>)
 800cb10:	f00d fc0e 	bl	801a330 <iprintf>
 800cb14:	e019      	b.n	800cb4a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb1c:	f003 0301 	and.w	r3, r3, #1
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d012      	beq.n	800cb4a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb2a:	f023 0301 	bic.w	r3, r3, #1
 800cb2e:	b2da      	uxtb	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb3c:	f003 0308 	and.w	r3, r3, #8
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f00a f98f 	bl	8016e68 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	0801f8c4 	.word	0x0801f8c4
 800cb54:	0801fa8c 	.word	0x0801fa8c
 800cb58:	0801f914 	.word	0x0801f914

0800cb5c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d107      	bne.n	800cb7a <netif_set_link_up+0x1e>
 800cb6a:	4b15      	ldr	r3, [pc, #84]	; (800cbc0 <netif_set_link_up+0x64>)
 800cb6c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cb70:	4914      	ldr	r1, [pc, #80]	; (800cbc4 <netif_set_link_up+0x68>)
 800cb72:	4815      	ldr	r0, [pc, #84]	; (800cbc8 <netif_set_link_up+0x6c>)
 800cb74:	f00d fbdc 	bl	801a330 <iprintf>
 800cb78:	e01e      	b.n	800cbb8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb80:	f003 0304 	and.w	r3, r3, #4
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d117      	bne.n	800cbb8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cb8e:	f043 0304 	orr.w	r3, r3, #4
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f008 fba4 	bl	80152e8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cba0:	2103      	movs	r1, #3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff ff68 	bl	800ca78 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d003      	beq.n	800cbb8 <netif_set_link_up+0x5c>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	69db      	ldr	r3, [r3, #28]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	0801f8c4 	.word	0x0801f8c4
 800cbc4:	0801faac 	.word	0x0801faac
 800cbc8:	0801f914 	.word	0x0801f914

0800cbcc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d107      	bne.n	800cbea <netif_set_link_down+0x1e>
 800cbda:	4b11      	ldr	r3, [pc, #68]	; (800cc20 <netif_set_link_down+0x54>)
 800cbdc:	f240 4206 	movw	r2, #1030	; 0x406
 800cbe0:	4910      	ldr	r1, [pc, #64]	; (800cc24 <netif_set_link_down+0x58>)
 800cbe2:	4811      	ldr	r0, [pc, #68]	; (800cc28 <netif_set_link_down+0x5c>)
 800cbe4:	f00d fba4 	bl	801a330 <iprintf>
 800cbe8:	e017      	b.n	800cc1a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbf0:	f003 0304 	and.w	r3, r3, #4
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d010      	beq.n	800cc1a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbfe:	f023 0304 	bic.w	r3, r3, #4
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	69db      	ldr	r3, [r3, #28]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d003      	beq.n	800cc1a <netif_set_link_down+0x4e>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	69db      	ldr	r3, [r3, #28]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cc1a:	3708      	adds	r7, #8
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	0801f8c4 	.word	0x0801f8c4
 800cc24:	0801fad0 	.word	0x0801fad0
 800cc28:	0801f914 	.word	0x0801f914

0800cc2c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	683a      	ldr	r2, [r7, #0]
 800cc40:	61da      	str	r2, [r3, #28]
  }
}
 800cc42:	bf00      	nop
 800cc44:	370c      	adds	r7, #12
 800cc46:	46bd      	mov	sp, r7
 800cc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4c:	4770      	bx	lr

0800cc4e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cc4e:	b480      	push	{r7}
 800cc50:	b085      	sub	sp, #20
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	60f8      	str	r0, [r7, #12]
 800cc56:	60b9      	str	r1, [r7, #8]
 800cc58:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cc5a:	f06f 030b 	mvn.w	r3, #11
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
	...

0800cc6c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cc76:	79fb      	ldrb	r3, [r7, #7]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d013      	beq.n	800cca4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	; (800ccb4 <netif_get_by_index+0x48>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	60fb      	str	r3, [r7, #12]
 800cc82:	e00c      	b.n	800cc9e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	79fa      	ldrb	r2, [r7, #7]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d101      	bne.n	800cc98 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	e006      	b.n	800cca6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1ef      	bne.n	800cc84 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3714      	adds	r7, #20
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	2002809c 	.word	0x2002809c

0800ccb8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ccbe:	f00c fc3d 	bl	801953c <sys_arch_protect>
 800ccc2:	6038      	str	r0, [r7, #0]
 800ccc4:	4b0d      	ldr	r3, [pc, #52]	; (800ccfc <pbuf_free_ooseq+0x44>)
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	701a      	strb	r2, [r3, #0]
 800ccca:	6838      	ldr	r0, [r7, #0]
 800cccc:	f00c fc44 	bl	8019558 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <pbuf_free_ooseq+0x48>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	607b      	str	r3, [r7, #4]
 800ccd6:	e00a      	b.n	800ccee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d003      	beq.n	800cce8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f002 fe1d 	bl	800f920 <tcp_free_ooseq>
      return;
 800cce6:	e005      	b.n	800ccf4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	607b      	str	r3, [r7, #4]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1f1      	bne.n	800ccd8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	200280a4 	.word	0x200280a4
 800cd00:	200280ac 	.word	0x200280ac

0800cd04 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cd0c:	f7ff ffd4 	bl	800ccb8 <pbuf_free_ooseq>
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cd1e:	f00c fc0d 	bl	801953c <sys_arch_protect>
 800cd22:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cd24:	4b0f      	ldr	r3, [pc, #60]	; (800cd64 <pbuf_pool_is_empty+0x4c>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cd2a:	4b0e      	ldr	r3, [pc, #56]	; (800cd64 <pbuf_pool_is_empty+0x4c>)
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f00c fc11 	bl	8019558 <sys_arch_unprotect>

  if (!queued) {
 800cd36:	78fb      	ldrb	r3, [r7, #3]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10f      	bne.n	800cd5c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	480a      	ldr	r0, [pc, #40]	; (800cd68 <pbuf_pool_is_empty+0x50>)
 800cd40:	f7fd fef4 	bl	800ab2c <tcpip_try_callback>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d008      	beq.n	800cd5c <pbuf_pool_is_empty+0x44>
 800cd4a:	f00c fbf7 	bl	801953c <sys_arch_protect>
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	4b04      	ldr	r3, [pc, #16]	; (800cd64 <pbuf_pool_is_empty+0x4c>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	701a      	strb	r2, [r3, #0]
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f00c fbfe 	bl	8019558 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cd5c:	bf00      	nop
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	200280a4 	.word	0x200280a4
 800cd68:	0800cd05 	.word	0x0800cd05

0800cd6c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	4611      	mov	r1, r2
 800cd78:	461a      	mov	r2, r3
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	80fb      	strh	r3, [r7, #6]
 800cd7e:	4613      	mov	r3, r2
 800cd80:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2200      	movs	r2, #0
 800cd86:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	88fa      	ldrh	r2, [r7, #6]
 800cd92:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	88ba      	ldrh	r2, [r7, #4]
 800cd98:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cd9a:	8b3b      	ldrh	r3, [r7, #24]
 800cd9c:	b2da      	uxtb	r2, r3
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	7f3a      	ldrb	r2, [r7, #28]
 800cda6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	73da      	strb	r2, [r3, #15]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08c      	sub	sp, #48	; 0x30
 800cdc4:	af02      	add	r7, sp, #8
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	71fb      	strb	r3, [r7, #7]
 800cdca:	460b      	mov	r3, r1
 800cdcc:	80bb      	strh	r3, [r7, #4]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cdd6:	887b      	ldrh	r3, [r7, #2]
 800cdd8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cddc:	d07f      	beq.n	800cede <pbuf_alloc+0x11e>
 800cdde:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cde2:	f300 80c8 	bgt.w	800cf76 <pbuf_alloc+0x1b6>
 800cde6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cdea:	d010      	beq.n	800ce0e <pbuf_alloc+0x4e>
 800cdec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cdf0:	f300 80c1 	bgt.w	800cf76 <pbuf_alloc+0x1b6>
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d002      	beq.n	800cdfe <pbuf_alloc+0x3e>
 800cdf8:	2b41      	cmp	r3, #65	; 0x41
 800cdfa:	f040 80bc 	bne.w	800cf76 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cdfe:	887a      	ldrh	r2, [r7, #2]
 800ce00:	88bb      	ldrh	r3, [r7, #4]
 800ce02:	4619      	mov	r1, r3
 800ce04:	2000      	movs	r0, #0
 800ce06:	f000 f8d1 	bl	800cfac <pbuf_alloc_reference>
 800ce0a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ce0c:	e0bd      	b.n	800cf8a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ce12:	2300      	movs	r3, #0
 800ce14:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ce16:	88bb      	ldrh	r3, [r7, #4]
 800ce18:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ce1a:	200d      	movs	r0, #13
 800ce1c:	f7ff fbb2 	bl	800c584 <memp_malloc>
 800ce20:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d109      	bne.n	800ce3c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ce28:	f7ff ff76 	bl	800cd18 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ce2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ce32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce34:	f000 faa8 	bl	800d388 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	e0a7      	b.n	800cf8c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ce3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce3e:	3303      	adds	r3, #3
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	f023 0303 	bic.w	r3, r3, #3
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	8b7a      	ldrh	r2, [r7, #26]
 800ce50:	4293      	cmp	r3, r2
 800ce52:	bf28      	it	cs
 800ce54:	4613      	movcs	r3, r2
 800ce56:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ce58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce5a:	3310      	adds	r3, #16
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	4413      	add	r3, r2
 800ce60:	3303      	adds	r3, #3
 800ce62:	f023 0303 	bic.w	r3, r3, #3
 800ce66:	4618      	mov	r0, r3
 800ce68:	89f9      	ldrh	r1, [r7, #14]
 800ce6a:	8b7a      	ldrh	r2, [r7, #26]
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	9301      	str	r3, [sp, #4]
 800ce70:	887b      	ldrh	r3, [r7, #2]
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	460b      	mov	r3, r1
 800ce76:	4601      	mov	r1, r0
 800ce78:	6938      	ldr	r0, [r7, #16]
 800ce7a:	f7ff ff77 	bl	800cd6c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f003 0303 	and.w	r3, r3, #3
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d006      	beq.n	800ce98 <pbuf_alloc+0xd8>
 800ce8a:	4b42      	ldr	r3, [pc, #264]	; (800cf94 <pbuf_alloc+0x1d4>)
 800ce8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce90:	4941      	ldr	r1, [pc, #260]	; (800cf98 <pbuf_alloc+0x1d8>)
 800ce92:	4842      	ldr	r0, [pc, #264]	; (800cf9c <pbuf_alloc+0x1dc>)
 800ce94:	f00d fa4c 	bl	801a330 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ce98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce9a:	3303      	adds	r3, #3
 800ce9c:	f023 0303 	bic.w	r3, r3, #3
 800cea0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cea4:	d106      	bne.n	800ceb4 <pbuf_alloc+0xf4>
 800cea6:	4b3b      	ldr	r3, [pc, #236]	; (800cf94 <pbuf_alloc+0x1d4>)
 800cea8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ceac:	493c      	ldr	r1, [pc, #240]	; (800cfa0 <pbuf_alloc+0x1e0>)
 800ceae:	483b      	ldr	r0, [pc, #236]	; (800cf9c <pbuf_alloc+0x1dc>)
 800ceb0:	f00d fa3e 	bl	801a330 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d102      	bne.n	800cec0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
 800cebe:	e002      	b.n	800cec6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	693a      	ldr	r2, [r7, #16]
 800cec4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ceca:	8b7a      	ldrh	r2, [r7, #26]
 800cecc:	89fb      	ldrh	r3, [r7, #14]
 800cece:	1ad3      	subs	r3, r2, r3
 800ced0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ced6:	8b7b      	ldrh	r3, [r7, #26]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d19e      	bne.n	800ce1a <pbuf_alloc+0x5a>
      break;
 800cedc:	e055      	b.n	800cf8a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cee0:	3303      	adds	r3, #3
 800cee2:	b29b      	uxth	r3, r3
 800cee4:	f023 0303 	bic.w	r3, r3, #3
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	88bb      	ldrh	r3, [r7, #4]
 800ceec:	3303      	adds	r3, #3
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	f023 0303 	bic.w	r3, r3, #3
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	4413      	add	r3, r2
 800cef8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cefa:	8b3b      	ldrh	r3, [r7, #24]
 800cefc:	3310      	adds	r3, #16
 800cefe:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cf00:	8b3a      	ldrh	r2, [r7, #24]
 800cf02:	88bb      	ldrh	r3, [r7, #4]
 800cf04:	3303      	adds	r3, #3
 800cf06:	f023 0303 	bic.w	r3, r3, #3
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d306      	bcc.n	800cf1c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cf0e:	8afa      	ldrh	r2, [r7, #22]
 800cf10:	88bb      	ldrh	r3, [r7, #4]
 800cf12:	3303      	adds	r3, #3
 800cf14:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d201      	bcs.n	800cf20 <pbuf_alloc+0x160>
        return NULL;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	e035      	b.n	800cf8c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cf20:	8afb      	ldrh	r3, [r7, #22]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff f9ac 	bl	800c280 <mem_malloc>
 800cf28:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cf2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <pbuf_alloc+0x174>
        return NULL;
 800cf30:	2300      	movs	r3, #0
 800cf32:	e02b      	b.n	800cf8c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cf34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf36:	3310      	adds	r3, #16
 800cf38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf3a:	4413      	add	r3, r2
 800cf3c:	3303      	adds	r3, #3
 800cf3e:	f023 0303 	bic.w	r3, r3, #3
 800cf42:	4618      	mov	r0, r3
 800cf44:	88b9      	ldrh	r1, [r7, #4]
 800cf46:	88ba      	ldrh	r2, [r7, #4]
 800cf48:	2300      	movs	r3, #0
 800cf4a:	9301      	str	r3, [sp, #4]
 800cf4c:	887b      	ldrh	r3, [r7, #2]
 800cf4e:	9300      	str	r3, [sp, #0]
 800cf50:	460b      	mov	r3, r1
 800cf52:	4601      	mov	r1, r0
 800cf54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf56:	f7ff ff09 	bl	800cd6c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	f003 0303 	and.w	r3, r3, #3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d010      	beq.n	800cf88 <pbuf_alloc+0x1c8>
 800cf66:	4b0b      	ldr	r3, [pc, #44]	; (800cf94 <pbuf_alloc+0x1d4>)
 800cf68:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cf6c:	490d      	ldr	r1, [pc, #52]	; (800cfa4 <pbuf_alloc+0x1e4>)
 800cf6e:	480b      	ldr	r0, [pc, #44]	; (800cf9c <pbuf_alloc+0x1dc>)
 800cf70:	f00d f9de 	bl	801a330 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cf74:	e008      	b.n	800cf88 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cf76:	4b07      	ldr	r3, [pc, #28]	; (800cf94 <pbuf_alloc+0x1d4>)
 800cf78:	f240 1227 	movw	r2, #295	; 0x127
 800cf7c:	490a      	ldr	r1, [pc, #40]	; (800cfa8 <pbuf_alloc+0x1e8>)
 800cf7e:	4807      	ldr	r0, [pc, #28]	; (800cf9c <pbuf_alloc+0x1dc>)
 800cf80:	f00d f9d6 	bl	801a330 <iprintf>
      return NULL;
 800cf84:	2300      	movs	r3, #0
 800cf86:	e001      	b.n	800cf8c <pbuf_alloc+0x1cc>
      break;
 800cf88:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3728      	adds	r7, #40	; 0x28
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	0801faf4 	.word	0x0801faf4
 800cf98:	0801fb24 	.word	0x0801fb24
 800cf9c:	0801fb54 	.word	0x0801fb54
 800cfa0:	0801fb7c 	.word	0x0801fb7c
 800cfa4:	0801fbb0 	.word	0x0801fbb0
 800cfa8:	0801fbdc 	.word	0x0801fbdc

0800cfac <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b086      	sub	sp, #24
 800cfb0:	af02      	add	r7, sp, #8
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	807b      	strh	r3, [r7, #2]
 800cfb8:	4613      	mov	r3, r2
 800cfba:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cfbc:	883b      	ldrh	r3, [r7, #0]
 800cfbe:	2b41      	cmp	r3, #65	; 0x41
 800cfc0:	d009      	beq.n	800cfd6 <pbuf_alloc_reference+0x2a>
 800cfc2:	883b      	ldrh	r3, [r7, #0]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d006      	beq.n	800cfd6 <pbuf_alloc_reference+0x2a>
 800cfc8:	4b0f      	ldr	r3, [pc, #60]	; (800d008 <pbuf_alloc_reference+0x5c>)
 800cfca:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cfce:	490f      	ldr	r1, [pc, #60]	; (800d00c <pbuf_alloc_reference+0x60>)
 800cfd0:	480f      	ldr	r0, [pc, #60]	; (800d010 <pbuf_alloc_reference+0x64>)
 800cfd2:	f00d f9ad 	bl	801a330 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cfd6:	200c      	movs	r0, #12
 800cfd8:	f7ff fad4 	bl	800c584 <memp_malloc>
 800cfdc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d101      	bne.n	800cfe8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	e00b      	b.n	800d000 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cfe8:	8879      	ldrh	r1, [r7, #2]
 800cfea:	887a      	ldrh	r2, [r7, #2]
 800cfec:	2300      	movs	r3, #0
 800cfee:	9301      	str	r3, [sp, #4]
 800cff0:	883b      	ldrh	r3, [r7, #0]
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	460b      	mov	r3, r1
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7ff feb7 	bl	800cd6c <pbuf_init_alloced_pbuf>
  return p;
 800cffe:	68fb      	ldr	r3, [r7, #12]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	0801faf4 	.word	0x0801faf4
 800d00c:	0801fbf8 	.word	0x0801fbf8
 800d010:	0801fb54 	.word	0x0801fb54

0800d014 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b088      	sub	sp, #32
 800d018:	af02      	add	r7, sp, #8
 800d01a:	607b      	str	r3, [r7, #4]
 800d01c:	4603      	mov	r3, r0
 800d01e:	73fb      	strb	r3, [r7, #15]
 800d020:	460b      	mov	r3, r1
 800d022:	81bb      	strh	r3, [r7, #12]
 800d024:	4613      	mov	r3, r2
 800d026:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d02c:	8a7b      	ldrh	r3, [r7, #18]
 800d02e:	3303      	adds	r3, #3
 800d030:	f023 0203 	bic.w	r2, r3, #3
 800d034:	89bb      	ldrh	r3, [r7, #12]
 800d036:	441a      	add	r2, r3
 800d038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d901      	bls.n	800d042 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d03e:	2300      	movs	r3, #0
 800d040:	e018      	b.n	800d074 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d042:	6a3b      	ldr	r3, [r7, #32]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d007      	beq.n	800d058 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d048:	8a7b      	ldrh	r3, [r7, #18]
 800d04a:	3303      	adds	r3, #3
 800d04c:	f023 0303 	bic.w	r3, r3, #3
 800d050:	6a3a      	ldr	r2, [r7, #32]
 800d052:	4413      	add	r3, r2
 800d054:	617b      	str	r3, [r7, #20]
 800d056:	e001      	b.n	800d05c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d058:	2300      	movs	r3, #0
 800d05a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	89b9      	ldrh	r1, [r7, #12]
 800d060:	89ba      	ldrh	r2, [r7, #12]
 800d062:	2302      	movs	r3, #2
 800d064:	9301      	str	r3, [sp, #4]
 800d066:	897b      	ldrh	r3, [r7, #10]
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	460b      	mov	r3, r1
 800d06c:	6979      	ldr	r1, [r7, #20]
 800d06e:	f7ff fe7d 	bl	800cd6c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d072:	687b      	ldr	r3, [r7, #4]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3718      	adds	r7, #24
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <pbuf_realloc+0x20>
 800d08e:	4b3a      	ldr	r3, [pc, #232]	; (800d178 <pbuf_realloc+0xfc>)
 800d090:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d094:	4939      	ldr	r1, [pc, #228]	; (800d17c <pbuf_realloc+0x100>)
 800d096:	483a      	ldr	r0, [pc, #232]	; (800d180 <pbuf_realloc+0x104>)
 800d098:	f00d f94a 	bl	801a330 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	891b      	ldrh	r3, [r3, #8]
 800d0a0:	887a      	ldrh	r2, [r7, #2]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d263      	bcs.n	800d16e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	891a      	ldrh	r2, [r3, #8]
 800d0aa:	887b      	ldrh	r3, [r7, #2]
 800d0ac:	1ad3      	subs	r3, r2, r3
 800d0ae:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d0b0:	887b      	ldrh	r3, [r7, #2]
 800d0b2:	817b      	strh	r3, [r7, #10]
  q = p;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d0b8:	e018      	b.n	800d0ec <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	895b      	ldrh	r3, [r3, #10]
 800d0be:	897a      	ldrh	r2, [r7, #10]
 800d0c0:	1ad3      	subs	r3, r2, r3
 800d0c2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	891a      	ldrh	r2, [r3, #8]
 800d0c8:	893b      	ldrh	r3, [r7, #8]
 800d0ca:	1ad3      	subs	r3, r2, r3
 800d0cc:	b29a      	uxth	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d106      	bne.n	800d0ec <pbuf_realloc+0x70>
 800d0de:	4b26      	ldr	r3, [pc, #152]	; (800d178 <pbuf_realloc+0xfc>)
 800d0e0:	f240 12af 	movw	r2, #431	; 0x1af
 800d0e4:	4927      	ldr	r1, [pc, #156]	; (800d184 <pbuf_realloc+0x108>)
 800d0e6:	4826      	ldr	r0, [pc, #152]	; (800d180 <pbuf_realloc+0x104>)
 800d0e8:	f00d f922 	bl	801a330 <iprintf>
  while (rem_len > q->len) {
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	895b      	ldrh	r3, [r3, #10]
 800d0f0:	897a      	ldrh	r2, [r7, #10]
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d8e1      	bhi.n	800d0ba <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	7b1b      	ldrb	r3, [r3, #12]
 800d0fa:	f003 030f 	and.w	r3, r3, #15
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d121      	bne.n	800d146 <pbuf_realloc+0xca>
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	895b      	ldrh	r3, [r3, #10]
 800d106:	897a      	ldrh	r2, [r7, #10]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d01c      	beq.n	800d146 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	7b5b      	ldrb	r3, [r3, #13]
 800d110:	f003 0302 	and.w	r3, r3, #2
 800d114:	2b00      	cmp	r3, #0
 800d116:	d116      	bne.n	800d146 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	b29a      	uxth	r2, r3
 800d122:	897b      	ldrh	r3, [r7, #10]
 800d124:	4413      	add	r3, r2
 800d126:	b29b      	uxth	r3, r3
 800d128:	4619      	mov	r1, r3
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f7fe ff9e 	bl	800c06c <mem_trim>
 800d130:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d106      	bne.n	800d146 <pbuf_realloc+0xca>
 800d138:	4b0f      	ldr	r3, [pc, #60]	; (800d178 <pbuf_realloc+0xfc>)
 800d13a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d13e:	4912      	ldr	r1, [pc, #72]	; (800d188 <pbuf_realloc+0x10c>)
 800d140:	480f      	ldr	r0, [pc, #60]	; (800d180 <pbuf_realloc+0x104>)
 800d142:	f00d f8f5 	bl	801a330 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	897a      	ldrh	r2, [r7, #10]
 800d14a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	895a      	ldrh	r2, [r3, #10]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d004      	beq.n	800d166 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4618      	mov	r0, r3
 800d162:	f000 f911 	bl	800d388 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2200      	movs	r2, #0
 800d16a:	601a      	str	r2, [r3, #0]
 800d16c:	e000      	b.n	800d170 <pbuf_realloc+0xf4>
    return;
 800d16e:	bf00      	nop

}
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	0801faf4 	.word	0x0801faf4
 800d17c:	0801fc0c 	.word	0x0801fc0c
 800d180:	0801fb54 	.word	0x0801fb54
 800d184:	0801fc24 	.word	0x0801fc24
 800d188:	0801fc3c 	.word	0x0801fc3c

0800d18c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b086      	sub	sp, #24
 800d190:	af00      	add	r7, sp, #0
 800d192:	60f8      	str	r0, [r7, #12]
 800d194:	60b9      	str	r1, [r7, #8]
 800d196:	4613      	mov	r3, r2
 800d198:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d106      	bne.n	800d1ae <pbuf_add_header_impl+0x22>
 800d1a0:	4b2b      	ldr	r3, [pc, #172]	; (800d250 <pbuf_add_header_impl+0xc4>)
 800d1a2:	f240 12df 	movw	r2, #479	; 0x1df
 800d1a6:	492b      	ldr	r1, [pc, #172]	; (800d254 <pbuf_add_header_impl+0xc8>)
 800d1a8:	482b      	ldr	r0, [pc, #172]	; (800d258 <pbuf_add_header_impl+0xcc>)
 800d1aa:	f00d f8c1 	bl	801a330 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d003      	beq.n	800d1bc <pbuf_add_header_impl+0x30>
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ba:	d301      	bcc.n	800d1c0 <pbuf_add_header_impl+0x34>
    return 1;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e043      	b.n	800d248 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d101      	bne.n	800d1ca <pbuf_add_header_impl+0x3e>
    return 0;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	e03e      	b.n	800d248 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	891a      	ldrh	r2, [r3, #8]
 800d1d2:	8a7b      	ldrh	r3, [r7, #18]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	8a7a      	ldrh	r2, [r7, #18]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d901      	bls.n	800d1e2 <pbuf_add_header_impl+0x56>
    return 1;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e032      	b.n	800d248 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	7b1b      	ldrb	r3, [r3, #12]
 800d1e6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d1e8:	8a3b      	ldrh	r3, [r7, #16]
 800d1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00c      	beq.n	800d20c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	425b      	negs	r3, r3
 800d1fa:	4413      	add	r3, r2
 800d1fc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3310      	adds	r3, #16
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	429a      	cmp	r2, r3
 800d206:	d20d      	bcs.n	800d224 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d208:	2301      	movs	r3, #1
 800d20a:	e01d      	b.n	800d248 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d006      	beq.n	800d220 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	425b      	negs	r3, r3
 800d21a:	4413      	add	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]
 800d21e:	e001      	b.n	800d224 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d220:	2301      	movs	r3, #1
 800d222:	e011      	b.n	800d248 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	697a      	ldr	r2, [r7, #20]
 800d228:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	895a      	ldrh	r2, [r3, #10]
 800d22e:	8a7b      	ldrh	r3, [r7, #18]
 800d230:	4413      	add	r3, r2
 800d232:	b29a      	uxth	r2, r3
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	891a      	ldrh	r2, [r3, #8]
 800d23c:	8a7b      	ldrh	r3, [r7, #18]
 800d23e:	4413      	add	r3, r2
 800d240:	b29a      	uxth	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	811a      	strh	r2, [r3, #8]


  return 0;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3718      	adds	r7, #24
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	0801faf4 	.word	0x0801faf4
 800d254:	0801fc58 	.word	0x0801fc58
 800d258:	0801fb54 	.word	0x0801fb54

0800d25c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d266:	2200      	movs	r2, #0
 800d268:	6839      	ldr	r1, [r7, #0]
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff ff8e 	bl	800d18c <pbuf_add_header_impl>
 800d270:	4603      	mov	r3, r0
}
 800d272:	4618      	mov	r0, r3
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d106      	bne.n	800d29a <pbuf_remove_header+0x1e>
 800d28c:	4b20      	ldr	r3, [pc, #128]	; (800d310 <pbuf_remove_header+0x94>)
 800d28e:	f240 224b 	movw	r2, #587	; 0x24b
 800d292:	4920      	ldr	r1, [pc, #128]	; (800d314 <pbuf_remove_header+0x98>)
 800d294:	4820      	ldr	r0, [pc, #128]	; (800d318 <pbuf_remove_header+0x9c>)
 800d296:	f00d f84b 	bl	801a330 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d003      	beq.n	800d2a8 <pbuf_remove_header+0x2c>
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2a6:	d301      	bcc.n	800d2ac <pbuf_remove_header+0x30>
    return 1;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e02c      	b.n	800d306 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d101      	bne.n	800d2b6 <pbuf_remove_header+0x3a>
    return 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	e027      	b.n	800d306 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	895b      	ldrh	r3, [r3, #10]
 800d2be:	89fa      	ldrh	r2, [r7, #14]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d908      	bls.n	800d2d6 <pbuf_remove_header+0x5a>
 800d2c4:	4b12      	ldr	r3, [pc, #72]	; (800d310 <pbuf_remove_header+0x94>)
 800d2c6:	f240 2255 	movw	r2, #597	; 0x255
 800d2ca:	4914      	ldr	r1, [pc, #80]	; (800d31c <pbuf_remove_header+0xa0>)
 800d2cc:	4812      	ldr	r0, [pc, #72]	; (800d318 <pbuf_remove_header+0x9c>)
 800d2ce:	f00d f82f 	bl	801a330 <iprintf>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e017      	b.n	800d306 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685a      	ldr	r2, [r3, #4]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	441a      	add	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	895a      	ldrh	r2, [r3, #10]
 800d2ec:	89fb      	ldrh	r3, [r7, #14]
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	891a      	ldrh	r2, [r3, #8]
 800d2fa:	89fb      	ldrh	r3, [r7, #14]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d304:	2300      	movs	r3, #0
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}
 800d30e:	bf00      	nop
 800d310:	0801faf4 	.word	0x0801faf4
 800d314:	0801fc58 	.word	0x0801fc58
 800d318:	0801fb54 	.word	0x0801fb54
 800d31c:	0801fc64 	.word	0x0801fc64

0800d320 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b082      	sub	sp, #8
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	460b      	mov	r3, r1
 800d32a:	807b      	strh	r3, [r7, #2]
 800d32c:	4613      	mov	r3, r2
 800d32e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d330:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d334:	2b00      	cmp	r3, #0
 800d336:	da08      	bge.n	800d34a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d338:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d33c:	425b      	negs	r3, r3
 800d33e:	4619      	mov	r1, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ff9b 	bl	800d27c <pbuf_remove_header>
 800d346:	4603      	mov	r3, r0
 800d348:	e007      	b.n	800d35a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d34a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d34e:	787a      	ldrb	r2, [r7, #1]
 800d350:	4619      	mov	r1, r3
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7ff ff1a 	bl	800d18c <pbuf_add_header_impl>
 800d358:	4603      	mov	r3, r0
  }
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b082      	sub	sp, #8
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
 800d36a:	460b      	mov	r3, r1
 800d36c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d36e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d372:	2201      	movs	r2, #1
 800d374:	4619      	mov	r1, r3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7ff ffd2 	bl	800d320 <pbuf_header_impl>
 800d37c:	4603      	mov	r3, r0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b088      	sub	sp, #32
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10b      	bne.n	800d3ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d106      	bne.n	800d3aa <pbuf_free+0x22>
 800d39c:	4b3b      	ldr	r3, [pc, #236]	; (800d48c <pbuf_free+0x104>)
 800d39e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d3a2:	493b      	ldr	r1, [pc, #236]	; (800d490 <pbuf_free+0x108>)
 800d3a4:	483b      	ldr	r0, [pc, #236]	; (800d494 <pbuf_free+0x10c>)
 800d3a6:	f00c ffc3 	bl	801a330 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	e069      	b.n	800d482 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d3b2:	e062      	b.n	800d47a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d3b4:	f00c f8c2 	bl	801953c <sys_arch_protect>
 800d3b8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	7b9b      	ldrb	r3, [r3, #14]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d106      	bne.n	800d3d0 <pbuf_free+0x48>
 800d3c2:	4b32      	ldr	r3, [pc, #200]	; (800d48c <pbuf_free+0x104>)
 800d3c4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d3c8:	4933      	ldr	r1, [pc, #204]	; (800d498 <pbuf_free+0x110>)
 800d3ca:	4832      	ldr	r0, [pc, #200]	; (800d494 <pbuf_free+0x10c>)
 800d3cc:	f00c ffb0 	bl	801a330 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7b9b      	ldrb	r3, [r3, #14]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	739a      	strb	r2, [r3, #14]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	7b9b      	ldrb	r3, [r3, #14]
 800d3e0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d3e2:	69b8      	ldr	r0, [r7, #24]
 800d3e4:	f00c f8b8 	bl	8019558 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d3e8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d143      	bne.n	800d476 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7b1b      	ldrb	r3, [r3, #12]
 800d3f8:	f003 030f 	and.w	r3, r3, #15
 800d3fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	7b5b      	ldrb	r3, [r3, #13]
 800d402:	f003 0302 	and.w	r3, r3, #2
 800d406:	2b00      	cmp	r3, #0
 800d408:	d011      	beq.n	800d42e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d106      	bne.n	800d424 <pbuf_free+0x9c>
 800d416:	4b1d      	ldr	r3, [pc, #116]	; (800d48c <pbuf_free+0x104>)
 800d418:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d41c:	491f      	ldr	r1, [pc, #124]	; (800d49c <pbuf_free+0x114>)
 800d41e:	481d      	ldr	r0, [pc, #116]	; (800d494 <pbuf_free+0x10c>)
 800d420:	f00c ff86 	bl	801a330 <iprintf>
        pc->custom_free_function(p);
 800d424:	68bb      	ldr	r3, [r7, #8]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	4798      	blx	r3
 800d42c:	e01d      	b.n	800d46a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d104      	bne.n	800d43e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d434:	6879      	ldr	r1, [r7, #4]
 800d436:	200d      	movs	r0, #13
 800d438:	f7ff f8f6 	bl	800c628 <memp_free>
 800d43c:	e015      	b.n	800d46a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d43e:	7bfb      	ldrb	r3, [r7, #15]
 800d440:	2b01      	cmp	r3, #1
 800d442:	d104      	bne.n	800d44e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d444:	6879      	ldr	r1, [r7, #4]
 800d446:	200c      	movs	r0, #12
 800d448:	f7ff f8ee 	bl	800c628 <memp_free>
 800d44c:	e00d      	b.n	800d46a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d44e:	7bfb      	ldrb	r3, [r7, #15]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d103      	bne.n	800d45c <pbuf_free+0xd4>
          mem_free(p);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f7fe fd79 	bl	800bf4c <mem_free>
 800d45a:	e006      	b.n	800d46a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d45c:	4b0b      	ldr	r3, [pc, #44]	; (800d48c <pbuf_free+0x104>)
 800d45e:	f240 320f 	movw	r2, #783	; 0x30f
 800d462:	490f      	ldr	r1, [pc, #60]	; (800d4a0 <pbuf_free+0x118>)
 800d464:	480b      	ldr	r0, [pc, #44]	; (800d494 <pbuf_free+0x10c>)
 800d466:	f00c ff63 	bl	801a330 <iprintf>
        }
      }
      count++;
 800d46a:	7ffb      	ldrb	r3, [r7, #31]
 800d46c:	3301      	adds	r3, #1
 800d46e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	e001      	b.n	800d47a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d476:	2300      	movs	r3, #0
 800d478:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d199      	bne.n	800d3b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d480:	7ffb      	ldrb	r3, [r7, #31]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3720      	adds	r7, #32
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	0801faf4 	.word	0x0801faf4
 800d490:	0801fc58 	.word	0x0801fc58
 800d494:	0801fb54 	.word	0x0801fb54
 800d498:	0801fc84 	.word	0x0801fc84
 800d49c:	0801fc9c 	.word	0x0801fc9c
 800d4a0:	0801fcc0 	.word	0x0801fcc0

0800d4a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d4b0:	e005      	b.n	800d4be <pbuf_clen+0x1a>
    ++len;
 800d4b2:	89fb      	ldrh	r3, [r7, #14]
 800d4b4:	3301      	adds	r3, #1
 800d4b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1f6      	bne.n	800d4b2 <pbuf_clen+0xe>
  }
  return len;
 800d4c4:	89fb      	ldrh	r3, [r7, #14]
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3714      	adds	r7, #20
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
	...

0800d4d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d016      	beq.n	800d510 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d4e2:	f00c f82b 	bl	801953c <sys_arch_protect>
 800d4e6:	60f8      	str	r0, [r7, #12]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	7b9b      	ldrb	r3, [r3, #14]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	739a      	strb	r2, [r3, #14]
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f00c f82f 	bl	8019558 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	7b9b      	ldrb	r3, [r3, #14]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d106      	bne.n	800d510 <pbuf_ref+0x3c>
 800d502:	4b05      	ldr	r3, [pc, #20]	; (800d518 <pbuf_ref+0x44>)
 800d504:	f240 3242 	movw	r2, #834	; 0x342
 800d508:	4904      	ldr	r1, [pc, #16]	; (800d51c <pbuf_ref+0x48>)
 800d50a:	4805      	ldr	r0, [pc, #20]	; (800d520 <pbuf_ref+0x4c>)
 800d50c:	f00c ff10 	bl	801a330 <iprintf>
  }
}
 800d510:	bf00      	nop
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	0801faf4 	.word	0x0801faf4
 800d51c:	0801fcd4 	.word	0x0801fcd4
 800d520:	0801fb54 	.word	0x0801fb54

0800d524 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
 800d52c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d002      	beq.n	800d53a <pbuf_cat+0x16>
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d107      	bne.n	800d54a <pbuf_cat+0x26>
 800d53a:	4b20      	ldr	r3, [pc, #128]	; (800d5bc <pbuf_cat+0x98>)
 800d53c:	f240 3259 	movw	r2, #857	; 0x359
 800d540:	491f      	ldr	r1, [pc, #124]	; (800d5c0 <pbuf_cat+0x9c>)
 800d542:	4820      	ldr	r0, [pc, #128]	; (800d5c4 <pbuf_cat+0xa0>)
 800d544:	f00c fef4 	bl	801a330 <iprintf>
 800d548:	e034      	b.n	800d5b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	60fb      	str	r3, [r7, #12]
 800d54e:	e00a      	b.n	800d566 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	891a      	ldrh	r2, [r3, #8]
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	891b      	ldrh	r3, [r3, #8]
 800d558:	4413      	add	r3, r2
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	60fb      	str	r3, [r7, #12]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1f0      	bne.n	800d550 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	891a      	ldrh	r2, [r3, #8]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	895b      	ldrh	r3, [r3, #10]
 800d576:	429a      	cmp	r2, r3
 800d578:	d006      	beq.n	800d588 <pbuf_cat+0x64>
 800d57a:	4b10      	ldr	r3, [pc, #64]	; (800d5bc <pbuf_cat+0x98>)
 800d57c:	f240 3262 	movw	r2, #866	; 0x362
 800d580:	4911      	ldr	r1, [pc, #68]	; (800d5c8 <pbuf_cat+0xa4>)
 800d582:	4810      	ldr	r0, [pc, #64]	; (800d5c4 <pbuf_cat+0xa0>)
 800d584:	f00c fed4 	bl	801a330 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d006      	beq.n	800d59e <pbuf_cat+0x7a>
 800d590:	4b0a      	ldr	r3, [pc, #40]	; (800d5bc <pbuf_cat+0x98>)
 800d592:	f240 3263 	movw	r2, #867	; 0x363
 800d596:	490d      	ldr	r1, [pc, #52]	; (800d5cc <pbuf_cat+0xa8>)
 800d598:	480a      	ldr	r0, [pc, #40]	; (800d5c4 <pbuf_cat+0xa0>)
 800d59a:	f00c fec9 	bl	801a330 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	891a      	ldrh	r2, [r3, #8]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	891b      	ldrh	r3, [r3, #8]
 800d5a6:	4413      	add	r3, r2
 800d5a8:	b29a      	uxth	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	0801faf4 	.word	0x0801faf4
 800d5c0:	0801fce8 	.word	0x0801fce8
 800d5c4:	0801fb54 	.word	0x0801fb54
 800d5c8:	0801fd20 	.word	0x0801fd20
 800d5cc:	0801fd50 	.word	0x0801fd50

0800d5d0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7ff ffa1 	bl	800d524 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d5e2:	6838      	ldr	r0, [r7, #0]
 800d5e4:	f7ff ff76 	bl	800d4d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d5e8:	bf00      	nop
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b086      	sub	sp, #24
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	2300      	movs	r3, #0
 800d600:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d008      	beq.n	800d61a <pbuf_copy+0x2a>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d005      	beq.n	800d61a <pbuf_copy+0x2a>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	891a      	ldrh	r2, [r3, #8]
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	891b      	ldrh	r3, [r3, #8]
 800d616:	429a      	cmp	r2, r3
 800d618:	d209      	bcs.n	800d62e <pbuf_copy+0x3e>
 800d61a:	4b57      	ldr	r3, [pc, #348]	; (800d778 <pbuf_copy+0x188>)
 800d61c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d620:	4956      	ldr	r1, [pc, #344]	; (800d77c <pbuf_copy+0x18c>)
 800d622:	4857      	ldr	r0, [pc, #348]	; (800d780 <pbuf_copy+0x190>)
 800d624:	f00c fe84 	bl	801a330 <iprintf>
 800d628:	f06f 030f 	mvn.w	r3, #15
 800d62c:	e09f      	b.n	800d76e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	895b      	ldrh	r3, [r3, #10]
 800d632:	461a      	mov	r2, r3
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	1ad2      	subs	r2, r2, r3
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	895b      	ldrh	r3, [r3, #10]
 800d63c:	4619      	mov	r1, r3
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	1acb      	subs	r3, r1, r3
 800d642:	429a      	cmp	r2, r3
 800d644:	d306      	bcc.n	800d654 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	895b      	ldrh	r3, [r3, #10]
 800d64a:	461a      	mov	r2, r3
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	60fb      	str	r3, [r7, #12]
 800d652:	e005      	b.n	800d660 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	895b      	ldrh	r3, [r3, #10]
 800d658:	461a      	mov	r2, r3
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	685a      	ldr	r2, [r3, #4]
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	18d0      	adds	r0, r2, r3
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	4413      	add	r3, r2
 800d670:	68fa      	ldr	r2, [r7, #12]
 800d672:	4619      	mov	r1, r3
 800d674:	f00b ffb2 	bl	80195dc <memcpy>
    offset_to += len;
 800d678:	697a      	ldr	r2, [r7, #20]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	4413      	add	r3, r2
 800d67e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d680:	693a      	ldr	r2, [r7, #16]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	4413      	add	r3, r2
 800d686:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	895b      	ldrh	r3, [r3, #10]
 800d68c:	461a      	mov	r2, r3
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	4293      	cmp	r3, r2
 800d692:	d906      	bls.n	800d6a2 <pbuf_copy+0xb2>
 800d694:	4b38      	ldr	r3, [pc, #224]	; (800d778 <pbuf_copy+0x188>)
 800d696:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d69a:	493a      	ldr	r1, [pc, #232]	; (800d784 <pbuf_copy+0x194>)
 800d69c:	4838      	ldr	r0, [pc, #224]	; (800d780 <pbuf_copy+0x190>)
 800d69e:	f00c fe47 	bl	801a330 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	895b      	ldrh	r3, [r3, #10]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d906      	bls.n	800d6bc <pbuf_copy+0xcc>
 800d6ae:	4b32      	ldr	r3, [pc, #200]	; (800d778 <pbuf_copy+0x188>)
 800d6b0:	f240 32da 	movw	r2, #986	; 0x3da
 800d6b4:	4934      	ldr	r1, [pc, #208]	; (800d788 <pbuf_copy+0x198>)
 800d6b6:	4832      	ldr	r0, [pc, #200]	; (800d780 <pbuf_copy+0x190>)
 800d6b8:	f00c fe3a 	bl	801a330 <iprintf>
    if (offset_from >= p_from->len) {
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	895b      	ldrh	r3, [r3, #10]
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d304      	bcc.n	800d6d2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	895b      	ldrh	r3, [r3, #10]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d114      	bne.n	800d708 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d10c      	bne.n	800d708 <pbuf_copy+0x118>
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d009      	beq.n	800d708 <pbuf_copy+0x118>
 800d6f4:	4b20      	ldr	r3, [pc, #128]	; (800d778 <pbuf_copy+0x188>)
 800d6f6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d6fa:	4924      	ldr	r1, [pc, #144]	; (800d78c <pbuf_copy+0x19c>)
 800d6fc:	4820      	ldr	r0, [pc, #128]	; (800d780 <pbuf_copy+0x190>)
 800d6fe:	f00c fe17 	bl	801a330 <iprintf>
 800d702:	f06f 030f 	mvn.w	r3, #15
 800d706:	e032      	b.n	800d76e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d013      	beq.n	800d736 <pbuf_copy+0x146>
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	895a      	ldrh	r2, [r3, #10]
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	891b      	ldrh	r3, [r3, #8]
 800d716:	429a      	cmp	r2, r3
 800d718:	d10d      	bne.n	800d736 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d009      	beq.n	800d736 <pbuf_copy+0x146>
 800d722:	4b15      	ldr	r3, [pc, #84]	; (800d778 <pbuf_copy+0x188>)
 800d724:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d728:	4919      	ldr	r1, [pc, #100]	; (800d790 <pbuf_copy+0x1a0>)
 800d72a:	4815      	ldr	r0, [pc, #84]	; (800d780 <pbuf_copy+0x190>)
 800d72c:	f00c fe00 	bl	801a330 <iprintf>
 800d730:	f06f 0305 	mvn.w	r3, #5
 800d734:	e01b      	b.n	800d76e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d013      	beq.n	800d764 <pbuf_copy+0x174>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	895a      	ldrh	r2, [r3, #10]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	891b      	ldrh	r3, [r3, #8]
 800d744:	429a      	cmp	r2, r3
 800d746:	d10d      	bne.n	800d764 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d009      	beq.n	800d764 <pbuf_copy+0x174>
 800d750:	4b09      	ldr	r3, [pc, #36]	; (800d778 <pbuf_copy+0x188>)
 800d752:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d756:	490e      	ldr	r1, [pc, #56]	; (800d790 <pbuf_copy+0x1a0>)
 800d758:	4809      	ldr	r0, [pc, #36]	; (800d780 <pbuf_copy+0x190>)
 800d75a:	f00c fde9 	bl	801a330 <iprintf>
 800d75e:	f06f 0305 	mvn.w	r3, #5
 800d762:	e004      	b.n	800d76e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f47f af61 	bne.w	800d62e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3718      	adds	r7, #24
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	0801faf4 	.word	0x0801faf4
 800d77c:	0801fd9c 	.word	0x0801fd9c
 800d780:	0801fb54 	.word	0x0801fb54
 800d784:	0801fdcc 	.word	0x0801fdcc
 800d788:	0801fde4 	.word	0x0801fde4
 800d78c:	0801fe00 	.word	0x0801fe00
 800d790:	0801fe10 	.word	0x0801fe10

0800d794 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b088      	sub	sp, #32
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	4611      	mov	r1, r2
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	80fb      	strh	r3, [r7, #6]
 800d7a6:	4613      	mov	r3, r2
 800d7a8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d108      	bne.n	800d7ca <pbuf_copy_partial+0x36>
 800d7b8:	4b2b      	ldr	r3, [pc, #172]	; (800d868 <pbuf_copy_partial+0xd4>)
 800d7ba:	f240 420a 	movw	r2, #1034	; 0x40a
 800d7be:	492b      	ldr	r1, [pc, #172]	; (800d86c <pbuf_copy_partial+0xd8>)
 800d7c0:	482b      	ldr	r0, [pc, #172]	; (800d870 <pbuf_copy_partial+0xdc>)
 800d7c2:	f00c fdb5 	bl	801a330 <iprintf>
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	e04a      	b.n	800d860 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d108      	bne.n	800d7e2 <pbuf_copy_partial+0x4e>
 800d7d0:	4b25      	ldr	r3, [pc, #148]	; (800d868 <pbuf_copy_partial+0xd4>)
 800d7d2:	f240 420b 	movw	r2, #1035	; 0x40b
 800d7d6:	4927      	ldr	r1, [pc, #156]	; (800d874 <pbuf_copy_partial+0xe0>)
 800d7d8:	4825      	ldr	r0, [pc, #148]	; (800d870 <pbuf_copy_partial+0xdc>)
 800d7da:	f00c fda9 	bl	801a330 <iprintf>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	e03e      	b.n	800d860 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	61fb      	str	r3, [r7, #28]
 800d7e6:	e034      	b.n	800d852 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d7e8:	88bb      	ldrh	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d00a      	beq.n	800d804 <pbuf_copy_partial+0x70>
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	895b      	ldrh	r3, [r3, #10]
 800d7f2:	88ba      	ldrh	r2, [r7, #4]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d305      	bcc.n	800d804 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	895b      	ldrh	r3, [r3, #10]
 800d7fc:	88ba      	ldrh	r2, [r7, #4]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	80bb      	strh	r3, [r7, #4]
 800d802:	e023      	b.n	800d84c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	895a      	ldrh	r2, [r3, #10]
 800d808:	88bb      	ldrh	r3, [r7, #4]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d80e:	8b3a      	ldrh	r2, [r7, #24]
 800d810:	88fb      	ldrh	r3, [r7, #6]
 800d812:	429a      	cmp	r2, r3
 800d814:	d901      	bls.n	800d81a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d816:	88fb      	ldrh	r3, [r7, #6]
 800d818:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d81a:	8b7b      	ldrh	r3, [r7, #26]
 800d81c:	68ba      	ldr	r2, [r7, #8]
 800d81e:	18d0      	adds	r0, r2, r3
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	685a      	ldr	r2, [r3, #4]
 800d824:	88bb      	ldrh	r3, [r7, #4]
 800d826:	4413      	add	r3, r2
 800d828:	8b3a      	ldrh	r2, [r7, #24]
 800d82a:	4619      	mov	r1, r3
 800d82c:	f00b fed6 	bl	80195dc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d830:	8afa      	ldrh	r2, [r7, #22]
 800d832:	8b3b      	ldrh	r3, [r7, #24]
 800d834:	4413      	add	r3, r2
 800d836:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d838:	8b7a      	ldrh	r2, [r7, #26]
 800d83a:	8b3b      	ldrh	r3, [r7, #24]
 800d83c:	4413      	add	r3, r2
 800d83e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d840:	88fa      	ldrh	r2, [r7, #6]
 800d842:	8b3b      	ldrh	r3, [r7, #24]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d848:	2300      	movs	r3, #0
 800d84a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	61fb      	str	r3, [r7, #28]
 800d852:	88fb      	ldrh	r3, [r7, #6]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <pbuf_copy_partial+0xca>
 800d858:	69fb      	ldr	r3, [r7, #28]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d1c4      	bne.n	800d7e8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d85e:	8afb      	ldrh	r3, [r7, #22]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3720      	adds	r7, #32
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	0801faf4 	.word	0x0801faf4
 800d86c:	0801fe3c 	.word	0x0801fe3c
 800d870:	0801fb54 	.word	0x0801fb54
 800d874:	0801fe5c 	.word	0x0801fe5c

0800d878 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d878:	b480      	push	{r7}
 800d87a:	b087      	sub	sp, #28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	460b      	mov	r3, r1
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d886:	897b      	ldrh	r3, [r7, #10]
 800d888:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d88e:	e007      	b.n	800d8a0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	895b      	ldrh	r3, [r3, #10]
 800d894:	8afa      	ldrh	r2, [r7, #22]
 800d896:	1ad3      	subs	r3, r2, r3
 800d898:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d004      	beq.n	800d8b0 <pbuf_skip_const+0x38>
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	895b      	ldrh	r3, [r3, #10]
 800d8aa:	8afa      	ldrh	r2, [r7, #22]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d2ef      	bcs.n	800d890 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	8afa      	ldrh	r2, [r7, #22]
 800d8ba:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d8bc:	693b      	ldr	r3, [r7, #16]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	371c      	adds	r7, #28
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr

0800d8ca <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d8ca:	b580      	push	{r7, lr}
 800d8cc:	b086      	sub	sp, #24
 800d8ce:	af00      	add	r7, sp, #0
 800d8d0:	60f8      	str	r0, [r7, #12]
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	607a      	str	r2, [r7, #4]
 800d8d6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800d8d8:	897b      	ldrh	r3, [r7, #10]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4619      	mov	r1, r3
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f7ff ffca 	bl	800d878 <pbuf_skip_const>
 800d8e4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800d8e6:	697b      	ldr	r3, [r7, #20]
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3718      	adds	r7, #24
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b088      	sub	sp, #32
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	60f8      	str	r0, [r7, #12]
 800d8f8:	60b9      	str	r1, [r7, #8]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d8fe:	88fb      	ldrh	r3, [r7, #6]
 800d900:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d109      	bne.n	800d920 <pbuf_take+0x30>
 800d90c:	4b3a      	ldr	r3, [pc, #232]	; (800d9f8 <pbuf_take+0x108>)
 800d90e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d912:	493a      	ldr	r1, [pc, #232]	; (800d9fc <pbuf_take+0x10c>)
 800d914:	483a      	ldr	r0, [pc, #232]	; (800da00 <pbuf_take+0x110>)
 800d916:	f00c fd0b 	bl	801a330 <iprintf>
 800d91a:	f06f 030f 	mvn.w	r3, #15
 800d91e:	e067      	b.n	800d9f0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d109      	bne.n	800d93a <pbuf_take+0x4a>
 800d926:	4b34      	ldr	r3, [pc, #208]	; (800d9f8 <pbuf_take+0x108>)
 800d928:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d92c:	4935      	ldr	r1, [pc, #212]	; (800da04 <pbuf_take+0x114>)
 800d92e:	4834      	ldr	r0, [pc, #208]	; (800da00 <pbuf_take+0x110>)
 800d930:	f00c fcfe 	bl	801a330 <iprintf>
 800d934:	f06f 030f 	mvn.w	r3, #15
 800d938:	e05a      	b.n	800d9f0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	891b      	ldrh	r3, [r3, #8]
 800d93e:	88fa      	ldrh	r2, [r7, #6]
 800d940:	429a      	cmp	r2, r3
 800d942:	d909      	bls.n	800d958 <pbuf_take+0x68>
 800d944:	4b2c      	ldr	r3, [pc, #176]	; (800d9f8 <pbuf_take+0x108>)
 800d946:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d94a:	492f      	ldr	r1, [pc, #188]	; (800da08 <pbuf_take+0x118>)
 800d94c:	482c      	ldr	r0, [pc, #176]	; (800da00 <pbuf_take+0x110>)
 800d94e:	f00c fcef 	bl	801a330 <iprintf>
 800d952:	f04f 33ff 	mov.w	r3, #4294967295
 800d956:	e04b      	b.n	800d9f0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d007      	beq.n	800d96e <pbuf_take+0x7e>
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d004      	beq.n	800d96e <pbuf_take+0x7e>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	891b      	ldrh	r3, [r3, #8]
 800d968:	88fa      	ldrh	r2, [r7, #6]
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d902      	bls.n	800d974 <pbuf_take+0x84>
    return ERR_ARG;
 800d96e:	f06f 030f 	mvn.w	r3, #15
 800d972:	e03d      	b.n	800d9f0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	61fb      	str	r3, [r7, #28]
 800d978:	e028      	b.n	800d9cc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d106      	bne.n	800d98e <pbuf_take+0x9e>
 800d980:	4b1d      	ldr	r3, [pc, #116]	; (800d9f8 <pbuf_take+0x108>)
 800d982:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d986:	4921      	ldr	r1, [pc, #132]	; (800da0c <pbuf_take+0x11c>)
 800d988:	481d      	ldr	r0, [pc, #116]	; (800da00 <pbuf_take+0x110>)
 800d98a:	f00c fcd1 	bl	801a330 <iprintf>
    buf_copy_len = total_copy_len;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	895b      	ldrh	r3, [r3, #10]
 800d996:	461a      	mov	r2, r3
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d902      	bls.n	800d9a4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	895b      	ldrh	r3, [r3, #10]
 800d9a2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	6858      	ldr	r0, [r3, #4]
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	69ba      	ldr	r2, [r7, #24]
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	f00b fe13 	bl	80195dc <memcpy>
    total_copy_len -= buf_copy_len;
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800d9be:	693a      	ldr	r2, [r7, #16]
 800d9c0:	69bb      	ldr	r3, [r7, #24]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	61fb      	str	r3, [r7, #28]
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1d3      	bne.n	800d97a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d103      	bne.n	800d9e0 <pbuf_take+0xf0>
 800d9d8:	88fb      	ldrh	r3, [r7, #6]
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d006      	beq.n	800d9ee <pbuf_take+0xfe>
 800d9e0:	4b05      	ldr	r3, [pc, #20]	; (800d9f8 <pbuf_take+0x108>)
 800d9e2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800d9e6:	490a      	ldr	r1, [pc, #40]	; (800da10 <pbuf_take+0x120>)
 800d9e8:	4805      	ldr	r0, [pc, #20]	; (800da00 <pbuf_take+0x110>)
 800d9ea:	f00c fca1 	bl	801a330 <iprintf>
  return ERR_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3720      	adds	r7, #32
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	0801faf4 	.word	0x0801faf4
 800d9fc:	0801fecc 	.word	0x0801fecc
 800da00:	0801fb54 	.word	0x0801fb54
 800da04:	0801fee4 	.word	0x0801fee4
 800da08:	0801ff00 	.word	0x0801ff00
 800da0c:	0801ff20 	.word	0x0801ff20
 800da10:	0801ff38 	.word	0x0801ff38

0800da14 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b088      	sub	sp, #32
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	4611      	mov	r1, r2
 800da20:	461a      	mov	r2, r3
 800da22:	460b      	mov	r3, r1
 800da24:	80fb      	strh	r3, [r7, #6]
 800da26:	4613      	mov	r3, r2
 800da28:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800da2a:	f107 0210 	add.w	r2, r7, #16
 800da2e:	88bb      	ldrh	r3, [r7, #4]
 800da30:	4619      	mov	r1, r3
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f7ff ff49 	bl	800d8ca <pbuf_skip>
 800da38:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800da3a:	69fb      	ldr	r3, [r7, #28]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d047      	beq.n	800dad0 <pbuf_take_at+0xbc>
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	891b      	ldrh	r3, [r3, #8]
 800da44:	461a      	mov	r2, r3
 800da46:	8a3b      	ldrh	r3, [r7, #16]
 800da48:	4619      	mov	r1, r3
 800da4a:	88fb      	ldrh	r3, [r7, #6]
 800da4c:	440b      	add	r3, r1
 800da4e:	429a      	cmp	r2, r3
 800da50:	db3e      	blt.n	800dad0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800da52:	88fb      	ldrh	r3, [r7, #6]
 800da54:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	895a      	ldrh	r2, [r3, #10]
 800da5e:	8a3b      	ldrh	r3, [r7, #16]
 800da60:	429a      	cmp	r2, r3
 800da62:	d806      	bhi.n	800da72 <pbuf_take_at+0x5e>
 800da64:	4b1d      	ldr	r3, [pc, #116]	; (800dadc <pbuf_take_at+0xc8>)
 800da66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800da6a:	491d      	ldr	r1, [pc, #116]	; (800dae0 <pbuf_take_at+0xcc>)
 800da6c:	481d      	ldr	r0, [pc, #116]	; (800dae4 <pbuf_take_at+0xd0>)
 800da6e:	f00c fc5f 	bl	801a330 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800da72:	69fb      	ldr	r3, [r7, #28]
 800da74:	895b      	ldrh	r3, [r3, #10]
 800da76:	461a      	mov	r2, r3
 800da78:	8a3b      	ldrh	r3, [r7, #16]
 800da7a:	1ad2      	subs	r2, r2, r3
 800da7c:	88fb      	ldrh	r3, [r7, #6]
 800da7e:	429a      	cmp	r2, r3
 800da80:	da05      	bge.n	800da8e <pbuf_take_at+0x7a>
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	895a      	ldrh	r2, [r3, #10]
 800da86:	8a3b      	ldrh	r3, [r7, #16]
 800da88:	1ad3      	subs	r3, r2, r3
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	e000      	b.n	800da90 <pbuf_take_at+0x7c>
 800da8e:	88fb      	ldrh	r3, [r7, #6]
 800da90:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	685b      	ldr	r3, [r3, #4]
 800da96:	8a3a      	ldrh	r2, [r7, #16]
 800da98:	4413      	add	r3, r2
 800da9a:	8a7a      	ldrh	r2, [r7, #18]
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f00b fd9c 	bl	80195dc <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800daa4:	8b7a      	ldrh	r2, [r7, #26]
 800daa6:	8a7b      	ldrh	r3, [r7, #18]
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800daac:	8a7b      	ldrh	r3, [r7, #18]
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	4413      	add	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800dab4:	8b7b      	ldrh	r3, [r7, #26]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d008      	beq.n	800dacc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800daba:	69fb      	ldr	r3, [r7, #28]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	8b7a      	ldrh	r2, [r7, #26]
 800dac0:	6979      	ldr	r1, [r7, #20]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff ff14 	bl	800d8f0 <pbuf_take>
 800dac8:	4603      	mov	r3, r0
 800daca:	e003      	b.n	800dad4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	e001      	b.n	800dad4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800dad0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3720      	adds	r7, #32
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	0801faf4 	.word	0x0801faf4
 800dae0:	0801ff50 	.word	0x0801ff50
 800dae4:	0801fb54 	.word	0x0801fb54

0800dae8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	4603      	mov	r3, r0
 800daf0:	603a      	str	r2, [r7, #0]
 800daf2:	71fb      	strb	r3, [r7, #7]
 800daf4:	460b      	mov	r3, r1
 800daf6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	8919      	ldrh	r1, [r3, #8]
 800dafc:	88ba      	ldrh	r2, [r7, #4]
 800dafe:	79fb      	ldrb	r3, [r7, #7]
 800db00:	4618      	mov	r0, r3
 800db02:	f7ff f95d 	bl	800cdc0 <pbuf_alloc>
 800db06:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d101      	bne.n	800db12 <pbuf_clone+0x2a>
    return NULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	e011      	b.n	800db36 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff fd6b 	bl	800d5f0 <pbuf_copy>
 800db1a:	4603      	mov	r3, r0
 800db1c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800db1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d006      	beq.n	800db34 <pbuf_clone+0x4c>
 800db26:	4b06      	ldr	r3, [pc, #24]	; (800db40 <pbuf_clone+0x58>)
 800db28:	f240 5224 	movw	r2, #1316	; 0x524
 800db2c:	4905      	ldr	r1, [pc, #20]	; (800db44 <pbuf_clone+0x5c>)
 800db2e:	4806      	ldr	r0, [pc, #24]	; (800db48 <pbuf_clone+0x60>)
 800db30:	f00c fbfe 	bl	801a330 <iprintf>
  return q;
 800db34:	68fb      	ldr	r3, [r7, #12]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	0801faf4 	.word	0x0801faf4
 800db44:	0801ff68 	.word	0x0801ff68
 800db48:	0801fb54 	.word	0x0801fb54

0800db4c <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800db58:	f107 020a 	add.w	r2, r7, #10
 800db5c:	887b      	ldrh	r3, [r7, #2]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff fe89 	bl	800d878 <pbuf_skip_const>
 800db66:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d00a      	beq.n	800db84 <pbuf_try_get_at+0x38>
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	895a      	ldrh	r2, [r3, #10]
 800db72:	897b      	ldrh	r3, [r7, #10]
 800db74:	429a      	cmp	r2, r3
 800db76:	d905      	bls.n	800db84 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	897a      	ldrh	r2, [r7, #10]
 800db7e:	4413      	add	r3, r2
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	e001      	b.n	800db88 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800db84:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3710      	adds	r7, #16
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	807b      	strh	r3, [r7, #2]
 800db9c:	4613      	mov	r3, r2
 800db9e:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800dba0:	f107 020a 	add.w	r2, r7, #10
 800dba4:	887b      	ldrh	r3, [r7, #2]
 800dba6:	4619      	mov	r1, r3
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff fe8e 	bl	800d8ca <pbuf_skip>
 800dbae:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d00a      	beq.n	800dbcc <pbuf_put_at+0x3c>
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	895a      	ldrh	r2, [r3, #10]
 800dbba:	897b      	ldrh	r3, [r7, #10]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d905      	bls.n	800dbcc <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	897a      	ldrh	r2, [r7, #10]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	787a      	ldrb	r2, [r7, #1]
 800dbca:	701a      	strb	r2, [r3, #0]
  }
}
 800dbcc:	bf00      	nop
 800dbce:	3710      	adds	r7, #16
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}

0800dbd4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dbd8:	f00c fc38 	bl	801a44c <rand>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	4b01      	ldr	r3, [pc, #4]	; (800dbf4 <tcp_init+0x20>)
 800dbee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dbf0:	bf00      	nop
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	20000010 	.word	0x20000010

0800dbf8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b082      	sub	sp, #8
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	7d1b      	ldrb	r3, [r3, #20]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d105      	bne.n	800dc14 <tcp_free+0x1c>
 800dc08:	4b06      	ldr	r3, [pc, #24]	; (800dc24 <tcp_free+0x2c>)
 800dc0a:	22d4      	movs	r2, #212	; 0xd4
 800dc0c:	4906      	ldr	r1, [pc, #24]	; (800dc28 <tcp_free+0x30>)
 800dc0e:	4807      	ldr	r0, [pc, #28]	; (800dc2c <tcp_free+0x34>)
 800dc10:	f00c fb8e 	bl	801a330 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dc14:	6879      	ldr	r1, [r7, #4]
 800dc16:	2001      	movs	r0, #1
 800dc18:	f7fe fd06 	bl	800c628 <memp_free>
}
 800dc1c:	bf00      	nop
 800dc1e:	3708      	adds	r7, #8
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	0801fff4 	.word	0x0801fff4
 800dc28:	08020024 	.word	0x08020024
 800dc2c:	08020038 	.word	0x08020038

0800dc30 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	7d1b      	ldrb	r3, [r3, #20]
 800dc3c:	2b01      	cmp	r3, #1
 800dc3e:	d105      	bne.n	800dc4c <tcp_free_listen+0x1c>
 800dc40:	4b06      	ldr	r3, [pc, #24]	; (800dc5c <tcp_free_listen+0x2c>)
 800dc42:	22df      	movs	r2, #223	; 0xdf
 800dc44:	4906      	ldr	r1, [pc, #24]	; (800dc60 <tcp_free_listen+0x30>)
 800dc46:	4807      	ldr	r0, [pc, #28]	; (800dc64 <tcp_free_listen+0x34>)
 800dc48:	f00c fb72 	bl	801a330 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	2002      	movs	r0, #2
 800dc50:	f7fe fcea 	bl	800c628 <memp_free>
}
 800dc54:	bf00      	nop
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	0801fff4 	.word	0x0801fff4
 800dc60:	08020060 	.word	0x08020060
 800dc64:	08020038 	.word	0x08020038

0800dc68 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dc6c:	f001 f8f4 	bl	800ee58 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dc70:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <tcp_tmr+0x28>)
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	3301      	adds	r3, #1
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	4b05      	ldr	r3, [pc, #20]	; (800dc90 <tcp_tmr+0x28>)
 800dc7a:	701a      	strb	r2, [r3, #0]
 800dc7c:	4b04      	ldr	r3, [pc, #16]	; (800dc90 <tcp_tmr+0x28>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	f003 0301 	and.w	r3, r3, #1
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dc88:	f000 fda6 	bl	800e7d8 <tcp_slowtmr>
  }
}
 800dc8c:	bf00      	nop
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	2002149d 	.word	0x2002149d

0800dc94 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d105      	bne.n	800dcb0 <tcp_remove_listener+0x1c>
 800dca4:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <tcp_remove_listener+0x48>)
 800dca6:	22ff      	movs	r2, #255	; 0xff
 800dca8:	490d      	ldr	r1, [pc, #52]	; (800dce0 <tcp_remove_listener+0x4c>)
 800dcaa:	480e      	ldr	r0, [pc, #56]	; (800dce4 <tcp_remove_listener+0x50>)
 800dcac:	f00c fb40 	bl	801a330 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	e00a      	b.n	800dccc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d102      	bne.n	800dcc6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1f1      	bne.n	800dcb6 <tcp_remove_listener+0x22>
    }
  }
}
 800dcd2:	bf00      	nop
 800dcd4:	bf00      	nop
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	0801fff4 	.word	0x0801fff4
 800dce0:	0802007c 	.word	0x0802007c
 800dce4:	08020038 	.word	0x08020038

0800dce8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d106      	bne.n	800dd04 <tcp_listen_closed+0x1c>
 800dcf6:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <tcp_listen_closed+0x60>)
 800dcf8:	f240 1211 	movw	r2, #273	; 0x111
 800dcfc:	4913      	ldr	r1, [pc, #76]	; (800dd4c <tcp_listen_closed+0x64>)
 800dcfe:	4814      	ldr	r0, [pc, #80]	; (800dd50 <tcp_listen_closed+0x68>)
 800dd00:	f00c fb16 	bl	801a330 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	7d1b      	ldrb	r3, [r3, #20]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d006      	beq.n	800dd1a <tcp_listen_closed+0x32>
 800dd0c:	4b0e      	ldr	r3, [pc, #56]	; (800dd48 <tcp_listen_closed+0x60>)
 800dd0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dd12:	4910      	ldr	r1, [pc, #64]	; (800dd54 <tcp_listen_closed+0x6c>)
 800dd14:	480e      	ldr	r0, [pc, #56]	; (800dd50 <tcp_listen_closed+0x68>)
 800dd16:	f00c fb0b 	bl	801a330 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	e00b      	b.n	800dd38 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dd20:	4a0d      	ldr	r2, [pc, #52]	; (800dd58 <tcp_listen_closed+0x70>)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff ffb1 	bl	800dc94 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3301      	adds	r3, #1
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d9f0      	bls.n	800dd20 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dd3e:	bf00      	nop
 800dd40:	bf00      	nop
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	0801fff4 	.word	0x0801fff4
 800dd4c:	080200a4 	.word	0x080200a4
 800dd50:	08020038 	.word	0x08020038
 800dd54:	080200b0 	.word	0x080200b0
 800dd58:	08022448 	.word	0x08022448

0800dd5c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dd5c:	b5b0      	push	{r4, r5, r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af04      	add	r7, sp, #16
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	460b      	mov	r3, r1
 800dd66:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d106      	bne.n	800dd7c <tcp_close_shutdown+0x20>
 800dd6e:	4b63      	ldr	r3, [pc, #396]	; (800defc <tcp_close_shutdown+0x1a0>)
 800dd70:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dd74:	4962      	ldr	r1, [pc, #392]	; (800df00 <tcp_close_shutdown+0x1a4>)
 800dd76:	4863      	ldr	r0, [pc, #396]	; (800df04 <tcp_close_shutdown+0x1a8>)
 800dd78:	f00c fada 	bl	801a330 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dd7c:	78fb      	ldrb	r3, [r7, #3]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d066      	beq.n	800de50 <tcp_close_shutdown+0xf4>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	7d1b      	ldrb	r3, [r3, #20]
 800dd86:	2b04      	cmp	r3, #4
 800dd88:	d003      	beq.n	800dd92 <tcp_close_shutdown+0x36>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	7d1b      	ldrb	r3, [r3, #20]
 800dd8e:	2b07      	cmp	r3, #7
 800dd90:	d15e      	bne.n	800de50 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d104      	bne.n	800dda4 <tcp_close_shutdown+0x48>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dda2:	d055      	beq.n	800de50 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	8b5b      	ldrh	r3, [r3, #26]
 800dda8:	f003 0310 	and.w	r3, r3, #16
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d106      	bne.n	800ddbe <tcp_close_shutdown+0x62>
 800ddb0:	4b52      	ldr	r3, [pc, #328]	; (800defc <tcp_close_shutdown+0x1a0>)
 800ddb2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ddb6:	4954      	ldr	r1, [pc, #336]	; (800df08 <tcp_close_shutdown+0x1ac>)
 800ddb8:	4852      	ldr	r0, [pc, #328]	; (800df04 <tcp_close_shutdown+0x1a8>)
 800ddba:	f00c fab9 	bl	801a330 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ddc6:	687d      	ldr	r5, [r7, #4]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	3304      	adds	r3, #4
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	8ad2      	ldrh	r2, [r2, #22]
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	8b09      	ldrh	r1, [r1, #24]
 800ddd4:	9102      	str	r1, [sp, #8]
 800ddd6:	9201      	str	r2, [sp, #4]
 800ddd8:	9300      	str	r3, [sp, #0]
 800ddda:	462b      	mov	r3, r5
 800dddc:	4622      	mov	r2, r4
 800ddde:	4601      	mov	r1, r0
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f005 fe05 	bl	80139f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f001 fbe6 	bl	800f5b8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ddec:	4b47      	ldr	r3, [pc, #284]	; (800df0c <tcp_close_shutdown+0x1b0>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d105      	bne.n	800de02 <tcp_close_shutdown+0xa6>
 800ddf6:	4b45      	ldr	r3, [pc, #276]	; (800df0c <tcp_close_shutdown+0x1b0>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68db      	ldr	r3, [r3, #12]
 800ddfc:	4a43      	ldr	r2, [pc, #268]	; (800df0c <tcp_close_shutdown+0x1b0>)
 800ddfe:	6013      	str	r3, [r2, #0]
 800de00:	e013      	b.n	800de2a <tcp_close_shutdown+0xce>
 800de02:	4b42      	ldr	r3, [pc, #264]	; (800df0c <tcp_close_shutdown+0x1b0>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	60fb      	str	r3, [r7, #12]
 800de08:	e00c      	b.n	800de24 <tcp_close_shutdown+0xc8>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	68db      	ldr	r3, [r3, #12]
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	429a      	cmp	r2, r3
 800de12:	d104      	bne.n	800de1e <tcp_close_shutdown+0xc2>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	60da      	str	r2, [r3, #12]
 800de1c:	e005      	b.n	800de2a <tcp_close_shutdown+0xce>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	68db      	ldr	r3, [r3, #12]
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1ef      	bne.n	800de0a <tcp_close_shutdown+0xae>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	60da      	str	r2, [r3, #12]
 800de30:	4b37      	ldr	r3, [pc, #220]	; (800df10 <tcp_close_shutdown+0x1b4>)
 800de32:	2201      	movs	r2, #1
 800de34:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800de36:	4b37      	ldr	r3, [pc, #220]	; (800df14 <tcp_close_shutdown+0x1b8>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d102      	bne.n	800de46 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800de40:	f004 f87a 	bl	8011f38 <tcp_trigger_input_pcb_close>
 800de44:	e002      	b.n	800de4c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fed6 	bl	800dbf8 <tcp_free>
      }
      return ERR_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	e050      	b.n	800def2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	7d1b      	ldrb	r3, [r3, #20]
 800de54:	2b02      	cmp	r3, #2
 800de56:	d03b      	beq.n	800ded0 <tcp_close_shutdown+0x174>
 800de58:	2b02      	cmp	r3, #2
 800de5a:	dc44      	bgt.n	800dee6 <tcp_close_shutdown+0x18a>
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <tcp_close_shutdown+0x10a>
 800de60:	2b01      	cmp	r3, #1
 800de62:	d02a      	beq.n	800deba <tcp_close_shutdown+0x15e>
 800de64:	e03f      	b.n	800dee6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	8adb      	ldrh	r3, [r3, #22]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d021      	beq.n	800deb2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800de6e:	4b2a      	ldr	r3, [pc, #168]	; (800df18 <tcp_close_shutdown+0x1bc>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	687a      	ldr	r2, [r7, #4]
 800de74:	429a      	cmp	r2, r3
 800de76:	d105      	bne.n	800de84 <tcp_close_shutdown+0x128>
 800de78:	4b27      	ldr	r3, [pc, #156]	; (800df18 <tcp_close_shutdown+0x1bc>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	4a26      	ldr	r2, [pc, #152]	; (800df18 <tcp_close_shutdown+0x1bc>)
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	e013      	b.n	800deac <tcp_close_shutdown+0x150>
 800de84:	4b24      	ldr	r3, [pc, #144]	; (800df18 <tcp_close_shutdown+0x1bc>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	60bb      	str	r3, [r7, #8]
 800de8a:	e00c      	b.n	800dea6 <tcp_close_shutdown+0x14a>
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	68db      	ldr	r3, [r3, #12]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	429a      	cmp	r2, r3
 800de94:	d104      	bne.n	800dea0 <tcp_close_shutdown+0x144>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	68da      	ldr	r2, [r3, #12]
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	60da      	str	r2, [r3, #12]
 800de9e:	e005      	b.n	800deac <tcp_close_shutdown+0x150>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	60bb      	str	r3, [r7, #8]
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d1ef      	bne.n	800de8c <tcp_close_shutdown+0x130>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff fea0 	bl	800dbf8 <tcp_free>
      break;
 800deb8:	e01a      	b.n	800def0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f7ff ff14 	bl	800dce8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	4816      	ldr	r0, [pc, #88]	; (800df1c <tcp_close_shutdown+0x1c0>)
 800dec4:	f001 fbc8 	bl	800f658 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	f7ff feb1 	bl	800dc30 <tcp_free_listen>
      break;
 800dece:	e00f      	b.n	800def0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ded0:	6879      	ldr	r1, [r7, #4]
 800ded2:	480e      	ldr	r0, [pc, #56]	; (800df0c <tcp_close_shutdown+0x1b0>)
 800ded4:	f001 fbc0 	bl	800f658 <tcp_pcb_remove>
 800ded8:	4b0d      	ldr	r3, [pc, #52]	; (800df10 <tcp_close_shutdown+0x1b4>)
 800deda:	2201      	movs	r2, #1
 800dedc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f7ff fe8a 	bl	800dbf8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dee4:	e004      	b.n	800def0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 f81a 	bl	800df20 <tcp_close_shutdown_fin>
 800deec:	4603      	mov	r3, r0
 800deee:	e000      	b.n	800def2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800def0:	2300      	movs	r3, #0
}
 800def2:	4618      	mov	r0, r3
 800def4:	3710      	adds	r7, #16
 800def6:	46bd      	mov	sp, r7
 800def8:	bdb0      	pop	{r4, r5, r7, pc}
 800defa:	bf00      	nop
 800defc:	0801fff4 	.word	0x0801fff4
 800df00:	080200c8 	.word	0x080200c8
 800df04:	08020038 	.word	0x08020038
 800df08:	080200e8 	.word	0x080200e8
 800df0c:	200280ac 	.word	0x200280ac
 800df10:	200280a8 	.word	0x200280a8
 800df14:	200280c0 	.word	0x200280c0
 800df18:	200280b8 	.word	0x200280b8
 800df1c:	200280b4 	.word	0x200280b4

0800df20 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d106      	bne.n	800df3c <tcp_close_shutdown_fin+0x1c>
 800df2e:	4b2e      	ldr	r3, [pc, #184]	; (800dfe8 <tcp_close_shutdown_fin+0xc8>)
 800df30:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800df34:	492d      	ldr	r1, [pc, #180]	; (800dfec <tcp_close_shutdown_fin+0xcc>)
 800df36:	482e      	ldr	r0, [pc, #184]	; (800dff0 <tcp_close_shutdown_fin+0xd0>)
 800df38:	f00c f9fa 	bl	801a330 <iprintf>

  switch (pcb->state) {
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	7d1b      	ldrb	r3, [r3, #20]
 800df40:	2b07      	cmp	r3, #7
 800df42:	d020      	beq.n	800df86 <tcp_close_shutdown_fin+0x66>
 800df44:	2b07      	cmp	r3, #7
 800df46:	dc2b      	bgt.n	800dfa0 <tcp_close_shutdown_fin+0x80>
 800df48:	2b03      	cmp	r3, #3
 800df4a:	d002      	beq.n	800df52 <tcp_close_shutdown_fin+0x32>
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	d00d      	beq.n	800df6c <tcp_close_shutdown_fin+0x4c>
 800df50:	e026      	b.n	800dfa0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f004 fe5a 	bl	8012c0c <tcp_send_fin>
 800df58:	4603      	mov	r3, r0
 800df5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800df5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d11f      	bne.n	800dfa4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2205      	movs	r2, #5
 800df68:	751a      	strb	r2, [r3, #20]
      }
      break;
 800df6a:	e01b      	b.n	800dfa4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f004 fe4d 	bl	8012c0c <tcp_send_fin>
 800df72:	4603      	mov	r3, r0
 800df74:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800df76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d114      	bne.n	800dfa8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2205      	movs	r2, #5
 800df82:	751a      	strb	r2, [r3, #20]
      }
      break;
 800df84:	e010      	b.n	800dfa8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f004 fe40 	bl	8012c0c <tcp_send_fin>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800df90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d109      	bne.n	800dfac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2209      	movs	r2, #9
 800df9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800df9e:	e005      	b.n	800dfac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	e01c      	b.n	800dfde <tcp_close_shutdown_fin+0xbe>
      break;
 800dfa4:	bf00      	nop
 800dfa6:	e002      	b.n	800dfae <tcp_close_shutdown_fin+0x8e>
      break;
 800dfa8:	bf00      	nop
 800dfaa:	e000      	b.n	800dfae <tcp_close_shutdown_fin+0x8e>
      break;
 800dfac:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dfae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d103      	bne.n	800dfbe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f004 ff66 	bl	8012e88 <tcp_output>
 800dfbc:	e00d      	b.n	800dfda <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800dfbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc6:	d108      	bne.n	800dfda <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	8b5b      	ldrh	r3, [r3, #26]
 800dfcc:	f043 0308 	orr.w	r3, r3, #8
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	e001      	b.n	800dfde <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dfda:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	0801fff4 	.word	0x0801fff4
 800dfec:	080200a4 	.word	0x080200a4
 800dff0:	08020038 	.word	0x08020038

0800dff4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d109      	bne.n	800e016 <tcp_close+0x22>
 800e002:	4b0f      	ldr	r3, [pc, #60]	; (800e040 <tcp_close+0x4c>)
 800e004:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e008:	490e      	ldr	r1, [pc, #56]	; (800e044 <tcp_close+0x50>)
 800e00a:	480f      	ldr	r0, [pc, #60]	; (800e048 <tcp_close+0x54>)
 800e00c:	f00c f990 	bl	801a330 <iprintf>
 800e010:	f06f 030f 	mvn.w	r3, #15
 800e014:	e00f      	b.n	800e036 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7d1b      	ldrb	r3, [r3, #20]
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d006      	beq.n	800e02c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	8b5b      	ldrh	r3, [r3, #26]
 800e022:	f043 0310 	orr.w	r3, r3, #16
 800e026:	b29a      	uxth	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e02c:	2101      	movs	r1, #1
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7ff fe94 	bl	800dd5c <tcp_close_shutdown>
 800e034:	4603      	mov	r3, r0
}
 800e036:	4618      	mov	r0, r3
 800e038:	3708      	adds	r7, #8
 800e03a:	46bd      	mov	sp, r7
 800e03c:	bd80      	pop	{r7, pc}
 800e03e:	bf00      	nop
 800e040:	0801fff4 	.word	0x0801fff4
 800e044:	08020104 	.word	0x08020104
 800e048:	08020038 	.word	0x08020038

0800e04c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d109      	bne.n	800e072 <tcp_shutdown+0x26>
 800e05e:	4b26      	ldr	r3, [pc, #152]	; (800e0f8 <tcp_shutdown+0xac>)
 800e060:	f240 2207 	movw	r2, #519	; 0x207
 800e064:	4925      	ldr	r1, [pc, #148]	; (800e0fc <tcp_shutdown+0xb0>)
 800e066:	4826      	ldr	r0, [pc, #152]	; (800e100 <tcp_shutdown+0xb4>)
 800e068:	f00c f962 	bl	801a330 <iprintf>
 800e06c:	f06f 030f 	mvn.w	r3, #15
 800e070:	e03d      	b.n	800e0ee <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	7d1b      	ldrb	r3, [r3, #20]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d102      	bne.n	800e080 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e07a:	f06f 030a 	mvn.w	r3, #10
 800e07e:	e036      	b.n	800e0ee <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d01b      	beq.n	800e0be <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	8b5b      	ldrh	r3, [r3, #26]
 800e08a:	f043 0310 	orr.w	r3, r3, #16
 800e08e:	b29a      	uxth	r2, r3
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d005      	beq.n	800e0a6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e09a:	2101      	movs	r1, #1
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff fe5d 	bl	800dd5c <tcp_close_shutdown>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	e023      	b.n	800e0ee <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d007      	beq.n	800e0be <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7ff f968 	bl	800d388 <pbuf_free>
      pcb->refused_data = NULL;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d013      	beq.n	800e0ec <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	7d1b      	ldrb	r3, [r3, #20]
 800e0c8:	2b04      	cmp	r3, #4
 800e0ca:	dc02      	bgt.n	800e0d2 <tcp_shutdown+0x86>
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	da02      	bge.n	800e0d6 <tcp_shutdown+0x8a>
 800e0d0:	e009      	b.n	800e0e6 <tcp_shutdown+0x9a>
 800e0d2:	2b07      	cmp	r3, #7
 800e0d4:	d107      	bne.n	800e0e6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	4619      	mov	r1, r3
 800e0dc:	68f8      	ldr	r0, [r7, #12]
 800e0de:	f7ff fe3d 	bl	800dd5c <tcp_close_shutdown>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	e003      	b.n	800e0ee <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e0e6:	f06f 030a 	mvn.w	r3, #10
 800e0ea:	e000      	b.n	800e0ee <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	0801fff4 	.word	0x0801fff4
 800e0fc:	0802011c 	.word	0x0802011c
 800e100:	08020038 	.word	0x08020038

0800e104 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b08e      	sub	sp, #56	; 0x38
 800e108:	af04      	add	r7, sp, #16
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d107      	bne.n	800e124 <tcp_abandon+0x20>
 800e114:	4b52      	ldr	r3, [pc, #328]	; (800e260 <tcp_abandon+0x15c>)
 800e116:	f240 223d 	movw	r2, #573	; 0x23d
 800e11a:	4952      	ldr	r1, [pc, #328]	; (800e264 <tcp_abandon+0x160>)
 800e11c:	4852      	ldr	r0, [pc, #328]	; (800e268 <tcp_abandon+0x164>)
 800e11e:	f00c f907 	bl	801a330 <iprintf>
 800e122:	e099      	b.n	800e258 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	7d1b      	ldrb	r3, [r3, #20]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d106      	bne.n	800e13a <tcp_abandon+0x36>
 800e12c:	4b4c      	ldr	r3, [pc, #304]	; (800e260 <tcp_abandon+0x15c>)
 800e12e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e132:	494e      	ldr	r1, [pc, #312]	; (800e26c <tcp_abandon+0x168>)
 800e134:	484c      	ldr	r0, [pc, #304]	; (800e268 <tcp_abandon+0x164>)
 800e136:	f00c f8fb 	bl	801a330 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	7d1b      	ldrb	r3, [r3, #20]
 800e13e:	2b0a      	cmp	r3, #10
 800e140:	d107      	bne.n	800e152 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e142:	6879      	ldr	r1, [r7, #4]
 800e144:	484a      	ldr	r0, [pc, #296]	; (800e270 <tcp_abandon+0x16c>)
 800e146:	f001 fa87 	bl	800f658 <tcp_pcb_remove>
    tcp_free(pcb);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7ff fd54 	bl	800dbf8 <tcp_free>
 800e150:	e082      	b.n	800e258 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e156:	2300      	movs	r3, #0
 800e158:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e15e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e164:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e16c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	7d1b      	ldrb	r3, [r3, #20]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d126      	bne.n	800e1ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	8adb      	ldrh	r3, [r3, #22]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d02e      	beq.n	800e1e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e184:	4b3b      	ldr	r3, [pc, #236]	; (800e274 <tcp_abandon+0x170>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d105      	bne.n	800e19a <tcp_abandon+0x96>
 800e18e:	4b39      	ldr	r3, [pc, #228]	; (800e274 <tcp_abandon+0x170>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	4a37      	ldr	r2, [pc, #220]	; (800e274 <tcp_abandon+0x170>)
 800e196:	6013      	str	r3, [r2, #0]
 800e198:	e013      	b.n	800e1c2 <tcp_abandon+0xbe>
 800e19a:	4b36      	ldr	r3, [pc, #216]	; (800e274 <tcp_abandon+0x170>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	61fb      	str	r3, [r7, #28]
 800e1a0:	e00c      	b.n	800e1bc <tcp_abandon+0xb8>
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	687a      	ldr	r2, [r7, #4]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d104      	bne.n	800e1b6 <tcp_abandon+0xb2>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	68da      	ldr	r2, [r3, #12]
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	60da      	str	r2, [r3, #12]
 800e1b4:	e005      	b.n	800e1c2 <tcp_abandon+0xbe>
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	68db      	ldr	r3, [r3, #12]
 800e1ba:	61fb      	str	r3, [r7, #28]
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1ef      	bne.n	800e1a2 <tcp_abandon+0x9e>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	60da      	str	r2, [r3, #12]
 800e1c8:	e00b      	b.n	800e1e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	8adb      	ldrh	r3, [r3, #22]
 800e1d2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e1d4:	6879      	ldr	r1, [r7, #4]
 800e1d6:	4828      	ldr	r0, [pc, #160]	; (800e278 <tcp_abandon+0x174>)
 800e1d8:	f001 fa3e 	bl	800f658 <tcp_pcb_remove>
 800e1dc:	4b27      	ldr	r3, [pc, #156]	; (800e27c <tcp_abandon+0x178>)
 800e1de:	2201      	movs	r2, #1
 800e1e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d004      	beq.n	800e1f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f000 ff12 	bl	800f018 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d004      	beq.n	800e206 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e200:	4618      	mov	r0, r3
 800e202:	f000 ff09 	bl	800f018 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d004      	beq.n	800e218 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e212:	4618      	mov	r0, r3
 800e214:	f000 ff00 	bl	800f018 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00e      	beq.n	800e23c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e21e:	6879      	ldr	r1, [r7, #4]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	3304      	adds	r3, #4
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	8b12      	ldrh	r2, [r2, #24]
 800e228:	9202      	str	r2, [sp, #8]
 800e22a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e22c:	9201      	str	r2, [sp, #4]
 800e22e:	9300      	str	r3, [sp, #0]
 800e230:	460b      	mov	r3, r1
 800e232:	697a      	ldr	r2, [r7, #20]
 800e234:	69b9      	ldr	r1, [r7, #24]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f005 fbda 	bl	80139f0 <tcp_rst>
    }
    last_state = pcb->state;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	7d1b      	ldrb	r3, [r3, #20]
 800e240:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff fcd8 	bl	800dbf8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d004      	beq.n	800e258 <tcp_abandon+0x154>
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	f06f 010c 	mvn.w	r1, #12
 800e254:	68f8      	ldr	r0, [r7, #12]
 800e256:	4798      	blx	r3
  }
}
 800e258:	3728      	adds	r7, #40	; 0x28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	0801fff4 	.word	0x0801fff4
 800e264:	08020138 	.word	0x08020138
 800e268:	08020038 	.word	0x08020038
 800e26c:	08020154 	.word	0x08020154
 800e270:	200280bc 	.word	0x200280bc
 800e274:	200280b8 	.word	0x200280b8
 800e278:	200280ac 	.word	0x200280ac
 800e27c:	200280a8 	.word	0x200280a8

0800e280 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b082      	sub	sp, #8
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e288:	2101      	movs	r1, #1
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7ff ff3a 	bl	800e104 <tcp_abandon>
}
 800e290:	bf00      	nop
 800e292:	3708      	adds	r7, #8
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b088      	sub	sp, #32
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e2a6:	2304      	movs	r3, #4
 800e2a8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d101      	bne.n	800e2b4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e2b0:	4b3e      	ldr	r3, [pc, #248]	; (800e3ac <tcp_bind+0x114>)
 800e2b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d109      	bne.n	800e2ce <tcp_bind+0x36>
 800e2ba:	4b3d      	ldr	r3, [pc, #244]	; (800e3b0 <tcp_bind+0x118>)
 800e2bc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e2c0:	493c      	ldr	r1, [pc, #240]	; (800e3b4 <tcp_bind+0x11c>)
 800e2c2:	483d      	ldr	r0, [pc, #244]	; (800e3b8 <tcp_bind+0x120>)
 800e2c4:	f00c f834 	bl	801a330 <iprintf>
 800e2c8:	f06f 030f 	mvn.w	r3, #15
 800e2cc:	e06a      	b.n	800e3a4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	7d1b      	ldrb	r3, [r3, #20]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d009      	beq.n	800e2ea <tcp_bind+0x52>
 800e2d6:	4b36      	ldr	r3, [pc, #216]	; (800e3b0 <tcp_bind+0x118>)
 800e2d8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e2dc:	4937      	ldr	r1, [pc, #220]	; (800e3bc <tcp_bind+0x124>)
 800e2de:	4836      	ldr	r0, [pc, #216]	; (800e3b8 <tcp_bind+0x120>)
 800e2e0:	f00c f826 	bl	801a330 <iprintf>
 800e2e4:	f06f 0305 	mvn.w	r3, #5
 800e2e8:	e05c      	b.n	800e3a4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e2ea:	88fb      	ldrh	r3, [r7, #6]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d109      	bne.n	800e304 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e2f0:	f000 f914 	bl	800e51c <tcp_new_port>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e2f8:	88fb      	ldrh	r3, [r7, #6]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d135      	bne.n	800e36a <tcp_bind+0xd2>
      return ERR_BUF;
 800e2fe:	f06f 0301 	mvn.w	r3, #1
 800e302:	e04f      	b.n	800e3a4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e304:	2300      	movs	r3, #0
 800e306:	61fb      	str	r3, [r7, #28]
 800e308:	e02b      	b.n	800e362 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e30a:	4a2d      	ldr	r2, [pc, #180]	; (800e3c0 <tcp_bind+0x128>)
 800e30c:	69fb      	ldr	r3, [r7, #28]
 800e30e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	61bb      	str	r3, [r7, #24]
 800e316:	e01e      	b.n	800e356 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	8adb      	ldrh	r3, [r3, #22]
 800e31c:	88fa      	ldrh	r2, [r7, #6]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d116      	bne.n	800e350 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e322:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e324:	2b00      	cmp	r3, #0
 800e326:	d010      	beq.n	800e34a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e328:	69bb      	ldr	r3, [r7, #24]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00c      	beq.n	800e34a <tcp_bind+0xb2>
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d009      	beq.n	800e34a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d005      	beq.n	800e34a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e33e:	69bb      	ldr	r3, [r7, #24]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e346:	429a      	cmp	r2, r3
 800e348:	d102      	bne.n	800e350 <tcp_bind+0xb8>
              return ERR_USE;
 800e34a:	f06f 0307 	mvn.w	r3, #7
 800e34e:	e029      	b.n	800e3a4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	68db      	ldr	r3, [r3, #12]
 800e354:	61bb      	str	r3, [r7, #24]
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d1dd      	bne.n	800e318 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e35c:	69fb      	ldr	r3, [r7, #28]
 800e35e:	3301      	adds	r3, #1
 800e360:	61fb      	str	r3, [r7, #28]
 800e362:	69fa      	ldr	r2, [r7, #28]
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	429a      	cmp	r2, r3
 800e368:	dbcf      	blt.n	800e30a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00c      	beq.n	800e38a <tcp_bind+0xf2>
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d008      	beq.n	800e38a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d002      	beq.n	800e384 <tcp_bind+0xec>
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	e000      	b.n	800e386 <tcp_bind+0xee>
 800e384:	2300      	movs	r3, #0
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	88fa      	ldrh	r2, [r7, #6]
 800e38e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e390:	4b0c      	ldr	r3, [pc, #48]	; (800e3c4 <tcp_bind+0x12c>)
 800e392:	681a      	ldr	r2, [r3, #0]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	60da      	str	r2, [r3, #12]
 800e398:	4a0a      	ldr	r2, [pc, #40]	; (800e3c4 <tcp_bind+0x12c>)
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6013      	str	r3, [r2, #0]
 800e39e:	f005 fce9 	bl	8013d74 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3720      	adds	r7, #32
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	08022488 	.word	0x08022488
 800e3b0:	0801fff4 	.word	0x0801fff4
 800e3b4:	08020188 	.word	0x08020188
 800e3b8:	08020038 	.word	0x08020038
 800e3bc:	080201a0 	.word	0x080201a0
 800e3c0:	08022448 	.word	0x08022448
 800e3c4:	200280b8 	.word	0x200280b8

0800e3c8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d106      	bne.n	800e3e4 <tcp_update_rcv_ann_wnd+0x1c>
 800e3d6:	4b25      	ldr	r3, [pc, #148]	; (800e46c <tcp_update_rcv_ann_wnd+0xa4>)
 800e3d8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e3dc:	4924      	ldr	r1, [pc, #144]	; (800e470 <tcp_update_rcv_ann_wnd+0xa8>)
 800e3de:	4825      	ldr	r0, [pc, #148]	; (800e474 <tcp_update_rcv_ann_wnd+0xac>)
 800e3e0:	f00b ffa6 	bl	801a330 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e3ec:	4413      	add	r3, r2
 800e3ee:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e3f8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e3fc:	bf28      	it	cs
 800e3fe:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e402:	b292      	uxth	r2, r2
 800e404:	4413      	add	r3, r2
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	1ad3      	subs	r3, r2, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	db08      	blt.n	800e420 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	1ad3      	subs	r3, r2, r3
 800e41e:	e020      	b.n	800e462 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	dd03      	ble.n	800e436 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2200      	movs	r2, #0
 800e432:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e434:	e014      	b.n	800e460 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e448:	d306      	bcc.n	800e458 <tcp_update_rcv_ann_wnd+0x90>
 800e44a:	4b08      	ldr	r3, [pc, #32]	; (800e46c <tcp_update_rcv_ann_wnd+0xa4>)
 800e44c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e450:	4909      	ldr	r1, [pc, #36]	; (800e478 <tcp_update_rcv_ann_wnd+0xb0>)
 800e452:	4808      	ldr	r0, [pc, #32]	; (800e474 <tcp_update_rcv_ann_wnd+0xac>)
 800e454:	f00b ff6c 	bl	801a330 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e460:	2300      	movs	r3, #0
  }
}
 800e462:	4618      	mov	r0, r3
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	0801fff4 	.word	0x0801fff4
 800e470:	08020250 	.word	0x08020250
 800e474:	08020038 	.word	0x08020038
 800e478:	08020274 	.word	0x08020274

0800e47c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	460b      	mov	r3, r1
 800e486:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d107      	bne.n	800e49e <tcp_recved+0x22>
 800e48e:	4b1f      	ldr	r3, [pc, #124]	; (800e50c <tcp_recved+0x90>)
 800e490:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e494:	491e      	ldr	r1, [pc, #120]	; (800e510 <tcp_recved+0x94>)
 800e496:	481f      	ldr	r0, [pc, #124]	; (800e514 <tcp_recved+0x98>)
 800e498:	f00b ff4a 	bl	801a330 <iprintf>
 800e49c:	e032      	b.n	800e504 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	7d1b      	ldrb	r3, [r3, #20]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d106      	bne.n	800e4b4 <tcp_recved+0x38>
 800e4a6:	4b19      	ldr	r3, [pc, #100]	; (800e50c <tcp_recved+0x90>)
 800e4a8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e4ac:	491a      	ldr	r1, [pc, #104]	; (800e518 <tcp_recved+0x9c>)
 800e4ae:	4819      	ldr	r0, [pc, #100]	; (800e514 <tcp_recved+0x98>)
 800e4b0:	f00b ff3e 	bl	801a330 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e4b8:	887b      	ldrh	r3, [r7, #2]
 800e4ba:	4413      	add	r3, r2
 800e4bc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e4be:	89fb      	ldrh	r3, [r7, #14]
 800e4c0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e4c4:	d804      	bhi.n	800e4d0 <tcp_recved+0x54>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4ca:	89fa      	ldrh	r2, [r7, #14]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d204      	bcs.n	800e4da <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e4d6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e4d8:	e002      	b.n	800e4e0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	89fa      	ldrh	r2, [r7, #14]
 800e4de:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff ff71 	bl	800e3c8 <tcp_update_rcv_ann_wnd>
 800e4e6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e4ee:	d309      	bcc.n	800e504 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	8b5b      	ldrh	r3, [r3, #26]
 800e4f4:	f043 0302 	orr.w	r3, r3, #2
 800e4f8:	b29a      	uxth	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f004 fcc2 	bl	8012e88 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	0801fff4 	.word	0x0801fff4
 800e510:	08020290 	.word	0x08020290
 800e514:	08020038 	.word	0x08020038
 800e518:	080202a8 	.word	0x080202a8

0800e51c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e526:	4b1e      	ldr	r3, [pc, #120]	; (800e5a0 <tcp_new_port+0x84>)
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	3301      	adds	r3, #1
 800e52c:	b29a      	uxth	r2, r3
 800e52e:	4b1c      	ldr	r3, [pc, #112]	; (800e5a0 <tcp_new_port+0x84>)
 800e530:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e532:	4b1b      	ldr	r3, [pc, #108]	; (800e5a0 <tcp_new_port+0x84>)
 800e534:	881b      	ldrh	r3, [r3, #0]
 800e536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d103      	bne.n	800e546 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e53e:	4b18      	ldr	r3, [pc, #96]	; (800e5a0 <tcp_new_port+0x84>)
 800e540:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e544:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e546:	2300      	movs	r3, #0
 800e548:	71fb      	strb	r3, [r7, #7]
 800e54a:	e01e      	b.n	800e58a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e54c:	79fb      	ldrb	r3, [r7, #7]
 800e54e:	4a15      	ldr	r2, [pc, #84]	; (800e5a4 <tcp_new_port+0x88>)
 800e550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	e011      	b.n	800e57e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	8ada      	ldrh	r2, [r3, #22]
 800e55e:	4b10      	ldr	r3, [pc, #64]	; (800e5a0 <tcp_new_port+0x84>)
 800e560:	881b      	ldrh	r3, [r3, #0]
 800e562:	429a      	cmp	r2, r3
 800e564:	d108      	bne.n	800e578 <tcp_new_port+0x5c>
        n++;
 800e566:	88bb      	ldrh	r3, [r7, #4]
 800e568:	3301      	adds	r3, #1
 800e56a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e56c:	88bb      	ldrh	r3, [r7, #4]
 800e56e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e572:	d3d8      	bcc.n	800e526 <tcp_new_port+0xa>
          return 0;
 800e574:	2300      	movs	r3, #0
 800e576:	e00d      	b.n	800e594 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	603b      	str	r3, [r7, #0]
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1ea      	bne.n	800e55a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e584:	79fb      	ldrb	r3, [r7, #7]
 800e586:	3301      	adds	r3, #1
 800e588:	71fb      	strb	r3, [r7, #7]
 800e58a:	79fb      	ldrb	r3, [r7, #7]
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	d9dd      	bls.n	800e54c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e590:	4b03      	ldr	r3, [pc, #12]	; (800e5a0 <tcp_new_port+0x84>)
 800e592:	881b      	ldrh	r3, [r3, #0]
}
 800e594:	4618      	mov	r0, r3
 800e596:	370c      	adds	r7, #12
 800e598:	46bd      	mov	sp, r7
 800e59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59e:	4770      	bx	lr
 800e5a0:	20000010 	.word	0x20000010
 800e5a4:	08022448 	.word	0x08022448

0800e5a8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b08a      	sub	sp, #40	; 0x28
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	603b      	str	r3, [r7, #0]
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d109      	bne.n	800e5d6 <tcp_connect+0x2e>
 800e5c2:	4b7d      	ldr	r3, [pc, #500]	; (800e7b8 <tcp_connect+0x210>)
 800e5c4:	f240 4235 	movw	r2, #1077	; 0x435
 800e5c8:	497c      	ldr	r1, [pc, #496]	; (800e7bc <tcp_connect+0x214>)
 800e5ca:	487d      	ldr	r0, [pc, #500]	; (800e7c0 <tcp_connect+0x218>)
 800e5cc:	f00b feb0 	bl	801a330 <iprintf>
 800e5d0:	f06f 030f 	mvn.w	r3, #15
 800e5d4:	e0ec      	b.n	800e7b0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d109      	bne.n	800e5f0 <tcp_connect+0x48>
 800e5dc:	4b76      	ldr	r3, [pc, #472]	; (800e7b8 <tcp_connect+0x210>)
 800e5de:	f240 4236 	movw	r2, #1078	; 0x436
 800e5e2:	4978      	ldr	r1, [pc, #480]	; (800e7c4 <tcp_connect+0x21c>)
 800e5e4:	4876      	ldr	r0, [pc, #472]	; (800e7c0 <tcp_connect+0x218>)
 800e5e6:	f00b fea3 	bl	801a330 <iprintf>
 800e5ea:	f06f 030f 	mvn.w	r3, #15
 800e5ee:	e0df      	b.n	800e7b0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	7d1b      	ldrb	r3, [r3, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d009      	beq.n	800e60c <tcp_connect+0x64>
 800e5f8:	4b6f      	ldr	r3, [pc, #444]	; (800e7b8 <tcp_connect+0x210>)
 800e5fa:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e5fe:	4972      	ldr	r1, [pc, #456]	; (800e7c8 <tcp_connect+0x220>)
 800e600:	486f      	ldr	r0, [pc, #444]	; (800e7c0 <tcp_connect+0x218>)
 800e602:	f00b fe95 	bl	801a330 <iprintf>
 800e606:	f06f 0309 	mvn.w	r3, #9
 800e60a:	e0d1      	b.n	800e7b0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <tcp_connect+0x70>
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	e000      	b.n	800e61a <tcp_connect+0x72>
 800e618:	2300      	movs	r3, #0
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	88fa      	ldrh	r2, [r7, #6]
 800e622:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	7a1b      	ldrb	r3, [r3, #8]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d006      	beq.n	800e63a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	7a1b      	ldrb	r3, [r3, #8]
 800e630:	4618      	mov	r0, r3
 800e632:	f7fe fb1b 	bl	800cc6c <netif_get_by_index>
 800e636:	6278      	str	r0, [r7, #36]	; 0x24
 800e638:	e005      	b.n	800e646 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3304      	adds	r3, #4
 800e63e:	4618      	mov	r0, r3
 800e640:	f009 f9f8 	bl	8017a34 <ip4_route>
 800e644:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d102      	bne.n	800e652 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e64c:	f06f 0303 	mvn.w	r3, #3
 800e650:	e0ae      	b.n	800e7b0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d003      	beq.n	800e660 <tcp_connect+0xb8>
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d111      	bne.n	800e684 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	2b00      	cmp	r3, #0
 800e664:	d002      	beq.n	800e66c <tcp_connect+0xc4>
 800e666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e668:	3304      	adds	r3, #4
 800e66a:	e000      	b.n	800e66e <tcp_connect+0xc6>
 800e66c:	2300      	movs	r3, #0
 800e66e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d102      	bne.n	800e67c <tcp_connect+0xd4>
      return ERR_RTE;
 800e676:	f06f 0303 	mvn.w	r3, #3
 800e67a:	e099      	b.n	800e7b0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	681a      	ldr	r2, [r3, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	8adb      	ldrh	r3, [r3, #22]
 800e688:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	8adb      	ldrh	r3, [r3, #22]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d10c      	bne.n	800e6ac <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e692:	f7ff ff43 	bl	800e51c <tcp_new_port>
 800e696:	4603      	mov	r3, r0
 800e698:	461a      	mov	r2, r3
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	8adb      	ldrh	r3, [r3, #22]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d102      	bne.n	800e6ac <tcp_connect+0x104>
      return ERR_BUF;
 800e6a6:	f06f 0301 	mvn.w	r3, #1
 800e6aa:	e081      	b.n	800e7b0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f001 f867 	bl	800f780 <tcp_next_iss>
 800e6b2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	1e5a      	subs	r2, r3, #1
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	1e5a      	subs	r2, r3, #1
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	1e5a      	subs	r2, r3, #1
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e6de:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e6f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e700:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	3304      	adds	r3, #4
 800e70a:	461a      	mov	r2, r3
 800e70c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e70e:	f001 f85d 	bl	800f7cc <tcp_eff_send_mss_netif>
 800e712:	4603      	mov	r3, r0
 800e714:	461a      	mov	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2201      	movs	r2, #1
 800e71e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	683a      	ldr	r2, [r7, #0]
 800e726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e72a:	2102      	movs	r1, #2
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f004 fabd 	bl	8012cac <tcp_enqueue_flags>
 800e732:	4603      	mov	r3, r0
 800e734:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e736:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d136      	bne.n	800e7ac <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2202      	movs	r2, #2
 800e742:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e744:	8b7b      	ldrh	r3, [r7, #26]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d021      	beq.n	800e78e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e74a:	4b20      	ldr	r3, [pc, #128]	; (800e7cc <tcp_connect+0x224>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68fa      	ldr	r2, [r7, #12]
 800e750:	429a      	cmp	r2, r3
 800e752:	d105      	bne.n	800e760 <tcp_connect+0x1b8>
 800e754:	4b1d      	ldr	r3, [pc, #116]	; (800e7cc <tcp_connect+0x224>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	4a1c      	ldr	r2, [pc, #112]	; (800e7cc <tcp_connect+0x224>)
 800e75c:	6013      	str	r3, [r2, #0]
 800e75e:	e013      	b.n	800e788 <tcp_connect+0x1e0>
 800e760:	4b1a      	ldr	r3, [pc, #104]	; (800e7cc <tcp_connect+0x224>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	623b      	str	r3, [r7, #32]
 800e766:	e00c      	b.n	800e782 <tcp_connect+0x1da>
 800e768:	6a3b      	ldr	r3, [r7, #32]
 800e76a:	68db      	ldr	r3, [r3, #12]
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d104      	bne.n	800e77c <tcp_connect+0x1d4>
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	68da      	ldr	r2, [r3, #12]
 800e776:	6a3b      	ldr	r3, [r7, #32]
 800e778:	60da      	str	r2, [r3, #12]
 800e77a:	e005      	b.n	800e788 <tcp_connect+0x1e0>
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	623b      	str	r3, [r7, #32]
 800e782:	6a3b      	ldr	r3, [r7, #32]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d1ef      	bne.n	800e768 <tcp_connect+0x1c0>
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2200      	movs	r2, #0
 800e78c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e78e:	4b10      	ldr	r3, [pc, #64]	; (800e7d0 <tcp_connect+0x228>)
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	60da      	str	r2, [r3, #12]
 800e796:	4a0e      	ldr	r2, [pc, #56]	; (800e7d0 <tcp_connect+0x228>)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	6013      	str	r3, [r2, #0]
 800e79c:	f005 faea 	bl	8013d74 <tcp_timer_needed>
 800e7a0:	4b0c      	ldr	r3, [pc, #48]	; (800e7d4 <tcp_connect+0x22c>)
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f004 fb6e 	bl	8012e88 <tcp_output>
  }
  return ret;
 800e7ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3728      	adds	r7, #40	; 0x28
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	0801fff4 	.word	0x0801fff4
 800e7bc:	080202d0 	.word	0x080202d0
 800e7c0:	08020038 	.word	0x08020038
 800e7c4:	080202ec 	.word	0x080202ec
 800e7c8:	08020308 	.word	0x08020308
 800e7cc:	200280b8 	.word	0x200280b8
 800e7d0:	200280ac 	.word	0x200280ac
 800e7d4:	200280a8 	.word	0x200280a8

0800e7d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e7d8:	b5b0      	push	{r4, r5, r7, lr}
 800e7da:	b090      	sub	sp, #64	; 0x40
 800e7dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e7e4:	4b94      	ldr	r3, [pc, #592]	; (800ea38 <tcp_slowtmr+0x260>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	4a93      	ldr	r2, [pc, #588]	; (800ea38 <tcp_slowtmr+0x260>)
 800e7ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e7ee:	4b93      	ldr	r3, [pc, #588]	; (800ea3c <tcp_slowtmr+0x264>)
 800e7f0:	781b      	ldrb	r3, [r3, #0]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	4b91      	ldr	r3, [pc, #580]	; (800ea3c <tcp_slowtmr+0x264>)
 800e7f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e7fe:	4b90      	ldr	r3, [pc, #576]	; (800ea40 <tcp_slowtmr+0x268>)
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e804:	e29d      	b.n	800ed42 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e808:	7d1b      	ldrb	r3, [r3, #20]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d106      	bne.n	800e81c <tcp_slowtmr+0x44>
 800e80e:	4b8d      	ldr	r3, [pc, #564]	; (800ea44 <tcp_slowtmr+0x26c>)
 800e810:	f240 42be 	movw	r2, #1214	; 0x4be
 800e814:	498c      	ldr	r1, [pc, #560]	; (800ea48 <tcp_slowtmr+0x270>)
 800e816:	488d      	ldr	r0, [pc, #564]	; (800ea4c <tcp_slowtmr+0x274>)
 800e818:	f00b fd8a 	bl	801a330 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81e:	7d1b      	ldrb	r3, [r3, #20]
 800e820:	2b01      	cmp	r3, #1
 800e822:	d106      	bne.n	800e832 <tcp_slowtmr+0x5a>
 800e824:	4b87      	ldr	r3, [pc, #540]	; (800ea44 <tcp_slowtmr+0x26c>)
 800e826:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e82a:	4989      	ldr	r1, [pc, #548]	; (800ea50 <tcp_slowtmr+0x278>)
 800e82c:	4887      	ldr	r0, [pc, #540]	; (800ea4c <tcp_slowtmr+0x274>)
 800e82e:	f00b fd7f 	bl	801a330 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e834:	7d1b      	ldrb	r3, [r3, #20]
 800e836:	2b0a      	cmp	r3, #10
 800e838:	d106      	bne.n	800e848 <tcp_slowtmr+0x70>
 800e83a:	4b82      	ldr	r3, [pc, #520]	; (800ea44 <tcp_slowtmr+0x26c>)
 800e83c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e840:	4984      	ldr	r1, [pc, #528]	; (800ea54 <tcp_slowtmr+0x27c>)
 800e842:	4882      	ldr	r0, [pc, #520]	; (800ea4c <tcp_slowtmr+0x274>)
 800e844:	f00b fd74 	bl	801a330 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	7f9a      	ldrb	r2, [r3, #30]
 800e84c:	4b7b      	ldr	r3, [pc, #492]	; (800ea3c <tcp_slowtmr+0x264>)
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	429a      	cmp	r2, r3
 800e852:	d105      	bne.n	800e860 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e85e:	e270      	b.n	800ed42 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e860:	4b76      	ldr	r3, [pc, #472]	; (800ea3c <tcp_slowtmr+0x264>)
 800e862:	781a      	ldrb	r2, [r3, #0]
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e868:	2300      	movs	r3, #0
 800e86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	7d1b      	ldrb	r3, [r3, #20]
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d10a      	bne.n	800e892 <tcp_slowtmr+0xba>
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e882:	2b05      	cmp	r3, #5
 800e884:	d905      	bls.n	800e892 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e88a:	3301      	adds	r3, #1
 800e88c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e890:	e11e      	b.n	800ead0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e894:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e898:	2b0b      	cmp	r3, #11
 800e89a:	d905      	bls.n	800e8a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8a0:	3301      	adds	r3, #1
 800e8a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8a6:	e113      	b.n	800ead0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d075      	beq.n	800e99e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d006      	beq.n	800e8c8 <tcp_slowtmr+0xf0>
 800e8ba:	4b62      	ldr	r3, [pc, #392]	; (800ea44 <tcp_slowtmr+0x26c>)
 800e8bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e8c0:	4965      	ldr	r1, [pc, #404]	; (800ea58 <tcp_slowtmr+0x280>)
 800e8c2:	4862      	ldr	r0, [pc, #392]	; (800ea4c <tcp_slowtmr+0x274>)
 800e8c4:	f00b fd34 	bl	801a330 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d106      	bne.n	800e8de <tcp_slowtmr+0x106>
 800e8d0:	4b5c      	ldr	r3, [pc, #368]	; (800ea44 <tcp_slowtmr+0x26c>)
 800e8d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e8d6:	4961      	ldr	r1, [pc, #388]	; (800ea5c <tcp_slowtmr+0x284>)
 800e8d8:	485c      	ldr	r0, [pc, #368]	; (800ea4c <tcp_slowtmr+0x274>)
 800e8da:	f00b fd29 	bl	801a330 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e8e4:	2b0b      	cmp	r3, #11
 800e8e6:	d905      	bls.n	800e8f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e8e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e8f2:	e0ed      	b.n	800ead0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	4a58      	ldr	r2, [pc, #352]	; (800ea60 <tcp_slowtmr+0x288>)
 800e8fe:	5cd3      	ldrb	r3, [r2, r3]
 800e900:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e904:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e908:	7c7a      	ldrb	r2, [r7, #17]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d907      	bls.n	800e91e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e90e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e910:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e914:	3301      	adds	r3, #1
 800e916:	b2da      	uxtb	r2, r3
 800e918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e924:	7c7a      	ldrb	r2, [r7, #17]
 800e926:	429a      	cmp	r2, r3
 800e928:	f200 80d2 	bhi.w	800ead0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e92c:	2301      	movs	r3, #1
 800e92e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e936:	2b00      	cmp	r3, #0
 800e938:	d108      	bne.n	800e94c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e93a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e93c:	f005 f94c 	bl	8013bd8 <tcp_zero_window_probe>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d014      	beq.n	800e970 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e946:	2300      	movs	r3, #0
 800e948:	623b      	str	r3, [r7, #32]
 800e94a:	e011      	b.n	800e970 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e952:	4619      	mov	r1, r3
 800e954:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e956:	f004 f811 	bl	801297c <tcp_split_unsent_seg>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d107      	bne.n	800e970 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e960:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e962:	f004 fa91 	bl	8012e88 <tcp_output>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e970:	6a3b      	ldr	r3, [r7, #32]
 800e972:	2b00      	cmp	r3, #0
 800e974:	f000 80ac 	beq.w	800ead0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e982:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e986:	2b06      	cmp	r3, #6
 800e988:	f200 80a2 	bhi.w	800ead0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e992:	3301      	adds	r3, #1
 800e994:	b2da      	uxtb	r2, r3
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e998:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e99c:	e098      	b.n	800ead0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	db0f      	blt.n	800e9c8 <tcp_slowtmr+0x1f0>
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d008      	beq.n	800e9c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	3301      	adds	r3, #1
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	b21a      	sxth	r2, r3
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	db7b      	blt.n	800ead0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e9d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9da:	f004 fd47 	bl	801346c <tcp_rexmit_rto_prepare>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d007      	beq.n	800e9f4 <tcp_slowtmr+0x21c>
 800e9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d171      	bne.n	800ead0 <tcp_slowtmr+0x2f8>
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d06d      	beq.n	800ead0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	7d1b      	ldrb	r3, [r3, #20]
 800e9f8:	2b02      	cmp	r3, #2
 800e9fa:	d03a      	beq.n	800ea72 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ea02:	2b0c      	cmp	r3, #12
 800ea04:	bf28      	it	cs
 800ea06:	230c      	movcs	r3, #12
 800ea08:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ea0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea10:	10db      	asrs	r3, r3, #3
 800ea12:	b21b      	sxth	r3, r3
 800ea14:	461a      	mov	r2, r3
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea18:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea1c:	4413      	add	r3, r2
 800ea1e:	7efa      	ldrb	r2, [r7, #27]
 800ea20:	4910      	ldr	r1, [pc, #64]	; (800ea64 <tcp_slowtmr+0x28c>)
 800ea22:	5c8a      	ldrb	r2, [r1, r2]
 800ea24:	4093      	lsls	r3, r2
 800ea26:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ea2e:	4293      	cmp	r3, r2
 800ea30:	dc1a      	bgt.n	800ea68 <tcp_slowtmr+0x290>
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	b21a      	sxth	r2, r3
 800ea36:	e019      	b.n	800ea6c <tcp_slowtmr+0x294>
 800ea38:	200280b0 	.word	0x200280b0
 800ea3c:	2002149e 	.word	0x2002149e
 800ea40:	200280ac 	.word	0x200280ac
 800ea44:	0801fff4 	.word	0x0801fff4
 800ea48:	08020338 	.word	0x08020338
 800ea4c:	08020038 	.word	0x08020038
 800ea50:	08020364 	.word	0x08020364
 800ea54:	08020390 	.word	0x08020390
 800ea58:	080203c0 	.word	0x080203c0
 800ea5c:	080203f4 	.word	0x080203f4
 800ea60:	08022440 	.word	0x08022440
 800ea64:	08022430 	.word	0x08022430
 800ea68:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ea6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	2200      	movs	r2, #0
 800ea76:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ea78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea80:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea84:	4293      	cmp	r3, r2
 800ea86:	bf28      	it	cs
 800ea88:	4613      	movcs	r3, r2
 800ea8a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ea8c:	8a7b      	ldrh	r3, [r7, #18]
 800ea8e:	085b      	lsrs	r3, r3, #1
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ea9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaa2:	005b      	lsls	r3, r3, #1
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d206      	bcs.n	800eab8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eaae:	005b      	lsls	r3, r3, #1
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800eab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800eac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800eaca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eacc:	f004 fd3e 	bl	801354c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ead0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead2:	7d1b      	ldrb	r3, [r3, #20]
 800ead4:	2b06      	cmp	r3, #6
 800ead6:	d111      	bne.n	800eafc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ead8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eada:	8b5b      	ldrh	r3, [r3, #26]
 800eadc:	f003 0310 	and.w	r3, r3, #16
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00b      	beq.n	800eafc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eae4:	4b9c      	ldr	r3, [pc, #624]	; (800ed58 <tcp_slowtmr+0x580>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaea:	6a1b      	ldr	r3, [r3, #32]
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	2b28      	cmp	r3, #40	; 0x28
 800eaf0:	d904      	bls.n	800eafc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eaf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafe:	7a5b      	ldrb	r3, [r3, #9]
 800eb00:	f003 0308 	and.w	r3, r3, #8
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d04a      	beq.n	800eb9e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eb0c:	2b04      	cmp	r3, #4
 800eb0e:	d003      	beq.n	800eb18 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800eb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb12:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800eb14:	2b07      	cmp	r3, #7
 800eb16:	d142      	bne.n	800eb9e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb18:	4b8f      	ldr	r3, [pc, #572]	; (800ed58 <tcp_slowtmr+0x580>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	6a1b      	ldr	r3, [r3, #32]
 800eb20:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb24:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eb28:	4b8c      	ldr	r3, [pc, #560]	; (800ed5c <tcp_slowtmr+0x584>)
 800eb2a:	440b      	add	r3, r1
 800eb2c:	498c      	ldr	r1, [pc, #560]	; (800ed60 <tcp_slowtmr+0x588>)
 800eb2e:	fba1 1303 	umull	r1, r3, r1, r3
 800eb32:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d90a      	bls.n	800eb4e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800eb38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800eb42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eb46:	3301      	adds	r3, #1
 800eb48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eb4c:	e027      	b.n	800eb9e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb4e:	4b82      	ldr	r3, [pc, #520]	; (800ed58 <tcp_slowtmr+0x580>)
 800eb50:	681a      	ldr	r2, [r3, #0]
 800eb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb54:	6a1b      	ldr	r3, [r3, #32]
 800eb56:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb60:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eb64:	4618      	mov	r0, r3
 800eb66:	4b7f      	ldr	r3, [pc, #508]	; (800ed64 <tcp_slowtmr+0x58c>)
 800eb68:	fb03 f300 	mul.w	r3, r3, r0
 800eb6c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eb6e:	497c      	ldr	r1, [pc, #496]	; (800ed60 <tcp_slowtmr+0x588>)
 800eb70:	fba1 1303 	umull	r1, r3, r1, r3
 800eb74:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d911      	bls.n	800eb9e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800eb7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb7c:	f004 ffec 	bl	8013b58 <tcp_keepalive>
 800eb80:	4603      	mov	r3, r0
 800eb82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800eb86:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d107      	bne.n	800eb9e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eb94:	3301      	adds	r3, #1
 800eb96:	b2da      	uxtb	r2, r3
 800eb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d011      	beq.n	800ebca <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800eba6:	4b6c      	ldr	r3, [pc, #432]	; (800ed58 <tcp_slowtmr+0x580>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	1ad2      	subs	r2, r2, r3
 800ebb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	460b      	mov	r3, r1
 800ebba:	005b      	lsls	r3, r3, #1
 800ebbc:	440b      	add	r3, r1
 800ebbe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d302      	bcc.n	800ebca <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ebc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ebc6:	f000 feab 	bl	800f920 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ebca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebcc:	7d1b      	ldrb	r3, [r3, #20]
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d10b      	bne.n	800ebea <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebd2:	4b61      	ldr	r3, [pc, #388]	; (800ed58 <tcp_slowtmr+0x580>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	1ad3      	subs	r3, r2, r3
 800ebdc:	2b28      	cmp	r3, #40	; 0x28
 800ebde:	d904      	bls.n	800ebea <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ebe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebec:	7d1b      	ldrb	r3, [r3, #20]
 800ebee:	2b09      	cmp	r3, #9
 800ebf0:	d10b      	bne.n	800ec0a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ebf2:	4b59      	ldr	r3, [pc, #356]	; (800ed58 <tcp_slowtmr+0x580>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	6a1b      	ldr	r3, [r3, #32]
 800ebfa:	1ad3      	subs	r3, r2, r3
 800ebfc:	2bf0      	cmp	r3, #240	; 0xf0
 800ebfe:	d904      	bls.n	800ec0a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ec00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec04:	3301      	adds	r3, #1
 800ec06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ec0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d060      	beq.n	800ecd4 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ec12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec18:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ec1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec1c:	f000 fccc 	bl	800f5b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d010      	beq.n	800ec48 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ec26:	4b50      	ldr	r3, [pc, #320]	; (800ed68 <tcp_slowtmr+0x590>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d106      	bne.n	800ec3e <tcp_slowtmr+0x466>
 800ec30:	4b4e      	ldr	r3, [pc, #312]	; (800ed6c <tcp_slowtmr+0x594>)
 800ec32:	f240 526d 	movw	r2, #1389	; 0x56d
 800ec36:	494e      	ldr	r1, [pc, #312]	; (800ed70 <tcp_slowtmr+0x598>)
 800ec38:	484e      	ldr	r0, [pc, #312]	; (800ed74 <tcp_slowtmr+0x59c>)
 800ec3a:	f00b fb79 	bl	801a330 <iprintf>
        prev->next = pcb->next;
 800ec3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec40:	68da      	ldr	r2, [r3, #12]
 800ec42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec44:	60da      	str	r2, [r3, #12]
 800ec46:	e00f      	b.n	800ec68 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ec48:	4b47      	ldr	r3, [pc, #284]	; (800ed68 <tcp_slowtmr+0x590>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d006      	beq.n	800ec60 <tcp_slowtmr+0x488>
 800ec52:	4b46      	ldr	r3, [pc, #280]	; (800ed6c <tcp_slowtmr+0x594>)
 800ec54:	f240 5271 	movw	r2, #1393	; 0x571
 800ec58:	4947      	ldr	r1, [pc, #284]	; (800ed78 <tcp_slowtmr+0x5a0>)
 800ec5a:	4846      	ldr	r0, [pc, #280]	; (800ed74 <tcp_slowtmr+0x59c>)
 800ec5c:	f00b fb68 	bl	801a330 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec62:	68db      	ldr	r3, [r3, #12]
 800ec64:	4a40      	ldr	r2, [pc, #256]	; (800ed68 <tcp_slowtmr+0x590>)
 800ec66:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ec68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d013      	beq.n	800ec98 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ec74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec76:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ec78:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ec7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7c:	3304      	adds	r3, #4
 800ec7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec80:	8ad2      	ldrh	r2, [r2, #22]
 800ec82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec84:	8b09      	ldrh	r1, [r1, #24]
 800ec86:	9102      	str	r1, [sp, #8]
 800ec88:	9201      	str	r2, [sp, #4]
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	462b      	mov	r3, r5
 800ec8e:	4622      	mov	r2, r4
 800ec90:	4601      	mov	r1, r0
 800ec92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec94:	f004 feac 	bl	80139f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ec98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9a:	691b      	ldr	r3, [r3, #16]
 800ec9c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ec9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca0:	7d1b      	ldrb	r3, [r3, #20]
 800eca2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ecae:	6838      	ldr	r0, [r7, #0]
 800ecb0:	f7fe ffa2 	bl	800dbf8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ecb4:	4b31      	ldr	r3, [pc, #196]	; (800ed7c <tcp_slowtmr+0x5a4>)
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d004      	beq.n	800ecca <tcp_slowtmr+0x4f2>
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f06f 010c 	mvn.w	r1, #12
 800ecc6:	68b8      	ldr	r0, [r7, #8]
 800ecc8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ecca:	4b2c      	ldr	r3, [pc, #176]	; (800ed7c <tcp_slowtmr+0x5a4>)
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d037      	beq.n	800ed42 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ecd2:	e592      	b.n	800e7fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ecde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece0:	7f1b      	ldrb	r3, [r3, #28]
 800ece2:	3301      	adds	r3, #1
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ecea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecec:	7f1a      	ldrb	r2, [r3, #28]
 800ecee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf0:	7f5b      	ldrb	r3, [r3, #29]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d325      	bcc.n	800ed42 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ecfc:	4b1f      	ldr	r3, [pc, #124]	; (800ed7c <tcp_slowtmr+0x5a4>)
 800ecfe:	2200      	movs	r2, #0
 800ed00:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00b      	beq.n	800ed24 <tcp_slowtmr+0x54c>
 800ed0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed14:	6912      	ldr	r2, [r2, #16]
 800ed16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed18:	4610      	mov	r0, r2
 800ed1a:	4798      	blx	r3
 800ed1c:	4603      	mov	r3, r0
 800ed1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ed22:	e002      	b.n	800ed2a <tcp_slowtmr+0x552>
 800ed24:	2300      	movs	r3, #0
 800ed26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ed2a:	4b14      	ldr	r3, [pc, #80]	; (800ed7c <tcp_slowtmr+0x5a4>)
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d000      	beq.n	800ed34 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ed32:	e562      	b.n	800e7fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ed34:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d102      	bne.n	800ed42 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ed3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed3e:	f004 f8a3 	bl	8012e88 <tcp_output>
  while (pcb != NULL) {
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	f47f ad5e 	bne.w	800e806 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ed4e:	4b0c      	ldr	r3, [pc, #48]	; (800ed80 <tcp_slowtmr+0x5a8>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ed54:	e069      	b.n	800ee2a <tcp_slowtmr+0x652>
 800ed56:	bf00      	nop
 800ed58:	200280b0 	.word	0x200280b0
 800ed5c:	000a4cb8 	.word	0x000a4cb8
 800ed60:	10624dd3 	.word	0x10624dd3
 800ed64:	000124f8 	.word	0x000124f8
 800ed68:	200280ac 	.word	0x200280ac
 800ed6c:	0801fff4 	.word	0x0801fff4
 800ed70:	0802042c 	.word	0x0802042c
 800ed74:	08020038 	.word	0x08020038
 800ed78:	08020458 	.word	0x08020458
 800ed7c:	200280a8 	.word	0x200280a8
 800ed80:	200280bc 	.word	0x200280bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	7d1b      	ldrb	r3, [r3, #20]
 800ed88:	2b0a      	cmp	r3, #10
 800ed8a:	d006      	beq.n	800ed9a <tcp_slowtmr+0x5c2>
 800ed8c:	4b2b      	ldr	r3, [pc, #172]	; (800ee3c <tcp_slowtmr+0x664>)
 800ed8e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ed92:	492b      	ldr	r1, [pc, #172]	; (800ee40 <tcp_slowtmr+0x668>)
 800ed94:	482b      	ldr	r0, [pc, #172]	; (800ee44 <tcp_slowtmr+0x66c>)
 800ed96:	f00b facb 	bl	801a330 <iprintf>
    pcb_remove = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eda0:	4b29      	ldr	r3, [pc, #164]	; (800ee48 <tcp_slowtmr+0x670>)
 800eda2:	681a      	ldr	r2, [r3, #0]
 800eda4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda6:	6a1b      	ldr	r3, [r3, #32]
 800eda8:	1ad3      	subs	r3, r2, r3
 800edaa:	2bf0      	cmp	r3, #240	; 0xf0
 800edac:	d904      	bls.n	800edb8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800edae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edb2:	3301      	adds	r3, #1
 800edb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800edb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d02f      	beq.n	800ee20 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800edc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edc2:	f000 fbf9 	bl	800f5b8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d010      	beq.n	800edee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800edcc:	4b1f      	ldr	r3, [pc, #124]	; (800ee4c <tcp_slowtmr+0x674>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d106      	bne.n	800ede4 <tcp_slowtmr+0x60c>
 800edd6:	4b19      	ldr	r3, [pc, #100]	; (800ee3c <tcp_slowtmr+0x664>)
 800edd8:	f240 52af 	movw	r2, #1455	; 0x5af
 800eddc:	491c      	ldr	r1, [pc, #112]	; (800ee50 <tcp_slowtmr+0x678>)
 800edde:	4819      	ldr	r0, [pc, #100]	; (800ee44 <tcp_slowtmr+0x66c>)
 800ede0:	f00b faa6 	bl	801a330 <iprintf>
        prev->next = pcb->next;
 800ede4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede6:	68da      	ldr	r2, [r3, #12]
 800ede8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edea:	60da      	str	r2, [r3, #12]
 800edec:	e00f      	b.n	800ee0e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800edee:	4b17      	ldr	r3, [pc, #92]	; (800ee4c <tcp_slowtmr+0x674>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d006      	beq.n	800ee06 <tcp_slowtmr+0x62e>
 800edf8:	4b10      	ldr	r3, [pc, #64]	; (800ee3c <tcp_slowtmr+0x664>)
 800edfa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800edfe:	4915      	ldr	r1, [pc, #84]	; (800ee54 <tcp_slowtmr+0x67c>)
 800ee00:	4810      	ldr	r0, [pc, #64]	; (800ee44 <tcp_slowtmr+0x66c>)
 800ee02:	f00b fa95 	bl	801a330 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ee06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee08:	68db      	ldr	r3, [r3, #12]
 800ee0a:	4a10      	ldr	r2, [pc, #64]	; (800ee4c <tcp_slowtmr+0x674>)
 800ee0c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ee0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee10:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	68db      	ldr	r3, [r3, #12]
 800ee16:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ee18:	69f8      	ldr	r0, [r7, #28]
 800ee1a:	f7fe feed 	bl	800dbf8 <tcp_free>
 800ee1e:	e004      	b.n	800ee2a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ee20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ee2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d1a9      	bne.n	800ed84 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ee30:	bf00      	nop
 800ee32:	bf00      	nop
 800ee34:	3730      	adds	r7, #48	; 0x30
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bdb0      	pop	{r4, r5, r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	0801fff4 	.word	0x0801fff4
 800ee40:	08020484 	.word	0x08020484
 800ee44:	08020038 	.word	0x08020038
 800ee48:	200280b0 	.word	0x200280b0
 800ee4c:	200280bc 	.word	0x200280bc
 800ee50:	080204b4 	.word	0x080204b4
 800ee54:	080204dc 	.word	0x080204dc

0800ee58 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ee5e:	4b2d      	ldr	r3, [pc, #180]	; (800ef14 <tcp_fasttmr+0xbc>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	3301      	adds	r3, #1
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	4b2b      	ldr	r3, [pc, #172]	; (800ef14 <tcp_fasttmr+0xbc>)
 800ee68:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ee6a:	4b2b      	ldr	r3, [pc, #172]	; (800ef18 <tcp_fasttmr+0xc0>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ee70:	e048      	b.n	800ef04 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	7f9a      	ldrb	r2, [r3, #30]
 800ee76:	4b27      	ldr	r3, [pc, #156]	; (800ef14 <tcp_fasttmr+0xbc>)
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d03f      	beq.n	800eefe <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ee7e:	4b25      	ldr	r3, [pc, #148]	; (800ef14 <tcp_fasttmr+0xbc>)
 800ee80:	781a      	ldrb	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	8b5b      	ldrh	r3, [r3, #26]
 800ee8a:	f003 0301 	and.w	r3, r3, #1
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d010      	beq.n	800eeb4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	8b5b      	ldrh	r3, [r3, #26]
 800ee96:	f043 0302 	orr.w	r3, r3, #2
 800ee9a:	b29a      	uxth	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f003 fff1 	bl	8012e88 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	8b5b      	ldrh	r3, [r3, #26]
 800eeaa:	f023 0303 	bic.w	r3, r3, #3
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	8b5b      	ldrh	r3, [r3, #26]
 800eeb8:	f003 0308 	and.w	r3, r3, #8
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d009      	beq.n	800eed4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	8b5b      	ldrh	r3, [r3, #26]
 800eec4:	f023 0308 	bic.w	r3, r3, #8
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7ff f826 	bl	800df20 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	68db      	ldr	r3, [r3, #12]
 800eed8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00a      	beq.n	800eef8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eee2:	4b0e      	ldr	r3, [pc, #56]	; (800ef1c <tcp_fasttmr+0xc4>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f819 	bl	800ef20 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eeee:	4b0b      	ldr	r3, [pc, #44]	; (800ef1c <tcp_fasttmr+0xc4>)
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d000      	beq.n	800eef8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eef6:	e7b8      	b.n	800ee6a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	607b      	str	r3, [r7, #4]
 800eefc:	e002      	b.n	800ef04 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1b3      	bne.n	800ee72 <tcp_fasttmr+0x1a>
    }
  }
}
 800ef0a:	bf00      	nop
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	2002149e 	.word	0x2002149e
 800ef18:	200280ac 	.word	0x200280ac
 800ef1c:	200280a8 	.word	0x200280a8

0800ef20 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ef20:	b590      	push	{r4, r7, lr}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d109      	bne.n	800ef42 <tcp_process_refused_data+0x22>
 800ef2e:	4b37      	ldr	r3, [pc, #220]	; (800f00c <tcp_process_refused_data+0xec>)
 800ef30:	f240 6209 	movw	r2, #1545	; 0x609
 800ef34:	4936      	ldr	r1, [pc, #216]	; (800f010 <tcp_process_refused_data+0xf0>)
 800ef36:	4837      	ldr	r0, [pc, #220]	; (800f014 <tcp_process_refused_data+0xf4>)
 800ef38:	f00b f9fa 	bl	801a330 <iprintf>
 800ef3c:	f06f 030f 	mvn.w	r3, #15
 800ef40:	e060      	b.n	800f004 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef46:	7b5b      	ldrb	r3, [r3, #13]
 800ef48:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ef4e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d00b      	beq.n	800ef78 <tcp_process_refused_data+0x58>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6918      	ldr	r0, [r3, #16]
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	68ba      	ldr	r2, [r7, #8]
 800ef6e:	6879      	ldr	r1, [r7, #4]
 800ef70:	47a0      	blx	r4
 800ef72:	4603      	mov	r3, r0
 800ef74:	73fb      	strb	r3, [r7, #15]
 800ef76:	e007      	b.n	800ef88 <tcp_process_refused_data+0x68>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	68ba      	ldr	r2, [r7, #8]
 800ef7c:	6879      	ldr	r1, [r7, #4]
 800ef7e:	2000      	movs	r0, #0
 800ef80:	f000 f8a4 	bl	800f0cc <tcp_recv_null>
 800ef84:	4603      	mov	r3, r0
 800ef86:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ef88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d12a      	bne.n	800efe6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ef90:	7bbb      	ldrb	r3, [r7, #14]
 800ef92:	f003 0320 	and.w	r3, r3, #32
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d033      	beq.n	800f002 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef9e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800efa2:	d005      	beq.n	800efb0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efa8:	3301      	adds	r3, #1
 800efaa:	b29a      	uxth	r2, r3
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00b      	beq.n	800efd2 <tcp_process_refused_data+0xb2>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6918      	ldr	r0, [r3, #16]
 800efc4:	2300      	movs	r3, #0
 800efc6:	2200      	movs	r2, #0
 800efc8:	6879      	ldr	r1, [r7, #4]
 800efca:	47a0      	blx	r4
 800efcc:	4603      	mov	r3, r0
 800efce:	73fb      	strb	r3, [r7, #15]
 800efd0:	e001      	b.n	800efd6 <tcp_process_refused_data+0xb6>
 800efd2:	2300      	movs	r3, #0
 800efd4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800efd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efda:	f113 0f0d 	cmn.w	r3, #13
 800efde:	d110      	bne.n	800f002 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800efe0:	f06f 030c 	mvn.w	r3, #12
 800efe4:	e00e      	b.n	800f004 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800efe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efea:	f113 0f0d 	cmn.w	r3, #13
 800efee:	d102      	bne.n	800eff6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800eff0:	f06f 030c 	mvn.w	r3, #12
 800eff4:	e006      	b.n	800f004 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68ba      	ldr	r2, [r7, #8]
 800effa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800effc:	f06f 0304 	mvn.w	r3, #4
 800f000:	e000      	b.n	800f004 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd90      	pop	{r4, r7, pc}
 800f00c:	0801fff4 	.word	0x0801fff4
 800f010:	08020504 	.word	0x08020504
 800f014:	08020038 	.word	0x08020038

0800f018 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f020:	e007      	b.n	800f032 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 f80a 	bl	800f042 <tcp_seg_free>
    seg = next;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1f4      	bne.n	800f022 <tcp_segs_free+0xa>
  }
}
 800f038:	bf00      	nop
 800f03a:	bf00      	nop
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b082      	sub	sp, #8
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00c      	beq.n	800f06a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d004      	beq.n	800f062 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7fe f993 	bl	800d388 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f062:	6879      	ldr	r1, [r7, #4]
 800f064:	2003      	movs	r0, #3
 800f066:	f7fd fadf 	bl	800c628 <memp_free>
  }
}
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
	...

0800f074 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d106      	bne.n	800f090 <tcp_seg_copy+0x1c>
 800f082:	4b0f      	ldr	r3, [pc, #60]	; (800f0c0 <tcp_seg_copy+0x4c>)
 800f084:	f240 6282 	movw	r2, #1666	; 0x682
 800f088:	490e      	ldr	r1, [pc, #56]	; (800f0c4 <tcp_seg_copy+0x50>)
 800f08a:	480f      	ldr	r0, [pc, #60]	; (800f0c8 <tcp_seg_copy+0x54>)
 800f08c:	f00b f950 	bl	801a330 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f090:	2003      	movs	r0, #3
 800f092:	f7fd fa77 	bl	800c584 <memp_malloc>
 800f096:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d101      	bne.n	800f0a2 <tcp_seg_copy+0x2e>
    return NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	e00a      	b.n	800f0b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f0a2:	2210      	movs	r2, #16
 800f0a4:	6879      	ldr	r1, [r7, #4]
 800f0a6:	68f8      	ldr	r0, [r7, #12]
 800f0a8:	f00a fa98 	bl	80195dc <memcpy>
  pbuf_ref(cseg->p);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe fa0f 	bl	800d4d4 <pbuf_ref>
  return cseg;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	0801fff4 	.word	0x0801fff4
 800f0c4:	08020548 	.word	0x08020548
 800f0c8:	08020038 	.word	0x08020038

0800f0cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b084      	sub	sp, #16
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
 800f0d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d109      	bne.n	800f0f4 <tcp_recv_null+0x28>
 800f0e0:	4b12      	ldr	r3, [pc, #72]	; (800f12c <tcp_recv_null+0x60>)
 800f0e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f0e6:	4912      	ldr	r1, [pc, #72]	; (800f130 <tcp_recv_null+0x64>)
 800f0e8:	4812      	ldr	r0, [pc, #72]	; (800f134 <tcp_recv_null+0x68>)
 800f0ea:	f00b f921 	bl	801a330 <iprintf>
 800f0ee:	f06f 030f 	mvn.w	r3, #15
 800f0f2:	e016      	b.n	800f122 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d009      	beq.n	800f10e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	891b      	ldrh	r3, [r3, #8]
 800f0fe:	4619      	mov	r1, r3
 800f100:	68b8      	ldr	r0, [r7, #8]
 800f102:	f7ff f9bb 	bl	800e47c <tcp_recved>
    pbuf_free(p);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7fe f93e 	bl	800d388 <pbuf_free>
 800f10c:	e008      	b.n	800f120 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f10e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d104      	bne.n	800f120 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f116:	68b8      	ldr	r0, [r7, #8]
 800f118:	f7fe ff6c 	bl	800dff4 <tcp_close>
 800f11c:	4603      	mov	r3, r0
 800f11e:	e000      	b.n	800f122 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f120:	2300      	movs	r3, #0
}
 800f122:	4618      	mov	r0, r3
 800f124:	3710      	adds	r7, #16
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	0801fff4 	.word	0x0801fff4
 800f130:	08020564 	.word	0x08020564
 800f134:	08020038 	.word	0x08020038

0800f138 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b086      	sub	sp, #24
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f146:	2b00      	cmp	r3, #0
 800f148:	db01      	blt.n	800f14e <tcp_kill_prio+0x16>
 800f14a:	79fb      	ldrb	r3, [r7, #7]
 800f14c:	e000      	b.n	800f150 <tcp_kill_prio+0x18>
 800f14e:	237f      	movs	r3, #127	; 0x7f
 800f150:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f152:	7afb      	ldrb	r3, [r7, #11]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d034      	beq.n	800f1c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f158:	7afb      	ldrb	r3, [r7, #11]
 800f15a:	3b01      	subs	r3, #1
 800f15c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f162:	2300      	movs	r3, #0
 800f164:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f166:	4b19      	ldr	r3, [pc, #100]	; (800f1cc <tcp_kill_prio+0x94>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	617b      	str	r3, [r7, #20]
 800f16c:	e01f      	b.n	800f1ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f16e:	697b      	ldr	r3, [r7, #20]
 800f170:	7d5b      	ldrb	r3, [r3, #21]
 800f172:	7afa      	ldrb	r2, [r7, #11]
 800f174:	429a      	cmp	r2, r3
 800f176:	d80c      	bhi.n	800f192 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f17c:	7afa      	ldrb	r2, [r7, #11]
 800f17e:	429a      	cmp	r2, r3
 800f180:	d112      	bne.n	800f1a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f182:	4b13      	ldr	r3, [pc, #76]	; (800f1d0 <tcp_kill_prio+0x98>)
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	6a1b      	ldr	r3, [r3, #32]
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d80a      	bhi.n	800f1a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f192:	4b0f      	ldr	r3, [pc, #60]	; (800f1d0 <tcp_kill_prio+0x98>)
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	6a1b      	ldr	r3, [r3, #32]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f19e:	697b      	ldr	r3, [r7, #20]
 800f1a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	7d5b      	ldrb	r3, [r3, #21]
 800f1a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	617b      	str	r3, [r7, #20]
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1dc      	bne.n	800f16e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d004      	beq.n	800f1c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f1ba:	6938      	ldr	r0, [r7, #16]
 800f1bc:	f7ff f860 	bl	800e280 <tcp_abort>
 800f1c0:	e000      	b.n	800f1c4 <tcp_kill_prio+0x8c>
    return;
 800f1c2:	bf00      	nop
  }
}
 800f1c4:	3718      	adds	r7, #24
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bd80      	pop	{r7, pc}
 800f1ca:	bf00      	nop
 800f1cc:	200280ac 	.word	0x200280ac
 800f1d0:	200280b0 	.word	0x200280b0

0800f1d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b086      	sub	sp, #24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	4603      	mov	r3, r0
 800f1dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	2b08      	cmp	r3, #8
 800f1e2:	d009      	beq.n	800f1f8 <tcp_kill_state+0x24>
 800f1e4:	79fb      	ldrb	r3, [r7, #7]
 800f1e6:	2b09      	cmp	r3, #9
 800f1e8:	d006      	beq.n	800f1f8 <tcp_kill_state+0x24>
 800f1ea:	4b1a      	ldr	r3, [pc, #104]	; (800f254 <tcp_kill_state+0x80>)
 800f1ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f1f0:	4919      	ldr	r1, [pc, #100]	; (800f258 <tcp_kill_state+0x84>)
 800f1f2:	481a      	ldr	r0, [pc, #104]	; (800f25c <tcp_kill_state+0x88>)
 800f1f4:	f00b f89c 	bl	801a330 <iprintf>

  inactivity = 0;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f200:	4b17      	ldr	r3, [pc, #92]	; (800f260 <tcp_kill_state+0x8c>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	617b      	str	r3, [r7, #20]
 800f206:	e017      	b.n	800f238 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	7d1b      	ldrb	r3, [r3, #20]
 800f20c:	79fa      	ldrb	r2, [r7, #7]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d10f      	bne.n	800f232 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f212:	4b14      	ldr	r3, [pc, #80]	; (800f264 <tcp_kill_state+0x90>)
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	6a1b      	ldr	r3, [r3, #32]
 800f21a:	1ad3      	subs	r3, r2, r3
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d807      	bhi.n	800f232 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f222:	4b10      	ldr	r3, [pc, #64]	; (800f264 <tcp_kill_state+0x90>)
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	68db      	ldr	r3, [r3, #12]
 800f236:	617b      	str	r3, [r7, #20]
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d1e4      	bne.n	800f208 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d003      	beq.n	800f24c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f244:	2100      	movs	r1, #0
 800f246:	6938      	ldr	r0, [r7, #16]
 800f248:	f7fe ff5c 	bl	800e104 <tcp_abandon>
  }
}
 800f24c:	bf00      	nop
 800f24e:	3718      	adds	r7, #24
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	0801fff4 	.word	0x0801fff4
 800f258:	08020580 	.word	0x08020580
 800f25c:	08020038 	.word	0x08020038
 800f260:	200280ac 	.word	0x200280ac
 800f264:	200280b0 	.word	0x200280b0

0800f268 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f26e:	2300      	movs	r3, #0
 800f270:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f272:	2300      	movs	r3, #0
 800f274:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f276:	4b12      	ldr	r3, [pc, #72]	; (800f2c0 <tcp_kill_timewait+0x58>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	60fb      	str	r3, [r7, #12]
 800f27c:	e012      	b.n	800f2a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f27e:	4b11      	ldr	r3, [pc, #68]	; (800f2c4 <tcp_kill_timewait+0x5c>)
 800f280:	681a      	ldr	r2, [r3, #0]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	6a1b      	ldr	r3, [r3, #32]
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d807      	bhi.n	800f29e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f28e:	4b0d      	ldr	r3, [pc, #52]	; (800f2c4 <tcp_kill_timewait+0x5c>)
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6a1b      	ldr	r3, [r3, #32]
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1e9      	bne.n	800f27e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f2b0:	68b8      	ldr	r0, [r7, #8]
 800f2b2:	f7fe ffe5 	bl	800e280 <tcp_abort>
  }
}
 800f2b6:	bf00      	nop
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	200280bc 	.word	0x200280bc
 800f2c4:	200280b0 	.word	0x200280b0

0800f2c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f2ce:	4b10      	ldr	r3, [pc, #64]	; (800f310 <tcp_handle_closepend+0x48>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f2d4:	e014      	b.n	800f300 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	68db      	ldr	r3, [r3, #12]
 800f2da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	8b5b      	ldrh	r3, [r3, #26]
 800f2e0:	f003 0308 	and.w	r3, r3, #8
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d009      	beq.n	800f2fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	8b5b      	ldrh	r3, [r3, #26]
 800f2ec:	f023 0308 	bic.w	r3, r3, #8
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f7fe fe12 	bl	800df20 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1e7      	bne.n	800f2d6 <tcp_handle_closepend+0xe>
  }
}
 800f306:	bf00      	nop
 800f308:	bf00      	nop
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	200280ac 	.word	0x200280ac

0800f314 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	4603      	mov	r3, r0
 800f31c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f31e:	2001      	movs	r0, #1
 800f320:	f7fd f930 	bl	800c584 <memp_malloc>
 800f324:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d126      	bne.n	800f37a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f32c:	f7ff ffcc 	bl	800f2c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f330:	f7ff ff9a 	bl	800f268 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f334:	2001      	movs	r0, #1
 800f336:	f7fd f925 	bl	800c584 <memp_malloc>
 800f33a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d11b      	bne.n	800f37a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f342:	2009      	movs	r0, #9
 800f344:	f7ff ff46 	bl	800f1d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f348:	2001      	movs	r0, #1
 800f34a:	f7fd f91b 	bl	800c584 <memp_malloc>
 800f34e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d111      	bne.n	800f37a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f356:	2008      	movs	r0, #8
 800f358:	f7ff ff3c 	bl	800f1d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f35c:	2001      	movs	r0, #1
 800f35e:	f7fd f911 	bl	800c584 <memp_malloc>
 800f362:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d107      	bne.n	800f37a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f36a:	79fb      	ldrb	r3, [r7, #7]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7ff fee3 	bl	800f138 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f372:	2001      	movs	r0, #1
 800f374:	f7fd f906 	bl	800c584 <memp_malloc>
 800f378:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d03f      	beq.n	800f400 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f380:	229c      	movs	r2, #156	; 0x9c
 800f382:	2100      	movs	r1, #0
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f00a f951 	bl	801962c <memset>
    pcb->prio = prio;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	79fa      	ldrb	r2, [r7, #7]
 800f38e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f396:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f3a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	22ff      	movs	r2, #255	; 0xff
 800f3ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f3b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	2206      	movs	r2, #6
 800f3bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2206      	movs	r2, #6
 800f3c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f3d6:	4b0d      	ldr	r3, [pc, #52]	; (800f40c <tcp_alloc+0xf8>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f3de:	4b0c      	ldr	r3, [pc, #48]	; (800f410 <tcp_alloc+0xfc>)
 800f3e0:	781a      	ldrb	r2, [r3, #0]
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f3ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	4a08      	ldr	r2, [pc, #32]	; (800f414 <tcp_alloc+0x100>)
 800f3f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	4a07      	ldr	r2, [pc, #28]	; (800f418 <tcp_alloc+0x104>)
 800f3fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f400:	68fb      	ldr	r3, [r7, #12]
}
 800f402:	4618      	mov	r0, r3
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	200280b0 	.word	0x200280b0
 800f410:	2002149e 	.word	0x2002149e
 800f414:	0800f0cd 	.word	0x0800f0cd
 800f418:	006ddd00 	.word	0x006ddd00

0800f41c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	4603      	mov	r3, r0
 800f424:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f426:	2040      	movs	r0, #64	; 0x40
 800f428:	f7ff ff74 	bl	800f314 <tcp_alloc>
 800f42c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f42e:	68fb      	ldr	r3, [r7, #12]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3710      	adds	r7, #16
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}

0800f438 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	611a      	str	r2, [r3, #16]
  }
}
 800f44e:	bf00      	nop
 800f450:	370c      	adds	r7, #12
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
	...

0800f45c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d00e      	beq.n	800f48a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	7d1b      	ldrb	r3, [r3, #20]
 800f470:	2b01      	cmp	r3, #1
 800f472:	d106      	bne.n	800f482 <tcp_recv+0x26>
 800f474:	4b07      	ldr	r3, [pc, #28]	; (800f494 <tcp_recv+0x38>)
 800f476:	f240 72df 	movw	r2, #2015	; 0x7df
 800f47a:	4907      	ldr	r1, [pc, #28]	; (800f498 <tcp_recv+0x3c>)
 800f47c:	4807      	ldr	r0, [pc, #28]	; (800f49c <tcp_recv+0x40>)
 800f47e:	f00a ff57 	bl	801a330 <iprintf>
    pcb->recv = recv;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	683a      	ldr	r2, [r7, #0]
 800f486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f48a:	bf00      	nop
 800f48c:	3708      	adds	r7, #8
 800f48e:	46bd      	mov	sp, r7
 800f490:	bd80      	pop	{r7, pc}
 800f492:	bf00      	nop
 800f494:	0801fff4 	.word	0x0801fff4
 800f498:	08020590 	.word	0x08020590
 800f49c:	08020038 	.word	0x08020038

0800f4a0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00e      	beq.n	800f4ce <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	7d1b      	ldrb	r3, [r3, #20]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d106      	bne.n	800f4c6 <tcp_sent+0x26>
 800f4b8:	4b07      	ldr	r3, [pc, #28]	; (800f4d8 <tcp_sent+0x38>)
 800f4ba:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f4be:	4907      	ldr	r1, [pc, #28]	; (800f4dc <tcp_sent+0x3c>)
 800f4c0:	4807      	ldr	r0, [pc, #28]	; (800f4e0 <tcp_sent+0x40>)
 800f4c2:	f00a ff35 	bl	801a330 <iprintf>
    pcb->sent = sent;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	683a      	ldr	r2, [r7, #0]
 800f4ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f4ce:	bf00      	nop
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bd80      	pop	{r7, pc}
 800f4d6:	bf00      	nop
 800f4d8:	0801fff4 	.word	0x0801fff4
 800f4dc:	080205b8 	.word	0x080205b8
 800f4e0:	08020038 	.word	0x08020038

0800f4e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d00e      	beq.n	800f512 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	7d1b      	ldrb	r3, [r3, #20]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d106      	bne.n	800f50a <tcp_err+0x26>
 800f4fc:	4b07      	ldr	r3, [pc, #28]	; (800f51c <tcp_err+0x38>)
 800f4fe:	f640 020d 	movw	r2, #2061	; 0x80d
 800f502:	4907      	ldr	r1, [pc, #28]	; (800f520 <tcp_err+0x3c>)
 800f504:	4807      	ldr	r0, [pc, #28]	; (800f524 <tcp_err+0x40>)
 800f506:	f00a ff13 	bl	801a330 <iprintf>
    pcb->errf = err;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	683a      	ldr	r2, [r7, #0]
 800f50e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f512:	bf00      	nop
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	0801fff4 	.word	0x0801fff4
 800f520:	080205e0 	.word	0x080205e0
 800f524:	08020038 	.word	0x08020038

0800f528 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d008      	beq.n	800f54a <tcp_accept+0x22>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7d1b      	ldrb	r3, [r3, #20]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d104      	bne.n	800f54a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	683a      	ldr	r2, [r7, #0]
 800f548:	619a      	str	r2, [r3, #24]
  }
}
 800f54a:	bf00      	nop
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
	...

0800f558 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	60f8      	str	r0, [r7, #12]
 800f560:	60b9      	str	r1, [r7, #8]
 800f562:	4613      	mov	r3, r2
 800f564:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d107      	bne.n	800f57c <tcp_poll+0x24>
 800f56c:	4b0e      	ldr	r3, [pc, #56]	; (800f5a8 <tcp_poll+0x50>)
 800f56e:	f640 023d 	movw	r2, #2109	; 0x83d
 800f572:	490e      	ldr	r1, [pc, #56]	; (800f5ac <tcp_poll+0x54>)
 800f574:	480e      	ldr	r0, [pc, #56]	; (800f5b0 <tcp_poll+0x58>)
 800f576:	f00a fedb 	bl	801a330 <iprintf>
 800f57a:	e011      	b.n	800f5a0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	7d1b      	ldrb	r3, [r3, #20]
 800f580:	2b01      	cmp	r3, #1
 800f582:	d106      	bne.n	800f592 <tcp_poll+0x3a>
 800f584:	4b08      	ldr	r3, [pc, #32]	; (800f5a8 <tcp_poll+0x50>)
 800f586:	f640 023e 	movw	r2, #2110	; 0x83e
 800f58a:	490a      	ldr	r1, [pc, #40]	; (800f5b4 <tcp_poll+0x5c>)
 800f58c:	4808      	ldr	r0, [pc, #32]	; (800f5b0 <tcp_poll+0x58>)
 800f58e:	f00a fecf 	bl	801a330 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	68ba      	ldr	r2, [r7, #8]
 800f596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	79fa      	ldrb	r2, [r7, #7]
 800f59e:	775a      	strb	r2, [r3, #29]
}
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	0801fff4 	.word	0x0801fff4
 800f5ac:	08020608 	.word	0x08020608
 800f5b0:	08020038 	.word	0x08020038
 800f5b4:	08020620 	.word	0x08020620

0800f5b8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d107      	bne.n	800f5d6 <tcp_pcb_purge+0x1e>
 800f5c6:	4b21      	ldr	r3, [pc, #132]	; (800f64c <tcp_pcb_purge+0x94>)
 800f5c8:	f640 0251 	movw	r2, #2129	; 0x851
 800f5cc:	4920      	ldr	r1, [pc, #128]	; (800f650 <tcp_pcb_purge+0x98>)
 800f5ce:	4821      	ldr	r0, [pc, #132]	; (800f654 <tcp_pcb_purge+0x9c>)
 800f5d0:	f00a feae 	bl	801a330 <iprintf>
 800f5d4:	e037      	b.n	800f646 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	7d1b      	ldrb	r3, [r3, #20]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d033      	beq.n	800f646 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f5e2:	2b0a      	cmp	r3, #10
 800f5e4:	d02f      	beq.n	800f646 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d02b      	beq.n	800f646 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d007      	beq.n	800f606 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fd fec4 	bl	800d388 <pbuf_free>
      pcb->refused_data = NULL;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d002      	beq.n	800f614 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 f986 	bl	800f920 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f61a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff fcf9 	bl	800f018 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7ff fcf4 	bl	800f018 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2200      	movs	r2, #0
 800f634:	66da      	str	r2, [r3, #108]	; 0x6c
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	0801fff4 	.word	0x0801fff4
 800f650:	08020640 	.word	0x08020640
 800f654:	08020038 	.word	0x08020038

0800f658 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d106      	bne.n	800f676 <tcp_pcb_remove+0x1e>
 800f668:	4b3e      	ldr	r3, [pc, #248]	; (800f764 <tcp_pcb_remove+0x10c>)
 800f66a:	f640 0283 	movw	r2, #2179	; 0x883
 800f66e:	493e      	ldr	r1, [pc, #248]	; (800f768 <tcp_pcb_remove+0x110>)
 800f670:	483e      	ldr	r0, [pc, #248]	; (800f76c <tcp_pcb_remove+0x114>)
 800f672:	f00a fe5d 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <tcp_pcb_remove+0x32>
 800f67c:	4b39      	ldr	r3, [pc, #228]	; (800f764 <tcp_pcb_remove+0x10c>)
 800f67e:	f640 0284 	movw	r2, #2180	; 0x884
 800f682:	493b      	ldr	r1, [pc, #236]	; (800f770 <tcp_pcb_remove+0x118>)
 800f684:	4839      	ldr	r0, [pc, #228]	; (800f76c <tcp_pcb_remove+0x114>)
 800f686:	f00a fe53 	bl	801a330 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	683a      	ldr	r2, [r7, #0]
 800f690:	429a      	cmp	r2, r3
 800f692:	d105      	bne.n	800f6a0 <tcp_pcb_remove+0x48>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	68da      	ldr	r2, [r3, #12]
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	e013      	b.n	800f6c8 <tcp_pcb_remove+0x70>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	60fb      	str	r3, [r7, #12]
 800f6a6:	e00c      	b.n	800f6c2 <tcp_pcb_remove+0x6a>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	683a      	ldr	r2, [r7, #0]
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d104      	bne.n	800f6bc <tcp_pcb_remove+0x64>
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	68da      	ldr	r2, [r3, #12]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	60da      	str	r2, [r3, #12]
 800f6ba:	e005      	b.n	800f6c8 <tcp_pcb_remove+0x70>
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	68db      	ldr	r3, [r3, #12]
 800f6c0:	60fb      	str	r3, [r7, #12]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d1ef      	bne.n	800f6a8 <tcp_pcb_remove+0x50>
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f6ce:	6838      	ldr	r0, [r7, #0]
 800f6d0:	f7ff ff72 	bl	800f5b8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	7d1b      	ldrb	r3, [r3, #20]
 800f6d8:	2b0a      	cmp	r3, #10
 800f6da:	d013      	beq.n	800f704 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	d00f      	beq.n	800f704 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	8b5b      	ldrh	r3, [r3, #26]
 800f6e8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d009      	beq.n	800f704 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	8b5b      	ldrh	r3, [r3, #26]
 800f6f4:	f043 0302 	orr.w	r3, r3, #2
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f6fe:	6838      	ldr	r0, [r7, #0]
 800f700:	f003 fbc2 	bl	8012e88 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	7d1b      	ldrb	r3, [r3, #20]
 800f708:	2b01      	cmp	r3, #1
 800f70a:	d020      	beq.n	800f74e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f710:	2b00      	cmp	r3, #0
 800f712:	d006      	beq.n	800f722 <tcp_pcb_remove+0xca>
 800f714:	4b13      	ldr	r3, [pc, #76]	; (800f764 <tcp_pcb_remove+0x10c>)
 800f716:	f640 0293 	movw	r2, #2195	; 0x893
 800f71a:	4916      	ldr	r1, [pc, #88]	; (800f774 <tcp_pcb_remove+0x11c>)
 800f71c:	4813      	ldr	r0, [pc, #76]	; (800f76c <tcp_pcb_remove+0x114>)
 800f71e:	f00a fe07 	bl	801a330 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f726:	2b00      	cmp	r3, #0
 800f728:	d006      	beq.n	800f738 <tcp_pcb_remove+0xe0>
 800f72a:	4b0e      	ldr	r3, [pc, #56]	; (800f764 <tcp_pcb_remove+0x10c>)
 800f72c:	f640 0294 	movw	r2, #2196	; 0x894
 800f730:	4911      	ldr	r1, [pc, #68]	; (800f778 <tcp_pcb_remove+0x120>)
 800f732:	480e      	ldr	r0, [pc, #56]	; (800f76c <tcp_pcb_remove+0x114>)
 800f734:	f00a fdfc 	bl	801a330 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d006      	beq.n	800f74e <tcp_pcb_remove+0xf6>
 800f740:	4b08      	ldr	r3, [pc, #32]	; (800f764 <tcp_pcb_remove+0x10c>)
 800f742:	f640 0296 	movw	r2, #2198	; 0x896
 800f746:	490d      	ldr	r1, [pc, #52]	; (800f77c <tcp_pcb_remove+0x124>)
 800f748:	4808      	ldr	r0, [pc, #32]	; (800f76c <tcp_pcb_remove+0x114>)
 800f74a:	f00a fdf1 	bl	801a330 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	2200      	movs	r2, #0
 800f752:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	2200      	movs	r2, #0
 800f758:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f75a:	bf00      	nop
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
 800f762:	bf00      	nop
 800f764:	0801fff4 	.word	0x0801fff4
 800f768:	0802065c 	.word	0x0802065c
 800f76c:	08020038 	.word	0x08020038
 800f770:	08020678 	.word	0x08020678
 800f774:	08020698 	.word	0x08020698
 800f778:	080206b0 	.word	0x080206b0
 800f77c:	080206cc 	.word	0x080206cc

0800f780 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d106      	bne.n	800f79c <tcp_next_iss+0x1c>
 800f78e:	4b0a      	ldr	r3, [pc, #40]	; (800f7b8 <tcp_next_iss+0x38>)
 800f790:	f640 02af 	movw	r2, #2223	; 0x8af
 800f794:	4909      	ldr	r1, [pc, #36]	; (800f7bc <tcp_next_iss+0x3c>)
 800f796:	480a      	ldr	r0, [pc, #40]	; (800f7c0 <tcp_next_iss+0x40>)
 800f798:	f00a fdca 	bl	801a330 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f79c:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <tcp_next_iss+0x44>)
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	4b09      	ldr	r3, [pc, #36]	; (800f7c8 <tcp_next_iss+0x48>)
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	4a07      	ldr	r2, [pc, #28]	; (800f7c4 <tcp_next_iss+0x44>)
 800f7a8:	6013      	str	r3, [r2, #0]
  return iss;
 800f7aa:	4b06      	ldr	r3, [pc, #24]	; (800f7c4 <tcp_next_iss+0x44>)
 800f7ac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3708      	adds	r7, #8
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}
 800f7b6:	bf00      	nop
 800f7b8:	0801fff4 	.word	0x0801fff4
 800f7bc:	080206e4 	.word	0x080206e4
 800f7c0:	08020038 	.word	0x08020038
 800f7c4:	20000014 	.word	0x20000014
 800f7c8:	200280b0 	.word	0x200280b0

0800f7cc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b086      	sub	sp, #24
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	4603      	mov	r3, r0
 800f7d4:	60b9      	str	r1, [r7, #8]
 800f7d6:	607a      	str	r2, [r7, #4]
 800f7d8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d106      	bne.n	800f7ee <tcp_eff_send_mss_netif+0x22>
 800f7e0:	4b14      	ldr	r3, [pc, #80]	; (800f834 <tcp_eff_send_mss_netif+0x68>)
 800f7e2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f7e6:	4914      	ldr	r1, [pc, #80]	; (800f838 <tcp_eff_send_mss_netif+0x6c>)
 800f7e8:	4814      	ldr	r0, [pc, #80]	; (800f83c <tcp_eff_send_mss_netif+0x70>)
 800f7ea:	f00a fda1 	bl	801a330 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d101      	bne.n	800f7f8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f7f4:	89fb      	ldrh	r3, [r7, #14]
 800f7f6:	e019      	b.n	800f82c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f7fc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f7fe:	8afb      	ldrh	r3, [r7, #22]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d012      	beq.n	800f82a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f804:	2328      	movs	r3, #40	; 0x28
 800f806:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f808:	8afa      	ldrh	r2, [r7, #22]
 800f80a:	8abb      	ldrh	r3, [r7, #20]
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d904      	bls.n	800f81a <tcp_eff_send_mss_netif+0x4e>
 800f810:	8afa      	ldrh	r2, [r7, #22]
 800f812:	8abb      	ldrh	r3, [r7, #20]
 800f814:	1ad3      	subs	r3, r2, r3
 800f816:	b29b      	uxth	r3, r3
 800f818:	e000      	b.n	800f81c <tcp_eff_send_mss_netif+0x50>
 800f81a:	2300      	movs	r3, #0
 800f81c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f81e:	8a7a      	ldrh	r2, [r7, #18]
 800f820:	89fb      	ldrh	r3, [r7, #14]
 800f822:	4293      	cmp	r3, r2
 800f824:	bf28      	it	cs
 800f826:	4613      	movcs	r3, r2
 800f828:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f82a:	89fb      	ldrh	r3, [r7, #14]
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3718      	adds	r7, #24
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	0801fff4 	.word	0x0801fff4
 800f838:	08020700 	.word	0x08020700
 800f83c:	08020038 	.word	0x08020038

0800f840 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b084      	sub	sp, #16
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
 800f848:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d119      	bne.n	800f888 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f854:	4b10      	ldr	r3, [pc, #64]	; (800f898 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f856:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f85a:	4910      	ldr	r1, [pc, #64]	; (800f89c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f85c:	4810      	ldr	r0, [pc, #64]	; (800f8a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f85e:	f00a fd67 	bl	801a330 <iprintf>

  while (pcb != NULL) {
 800f862:	e011      	b.n	800f888 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	681a      	ldr	r2, [r3, #0]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d108      	bne.n	800f882 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	68db      	ldr	r3, [r3, #12]
 800f874:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7fe fd02 	bl	800e280 <tcp_abort>
      pcb = next;
 800f87c:	68bb      	ldr	r3, [r7, #8]
 800f87e:	60fb      	str	r3, [r7, #12]
 800f880:	e002      	b.n	800f888 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	68db      	ldr	r3, [r3, #12]
 800f886:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d1ea      	bne.n	800f864 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f88e:	bf00      	nop
 800f890:	bf00      	nop
 800f892:	3710      	adds	r7, #16
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	0801fff4 	.word	0x0801fff4
 800f89c:	08020728 	.word	0x08020728
 800f8a0:	08020038 	.word	0x08020038

0800f8a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d02a      	beq.n	800f90a <tcp_netif_ip_addr_changed+0x66>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d026      	beq.n	800f90a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f8bc:	4b15      	ldr	r3, [pc, #84]	; (800f914 <tcp_netif_ip_addr_changed+0x70>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff ffbc 	bl	800f840 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f8c8:	4b13      	ldr	r3, [pc, #76]	; (800f918 <tcp_netif_ip_addr_changed+0x74>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f7ff ffb6 	bl	800f840 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d017      	beq.n	800f90a <tcp_netif_ip_addr_changed+0x66>
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d013      	beq.n	800f90a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f8e2:	4b0e      	ldr	r3, [pc, #56]	; (800f91c <tcp_netif_ip_addr_changed+0x78>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	60fb      	str	r3, [r7, #12]
 800f8e8:	e00c      	b.n	800f904 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d103      	bne.n	800f8fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	60fb      	str	r3, [r7, #12]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d1ef      	bne.n	800f8ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f90a:	bf00      	nop
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	200280ac 	.word	0x200280ac
 800f918:	200280b8 	.word	0x200280b8
 800f91c:	200280b4 	.word	0x200280b4

0800f920 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d007      	beq.n	800f940 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f934:	4618      	mov	r0, r3
 800f936:	f7ff fb6f 	bl	800f018 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2200      	movs	r2, #0
 800f93e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f940:	bf00      	nop
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f948:	b590      	push	{r4, r7, lr}
 800f94a:	b08d      	sub	sp, #52	; 0x34
 800f94c:	af04      	add	r7, sp, #16
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d105      	bne.n	800f964 <tcp_input+0x1c>
 800f958:	4b9b      	ldr	r3, [pc, #620]	; (800fbc8 <tcp_input+0x280>)
 800f95a:	2283      	movs	r2, #131	; 0x83
 800f95c:	499b      	ldr	r1, [pc, #620]	; (800fbcc <tcp_input+0x284>)
 800f95e:	489c      	ldr	r0, [pc, #624]	; (800fbd0 <tcp_input+0x288>)
 800f960:	f00a fce6 	bl	801a330 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	4a9a      	ldr	r2, [pc, #616]	; (800fbd4 <tcp_input+0x28c>)
 800f96a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	895b      	ldrh	r3, [r3, #10]
 800f970:	2b13      	cmp	r3, #19
 800f972:	f240 83c4 	bls.w	80100fe <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f976:	4b98      	ldr	r3, [pc, #608]	; (800fbd8 <tcp_input+0x290>)
 800f978:	695b      	ldr	r3, [r3, #20]
 800f97a:	4a97      	ldr	r2, [pc, #604]	; (800fbd8 <tcp_input+0x290>)
 800f97c:	6812      	ldr	r2, [r2, #0]
 800f97e:	4611      	mov	r1, r2
 800f980:	4618      	mov	r0, r3
 800f982:	f008 fb0b 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 800f986:	4603      	mov	r3, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f040 83ba 	bne.w	8010102 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f98e:	4b92      	ldr	r3, [pc, #584]	; (800fbd8 <tcp_input+0x290>)
 800f990:	695b      	ldr	r3, [r3, #20]
 800f992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f996:	2be0      	cmp	r3, #224	; 0xe0
 800f998:	f000 83b3 	beq.w	8010102 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f99c:	4b8d      	ldr	r3, [pc, #564]	; (800fbd4 <tcp_input+0x28c>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	899b      	ldrh	r3, [r3, #12]
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fb f961 	bl	800ac6c <lwip_htons>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	0b1b      	lsrs	r3, r3, #12
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f9b6:	7cbb      	ldrb	r3, [r7, #18]
 800f9b8:	2b13      	cmp	r3, #19
 800f9ba:	f240 83a4 	bls.w	8010106 <tcp_input+0x7be>
 800f9be:	7cbb      	ldrb	r3, [r7, #18]
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	891b      	ldrh	r3, [r3, #8]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	f200 839d 	bhi.w	8010106 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f9cc:	7cbb      	ldrb	r3, [r7, #18]
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	3b14      	subs	r3, #20
 800f9d2:	b29a      	uxth	r2, r3
 800f9d4:	4b81      	ldr	r3, [pc, #516]	; (800fbdc <tcp_input+0x294>)
 800f9d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f9d8:	4b81      	ldr	r3, [pc, #516]	; (800fbe0 <tcp_input+0x298>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	895a      	ldrh	r2, [r3, #10]
 800f9e2:	7cbb      	ldrb	r3, [r7, #18]
 800f9e4:	b29b      	uxth	r3, r3
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d309      	bcc.n	800f9fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f9ea:	4b7c      	ldr	r3, [pc, #496]	; (800fbdc <tcp_input+0x294>)
 800f9ec:	881a      	ldrh	r2, [r3, #0]
 800f9ee:	4b7d      	ldr	r3, [pc, #500]	; (800fbe4 <tcp_input+0x29c>)
 800f9f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f9f2:	7cbb      	ldrb	r3, [r7, #18]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7fd fc40 	bl	800d27c <pbuf_remove_header>
 800f9fc:	e04e      	b.n	800fa9c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d105      	bne.n	800fa12 <tcp_input+0xca>
 800fa06:	4b70      	ldr	r3, [pc, #448]	; (800fbc8 <tcp_input+0x280>)
 800fa08:	22c2      	movs	r2, #194	; 0xc2
 800fa0a:	4977      	ldr	r1, [pc, #476]	; (800fbe8 <tcp_input+0x2a0>)
 800fa0c:	4870      	ldr	r0, [pc, #448]	; (800fbd0 <tcp_input+0x288>)
 800fa0e:	f00a fc8f 	bl	801a330 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fa12:	2114      	movs	r1, #20
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f7fd fc31 	bl	800d27c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	895a      	ldrh	r2, [r3, #10]
 800fa1e:	4b71      	ldr	r3, [pc, #452]	; (800fbe4 <tcp_input+0x29c>)
 800fa20:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fa22:	4b6e      	ldr	r3, [pc, #440]	; (800fbdc <tcp_input+0x294>)
 800fa24:	881a      	ldrh	r2, [r3, #0]
 800fa26:	4b6f      	ldr	r3, [pc, #444]	; (800fbe4 <tcp_input+0x29c>)
 800fa28:	881b      	ldrh	r3, [r3, #0]
 800fa2a:	1ad3      	subs	r3, r2, r3
 800fa2c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fa2e:	4b6d      	ldr	r3, [pc, #436]	; (800fbe4 <tcp_input+0x29c>)
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	4619      	mov	r1, r3
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f7fd fc21 	bl	800d27c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	895b      	ldrh	r3, [r3, #10]
 800fa40:	8a3a      	ldrh	r2, [r7, #16]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	f200 8361 	bhi.w	801010a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	4a64      	ldr	r2, [pc, #400]	; (800fbe0 <tcp_input+0x298>)
 800fa50:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	8a3a      	ldrh	r2, [r7, #16]
 800fa58:	4611      	mov	r1, r2
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fd fc0e 	bl	800d27c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	891a      	ldrh	r2, [r3, #8]
 800fa64:	8a3b      	ldrh	r3, [r7, #16]
 800fa66:	1ad3      	subs	r3, r2, r3
 800fa68:	b29a      	uxth	r2, r3
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	895b      	ldrh	r3, [r3, #10]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d005      	beq.n	800fa82 <tcp_input+0x13a>
 800fa76:	4b54      	ldr	r3, [pc, #336]	; (800fbc8 <tcp_input+0x280>)
 800fa78:	22df      	movs	r2, #223	; 0xdf
 800fa7a:	495c      	ldr	r1, [pc, #368]	; (800fbec <tcp_input+0x2a4>)
 800fa7c:	4854      	ldr	r0, [pc, #336]	; (800fbd0 <tcp_input+0x288>)
 800fa7e:	f00a fc57 	bl	801a330 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	891a      	ldrh	r2, [r3, #8]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	891b      	ldrh	r3, [r3, #8]
 800fa8c:	429a      	cmp	r2, r3
 800fa8e:	d005      	beq.n	800fa9c <tcp_input+0x154>
 800fa90:	4b4d      	ldr	r3, [pc, #308]	; (800fbc8 <tcp_input+0x280>)
 800fa92:	22e0      	movs	r2, #224	; 0xe0
 800fa94:	4956      	ldr	r1, [pc, #344]	; (800fbf0 <tcp_input+0x2a8>)
 800fa96:	484e      	ldr	r0, [pc, #312]	; (800fbd0 <tcp_input+0x288>)
 800fa98:	f00a fc4a 	bl	801a330 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fa9c:	4b4d      	ldr	r3, [pc, #308]	; (800fbd4 <tcp_input+0x28c>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	4a4b      	ldr	r2, [pc, #300]	; (800fbd4 <tcp_input+0x28c>)
 800faa6:	6814      	ldr	r4, [r2, #0]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fb f8df 	bl	800ac6c <lwip_htons>
 800faae:	4603      	mov	r3, r0
 800fab0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fab2:	4b48      	ldr	r3, [pc, #288]	; (800fbd4 <tcp_input+0x28c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	885b      	ldrh	r3, [r3, #2]
 800fab8:	b29b      	uxth	r3, r3
 800faba:	4a46      	ldr	r2, [pc, #280]	; (800fbd4 <tcp_input+0x28c>)
 800fabc:	6814      	ldr	r4, [r2, #0]
 800fabe:	4618      	mov	r0, r3
 800fac0:	f7fb f8d4 	bl	800ac6c <lwip_htons>
 800fac4:	4603      	mov	r3, r0
 800fac6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fac8:	4b42      	ldr	r3, [pc, #264]	; (800fbd4 <tcp_input+0x28c>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	4a41      	ldr	r2, [pc, #260]	; (800fbd4 <tcp_input+0x28c>)
 800fad0:	6814      	ldr	r4, [r2, #0]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7fb f8df 	bl	800ac96 <lwip_htonl>
 800fad8:	4603      	mov	r3, r0
 800fada:	6063      	str	r3, [r4, #4]
 800fadc:	6863      	ldr	r3, [r4, #4]
 800fade:	4a45      	ldr	r2, [pc, #276]	; (800fbf4 <tcp_input+0x2ac>)
 800fae0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fae2:	4b3c      	ldr	r3, [pc, #240]	; (800fbd4 <tcp_input+0x28c>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	4a3a      	ldr	r2, [pc, #232]	; (800fbd4 <tcp_input+0x28c>)
 800faea:	6814      	ldr	r4, [r2, #0]
 800faec:	4618      	mov	r0, r3
 800faee:	f7fb f8d2 	bl	800ac96 <lwip_htonl>
 800faf2:	4603      	mov	r3, r0
 800faf4:	60a3      	str	r3, [r4, #8]
 800faf6:	68a3      	ldr	r3, [r4, #8]
 800faf8:	4a3f      	ldr	r2, [pc, #252]	; (800fbf8 <tcp_input+0x2b0>)
 800fafa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fafc:	4b35      	ldr	r3, [pc, #212]	; (800fbd4 <tcp_input+0x28c>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	89db      	ldrh	r3, [r3, #14]
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	4a33      	ldr	r2, [pc, #204]	; (800fbd4 <tcp_input+0x28c>)
 800fb06:	6814      	ldr	r4, [r2, #0]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7fb f8af 	bl	800ac6c <lwip_htons>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fb12:	4b30      	ldr	r3, [pc, #192]	; (800fbd4 <tcp_input+0x28c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	899b      	ldrh	r3, [r3, #12]
 800fb18:	b29b      	uxth	r3, r3
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fb f8a6 	bl	800ac6c <lwip_htons>
 800fb20:	4603      	mov	r3, r0
 800fb22:	b2db      	uxtb	r3, r3
 800fb24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb28:	b2da      	uxtb	r2, r3
 800fb2a:	4b34      	ldr	r3, [pc, #208]	; (800fbfc <tcp_input+0x2b4>)
 800fb2c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	891a      	ldrh	r2, [r3, #8]
 800fb32:	4b33      	ldr	r3, [pc, #204]	; (800fc00 <tcp_input+0x2b8>)
 800fb34:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fb36:	4b31      	ldr	r3, [pc, #196]	; (800fbfc <tcp_input+0x2b4>)
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	f003 0303 	and.w	r3, r3, #3
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d00c      	beq.n	800fb5c <tcp_input+0x214>
    tcplen++;
 800fb42:	4b2f      	ldr	r3, [pc, #188]	; (800fc00 <tcp_input+0x2b8>)
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	3301      	adds	r3, #1
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	4b2d      	ldr	r3, [pc, #180]	; (800fc00 <tcp_input+0x2b8>)
 800fb4c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	891a      	ldrh	r2, [r3, #8]
 800fb52:	4b2b      	ldr	r3, [pc, #172]	; (800fc00 <tcp_input+0x2b8>)
 800fb54:	881b      	ldrh	r3, [r3, #0]
 800fb56:	429a      	cmp	r2, r3
 800fb58:	f200 82d9 	bhi.w	801010e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fb60:	4b28      	ldr	r3, [pc, #160]	; (800fc04 <tcp_input+0x2bc>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	61fb      	str	r3, [r7, #28]
 800fb66:	e09d      	b.n	800fca4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	7d1b      	ldrb	r3, [r3, #20]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d105      	bne.n	800fb7c <tcp_input+0x234>
 800fb70:	4b15      	ldr	r3, [pc, #84]	; (800fbc8 <tcp_input+0x280>)
 800fb72:	22fb      	movs	r2, #251	; 0xfb
 800fb74:	4924      	ldr	r1, [pc, #144]	; (800fc08 <tcp_input+0x2c0>)
 800fb76:	4816      	ldr	r0, [pc, #88]	; (800fbd0 <tcp_input+0x288>)
 800fb78:	f00a fbda 	bl	801a330 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	7d1b      	ldrb	r3, [r3, #20]
 800fb80:	2b0a      	cmp	r3, #10
 800fb82:	d105      	bne.n	800fb90 <tcp_input+0x248>
 800fb84:	4b10      	ldr	r3, [pc, #64]	; (800fbc8 <tcp_input+0x280>)
 800fb86:	22fc      	movs	r2, #252	; 0xfc
 800fb88:	4920      	ldr	r1, [pc, #128]	; (800fc0c <tcp_input+0x2c4>)
 800fb8a:	4811      	ldr	r0, [pc, #68]	; (800fbd0 <tcp_input+0x288>)
 800fb8c:	f00a fbd0 	bl	801a330 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fb90:	69fb      	ldr	r3, [r7, #28]
 800fb92:	7d1b      	ldrb	r3, [r3, #20]
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d105      	bne.n	800fba4 <tcp_input+0x25c>
 800fb98:	4b0b      	ldr	r3, [pc, #44]	; (800fbc8 <tcp_input+0x280>)
 800fb9a:	22fd      	movs	r2, #253	; 0xfd
 800fb9c:	491c      	ldr	r1, [pc, #112]	; (800fc10 <tcp_input+0x2c8>)
 800fb9e:	480c      	ldr	r0, [pc, #48]	; (800fbd0 <tcp_input+0x288>)
 800fba0:	f00a fbc6 	bl	801a330 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	7a1b      	ldrb	r3, [r3, #8]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d033      	beq.n	800fc14 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	7a1a      	ldrb	r2, [r3, #8]
 800fbb0:	4b09      	ldr	r3, [pc, #36]	; (800fbd8 <tcp_input+0x290>)
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fbb8:	3301      	adds	r3, #1
 800fbba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d029      	beq.n	800fc14 <tcp_input+0x2cc>
      prev = pcb;
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	61bb      	str	r3, [r7, #24]
      continue;
 800fbc4:	e06b      	b.n	800fc9e <tcp_input+0x356>
 800fbc6:	bf00      	nop
 800fbc8:	0802075c 	.word	0x0802075c
 800fbcc:	08020790 	.word	0x08020790
 800fbd0:	080207a8 	.word	0x080207a8
 800fbd4:	200214b0 	.word	0x200214b0
 800fbd8:	20024820 	.word	0x20024820
 800fbdc:	200214b4 	.word	0x200214b4
 800fbe0:	200214b8 	.word	0x200214b8
 800fbe4:	200214b6 	.word	0x200214b6
 800fbe8:	080207d0 	.word	0x080207d0
 800fbec:	080207e0 	.word	0x080207e0
 800fbf0:	080207ec 	.word	0x080207ec
 800fbf4:	200214c0 	.word	0x200214c0
 800fbf8:	200214c4 	.word	0x200214c4
 800fbfc:	200214cc 	.word	0x200214cc
 800fc00:	200214ca 	.word	0x200214ca
 800fc04:	200280ac 	.word	0x200280ac
 800fc08:	0802080c 	.word	0x0802080c
 800fc0c:	08020834 	.word	0x08020834
 800fc10:	08020860 	.word	0x08020860
    }

    if (pcb->remote_port == tcphdr->src &&
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	8b1a      	ldrh	r2, [r3, #24]
 800fc18:	4b94      	ldr	r3, [pc, #592]	; (800fe6c <tcp_input+0x524>)
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	881b      	ldrh	r3, [r3, #0]
 800fc1e:	b29b      	uxth	r3, r3
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d13a      	bne.n	800fc9a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	8ada      	ldrh	r2, [r3, #22]
 800fc28:	4b90      	ldr	r3, [pc, #576]	; (800fe6c <tcp_input+0x524>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	885b      	ldrh	r3, [r3, #2]
 800fc2e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d132      	bne.n	800fc9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	685a      	ldr	r2, [r3, #4]
 800fc38:	4b8d      	ldr	r3, [pc, #564]	; (800fe70 <tcp_input+0x528>)
 800fc3a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d12c      	bne.n	800fc9a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	681a      	ldr	r2, [r3, #0]
 800fc44:	4b8a      	ldr	r3, [pc, #552]	; (800fe70 <tcp_input+0x528>)
 800fc46:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d126      	bne.n	800fc9a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	69fa      	ldr	r2, [r7, #28]
 800fc52:	429a      	cmp	r2, r3
 800fc54:	d106      	bne.n	800fc64 <tcp_input+0x31c>
 800fc56:	4b87      	ldr	r3, [pc, #540]	; (800fe74 <tcp_input+0x52c>)
 800fc58:	f240 120d 	movw	r2, #269	; 0x10d
 800fc5c:	4986      	ldr	r1, [pc, #536]	; (800fe78 <tcp_input+0x530>)
 800fc5e:	4887      	ldr	r0, [pc, #540]	; (800fe7c <tcp_input+0x534>)
 800fc60:	f00a fb66 	bl	801a330 <iprintf>
      if (prev != NULL) {
 800fc64:	69bb      	ldr	r3, [r7, #24]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00a      	beq.n	800fc80 <tcp_input+0x338>
        prev->next = pcb->next;
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	68da      	ldr	r2, [r3, #12]
 800fc6e:	69bb      	ldr	r3, [r7, #24]
 800fc70:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fc72:	4b83      	ldr	r3, [pc, #524]	; (800fe80 <tcp_input+0x538>)
 800fc74:	681a      	ldr	r2, [r3, #0]
 800fc76:	69fb      	ldr	r3, [r7, #28]
 800fc78:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fc7a:	4a81      	ldr	r2, [pc, #516]	; (800fe80 <tcp_input+0x538>)
 800fc7c:	69fb      	ldr	r3, [r7, #28]
 800fc7e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fc80:	69fb      	ldr	r3, [r7, #28]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	69fa      	ldr	r2, [r7, #28]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d111      	bne.n	800fcae <tcp_input+0x366>
 800fc8a:	4b7a      	ldr	r3, [pc, #488]	; (800fe74 <tcp_input+0x52c>)
 800fc8c:	f240 1215 	movw	r2, #277	; 0x115
 800fc90:	497c      	ldr	r1, [pc, #496]	; (800fe84 <tcp_input+0x53c>)
 800fc92:	487a      	ldr	r0, [pc, #488]	; (800fe7c <tcp_input+0x534>)
 800fc94:	f00a fb4c 	bl	801a330 <iprintf>
      break;
 800fc98:	e009      	b.n	800fcae <tcp_input+0x366>
    }
    prev = pcb;
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	68db      	ldr	r3, [r3, #12]
 800fca2:	61fb      	str	r3, [r7, #28]
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	f47f af5e 	bne.w	800fb68 <tcp_input+0x220>
 800fcac:	e000      	b.n	800fcb0 <tcp_input+0x368>
      break;
 800fcae:	bf00      	nop
  }

  if (pcb == NULL) {
 800fcb0:	69fb      	ldr	r3, [r7, #28]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f040 8095 	bne.w	800fde2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fcb8:	4b73      	ldr	r3, [pc, #460]	; (800fe88 <tcp_input+0x540>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	61fb      	str	r3, [r7, #28]
 800fcbe:	e03f      	b.n	800fd40 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	7d1b      	ldrb	r3, [r3, #20]
 800fcc4:	2b0a      	cmp	r3, #10
 800fcc6:	d006      	beq.n	800fcd6 <tcp_input+0x38e>
 800fcc8:	4b6a      	ldr	r3, [pc, #424]	; (800fe74 <tcp_input+0x52c>)
 800fcca:	f240 121f 	movw	r2, #287	; 0x11f
 800fcce:	496f      	ldr	r1, [pc, #444]	; (800fe8c <tcp_input+0x544>)
 800fcd0:	486a      	ldr	r0, [pc, #424]	; (800fe7c <tcp_input+0x534>)
 800fcd2:	f00a fb2d 	bl	801a330 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	7a1b      	ldrb	r3, [r3, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d009      	beq.n	800fcf2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	7a1a      	ldrb	r2, [r3, #8]
 800fce2:	4b63      	ldr	r3, [pc, #396]	; (800fe70 <tcp_input+0x528>)
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fcea:	3301      	adds	r3, #1
 800fcec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d122      	bne.n	800fd38 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	8b1a      	ldrh	r2, [r3, #24]
 800fcf6:	4b5d      	ldr	r3, [pc, #372]	; (800fe6c <tcp_input+0x524>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	881b      	ldrh	r3, [r3, #0]
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d11b      	bne.n	800fd3a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	8ada      	ldrh	r2, [r3, #22]
 800fd06:	4b59      	ldr	r3, [pc, #356]	; (800fe6c <tcp_input+0x524>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	885b      	ldrh	r3, [r3, #2]
 800fd0c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d113      	bne.n	800fd3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd12:	69fb      	ldr	r3, [r7, #28]
 800fd14:	685a      	ldr	r2, [r3, #4]
 800fd16:	4b56      	ldr	r3, [pc, #344]	; (800fe70 <tcp_input+0x528>)
 800fd18:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d10d      	bne.n	800fd3a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	4b53      	ldr	r3, [pc, #332]	; (800fe70 <tcp_input+0x528>)
 800fd24:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fd26:	429a      	cmp	r2, r3
 800fd28:	d107      	bne.n	800fd3a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fd2a:	69f8      	ldr	r0, [r7, #28]
 800fd2c:	f000 fb54 	bl	80103d8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f7fd fb29 	bl	800d388 <pbuf_free>
        return;
 800fd36:	e1f0      	b.n	801011a <tcp_input+0x7d2>
        continue;
 800fd38:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd3a:	69fb      	ldr	r3, [r7, #28]
 800fd3c:	68db      	ldr	r3, [r3, #12]
 800fd3e:	61fb      	str	r3, [r7, #28]
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1bc      	bne.n	800fcc0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fd46:	2300      	movs	r3, #0
 800fd48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd4a:	4b51      	ldr	r3, [pc, #324]	; (800fe90 <tcp_input+0x548>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	617b      	str	r3, [r7, #20]
 800fd50:	e02a      	b.n	800fda8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	7a1b      	ldrb	r3, [r3, #8]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d00c      	beq.n	800fd74 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	7a1a      	ldrb	r2, [r3, #8]
 800fd5e:	4b44      	ldr	r3, [pc, #272]	; (800fe70 <tcp_input+0x528>)
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fd66:	3301      	adds	r3, #1
 800fd68:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d002      	beq.n	800fd74 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	61bb      	str	r3, [r7, #24]
        continue;
 800fd72:	e016      	b.n	800fda2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	8ada      	ldrh	r2, [r3, #22]
 800fd78:	4b3c      	ldr	r3, [pc, #240]	; (800fe6c <tcp_input+0x524>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	885b      	ldrh	r3, [r3, #2]
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d10c      	bne.n	800fd9e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	4b39      	ldr	r3, [pc, #228]	; (800fe70 <tcp_input+0x528>)
 800fd8a:	695b      	ldr	r3, [r3, #20]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d00f      	beq.n	800fdb0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00d      	beq.n	800fdb2 <tcp_input+0x46a>
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d009      	beq.n	800fdb2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	617b      	str	r3, [r7, #20]
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d1d1      	bne.n	800fd52 <tcp_input+0x40a>
 800fdae:	e000      	b.n	800fdb2 <tcp_input+0x46a>
            break;
 800fdb0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d014      	beq.n	800fde2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fdb8:	69bb      	ldr	r3, [r7, #24]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d00a      	beq.n	800fdd4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	68da      	ldr	r2, [r3, #12]
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fdc6:	4b32      	ldr	r3, [pc, #200]	; (800fe90 <tcp_input+0x548>)
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fdce:	4a30      	ldr	r2, [pc, #192]	; (800fe90 <tcp_input+0x548>)
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fdd4:	6978      	ldr	r0, [r7, #20]
 800fdd6:	f000 fa01 	bl	80101dc <tcp_listen_input>
      }
      pbuf_free(p);
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7fd fad4 	bl	800d388 <pbuf_free>
      return;
 800fde0:	e19b      	b.n	801011a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f000 8160 	beq.w	80100aa <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fdea:	4b2a      	ldr	r3, [pc, #168]	; (800fe94 <tcp_input+0x54c>)
 800fdec:	2200      	movs	r2, #0
 800fdee:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	891a      	ldrh	r2, [r3, #8]
 800fdf4:	4b27      	ldr	r3, [pc, #156]	; (800fe94 <tcp_input+0x54c>)
 800fdf6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fdf8:	4a26      	ldr	r2, [pc, #152]	; (800fe94 <tcp_input+0x54c>)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fdfe:	4b1b      	ldr	r3, [pc, #108]	; (800fe6c <tcp_input+0x524>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4a24      	ldr	r2, [pc, #144]	; (800fe94 <tcp_input+0x54c>)
 800fe04:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fe06:	4b24      	ldr	r3, [pc, #144]	; (800fe98 <tcp_input+0x550>)
 800fe08:	2200      	movs	r2, #0
 800fe0a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fe0c:	4b23      	ldr	r3, [pc, #140]	; (800fe9c <tcp_input+0x554>)
 800fe0e:	2200      	movs	r2, #0
 800fe10:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fe12:	4b23      	ldr	r3, [pc, #140]	; (800fea0 <tcp_input+0x558>)
 800fe14:	2200      	movs	r2, #0
 800fe16:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fe18:	4b22      	ldr	r3, [pc, #136]	; (800fea4 <tcp_input+0x55c>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	f003 0308 	and.w	r3, r3, #8
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d006      	beq.n	800fe32 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	7b5b      	ldrb	r3, [r3, #13]
 800fe28:	f043 0301 	orr.w	r3, r3, #1
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d038      	beq.n	800feac <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe3a:	69f8      	ldr	r0, [r7, #28]
 800fe3c:	f7ff f870 	bl	800ef20 <tcp_process_refused_data>
 800fe40:	4603      	mov	r3, r0
 800fe42:	f113 0f0d 	cmn.w	r3, #13
 800fe46:	d007      	beq.n	800fe58 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d02d      	beq.n	800feac <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fe50:	4b15      	ldr	r3, [pc, #84]	; (800fea8 <tcp_input+0x560>)
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d029      	beq.n	800feac <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f040 8104 	bne.w	801006a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fe62:	69f8      	ldr	r0, [r7, #28]
 800fe64:	f003 fe16 	bl	8013a94 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fe68:	e0ff      	b.n	801006a <tcp_input+0x722>
 800fe6a:	bf00      	nop
 800fe6c:	200214b0 	.word	0x200214b0
 800fe70:	20024820 	.word	0x20024820
 800fe74:	0802075c 	.word	0x0802075c
 800fe78:	08020888 	.word	0x08020888
 800fe7c:	080207a8 	.word	0x080207a8
 800fe80:	200280ac 	.word	0x200280ac
 800fe84:	080208b4 	.word	0x080208b4
 800fe88:	200280bc 	.word	0x200280bc
 800fe8c:	080208e0 	.word	0x080208e0
 800fe90:	200280b4 	.word	0x200280b4
 800fe94:	200214a0 	.word	0x200214a0
 800fe98:	200214d0 	.word	0x200214d0
 800fe9c:	200214cd 	.word	0x200214cd
 800fea0:	200214c8 	.word	0x200214c8
 800fea4:	200214cc 	.word	0x200214cc
 800fea8:	200214ca 	.word	0x200214ca
      }
    }
    tcp_input_pcb = pcb;
 800feac:	4a9c      	ldr	r2, [pc, #624]	; (8010120 <tcp_input+0x7d8>)
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800feb2:	69f8      	ldr	r0, [r7, #28]
 800feb4:	f000 fb0a 	bl	80104cc <tcp_process>
 800feb8:	4603      	mov	r3, r0
 800feba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800febc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fec0:	f113 0f0d 	cmn.w	r3, #13
 800fec4:	f000 80d3 	beq.w	801006e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800fec8:	4b96      	ldr	r3, [pc, #600]	; (8010124 <tcp_input+0x7dc>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	f003 0308 	and.w	r3, r3, #8
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d015      	beq.n	800ff00 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fed4:	69fb      	ldr	r3, [r7, #28]
 800fed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d008      	beq.n	800fef0 <tcp_input+0x5a8>
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fee4:	69fa      	ldr	r2, [r7, #28]
 800fee6:	6912      	ldr	r2, [r2, #16]
 800fee8:	f06f 010d 	mvn.w	r1, #13
 800feec:	4610      	mov	r0, r2
 800feee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fef0:	69f9      	ldr	r1, [r7, #28]
 800fef2:	488d      	ldr	r0, [pc, #564]	; (8010128 <tcp_input+0x7e0>)
 800fef4:	f7ff fbb0 	bl	800f658 <tcp_pcb_remove>
        tcp_free(pcb);
 800fef8:	69f8      	ldr	r0, [r7, #28]
 800fefa:	f7fd fe7d 	bl	800dbf8 <tcp_free>
 800fefe:	e0c1      	b.n	8010084 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800ff00:	2300      	movs	r3, #0
 800ff02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ff04:	4b89      	ldr	r3, [pc, #548]	; (801012c <tcp_input+0x7e4>)
 800ff06:	881b      	ldrh	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d01d      	beq.n	800ff48 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ff0c:	4b87      	ldr	r3, [pc, #540]	; (801012c <tcp_input+0x7e4>)
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d00a      	beq.n	800ff32 <tcp_input+0x5ea>
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ff22:	69fa      	ldr	r2, [r7, #28]
 800ff24:	6910      	ldr	r0, [r2, #16]
 800ff26:	89fa      	ldrh	r2, [r7, #14]
 800ff28:	69f9      	ldr	r1, [r7, #28]
 800ff2a:	4798      	blx	r3
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	74fb      	strb	r3, [r7, #19]
 800ff30:	e001      	b.n	800ff36 <tcp_input+0x5ee>
 800ff32:	2300      	movs	r3, #0
 800ff34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ff36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff3a:	f113 0f0d 	cmn.w	r3, #13
 800ff3e:	f000 8098 	beq.w	8010072 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ff42:	4b7a      	ldr	r3, [pc, #488]	; (801012c <tcp_input+0x7e4>)
 800ff44:	2200      	movs	r2, #0
 800ff46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ff48:	69f8      	ldr	r0, [r7, #28]
 800ff4a:	f000 f907 	bl	801015c <tcp_input_delayed_close>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f040 8090 	bne.w	8010076 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ff56:	4b76      	ldr	r3, [pc, #472]	; (8010130 <tcp_input+0x7e8>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d041      	beq.n	800ffe2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d006      	beq.n	800ff74 <tcp_input+0x62c>
 800ff66:	4b73      	ldr	r3, [pc, #460]	; (8010134 <tcp_input+0x7ec>)
 800ff68:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ff6c:	4972      	ldr	r1, [pc, #456]	; (8010138 <tcp_input+0x7f0>)
 800ff6e:	4873      	ldr	r0, [pc, #460]	; (801013c <tcp_input+0x7f4>)
 800ff70:	f00a f9de 	bl	801a330 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	8b5b      	ldrh	r3, [r3, #26]
 800ff78:	f003 0310 	and.w	r3, r3, #16
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d008      	beq.n	800ff92 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ff80:	4b6b      	ldr	r3, [pc, #428]	; (8010130 <tcp_input+0x7e8>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fd f9ff 	bl	800d388 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ff8a:	69f8      	ldr	r0, [r7, #28]
 800ff8c:	f7fe f978 	bl	800e280 <tcp_abort>
            goto aborted;
 800ff90:	e078      	b.n	8010084 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d00c      	beq.n	800ffb6 <tcp_input+0x66e>
 800ff9c:	69fb      	ldr	r3, [r7, #28]
 800ff9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	6918      	ldr	r0, [r3, #16]
 800ffa6:	4b62      	ldr	r3, [pc, #392]	; (8010130 <tcp_input+0x7e8>)
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	69f9      	ldr	r1, [r7, #28]
 800ffae:	47a0      	blx	r4
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	74fb      	strb	r3, [r7, #19]
 800ffb4:	e008      	b.n	800ffc8 <tcp_input+0x680>
 800ffb6:	4b5e      	ldr	r3, [pc, #376]	; (8010130 <tcp_input+0x7e8>)
 800ffb8:	681a      	ldr	r2, [r3, #0]
 800ffba:	2300      	movs	r3, #0
 800ffbc:	69f9      	ldr	r1, [r7, #28]
 800ffbe:	2000      	movs	r0, #0
 800ffc0:	f7ff f884 	bl	800f0cc <tcp_recv_null>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ffc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffcc:	f113 0f0d 	cmn.w	r3, #13
 800ffd0:	d053      	beq.n	801007a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ffd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d003      	beq.n	800ffe2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ffda:	4b55      	ldr	r3, [pc, #340]	; (8010130 <tcp_input+0x7e8>)
 800ffdc:	681a      	ldr	r2, [r3, #0]
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ffe2:	4b50      	ldr	r3, [pc, #320]	; (8010124 <tcp_input+0x7dc>)
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	f003 0320 	and.w	r3, r3, #32
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d030      	beq.n	8010050 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800ffee:	69fb      	ldr	r3, [r7, #28]
 800fff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d009      	beq.n	801000a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fffa:	7b5a      	ldrb	r2, [r3, #13]
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010000:	f042 0220 	orr.w	r2, r2, #32
 8010004:	b2d2      	uxtb	r2, r2
 8010006:	735a      	strb	r2, [r3, #13]
 8010008:	e022      	b.n	8010050 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801000a:	69fb      	ldr	r3, [r7, #28]
 801000c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801000e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010012:	d005      	beq.n	8010020 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010014:	69fb      	ldr	r3, [r7, #28]
 8010016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010018:	3301      	adds	r3, #1
 801001a:	b29a      	uxth	r2, r3
 801001c:	69fb      	ldr	r3, [r7, #28]
 801001e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00b      	beq.n	8010042 <tcp_input+0x6fa>
 801002a:	69fb      	ldr	r3, [r7, #28]
 801002c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	6918      	ldr	r0, [r3, #16]
 8010034:	2300      	movs	r3, #0
 8010036:	2200      	movs	r2, #0
 8010038:	69f9      	ldr	r1, [r7, #28]
 801003a:	47a0      	blx	r4
 801003c:	4603      	mov	r3, r0
 801003e:	74fb      	strb	r3, [r7, #19]
 8010040:	e001      	b.n	8010046 <tcp_input+0x6fe>
 8010042:	2300      	movs	r3, #0
 8010044:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801004a:	f113 0f0d 	cmn.w	r3, #13
 801004e:	d016      	beq.n	801007e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010050:	4b33      	ldr	r3, [pc, #204]	; (8010120 <tcp_input+0x7d8>)
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010056:	69f8      	ldr	r0, [r7, #28]
 8010058:	f000 f880 	bl	801015c <tcp_input_delayed_close>
 801005c:	4603      	mov	r3, r0
 801005e:	2b00      	cmp	r3, #0
 8010060:	d10f      	bne.n	8010082 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010062:	69f8      	ldr	r0, [r7, #28]
 8010064:	f002 ff10 	bl	8012e88 <tcp_output>
 8010068:	e00c      	b.n	8010084 <tcp_input+0x73c>
        goto aborted;
 801006a:	bf00      	nop
 801006c:	e00a      	b.n	8010084 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801006e:	bf00      	nop
 8010070:	e008      	b.n	8010084 <tcp_input+0x73c>
              goto aborted;
 8010072:	bf00      	nop
 8010074:	e006      	b.n	8010084 <tcp_input+0x73c>
          goto aborted;
 8010076:	bf00      	nop
 8010078:	e004      	b.n	8010084 <tcp_input+0x73c>
            goto aborted;
 801007a:	bf00      	nop
 801007c:	e002      	b.n	8010084 <tcp_input+0x73c>
              goto aborted;
 801007e:	bf00      	nop
 8010080:	e000      	b.n	8010084 <tcp_input+0x73c>
          goto aborted;
 8010082:	bf00      	nop
    tcp_input_pcb = NULL;
 8010084:	4b26      	ldr	r3, [pc, #152]	; (8010120 <tcp_input+0x7d8>)
 8010086:	2200      	movs	r2, #0
 8010088:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801008a:	4b29      	ldr	r3, [pc, #164]	; (8010130 <tcp_input+0x7e8>)
 801008c:	2200      	movs	r2, #0
 801008e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010090:	4b2b      	ldr	r3, [pc, #172]	; (8010140 <tcp_input+0x7f8>)
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d03f      	beq.n	8010118 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010098:	4b29      	ldr	r3, [pc, #164]	; (8010140 <tcp_input+0x7f8>)
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	4618      	mov	r0, r3
 801009e:	f7fd f973 	bl	800d388 <pbuf_free>
      inseg.p = NULL;
 80100a2:	4b27      	ldr	r3, [pc, #156]	; (8010140 <tcp_input+0x7f8>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80100a8:	e036      	b.n	8010118 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80100aa:	4b26      	ldr	r3, [pc, #152]	; (8010144 <tcp_input+0x7fc>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	899b      	ldrh	r3, [r3, #12]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fa fdda 	bl	800ac6c <lwip_htons>
 80100b8:	4603      	mov	r3, r0
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	f003 0304 	and.w	r3, r3, #4
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d118      	bne.n	80100f6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100c4:	4b20      	ldr	r3, [pc, #128]	; (8010148 <tcp_input+0x800>)
 80100c6:	6819      	ldr	r1, [r3, #0]
 80100c8:	4b20      	ldr	r3, [pc, #128]	; (801014c <tcp_input+0x804>)
 80100ca:	881b      	ldrh	r3, [r3, #0]
 80100cc:	461a      	mov	r2, r3
 80100ce:	4b20      	ldr	r3, [pc, #128]	; (8010150 <tcp_input+0x808>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100d4:	4b1b      	ldr	r3, [pc, #108]	; (8010144 <tcp_input+0x7fc>)
 80100d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100d8:	885b      	ldrh	r3, [r3, #2]
 80100da:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80100dc:	4a19      	ldr	r2, [pc, #100]	; (8010144 <tcp_input+0x7fc>)
 80100de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80100e0:	8812      	ldrh	r2, [r2, #0]
 80100e2:	b292      	uxth	r2, r2
 80100e4:	9202      	str	r2, [sp, #8]
 80100e6:	9301      	str	r3, [sp, #4]
 80100e8:	4b1a      	ldr	r3, [pc, #104]	; (8010154 <tcp_input+0x80c>)
 80100ea:	9300      	str	r3, [sp, #0]
 80100ec:	4b1a      	ldr	r3, [pc, #104]	; (8010158 <tcp_input+0x810>)
 80100ee:	4602      	mov	r2, r0
 80100f0:	2000      	movs	r0, #0
 80100f2:	f003 fc7d 	bl	80139f0 <tcp_rst>
    pbuf_free(p);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7fd f946 	bl	800d388 <pbuf_free>
  return;
 80100fc:	e00c      	b.n	8010118 <tcp_input+0x7d0>
    goto dropped;
 80100fe:	bf00      	nop
 8010100:	e006      	b.n	8010110 <tcp_input+0x7c8>
    goto dropped;
 8010102:	bf00      	nop
 8010104:	e004      	b.n	8010110 <tcp_input+0x7c8>
    goto dropped;
 8010106:	bf00      	nop
 8010108:	e002      	b.n	8010110 <tcp_input+0x7c8>
      goto dropped;
 801010a:	bf00      	nop
 801010c:	e000      	b.n	8010110 <tcp_input+0x7c8>
      goto dropped;
 801010e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7fd f939 	bl	800d388 <pbuf_free>
 8010116:	e000      	b.n	801011a <tcp_input+0x7d2>
  return;
 8010118:	bf00      	nop
}
 801011a:	3724      	adds	r7, #36	; 0x24
 801011c:	46bd      	mov	sp, r7
 801011e:	bd90      	pop	{r4, r7, pc}
 8010120:	200280c0 	.word	0x200280c0
 8010124:	200214cd 	.word	0x200214cd
 8010128:	200280ac 	.word	0x200280ac
 801012c:	200214c8 	.word	0x200214c8
 8010130:	200214d0 	.word	0x200214d0
 8010134:	0802075c 	.word	0x0802075c
 8010138:	08020910 	.word	0x08020910
 801013c:	080207a8 	.word	0x080207a8
 8010140:	200214a0 	.word	0x200214a0
 8010144:	200214b0 	.word	0x200214b0
 8010148:	200214c4 	.word	0x200214c4
 801014c:	200214ca 	.word	0x200214ca
 8010150:	200214c0 	.word	0x200214c0
 8010154:	20024830 	.word	0x20024830
 8010158:	20024834 	.word	0x20024834

0801015c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d106      	bne.n	8010178 <tcp_input_delayed_close+0x1c>
 801016a:	4b17      	ldr	r3, [pc, #92]	; (80101c8 <tcp_input_delayed_close+0x6c>)
 801016c:	f240 225a 	movw	r2, #602	; 0x25a
 8010170:	4916      	ldr	r1, [pc, #88]	; (80101cc <tcp_input_delayed_close+0x70>)
 8010172:	4817      	ldr	r0, [pc, #92]	; (80101d0 <tcp_input_delayed_close+0x74>)
 8010174:	f00a f8dc 	bl	801a330 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010178:	4b16      	ldr	r3, [pc, #88]	; (80101d4 <tcp_input_delayed_close+0x78>)
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	f003 0310 	and.w	r3, r3, #16
 8010180:	2b00      	cmp	r3, #0
 8010182:	d01c      	beq.n	80101be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	8b5b      	ldrh	r3, [r3, #26]
 8010188:	f003 0310 	and.w	r3, r3, #16
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10d      	bne.n	80101ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010196:	2b00      	cmp	r3, #0
 8010198:	d008      	beq.n	80101ac <tcp_input_delayed_close+0x50>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101a0:	687a      	ldr	r2, [r7, #4]
 80101a2:	6912      	ldr	r2, [r2, #16]
 80101a4:	f06f 010e 	mvn.w	r1, #14
 80101a8:	4610      	mov	r0, r2
 80101aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80101ac:	6879      	ldr	r1, [r7, #4]
 80101ae:	480a      	ldr	r0, [pc, #40]	; (80101d8 <tcp_input_delayed_close+0x7c>)
 80101b0:	f7ff fa52 	bl	800f658 <tcp_pcb_remove>
    tcp_free(pcb);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7fd fd1f 	bl	800dbf8 <tcp_free>
    return 1;
 80101ba:	2301      	movs	r3, #1
 80101bc:	e000      	b.n	80101c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80101be:	2300      	movs	r3, #0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	0802075c 	.word	0x0802075c
 80101cc:	0802092c 	.word	0x0802092c
 80101d0:	080207a8 	.word	0x080207a8
 80101d4:	200214cd 	.word	0x200214cd
 80101d8:	200280ac 	.word	0x200280ac

080101dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80101dc:	b590      	push	{r4, r7, lr}
 80101de:	b08b      	sub	sp, #44	; 0x2c
 80101e0:	af04      	add	r7, sp, #16
 80101e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80101e4:	4b6f      	ldr	r3, [pc, #444]	; (80103a4 <tcp_listen_input+0x1c8>)
 80101e6:	781b      	ldrb	r3, [r3, #0]
 80101e8:	f003 0304 	and.w	r3, r3, #4
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	f040 80d2 	bne.w	8010396 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d106      	bne.n	8010206 <tcp_listen_input+0x2a>
 80101f8:	4b6b      	ldr	r3, [pc, #428]	; (80103a8 <tcp_listen_input+0x1cc>)
 80101fa:	f240 2281 	movw	r2, #641	; 0x281
 80101fe:	496b      	ldr	r1, [pc, #428]	; (80103ac <tcp_listen_input+0x1d0>)
 8010200:	486b      	ldr	r0, [pc, #428]	; (80103b0 <tcp_listen_input+0x1d4>)
 8010202:	f00a f895 	bl	801a330 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010206:	4b67      	ldr	r3, [pc, #412]	; (80103a4 <tcp_listen_input+0x1c8>)
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	f003 0310 	and.w	r3, r3, #16
 801020e:	2b00      	cmp	r3, #0
 8010210:	d019      	beq.n	8010246 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010212:	4b68      	ldr	r3, [pc, #416]	; (80103b4 <tcp_listen_input+0x1d8>)
 8010214:	6819      	ldr	r1, [r3, #0]
 8010216:	4b68      	ldr	r3, [pc, #416]	; (80103b8 <tcp_listen_input+0x1dc>)
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	4b67      	ldr	r3, [pc, #412]	; (80103bc <tcp_listen_input+0x1e0>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010222:	4b67      	ldr	r3, [pc, #412]	; (80103c0 <tcp_listen_input+0x1e4>)
 8010224:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010226:	885b      	ldrh	r3, [r3, #2]
 8010228:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801022a:	4a65      	ldr	r2, [pc, #404]	; (80103c0 <tcp_listen_input+0x1e4>)
 801022c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801022e:	8812      	ldrh	r2, [r2, #0]
 8010230:	b292      	uxth	r2, r2
 8010232:	9202      	str	r2, [sp, #8]
 8010234:	9301      	str	r3, [sp, #4]
 8010236:	4b63      	ldr	r3, [pc, #396]	; (80103c4 <tcp_listen_input+0x1e8>)
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	4b63      	ldr	r3, [pc, #396]	; (80103c8 <tcp_listen_input+0x1ec>)
 801023c:	4602      	mov	r2, r0
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f003 fbd6 	bl	80139f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010244:	e0a9      	b.n	801039a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010246:	4b57      	ldr	r3, [pc, #348]	; (80103a4 <tcp_listen_input+0x1c8>)
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	f003 0302 	and.w	r3, r3, #2
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 80a3 	beq.w	801039a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	7d5b      	ldrb	r3, [r3, #21]
 8010258:	4618      	mov	r0, r3
 801025a:	f7ff f85b 	bl	800f314 <tcp_alloc>
 801025e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d111      	bne.n	801028a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	699b      	ldr	r3, [r3, #24]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d00a      	beq.n	8010284 <tcp_listen_input+0xa8>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	699b      	ldr	r3, [r3, #24]
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	6910      	ldr	r0, [r2, #16]
 8010276:	f04f 32ff 	mov.w	r2, #4294967295
 801027a:	2100      	movs	r1, #0
 801027c:	4798      	blx	r3
 801027e:	4603      	mov	r3, r0
 8010280:	73bb      	strb	r3, [r7, #14]
      return;
 8010282:	e08b      	b.n	801039c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010284:	23f0      	movs	r3, #240	; 0xf0
 8010286:	73bb      	strb	r3, [r7, #14]
      return;
 8010288:	e088      	b.n	801039c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801028a:	4b50      	ldr	r3, [pc, #320]	; (80103cc <tcp_listen_input+0x1f0>)
 801028c:	695a      	ldr	r2, [r3, #20]
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010292:	4b4e      	ldr	r3, [pc, #312]	; (80103cc <tcp_listen_input+0x1f0>)
 8010294:	691a      	ldr	r2, [r3, #16]
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	8ada      	ldrh	r2, [r3, #22]
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80102a2:	4b47      	ldr	r3, [pc, #284]	; (80103c0 <tcp_listen_input+0x1e4>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	881b      	ldrh	r3, [r3, #0]
 80102a8:	b29a      	uxth	r2, r3
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	2203      	movs	r2, #3
 80102b2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80102b4:	4b41      	ldr	r3, [pc, #260]	; (80103bc <tcp_listen_input+0x1e0>)
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	1c5a      	adds	r2, r3, #1
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102c2:	697b      	ldr	r3, [r7, #20]
 80102c4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80102c6:	6978      	ldr	r0, [r7, #20]
 80102c8:	f7ff fa5a 	bl	800f780 <tcp_next_iss>
 80102cc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	693a      	ldr	r2, [r7, #16]
 80102d2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	693a      	ldr	r2, [r7, #16]
 80102d8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	693a      	ldr	r2, [r7, #16]
 80102de:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	693a      	ldr	r2, [r7, #16]
 80102e4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80102e6:	4b35      	ldr	r3, [pc, #212]	; (80103bc <tcp_listen_input+0x1e0>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	1e5a      	subs	r2, r3, #1
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	691a      	ldr	r2, [r3, #16]
 80102f4:	697b      	ldr	r3, [r7, #20]
 80102f6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	7a5b      	ldrb	r3, [r3, #9]
 8010302:	f003 030c 	and.w	r3, r3, #12
 8010306:	b2da      	uxtb	r2, r3
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	7a1a      	ldrb	r2, [r3, #8]
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010314:	4b2e      	ldr	r3, [pc, #184]	; (80103d0 <tcp_listen_input+0x1f4>)
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	60da      	str	r2, [r3, #12]
 801031c:	4a2c      	ldr	r2, [pc, #176]	; (80103d0 <tcp_listen_input+0x1f4>)
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	6013      	str	r3, [r2, #0]
 8010322:	f003 fd27 	bl	8013d74 <tcp_timer_needed>
 8010326:	4b2b      	ldr	r3, [pc, #172]	; (80103d4 <tcp_listen_input+0x1f8>)
 8010328:	2201      	movs	r2, #1
 801032a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801032c:	6978      	ldr	r0, [r7, #20]
 801032e:	f001 fd8d 	bl	8011e4c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010332:	4b23      	ldr	r3, [pc, #140]	; (80103c0 <tcp_listen_input+0x1e4>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	89db      	ldrh	r3, [r3, #14]
 8010338:	b29a      	uxth	r2, r3
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	3304      	adds	r3, #4
 8010354:	4618      	mov	r0, r3
 8010356:	f007 fb6d 	bl	8017a34 <ip4_route>
 801035a:	4601      	mov	r1, r0
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	3304      	adds	r3, #4
 8010360:	461a      	mov	r2, r3
 8010362:	4620      	mov	r0, r4
 8010364:	f7ff fa32 	bl	800f7cc <tcp_eff_send_mss_netif>
 8010368:	4603      	mov	r3, r0
 801036a:	461a      	mov	r2, r3
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010370:	2112      	movs	r1, #18
 8010372:	6978      	ldr	r0, [r7, #20]
 8010374:	f002 fc9a 	bl	8012cac <tcp_enqueue_flags>
 8010378:	4603      	mov	r3, r0
 801037a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801037c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d004      	beq.n	801038e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010384:	2100      	movs	r1, #0
 8010386:	6978      	ldr	r0, [r7, #20]
 8010388:	f7fd febc 	bl	800e104 <tcp_abandon>
      return;
 801038c:	e006      	b.n	801039c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801038e:	6978      	ldr	r0, [r7, #20]
 8010390:	f002 fd7a 	bl	8012e88 <tcp_output>
  return;
 8010394:	e001      	b.n	801039a <tcp_listen_input+0x1be>
    return;
 8010396:	bf00      	nop
 8010398:	e000      	b.n	801039c <tcp_listen_input+0x1c0>
  return;
 801039a:	bf00      	nop
}
 801039c:	371c      	adds	r7, #28
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd90      	pop	{r4, r7, pc}
 80103a2:	bf00      	nop
 80103a4:	200214cc 	.word	0x200214cc
 80103a8:	0802075c 	.word	0x0802075c
 80103ac:	08020954 	.word	0x08020954
 80103b0:	080207a8 	.word	0x080207a8
 80103b4:	200214c4 	.word	0x200214c4
 80103b8:	200214ca 	.word	0x200214ca
 80103bc:	200214c0 	.word	0x200214c0
 80103c0:	200214b0 	.word	0x200214b0
 80103c4:	20024830 	.word	0x20024830
 80103c8:	20024834 	.word	0x20024834
 80103cc:	20024820 	.word	0x20024820
 80103d0:	200280ac 	.word	0x200280ac
 80103d4:	200280a8 	.word	0x200280a8

080103d8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b086      	sub	sp, #24
 80103dc:	af04      	add	r7, sp, #16
 80103de:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80103e0:	4b2f      	ldr	r3, [pc, #188]	; (80104a0 <tcp_timewait_input+0xc8>)
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	f003 0304 	and.w	r3, r3, #4
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d153      	bne.n	8010494 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d106      	bne.n	8010400 <tcp_timewait_input+0x28>
 80103f2:	4b2c      	ldr	r3, [pc, #176]	; (80104a4 <tcp_timewait_input+0xcc>)
 80103f4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80103f8:	492b      	ldr	r1, [pc, #172]	; (80104a8 <tcp_timewait_input+0xd0>)
 80103fa:	482c      	ldr	r0, [pc, #176]	; (80104ac <tcp_timewait_input+0xd4>)
 80103fc:	f009 ff98 	bl	801a330 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010400:	4b27      	ldr	r3, [pc, #156]	; (80104a0 <tcp_timewait_input+0xc8>)
 8010402:	781b      	ldrb	r3, [r3, #0]
 8010404:	f003 0302 	and.w	r3, r3, #2
 8010408:	2b00      	cmp	r3, #0
 801040a:	d02a      	beq.n	8010462 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801040c:	4b28      	ldr	r3, [pc, #160]	; (80104b0 <tcp_timewait_input+0xd8>)
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010414:	1ad3      	subs	r3, r2, r3
 8010416:	2b00      	cmp	r3, #0
 8010418:	db2d      	blt.n	8010476 <tcp_timewait_input+0x9e>
 801041a:	4b25      	ldr	r3, [pc, #148]	; (80104b0 <tcp_timewait_input+0xd8>)
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010426:	440b      	add	r3, r1
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	2b00      	cmp	r3, #0
 801042c:	dc23      	bgt.n	8010476 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801042e:	4b21      	ldr	r3, [pc, #132]	; (80104b4 <tcp_timewait_input+0xdc>)
 8010430:	6819      	ldr	r1, [r3, #0]
 8010432:	4b21      	ldr	r3, [pc, #132]	; (80104b8 <tcp_timewait_input+0xe0>)
 8010434:	881b      	ldrh	r3, [r3, #0]
 8010436:	461a      	mov	r2, r3
 8010438:	4b1d      	ldr	r3, [pc, #116]	; (80104b0 <tcp_timewait_input+0xd8>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801043e:	4b1f      	ldr	r3, [pc, #124]	; (80104bc <tcp_timewait_input+0xe4>)
 8010440:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010442:	885b      	ldrh	r3, [r3, #2]
 8010444:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010446:	4a1d      	ldr	r2, [pc, #116]	; (80104bc <tcp_timewait_input+0xe4>)
 8010448:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801044a:	8812      	ldrh	r2, [r2, #0]
 801044c:	b292      	uxth	r2, r2
 801044e:	9202      	str	r2, [sp, #8]
 8010450:	9301      	str	r3, [sp, #4]
 8010452:	4b1b      	ldr	r3, [pc, #108]	; (80104c0 <tcp_timewait_input+0xe8>)
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	4b1b      	ldr	r3, [pc, #108]	; (80104c4 <tcp_timewait_input+0xec>)
 8010458:	4602      	mov	r2, r0
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f003 fac8 	bl	80139f0 <tcp_rst>
      return;
 8010460:	e01b      	b.n	801049a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010462:	4b0f      	ldr	r3, [pc, #60]	; (80104a0 <tcp_timewait_input+0xc8>)
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	f003 0301 	and.w	r3, r3, #1
 801046a:	2b00      	cmp	r3, #0
 801046c:	d003      	beq.n	8010476 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801046e:	4b16      	ldr	r3, [pc, #88]	; (80104c8 <tcp_timewait_input+0xf0>)
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010476:	4b10      	ldr	r3, [pc, #64]	; (80104b8 <tcp_timewait_input+0xe0>)
 8010478:	881b      	ldrh	r3, [r3, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00c      	beq.n	8010498 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	8b5b      	ldrh	r3, [r3, #26]
 8010482:	f043 0302 	orr.w	r3, r3, #2
 8010486:	b29a      	uxth	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801048c:	6878      	ldr	r0, [r7, #4]
 801048e:	f002 fcfb 	bl	8012e88 <tcp_output>
  }
  return;
 8010492:	e001      	b.n	8010498 <tcp_timewait_input+0xc0>
    return;
 8010494:	bf00      	nop
 8010496:	e000      	b.n	801049a <tcp_timewait_input+0xc2>
  return;
 8010498:	bf00      	nop
}
 801049a:	3708      	adds	r7, #8
 801049c:	46bd      	mov	sp, r7
 801049e:	bd80      	pop	{r7, pc}
 80104a0:	200214cc 	.word	0x200214cc
 80104a4:	0802075c 	.word	0x0802075c
 80104a8:	08020974 	.word	0x08020974
 80104ac:	080207a8 	.word	0x080207a8
 80104b0:	200214c0 	.word	0x200214c0
 80104b4:	200214c4 	.word	0x200214c4
 80104b8:	200214ca 	.word	0x200214ca
 80104bc:	200214b0 	.word	0x200214b0
 80104c0:	20024830 	.word	0x20024830
 80104c4:	20024834 	.word	0x20024834
 80104c8:	200280b0 	.word	0x200280b0

080104cc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80104cc:	b590      	push	{r4, r7, lr}
 80104ce:	b08d      	sub	sp, #52	; 0x34
 80104d0:	af04      	add	r7, sp, #16
 80104d2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80104d4:	2300      	movs	r3, #0
 80104d6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80104d8:	2300      	movs	r3, #0
 80104da:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d106      	bne.n	80104f0 <tcp_process+0x24>
 80104e2:	4ba5      	ldr	r3, [pc, #660]	; (8010778 <tcp_process+0x2ac>)
 80104e4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80104e8:	49a4      	ldr	r1, [pc, #656]	; (801077c <tcp_process+0x2b0>)
 80104ea:	48a5      	ldr	r0, [pc, #660]	; (8010780 <tcp_process+0x2b4>)
 80104ec:	f009 ff20 	bl	801a330 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80104f0:	4ba4      	ldr	r3, [pc, #656]	; (8010784 <tcp_process+0x2b8>)
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	f003 0304 	and.w	r3, r3, #4
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d04e      	beq.n	801059a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	7d1b      	ldrb	r3, [r3, #20]
 8010500:	2b02      	cmp	r3, #2
 8010502:	d108      	bne.n	8010516 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010508:	4b9f      	ldr	r3, [pc, #636]	; (8010788 <tcp_process+0x2bc>)
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	429a      	cmp	r2, r3
 801050e:	d123      	bne.n	8010558 <tcp_process+0x8c>
        acceptable = 1;
 8010510:	2301      	movs	r3, #1
 8010512:	76fb      	strb	r3, [r7, #27]
 8010514:	e020      	b.n	8010558 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801051a:	4b9c      	ldr	r3, [pc, #624]	; (801078c <tcp_process+0x2c0>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	429a      	cmp	r2, r3
 8010520:	d102      	bne.n	8010528 <tcp_process+0x5c>
        acceptable = 1;
 8010522:	2301      	movs	r3, #1
 8010524:	76fb      	strb	r3, [r7, #27]
 8010526:	e017      	b.n	8010558 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010528:	4b98      	ldr	r3, [pc, #608]	; (801078c <tcp_process+0x2c0>)
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	2b00      	cmp	r3, #0
 8010534:	db10      	blt.n	8010558 <tcp_process+0x8c>
 8010536:	4b95      	ldr	r3, [pc, #596]	; (801078c <tcp_process+0x2c0>)
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801053e:	6879      	ldr	r1, [r7, #4]
 8010540:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010542:	440b      	add	r3, r1
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	2b00      	cmp	r3, #0
 8010548:	dc06      	bgt.n	8010558 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	8b5b      	ldrh	r3, [r3, #26]
 801054e:	f043 0302 	orr.w	r3, r3, #2
 8010552:	b29a      	uxth	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010558:	7efb      	ldrb	r3, [r7, #27]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d01b      	beq.n	8010596 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	7d1b      	ldrb	r3, [r3, #20]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d106      	bne.n	8010574 <tcp_process+0xa8>
 8010566:	4b84      	ldr	r3, [pc, #528]	; (8010778 <tcp_process+0x2ac>)
 8010568:	f44f 724e 	mov.w	r2, #824	; 0x338
 801056c:	4988      	ldr	r1, [pc, #544]	; (8010790 <tcp_process+0x2c4>)
 801056e:	4884      	ldr	r0, [pc, #528]	; (8010780 <tcp_process+0x2b4>)
 8010570:	f009 fede 	bl	801a330 <iprintf>
      recv_flags |= TF_RESET;
 8010574:	4b87      	ldr	r3, [pc, #540]	; (8010794 <tcp_process+0x2c8>)
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	f043 0308 	orr.w	r3, r3, #8
 801057c:	b2da      	uxtb	r2, r3
 801057e:	4b85      	ldr	r3, [pc, #532]	; (8010794 <tcp_process+0x2c8>)
 8010580:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	8b5b      	ldrh	r3, [r3, #26]
 8010586:	f023 0301 	bic.w	r3, r3, #1
 801058a:	b29a      	uxth	r2, r3
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010590:	f06f 030d 	mvn.w	r3, #13
 8010594:	e37a      	b.n	8010c8c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010596:	2300      	movs	r3, #0
 8010598:	e378      	b.n	8010c8c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801059a:	4b7a      	ldr	r3, [pc, #488]	; (8010784 <tcp_process+0x2b8>)
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	f003 0302 	and.w	r3, r3, #2
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d010      	beq.n	80105c8 <tcp_process+0xfc>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	7d1b      	ldrb	r3, [r3, #20]
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d00c      	beq.n	80105c8 <tcp_process+0xfc>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	7d1b      	ldrb	r3, [r3, #20]
 80105b2:	2b03      	cmp	r3, #3
 80105b4:	d008      	beq.n	80105c8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	8b5b      	ldrh	r3, [r3, #26]
 80105ba:	f043 0302 	orr.w	r3, r3, #2
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	e361      	b.n	8010c8c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	8b5b      	ldrh	r3, [r3, #26]
 80105cc:	f003 0310 	and.w	r3, r3, #16
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d103      	bne.n	80105dc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80105d4:	4b70      	ldr	r3, [pc, #448]	; (8010798 <tcp_process+0x2cc>)
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2200      	movs	r2, #0
 80105e0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2200      	movs	r2, #0
 80105e8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f001 fc2d 	bl	8011e4c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	7d1b      	ldrb	r3, [r3, #20]
 80105f6:	3b02      	subs	r3, #2
 80105f8:	2b07      	cmp	r3, #7
 80105fa:	f200 8337 	bhi.w	8010c6c <tcp_process+0x7a0>
 80105fe:	a201      	add	r2, pc, #4	; (adr r2, 8010604 <tcp_process+0x138>)
 8010600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010604:	08010625 	.word	0x08010625
 8010608:	08010855 	.word	0x08010855
 801060c:	080109cd 	.word	0x080109cd
 8010610:	080109f7 	.word	0x080109f7
 8010614:	08010b1b 	.word	0x08010b1b
 8010618:	080109cd 	.word	0x080109cd
 801061c:	08010ba7 	.word	0x08010ba7
 8010620:	08010c37 	.word	0x08010c37
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010624:	4b57      	ldr	r3, [pc, #348]	; (8010784 <tcp_process+0x2b8>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f003 0310 	and.w	r3, r3, #16
 801062c:	2b00      	cmp	r3, #0
 801062e:	f000 80e4 	beq.w	80107fa <tcp_process+0x32e>
 8010632:	4b54      	ldr	r3, [pc, #336]	; (8010784 <tcp_process+0x2b8>)
 8010634:	781b      	ldrb	r3, [r3, #0]
 8010636:	f003 0302 	and.w	r3, r3, #2
 801063a:	2b00      	cmp	r3, #0
 801063c:	f000 80dd 	beq.w	80107fa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010644:	1c5a      	adds	r2, r3, #1
 8010646:	4b50      	ldr	r3, [pc, #320]	; (8010788 <tcp_process+0x2bc>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	429a      	cmp	r2, r3
 801064c:	f040 80d5 	bne.w	80107fa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010650:	4b4e      	ldr	r3, [pc, #312]	; (801078c <tcp_process+0x2c0>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010662:	4b49      	ldr	r3, [pc, #292]	; (8010788 <tcp_process+0x2bc>)
 8010664:	681a      	ldr	r2, [r3, #0]
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801066a:	4b4c      	ldr	r3, [pc, #304]	; (801079c <tcp_process+0x2d0>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	89db      	ldrh	r3, [r3, #14]
 8010670:	b29a      	uxth	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010684:	4b41      	ldr	r3, [pc, #260]	; (801078c <tcp_process+0x2c0>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	1e5a      	subs	r2, r3, #1
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2204      	movs	r2, #4
 8010692:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	3304      	adds	r3, #4
 801069c:	4618      	mov	r0, r3
 801069e:	f007 f9c9 	bl	8017a34 <ip4_route>
 80106a2:	4601      	mov	r1, r0
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	3304      	adds	r3, #4
 80106a8:	461a      	mov	r2, r3
 80106aa:	4620      	mov	r0, r4
 80106ac:	f7ff f88e 	bl	800f7cc <tcp_eff_send_mss_netif>
 80106b0:	4603      	mov	r3, r0
 80106b2:	461a      	mov	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106bc:	009a      	lsls	r2, r3, #2
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106c2:	005b      	lsls	r3, r3, #1
 80106c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80106c8:	428b      	cmp	r3, r1
 80106ca:	bf38      	it	cc
 80106cc:	460b      	movcc	r3, r1
 80106ce:	429a      	cmp	r2, r3
 80106d0:	d204      	bcs.n	80106dc <tcp_process+0x210>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	b29b      	uxth	r3, r3
 80106da:	e00d      	b.n	80106f8 <tcp_process+0x22c>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106e0:	005b      	lsls	r3, r3, #1
 80106e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d904      	bls.n	80106f4 <tcp_process+0x228>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106ee:	005b      	lsls	r3, r3, #1
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	e001      	b.n	80106f8 <tcp_process+0x22c>
 80106f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010704:	2b00      	cmp	r3, #0
 8010706:	d106      	bne.n	8010716 <tcp_process+0x24a>
 8010708:	4b1b      	ldr	r3, [pc, #108]	; (8010778 <tcp_process+0x2ac>)
 801070a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801070e:	4924      	ldr	r1, [pc, #144]	; (80107a0 <tcp_process+0x2d4>)
 8010710:	481b      	ldr	r0, [pc, #108]	; (8010780 <tcp_process+0x2b4>)
 8010712:	f009 fe0d 	bl	801a330 <iprintf>
        --pcb->snd_queuelen;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801071c:	3b01      	subs	r3, #1
 801071e:	b29a      	uxth	r2, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801072a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d111      	bne.n	8010756 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010736:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d106      	bne.n	801074c <tcp_process+0x280>
 801073e:	4b0e      	ldr	r3, [pc, #56]	; (8010778 <tcp_process+0x2ac>)
 8010740:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010744:	4917      	ldr	r1, [pc, #92]	; (80107a4 <tcp_process+0x2d8>)
 8010746:	480e      	ldr	r0, [pc, #56]	; (8010780 <tcp_process+0x2b4>)
 8010748:	f009 fdf2 	bl	801a330 <iprintf>
          pcb->unsent = rseg->next;
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	66da      	str	r2, [r3, #108]	; 0x6c
 8010754:	e003      	b.n	801075e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010756:	69fb      	ldr	r3, [r7, #28]
 8010758:	681a      	ldr	r2, [r3, #0]
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801075e:	69f8      	ldr	r0, [r7, #28]
 8010760:	f7fe fc6f 	bl	800f042 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010768:	2b00      	cmp	r3, #0
 801076a:	d11d      	bne.n	80107a8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010772:	861a      	strh	r2, [r3, #48]	; 0x30
 8010774:	e01f      	b.n	80107b6 <tcp_process+0x2ea>
 8010776:	bf00      	nop
 8010778:	0802075c 	.word	0x0802075c
 801077c:	08020994 	.word	0x08020994
 8010780:	080207a8 	.word	0x080207a8
 8010784:	200214cc 	.word	0x200214cc
 8010788:	200214c4 	.word	0x200214c4
 801078c:	200214c0 	.word	0x200214c0
 8010790:	080209b0 	.word	0x080209b0
 8010794:	200214cd 	.word	0x200214cd
 8010798:	200280b0 	.word	0x200280b0
 801079c:	200214b0 	.word	0x200214b0
 80107a0:	080209d0 	.word	0x080209d0
 80107a4:	080209e8 	.word	0x080209e8
        } else {
          pcb->rtime = 0;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2200      	movs	r2, #0
 80107ac:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d00a      	beq.n	80107d6 <tcp_process+0x30a>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107c6:	687a      	ldr	r2, [r7, #4]
 80107c8:	6910      	ldr	r0, [r2, #16]
 80107ca:	2200      	movs	r2, #0
 80107cc:	6879      	ldr	r1, [r7, #4]
 80107ce:	4798      	blx	r3
 80107d0:	4603      	mov	r3, r0
 80107d2:	76bb      	strb	r3, [r7, #26]
 80107d4:	e001      	b.n	80107da <tcp_process+0x30e>
 80107d6:	2300      	movs	r3, #0
 80107d8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80107da:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80107de:	f113 0f0d 	cmn.w	r3, #13
 80107e2:	d102      	bne.n	80107ea <tcp_process+0x31e>
          return ERR_ABRT;
 80107e4:	f06f 030c 	mvn.w	r3, #12
 80107e8:	e250      	b.n	8010c8c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	8b5b      	ldrh	r3, [r3, #26]
 80107ee:	f043 0302 	orr.w	r3, r3, #2
 80107f2:	b29a      	uxth	r2, r3
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80107f8:	e23a      	b.n	8010c70 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80107fa:	4b9d      	ldr	r3, [pc, #628]	; (8010a70 <tcp_process+0x5a4>)
 80107fc:	781b      	ldrb	r3, [r3, #0]
 80107fe:	f003 0310 	and.w	r3, r3, #16
 8010802:	2b00      	cmp	r3, #0
 8010804:	f000 8234 	beq.w	8010c70 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010808:	4b9a      	ldr	r3, [pc, #616]	; (8010a74 <tcp_process+0x5a8>)
 801080a:	6819      	ldr	r1, [r3, #0]
 801080c:	4b9a      	ldr	r3, [pc, #616]	; (8010a78 <tcp_process+0x5ac>)
 801080e:	881b      	ldrh	r3, [r3, #0]
 8010810:	461a      	mov	r2, r3
 8010812:	4b9a      	ldr	r3, [pc, #616]	; (8010a7c <tcp_process+0x5b0>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010818:	4b99      	ldr	r3, [pc, #612]	; (8010a80 <tcp_process+0x5b4>)
 801081a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801081c:	885b      	ldrh	r3, [r3, #2]
 801081e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010820:	4a97      	ldr	r2, [pc, #604]	; (8010a80 <tcp_process+0x5b4>)
 8010822:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010824:	8812      	ldrh	r2, [r2, #0]
 8010826:	b292      	uxth	r2, r2
 8010828:	9202      	str	r2, [sp, #8]
 801082a:	9301      	str	r3, [sp, #4]
 801082c:	4b95      	ldr	r3, [pc, #596]	; (8010a84 <tcp_process+0x5b8>)
 801082e:	9300      	str	r3, [sp, #0]
 8010830:	4b95      	ldr	r3, [pc, #596]	; (8010a88 <tcp_process+0x5bc>)
 8010832:	4602      	mov	r2, r0
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f003 f8db 	bl	80139f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010840:	2b05      	cmp	r3, #5
 8010842:	f200 8215 	bhi.w	8010c70 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801084c:	6878      	ldr	r0, [r7, #4]
 801084e:	f002 fea5 	bl	801359c <tcp_rexmit_rto>
      break;
 8010852:	e20d      	b.n	8010c70 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010854:	4b86      	ldr	r3, [pc, #536]	; (8010a70 <tcp_process+0x5a4>)
 8010856:	781b      	ldrb	r3, [r3, #0]
 8010858:	f003 0310 	and.w	r3, r3, #16
 801085c:	2b00      	cmp	r3, #0
 801085e:	f000 80a1 	beq.w	80109a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010862:	4b84      	ldr	r3, [pc, #528]	; (8010a74 <tcp_process+0x5a8>)
 8010864:	681a      	ldr	r2, [r3, #0]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	3b01      	subs	r3, #1
 801086e:	2b00      	cmp	r3, #0
 8010870:	db7e      	blt.n	8010970 <tcp_process+0x4a4>
 8010872:	4b80      	ldr	r3, [pc, #512]	; (8010a74 <tcp_process+0x5a8>)
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801087a:	1ad3      	subs	r3, r2, r3
 801087c:	2b00      	cmp	r3, #0
 801087e:	dc77      	bgt.n	8010970 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2204      	movs	r2, #4
 8010884:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801088a:	2b00      	cmp	r3, #0
 801088c:	d102      	bne.n	8010894 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801088e:	23fa      	movs	r3, #250	; 0xfa
 8010890:	76bb      	strb	r3, [r7, #26]
 8010892:	e01d      	b.n	80108d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010898:	699b      	ldr	r3, [r3, #24]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d106      	bne.n	80108ac <tcp_process+0x3e0>
 801089e:	4b7b      	ldr	r3, [pc, #492]	; (8010a8c <tcp_process+0x5c0>)
 80108a0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80108a4:	497a      	ldr	r1, [pc, #488]	; (8010a90 <tcp_process+0x5c4>)
 80108a6:	487b      	ldr	r0, [pc, #492]	; (8010a94 <tcp_process+0x5c8>)
 80108a8:	f009 fd42 	bl	801a330 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108b0:	699b      	ldr	r3, [r3, #24]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d00a      	beq.n	80108cc <tcp_process+0x400>
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80108ba:	699b      	ldr	r3, [r3, #24]
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	6910      	ldr	r0, [r2, #16]
 80108c0:	2200      	movs	r2, #0
 80108c2:	6879      	ldr	r1, [r7, #4]
 80108c4:	4798      	blx	r3
 80108c6:	4603      	mov	r3, r0
 80108c8:	76bb      	strb	r3, [r7, #26]
 80108ca:	e001      	b.n	80108d0 <tcp_process+0x404>
 80108cc:	23f0      	movs	r3, #240	; 0xf0
 80108ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80108d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d00a      	beq.n	80108ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80108d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80108dc:	f113 0f0d 	cmn.w	r3, #13
 80108e0:	d002      	beq.n	80108e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7fd fccc 	bl	800e280 <tcp_abort>
            }
            return ERR_ABRT;
 80108e8:	f06f 030c 	mvn.w	r3, #12
 80108ec:	e1ce      	b.n	8010c8c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f000 fae0 	bl	8010eb4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80108f4:	4b68      	ldr	r3, [pc, #416]	; (8010a98 <tcp_process+0x5cc>)
 80108f6:	881b      	ldrh	r3, [r3, #0]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d005      	beq.n	8010908 <tcp_process+0x43c>
            recv_acked--;
 80108fc:	4b66      	ldr	r3, [pc, #408]	; (8010a98 <tcp_process+0x5cc>)
 80108fe:	881b      	ldrh	r3, [r3, #0]
 8010900:	3b01      	subs	r3, #1
 8010902:	b29a      	uxth	r2, r3
 8010904:	4b64      	ldr	r3, [pc, #400]	; (8010a98 <tcp_process+0x5cc>)
 8010906:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801090c:	009a      	lsls	r2, r3, #2
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010912:	005b      	lsls	r3, r3, #1
 8010914:	f241 111c 	movw	r1, #4380	; 0x111c
 8010918:	428b      	cmp	r3, r1
 801091a:	bf38      	it	cc
 801091c:	460b      	movcc	r3, r1
 801091e:	429a      	cmp	r2, r3
 8010920:	d204      	bcs.n	801092c <tcp_process+0x460>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	b29b      	uxth	r3, r3
 801092a:	e00d      	b.n	8010948 <tcp_process+0x47c>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	f241 121c 	movw	r2, #4380	; 0x111c
 8010936:	4293      	cmp	r3, r2
 8010938:	d904      	bls.n	8010944 <tcp_process+0x478>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801093e:	005b      	lsls	r3, r3, #1
 8010940:	b29b      	uxth	r3, r3
 8010942:	e001      	b.n	8010948 <tcp_process+0x47c>
 8010944:	f241 131c 	movw	r3, #4380	; 0x111c
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801094e:	4b53      	ldr	r3, [pc, #332]	; (8010a9c <tcp_process+0x5d0>)
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	f003 0320 	and.w	r3, r3, #32
 8010956:	2b00      	cmp	r3, #0
 8010958:	d037      	beq.n	80109ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	8b5b      	ldrh	r3, [r3, #26]
 801095e:	f043 0302 	orr.w	r3, r3, #2
 8010962:	b29a      	uxth	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2207      	movs	r2, #7
 801096c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801096e:	e02c      	b.n	80109ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010970:	4b40      	ldr	r3, [pc, #256]	; (8010a74 <tcp_process+0x5a8>)
 8010972:	6819      	ldr	r1, [r3, #0]
 8010974:	4b40      	ldr	r3, [pc, #256]	; (8010a78 <tcp_process+0x5ac>)
 8010976:	881b      	ldrh	r3, [r3, #0]
 8010978:	461a      	mov	r2, r3
 801097a:	4b40      	ldr	r3, [pc, #256]	; (8010a7c <tcp_process+0x5b0>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010980:	4b3f      	ldr	r3, [pc, #252]	; (8010a80 <tcp_process+0x5b4>)
 8010982:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010984:	885b      	ldrh	r3, [r3, #2]
 8010986:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010988:	4a3d      	ldr	r2, [pc, #244]	; (8010a80 <tcp_process+0x5b4>)
 801098a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801098c:	8812      	ldrh	r2, [r2, #0]
 801098e:	b292      	uxth	r2, r2
 8010990:	9202      	str	r2, [sp, #8]
 8010992:	9301      	str	r3, [sp, #4]
 8010994:	4b3b      	ldr	r3, [pc, #236]	; (8010a84 <tcp_process+0x5b8>)
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	4b3b      	ldr	r3, [pc, #236]	; (8010a88 <tcp_process+0x5bc>)
 801099a:	4602      	mov	r2, r0
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f003 f827 	bl	80139f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80109a2:	e167      	b.n	8010c74 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80109a4:	4b32      	ldr	r3, [pc, #200]	; (8010a70 <tcp_process+0x5a4>)
 80109a6:	781b      	ldrb	r3, [r3, #0]
 80109a8:	f003 0302 	and.w	r3, r3, #2
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	f000 8161 	beq.w	8010c74 <tcp_process+0x7a8>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109b6:	1e5a      	subs	r2, r3, #1
 80109b8:	4b30      	ldr	r3, [pc, #192]	; (8010a7c <tcp_process+0x5b0>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	429a      	cmp	r2, r3
 80109be:	f040 8159 	bne.w	8010c74 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f002 fe0c 	bl	80135e0 <tcp_rexmit>
      break;
 80109c8:	e154      	b.n	8010c74 <tcp_process+0x7a8>
 80109ca:	e153      	b.n	8010c74 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 fa71 	bl	8010eb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80109d2:	4b32      	ldr	r3, [pc, #200]	; (8010a9c <tcp_process+0x5d0>)
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	f003 0320 	and.w	r3, r3, #32
 80109da:	2b00      	cmp	r3, #0
 80109dc:	f000 814c 	beq.w	8010c78 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	8b5b      	ldrh	r3, [r3, #26]
 80109e4:	f043 0302 	orr.w	r3, r3, #2
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	2207      	movs	r2, #7
 80109f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80109f4:	e140      	b.n	8010c78 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 fa5c 	bl	8010eb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80109fc:	4b27      	ldr	r3, [pc, #156]	; (8010a9c <tcp_process+0x5d0>)
 80109fe:	781b      	ldrb	r3, [r3, #0]
 8010a00:	f003 0320 	and.w	r3, r3, #32
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d071      	beq.n	8010aec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a08:	4b19      	ldr	r3, [pc, #100]	; (8010a70 <tcp_process+0x5a4>)
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	f003 0310 	and.w	r3, r3, #16
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d060      	beq.n	8010ad6 <tcp_process+0x60a>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a18:	4b16      	ldr	r3, [pc, #88]	; (8010a74 <tcp_process+0x5a8>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d15a      	bne.n	8010ad6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d156      	bne.n	8010ad6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	8b5b      	ldrh	r3, [r3, #26]
 8010a2c:	f043 0302 	orr.w	r3, r3, #2
 8010a30:	b29a      	uxth	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f7fe fdbe 	bl	800f5b8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010a3c:	4b18      	ldr	r3, [pc, #96]	; (8010aa0 <tcp_process+0x5d4>)
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d105      	bne.n	8010a52 <tcp_process+0x586>
 8010a46:	4b16      	ldr	r3, [pc, #88]	; (8010aa0 <tcp_process+0x5d4>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	4a14      	ldr	r2, [pc, #80]	; (8010aa0 <tcp_process+0x5d4>)
 8010a4e:	6013      	str	r3, [r2, #0]
 8010a50:	e02e      	b.n	8010ab0 <tcp_process+0x5e4>
 8010a52:	4b13      	ldr	r3, [pc, #76]	; (8010aa0 <tcp_process+0x5d4>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	617b      	str	r3, [r7, #20]
 8010a58:	e027      	b.n	8010aaa <tcp_process+0x5de>
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	68db      	ldr	r3, [r3, #12]
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d11f      	bne.n	8010aa4 <tcp_process+0x5d8>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	68da      	ldr	r2, [r3, #12]
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	60da      	str	r2, [r3, #12]
 8010a6c:	e020      	b.n	8010ab0 <tcp_process+0x5e4>
 8010a6e:	bf00      	nop
 8010a70:	200214cc 	.word	0x200214cc
 8010a74:	200214c4 	.word	0x200214c4
 8010a78:	200214ca 	.word	0x200214ca
 8010a7c:	200214c0 	.word	0x200214c0
 8010a80:	200214b0 	.word	0x200214b0
 8010a84:	20024830 	.word	0x20024830
 8010a88:	20024834 	.word	0x20024834
 8010a8c:	0802075c 	.word	0x0802075c
 8010a90:	080209fc 	.word	0x080209fc
 8010a94:	080207a8 	.word	0x080207a8
 8010a98:	200214c8 	.word	0x200214c8
 8010a9c:	200214cd 	.word	0x200214cd
 8010aa0:	200280ac 	.word	0x200280ac
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	617b      	str	r3, [r7, #20]
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d1d4      	bne.n	8010a5a <tcp_process+0x58e>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	60da      	str	r2, [r3, #12]
 8010ab6:	4b77      	ldr	r3, [pc, #476]	; (8010c94 <tcp_process+0x7c8>)
 8010ab8:	2201      	movs	r2, #1
 8010aba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	220a      	movs	r2, #10
 8010ac0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010ac2:	4b75      	ldr	r3, [pc, #468]	; (8010c98 <tcp_process+0x7cc>)
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	60da      	str	r2, [r3, #12]
 8010aca:	4a73      	ldr	r2, [pc, #460]	; (8010c98 <tcp_process+0x7cc>)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6013      	str	r3, [r2, #0]
 8010ad0:	f003 f950 	bl	8013d74 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010ad4:	e0d2      	b.n	8010c7c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8b5b      	ldrh	r3, [r3, #26]
 8010ada:	f043 0302 	orr.w	r3, r3, #2
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2208      	movs	r2, #8
 8010ae8:	751a      	strb	r2, [r3, #20]
      break;
 8010aea:	e0c7      	b.n	8010c7c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010aec:	4b6b      	ldr	r3, [pc, #428]	; (8010c9c <tcp_process+0x7d0>)
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	f003 0310 	and.w	r3, r3, #16
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	f000 80c1 	beq.w	8010c7c <tcp_process+0x7b0>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010afe:	4b68      	ldr	r3, [pc, #416]	; (8010ca0 <tcp_process+0x7d4>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	f040 80ba 	bne.w	8010c7c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f040 80b5 	bne.w	8010c7c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	2206      	movs	r2, #6
 8010b16:	751a      	strb	r2, [r3, #20]
      break;
 8010b18:	e0b0      	b.n	8010c7c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010b1a:	6878      	ldr	r0, [r7, #4]
 8010b1c:	f000 f9ca 	bl	8010eb4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010b20:	4b60      	ldr	r3, [pc, #384]	; (8010ca4 <tcp_process+0x7d8>)
 8010b22:	781b      	ldrb	r3, [r3, #0]
 8010b24:	f003 0320 	and.w	r3, r3, #32
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	f000 80a9 	beq.w	8010c80 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	8b5b      	ldrh	r3, [r3, #26]
 8010b32:	f043 0302 	orr.w	r3, r3, #2
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010b3c:	6878      	ldr	r0, [r7, #4]
 8010b3e:	f7fe fd3b 	bl	800f5b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010b42:	4b59      	ldr	r3, [pc, #356]	; (8010ca8 <tcp_process+0x7dc>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	687a      	ldr	r2, [r7, #4]
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d105      	bne.n	8010b58 <tcp_process+0x68c>
 8010b4c:	4b56      	ldr	r3, [pc, #344]	; (8010ca8 <tcp_process+0x7dc>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	4a55      	ldr	r2, [pc, #340]	; (8010ca8 <tcp_process+0x7dc>)
 8010b54:	6013      	str	r3, [r2, #0]
 8010b56:	e013      	b.n	8010b80 <tcp_process+0x6b4>
 8010b58:	4b53      	ldr	r3, [pc, #332]	; (8010ca8 <tcp_process+0x7dc>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	613b      	str	r3, [r7, #16]
 8010b5e:	e00c      	b.n	8010b7a <tcp_process+0x6ae>
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	d104      	bne.n	8010b74 <tcp_process+0x6a8>
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	68da      	ldr	r2, [r3, #12]
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	60da      	str	r2, [r3, #12]
 8010b72:	e005      	b.n	8010b80 <tcp_process+0x6b4>
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	68db      	ldr	r3, [r3, #12]
 8010b78:	613b      	str	r3, [r7, #16]
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d1ef      	bne.n	8010b60 <tcp_process+0x694>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	60da      	str	r2, [r3, #12]
 8010b86:	4b43      	ldr	r3, [pc, #268]	; (8010c94 <tcp_process+0x7c8>)
 8010b88:	2201      	movs	r2, #1
 8010b8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	220a      	movs	r2, #10
 8010b90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010b92:	4b41      	ldr	r3, [pc, #260]	; (8010c98 <tcp_process+0x7cc>)
 8010b94:	681a      	ldr	r2, [r3, #0]
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	60da      	str	r2, [r3, #12]
 8010b9a:	4a3f      	ldr	r2, [pc, #252]	; (8010c98 <tcp_process+0x7cc>)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	6013      	str	r3, [r2, #0]
 8010ba0:	f003 f8e8 	bl	8013d74 <tcp_timer_needed>
      }
      break;
 8010ba4:	e06c      	b.n	8010c80 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 f984 	bl	8010eb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010bac:	4b3b      	ldr	r3, [pc, #236]	; (8010c9c <tcp_process+0x7d0>)
 8010bae:	781b      	ldrb	r3, [r3, #0]
 8010bb0:	f003 0310 	and.w	r3, r3, #16
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d065      	beq.n	8010c84 <tcp_process+0x7b8>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010bbc:	4b38      	ldr	r3, [pc, #224]	; (8010ca0 <tcp_process+0x7d4>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d15f      	bne.n	8010c84 <tcp_process+0x7b8>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d15b      	bne.n	8010c84 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f7fe fcf3 	bl	800f5b8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010bd2:	4b35      	ldr	r3, [pc, #212]	; (8010ca8 <tcp_process+0x7dc>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d105      	bne.n	8010be8 <tcp_process+0x71c>
 8010bdc:	4b32      	ldr	r3, [pc, #200]	; (8010ca8 <tcp_process+0x7dc>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	4a31      	ldr	r2, [pc, #196]	; (8010ca8 <tcp_process+0x7dc>)
 8010be4:	6013      	str	r3, [r2, #0]
 8010be6:	e013      	b.n	8010c10 <tcp_process+0x744>
 8010be8:	4b2f      	ldr	r3, [pc, #188]	; (8010ca8 <tcp_process+0x7dc>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	60fb      	str	r3, [r7, #12]
 8010bee:	e00c      	b.n	8010c0a <tcp_process+0x73e>
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	68db      	ldr	r3, [r3, #12]
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d104      	bne.n	8010c04 <tcp_process+0x738>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	68da      	ldr	r2, [r3, #12]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	60da      	str	r2, [r3, #12]
 8010c02:	e005      	b.n	8010c10 <tcp_process+0x744>
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	60fb      	str	r3, [r7, #12]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1ef      	bne.n	8010bf0 <tcp_process+0x724>
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	60da      	str	r2, [r3, #12]
 8010c16:	4b1f      	ldr	r3, [pc, #124]	; (8010c94 <tcp_process+0x7c8>)
 8010c18:	2201      	movs	r2, #1
 8010c1a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	220a      	movs	r2, #10
 8010c20:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c22:	4b1d      	ldr	r3, [pc, #116]	; (8010c98 <tcp_process+0x7cc>)
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	60da      	str	r2, [r3, #12]
 8010c2a:	4a1b      	ldr	r2, [pc, #108]	; (8010c98 <tcp_process+0x7cc>)
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6013      	str	r3, [r2, #0]
 8010c30:	f003 f8a0 	bl	8013d74 <tcp_timer_needed>
      }
      break;
 8010c34:	e026      	b.n	8010c84 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 f93c 	bl	8010eb4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c3c:	4b17      	ldr	r3, [pc, #92]	; (8010c9c <tcp_process+0x7d0>)
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	f003 0310 	and.w	r3, r3, #16
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d01f      	beq.n	8010c88 <tcp_process+0x7bc>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c4c:	4b14      	ldr	r3, [pc, #80]	; (8010ca0 <tcp_process+0x7d4>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d119      	bne.n	8010c88 <tcp_process+0x7bc>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d115      	bne.n	8010c88 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010c5c:	4b11      	ldr	r3, [pc, #68]	; (8010ca4 <tcp_process+0x7d8>)
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	f043 0310 	orr.w	r3, r3, #16
 8010c64:	b2da      	uxtb	r2, r3
 8010c66:	4b0f      	ldr	r3, [pc, #60]	; (8010ca4 <tcp_process+0x7d8>)
 8010c68:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010c6a:	e00d      	b.n	8010c88 <tcp_process+0x7bc>
    default:
      break;
 8010c6c:	bf00      	nop
 8010c6e:	e00c      	b.n	8010c8a <tcp_process+0x7be>
      break;
 8010c70:	bf00      	nop
 8010c72:	e00a      	b.n	8010c8a <tcp_process+0x7be>
      break;
 8010c74:	bf00      	nop
 8010c76:	e008      	b.n	8010c8a <tcp_process+0x7be>
      break;
 8010c78:	bf00      	nop
 8010c7a:	e006      	b.n	8010c8a <tcp_process+0x7be>
      break;
 8010c7c:	bf00      	nop
 8010c7e:	e004      	b.n	8010c8a <tcp_process+0x7be>
      break;
 8010c80:	bf00      	nop
 8010c82:	e002      	b.n	8010c8a <tcp_process+0x7be>
      break;
 8010c84:	bf00      	nop
 8010c86:	e000      	b.n	8010c8a <tcp_process+0x7be>
      break;
 8010c88:	bf00      	nop
  }
  return ERR_OK;
 8010c8a:	2300      	movs	r3, #0
}
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3724      	adds	r7, #36	; 0x24
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd90      	pop	{r4, r7, pc}
 8010c94:	200280a8 	.word	0x200280a8
 8010c98:	200280bc 	.word	0x200280bc
 8010c9c:	200214cc 	.word	0x200214cc
 8010ca0:	200214c4 	.word	0x200214c4
 8010ca4:	200214cd 	.word	0x200214cd
 8010ca8:	200280ac 	.word	0x200280ac

08010cac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010cac:	b590      	push	{r4, r7, lr}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d106      	bne.n	8010cca <tcp_oos_insert_segment+0x1e>
 8010cbc:	4b3b      	ldr	r3, [pc, #236]	; (8010dac <tcp_oos_insert_segment+0x100>)
 8010cbe:	f240 421f 	movw	r2, #1055	; 0x41f
 8010cc2:	493b      	ldr	r1, [pc, #236]	; (8010db0 <tcp_oos_insert_segment+0x104>)
 8010cc4:	483b      	ldr	r0, [pc, #236]	; (8010db4 <tcp_oos_insert_segment+0x108>)
 8010cc6:	f009 fb33 	bl	801a330 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	68db      	ldr	r3, [r3, #12]
 8010cce:	899b      	ldrh	r3, [r3, #12]
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f7f9 ffca 	bl	800ac6c <lwip_htons>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	f003 0301 	and.w	r3, r3, #1
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d028      	beq.n	8010d36 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010ce4:	6838      	ldr	r0, [r7, #0]
 8010ce6:	f7fe f997 	bl	800f018 <tcp_segs_free>
    next = NULL;
 8010cea:	2300      	movs	r3, #0
 8010cec:	603b      	str	r3, [r7, #0]
 8010cee:	e056      	b.n	8010d9e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	899b      	ldrh	r3, [r3, #12]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7f9 ffb7 	bl	800ac6c <lwip_htons>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	f003 0301 	and.w	r3, r3, #1
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d00d      	beq.n	8010d26 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	68db      	ldr	r3, [r3, #12]
 8010d0e:	899b      	ldrh	r3, [r3, #12]
 8010d10:	b29c      	uxth	r4, r3
 8010d12:	2001      	movs	r0, #1
 8010d14:	f7f9 ffaa 	bl	800ac6c <lwip_htons>
 8010d18:	4603      	mov	r3, r0
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	68db      	ldr	r3, [r3, #12]
 8010d20:	4322      	orrs	r2, r4
 8010d22:	b292      	uxth	r2, r2
 8010d24:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010d30:	68f8      	ldr	r0, [r7, #12]
 8010d32:	f7fe f986 	bl	800f042 <tcp_seg_free>
    while (next &&
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d00e      	beq.n	8010d5a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	891b      	ldrh	r3, [r3, #8]
 8010d40:	461a      	mov	r2, r3
 8010d42:	4b1d      	ldr	r3, [pc, #116]	; (8010db8 <tcp_oos_insert_segment+0x10c>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	441a      	add	r2, r3
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	685b      	ldr	r3, [r3, #4]
 8010d4e:	6839      	ldr	r1, [r7, #0]
 8010d50:	8909      	ldrh	r1, [r1, #8]
 8010d52:	440b      	add	r3, r1
 8010d54:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	daca      	bge.n	8010cf0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d01e      	beq.n	8010d9e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	891b      	ldrh	r3, [r3, #8]
 8010d64:	461a      	mov	r2, r3
 8010d66:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <tcp_oos_insert_segment+0x10c>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	441a      	add	r2, r3
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	68db      	ldr	r3, [r3, #12]
 8010d70:	685b      	ldr	r3, [r3, #4]
 8010d72:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	dd12      	ble.n	8010d9e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	685b      	ldr	r3, [r3, #4]
 8010d7e:	b29a      	uxth	r2, r3
 8010d80:	4b0d      	ldr	r3, [pc, #52]	; (8010db8 <tcp_oos_insert_segment+0x10c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	b29b      	uxth	r3, r3
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	b29a      	uxth	r2, r3
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	685a      	ldr	r2, [r3, #4]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	891b      	ldrh	r3, [r3, #8]
 8010d96:	4619      	mov	r1, r3
 8010d98:	4610      	mov	r0, r2
 8010d9a:	f7fc f96f 	bl	800d07c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	683a      	ldr	r2, [r7, #0]
 8010da2:	601a      	str	r2, [r3, #0]
}
 8010da4:	bf00      	nop
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd90      	pop	{r4, r7, pc}
 8010dac:	0802075c 	.word	0x0802075c
 8010db0:	08020a1c 	.word	0x08020a1c
 8010db4:	080207a8 	.word	0x080207a8
 8010db8:	200214c0 	.word	0x200214c0

08010dbc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010dbc:	b5b0      	push	{r4, r5, r7, lr}
 8010dbe:	b086      	sub	sp, #24
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	607a      	str	r2, [r7, #4]
 8010dc8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010dca:	e03e      	b.n	8010e4a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fc fb62 	bl	800d4a4 <pbuf_clen>
 8010de0:	4603      	mov	r3, r0
 8010de2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010dea:	8a7a      	ldrh	r2, [r7, #18]
 8010dec:	429a      	cmp	r2, r3
 8010dee:	d906      	bls.n	8010dfe <tcp_free_acked_segments+0x42>
 8010df0:	4b2a      	ldr	r3, [pc, #168]	; (8010e9c <tcp_free_acked_segments+0xe0>)
 8010df2:	f240 4257 	movw	r2, #1111	; 0x457
 8010df6:	492a      	ldr	r1, [pc, #168]	; (8010ea0 <tcp_free_acked_segments+0xe4>)
 8010df8:	482a      	ldr	r0, [pc, #168]	; (8010ea4 <tcp_free_acked_segments+0xe8>)
 8010dfa:	f009 fa99 	bl	801a330 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010e04:	8a7b      	ldrh	r3, [r7, #18]
 8010e06:	1ad3      	subs	r3, r2, r3
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	891a      	ldrh	r2, [r3, #8]
 8010e14:	4b24      	ldr	r3, [pc, #144]	; (8010ea8 <tcp_free_acked_segments+0xec>)
 8010e16:	881b      	ldrh	r3, [r3, #0]
 8010e18:	4413      	add	r3, r2
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	4b22      	ldr	r3, [pc, #136]	; (8010ea8 <tcp_free_acked_segments+0xec>)
 8010e1e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010e20:	6978      	ldr	r0, [r7, #20]
 8010e22:	f7fe f90e 	bl	800f042 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d00c      	beq.n	8010e4a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d109      	bne.n	8010e4a <tcp_free_acked_segments+0x8e>
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d106      	bne.n	8010e4a <tcp_free_acked_segments+0x8e>
 8010e3c:	4b17      	ldr	r3, [pc, #92]	; (8010e9c <tcp_free_acked_segments+0xe0>)
 8010e3e:	f240 4261 	movw	r2, #1121	; 0x461
 8010e42:	491a      	ldr	r1, [pc, #104]	; (8010eac <tcp_free_acked_segments+0xf0>)
 8010e44:	4817      	ldr	r0, [pc, #92]	; (8010ea4 <tcp_free_acked_segments+0xe8>)
 8010e46:	f009 fa73 	bl	801a330 <iprintf>
  while (seg_list != NULL &&
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d020      	beq.n	8010e92 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7f9 ff1d 	bl	800ac96 <lwip_htonl>
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	891b      	ldrh	r3, [r3, #8]
 8010e62:	461d      	mov	r5, r3
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	68db      	ldr	r3, [r3, #12]
 8010e68:	899b      	ldrh	r3, [r3, #12]
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7f9 fefd 	bl	800ac6c <lwip_htons>
 8010e72:	4603      	mov	r3, r0
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	f003 0303 	and.w	r3, r3, #3
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d001      	beq.n	8010e82 <tcp_free_acked_segments+0xc6>
 8010e7e:	2301      	movs	r3, #1
 8010e80:	e000      	b.n	8010e84 <tcp_free_acked_segments+0xc8>
 8010e82:	2300      	movs	r3, #0
 8010e84:	442b      	add	r3, r5
 8010e86:	18e2      	adds	r2, r4, r3
 8010e88:	4b09      	ldr	r3, [pc, #36]	; (8010eb0 <tcp_free_acked_segments+0xf4>)
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	dd9c      	ble.n	8010dcc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010e92:	68bb      	ldr	r3, [r7, #8]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3718      	adds	r7, #24
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bdb0      	pop	{r4, r5, r7, pc}
 8010e9c:	0802075c 	.word	0x0802075c
 8010ea0:	08020a44 	.word	0x08020a44
 8010ea4:	080207a8 	.word	0x080207a8
 8010ea8:	200214c8 	.word	0x200214c8
 8010eac:	08020a6c 	.word	0x08020a6c
 8010eb0:	200214c4 	.word	0x200214c4

08010eb4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010eb4:	b5b0      	push	{r4, r5, r7, lr}
 8010eb6:	b094      	sub	sp, #80	; 0x50
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d106      	bne.n	8010ed4 <tcp_receive+0x20>
 8010ec6:	4ba6      	ldr	r3, [pc, #664]	; (8011160 <tcp_receive+0x2ac>)
 8010ec8:	f240 427b 	movw	r2, #1147	; 0x47b
 8010ecc:	49a5      	ldr	r1, [pc, #660]	; (8011164 <tcp_receive+0x2b0>)
 8010ece:	48a6      	ldr	r0, [pc, #664]	; (8011168 <tcp_receive+0x2b4>)
 8010ed0:	f009 fa2e 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	7d1b      	ldrb	r3, [r3, #20]
 8010ed8:	2b03      	cmp	r3, #3
 8010eda:	d806      	bhi.n	8010eea <tcp_receive+0x36>
 8010edc:	4ba0      	ldr	r3, [pc, #640]	; (8011160 <tcp_receive+0x2ac>)
 8010ede:	f240 427c 	movw	r2, #1148	; 0x47c
 8010ee2:	49a2      	ldr	r1, [pc, #648]	; (801116c <tcp_receive+0x2b8>)
 8010ee4:	48a0      	ldr	r0, [pc, #640]	; (8011168 <tcp_receive+0x2b4>)
 8010ee6:	f009 fa23 	bl	801a330 <iprintf>

  if (flags & TCP_ACK) {
 8010eea:	4ba1      	ldr	r3, [pc, #644]	; (8011170 <tcp_receive+0x2bc>)
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	f003 0310 	and.w	r3, r3, #16
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	f000 8263 	beq.w	80113be <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010efe:	461a      	mov	r2, r3
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f04:	4413      	add	r3, r2
 8010f06:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f0c:	4b99      	ldr	r3, [pc, #612]	; (8011174 <tcp_receive+0x2c0>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	db1b      	blt.n	8010f4e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f1a:	4b96      	ldr	r3, [pc, #600]	; (8011174 <tcp_receive+0x2c0>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d106      	bne.n	8010f30 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f26:	4b94      	ldr	r3, [pc, #592]	; (8011178 <tcp_receive+0x2c4>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	db0e      	blt.n	8010f4e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010f34:	4b90      	ldr	r3, [pc, #576]	; (8011178 <tcp_receive+0x2c4>)
 8010f36:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d125      	bne.n	8010f88 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010f3c:	4b8f      	ldr	r3, [pc, #572]	; (801117c <tcp_receive+0x2c8>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	89db      	ldrh	r3, [r3, #14]
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f4a:	429a      	cmp	r2, r3
 8010f4c:	d91c      	bls.n	8010f88 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010f4e:	4b8b      	ldr	r3, [pc, #556]	; (801117c <tcp_receive+0x2c8>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	89db      	ldrh	r3, [r3, #14]
 8010f54:	b29a      	uxth	r2, r3
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d205      	bcs.n	8010f78 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010f78:	4b7e      	ldr	r3, [pc, #504]	; (8011174 <tcp_receive+0x2c0>)
 8010f7a:	681a      	ldr	r2, [r3, #0]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010f80:	4b7d      	ldr	r3, [pc, #500]	; (8011178 <tcp_receive+0x2c4>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010f88:	4b7b      	ldr	r3, [pc, #492]	; (8011178 <tcp_receive+0x2c4>)
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f90:	1ad3      	subs	r3, r2, r3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	dc58      	bgt.n	8011048 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010f96:	4b7a      	ldr	r3, [pc, #488]	; (8011180 <tcp_receive+0x2cc>)
 8010f98:	881b      	ldrh	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d14b      	bne.n	8011036 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fa2:	687a      	ldr	r2, [r7, #4]
 8010fa4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010fa8:	4413      	add	r3, r2
 8010faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d142      	bne.n	8011036 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	db3d      	blt.n	8011036 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010fbe:	4b6e      	ldr	r3, [pc, #440]	; (8011178 <tcp_receive+0x2c4>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d137      	bne.n	8011036 <tcp_receive+0x182>
              found_dupack = 1;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010fd0:	2bff      	cmp	r3, #255	; 0xff
 8010fd2:	d007      	beq.n	8010fe4 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010fda:	3301      	adds	r3, #1
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d91b      	bls.n	8011026 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ff8:	4413      	add	r3, r2
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011002:	429a      	cmp	r2, r3
 8011004:	d30a      	bcc.n	801101c <tcp_receive+0x168>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011010:	4413      	add	r3, r2
 8011012:	b29a      	uxth	r2, r3
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801101a:	e004      	b.n	8011026 <tcp_receive+0x172>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011022:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801102c:	2b02      	cmp	r3, #2
 801102e:	d902      	bls.n	8011036 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f002 fb41 	bl	80136b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011038:	2b00      	cmp	r3, #0
 801103a:	f040 8160 	bne.w	80112fe <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2200      	movs	r2, #0
 8011042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011046:	e15a      	b.n	80112fe <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011048:	4b4b      	ldr	r3, [pc, #300]	; (8011178 <tcp_receive+0x2c4>)
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	3b01      	subs	r3, #1
 8011054:	2b00      	cmp	r3, #0
 8011056:	f2c0 814d 	blt.w	80112f4 <tcp_receive+0x440>
 801105a:	4b47      	ldr	r3, [pc, #284]	; (8011178 <tcp_receive+0x2c4>)
 801105c:	681a      	ldr	r2, [r3, #0]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011062:	1ad3      	subs	r3, r2, r3
 8011064:	2b00      	cmp	r3, #0
 8011066:	f300 8145 	bgt.w	80112f4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	8b5b      	ldrh	r3, [r3, #26]
 801106e:	f003 0304 	and.w	r3, r3, #4
 8011072:	2b00      	cmp	r3, #0
 8011074:	d010      	beq.n	8011098 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	8b5b      	ldrh	r3, [r3, #26]
 801107a:	f023 0304 	bic.w	r3, r3, #4
 801107e:	b29a      	uxth	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110a6:	10db      	asrs	r3, r3, #3
 80110a8:	b21b      	sxth	r3, r3
 80110aa:	b29a      	uxth	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	4413      	add	r3, r2
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	b21a      	sxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80110c0:	4b2d      	ldr	r3, [pc, #180]	; (8011178 <tcp_receive+0x2c4>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	b29a      	uxth	r2, r3
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	1ad3      	subs	r3, r2, r3
 80110ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2200      	movs	r2, #0
 80110d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80110d8:	4b27      	ldr	r3, [pc, #156]	; (8011178 <tcp_receive+0x2c4>)
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	7d1b      	ldrb	r3, [r3, #20]
 80110e4:	2b03      	cmp	r3, #3
 80110e6:	f240 8096 	bls.w	8011216 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d244      	bcs.n	8011184 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	8b5b      	ldrh	r3, [r3, #26]
 80110fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011102:	2b00      	cmp	r3, #0
 8011104:	d001      	beq.n	801110a <tcp_receive+0x256>
 8011106:	2301      	movs	r3, #1
 8011108:	e000      	b.n	801110c <tcp_receive+0x258>
 801110a:	2302      	movs	r3, #2
 801110c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011110:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011114:	b29a      	uxth	r2, r3
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801111a:	fb12 f303 	smulbb	r3, r2, r3
 801111e:	b29b      	uxth	r3, r3
 8011120:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011122:	4293      	cmp	r3, r2
 8011124:	bf28      	it	cs
 8011126:	4613      	movcs	r3, r2
 8011128:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011130:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011132:	4413      	add	r3, r2
 8011134:	b29a      	uxth	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801113c:	429a      	cmp	r2, r3
 801113e:	d309      	bcc.n	8011154 <tcp_receive+0x2a0>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011146:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011148:	4413      	add	r3, r2
 801114a:	b29a      	uxth	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011152:	e060      	b.n	8011216 <tcp_receive+0x362>
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801115a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801115e:	e05a      	b.n	8011216 <tcp_receive+0x362>
 8011160:	0802075c 	.word	0x0802075c
 8011164:	08020a8c 	.word	0x08020a8c
 8011168:	080207a8 	.word	0x080207a8
 801116c:	08020aa8 	.word	0x08020aa8
 8011170:	200214cc 	.word	0x200214cc
 8011174:	200214c0 	.word	0x200214c0
 8011178:	200214c4 	.word	0x200214c4
 801117c:	200214b0 	.word	0x200214b0
 8011180:	200214ca 	.word	0x200214ca
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801118a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801118c:	4413      	add	r3, r2
 801118e:	b29a      	uxth	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011196:	429a      	cmp	r2, r3
 8011198:	d309      	bcc.n	80111ae <tcp_receive+0x2fa>
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80111a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111a2:	4413      	add	r3, r2
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80111ac:	e004      	b.n	80111b8 <tcp_receive+0x304>
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80111b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d326      	bcc.n	8011216 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111e8:	4413      	add	r3, r2
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d30a      	bcc.n	801120c <tcp_receive+0x358>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011200:	4413      	add	r3, r2
 8011202:	b29a      	uxth	r2, r3
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801120a:	e004      	b.n	8011216 <tcp_receive+0x362>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011212:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801121e:	4a98      	ldr	r2, [pc, #608]	; (8011480 <tcp_receive+0x5cc>)
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f7ff fdcb 	bl	8010dbc <tcp_free_acked_segments>
 8011226:	4602      	mov	r2, r0
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011234:	4a93      	ldr	r2, [pc, #588]	; (8011484 <tcp_receive+0x5d0>)
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7ff fdc0 	bl	8010dbc <tcp_free_acked_segments>
 801123c:	4602      	mov	r2, r0
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011246:	2b00      	cmp	r3, #0
 8011248:	d104      	bne.n	8011254 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011250:	861a      	strh	r2, [r3, #48]	; 0x30
 8011252:	e002      	b.n	801125a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	2200      	movs	r2, #0
 8011258:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	2200      	movs	r2, #0
 801125e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011264:	2b00      	cmp	r3, #0
 8011266:	d103      	bne.n	8011270 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2200      	movs	r2, #0
 801126c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011276:	4b84      	ldr	r3, [pc, #528]	; (8011488 <tcp_receive+0x5d4>)
 8011278:	881b      	ldrh	r3, [r3, #0]
 801127a:	4413      	add	r3, r2
 801127c:	b29a      	uxth	r2, r3
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	8b5b      	ldrh	r3, [r3, #26]
 8011288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801128c:	2b00      	cmp	r3, #0
 801128e:	d035      	beq.n	80112fc <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011294:	2b00      	cmp	r3, #0
 8011296:	d118      	bne.n	80112ca <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00c      	beq.n	80112ba <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	685b      	ldr	r3, [r3, #4]
 80112ac:	4618      	mov	r0, r3
 80112ae:	f7f9 fcf2 	bl	800ac96 <lwip_htonl>
 80112b2:	4603      	mov	r3, r0
 80112b4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	dc20      	bgt.n	80112fc <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	8b5b      	ldrh	r3, [r3, #26]
 80112be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80112c8:	e018      	b.n	80112fc <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7f9 fcdd 	bl	800ac96 <lwip_htonl>
 80112dc:	4603      	mov	r3, r0
 80112de:	1ae3      	subs	r3, r4, r3
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	dc0b      	bgt.n	80112fc <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	8b5b      	ldrh	r3, [r3, #26]
 80112e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80112f2:	e003      	b.n	80112fc <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f002 fbcd 	bl	8013a94 <tcp_send_empty_ack>
 80112fa:	e000      	b.n	80112fe <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80112fc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011302:	2b00      	cmp	r3, #0
 8011304:	d05b      	beq.n	80113be <tcp_receive+0x50a>
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801130a:	4b60      	ldr	r3, [pc, #384]	; (801148c <tcp_receive+0x5d8>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	2b00      	cmp	r3, #0
 8011312:	da54      	bge.n	80113be <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011314:	4b5e      	ldr	r3, [pc, #376]	; (8011490 <tcp_receive+0x5dc>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	b29a      	uxth	r2, r3
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801131e:	b29b      	uxth	r3, r3
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	b29b      	uxth	r3, r3
 8011324:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011328:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011332:	10db      	asrs	r3, r3, #3
 8011334:	b21b      	sxth	r3, r3
 8011336:	b29b      	uxth	r3, r3
 8011338:	1ad3      	subs	r3, r2, r3
 801133a:	b29b      	uxth	r3, r3
 801133c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011346:	b29a      	uxth	r2, r3
 8011348:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801134c:	4413      	add	r3, r2
 801134e:	b29b      	uxth	r3, r3
 8011350:	b21a      	sxth	r2, r3
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011356:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801135a:	2b00      	cmp	r3, #0
 801135c:	da05      	bge.n	801136a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801135e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011362:	425b      	negs	r3, r3
 8011364:	b29b      	uxth	r3, r3
 8011366:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801136a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011374:	109b      	asrs	r3, r3, #2
 8011376:	b21b      	sxth	r3, r3
 8011378:	b29b      	uxth	r3, r3
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	b29b      	uxth	r3, r3
 801137e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011388:	b29a      	uxth	r2, r3
 801138a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801138e:	4413      	add	r3, r2
 8011390:	b29b      	uxth	r3, r3
 8011392:	b21a      	sxth	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801139e:	10db      	asrs	r3, r3, #3
 80113a0:	b21b      	sxth	r3, r3
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	4413      	add	r3, r2
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	b21a      	sxth	r2, r3
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2200      	movs	r2, #0
 80113bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80113be:	4b35      	ldr	r3, [pc, #212]	; (8011494 <tcp_receive+0x5e0>)
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	f000 84e1 	beq.w	8011d8a <tcp_receive+0xed6>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	7d1b      	ldrb	r3, [r3, #20]
 80113cc:	2b06      	cmp	r3, #6
 80113ce:	f200 84dc 	bhi.w	8011d8a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113d6:	4b30      	ldr	r3, [pc, #192]	; (8011498 <tcp_receive+0x5e4>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	1ad3      	subs	r3, r2, r3
 80113dc:	3b01      	subs	r3, #1
 80113de:	2b00      	cmp	r3, #0
 80113e0:	f2c0 808e 	blt.w	8011500 <tcp_receive+0x64c>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113e8:	4b2a      	ldr	r3, [pc, #168]	; (8011494 <tcp_receive+0x5e0>)
 80113ea:	881b      	ldrh	r3, [r3, #0]
 80113ec:	4619      	mov	r1, r3
 80113ee:	4b2a      	ldr	r3, [pc, #168]	; (8011498 <tcp_receive+0x5e4>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	440b      	add	r3, r1
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	3301      	adds	r3, #1
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	f300 8081 	bgt.w	8011500 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80113fe:	4b27      	ldr	r3, [pc, #156]	; (801149c <tcp_receive+0x5e8>)
 8011400:	685b      	ldr	r3, [r3, #4]
 8011402:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011408:	4b23      	ldr	r3, [pc, #140]	; (8011498 <tcp_receive+0x5e4>)
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011410:	4b22      	ldr	r3, [pc, #136]	; (801149c <tcp_receive+0x5e8>)
 8011412:	685b      	ldr	r3, [r3, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d106      	bne.n	8011426 <tcp_receive+0x572>
 8011418:	4b21      	ldr	r3, [pc, #132]	; (80114a0 <tcp_receive+0x5ec>)
 801141a:	f240 5294 	movw	r2, #1428	; 0x594
 801141e:	4921      	ldr	r1, [pc, #132]	; (80114a4 <tcp_receive+0x5f0>)
 8011420:	4821      	ldr	r0, [pc, #132]	; (80114a8 <tcp_receive+0x5f4>)
 8011422:	f008 ff85 	bl	801a330 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801142c:	4293      	cmp	r3, r2
 801142e:	d906      	bls.n	801143e <tcp_receive+0x58a>
 8011430:	4b1b      	ldr	r3, [pc, #108]	; (80114a0 <tcp_receive+0x5ec>)
 8011432:	f240 5295 	movw	r2, #1429	; 0x595
 8011436:	491d      	ldr	r1, [pc, #116]	; (80114ac <tcp_receive+0x5f8>)
 8011438:	481b      	ldr	r0, [pc, #108]	; (80114a8 <tcp_receive+0x5f4>)
 801143a:	f008 ff79 	bl	801a330 <iprintf>
      off = (u16_t)off32;
 801143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011440:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011444:	4b15      	ldr	r3, [pc, #84]	; (801149c <tcp_receive+0x5e8>)
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	891b      	ldrh	r3, [r3, #8]
 801144a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801144e:	429a      	cmp	r2, r3
 8011450:	d906      	bls.n	8011460 <tcp_receive+0x5ac>
 8011452:	4b13      	ldr	r3, [pc, #76]	; (80114a0 <tcp_receive+0x5ec>)
 8011454:	f240 5297 	movw	r2, #1431	; 0x597
 8011458:	4915      	ldr	r1, [pc, #84]	; (80114b0 <tcp_receive+0x5fc>)
 801145a:	4813      	ldr	r0, [pc, #76]	; (80114a8 <tcp_receive+0x5f4>)
 801145c:	f008 ff68 	bl	801a330 <iprintf>
      inseg.len -= off;
 8011460:	4b0e      	ldr	r3, [pc, #56]	; (801149c <tcp_receive+0x5e8>)
 8011462:	891a      	ldrh	r2, [r3, #8]
 8011464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011468:	1ad3      	subs	r3, r2, r3
 801146a:	b29a      	uxth	r2, r3
 801146c:	4b0b      	ldr	r3, [pc, #44]	; (801149c <tcp_receive+0x5e8>)
 801146e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011470:	4b0a      	ldr	r3, [pc, #40]	; (801149c <tcp_receive+0x5e8>)
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	891a      	ldrh	r2, [r3, #8]
 8011476:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801147e:	e029      	b.n	80114d4 <tcp_receive+0x620>
 8011480:	08020ac4 	.word	0x08020ac4
 8011484:	08020acc 	.word	0x08020acc
 8011488:	200214c8 	.word	0x200214c8
 801148c:	200214c4 	.word	0x200214c4
 8011490:	200280b0 	.word	0x200280b0
 8011494:	200214ca 	.word	0x200214ca
 8011498:	200214c0 	.word	0x200214c0
 801149c:	200214a0 	.word	0x200214a0
 80114a0:	0802075c 	.word	0x0802075c
 80114a4:	08020ad4 	.word	0x08020ad4
 80114a8:	080207a8 	.word	0x080207a8
 80114ac:	08020ae4 	.word	0x08020ae4
 80114b0:	08020af4 	.word	0x08020af4
        off -= p->len;
 80114b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114b6:	895b      	ldrh	r3, [r3, #10]
 80114b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114bc:	1ad3      	subs	r3, r2, r3
 80114be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80114c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80114c6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80114c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114ca:	2200      	movs	r2, #0
 80114cc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80114ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80114d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114d6:	895b      	ldrh	r3, [r3, #10]
 80114d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114dc:	429a      	cmp	r2, r3
 80114de:	d8e9      	bhi.n	80114b4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80114e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114e4:	4619      	mov	r1, r3
 80114e6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80114e8:	f7fb fec8 	bl	800d27c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114f0:	4a91      	ldr	r2, [pc, #580]	; (8011738 <tcp_receive+0x884>)
 80114f2:	6013      	str	r3, [r2, #0]
 80114f4:	4b91      	ldr	r3, [pc, #580]	; (801173c <tcp_receive+0x888>)
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	4a8f      	ldr	r2, [pc, #572]	; (8011738 <tcp_receive+0x884>)
 80114fa:	6812      	ldr	r2, [r2, #0]
 80114fc:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80114fe:	e00d      	b.n	801151c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011500:	4b8d      	ldr	r3, [pc, #564]	; (8011738 <tcp_receive+0x884>)
 8011502:	681a      	ldr	r2, [r3, #0]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011508:	1ad3      	subs	r3, r2, r3
 801150a:	2b00      	cmp	r3, #0
 801150c:	da06      	bge.n	801151c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	8b5b      	ldrh	r3, [r3, #26]
 8011512:	f043 0302 	orr.w	r3, r3, #2
 8011516:	b29a      	uxth	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801151c:	4b86      	ldr	r3, [pc, #536]	; (8011738 <tcp_receive+0x884>)
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011524:	1ad3      	subs	r3, r2, r3
 8011526:	2b00      	cmp	r3, #0
 8011528:	f2c0 842a 	blt.w	8011d80 <tcp_receive+0xecc>
 801152c:	4b82      	ldr	r3, [pc, #520]	; (8011738 <tcp_receive+0x884>)
 801152e:	681a      	ldr	r2, [r3, #0]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011534:	6879      	ldr	r1, [r7, #4]
 8011536:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011538:	440b      	add	r3, r1
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	3301      	adds	r3, #1
 801153e:	2b00      	cmp	r3, #0
 8011540:	f300 841e 	bgt.w	8011d80 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011548:	4b7b      	ldr	r3, [pc, #492]	; (8011738 <tcp_receive+0x884>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	429a      	cmp	r2, r3
 801154e:	f040 829a 	bne.w	8011a86 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011552:	4b7a      	ldr	r3, [pc, #488]	; (801173c <tcp_receive+0x888>)
 8011554:	891c      	ldrh	r4, [r3, #8]
 8011556:	4b79      	ldr	r3, [pc, #484]	; (801173c <tcp_receive+0x888>)
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	899b      	ldrh	r3, [r3, #12]
 801155c:	b29b      	uxth	r3, r3
 801155e:	4618      	mov	r0, r3
 8011560:	f7f9 fb84 	bl	800ac6c <lwip_htons>
 8011564:	4603      	mov	r3, r0
 8011566:	b2db      	uxtb	r3, r3
 8011568:	f003 0303 	and.w	r3, r3, #3
 801156c:	2b00      	cmp	r3, #0
 801156e:	d001      	beq.n	8011574 <tcp_receive+0x6c0>
 8011570:	2301      	movs	r3, #1
 8011572:	e000      	b.n	8011576 <tcp_receive+0x6c2>
 8011574:	2300      	movs	r3, #0
 8011576:	4423      	add	r3, r4
 8011578:	b29a      	uxth	r2, r3
 801157a:	4b71      	ldr	r3, [pc, #452]	; (8011740 <tcp_receive+0x88c>)
 801157c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011582:	4b6f      	ldr	r3, [pc, #444]	; (8011740 <tcp_receive+0x88c>)
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	429a      	cmp	r2, r3
 8011588:	d275      	bcs.n	8011676 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801158a:	4b6c      	ldr	r3, [pc, #432]	; (801173c <tcp_receive+0x888>)
 801158c:	68db      	ldr	r3, [r3, #12]
 801158e:	899b      	ldrh	r3, [r3, #12]
 8011590:	b29b      	uxth	r3, r3
 8011592:	4618      	mov	r0, r3
 8011594:	f7f9 fb6a 	bl	800ac6c <lwip_htons>
 8011598:	4603      	mov	r3, r0
 801159a:	b2db      	uxtb	r3, r3
 801159c:	f003 0301 	and.w	r3, r3, #1
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d01f      	beq.n	80115e4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80115a4:	4b65      	ldr	r3, [pc, #404]	; (801173c <tcp_receive+0x888>)
 80115a6:	68db      	ldr	r3, [r3, #12]
 80115a8:	899b      	ldrh	r3, [r3, #12]
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	b21b      	sxth	r3, r3
 80115ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115b2:	b21c      	sxth	r4, r3
 80115b4:	4b61      	ldr	r3, [pc, #388]	; (801173c <tcp_receive+0x888>)
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	899b      	ldrh	r3, [r3, #12]
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f9 fb55 	bl	800ac6c <lwip_htons>
 80115c2:	4603      	mov	r3, r0
 80115c4:	b2db      	uxtb	r3, r3
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7f9 fb4c 	bl	800ac6c <lwip_htons>
 80115d4:	4603      	mov	r3, r0
 80115d6:	b21b      	sxth	r3, r3
 80115d8:	4323      	orrs	r3, r4
 80115da:	b21a      	sxth	r2, r3
 80115dc:	4b57      	ldr	r3, [pc, #348]	; (801173c <tcp_receive+0x888>)
 80115de:	68db      	ldr	r3, [r3, #12]
 80115e0:	b292      	uxth	r2, r2
 80115e2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115e8:	4b54      	ldr	r3, [pc, #336]	; (801173c <tcp_receive+0x888>)
 80115ea:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80115ec:	4b53      	ldr	r3, [pc, #332]	; (801173c <tcp_receive+0x888>)
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	899b      	ldrh	r3, [r3, #12]
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7f9 fb39 	bl	800ac6c <lwip_htons>
 80115fa:	4603      	mov	r3, r0
 80115fc:	b2db      	uxtb	r3, r3
 80115fe:	f003 0302 	and.w	r3, r3, #2
 8011602:	2b00      	cmp	r3, #0
 8011604:	d005      	beq.n	8011612 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011606:	4b4d      	ldr	r3, [pc, #308]	; (801173c <tcp_receive+0x888>)
 8011608:	891b      	ldrh	r3, [r3, #8]
 801160a:	3b01      	subs	r3, #1
 801160c:	b29a      	uxth	r2, r3
 801160e:	4b4b      	ldr	r3, [pc, #300]	; (801173c <tcp_receive+0x888>)
 8011610:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011612:	4b4a      	ldr	r3, [pc, #296]	; (801173c <tcp_receive+0x888>)
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	4a49      	ldr	r2, [pc, #292]	; (801173c <tcp_receive+0x888>)
 8011618:	8912      	ldrh	r2, [r2, #8]
 801161a:	4611      	mov	r1, r2
 801161c:	4618      	mov	r0, r3
 801161e:	f7fb fd2d 	bl	800d07c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011622:	4b46      	ldr	r3, [pc, #280]	; (801173c <tcp_receive+0x888>)
 8011624:	891c      	ldrh	r4, [r3, #8]
 8011626:	4b45      	ldr	r3, [pc, #276]	; (801173c <tcp_receive+0x888>)
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	899b      	ldrh	r3, [r3, #12]
 801162c:	b29b      	uxth	r3, r3
 801162e:	4618      	mov	r0, r3
 8011630:	f7f9 fb1c 	bl	800ac6c <lwip_htons>
 8011634:	4603      	mov	r3, r0
 8011636:	b2db      	uxtb	r3, r3
 8011638:	f003 0303 	and.w	r3, r3, #3
 801163c:	2b00      	cmp	r3, #0
 801163e:	d001      	beq.n	8011644 <tcp_receive+0x790>
 8011640:	2301      	movs	r3, #1
 8011642:	e000      	b.n	8011646 <tcp_receive+0x792>
 8011644:	2300      	movs	r3, #0
 8011646:	4423      	add	r3, r4
 8011648:	b29a      	uxth	r2, r3
 801164a:	4b3d      	ldr	r3, [pc, #244]	; (8011740 <tcp_receive+0x88c>)
 801164c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801164e:	4b3c      	ldr	r3, [pc, #240]	; (8011740 <tcp_receive+0x88c>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	461a      	mov	r2, r3
 8011654:	4b38      	ldr	r3, [pc, #224]	; (8011738 <tcp_receive+0x884>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	441a      	add	r2, r3
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801165e:	6879      	ldr	r1, [r7, #4]
 8011660:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011662:	440b      	add	r3, r1
 8011664:	429a      	cmp	r2, r3
 8011666:	d006      	beq.n	8011676 <tcp_receive+0x7c2>
 8011668:	4b36      	ldr	r3, [pc, #216]	; (8011744 <tcp_receive+0x890>)
 801166a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801166e:	4936      	ldr	r1, [pc, #216]	; (8011748 <tcp_receive+0x894>)
 8011670:	4836      	ldr	r0, [pc, #216]	; (801174c <tcp_receive+0x898>)
 8011672:	f008 fe5d 	bl	801a330 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801167a:	2b00      	cmp	r3, #0
 801167c:	f000 80e7 	beq.w	801184e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011680:	4b2e      	ldr	r3, [pc, #184]	; (801173c <tcp_receive+0x888>)
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	899b      	ldrh	r3, [r3, #12]
 8011686:	b29b      	uxth	r3, r3
 8011688:	4618      	mov	r0, r3
 801168a:	f7f9 faef 	bl	800ac6c <lwip_htons>
 801168e:	4603      	mov	r3, r0
 8011690:	b2db      	uxtb	r3, r3
 8011692:	f003 0301 	and.w	r3, r3, #1
 8011696:	2b00      	cmp	r3, #0
 8011698:	d010      	beq.n	80116bc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801169a:	e00a      	b.n	80116b2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116a0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116a6:	681a      	ldr	r2, [r3, #0]
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f7fd fcc8 	bl	800f042 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d1f0      	bne.n	801169c <tcp_receive+0x7e8>
 80116ba:	e0c8      	b.n	801184e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116c0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80116c2:	e052      	b.n	801176a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80116c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c6:	68db      	ldr	r3, [r3, #12]
 80116c8:	899b      	ldrh	r3, [r3, #12]
 80116ca:	b29b      	uxth	r3, r3
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7f9 facd 	bl	800ac6c <lwip_htons>
 80116d2:	4603      	mov	r3, r0
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	f003 0301 	and.w	r3, r3, #1
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d03d      	beq.n	801175a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80116de:	4b17      	ldr	r3, [pc, #92]	; (801173c <tcp_receive+0x888>)
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	899b      	ldrh	r3, [r3, #12]
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7f9 fac0 	bl	800ac6c <lwip_htons>
 80116ec:	4603      	mov	r3, r0
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d130      	bne.n	801175a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80116f8:	4b10      	ldr	r3, [pc, #64]	; (801173c <tcp_receive+0x888>)
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	899b      	ldrh	r3, [r3, #12]
 80116fe:	b29c      	uxth	r4, r3
 8011700:	2001      	movs	r0, #1
 8011702:	f7f9 fab3 	bl	800ac6c <lwip_htons>
 8011706:	4603      	mov	r3, r0
 8011708:	461a      	mov	r2, r3
 801170a:	4b0c      	ldr	r3, [pc, #48]	; (801173c <tcp_receive+0x888>)
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	4322      	orrs	r2, r4
 8011710:	b292      	uxth	r2, r2
 8011712:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011714:	4b09      	ldr	r3, [pc, #36]	; (801173c <tcp_receive+0x888>)
 8011716:	891c      	ldrh	r4, [r3, #8]
 8011718:	4b08      	ldr	r3, [pc, #32]	; (801173c <tcp_receive+0x888>)
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	899b      	ldrh	r3, [r3, #12]
 801171e:	b29b      	uxth	r3, r3
 8011720:	4618      	mov	r0, r3
 8011722:	f7f9 faa3 	bl	800ac6c <lwip_htons>
 8011726:	4603      	mov	r3, r0
 8011728:	b2db      	uxtb	r3, r3
 801172a:	f003 0303 	and.w	r3, r3, #3
 801172e:	2b00      	cmp	r3, #0
 8011730:	d00e      	beq.n	8011750 <tcp_receive+0x89c>
 8011732:	2301      	movs	r3, #1
 8011734:	e00d      	b.n	8011752 <tcp_receive+0x89e>
 8011736:	bf00      	nop
 8011738:	200214c0 	.word	0x200214c0
 801173c:	200214a0 	.word	0x200214a0
 8011740:	200214ca 	.word	0x200214ca
 8011744:	0802075c 	.word	0x0802075c
 8011748:	08020b04 	.word	0x08020b04
 801174c:	080207a8 	.word	0x080207a8
 8011750:	2300      	movs	r3, #0
 8011752:	4423      	add	r3, r4
 8011754:	b29a      	uxth	r2, r3
 8011756:	4b98      	ldr	r3, [pc, #608]	; (80119b8 <tcp_receive+0xb04>)
 8011758:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801175a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801175c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801175e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011764:	6938      	ldr	r0, [r7, #16]
 8011766:	f7fd fc6c 	bl	800f042 <tcp_seg_free>
            while (next &&
 801176a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801176c:	2b00      	cmp	r3, #0
 801176e:	d00e      	beq.n	801178e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011770:	4b91      	ldr	r3, [pc, #580]	; (80119b8 <tcp_receive+0xb04>)
 8011772:	881b      	ldrh	r3, [r3, #0]
 8011774:	461a      	mov	r2, r3
 8011776:	4b91      	ldr	r3, [pc, #580]	; (80119bc <tcp_receive+0xb08>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	441a      	add	r2, r3
 801177c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	685b      	ldr	r3, [r3, #4]
 8011782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011784:	8909      	ldrh	r1, [r1, #8]
 8011786:	440b      	add	r3, r1
 8011788:	1ad3      	subs	r3, r2, r3
            while (next &&
 801178a:	2b00      	cmp	r3, #0
 801178c:	da9a      	bge.n	80116c4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801178e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011790:	2b00      	cmp	r3, #0
 8011792:	d059      	beq.n	8011848 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011794:	4b88      	ldr	r3, [pc, #544]	; (80119b8 <tcp_receive+0xb04>)
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	461a      	mov	r2, r3
 801179a:	4b88      	ldr	r3, [pc, #544]	; (80119bc <tcp_receive+0xb08>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	441a      	add	r2, r3
 80117a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a2:	68db      	ldr	r3, [r3, #12]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	dd4d      	ble.n	8011848 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80117ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117ae:	68db      	ldr	r3, [r3, #12]
 80117b0:	685b      	ldr	r3, [r3, #4]
 80117b2:	b29a      	uxth	r2, r3
 80117b4:	4b81      	ldr	r3, [pc, #516]	; (80119bc <tcp_receive+0xb08>)
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	b29a      	uxth	r2, r3
 80117be:	4b80      	ldr	r3, [pc, #512]	; (80119c0 <tcp_receive+0xb0c>)
 80117c0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80117c2:	4b7f      	ldr	r3, [pc, #508]	; (80119c0 <tcp_receive+0xb0c>)
 80117c4:	68db      	ldr	r3, [r3, #12]
 80117c6:	899b      	ldrh	r3, [r3, #12]
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7f9 fa4e 	bl	800ac6c <lwip_htons>
 80117d0:	4603      	mov	r3, r0
 80117d2:	b2db      	uxtb	r3, r3
 80117d4:	f003 0302 	and.w	r3, r3, #2
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d005      	beq.n	80117e8 <tcp_receive+0x934>
                inseg.len -= 1;
 80117dc:	4b78      	ldr	r3, [pc, #480]	; (80119c0 <tcp_receive+0xb0c>)
 80117de:	891b      	ldrh	r3, [r3, #8]
 80117e0:	3b01      	subs	r3, #1
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	4b76      	ldr	r3, [pc, #472]	; (80119c0 <tcp_receive+0xb0c>)
 80117e6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80117e8:	4b75      	ldr	r3, [pc, #468]	; (80119c0 <tcp_receive+0xb0c>)
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	4a74      	ldr	r2, [pc, #464]	; (80119c0 <tcp_receive+0xb0c>)
 80117ee:	8912      	ldrh	r2, [r2, #8]
 80117f0:	4611      	mov	r1, r2
 80117f2:	4618      	mov	r0, r3
 80117f4:	f7fb fc42 	bl	800d07c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80117f8:	4b71      	ldr	r3, [pc, #452]	; (80119c0 <tcp_receive+0xb0c>)
 80117fa:	891c      	ldrh	r4, [r3, #8]
 80117fc:	4b70      	ldr	r3, [pc, #448]	; (80119c0 <tcp_receive+0xb0c>)
 80117fe:	68db      	ldr	r3, [r3, #12]
 8011800:	899b      	ldrh	r3, [r3, #12]
 8011802:	b29b      	uxth	r3, r3
 8011804:	4618      	mov	r0, r3
 8011806:	f7f9 fa31 	bl	800ac6c <lwip_htons>
 801180a:	4603      	mov	r3, r0
 801180c:	b2db      	uxtb	r3, r3
 801180e:	f003 0303 	and.w	r3, r3, #3
 8011812:	2b00      	cmp	r3, #0
 8011814:	d001      	beq.n	801181a <tcp_receive+0x966>
 8011816:	2301      	movs	r3, #1
 8011818:	e000      	b.n	801181c <tcp_receive+0x968>
 801181a:	2300      	movs	r3, #0
 801181c:	4423      	add	r3, r4
 801181e:	b29a      	uxth	r2, r3
 8011820:	4b65      	ldr	r3, [pc, #404]	; (80119b8 <tcp_receive+0xb04>)
 8011822:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011824:	4b64      	ldr	r3, [pc, #400]	; (80119b8 <tcp_receive+0xb04>)
 8011826:	881b      	ldrh	r3, [r3, #0]
 8011828:	461a      	mov	r2, r3
 801182a:	4b64      	ldr	r3, [pc, #400]	; (80119bc <tcp_receive+0xb08>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	441a      	add	r2, r3
 8011830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	429a      	cmp	r2, r3
 8011838:	d006      	beq.n	8011848 <tcp_receive+0x994>
 801183a:	4b62      	ldr	r3, [pc, #392]	; (80119c4 <tcp_receive+0xb10>)
 801183c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011840:	4961      	ldr	r1, [pc, #388]	; (80119c8 <tcp_receive+0xb14>)
 8011842:	4862      	ldr	r0, [pc, #392]	; (80119cc <tcp_receive+0xb18>)
 8011844:	f008 fd74 	bl	801a330 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801184c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801184e:	4b5a      	ldr	r3, [pc, #360]	; (80119b8 <tcp_receive+0xb04>)
 8011850:	881b      	ldrh	r3, [r3, #0]
 8011852:	461a      	mov	r2, r3
 8011854:	4b59      	ldr	r3, [pc, #356]	; (80119bc <tcp_receive+0xb08>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	441a      	add	r2, r3
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011862:	4b55      	ldr	r3, [pc, #340]	; (80119b8 <tcp_receive+0xb04>)
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	429a      	cmp	r2, r3
 8011868:	d206      	bcs.n	8011878 <tcp_receive+0x9c4>
 801186a:	4b56      	ldr	r3, [pc, #344]	; (80119c4 <tcp_receive+0xb10>)
 801186c:	f240 6207 	movw	r2, #1543	; 0x607
 8011870:	4957      	ldr	r1, [pc, #348]	; (80119d0 <tcp_receive+0xb1c>)
 8011872:	4856      	ldr	r0, [pc, #344]	; (80119cc <tcp_receive+0xb18>)
 8011874:	f008 fd5c 	bl	801a330 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801187c:	4b4e      	ldr	r3, [pc, #312]	; (80119b8 <tcp_receive+0xb04>)
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	b29a      	uxth	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7fc fd9d 	bl	800e3c8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801188e:	4b4c      	ldr	r3, [pc, #304]	; (80119c0 <tcp_receive+0xb0c>)
 8011890:	685b      	ldr	r3, [r3, #4]
 8011892:	891b      	ldrh	r3, [r3, #8]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d006      	beq.n	80118a6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011898:	4b49      	ldr	r3, [pc, #292]	; (80119c0 <tcp_receive+0xb0c>)
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	4a4d      	ldr	r2, [pc, #308]	; (80119d4 <tcp_receive+0xb20>)
 801189e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80118a0:	4b47      	ldr	r3, [pc, #284]	; (80119c0 <tcp_receive+0xb0c>)
 80118a2:	2200      	movs	r2, #0
 80118a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80118a6:	4b46      	ldr	r3, [pc, #280]	; (80119c0 <tcp_receive+0xb0c>)
 80118a8:	68db      	ldr	r3, [r3, #12]
 80118aa:	899b      	ldrh	r3, [r3, #12]
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	4618      	mov	r0, r3
 80118b0:	f7f9 f9dc 	bl	800ac6c <lwip_htons>
 80118b4:	4603      	mov	r3, r0
 80118b6:	b2db      	uxtb	r3, r3
 80118b8:	f003 0301 	and.w	r3, r3, #1
 80118bc:	2b00      	cmp	r3, #0
 80118be:	f000 80b8 	beq.w	8011a32 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80118c2:	4b45      	ldr	r3, [pc, #276]	; (80119d8 <tcp_receive+0xb24>)
 80118c4:	781b      	ldrb	r3, [r3, #0]
 80118c6:	f043 0320 	orr.w	r3, r3, #32
 80118ca:	b2da      	uxtb	r2, r3
 80118cc:	4b42      	ldr	r3, [pc, #264]	; (80119d8 <tcp_receive+0xb24>)
 80118ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80118d0:	e0af      	b.n	8011a32 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118dc:	68db      	ldr	r3, [r3, #12]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	4a36      	ldr	r2, [pc, #216]	; (80119bc <tcp_receive+0xb08>)
 80118e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80118e4:	68bb      	ldr	r3, [r7, #8]
 80118e6:	891b      	ldrh	r3, [r3, #8]
 80118e8:	461c      	mov	r4, r3
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	68db      	ldr	r3, [r3, #12]
 80118ee:	899b      	ldrh	r3, [r3, #12]
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7f9 f9ba 	bl	800ac6c <lwip_htons>
 80118f8:	4603      	mov	r3, r0
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	f003 0303 	and.w	r3, r3, #3
 8011900:	2b00      	cmp	r3, #0
 8011902:	d001      	beq.n	8011908 <tcp_receive+0xa54>
 8011904:	2301      	movs	r3, #1
 8011906:	e000      	b.n	801190a <tcp_receive+0xa56>
 8011908:	2300      	movs	r3, #0
 801190a:	191a      	adds	r2, r3, r4
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011910:	441a      	add	r2, r3
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801191a:	461c      	mov	r4, r3
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	891b      	ldrh	r3, [r3, #8]
 8011920:	461d      	mov	r5, r3
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	899b      	ldrh	r3, [r3, #12]
 8011928:	b29b      	uxth	r3, r3
 801192a:	4618      	mov	r0, r3
 801192c:	f7f9 f99e 	bl	800ac6c <lwip_htons>
 8011930:	4603      	mov	r3, r0
 8011932:	b2db      	uxtb	r3, r3
 8011934:	f003 0303 	and.w	r3, r3, #3
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <tcp_receive+0xa8c>
 801193c:	2301      	movs	r3, #1
 801193e:	e000      	b.n	8011942 <tcp_receive+0xa8e>
 8011940:	2300      	movs	r3, #0
 8011942:	442b      	add	r3, r5
 8011944:	429c      	cmp	r4, r3
 8011946:	d206      	bcs.n	8011956 <tcp_receive+0xaa2>
 8011948:	4b1e      	ldr	r3, [pc, #120]	; (80119c4 <tcp_receive+0xb10>)
 801194a:	f240 622b 	movw	r2, #1579	; 0x62b
 801194e:	4923      	ldr	r1, [pc, #140]	; (80119dc <tcp_receive+0xb28>)
 8011950:	481e      	ldr	r0, [pc, #120]	; (80119cc <tcp_receive+0xb18>)
 8011952:	f008 fced 	bl	801a330 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	891b      	ldrh	r3, [r3, #8]
 801195a:	461c      	mov	r4, r3
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	68db      	ldr	r3, [r3, #12]
 8011960:	899b      	ldrh	r3, [r3, #12]
 8011962:	b29b      	uxth	r3, r3
 8011964:	4618      	mov	r0, r3
 8011966:	f7f9 f981 	bl	800ac6c <lwip_htons>
 801196a:	4603      	mov	r3, r0
 801196c:	b2db      	uxtb	r3, r3
 801196e:	f003 0303 	and.w	r3, r3, #3
 8011972:	2b00      	cmp	r3, #0
 8011974:	d001      	beq.n	801197a <tcp_receive+0xac6>
 8011976:	2301      	movs	r3, #1
 8011978:	e000      	b.n	801197c <tcp_receive+0xac8>
 801197a:	2300      	movs	r3, #0
 801197c:	1919      	adds	r1, r3, r4
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011982:	b28b      	uxth	r3, r1
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	b29a      	uxth	r2, r3
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801198c:	6878      	ldr	r0, [r7, #4]
 801198e:	f7fc fd1b 	bl	800e3c8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	891b      	ldrh	r3, [r3, #8]
 8011998:	2b00      	cmp	r3, #0
 801199a:	d028      	beq.n	80119ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801199c:	4b0d      	ldr	r3, [pc, #52]	; (80119d4 <tcp_receive+0xb20>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d01d      	beq.n	80119e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80119a4:	4b0b      	ldr	r3, [pc, #44]	; (80119d4 <tcp_receive+0xb20>)
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	4619      	mov	r1, r3
 80119ae:	4610      	mov	r0, r2
 80119b0:	f7fb fdb8 	bl	800d524 <pbuf_cat>
 80119b4:	e018      	b.n	80119e8 <tcp_receive+0xb34>
 80119b6:	bf00      	nop
 80119b8:	200214ca 	.word	0x200214ca
 80119bc:	200214c0 	.word	0x200214c0
 80119c0:	200214a0 	.word	0x200214a0
 80119c4:	0802075c 	.word	0x0802075c
 80119c8:	08020b3c 	.word	0x08020b3c
 80119cc:	080207a8 	.word	0x080207a8
 80119d0:	08020b78 	.word	0x08020b78
 80119d4:	200214d0 	.word	0x200214d0
 80119d8:	200214cd 	.word	0x200214cd
 80119dc:	08020b98 	.word	0x08020b98
            } else {
              recv_data = cseg->p;
 80119e0:	68bb      	ldr	r3, [r7, #8]
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	4a70      	ldr	r2, [pc, #448]	; (8011ba8 <tcp_receive+0xcf4>)
 80119e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2200      	movs	r2, #0
 80119ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	899b      	ldrh	r3, [r3, #12]
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7f9 f938 	bl	800ac6c <lwip_htons>
 80119fc:	4603      	mov	r3, r0
 80119fe:	b2db      	uxtb	r3, r3
 8011a00:	f003 0301 	and.w	r3, r3, #1
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00d      	beq.n	8011a24 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011a08:	4b68      	ldr	r3, [pc, #416]	; (8011bac <tcp_receive+0xcf8>)
 8011a0a:	781b      	ldrb	r3, [r3, #0]
 8011a0c:	f043 0320 	orr.w	r3, r3, #32
 8011a10:	b2da      	uxtb	r2, r3
 8011a12:	4b66      	ldr	r3, [pc, #408]	; (8011bac <tcp_receive+0xcf8>)
 8011a14:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	7d1b      	ldrb	r3, [r3, #20]
 8011a1a:	2b04      	cmp	r3, #4
 8011a1c:	d102      	bne.n	8011a24 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	2207      	movs	r2, #7
 8011a22:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011a2c:	68b8      	ldr	r0, [r7, #8]
 8011a2e:	f7fd fb08 	bl	800f042 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d008      	beq.n	8011a4c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a3e:	68db      	ldr	r3, [r3, #12]
 8011a40:	685a      	ldr	r2, [r3, #4]
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011a46:	429a      	cmp	r2, r3
 8011a48:	f43f af43 	beq.w	80118d2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	8b5b      	ldrh	r3, [r3, #26]
 8011a50:	f003 0301 	and.w	r3, r3, #1
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d00e      	beq.n	8011a76 <tcp_receive+0xbc2>
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	8b5b      	ldrh	r3, [r3, #26]
 8011a5c:	f023 0301 	bic.w	r3, r3, #1
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	835a      	strh	r2, [r3, #26]
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	8b5b      	ldrh	r3, [r3, #26]
 8011a6a:	f043 0302 	orr.w	r3, r3, #2
 8011a6e:	b29a      	uxth	r2, r3
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011a74:	e188      	b.n	8011d88 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	8b5b      	ldrh	r3, [r3, #26]
 8011a7a:	f043 0301 	orr.w	r3, r3, #1
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011a84:	e180      	b.n	8011d88 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d106      	bne.n	8011a9c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011a8e:	4848      	ldr	r0, [pc, #288]	; (8011bb0 <tcp_receive+0xcfc>)
 8011a90:	f7fd faf0 	bl	800f074 <tcp_seg_copy>
 8011a94:	4602      	mov	r2, r0
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	675a      	str	r2, [r3, #116]	; 0x74
 8011a9a:	e16d      	b.n	8011d78 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011aa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8011aa6:	e157      	b.n	8011d58 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aaa:	68db      	ldr	r3, [r3, #12]
 8011aac:	685a      	ldr	r2, [r3, #4]
 8011aae:	4b41      	ldr	r3, [pc, #260]	; (8011bb4 <tcp_receive+0xd00>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	429a      	cmp	r2, r3
 8011ab4:	d11d      	bne.n	8011af2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011ab6:	4b3e      	ldr	r3, [pc, #248]	; (8011bb0 <tcp_receive+0xcfc>)
 8011ab8:	891a      	ldrh	r2, [r3, #8]
 8011aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abc:	891b      	ldrh	r3, [r3, #8]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	f240 814f 	bls.w	8011d62 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011ac4:	483a      	ldr	r0, [pc, #232]	; (8011bb0 <tcp_receive+0xcfc>)
 8011ac6:	f7fd fad5 	bl	800f074 <tcp_seg_copy>
 8011aca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	f000 8149 	beq.w	8011d66 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d003      	beq.n	8011ae2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011adc:	697a      	ldr	r2, [r7, #20]
 8011ade:	601a      	str	r2, [r3, #0]
 8011ae0:	e002      	b.n	8011ae8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	697a      	ldr	r2, [r7, #20]
 8011ae6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011ae8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011aea:	6978      	ldr	r0, [r7, #20]
 8011aec:	f7ff f8de 	bl	8010cac <tcp_oos_insert_segment>
                }
                break;
 8011af0:	e139      	b.n	8011d66 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d117      	bne.n	8011b28 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011af8:	4b2e      	ldr	r3, [pc, #184]	; (8011bb4 <tcp_receive+0xd00>)
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	1ad3      	subs	r3, r2, r3
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	da57      	bge.n	8011bb8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b08:	4829      	ldr	r0, [pc, #164]	; (8011bb0 <tcp_receive+0xcfc>)
 8011b0a:	f7fd fab3 	bl	800f074 <tcp_seg_copy>
 8011b0e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f000 8129 	beq.w	8011d6a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	69ba      	ldr	r2, [r7, #24]
 8011b1c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b20:	69b8      	ldr	r0, [r7, #24]
 8011b22:	f7ff f8c3 	bl	8010cac <tcp_oos_insert_segment>
                  }
                  break;
 8011b26:	e120      	b.n	8011d6a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011b28:	4b22      	ldr	r3, [pc, #136]	; (8011bb4 <tcp_receive+0xd00>)
 8011b2a:	681a      	ldr	r2, [r3, #0]
 8011b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b2e:	68db      	ldr	r3, [r3, #12]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	3b01      	subs	r3, #1
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	db3e      	blt.n	8011bb8 <tcp_receive+0xd04>
 8011b3a:	4b1e      	ldr	r3, [pc, #120]	; (8011bb4 <tcp_receive+0xd00>)
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b40:	68db      	ldr	r3, [r3, #12]
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	1ad3      	subs	r3, r2, r3
 8011b46:	3301      	adds	r3, #1
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	dc35      	bgt.n	8011bb8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b4c:	4818      	ldr	r0, [pc, #96]	; (8011bb0 <tcp_receive+0xcfc>)
 8011b4e:	f7fd fa91 	bl	800f074 <tcp_seg_copy>
 8011b52:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	f000 8109 	beq.w	8011d6e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b64:	8912      	ldrh	r2, [r2, #8]
 8011b66:	441a      	add	r2, r3
 8011b68:	4b12      	ldr	r3, [pc, #72]	; (8011bb4 <tcp_receive+0xd00>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	1ad3      	subs	r3, r2, r3
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	dd12      	ble.n	8011b98 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011b72:	4b10      	ldr	r3, [pc, #64]	; (8011bb4 <tcp_receive+0xd00>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	1ad3      	subs	r3, r2, r3
 8011b82:	b29a      	uxth	r2, r3
 8011b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b86:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b8a:	685a      	ldr	r2, [r3, #4]
 8011b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b8e:	891b      	ldrh	r3, [r3, #8]
 8011b90:	4619      	mov	r1, r3
 8011b92:	4610      	mov	r0, r2
 8011b94:	f7fb fa72 	bl	800d07c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9a:	69fa      	ldr	r2, [r7, #28]
 8011b9c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011b9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ba0:	69f8      	ldr	r0, [r7, #28]
 8011ba2:	f7ff f883 	bl	8010cac <tcp_oos_insert_segment>
                  }
                  break;
 8011ba6:	e0e2      	b.n	8011d6e <tcp_receive+0xeba>
 8011ba8:	200214d0 	.word	0x200214d0
 8011bac:	200214cd 	.word	0x200214cd
 8011bb0:	200214a0 	.word	0x200214a0
 8011bb4:	200214c0 	.word	0x200214c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bba:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	f040 80c6 	bne.w	8011d52 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011bc6:	4b80      	ldr	r3, [pc, #512]	; (8011dc8 <tcp_receive+0xf14>)
 8011bc8:	681a      	ldr	r2, [r3, #0]
 8011bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	685b      	ldr	r3, [r3, #4]
 8011bd0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	f340 80bd 	ble.w	8011d52 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	899b      	ldrh	r3, [r3, #12]
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7f9 f843 	bl	800ac6c <lwip_htons>
 8011be6:	4603      	mov	r3, r0
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	f003 0301 	and.w	r3, r3, #1
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f040 80bf 	bne.w	8011d72 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011bf4:	4875      	ldr	r0, [pc, #468]	; (8011dcc <tcp_receive+0xf18>)
 8011bf6:	f7fd fa3d 	bl	800f074 <tcp_seg_copy>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	f000 80b6 	beq.w	8011d76 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0c:	68db      	ldr	r3, [r3, #12]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c12:	8912      	ldrh	r2, [r2, #8]
 8011c14:	441a      	add	r2, r3
 8011c16:	4b6c      	ldr	r3, [pc, #432]	; (8011dc8 <tcp_receive+0xf14>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	1ad3      	subs	r3, r2, r3
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	dd12      	ble.n	8011c46 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011c20:	4b69      	ldr	r3, [pc, #420]	; (8011dc8 <tcp_receive+0xf14>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	685b      	ldr	r3, [r3, #4]
 8011c2c:	b29b      	uxth	r3, r3
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c34:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c38:	685a      	ldr	r2, [r3, #4]
 8011c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3c:	891b      	ldrh	r3, [r3, #8]
 8011c3e:	4619      	mov	r1, r3
 8011c40:	4610      	mov	r0, r2
 8011c42:	f7fb fa1b 	bl	800d07c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011c46:	4b62      	ldr	r3, [pc, #392]	; (8011dd0 <tcp_receive+0xf1c>)
 8011c48:	881b      	ldrh	r3, [r3, #0]
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	4b5e      	ldr	r3, [pc, #376]	; (8011dc8 <tcp_receive+0xf14>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	441a      	add	r2, r3
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c56:	6879      	ldr	r1, [r7, #4]
 8011c58:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011c5a:	440b      	add	r3, r1
 8011c5c:	1ad3      	subs	r3, r2, r3
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	f340 8089 	ble.w	8011d76 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	899b      	ldrh	r3, [r3, #12]
 8011c6c:	b29b      	uxth	r3, r3
 8011c6e:	4618      	mov	r0, r3
 8011c70:	f7f8 fffc 	bl	800ac6c <lwip_htons>
 8011c74:	4603      	mov	r3, r0
 8011c76:	b2db      	uxtb	r3, r3
 8011c78:	f003 0301 	and.w	r3, r3, #1
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d022      	beq.n	8011cc6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	68db      	ldr	r3, [r3, #12]
 8011c86:	899b      	ldrh	r3, [r3, #12]
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	b21b      	sxth	r3, r3
 8011c8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011c90:	b21c      	sxth	r4, r3
 8011c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	899b      	ldrh	r3, [r3, #12]
 8011c9a:	b29b      	uxth	r3, r3
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7f8 ffe5 	bl	800ac6c <lwip_htons>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011cac:	b29b      	uxth	r3, r3
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7f8 ffdc 	bl	800ac6c <lwip_htons>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	b21b      	sxth	r3, r3
 8011cb8:	4323      	orrs	r3, r4
 8011cba:	b21a      	sxth	r2, r3
 8011cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	b292      	uxth	r2, r2
 8011cc4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cca:	b29a      	uxth	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cd0:	4413      	add	r3, r2
 8011cd2:	b299      	uxth	r1, r3
 8011cd4:	4b3c      	ldr	r3, [pc, #240]	; (8011dc8 <tcp_receive+0xf14>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	1a8a      	subs	r2, r1, r2
 8011ce0:	b292      	uxth	r2, r2
 8011ce2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	685a      	ldr	r2, [r3, #4]
 8011cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	891b      	ldrh	r3, [r3, #8]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	4610      	mov	r0, r2
 8011cf4:	f7fb f9c2 	bl	800d07c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	891c      	ldrh	r4, [r3, #8]
 8011cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	899b      	ldrh	r3, [r3, #12]
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7f8 ffaf 	bl	800ac6c <lwip_htons>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	b2db      	uxtb	r3, r3
 8011d12:	f003 0303 	and.w	r3, r3, #3
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d001      	beq.n	8011d1e <tcp_receive+0xe6a>
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	e000      	b.n	8011d20 <tcp_receive+0xe6c>
 8011d1e:	2300      	movs	r3, #0
 8011d20:	4423      	add	r3, r4
 8011d22:	b29a      	uxth	r2, r3
 8011d24:	4b2a      	ldr	r3, [pc, #168]	; (8011dd0 <tcp_receive+0xf1c>)
 8011d26:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011d28:	4b29      	ldr	r3, [pc, #164]	; (8011dd0 <tcp_receive+0xf1c>)
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	4b26      	ldr	r3, [pc, #152]	; (8011dc8 <tcp_receive+0xf14>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	441a      	add	r2, r3
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d38:	6879      	ldr	r1, [r7, #4]
 8011d3a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d3c:	440b      	add	r3, r1
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	d019      	beq.n	8011d76 <tcp_receive+0xec2>
 8011d42:	4b24      	ldr	r3, [pc, #144]	; (8011dd4 <tcp_receive+0xf20>)
 8011d44:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011d48:	4923      	ldr	r1, [pc, #140]	; (8011dd8 <tcp_receive+0xf24>)
 8011d4a:	4824      	ldr	r0, [pc, #144]	; (8011ddc <tcp_receive+0xf28>)
 8011d4c:	f008 faf0 	bl	801a330 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011d50:	e011      	b.n	8011d76 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	f47f aea4 	bne.w	8011aa8 <tcp_receive+0xbf4>
 8011d60:	e00a      	b.n	8011d78 <tcp_receive+0xec4>
                break;
 8011d62:	bf00      	nop
 8011d64:	e008      	b.n	8011d78 <tcp_receive+0xec4>
                break;
 8011d66:	bf00      	nop
 8011d68:	e006      	b.n	8011d78 <tcp_receive+0xec4>
                  break;
 8011d6a:	bf00      	nop
 8011d6c:	e004      	b.n	8011d78 <tcp_receive+0xec4>
                  break;
 8011d6e:	bf00      	nop
 8011d70:	e002      	b.n	8011d78 <tcp_receive+0xec4>
                  break;
 8011d72:	bf00      	nop
 8011d74:	e000      	b.n	8011d78 <tcp_receive+0xec4>
                break;
 8011d76:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f001 fe8b 	bl	8013a94 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011d7e:	e003      	b.n	8011d88 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f001 fe87 	bl	8013a94 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011d86:	e01a      	b.n	8011dbe <tcp_receive+0xf0a>
 8011d88:	e019      	b.n	8011dbe <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011d8a:	4b0f      	ldr	r3, [pc, #60]	; (8011dc8 <tcp_receive+0xf14>)
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d92:	1ad3      	subs	r3, r2, r3
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	db0a      	blt.n	8011dae <tcp_receive+0xefa>
 8011d98:	4b0b      	ldr	r3, [pc, #44]	; (8011dc8 <tcp_receive+0xf14>)
 8011d9a:	681a      	ldr	r2, [r3, #0]
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011da0:	6879      	ldr	r1, [r7, #4]
 8011da2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011da4:	440b      	add	r3, r1
 8011da6:	1ad3      	subs	r3, r2, r3
 8011da8:	3301      	adds	r3, #1
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	dd07      	ble.n	8011dbe <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	8b5b      	ldrh	r3, [r3, #26]
 8011db2:	f043 0302 	orr.w	r3, r3, #2
 8011db6:	b29a      	uxth	r2, r3
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011dbc:	e7ff      	b.n	8011dbe <tcp_receive+0xf0a>
 8011dbe:	bf00      	nop
 8011dc0:	3750      	adds	r7, #80	; 0x50
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	200214c0 	.word	0x200214c0
 8011dcc:	200214a0 	.word	0x200214a0
 8011dd0:	200214ca 	.word	0x200214ca
 8011dd4:	0802075c 	.word	0x0802075c
 8011dd8:	08020b04 	.word	0x08020b04
 8011ddc:	080207a8 	.word	0x080207a8

08011de0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011de0:	b480      	push	{r7}
 8011de2:	b083      	sub	sp, #12
 8011de4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011de6:	4b15      	ldr	r3, [pc, #84]	; (8011e3c <tcp_get_next_optbyte+0x5c>)
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	1c5a      	adds	r2, r3, #1
 8011dec:	b291      	uxth	r1, r2
 8011dee:	4a13      	ldr	r2, [pc, #76]	; (8011e3c <tcp_get_next_optbyte+0x5c>)
 8011df0:	8011      	strh	r1, [r2, #0]
 8011df2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011df4:	4b12      	ldr	r3, [pc, #72]	; (8011e40 <tcp_get_next_optbyte+0x60>)
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d004      	beq.n	8011e06 <tcp_get_next_optbyte+0x26>
 8011dfc:	4b11      	ldr	r3, [pc, #68]	; (8011e44 <tcp_get_next_optbyte+0x64>)
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	88fa      	ldrh	r2, [r7, #6]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d208      	bcs.n	8011e18 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011e06:	4b10      	ldr	r3, [pc, #64]	; (8011e48 <tcp_get_next_optbyte+0x68>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	3314      	adds	r3, #20
 8011e0c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011e0e:	88fb      	ldrh	r3, [r7, #6]
 8011e10:	683a      	ldr	r2, [r7, #0]
 8011e12:	4413      	add	r3, r2
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	e00b      	b.n	8011e30 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011e18:	88fb      	ldrh	r3, [r7, #6]
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	4b09      	ldr	r3, [pc, #36]	; (8011e44 <tcp_get_next_optbyte+0x64>)
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	1ad3      	subs	r3, r2, r3
 8011e24:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011e26:	4b06      	ldr	r3, [pc, #24]	; (8011e40 <tcp_get_next_optbyte+0x60>)
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	797b      	ldrb	r3, [r7, #5]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	370c      	adds	r7, #12
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr
 8011e3c:	200214bc 	.word	0x200214bc
 8011e40:	200214b8 	.word	0x200214b8
 8011e44:	200214b6 	.word	0x200214b6
 8011e48:	200214b0 	.word	0x200214b0

08011e4c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d106      	bne.n	8011e68 <tcp_parseopt+0x1c>
 8011e5a:	4b32      	ldr	r3, [pc, #200]	; (8011f24 <tcp_parseopt+0xd8>)
 8011e5c:	f240 727d 	movw	r2, #1917	; 0x77d
 8011e60:	4931      	ldr	r1, [pc, #196]	; (8011f28 <tcp_parseopt+0xdc>)
 8011e62:	4832      	ldr	r0, [pc, #200]	; (8011f2c <tcp_parseopt+0xe0>)
 8011e64:	f008 fa64 	bl	801a330 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011e68:	4b31      	ldr	r3, [pc, #196]	; (8011f30 <tcp_parseopt+0xe4>)
 8011e6a:	881b      	ldrh	r3, [r3, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d055      	beq.n	8011f1c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011e70:	4b30      	ldr	r3, [pc, #192]	; (8011f34 <tcp_parseopt+0xe8>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	801a      	strh	r2, [r3, #0]
 8011e76:	e045      	b.n	8011f04 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011e78:	f7ff ffb2 	bl	8011de0 <tcp_get_next_optbyte>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011e80:	7bfb      	ldrb	r3, [r7, #15]
 8011e82:	2b02      	cmp	r3, #2
 8011e84:	d006      	beq.n	8011e94 <tcp_parseopt+0x48>
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	dc2b      	bgt.n	8011ee2 <tcp_parseopt+0x96>
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d041      	beq.n	8011f12 <tcp_parseopt+0xc6>
 8011e8e:	2b01      	cmp	r3, #1
 8011e90:	d127      	bne.n	8011ee2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011e92:	e037      	b.n	8011f04 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011e94:	f7ff ffa4 	bl	8011de0 <tcp_get_next_optbyte>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b04      	cmp	r3, #4
 8011e9c:	d13b      	bne.n	8011f16 <tcp_parseopt+0xca>
 8011e9e:	4b25      	ldr	r3, [pc, #148]	; (8011f34 <tcp_parseopt+0xe8>)
 8011ea0:	881b      	ldrh	r3, [r3, #0]
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	4a22      	ldr	r2, [pc, #136]	; (8011f30 <tcp_parseopt+0xe4>)
 8011ea6:	8812      	ldrh	r2, [r2, #0]
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	da34      	bge.n	8011f16 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011eac:	f7ff ff98 	bl	8011de0 <tcp_get_next_optbyte>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	021b      	lsls	r3, r3, #8
 8011eb6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011eb8:	f7ff ff92 	bl	8011de0 <tcp_get_next_optbyte>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	b29a      	uxth	r2, r3
 8011ec0:	89bb      	ldrh	r3, [r7, #12]
 8011ec2:	4313      	orrs	r3, r2
 8011ec4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011ec6:	89bb      	ldrh	r3, [r7, #12]
 8011ec8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011ecc:	d804      	bhi.n	8011ed8 <tcp_parseopt+0x8c>
 8011ece:	89bb      	ldrh	r3, [r7, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <tcp_parseopt+0x8c>
 8011ed4:	89ba      	ldrh	r2, [r7, #12]
 8011ed6:	e001      	b.n	8011edc <tcp_parseopt+0x90>
 8011ed8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ee0:	e010      	b.n	8011f04 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011ee2:	f7ff ff7d 	bl	8011de0 <tcp_get_next_optbyte>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011eea:	7afb      	ldrb	r3, [r7, #11]
 8011eec:	2b01      	cmp	r3, #1
 8011eee:	d914      	bls.n	8011f1a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ef0:	7afb      	ldrb	r3, [r7, #11]
 8011ef2:	b29a      	uxth	r2, r3
 8011ef4:	4b0f      	ldr	r3, [pc, #60]	; (8011f34 <tcp_parseopt+0xe8>)
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	4413      	add	r3, r2
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	3b02      	subs	r3, #2
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	4b0c      	ldr	r3, [pc, #48]	; (8011f34 <tcp_parseopt+0xe8>)
 8011f02:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f04:	4b0b      	ldr	r3, [pc, #44]	; (8011f34 <tcp_parseopt+0xe8>)
 8011f06:	881a      	ldrh	r2, [r3, #0]
 8011f08:	4b09      	ldr	r3, [pc, #36]	; (8011f30 <tcp_parseopt+0xe4>)
 8011f0a:	881b      	ldrh	r3, [r3, #0]
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d3b3      	bcc.n	8011e78 <tcp_parseopt+0x2c>
 8011f10:	e004      	b.n	8011f1c <tcp_parseopt+0xd0>
          return;
 8011f12:	bf00      	nop
 8011f14:	e002      	b.n	8011f1c <tcp_parseopt+0xd0>
            return;
 8011f16:	bf00      	nop
 8011f18:	e000      	b.n	8011f1c <tcp_parseopt+0xd0>
            return;
 8011f1a:	bf00      	nop
      }
    }
  }
}
 8011f1c:	3710      	adds	r7, #16
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	0802075c 	.word	0x0802075c
 8011f28:	08020bc0 	.word	0x08020bc0
 8011f2c:	080207a8 	.word	0x080207a8
 8011f30:	200214b4 	.word	0x200214b4
 8011f34:	200214bc 	.word	0x200214bc

08011f38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011f38:	b480      	push	{r7}
 8011f3a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011f3c:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <tcp_trigger_input_pcb_close+0x1c>)
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	f043 0310 	orr.w	r3, r3, #16
 8011f44:	b2da      	uxtb	r2, r3
 8011f46:	4b03      	ldr	r3, [pc, #12]	; (8011f54 <tcp_trigger_input_pcb_close+0x1c>)
 8011f48:	701a      	strb	r2, [r3, #0]
}
 8011f4a:	bf00      	nop
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f52:	4770      	bx	lr
 8011f54:	200214cd 	.word	0x200214cd

08011f58 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d00a      	beq.n	8011f80 <tcp_route+0x28>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	7a1b      	ldrb	r3, [r3, #8]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d006      	beq.n	8011f80 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	7a1b      	ldrb	r3, [r3, #8]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7fa fe78 	bl	800cc6c <netif_get_by_index>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	e003      	b.n	8011f88 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f005 fd57 	bl	8017a34 <ip4_route>
 8011f86:	4603      	mov	r3, r0
  }
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011f90:	b590      	push	{r4, r7, lr}
 8011f92:	b087      	sub	sp, #28
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60f8      	str	r0, [r7, #12]
 8011f98:	60b9      	str	r1, [r7, #8]
 8011f9a:	603b      	str	r3, [r7, #0]
 8011f9c:	4613      	mov	r3, r2
 8011f9e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d105      	bne.n	8011fb2 <tcp_create_segment+0x22>
 8011fa6:	4b44      	ldr	r3, [pc, #272]	; (80120b8 <tcp_create_segment+0x128>)
 8011fa8:	22a3      	movs	r2, #163	; 0xa3
 8011faa:	4944      	ldr	r1, [pc, #272]	; (80120bc <tcp_create_segment+0x12c>)
 8011fac:	4844      	ldr	r0, [pc, #272]	; (80120c0 <tcp_create_segment+0x130>)
 8011fae:	f008 f9bf 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d105      	bne.n	8011fc4 <tcp_create_segment+0x34>
 8011fb8:	4b3f      	ldr	r3, [pc, #252]	; (80120b8 <tcp_create_segment+0x128>)
 8011fba:	22a4      	movs	r2, #164	; 0xa4
 8011fbc:	4941      	ldr	r1, [pc, #260]	; (80120c4 <tcp_create_segment+0x134>)
 8011fbe:	4840      	ldr	r0, [pc, #256]	; (80120c0 <tcp_create_segment+0x130>)
 8011fc0:	f008 f9b6 	bl	801a330 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011fc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	b2db      	uxtb	r3, r3
 8011fcc:	f003 0304 	and.w	r3, r3, #4
 8011fd0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011fd2:	2003      	movs	r0, #3
 8011fd4:	f7fa fad6 	bl	800c584 <memp_malloc>
 8011fd8:	6138      	str	r0, [r7, #16]
 8011fda:	693b      	ldr	r3, [r7, #16]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d104      	bne.n	8011fea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011fe0:	68b8      	ldr	r0, [r7, #8]
 8011fe2:	f7fb f9d1 	bl	800d388 <pbuf_free>
    return NULL;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	e061      	b.n	80120ae <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011ff0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011ff8:	693b      	ldr	r3, [r7, #16]
 8011ffa:	68ba      	ldr	r2, [r7, #8]
 8011ffc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	891a      	ldrh	r2, [r3, #8]
 8012002:	7dfb      	ldrb	r3, [r7, #23]
 8012004:	b29b      	uxth	r3, r3
 8012006:	429a      	cmp	r2, r3
 8012008:	d205      	bcs.n	8012016 <tcp_create_segment+0x86>
 801200a:	4b2b      	ldr	r3, [pc, #172]	; (80120b8 <tcp_create_segment+0x128>)
 801200c:	22b0      	movs	r2, #176	; 0xb0
 801200e:	492e      	ldr	r1, [pc, #184]	; (80120c8 <tcp_create_segment+0x138>)
 8012010:	482b      	ldr	r0, [pc, #172]	; (80120c0 <tcp_create_segment+0x130>)
 8012012:	f008 f98d 	bl	801a330 <iprintf>
  seg->len = p->tot_len - optlen;
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	891a      	ldrh	r2, [r3, #8]
 801201a:	7dfb      	ldrb	r3, [r7, #23]
 801201c:	b29b      	uxth	r3, r3
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	b29a      	uxth	r2, r3
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012026:	2114      	movs	r1, #20
 8012028:	68b8      	ldr	r0, [r7, #8]
 801202a:	f7fb f917 	bl	800d25c <pbuf_add_header>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	d004      	beq.n	801203e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012034:	6938      	ldr	r0, [r7, #16]
 8012036:	f7fd f804 	bl	800f042 <tcp_seg_free>
    return NULL;
 801203a:	2300      	movs	r3, #0
 801203c:	e037      	b.n	80120ae <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	685a      	ldr	r2, [r3, #4]
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	8ada      	ldrh	r2, [r3, #22]
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	68dc      	ldr	r4, [r3, #12]
 8012050:	4610      	mov	r0, r2
 8012052:	f7f8 fe0b 	bl	800ac6c <lwip_htons>
 8012056:	4603      	mov	r3, r0
 8012058:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	8b1a      	ldrh	r2, [r3, #24]
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	68dc      	ldr	r4, [r3, #12]
 8012062:	4610      	mov	r0, r2
 8012064:	f7f8 fe02 	bl	800ac6c <lwip_htons>
 8012068:	4603      	mov	r3, r0
 801206a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801206c:	693b      	ldr	r3, [r7, #16]
 801206e:	68dc      	ldr	r4, [r3, #12]
 8012070:	6838      	ldr	r0, [r7, #0]
 8012072:	f7f8 fe10 	bl	800ac96 <lwip_htonl>
 8012076:	4603      	mov	r3, r0
 8012078:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801207a:	7dfb      	ldrb	r3, [r7, #23]
 801207c:	089b      	lsrs	r3, r3, #2
 801207e:	b2db      	uxtb	r3, r3
 8012080:	b29b      	uxth	r3, r3
 8012082:	3305      	adds	r3, #5
 8012084:	b29b      	uxth	r3, r3
 8012086:	031b      	lsls	r3, r3, #12
 8012088:	b29a      	uxth	r2, r3
 801208a:	79fb      	ldrb	r3, [r7, #7]
 801208c:	b29b      	uxth	r3, r3
 801208e:	4313      	orrs	r3, r2
 8012090:	b29a      	uxth	r2, r3
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	68dc      	ldr	r4, [r3, #12]
 8012096:	4610      	mov	r0, r2
 8012098:	f7f8 fde8 	bl	800ac6c <lwip_htons>
 801209c:	4603      	mov	r3, r0
 801209e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	2200      	movs	r2, #0
 80120a6:	749a      	strb	r2, [r3, #18]
 80120a8:	2200      	movs	r2, #0
 80120aa:	74da      	strb	r2, [r3, #19]
  return seg;
 80120ac:	693b      	ldr	r3, [r7, #16]
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	371c      	adds	r7, #28
 80120b2:	46bd      	mov	sp, r7
 80120b4:	bd90      	pop	{r4, r7, pc}
 80120b6:	bf00      	nop
 80120b8:	08020bdc 	.word	0x08020bdc
 80120bc:	08020c10 	.word	0x08020c10
 80120c0:	08020c30 	.word	0x08020c30
 80120c4:	08020c58 	.word	0x08020c58
 80120c8:	08020c7c 	.word	0x08020c7c

080120cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b086      	sub	sp, #24
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	607b      	str	r3, [r7, #4]
 80120d4:	4603      	mov	r3, r0
 80120d6:	73fb      	strb	r3, [r7, #15]
 80120d8:	460b      	mov	r3, r1
 80120da:	81bb      	strh	r3, [r7, #12]
 80120dc:	4613      	mov	r3, r2
 80120de:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80120e0:	89bb      	ldrh	r3, [r7, #12]
 80120e2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d105      	bne.n	80120f6 <tcp_pbuf_prealloc+0x2a>
 80120ea:	4b30      	ldr	r3, [pc, #192]	; (80121ac <tcp_pbuf_prealloc+0xe0>)
 80120ec:	22e8      	movs	r2, #232	; 0xe8
 80120ee:	4930      	ldr	r1, [pc, #192]	; (80121b0 <tcp_pbuf_prealloc+0xe4>)
 80120f0:	4830      	ldr	r0, [pc, #192]	; (80121b4 <tcp_pbuf_prealloc+0xe8>)
 80120f2:	f008 f91d 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80120f6:	6a3b      	ldr	r3, [r7, #32]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d105      	bne.n	8012108 <tcp_pbuf_prealloc+0x3c>
 80120fc:	4b2b      	ldr	r3, [pc, #172]	; (80121ac <tcp_pbuf_prealloc+0xe0>)
 80120fe:	22e9      	movs	r2, #233	; 0xe9
 8012100:	492d      	ldr	r1, [pc, #180]	; (80121b8 <tcp_pbuf_prealloc+0xec>)
 8012102:	482c      	ldr	r0, [pc, #176]	; (80121b4 <tcp_pbuf_prealloc+0xe8>)
 8012104:	f008 f914 	bl	801a330 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012108:	89ba      	ldrh	r2, [r7, #12]
 801210a:	897b      	ldrh	r3, [r7, #10]
 801210c:	429a      	cmp	r2, r3
 801210e:	d221      	bcs.n	8012154 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012110:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012114:	f003 0302 	and.w	r3, r3, #2
 8012118:	2b00      	cmp	r3, #0
 801211a:	d111      	bne.n	8012140 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801211c:	6a3b      	ldr	r3, [r7, #32]
 801211e:	8b5b      	ldrh	r3, [r3, #26]
 8012120:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012124:	2b00      	cmp	r3, #0
 8012126:	d115      	bne.n	8012154 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012128:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801212c:	2b00      	cmp	r3, #0
 801212e:	d007      	beq.n	8012140 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012130:	6a3b      	ldr	r3, [r7, #32]
 8012132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012134:	2b00      	cmp	r3, #0
 8012136:	d103      	bne.n	8012140 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012138:	6a3b      	ldr	r3, [r7, #32]
 801213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801213c:	2b00      	cmp	r3, #0
 801213e:	d009      	beq.n	8012154 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012140:	89bb      	ldrh	r3, [r7, #12]
 8012142:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012146:	f023 0203 	bic.w	r2, r3, #3
 801214a:	897b      	ldrh	r3, [r7, #10]
 801214c:	4293      	cmp	r3, r2
 801214e:	bf28      	it	cs
 8012150:	4613      	movcs	r3, r2
 8012152:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012154:	8af9      	ldrh	r1, [r7, #22]
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	f44f 7220 	mov.w	r2, #640	; 0x280
 801215c:	4618      	mov	r0, r3
 801215e:	f7fa fe2f 	bl	800cdc0 <pbuf_alloc>
 8012162:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801216a:	2300      	movs	r3, #0
 801216c:	e019      	b.n	80121a2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d006      	beq.n	8012184 <tcp_pbuf_prealloc+0xb8>
 8012176:	4b0d      	ldr	r3, [pc, #52]	; (80121ac <tcp_pbuf_prealloc+0xe0>)
 8012178:	f240 120b 	movw	r2, #267	; 0x10b
 801217c:	490f      	ldr	r1, [pc, #60]	; (80121bc <tcp_pbuf_prealloc+0xf0>)
 801217e:	480d      	ldr	r0, [pc, #52]	; (80121b4 <tcp_pbuf_prealloc+0xe8>)
 8012180:	f008 f8d6 	bl	801a330 <iprintf>
  *oversize = p->len - length;
 8012184:	693b      	ldr	r3, [r7, #16]
 8012186:	895a      	ldrh	r2, [r3, #10]
 8012188:	89bb      	ldrh	r3, [r7, #12]
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012192:	693b      	ldr	r3, [r7, #16]
 8012194:	89ba      	ldrh	r2, [r7, #12]
 8012196:	811a      	strh	r2, [r3, #8]
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	891a      	ldrh	r2, [r3, #8]
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	815a      	strh	r2, [r3, #10]
  return p;
 80121a0:	693b      	ldr	r3, [r7, #16]
}
 80121a2:	4618      	mov	r0, r3
 80121a4:	3718      	adds	r7, #24
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
 80121aa:	bf00      	nop
 80121ac:	08020bdc 	.word	0x08020bdc
 80121b0:	08020c94 	.word	0x08020c94
 80121b4:	08020c30 	.word	0x08020c30
 80121b8:	08020cb8 	.word	0x08020cb8
 80121bc:	08020cd8 	.word	0x08020cd8

080121c0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	460b      	mov	r3, r1
 80121ca:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d106      	bne.n	80121e0 <tcp_write_checks+0x20>
 80121d2:	4b33      	ldr	r3, [pc, #204]	; (80122a0 <tcp_write_checks+0xe0>)
 80121d4:	f240 1233 	movw	r2, #307	; 0x133
 80121d8:	4932      	ldr	r1, [pc, #200]	; (80122a4 <tcp_write_checks+0xe4>)
 80121da:	4833      	ldr	r0, [pc, #204]	; (80122a8 <tcp_write_checks+0xe8>)
 80121dc:	f008 f8a8 	bl	801a330 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	7d1b      	ldrb	r3, [r3, #20]
 80121e4:	2b04      	cmp	r3, #4
 80121e6:	d00e      	beq.n	8012206 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80121ec:	2b07      	cmp	r3, #7
 80121ee:	d00a      	beq.n	8012206 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80121f4:	2b02      	cmp	r3, #2
 80121f6:	d006      	beq.n	8012206 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80121fc:	2b03      	cmp	r3, #3
 80121fe:	d002      	beq.n	8012206 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012200:	f06f 030a 	mvn.w	r3, #10
 8012204:	e048      	b.n	8012298 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012206:	887b      	ldrh	r3, [r7, #2]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d101      	bne.n	8012210 <tcp_write_checks+0x50>
    return ERR_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	e043      	b.n	8012298 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012216:	887a      	ldrh	r2, [r7, #2]
 8012218:	429a      	cmp	r2, r3
 801221a:	d909      	bls.n	8012230 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	8b5b      	ldrh	r3, [r3, #26]
 8012220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012224:	b29a      	uxth	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801222a:	f04f 33ff 	mov.w	r3, #4294967295
 801222e:	e033      	b.n	8012298 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012236:	2b08      	cmp	r3, #8
 8012238:	d909      	bls.n	801224e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	8b5b      	ldrh	r3, [r3, #26]
 801223e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012242:	b29a      	uxth	r2, r3
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012248:	f04f 33ff 	mov.w	r3, #4294967295
 801224c:	e024      	b.n	8012298 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00f      	beq.n	8012278 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801225c:	2b00      	cmp	r3, #0
 801225e:	d11a      	bne.n	8012296 <tcp_write_checks+0xd6>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012264:	2b00      	cmp	r3, #0
 8012266:	d116      	bne.n	8012296 <tcp_write_checks+0xd6>
 8012268:	4b0d      	ldr	r3, [pc, #52]	; (80122a0 <tcp_write_checks+0xe0>)
 801226a:	f240 1255 	movw	r2, #341	; 0x155
 801226e:	490f      	ldr	r1, [pc, #60]	; (80122ac <tcp_write_checks+0xec>)
 8012270:	480d      	ldr	r0, [pc, #52]	; (80122a8 <tcp_write_checks+0xe8>)
 8012272:	f008 f85d 	bl	801a330 <iprintf>
 8012276:	e00e      	b.n	8012296 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801227c:	2b00      	cmp	r3, #0
 801227e:	d103      	bne.n	8012288 <tcp_write_checks+0xc8>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012284:	2b00      	cmp	r3, #0
 8012286:	d006      	beq.n	8012296 <tcp_write_checks+0xd6>
 8012288:	4b05      	ldr	r3, [pc, #20]	; (80122a0 <tcp_write_checks+0xe0>)
 801228a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801228e:	4908      	ldr	r1, [pc, #32]	; (80122b0 <tcp_write_checks+0xf0>)
 8012290:	4805      	ldr	r0, [pc, #20]	; (80122a8 <tcp_write_checks+0xe8>)
 8012292:	f008 f84d 	bl	801a330 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012296:	2300      	movs	r3, #0
}
 8012298:	4618      	mov	r0, r3
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}
 80122a0:	08020bdc 	.word	0x08020bdc
 80122a4:	08020cec 	.word	0x08020cec
 80122a8:	08020c30 	.word	0x08020c30
 80122ac:	08020d0c 	.word	0x08020d0c
 80122b0:	08020d48 	.word	0x08020d48

080122b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80122b4:	b590      	push	{r4, r7, lr}
 80122b6:	b09b      	sub	sp, #108	; 0x6c
 80122b8:	af04      	add	r7, sp, #16
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	4611      	mov	r1, r2
 80122c0:	461a      	mov	r2, r3
 80122c2:	460b      	mov	r3, r1
 80122c4:	80fb      	strh	r3, [r7, #6]
 80122c6:	4613      	mov	r3, r2
 80122c8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80122ca:	2300      	movs	r3, #0
 80122cc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80122ce:	2300      	movs	r3, #0
 80122d0:	653b      	str	r3, [r7, #80]	; 0x50
 80122d2:	2300      	movs	r3, #0
 80122d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80122d6:	2300      	movs	r3, #0
 80122d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80122da:	2300      	movs	r3, #0
 80122dc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80122de:	2300      	movs	r3, #0
 80122e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80122e4:	2300      	movs	r3, #0
 80122e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80122ee:	2300      	movs	r3, #0
 80122f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d109      	bne.n	8012310 <tcp_write+0x5c>
 80122fc:	4ba4      	ldr	r3, [pc, #656]	; (8012590 <tcp_write+0x2dc>)
 80122fe:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012302:	49a4      	ldr	r1, [pc, #656]	; (8012594 <tcp_write+0x2e0>)
 8012304:	48a4      	ldr	r0, [pc, #656]	; (8012598 <tcp_write+0x2e4>)
 8012306:	f008 f813 	bl	801a330 <iprintf>
 801230a:	f06f 030f 	mvn.w	r3, #15
 801230e:	e32a      	b.n	8012966 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012316:	085b      	lsrs	r3, r3, #1
 8012318:	b29a      	uxth	r2, r3
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801231e:	4293      	cmp	r3, r2
 8012320:	bf28      	it	cs
 8012322:	4613      	movcs	r3, r2
 8012324:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012328:	2b00      	cmp	r3, #0
 801232a:	d102      	bne.n	8012332 <tcp_write+0x7e>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012330:	e000      	b.n	8012334 <tcp_write+0x80>
 8012332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012334:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d109      	bne.n	8012350 <tcp_write+0x9c>
 801233c:	4b94      	ldr	r3, [pc, #592]	; (8012590 <tcp_write+0x2dc>)
 801233e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8012342:	4996      	ldr	r1, [pc, #600]	; (801259c <tcp_write+0x2e8>)
 8012344:	4894      	ldr	r0, [pc, #592]	; (8012598 <tcp_write+0x2e4>)
 8012346:	f007 fff3 	bl	801a330 <iprintf>
 801234a:	f06f 030f 	mvn.w	r3, #15
 801234e:	e30a      	b.n	8012966 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012350:	88fb      	ldrh	r3, [r7, #6]
 8012352:	4619      	mov	r1, r3
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f7ff ff33 	bl	80121c0 <tcp_write_checks>
 801235a:	4603      	mov	r3, r0
 801235c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012360:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012364:	2b00      	cmp	r3, #0
 8012366:	d002      	beq.n	801236e <tcp_write+0xba>
    return err;
 8012368:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801236c:	e2fb      	b.n	8012966 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012374:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012378:	2300      	movs	r3, #0
 801237a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012382:	2b00      	cmp	r3, #0
 8012384:	f000 80f6 	beq.w	8012574 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801238c:	653b      	str	r3, [r7, #80]	; 0x50
 801238e:	e002      	b.n	8012396 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8012390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d1f8      	bne.n	8012390 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801239e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a0:	7a9b      	ldrb	r3, [r3, #10]
 80123a2:	009b      	lsls	r3, r3, #2
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	f003 0304 	and.w	r3, r3, #4
 80123aa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80123ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b0:	891b      	ldrh	r3, [r3, #8]
 80123b2:	4619      	mov	r1, r3
 80123b4:	8c3b      	ldrh	r3, [r7, #32]
 80123b6:	440b      	add	r3, r1
 80123b8:	429a      	cmp	r2, r3
 80123ba:	da06      	bge.n	80123ca <tcp_write+0x116>
 80123bc:	4b74      	ldr	r3, [pc, #464]	; (8012590 <tcp_write+0x2dc>)
 80123be:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80123c2:	4977      	ldr	r1, [pc, #476]	; (80125a0 <tcp_write+0x2ec>)
 80123c4:	4874      	ldr	r0, [pc, #464]	; (8012598 <tcp_write+0x2e4>)
 80123c6:	f007 ffb3 	bl	801a330 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80123ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123cc:	891a      	ldrh	r2, [r3, #8]
 80123ce:	8c3b      	ldrh	r3, [r7, #32]
 80123d0:	4413      	add	r3, r2
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80123e0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80123e2:	8a7b      	ldrh	r3, [r7, #18]
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d026      	beq.n	8012436 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80123e8:	8a7b      	ldrh	r3, [r7, #18]
 80123ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d206      	bcs.n	80123fe <tcp_write+0x14a>
 80123f0:	4b67      	ldr	r3, [pc, #412]	; (8012590 <tcp_write+0x2dc>)
 80123f2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80123f6:	496b      	ldr	r1, [pc, #428]	; (80125a4 <tcp_write+0x2f0>)
 80123f8:	4867      	ldr	r0, [pc, #412]	; (8012598 <tcp_write+0x2e4>)
 80123fa:	f007 ff99 	bl	801a330 <iprintf>
      seg = last_unsent;
 80123fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012400:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012402:	8a7b      	ldrh	r3, [r7, #18]
 8012404:	88fa      	ldrh	r2, [r7, #6]
 8012406:	4293      	cmp	r3, r2
 8012408:	bf28      	it	cs
 801240a:	4613      	movcs	r3, r2
 801240c:	b29b      	uxth	r3, r3
 801240e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012410:	4293      	cmp	r3, r2
 8012412:	bf28      	it	cs
 8012414:	4613      	movcs	r3, r2
 8012416:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8012418:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801241c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801241e:	4413      	add	r3, r2
 8012420:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8012424:	8a7a      	ldrh	r2, [r7, #18]
 8012426:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012428:	1ad3      	subs	r3, r2, r3
 801242a:	b29b      	uxth	r3, r3
 801242c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801242e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012430:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012432:	1ad3      	subs	r3, r2, r3
 8012434:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012436:	8a7b      	ldrh	r3, [r7, #18]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d00b      	beq.n	8012454 <tcp_write+0x1a0>
 801243c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012440:	88fb      	ldrh	r3, [r7, #6]
 8012442:	429a      	cmp	r2, r3
 8012444:	d006      	beq.n	8012454 <tcp_write+0x1a0>
 8012446:	4b52      	ldr	r3, [pc, #328]	; (8012590 <tcp_write+0x2dc>)
 8012448:	f44f 7200 	mov.w	r2, #512	; 0x200
 801244c:	4956      	ldr	r1, [pc, #344]	; (80125a8 <tcp_write+0x2f4>)
 801244e:	4852      	ldr	r0, [pc, #328]	; (8012598 <tcp_write+0x2e4>)
 8012450:	f007 ff6e 	bl	801a330 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012454:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012458:	88fb      	ldrh	r3, [r7, #6]
 801245a:	429a      	cmp	r2, r3
 801245c:	f080 8167 	bcs.w	801272e <tcp_write+0x47a>
 8012460:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012462:	2b00      	cmp	r3, #0
 8012464:	f000 8163 	beq.w	801272e <tcp_write+0x47a>
 8012468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801246a:	891b      	ldrh	r3, [r3, #8]
 801246c:	2b00      	cmp	r3, #0
 801246e:	f000 815e 	beq.w	801272e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012472:	88fa      	ldrh	r2, [r7, #6]
 8012474:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012478:	1ad2      	subs	r2, r2, r3
 801247a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801247c:	4293      	cmp	r3, r2
 801247e:	bfa8      	it	ge
 8012480:	4613      	movge	r3, r2
 8012482:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012486:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012488:	797b      	ldrb	r3, [r7, #5]
 801248a:	f003 0301 	and.w	r3, r3, #1
 801248e:	2b00      	cmp	r3, #0
 8012490:	d027      	beq.n	80124e2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8012492:	f107 0012 	add.w	r0, r7, #18
 8012496:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012498:	8bf9      	ldrh	r1, [r7, #30]
 801249a:	2301      	movs	r3, #1
 801249c:	9302      	str	r3, [sp, #8]
 801249e:	797b      	ldrb	r3, [r7, #5]
 80124a0:	9301      	str	r3, [sp, #4]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	9300      	str	r3, [sp, #0]
 80124a6:	4603      	mov	r3, r0
 80124a8:	2000      	movs	r0, #0
 80124aa:	f7ff fe0f 	bl	80120cc <tcp_pbuf_prealloc>
 80124ae:	6578      	str	r0, [r7, #84]	; 0x54
 80124b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	f000 8225 	beq.w	8012902 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80124b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124ba:	6858      	ldr	r0, [r3, #4]
 80124bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80124c0:	68ba      	ldr	r2, [r7, #8]
 80124c2:	4413      	add	r3, r2
 80124c4:	8bfa      	ldrh	r2, [r7, #30]
 80124c6:	4619      	mov	r1, r3
 80124c8:	f007 f888 	bl	80195dc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80124cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80124ce:	f7fa ffe9 	bl	800d4a4 <pbuf_clen>
 80124d2:	4603      	mov	r3, r0
 80124d4:	461a      	mov	r2, r3
 80124d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80124da:	4413      	add	r3, r2
 80124dc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80124e0:	e041      	b.n	8012566 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80124e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	637b      	str	r3, [r7, #52]	; 0x34
 80124e8:	e002      	b.n	80124f0 <tcp_write+0x23c>
 80124ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	637b      	str	r3, [r7, #52]	; 0x34
 80124f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d1f8      	bne.n	80124ea <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80124f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124fa:	7b1b      	ldrb	r3, [r3, #12]
 80124fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d115      	bne.n	8012530 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801250a:	8952      	ldrh	r2, [r2, #10]
 801250c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801250e:	68ba      	ldr	r2, [r7, #8]
 8012510:	429a      	cmp	r2, r3
 8012512:	d10d      	bne.n	8012530 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012518:	2b00      	cmp	r3, #0
 801251a:	d006      	beq.n	801252a <tcp_write+0x276>
 801251c:	4b1c      	ldr	r3, [pc, #112]	; (8012590 <tcp_write+0x2dc>)
 801251e:	f240 2231 	movw	r2, #561	; 0x231
 8012522:	4922      	ldr	r1, [pc, #136]	; (80125ac <tcp_write+0x2f8>)
 8012524:	481c      	ldr	r0, [pc, #112]	; (8012598 <tcp_write+0x2e4>)
 8012526:	f007 ff03 	bl	801a330 <iprintf>
          extendlen = seglen;
 801252a:	8bfb      	ldrh	r3, [r7, #30]
 801252c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801252e:	e01a      	b.n	8012566 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012530:	8bfb      	ldrh	r3, [r7, #30]
 8012532:	2201      	movs	r2, #1
 8012534:	4619      	mov	r1, r3
 8012536:	2000      	movs	r0, #0
 8012538:	f7fa fc42 	bl	800cdc0 <pbuf_alloc>
 801253c:	6578      	str	r0, [r7, #84]	; 0x54
 801253e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012540:	2b00      	cmp	r3, #0
 8012542:	f000 81e0 	beq.w	8012906 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801254a:	68ba      	ldr	r2, [r7, #8]
 801254c:	441a      	add	r2, r3
 801254e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012550:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012552:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012554:	f7fa ffa6 	bl	800d4a4 <pbuf_clen>
 8012558:	4603      	mov	r3, r0
 801255a:	461a      	mov	r2, r3
 801255c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012560:	4413      	add	r3, r2
 8012562:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012566:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801256a:	8bfb      	ldrh	r3, [r7, #30]
 801256c:	4413      	add	r3, r2
 801256e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012572:	e0dc      	b.n	801272e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801257a:	2b00      	cmp	r3, #0
 801257c:	f000 80d7 	beq.w	801272e <tcp_write+0x47a>
 8012580:	4b03      	ldr	r3, [pc, #12]	; (8012590 <tcp_write+0x2dc>)
 8012582:	f240 224a 	movw	r2, #586	; 0x24a
 8012586:	490a      	ldr	r1, [pc, #40]	; (80125b0 <tcp_write+0x2fc>)
 8012588:	4803      	ldr	r0, [pc, #12]	; (8012598 <tcp_write+0x2e4>)
 801258a:	f007 fed1 	bl	801a330 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801258e:	e0ce      	b.n	801272e <tcp_write+0x47a>
 8012590:	08020bdc 	.word	0x08020bdc
 8012594:	08020d7c 	.word	0x08020d7c
 8012598:	08020c30 	.word	0x08020c30
 801259c:	08020d94 	.word	0x08020d94
 80125a0:	08020dc8 	.word	0x08020dc8
 80125a4:	08020de0 	.word	0x08020de0
 80125a8:	08020e00 	.word	0x08020e00
 80125ac:	08020e20 	.word	0x08020e20
 80125b0:	08020e4c 	.word	0x08020e4c
    struct pbuf *p;
    u16_t left = len - pos;
 80125b4:	88fa      	ldrh	r2, [r7, #6]
 80125b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125ba:	1ad3      	subs	r3, r2, r3
 80125bc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80125be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80125ca:	8b7a      	ldrh	r2, [r7, #26]
 80125cc:	8bbb      	ldrh	r3, [r7, #28]
 80125ce:	4293      	cmp	r3, r2
 80125d0:	bf28      	it	cs
 80125d2:	4613      	movcs	r3, r2
 80125d4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80125d6:	797b      	ldrb	r3, [r7, #5]
 80125d8:	f003 0301 	and.w	r3, r3, #1
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d036      	beq.n	801264e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80125e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	8b3b      	ldrh	r3, [r7, #24]
 80125e8:	4413      	add	r3, r2
 80125ea:	b299      	uxth	r1, r3
 80125ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	bf0c      	ite	eq
 80125f2:	2301      	moveq	r3, #1
 80125f4:	2300      	movne	r3, #0
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	f107 0012 	add.w	r0, r7, #18
 80125fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80125fe:	9302      	str	r3, [sp, #8]
 8012600:	797b      	ldrb	r3, [r7, #5]
 8012602:	9301      	str	r3, [sp, #4]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	9300      	str	r3, [sp, #0]
 8012608:	4603      	mov	r3, r0
 801260a:	2036      	movs	r0, #54	; 0x36
 801260c:	f7ff fd5e 	bl	80120cc <tcp_pbuf_prealloc>
 8012610:	6338      	str	r0, [r7, #48]	; 0x30
 8012612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012614:	2b00      	cmp	r3, #0
 8012616:	f000 8178 	beq.w	801290a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801261a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261c:	895b      	ldrh	r3, [r3, #10]
 801261e:	8b3a      	ldrh	r2, [r7, #24]
 8012620:	429a      	cmp	r2, r3
 8012622:	d906      	bls.n	8012632 <tcp_write+0x37e>
 8012624:	4b8c      	ldr	r3, [pc, #560]	; (8012858 <tcp_write+0x5a4>)
 8012626:	f240 2266 	movw	r2, #614	; 0x266
 801262a:	498c      	ldr	r1, [pc, #560]	; (801285c <tcp_write+0x5a8>)
 801262c:	488c      	ldr	r0, [pc, #560]	; (8012860 <tcp_write+0x5ac>)
 801262e:	f007 fe7f 	bl	801a330 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012634:	685a      	ldr	r2, [r3, #4]
 8012636:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801263a:	18d0      	adds	r0, r2, r3
 801263c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012640:	68ba      	ldr	r2, [r7, #8]
 8012642:	4413      	add	r3, r2
 8012644:	8b3a      	ldrh	r2, [r7, #24]
 8012646:	4619      	mov	r1, r3
 8012648:	f006 ffc8 	bl	80195dc <memcpy>
 801264c:	e02f      	b.n	80126ae <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801264e:	8a7b      	ldrh	r3, [r7, #18]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d006      	beq.n	8012662 <tcp_write+0x3ae>
 8012654:	4b80      	ldr	r3, [pc, #512]	; (8012858 <tcp_write+0x5a4>)
 8012656:	f240 2271 	movw	r2, #625	; 0x271
 801265a:	4982      	ldr	r1, [pc, #520]	; (8012864 <tcp_write+0x5b0>)
 801265c:	4880      	ldr	r0, [pc, #512]	; (8012860 <tcp_write+0x5ac>)
 801265e:	f007 fe67 	bl	801a330 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012662:	8b3b      	ldrh	r3, [r7, #24]
 8012664:	2201      	movs	r2, #1
 8012666:	4619      	mov	r1, r3
 8012668:	2036      	movs	r0, #54	; 0x36
 801266a:	f7fa fba9 	bl	800cdc0 <pbuf_alloc>
 801266e:	6178      	str	r0, [r7, #20]
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	2b00      	cmp	r3, #0
 8012674:	f000 814b 	beq.w	801290e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801267c:	68ba      	ldr	r2, [r7, #8]
 801267e:	441a      	add	r2, r3
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012684:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012688:	b29b      	uxth	r3, r3
 801268a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801268e:	4619      	mov	r1, r3
 8012690:	2036      	movs	r0, #54	; 0x36
 8012692:	f7fa fb95 	bl	800cdc0 <pbuf_alloc>
 8012696:	6338      	str	r0, [r7, #48]	; 0x30
 8012698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269a:	2b00      	cmp	r3, #0
 801269c:	d103      	bne.n	80126a6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801269e:	6978      	ldr	r0, [r7, #20]
 80126a0:	f7fa fe72 	bl	800d388 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80126a4:	e136      	b.n	8012914 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80126a6:	6979      	ldr	r1, [r7, #20]
 80126a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126aa:	f7fa ff3b 	bl	800d524 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80126ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126b0:	f7fa fef8 	bl	800d4a4 <pbuf_clen>
 80126b4:	4603      	mov	r3, r0
 80126b6:	461a      	mov	r2, r3
 80126b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80126bc:	4413      	add	r3, r2
 80126be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80126c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80126c6:	2b09      	cmp	r3, #9
 80126c8:	d903      	bls.n	80126d2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80126ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126cc:	f7fa fe5c 	bl	800d388 <pbuf_free>
      goto memerr;
 80126d0:	e120      	b.n	8012914 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80126d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126da:	441a      	add	r2, r3
 80126dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126e0:	9300      	str	r3, [sp, #0]
 80126e2:	4613      	mov	r3, r2
 80126e4:	2200      	movs	r2, #0
 80126e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80126e8:	68f8      	ldr	r0, [r7, #12]
 80126ea:	f7ff fc51 	bl	8011f90 <tcp_create_segment>
 80126ee:	64f8      	str	r0, [r7, #76]	; 0x4c
 80126f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	f000 810d 	beq.w	8012912 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80126f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d102      	bne.n	8012704 <tcp_write+0x450>
      queue = seg;
 80126fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012700:	647b      	str	r3, [r7, #68]	; 0x44
 8012702:	e00c      	b.n	801271e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012706:	2b00      	cmp	r3, #0
 8012708:	d106      	bne.n	8012718 <tcp_write+0x464>
 801270a:	4b53      	ldr	r3, [pc, #332]	; (8012858 <tcp_write+0x5a4>)
 801270c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012710:	4955      	ldr	r1, [pc, #340]	; (8012868 <tcp_write+0x5b4>)
 8012712:	4853      	ldr	r0, [pc, #332]	; (8012860 <tcp_write+0x5ac>)
 8012714:	f007 fe0c 	bl	801a330 <iprintf>
      prev_seg->next = seg;
 8012718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801271a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801271c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012720:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012722:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012726:	8b3b      	ldrh	r3, [r7, #24]
 8012728:	4413      	add	r3, r2
 801272a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801272e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012732:	88fb      	ldrh	r3, [r7, #6]
 8012734:	429a      	cmp	r2, r3
 8012736:	f4ff af3d 	bcc.w	80125b4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801273a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801273c:	2b00      	cmp	r3, #0
 801273e:	d02c      	beq.n	801279a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012742:	685b      	ldr	r3, [r3, #4]
 8012744:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012746:	e01e      	b.n	8012786 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274a:	891a      	ldrh	r2, [r3, #8]
 801274c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801274e:	4413      	add	r3, r2
 8012750:	b29a      	uxth	r2, r3
 8012752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012754:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d110      	bne.n	8012780 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012764:	8952      	ldrh	r2, [r2, #10]
 8012766:	4413      	add	r3, r2
 8012768:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801276a:	68b9      	ldr	r1, [r7, #8]
 801276c:	4618      	mov	r0, r3
 801276e:	f006 ff35 	bl	80195dc <memcpy>
        p->len += oversize_used;
 8012772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012774:	895a      	ldrh	r2, [r3, #10]
 8012776:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012778:	4413      	add	r3, r2
 801277a:	b29a      	uxth	r2, r3
 801277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012788:	2b00      	cmp	r3, #0
 801278a:	d1dd      	bne.n	8012748 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801278c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801278e:	891a      	ldrh	r2, [r3, #8]
 8012790:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012792:	4413      	add	r3, r2
 8012794:	b29a      	uxth	r2, r3
 8012796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012798:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801279a:	8a7a      	ldrh	r2, [r7, #18]
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80127a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d018      	beq.n	80127da <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80127a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d106      	bne.n	80127bc <tcp_write+0x508>
 80127ae:	4b2a      	ldr	r3, [pc, #168]	; (8012858 <tcp_write+0x5a4>)
 80127b0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80127b4:	492d      	ldr	r1, [pc, #180]	; (801286c <tcp_write+0x5b8>)
 80127b6:	482a      	ldr	r0, [pc, #168]	; (8012860 <tcp_write+0x5ac>)
 80127b8:	f007 fdba 	bl	801a330 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80127bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80127c2:	4618      	mov	r0, r3
 80127c4:	f7fa feae 	bl	800d524 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80127c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ca:	891a      	ldrh	r2, [r3, #8]
 80127cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80127ce:	891b      	ldrh	r3, [r3, #8]
 80127d0:	4413      	add	r3, r2
 80127d2:	b29a      	uxth	r2, r3
 80127d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d6:	811a      	strh	r2, [r3, #8]
 80127d8:	e037      	b.n	801284a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80127da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d034      	beq.n	801284a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80127e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d003      	beq.n	80127ee <tcp_write+0x53a>
 80127e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d106      	bne.n	80127fc <tcp_write+0x548>
 80127ee:	4b1a      	ldr	r3, [pc, #104]	; (8012858 <tcp_write+0x5a4>)
 80127f0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80127f4:	491e      	ldr	r1, [pc, #120]	; (8012870 <tcp_write+0x5bc>)
 80127f6:	481a      	ldr	r0, [pc, #104]	; (8012860 <tcp_write+0x5ac>)
 80127f8:	f007 fd9a 	bl	801a330 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80127fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	62bb      	str	r3, [r7, #40]	; 0x28
 8012802:	e009      	b.n	8012818 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012806:	891a      	ldrh	r2, [r3, #8]
 8012808:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801280a:	4413      	add	r3, r2
 801280c:	b29a      	uxth	r2, r3
 801280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012810:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	62bb      	str	r3, [r7, #40]	; 0x28
 8012818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d1f1      	bne.n	8012804 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012822:	891a      	ldrh	r2, [r3, #8]
 8012824:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012826:	4413      	add	r3, r2
 8012828:	b29a      	uxth	r2, r3
 801282a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801282c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801282e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012830:	895a      	ldrh	r2, [r3, #10]
 8012832:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012834:	4413      	add	r3, r2
 8012836:	b29a      	uxth	r2, r3
 8012838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801283a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801283c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801283e:	891a      	ldrh	r2, [r3, #8]
 8012840:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012842:	4413      	add	r3, r2
 8012844:	b29a      	uxth	r2, r3
 8012846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012848:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801284a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801284c:	2b00      	cmp	r3, #0
 801284e:	d111      	bne.n	8012874 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012854:	66da      	str	r2, [r3, #108]	; 0x6c
 8012856:	e010      	b.n	801287a <tcp_write+0x5c6>
 8012858:	08020bdc 	.word	0x08020bdc
 801285c:	08020e7c 	.word	0x08020e7c
 8012860:	08020c30 	.word	0x08020c30
 8012864:	08020ebc 	.word	0x08020ebc
 8012868:	08020ecc 	.word	0x08020ecc
 801286c:	08020ee0 	.word	0x08020ee0
 8012870:	08020f18 	.word	0x08020f18
  } else {
    last_unsent->next = queue;
 8012874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012878:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801287e:	88fb      	ldrh	r3, [r7, #6]
 8012880:	441a      	add	r2, r3
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801288c:	88fb      	ldrh	r3, [r7, #6]
 801288e:	1ad3      	subs	r3, r2, r3
 8012890:	b29a      	uxth	r2, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801289e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d00e      	beq.n	80128ca <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d10a      	bne.n	80128ca <tcp_write+0x616>
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d106      	bne.n	80128ca <tcp_write+0x616>
 80128bc:	4b2c      	ldr	r3, [pc, #176]	; (8012970 <tcp_write+0x6bc>)
 80128be:	f240 3212 	movw	r2, #786	; 0x312
 80128c2:	492c      	ldr	r1, [pc, #176]	; (8012974 <tcp_write+0x6c0>)
 80128c4:	482c      	ldr	r0, [pc, #176]	; (8012978 <tcp_write+0x6c4>)
 80128c6:	f007 fd33 	bl	801a330 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80128ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d016      	beq.n	80128fe <tcp_write+0x64a>
 80128d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d012      	beq.n	80128fe <tcp_write+0x64a>
 80128d8:	797b      	ldrb	r3, [r7, #5]
 80128da:	f003 0302 	and.w	r3, r3, #2
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d10d      	bne.n	80128fe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80128e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	899b      	ldrh	r3, [r3, #12]
 80128e8:	b29c      	uxth	r4, r3
 80128ea:	2008      	movs	r0, #8
 80128ec:	f7f8 f9be 	bl	800ac6c <lwip_htons>
 80128f0:	4603      	mov	r3, r0
 80128f2:	461a      	mov	r2, r3
 80128f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	4322      	orrs	r2, r4
 80128fa:	b292      	uxth	r2, r2
 80128fc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80128fe:	2300      	movs	r3, #0
 8012900:	e031      	b.n	8012966 <tcp_write+0x6b2>
          goto memerr;
 8012902:	bf00      	nop
 8012904:	e006      	b.n	8012914 <tcp_write+0x660>
            goto memerr;
 8012906:	bf00      	nop
 8012908:	e004      	b.n	8012914 <tcp_write+0x660>
        goto memerr;
 801290a:	bf00      	nop
 801290c:	e002      	b.n	8012914 <tcp_write+0x660>
        goto memerr;
 801290e:	bf00      	nop
 8012910:	e000      	b.n	8012914 <tcp_write+0x660>
      goto memerr;
 8012912:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	8b5b      	ldrh	r3, [r3, #26]
 8012918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801291c:	b29a      	uxth	r2, r3
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012924:	2b00      	cmp	r3, #0
 8012926:	d002      	beq.n	801292e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012928:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801292a:	f7fa fd2d 	bl	800d388 <pbuf_free>
  }
  if (queue != NULL) {
 801292e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012930:	2b00      	cmp	r3, #0
 8012932:	d002      	beq.n	801293a <tcp_write+0x686>
    tcp_segs_free(queue);
 8012934:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012936:	f7fc fb6f 	bl	800f018 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012940:	2b00      	cmp	r3, #0
 8012942:	d00e      	beq.n	8012962 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012948:	2b00      	cmp	r3, #0
 801294a:	d10a      	bne.n	8012962 <tcp_write+0x6ae>
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012950:	2b00      	cmp	r3, #0
 8012952:	d106      	bne.n	8012962 <tcp_write+0x6ae>
 8012954:	4b06      	ldr	r3, [pc, #24]	; (8012970 <tcp_write+0x6bc>)
 8012956:	f240 3227 	movw	r2, #807	; 0x327
 801295a:	4906      	ldr	r1, [pc, #24]	; (8012974 <tcp_write+0x6c0>)
 801295c:	4806      	ldr	r0, [pc, #24]	; (8012978 <tcp_write+0x6c4>)
 801295e:	f007 fce7 	bl	801a330 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012966:	4618      	mov	r0, r3
 8012968:	375c      	adds	r7, #92	; 0x5c
 801296a:	46bd      	mov	sp, r7
 801296c:	bd90      	pop	{r4, r7, pc}
 801296e:	bf00      	nop
 8012970:	08020bdc 	.word	0x08020bdc
 8012974:	08020f50 	.word	0x08020f50
 8012978:	08020c30 	.word	0x08020c30

0801297c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801297c:	b590      	push	{r4, r7, lr}
 801297e:	b08b      	sub	sp, #44	; 0x2c
 8012980:	af02      	add	r7, sp, #8
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	460b      	mov	r3, r1
 8012986:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012988:	2300      	movs	r3, #0
 801298a:	61fb      	str	r3, [r7, #28]
 801298c:	2300      	movs	r3, #0
 801298e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012990:	2300      	movs	r3, #0
 8012992:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d106      	bne.n	80129a8 <tcp_split_unsent_seg+0x2c>
 801299a:	4b95      	ldr	r3, [pc, #596]	; (8012bf0 <tcp_split_unsent_seg+0x274>)
 801299c:	f240 324b 	movw	r2, #843	; 0x34b
 80129a0:	4994      	ldr	r1, [pc, #592]	; (8012bf4 <tcp_split_unsent_seg+0x278>)
 80129a2:	4895      	ldr	r0, [pc, #596]	; (8012bf8 <tcp_split_unsent_seg+0x27c>)
 80129a4:	f007 fcc4 	bl	801a330 <iprintf>

  useg = pcb->unsent;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129ac:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80129b4:	f04f 33ff 	mov.w	r3, #4294967295
 80129b8:	e116      	b.n	8012be8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80129ba:	887b      	ldrh	r3, [r7, #2]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d109      	bne.n	80129d4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80129c0:	4b8b      	ldr	r3, [pc, #556]	; (8012bf0 <tcp_split_unsent_seg+0x274>)
 80129c2:	f240 3253 	movw	r2, #851	; 0x353
 80129c6:	498d      	ldr	r1, [pc, #564]	; (8012bfc <tcp_split_unsent_seg+0x280>)
 80129c8:	488b      	ldr	r0, [pc, #556]	; (8012bf8 <tcp_split_unsent_seg+0x27c>)
 80129ca:	f007 fcb1 	bl	801a330 <iprintf>
    return ERR_VAL;
 80129ce:	f06f 0305 	mvn.w	r3, #5
 80129d2:	e109      	b.n	8012be8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	891b      	ldrh	r3, [r3, #8]
 80129d8:	887a      	ldrh	r2, [r7, #2]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d301      	bcc.n	80129e2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80129de:	2300      	movs	r3, #0
 80129e0:	e102      	b.n	8012be8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e6:	887a      	ldrh	r2, [r7, #2]
 80129e8:	429a      	cmp	r2, r3
 80129ea:	d906      	bls.n	80129fa <tcp_split_unsent_seg+0x7e>
 80129ec:	4b80      	ldr	r3, [pc, #512]	; (8012bf0 <tcp_split_unsent_seg+0x274>)
 80129ee:	f240 325b 	movw	r2, #859	; 0x35b
 80129f2:	4983      	ldr	r1, [pc, #524]	; (8012c00 <tcp_split_unsent_seg+0x284>)
 80129f4:	4880      	ldr	r0, [pc, #512]	; (8012bf8 <tcp_split_unsent_seg+0x27c>)
 80129f6:	f007 fc9b 	bl	801a330 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	891b      	ldrh	r3, [r3, #8]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d106      	bne.n	8012a10 <tcp_split_unsent_seg+0x94>
 8012a02:	4b7b      	ldr	r3, [pc, #492]	; (8012bf0 <tcp_split_unsent_seg+0x274>)
 8012a04:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012a08:	497e      	ldr	r1, [pc, #504]	; (8012c04 <tcp_split_unsent_seg+0x288>)
 8012a0a:	487b      	ldr	r0, [pc, #492]	; (8012bf8 <tcp_split_unsent_seg+0x27c>)
 8012a0c:	f007 fc90 	bl	801a330 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	7a9b      	ldrb	r3, [r3, #10]
 8012a14:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012a16:	7bfb      	ldrb	r3, [r7, #15]
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	f003 0304 	and.w	r3, r3, #4
 8012a20:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	891a      	ldrh	r2, [r3, #8]
 8012a26:	887b      	ldrh	r3, [r7, #2]
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012a2c:	7bbb      	ldrb	r3, [r7, #14]
 8012a2e:	b29a      	uxth	r2, r3
 8012a30:	89bb      	ldrh	r3, [r7, #12]
 8012a32:	4413      	add	r3, r2
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	2036      	movs	r0, #54	; 0x36
 8012a3e:	f7fa f9bf 	bl	800cdc0 <pbuf_alloc>
 8012a42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a44:	693b      	ldr	r3, [r7, #16]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	f000 80b7 	beq.w	8012bba <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	891a      	ldrh	r2, [r3, #8]
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	891b      	ldrh	r3, [r3, #8]
 8012a56:	1ad3      	subs	r3, r2, r3
 8012a58:	b29a      	uxth	r2, r3
 8012a5a:	887b      	ldrh	r3, [r7, #2]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012a60:	697b      	ldr	r3, [r7, #20]
 8012a62:	6858      	ldr	r0, [r3, #4]
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	685a      	ldr	r2, [r3, #4]
 8012a68:	7bbb      	ldrb	r3, [r7, #14]
 8012a6a:	18d1      	adds	r1, r2, r3
 8012a6c:	897b      	ldrh	r3, [r7, #10]
 8012a6e:	89ba      	ldrh	r2, [r7, #12]
 8012a70:	f7fa fe90 	bl	800d794 <pbuf_copy_partial>
 8012a74:	4603      	mov	r3, r0
 8012a76:	461a      	mov	r2, r3
 8012a78:	89bb      	ldrh	r3, [r7, #12]
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	f040 809f 	bne.w	8012bbe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	68db      	ldr	r3, [r3, #12]
 8012a84:	899b      	ldrh	r3, [r3, #12]
 8012a86:	b29b      	uxth	r3, r3
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7f8 f8ef 	bl	800ac6c <lwip_htons>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a96:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012a98:	2300      	movs	r3, #0
 8012a9a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012a9c:	7efb      	ldrb	r3, [r7, #27]
 8012a9e:	f003 0308 	and.w	r3, r3, #8
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d007      	beq.n	8012ab6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012aa6:	7efb      	ldrb	r3, [r7, #27]
 8012aa8:	f023 0308 	bic.w	r3, r3, #8
 8012aac:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012aae:	7ebb      	ldrb	r3, [r7, #26]
 8012ab0:	f043 0308 	orr.w	r3, r3, #8
 8012ab4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012ab6:	7efb      	ldrb	r3, [r7, #27]
 8012ab8:	f003 0301 	and.w	r3, r3, #1
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d007      	beq.n	8012ad0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012ac0:	7efb      	ldrb	r3, [r7, #27]
 8012ac2:	f023 0301 	bic.w	r3, r3, #1
 8012ac6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012ac8:	7ebb      	ldrb	r3, [r7, #26]
 8012aca:	f043 0301 	orr.w	r3, r3, #1
 8012ace:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	68db      	ldr	r3, [r3, #12]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7f8 f8dd 	bl	800ac96 <lwip_htonl>
 8012adc:	4602      	mov	r2, r0
 8012ade:	887b      	ldrh	r3, [r7, #2]
 8012ae0:	18d1      	adds	r1, r2, r3
 8012ae2:	7eba      	ldrb	r2, [r7, #26]
 8012ae4:	7bfb      	ldrb	r3, [r7, #15]
 8012ae6:	9300      	str	r3, [sp, #0]
 8012ae8:	460b      	mov	r3, r1
 8012aea:	6939      	ldr	r1, [r7, #16]
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7ff fa4f 	bl	8011f90 <tcp_create_segment>
 8012af2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d063      	beq.n	8012bc2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7fa fcd0 	bl	800d4a4 <pbuf_clen>
 8012b04:	4603      	mov	r3, r0
 8012b06:	461a      	mov	r2, r3
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b0e:	1a9b      	subs	r3, r3, r2
 8012b10:	b29a      	uxth	r2, r3
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	6858      	ldr	r0, [r3, #4]
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	891a      	ldrh	r2, [r3, #8]
 8012b22:	89bb      	ldrh	r3, [r7, #12]
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	4619      	mov	r1, r3
 8012b2a:	f7fa faa7 	bl	800d07c <pbuf_realloc>
  useg->len -= remainder;
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	891a      	ldrh	r2, [r3, #8]
 8012b32:	89bb      	ldrh	r3, [r7, #12]
 8012b34:	1ad3      	subs	r3, r2, r3
 8012b36:	b29a      	uxth	r2, r3
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	899b      	ldrh	r3, [r3, #12]
 8012b42:	b29c      	uxth	r4, r3
 8012b44:	7efb      	ldrb	r3, [r7, #27]
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7f8 f88f 	bl	800ac6c <lwip_htons>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	461a      	mov	r2, r3
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	68db      	ldr	r3, [r3, #12]
 8012b56:	4322      	orrs	r2, r4
 8012b58:	b292      	uxth	r2, r2
 8012b5a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	4618      	mov	r0, r3
 8012b62:	f7fa fc9f 	bl	800d4a4 <pbuf_clen>
 8012b66:	4603      	mov	r3, r0
 8012b68:	461a      	mov	r2, r3
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b70:	4413      	add	r3, r2
 8012b72:	b29a      	uxth	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7fa fc90 	bl	800d4a4 <pbuf_clen>
 8012b84:	4603      	mov	r3, r0
 8012b86:	461a      	mov	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012b8e:	4413      	add	r3, r2
 8012b90:	b29a      	uxth	r2, r3
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	681a      	ldr	r2, [r3, #0]
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012ba0:	697b      	ldr	r3, [r7, #20]
 8012ba2:	69fa      	ldr	r2, [r7, #28]
 8012ba4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d103      	bne.n	8012bb6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	e016      	b.n	8012be8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012bba:	bf00      	nop
 8012bbc:	e002      	b.n	8012bc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012bbe:	bf00      	nop
 8012bc0:	e000      	b.n	8012bc4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012bc2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012bc4:	69fb      	ldr	r3, [r7, #28]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d006      	beq.n	8012bd8 <tcp_split_unsent_seg+0x25c>
 8012bca:	4b09      	ldr	r3, [pc, #36]	; (8012bf0 <tcp_split_unsent_seg+0x274>)
 8012bcc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012bd0:	490d      	ldr	r1, [pc, #52]	; (8012c08 <tcp_split_unsent_seg+0x28c>)
 8012bd2:	4809      	ldr	r0, [pc, #36]	; (8012bf8 <tcp_split_unsent_seg+0x27c>)
 8012bd4:	f007 fbac 	bl	801a330 <iprintf>
  if (p != NULL) {
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d002      	beq.n	8012be4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012bde:	6938      	ldr	r0, [r7, #16]
 8012be0:	f7fa fbd2 	bl	800d388 <pbuf_free>
  }

  return ERR_MEM;
 8012be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3724      	adds	r7, #36	; 0x24
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd90      	pop	{r4, r7, pc}
 8012bf0:	08020bdc 	.word	0x08020bdc
 8012bf4:	08020f70 	.word	0x08020f70
 8012bf8:	08020c30 	.word	0x08020c30
 8012bfc:	08020f94 	.word	0x08020f94
 8012c00:	08020fb8 	.word	0x08020fb8
 8012c04:	08020fc8 	.word	0x08020fc8
 8012c08:	08020fd8 	.word	0x08020fd8

08012c0c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012c0c:	b590      	push	{r4, r7, lr}
 8012c0e:	b085      	sub	sp, #20
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d106      	bne.n	8012c28 <tcp_send_fin+0x1c>
 8012c1a:	4b21      	ldr	r3, [pc, #132]	; (8012ca0 <tcp_send_fin+0x94>)
 8012c1c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012c20:	4920      	ldr	r1, [pc, #128]	; (8012ca4 <tcp_send_fin+0x98>)
 8012c22:	4821      	ldr	r0, [pc, #132]	; (8012ca8 <tcp_send_fin+0x9c>)
 8012c24:	f007 fb84 	bl	801a330 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d02e      	beq.n	8012c8e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c34:	60fb      	str	r3, [r7, #12]
 8012c36:	e002      	b.n	8012c3e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d1f8      	bne.n	8012c38 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	68db      	ldr	r3, [r3, #12]
 8012c4a:	899b      	ldrh	r3, [r3, #12]
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f7f8 f80c 	bl	800ac6c <lwip_htons>
 8012c54:	4603      	mov	r3, r0
 8012c56:	b2db      	uxtb	r3, r3
 8012c58:	f003 0307 	and.w	r3, r3, #7
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d116      	bne.n	8012c8e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	68db      	ldr	r3, [r3, #12]
 8012c64:	899b      	ldrh	r3, [r3, #12]
 8012c66:	b29c      	uxth	r4, r3
 8012c68:	2001      	movs	r0, #1
 8012c6a:	f7f7 ffff 	bl	800ac6c <lwip_htons>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	461a      	mov	r2, r3
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	68db      	ldr	r3, [r3, #12]
 8012c76:	4322      	orrs	r2, r4
 8012c78:	b292      	uxth	r2, r2
 8012c7a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	8b5b      	ldrh	r3, [r3, #26]
 8012c80:	f043 0320 	orr.w	r3, r3, #32
 8012c84:	b29a      	uxth	r2, r3
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	e004      	b.n	8012c98 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012c8e:	2101      	movs	r1, #1
 8012c90:	6878      	ldr	r0, [r7, #4]
 8012c92:	f000 f80b 	bl	8012cac <tcp_enqueue_flags>
 8012c96:	4603      	mov	r3, r0
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3714      	adds	r7, #20
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd90      	pop	{r4, r7, pc}
 8012ca0:	08020bdc 	.word	0x08020bdc
 8012ca4:	08020fe4 	.word	0x08020fe4
 8012ca8:	08020c30 	.word	0x08020c30

08012cac <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b08a      	sub	sp, #40	; 0x28
 8012cb0:	af02      	add	r7, sp, #8
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012cc0:	78fb      	ldrb	r3, [r7, #3]
 8012cc2:	f003 0303 	and.w	r3, r3, #3
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d106      	bne.n	8012cd8 <tcp_enqueue_flags+0x2c>
 8012cca:	4b67      	ldr	r3, [pc, #412]	; (8012e68 <tcp_enqueue_flags+0x1bc>)
 8012ccc:	f240 4211 	movw	r2, #1041	; 0x411
 8012cd0:	4966      	ldr	r1, [pc, #408]	; (8012e6c <tcp_enqueue_flags+0x1c0>)
 8012cd2:	4867      	ldr	r0, [pc, #412]	; (8012e70 <tcp_enqueue_flags+0x1c4>)
 8012cd4:	f007 fb2c 	bl	801a330 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d106      	bne.n	8012cec <tcp_enqueue_flags+0x40>
 8012cde:	4b62      	ldr	r3, [pc, #392]	; (8012e68 <tcp_enqueue_flags+0x1bc>)
 8012ce0:	f240 4213 	movw	r2, #1043	; 0x413
 8012ce4:	4963      	ldr	r1, [pc, #396]	; (8012e74 <tcp_enqueue_flags+0x1c8>)
 8012ce6:	4862      	ldr	r0, [pc, #392]	; (8012e70 <tcp_enqueue_flags+0x1c4>)
 8012ce8:	f007 fb22 	bl	801a330 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012cec:	78fb      	ldrb	r3, [r7, #3]
 8012cee:	f003 0302 	and.w	r3, r3, #2
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012cfa:	7ffb      	ldrb	r3, [r7, #31]
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	f003 0304 	and.w	r3, r3, #4
 8012d04:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012d06:	7dfb      	ldrb	r3, [r7, #23]
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012d0e:	4619      	mov	r1, r3
 8012d10:	2036      	movs	r0, #54	; 0x36
 8012d12:	f7fa f855 	bl	800cdc0 <pbuf_alloc>
 8012d16:	6138      	str	r0, [r7, #16]
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d109      	bne.n	8012d32 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	8b5b      	ldrh	r3, [r3, #26]
 8012d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d26:	b29a      	uxth	r2, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d30:	e095      	b.n	8012e5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	895a      	ldrh	r2, [r3, #10]
 8012d36:	7dfb      	ldrb	r3, [r7, #23]
 8012d38:	b29b      	uxth	r3, r3
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d206      	bcs.n	8012d4c <tcp_enqueue_flags+0xa0>
 8012d3e:	4b4a      	ldr	r3, [pc, #296]	; (8012e68 <tcp_enqueue_flags+0x1bc>)
 8012d40:	f240 4239 	movw	r2, #1081	; 0x439
 8012d44:	494c      	ldr	r1, [pc, #304]	; (8012e78 <tcp_enqueue_flags+0x1cc>)
 8012d46:	484a      	ldr	r0, [pc, #296]	; (8012e70 <tcp_enqueue_flags+0x1c4>)
 8012d48:	f007 faf2 	bl	801a330 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012d50:	78fa      	ldrb	r2, [r7, #3]
 8012d52:	7ffb      	ldrb	r3, [r7, #31]
 8012d54:	9300      	str	r3, [sp, #0]
 8012d56:	460b      	mov	r3, r1
 8012d58:	6939      	ldr	r1, [r7, #16]
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f7ff f918 	bl	8011f90 <tcp_create_segment>
 8012d60:	60f8      	str	r0, [r7, #12]
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d109      	bne.n	8012d7c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	8b5b      	ldrh	r3, [r3, #26]
 8012d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d70:	b29a      	uxth	r2, r3
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012d76:	f04f 33ff 	mov.w	r3, #4294967295
 8012d7a:	e070      	b.n	8012e5e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	68db      	ldr	r3, [r3, #12]
 8012d80:	f003 0303 	and.w	r3, r3, #3
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d006      	beq.n	8012d96 <tcp_enqueue_flags+0xea>
 8012d88:	4b37      	ldr	r3, [pc, #220]	; (8012e68 <tcp_enqueue_flags+0x1bc>)
 8012d8a:	f240 4242 	movw	r2, #1090	; 0x442
 8012d8e:	493b      	ldr	r1, [pc, #236]	; (8012e7c <tcp_enqueue_flags+0x1d0>)
 8012d90:	4837      	ldr	r0, [pc, #220]	; (8012e70 <tcp_enqueue_flags+0x1c4>)
 8012d92:	f007 facd 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	891b      	ldrh	r3, [r3, #8]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d006      	beq.n	8012dac <tcp_enqueue_flags+0x100>
 8012d9e:	4b32      	ldr	r3, [pc, #200]	; (8012e68 <tcp_enqueue_flags+0x1bc>)
 8012da0:	f240 4243 	movw	r2, #1091	; 0x443
 8012da4:	4936      	ldr	r1, [pc, #216]	; (8012e80 <tcp_enqueue_flags+0x1d4>)
 8012da6:	4832      	ldr	r0, [pc, #200]	; (8012e70 <tcp_enqueue_flags+0x1c4>)
 8012da8:	f007 fac2 	bl	801a330 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d103      	bne.n	8012dbc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	68fa      	ldr	r2, [r7, #12]
 8012db8:	66da      	str	r2, [r3, #108]	; 0x6c
 8012dba:	e00d      	b.n	8012dd8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc0:	61bb      	str	r3, [r7, #24]
 8012dc2:	e002      	b.n	8012dca <tcp_enqueue_flags+0x11e>
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	61bb      	str	r3, [r7, #24]
 8012dca:	69bb      	ldr	r3, [r7, #24]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d1f8      	bne.n	8012dc4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	68fa      	ldr	r2, [r7, #12]
 8012dd6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012de0:	78fb      	ldrb	r3, [r7, #3]
 8012de2:	f003 0302 	and.w	r3, r3, #2
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d104      	bne.n	8012df4 <tcp_enqueue_flags+0x148>
 8012dea:	78fb      	ldrb	r3, [r7, #3]
 8012dec:	f003 0301 	and.w	r3, r3, #1
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d004      	beq.n	8012dfe <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012df8:	1c5a      	adds	r2, r3, #1
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012dfe:	78fb      	ldrb	r3, [r7, #3]
 8012e00:	f003 0301 	and.w	r3, r3, #1
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d006      	beq.n	8012e16 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	8b5b      	ldrh	r3, [r3, #26]
 8012e0c:	f043 0320 	orr.w	r3, r3, #32
 8012e10:	b29a      	uxth	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fa fb42 	bl	800d4a4 <pbuf_clen>
 8012e20:	4603      	mov	r3, r0
 8012e22:	461a      	mov	r2, r3
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e2a:	4413      	add	r3, r2
 8012e2c:	b29a      	uxth	r2, r3
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d00e      	beq.n	8012e5c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d10a      	bne.n	8012e5c <tcp_enqueue_flags+0x1b0>
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d106      	bne.n	8012e5c <tcp_enqueue_flags+0x1b0>
 8012e4e:	4b06      	ldr	r3, [pc, #24]	; (8012e68 <tcp_enqueue_flags+0x1bc>)
 8012e50:	f240 4265 	movw	r2, #1125	; 0x465
 8012e54:	490b      	ldr	r1, [pc, #44]	; (8012e84 <tcp_enqueue_flags+0x1d8>)
 8012e56:	4806      	ldr	r0, [pc, #24]	; (8012e70 <tcp_enqueue_flags+0x1c4>)
 8012e58:	f007 fa6a 	bl	801a330 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012e5c:	2300      	movs	r3, #0
}
 8012e5e:	4618      	mov	r0, r3
 8012e60:	3720      	adds	r7, #32
 8012e62:	46bd      	mov	sp, r7
 8012e64:	bd80      	pop	{r7, pc}
 8012e66:	bf00      	nop
 8012e68:	08020bdc 	.word	0x08020bdc
 8012e6c:	08021000 	.word	0x08021000
 8012e70:	08020c30 	.word	0x08020c30
 8012e74:	08021058 	.word	0x08021058
 8012e78:	08021078 	.word	0x08021078
 8012e7c:	080210b4 	.word	0x080210b4
 8012e80:	080210cc 	.word	0x080210cc
 8012e84:	080210f8 	.word	0x080210f8

08012e88 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012e88:	b5b0      	push	{r4, r5, r7, lr}
 8012e8a:	b08a      	sub	sp, #40	; 0x28
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d106      	bne.n	8012ea4 <tcp_output+0x1c>
 8012e96:	4b9e      	ldr	r3, [pc, #632]	; (8013110 <tcp_output+0x288>)
 8012e98:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012e9c:	499d      	ldr	r1, [pc, #628]	; (8013114 <tcp_output+0x28c>)
 8012e9e:	489e      	ldr	r0, [pc, #632]	; (8013118 <tcp_output+0x290>)
 8012ea0:	f007 fa46 	bl	801a330 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	7d1b      	ldrb	r3, [r3, #20]
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d106      	bne.n	8012eba <tcp_output+0x32>
 8012eac:	4b98      	ldr	r3, [pc, #608]	; (8013110 <tcp_output+0x288>)
 8012eae:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012eb2:	499a      	ldr	r1, [pc, #616]	; (801311c <tcp_output+0x294>)
 8012eb4:	4898      	ldr	r0, [pc, #608]	; (8013118 <tcp_output+0x290>)
 8012eb6:	f007 fa3b 	bl	801a330 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012eba:	4b99      	ldr	r3, [pc, #612]	; (8013120 <tcp_output+0x298>)
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	429a      	cmp	r2, r3
 8012ec2:	d101      	bne.n	8012ec8 <tcp_output+0x40>
    return ERR_OK;
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	e1ce      	b.n	8013266 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ed4:	4293      	cmp	r3, r2
 8012ed6:	bf28      	it	cs
 8012ed8:	4613      	movcs	r3, r2
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ee2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d10b      	bne.n	8012f02 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	8b5b      	ldrh	r3, [r3, #26]
 8012eee:	f003 0302 	and.w	r3, r3, #2
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	f000 81aa 	beq.w	801324c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f000 fdcb 	bl	8013a94 <tcp_send_empty_ack>
 8012efe:	4603      	mov	r3, r0
 8012f00:	e1b1      	b.n	8013266 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012f02:	6879      	ldr	r1, [r7, #4]
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	3304      	adds	r3, #4
 8012f08:	461a      	mov	r2, r3
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f7ff f824 	bl	8011f58 <tcp_route>
 8012f10:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d102      	bne.n	8012f1e <tcp_output+0x96>
    return ERR_RTE;
 8012f18:	f06f 0303 	mvn.w	r3, #3
 8012f1c:	e1a3      	b.n	8013266 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d003      	beq.n	8012f2c <tcp_output+0xa4>
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d111      	bne.n	8012f50 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d002      	beq.n	8012f38 <tcp_output+0xb0>
 8012f32:	697b      	ldr	r3, [r7, #20]
 8012f34:	3304      	adds	r3, #4
 8012f36:	e000      	b.n	8012f3a <tcp_output+0xb2>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012f3c:	693b      	ldr	r3, [r7, #16]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d102      	bne.n	8012f48 <tcp_output+0xc0>
      return ERR_RTE;
 8012f42:	f06f 0303 	mvn.w	r3, #3
 8012f46:	e18e      	b.n	8013266 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f52:	68db      	ldr	r3, [r3, #12]
 8012f54:	685b      	ldr	r3, [r3, #4]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7f7 fe9d 	bl	800ac96 <lwip_htonl>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f62:	1ad3      	subs	r3, r2, r3
 8012f64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f66:	8912      	ldrh	r2, [r2, #8]
 8012f68:	4413      	add	r3, r2
 8012f6a:	69ba      	ldr	r2, [r7, #24]
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d227      	bcs.n	8012fc0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f76:	461a      	mov	r2, r3
 8012f78:	69bb      	ldr	r3, [r7, #24]
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d114      	bne.n	8012fa8 <tcp_output+0x120>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d110      	bne.n	8012fa8 <tcp_output+0x120>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d10b      	bne.n	8012fa8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2201      	movs	r2, #1
 8012f9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	8b5b      	ldrh	r3, [r3, #26]
 8012fac:	f003 0302 	and.w	r3, r3, #2
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	f000 814d 	beq.w	8013250 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 fd6c 	bl	8013a94 <tcp_send_empty_ack>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	e152      	b.n	8013266 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012fcc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012fce:	6a3b      	ldr	r3, [r7, #32]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	f000 811c 	beq.w	801320e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012fd6:	e002      	b.n	8012fde <tcp_output+0x156>
 8012fd8:	6a3b      	ldr	r3, [r7, #32]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	623b      	str	r3, [r7, #32]
 8012fde:	6a3b      	ldr	r3, [r7, #32]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d1f8      	bne.n	8012fd8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012fe6:	e112      	b.n	801320e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fea:	68db      	ldr	r3, [r3, #12]
 8012fec:	899b      	ldrh	r3, [r3, #12]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f7f7 fe3b 	bl	800ac6c <lwip_htons>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	f003 0304 	and.w	r3, r3, #4
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d006      	beq.n	8013010 <tcp_output+0x188>
 8013002:	4b43      	ldr	r3, [pc, #268]	; (8013110 <tcp_output+0x288>)
 8013004:	f240 5236 	movw	r2, #1334	; 0x536
 8013008:	4946      	ldr	r1, [pc, #280]	; (8013124 <tcp_output+0x29c>)
 801300a:	4843      	ldr	r0, [pc, #268]	; (8013118 <tcp_output+0x290>)
 801300c:	f007 f990 	bl	801a330 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013014:	2b00      	cmp	r3, #0
 8013016:	d01f      	beq.n	8013058 <tcp_output+0x1d0>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	8b5b      	ldrh	r3, [r3, #26]
 801301c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013020:	2b00      	cmp	r3, #0
 8013022:	d119      	bne.n	8013058 <tcp_output+0x1d0>
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013028:	2b00      	cmp	r3, #0
 801302a:	d00b      	beq.n	8013044 <tcp_output+0x1bc>
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d110      	bne.n	8013058 <tcp_output+0x1d0>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801303a:	891a      	ldrh	r2, [r3, #8]
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013040:	429a      	cmp	r2, r3
 8013042:	d209      	bcs.n	8013058 <tcp_output+0x1d0>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801304a:	2b00      	cmp	r3, #0
 801304c:	d004      	beq.n	8013058 <tcp_output+0x1d0>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013054:	2b08      	cmp	r3, #8
 8013056:	d901      	bls.n	801305c <tcp_output+0x1d4>
 8013058:	2301      	movs	r3, #1
 801305a:	e000      	b.n	801305e <tcp_output+0x1d6>
 801305c:	2300      	movs	r3, #0
 801305e:	2b00      	cmp	r3, #0
 8013060:	d106      	bne.n	8013070 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	8b5b      	ldrh	r3, [r3, #26]
 8013066:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801306a:	2b00      	cmp	r3, #0
 801306c:	f000 80e4 	beq.w	8013238 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	7d1b      	ldrb	r3, [r3, #20]
 8013074:	2b02      	cmp	r3, #2
 8013076:	d00d      	beq.n	8013094 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	899b      	ldrh	r3, [r3, #12]
 801307e:	b29c      	uxth	r4, r3
 8013080:	2010      	movs	r0, #16
 8013082:	f7f7 fdf3 	bl	800ac6c <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	461a      	mov	r2, r3
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	4322      	orrs	r2, r4
 8013090:	b292      	uxth	r2, r2
 8013092:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013094:	697a      	ldr	r2, [r7, #20]
 8013096:	6879      	ldr	r1, [r7, #4]
 8013098:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801309a:	f000 f909 	bl	80132b0 <tcp_output_segment>
 801309e:	4603      	mov	r3, r0
 80130a0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80130a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d009      	beq.n	80130be <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	8b5b      	ldrh	r3, [r3, #26]
 80130ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130b2:	b29a      	uxth	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	835a      	strh	r2, [r3, #26]
      return err;
 80130b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130bc:	e0d3      	b.n	8013266 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80130be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130c0:	681a      	ldr	r2, [r3, #0]
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	7d1b      	ldrb	r3, [r3, #20]
 80130ca:	2b02      	cmp	r3, #2
 80130cc:	d006      	beq.n	80130dc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	8b5b      	ldrh	r3, [r3, #26]
 80130d2:	f023 0303 	bic.w	r3, r3, #3
 80130d6:	b29a      	uxth	r2, r3
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7f7 fdd7 	bl	800ac96 <lwip_htonl>
 80130e8:	4604      	mov	r4, r0
 80130ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ec:	891b      	ldrh	r3, [r3, #8]
 80130ee:	461d      	mov	r5, r3
 80130f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	899b      	ldrh	r3, [r3, #12]
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f7 fdb7 	bl	800ac6c <lwip_htons>
 80130fe:	4603      	mov	r3, r0
 8013100:	b2db      	uxtb	r3, r3
 8013102:	f003 0303 	and.w	r3, r3, #3
 8013106:	2b00      	cmp	r3, #0
 8013108:	d00e      	beq.n	8013128 <tcp_output+0x2a0>
 801310a:	2301      	movs	r3, #1
 801310c:	e00d      	b.n	801312a <tcp_output+0x2a2>
 801310e:	bf00      	nop
 8013110:	08020bdc 	.word	0x08020bdc
 8013114:	08021120 	.word	0x08021120
 8013118:	08020c30 	.word	0x08020c30
 801311c:	08021138 	.word	0x08021138
 8013120:	200280c0 	.word	0x200280c0
 8013124:	08021160 	.word	0x08021160
 8013128:	2300      	movs	r3, #0
 801312a:	442b      	add	r3, r5
 801312c:	4423      	add	r3, r4
 801312e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	1ad3      	subs	r3, r2, r3
 8013138:	2b00      	cmp	r3, #0
 801313a:	da02      	bge.n	8013142 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	68ba      	ldr	r2, [r7, #8]
 8013140:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013144:	891b      	ldrh	r3, [r3, #8]
 8013146:	461c      	mov	r4, r3
 8013148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	899b      	ldrh	r3, [r3, #12]
 801314e:	b29b      	uxth	r3, r3
 8013150:	4618      	mov	r0, r3
 8013152:	f7f7 fd8b 	bl	800ac6c <lwip_htons>
 8013156:	4603      	mov	r3, r0
 8013158:	b2db      	uxtb	r3, r3
 801315a:	f003 0303 	and.w	r3, r3, #3
 801315e:	2b00      	cmp	r3, #0
 8013160:	d001      	beq.n	8013166 <tcp_output+0x2de>
 8013162:	2301      	movs	r3, #1
 8013164:	e000      	b.n	8013168 <tcp_output+0x2e0>
 8013166:	2300      	movs	r3, #0
 8013168:	4423      	add	r3, r4
 801316a:	2b00      	cmp	r3, #0
 801316c:	d049      	beq.n	8013202 <tcp_output+0x37a>
      seg->next = NULL;
 801316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013170:	2200      	movs	r2, #0
 8013172:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013178:	2b00      	cmp	r3, #0
 801317a:	d105      	bne.n	8013188 <tcp_output+0x300>
        pcb->unacked = seg;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013180:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013184:	623b      	str	r3, [r7, #32]
 8013186:	e03f      	b.n	8013208 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318a:	68db      	ldr	r3, [r3, #12]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	4618      	mov	r0, r3
 8013190:	f7f7 fd81 	bl	800ac96 <lwip_htonl>
 8013194:	4604      	mov	r4, r0
 8013196:	6a3b      	ldr	r3, [r7, #32]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	4618      	mov	r0, r3
 801319e:	f7f7 fd7a 	bl	800ac96 <lwip_htonl>
 80131a2:	4603      	mov	r3, r0
 80131a4:	1ae3      	subs	r3, r4, r3
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	da24      	bge.n	80131f4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	3370      	adds	r3, #112	; 0x70
 80131ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80131b0:	e002      	b.n	80131b8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d011      	beq.n	80131e4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	4618      	mov	r0, r3
 80131ca:	f7f7 fd64 	bl	800ac96 <lwip_htonl>
 80131ce:	4604      	mov	r4, r0
 80131d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	4618      	mov	r0, r3
 80131d8:	f7f7 fd5d 	bl	800ac96 <lwip_htonl>
 80131dc:	4603      	mov	r3, r0
 80131de:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	dbe6      	blt.n	80131b2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ea:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131f0:	601a      	str	r2, [r3, #0]
 80131f2:	e009      	b.n	8013208 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131f8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80131fa:	6a3b      	ldr	r3, [r7, #32]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	623b      	str	r3, [r7, #32]
 8013200:	e002      	b.n	8013208 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013202:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013204:	f7fb ff1d 	bl	800f042 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801320c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013210:	2b00      	cmp	r3, #0
 8013212:	d012      	beq.n	801323a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	685b      	ldr	r3, [r3, #4]
 801321a:	4618      	mov	r0, r3
 801321c:	f7f7 fd3b 	bl	800ac96 <lwip_htonl>
 8013220:	4602      	mov	r2, r0
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013226:	1ad3      	subs	r3, r2, r3
 8013228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801322a:	8912      	ldrh	r2, [r2, #8]
 801322c:	4413      	add	r3, r2
  while (seg != NULL &&
 801322e:	69ba      	ldr	r2, [r7, #24]
 8013230:	429a      	cmp	r2, r3
 8013232:	f4bf aed9 	bcs.w	8012fe8 <tcp_output+0x160>
 8013236:	e000      	b.n	801323a <tcp_output+0x3b2>
      break;
 8013238:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801323e:	2b00      	cmp	r3, #0
 8013240:	d108      	bne.n	8013254 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2200      	movs	r2, #0
 8013246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801324a:	e004      	b.n	8013256 <tcp_output+0x3ce>
    goto output_done;
 801324c:	bf00      	nop
 801324e:	e002      	b.n	8013256 <tcp_output+0x3ce>
    goto output_done;
 8013250:	bf00      	nop
 8013252:	e000      	b.n	8013256 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013254:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	8b5b      	ldrh	r3, [r3, #26]
 801325a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801325e:	b29a      	uxth	r2, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013264:	2300      	movs	r3, #0
}
 8013266:	4618      	mov	r0, r3
 8013268:	3728      	adds	r7, #40	; 0x28
 801326a:	46bd      	mov	sp, r7
 801326c:	bdb0      	pop	{r4, r5, r7, pc}
 801326e:	bf00      	nop

08013270 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b082      	sub	sp, #8
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d106      	bne.n	801328c <tcp_output_segment_busy+0x1c>
 801327e:	4b09      	ldr	r3, [pc, #36]	; (80132a4 <tcp_output_segment_busy+0x34>)
 8013280:	f240 529a 	movw	r2, #1434	; 0x59a
 8013284:	4908      	ldr	r1, [pc, #32]	; (80132a8 <tcp_output_segment_busy+0x38>)
 8013286:	4809      	ldr	r0, [pc, #36]	; (80132ac <tcp_output_segment_busy+0x3c>)
 8013288:	f007 f852 	bl	801a330 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	685b      	ldr	r3, [r3, #4]
 8013290:	7b9b      	ldrb	r3, [r3, #14]
 8013292:	2b01      	cmp	r3, #1
 8013294:	d001      	beq.n	801329a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013296:	2301      	movs	r3, #1
 8013298:	e000      	b.n	801329c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3708      	adds	r7, #8
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}
 80132a4:	08020bdc 	.word	0x08020bdc
 80132a8:	08021178 	.word	0x08021178
 80132ac:	08020c30 	.word	0x08020c30

080132b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80132b0:	b5b0      	push	{r4, r5, r7, lr}
 80132b2:	b08c      	sub	sp, #48	; 0x30
 80132b4:	af04      	add	r7, sp, #16
 80132b6:	60f8      	str	r0, [r7, #12]
 80132b8:	60b9      	str	r1, [r7, #8]
 80132ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d106      	bne.n	80132d0 <tcp_output_segment+0x20>
 80132c2:	4b63      	ldr	r3, [pc, #396]	; (8013450 <tcp_output_segment+0x1a0>)
 80132c4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80132c8:	4962      	ldr	r1, [pc, #392]	; (8013454 <tcp_output_segment+0x1a4>)
 80132ca:	4863      	ldr	r0, [pc, #396]	; (8013458 <tcp_output_segment+0x1a8>)
 80132cc:	f007 f830 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d106      	bne.n	80132e4 <tcp_output_segment+0x34>
 80132d6:	4b5e      	ldr	r3, [pc, #376]	; (8013450 <tcp_output_segment+0x1a0>)
 80132d8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80132dc:	495f      	ldr	r1, [pc, #380]	; (801345c <tcp_output_segment+0x1ac>)
 80132de:	485e      	ldr	r0, [pc, #376]	; (8013458 <tcp_output_segment+0x1a8>)
 80132e0:	f007 f826 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d106      	bne.n	80132f8 <tcp_output_segment+0x48>
 80132ea:	4b59      	ldr	r3, [pc, #356]	; (8013450 <tcp_output_segment+0x1a0>)
 80132ec:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80132f0:	495b      	ldr	r1, [pc, #364]	; (8013460 <tcp_output_segment+0x1b0>)
 80132f2:	4859      	ldr	r0, [pc, #356]	; (8013458 <tcp_output_segment+0x1a8>)
 80132f4:	f007 f81c 	bl	801a330 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80132f8:	68f8      	ldr	r0, [r7, #12]
 80132fa:	f7ff ffb9 	bl	8013270 <tcp_output_segment_busy>
 80132fe:	4603      	mov	r3, r0
 8013300:	2b00      	cmp	r3, #0
 8013302:	d001      	beq.n	8013308 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013304:	2300      	movs	r3, #0
 8013306:	e09f      	b.n	8013448 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	68dc      	ldr	r4, [r3, #12]
 8013310:	4610      	mov	r0, r2
 8013312:	f7f7 fcc0 	bl	800ac96 <lwip_htonl>
 8013316:	4603      	mov	r3, r0
 8013318:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801331a:	68bb      	ldr	r3, [r7, #8]
 801331c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	68dc      	ldr	r4, [r3, #12]
 8013322:	4610      	mov	r0, r2
 8013324:	f7f7 fca2 	bl	800ac6c <lwip_htons>
 8013328:	4603      	mov	r3, r0
 801332a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801332c:	68bb      	ldr	r3, [r7, #8]
 801332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013330:	68ba      	ldr	r2, [r7, #8]
 8013332:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013334:	441a      	add	r2, r3
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	68db      	ldr	r3, [r3, #12]
 801333e:	3314      	adds	r3, #20
 8013340:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	7a9b      	ldrb	r3, [r3, #10]
 8013346:	f003 0301 	and.w	r3, r3, #1
 801334a:	2b00      	cmp	r3, #0
 801334c:	d015      	beq.n	801337a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	3304      	adds	r3, #4
 8013352:	461a      	mov	r2, r3
 8013354:	6879      	ldr	r1, [r7, #4]
 8013356:	f44f 7006 	mov.w	r0, #536	; 0x218
 801335a:	f7fc fa37 	bl	800f7cc <tcp_eff_send_mss_netif>
 801335e:	4603      	mov	r3, r0
 8013360:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013362:	8b7b      	ldrh	r3, [r7, #26]
 8013364:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013368:	4618      	mov	r0, r3
 801336a:	f7f7 fc94 	bl	800ac96 <lwip_htonl>
 801336e:	4602      	mov	r2, r0
 8013370:	69fb      	ldr	r3, [r7, #28]
 8013372:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013374:	69fb      	ldr	r3, [r7, #28]
 8013376:	3304      	adds	r3, #4
 8013378:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801337a:	68bb      	ldr	r3, [r7, #8]
 801337c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013380:	2b00      	cmp	r3, #0
 8013382:	da02      	bge.n	801338a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	2200      	movs	r2, #0
 8013388:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801338e:	2b00      	cmp	r3, #0
 8013390:	d10c      	bne.n	80133ac <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8013392:	4b34      	ldr	r3, [pc, #208]	; (8013464 <tcp_output_segment+0x1b4>)
 8013394:	681a      	ldr	r2, [r3, #0]
 8013396:	68bb      	ldr	r3, [r7, #8]
 8013398:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	68db      	ldr	r3, [r3, #12]
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7f7 fc78 	bl	800ac96 <lwip_htonl>
 80133a6:	4602      	mov	r2, r0
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	68da      	ldr	r2, [r3, #12]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	685b      	ldr	r3, [r3, #4]
 80133b6:	1ad3      	subs	r3, r2, r3
 80133b8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	8959      	ldrh	r1, [r3, #10]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	685b      	ldr	r3, [r3, #4]
 80133c4:	8b3a      	ldrh	r2, [r7, #24]
 80133c6:	1a8a      	subs	r2, r1, r2
 80133c8:	b292      	uxth	r2, r2
 80133ca:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	685b      	ldr	r3, [r3, #4]
 80133d0:	8919      	ldrh	r1, [r3, #8]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	8b3a      	ldrh	r2, [r7, #24]
 80133d8:	1a8a      	subs	r2, r1, r2
 80133da:	b292      	uxth	r2, r2
 80133dc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	685b      	ldr	r3, [r3, #4]
 80133e2:	68fa      	ldr	r2, [r7, #12]
 80133e4:	68d2      	ldr	r2, [r2, #12]
 80133e6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	68db      	ldr	r3, [r3, #12]
 80133ec:	2200      	movs	r2, #0
 80133ee:	741a      	strb	r2, [r3, #16]
 80133f0:	2200      	movs	r2, #0
 80133f2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	68db      	ldr	r3, [r3, #12]
 80133f8:	f103 0214 	add.w	r2, r3, #20
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	7a9b      	ldrb	r3, [r3, #10]
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	f003 0304 	and.w	r3, r3, #4
 8013406:	4413      	add	r3, r2
 8013408:	69fa      	ldr	r2, [r7, #28]
 801340a:	429a      	cmp	r2, r3
 801340c:	d006      	beq.n	801341c <tcp_output_segment+0x16c>
 801340e:	4b10      	ldr	r3, [pc, #64]	; (8013450 <tcp_output_segment+0x1a0>)
 8013410:	f240 621c 	movw	r2, #1564	; 0x61c
 8013414:	4914      	ldr	r1, [pc, #80]	; (8013468 <tcp_output_segment+0x1b8>)
 8013416:	4810      	ldr	r0, [pc, #64]	; (8013458 <tcp_output_segment+0x1a8>)
 8013418:	f006 ff8a 	bl	801a330 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	6858      	ldr	r0, [r3, #4]
 8013420:	68b9      	ldr	r1, [r7, #8]
 8013422:	68bb      	ldr	r3, [r7, #8]
 8013424:	1d1c      	adds	r4, r3, #4
 8013426:	68bb      	ldr	r3, [r7, #8]
 8013428:	7add      	ldrb	r5, [r3, #11]
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	7a9b      	ldrb	r3, [r3, #10]
 801342e:	687a      	ldr	r2, [r7, #4]
 8013430:	9202      	str	r2, [sp, #8]
 8013432:	2206      	movs	r2, #6
 8013434:	9201      	str	r2, [sp, #4]
 8013436:	9300      	str	r3, [sp, #0]
 8013438:	462b      	mov	r3, r5
 801343a:	4622      	mov	r2, r4
 801343c:	f004 fcd6 	bl	8017dec <ip4_output_if>
 8013440:	4603      	mov	r3, r0
 8013442:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013444:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013448:	4618      	mov	r0, r3
 801344a:	3720      	adds	r7, #32
 801344c:	46bd      	mov	sp, r7
 801344e:	bdb0      	pop	{r4, r5, r7, pc}
 8013450:	08020bdc 	.word	0x08020bdc
 8013454:	080211a0 	.word	0x080211a0
 8013458:	08020c30 	.word	0x08020c30
 801345c:	080211c0 	.word	0x080211c0
 8013460:	080211e0 	.word	0x080211e0
 8013464:	200280b0 	.word	0x200280b0
 8013468:	08021204 	.word	0x08021204

0801346c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801346c:	b5b0      	push	{r4, r5, r7, lr}
 801346e:	b084      	sub	sp, #16
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d106      	bne.n	8013488 <tcp_rexmit_rto_prepare+0x1c>
 801347a:	4b31      	ldr	r3, [pc, #196]	; (8013540 <tcp_rexmit_rto_prepare+0xd4>)
 801347c:	f240 6263 	movw	r2, #1635	; 0x663
 8013480:	4930      	ldr	r1, [pc, #192]	; (8013544 <tcp_rexmit_rto_prepare+0xd8>)
 8013482:	4831      	ldr	r0, [pc, #196]	; (8013548 <tcp_rexmit_rto_prepare+0xdc>)
 8013484:	f006 ff54 	bl	801a330 <iprintf>

  if (pcb->unacked == NULL) {
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801348c:	2b00      	cmp	r3, #0
 801348e:	d102      	bne.n	8013496 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013490:	f06f 0305 	mvn.w	r3, #5
 8013494:	e050      	b.n	8013538 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801349a:	60fb      	str	r3, [r7, #12]
 801349c:	e00b      	b.n	80134b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801349e:	68f8      	ldr	r0, [r7, #12]
 80134a0:	f7ff fee6 	bl	8013270 <tcp_output_segment_busy>
 80134a4:	4603      	mov	r3, r0
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d002      	beq.n	80134b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80134aa:	f06f 0305 	mvn.w	r3, #5
 80134ae:	e043      	b.n	8013538 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	60fb      	str	r3, [r7, #12]
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	681b      	ldr	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d1ef      	bne.n	801349e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80134be:	68f8      	ldr	r0, [r7, #12]
 80134c0:	f7ff fed6 	bl	8013270 <tcp_output_segment_busy>
 80134c4:	4603      	mov	r3, r0
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d002      	beq.n	80134d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80134ca:	f06f 0305 	mvn.w	r3, #5
 80134ce:	e033      	b.n	8013538 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2200      	movs	r2, #0
 80134e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	8b5b      	ldrh	r3, [r3, #26]
 80134ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80134ee:	b29a      	uxth	r2, r3
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	68db      	ldr	r3, [r3, #12]
 80134f8:	685b      	ldr	r3, [r3, #4]
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7f7 fbcb 	bl	800ac96 <lwip_htonl>
 8013500:	4604      	mov	r4, r0
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	891b      	ldrh	r3, [r3, #8]
 8013506:	461d      	mov	r5, r3
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	68db      	ldr	r3, [r3, #12]
 801350c:	899b      	ldrh	r3, [r3, #12]
 801350e:	b29b      	uxth	r3, r3
 8013510:	4618      	mov	r0, r3
 8013512:	f7f7 fbab 	bl	800ac6c <lwip_htons>
 8013516:	4603      	mov	r3, r0
 8013518:	b2db      	uxtb	r3, r3
 801351a:	f003 0303 	and.w	r3, r3, #3
 801351e:	2b00      	cmp	r3, #0
 8013520:	d001      	beq.n	8013526 <tcp_rexmit_rto_prepare+0xba>
 8013522:	2301      	movs	r3, #1
 8013524:	e000      	b.n	8013528 <tcp_rexmit_rto_prepare+0xbc>
 8013526:	2300      	movs	r3, #0
 8013528:	442b      	add	r3, r5
 801352a:	18e2      	adds	r2, r4, r3
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2200      	movs	r2, #0
 8013534:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013536:	2300      	movs	r3, #0
}
 8013538:	4618      	mov	r0, r3
 801353a:	3710      	adds	r7, #16
 801353c:	46bd      	mov	sp, r7
 801353e:	bdb0      	pop	{r4, r5, r7, pc}
 8013540:	08020bdc 	.word	0x08020bdc
 8013544:	08021218 	.word	0x08021218
 8013548:	08020c30 	.word	0x08020c30

0801354c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	2b00      	cmp	r3, #0
 8013558:	d106      	bne.n	8013568 <tcp_rexmit_rto_commit+0x1c>
 801355a:	4b0d      	ldr	r3, [pc, #52]	; (8013590 <tcp_rexmit_rto_commit+0x44>)
 801355c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013560:	490c      	ldr	r1, [pc, #48]	; (8013594 <tcp_rexmit_rto_commit+0x48>)
 8013562:	480d      	ldr	r0, [pc, #52]	; (8013598 <tcp_rexmit_rto_commit+0x4c>)
 8013564:	f006 fee4 	bl	801a330 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801356e:	2bff      	cmp	r3, #255	; 0xff
 8013570:	d007      	beq.n	8013582 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013578:	3301      	adds	r3, #1
 801357a:	b2da      	uxtb	r2, r3
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	f7ff fc80 	bl	8012e88 <tcp_output>
}
 8013588:	bf00      	nop
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	08020bdc 	.word	0x08020bdc
 8013594:	0802123c 	.word	0x0802123c
 8013598:	08020c30 	.word	0x08020c30

0801359c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b082      	sub	sp, #8
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d106      	bne.n	80135b8 <tcp_rexmit_rto+0x1c>
 80135aa:	4b0a      	ldr	r3, [pc, #40]	; (80135d4 <tcp_rexmit_rto+0x38>)
 80135ac:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80135b0:	4909      	ldr	r1, [pc, #36]	; (80135d8 <tcp_rexmit_rto+0x3c>)
 80135b2:	480a      	ldr	r0, [pc, #40]	; (80135dc <tcp_rexmit_rto+0x40>)
 80135b4:	f006 febc 	bl	801a330 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	f7ff ff57 	bl	801346c <tcp_rexmit_rto_prepare>
 80135be:	4603      	mov	r3, r0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d102      	bne.n	80135ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80135c4:	6878      	ldr	r0, [r7, #4]
 80135c6:	f7ff ffc1 	bl	801354c <tcp_rexmit_rto_commit>
  }
}
 80135ca:	bf00      	nop
 80135cc:	3708      	adds	r7, #8
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	08020bdc 	.word	0x08020bdc
 80135d8:	08021260 	.word	0x08021260
 80135dc:	08020c30 	.word	0x08020c30

080135e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80135e0:	b590      	push	{r4, r7, lr}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d106      	bne.n	80135fc <tcp_rexmit+0x1c>
 80135ee:	4b2f      	ldr	r3, [pc, #188]	; (80136ac <tcp_rexmit+0xcc>)
 80135f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80135f4:	492e      	ldr	r1, [pc, #184]	; (80136b0 <tcp_rexmit+0xd0>)
 80135f6:	482f      	ldr	r0, [pc, #188]	; (80136b4 <tcp_rexmit+0xd4>)
 80135f8:	f006 fe9a 	bl	801a330 <iprintf>

  if (pcb->unacked == NULL) {
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013600:	2b00      	cmp	r3, #0
 8013602:	d102      	bne.n	801360a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013604:	f06f 0305 	mvn.w	r3, #5
 8013608:	e04c      	b.n	80136a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801360e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013610:	68b8      	ldr	r0, [r7, #8]
 8013612:	f7ff fe2d 	bl	8013270 <tcp_output_segment_busy>
 8013616:	4603      	mov	r3, r0
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801361c:	f06f 0305 	mvn.w	r3, #5
 8013620:	e040      	b.n	80136a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	336c      	adds	r3, #108	; 0x6c
 801362e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013630:	e002      	b.n	8013638 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	2b00      	cmp	r3, #0
 801363e:	d011      	beq.n	8013664 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	4618      	mov	r0, r3
 801364a:	f7f7 fb24 	bl	800ac96 <lwip_htonl>
 801364e:	4604      	mov	r4, r0
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	68db      	ldr	r3, [r3, #12]
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	4618      	mov	r0, r3
 8013658:	f7f7 fb1d 	bl	800ac96 <lwip_htonl>
 801365c:	4603      	mov	r3, r0
 801365e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013660:	2b00      	cmp	r3, #0
 8013662:	dbe6      	blt.n	8013632 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	681a      	ldr	r2, [r3, #0]
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	68ba      	ldr	r2, [r7, #8]
 8013670:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013672:	68bb      	ldr	r3, [r7, #8]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d103      	bne.n	8013682 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	2200      	movs	r2, #0
 801367e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013688:	2bff      	cmp	r3, #255	; 0xff
 801368a:	d007      	beq.n	801369c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013692:	3301      	adds	r3, #1
 8013694:	b2da      	uxtb	r2, r3
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2200      	movs	r2, #0
 80136a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80136a2:	2300      	movs	r3, #0
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3714      	adds	r7, #20
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd90      	pop	{r4, r7, pc}
 80136ac:	08020bdc 	.word	0x08020bdc
 80136b0:	0802127c 	.word	0x0802127c
 80136b4:	08020c30 	.word	0x08020c30

080136b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b082      	sub	sp, #8
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d106      	bne.n	80136d4 <tcp_rexmit_fast+0x1c>
 80136c6:	4b2a      	ldr	r3, [pc, #168]	; (8013770 <tcp_rexmit_fast+0xb8>)
 80136c8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80136cc:	4929      	ldr	r1, [pc, #164]	; (8013774 <tcp_rexmit_fast+0xbc>)
 80136ce:	482a      	ldr	r0, [pc, #168]	; (8013778 <tcp_rexmit_fast+0xc0>)
 80136d0:	f006 fe2e 	bl	801a330 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d045      	beq.n	8013768 <tcp_rexmit_fast+0xb0>
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	8b5b      	ldrh	r3, [r3, #26]
 80136e0:	f003 0304 	and.w	r3, r3, #4
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d13f      	bne.n	8013768 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80136e8:	6878      	ldr	r0, [r7, #4]
 80136ea:	f7ff ff79 	bl	80135e0 <tcp_rexmit>
 80136ee:	4603      	mov	r3, r0
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d139      	bne.n	8013768 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013700:	4293      	cmp	r3, r2
 8013702:	bf28      	it	cs
 8013704:	4613      	movcs	r3, r2
 8013706:	b29b      	uxth	r3, r3
 8013708:	2b00      	cmp	r3, #0
 801370a:	da00      	bge.n	801370e <tcp_rexmit_fast+0x56>
 801370c:	3301      	adds	r3, #1
 801370e:	105b      	asrs	r3, r3, #1
 8013710:	b29a      	uxth	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801371e:	461a      	mov	r2, r3
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013724:	005b      	lsls	r3, r3, #1
 8013726:	429a      	cmp	r2, r3
 8013728:	d206      	bcs.n	8013738 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801372e:	005b      	lsls	r3, r3, #1
 8013730:	b29a      	uxth	r2, r3
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013742:	4619      	mov	r1, r3
 8013744:	0049      	lsls	r1, r1, #1
 8013746:	440b      	add	r3, r1
 8013748:	b29b      	uxth	r3, r3
 801374a:	4413      	add	r3, r2
 801374c:	b29a      	uxth	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	8b5b      	ldrh	r3, [r3, #26]
 8013758:	f043 0304 	orr.w	r3, r3, #4
 801375c:	b29a      	uxth	r2, r3
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	2200      	movs	r2, #0
 8013766:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013768:	bf00      	nop
 801376a:	3708      	adds	r7, #8
 801376c:	46bd      	mov	sp, r7
 801376e:	bd80      	pop	{r7, pc}
 8013770:	08020bdc 	.word	0x08020bdc
 8013774:	08021294 	.word	0x08021294
 8013778:	08020c30 	.word	0x08020c30

0801377c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801377c:	b580      	push	{r7, lr}
 801377e:	b086      	sub	sp, #24
 8013780:	af00      	add	r7, sp, #0
 8013782:	60f8      	str	r0, [r7, #12]
 8013784:	607b      	str	r3, [r7, #4]
 8013786:	460b      	mov	r3, r1
 8013788:	817b      	strh	r3, [r7, #10]
 801378a:	4613      	mov	r3, r2
 801378c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801378e:	897a      	ldrh	r2, [r7, #10]
 8013790:	893b      	ldrh	r3, [r7, #8]
 8013792:	4413      	add	r3, r2
 8013794:	b29b      	uxth	r3, r3
 8013796:	3314      	adds	r3, #20
 8013798:	b29b      	uxth	r3, r3
 801379a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801379e:	4619      	mov	r1, r3
 80137a0:	2022      	movs	r0, #34	; 0x22
 80137a2:	f7f9 fb0d 	bl	800cdc0 <pbuf_alloc>
 80137a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d04d      	beq.n	801384a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80137ae:	897b      	ldrh	r3, [r7, #10]
 80137b0:	3313      	adds	r3, #19
 80137b2:	697a      	ldr	r2, [r7, #20]
 80137b4:	8952      	ldrh	r2, [r2, #10]
 80137b6:	4293      	cmp	r3, r2
 80137b8:	db06      	blt.n	80137c8 <tcp_output_alloc_header_common+0x4c>
 80137ba:	4b26      	ldr	r3, [pc, #152]	; (8013854 <tcp_output_alloc_header_common+0xd8>)
 80137bc:	f240 7223 	movw	r2, #1827	; 0x723
 80137c0:	4925      	ldr	r1, [pc, #148]	; (8013858 <tcp_output_alloc_header_common+0xdc>)
 80137c2:	4826      	ldr	r0, [pc, #152]	; (801385c <tcp_output_alloc_header_common+0xe0>)
 80137c4:	f006 fdb4 	bl	801a330 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80137ce:	8c3b      	ldrh	r3, [r7, #32]
 80137d0:	4618      	mov	r0, r3
 80137d2:	f7f7 fa4b 	bl	800ac6c <lwip_htons>
 80137d6:	4603      	mov	r3, r0
 80137d8:	461a      	mov	r2, r3
 80137da:	693b      	ldr	r3, [r7, #16]
 80137dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80137de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7f7 fa43 	bl	800ac6c <lwip_htons>
 80137e6:	4603      	mov	r3, r0
 80137e8:	461a      	mov	r2, r3
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f7f7 fa4e 	bl	800ac96 <lwip_htonl>
 80137fa:	4602      	mov	r2, r0
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013800:	897b      	ldrh	r3, [r7, #10]
 8013802:	089b      	lsrs	r3, r3, #2
 8013804:	b29b      	uxth	r3, r3
 8013806:	3305      	adds	r3, #5
 8013808:	b29b      	uxth	r3, r3
 801380a:	031b      	lsls	r3, r3, #12
 801380c:	b29a      	uxth	r2, r3
 801380e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013812:	b29b      	uxth	r3, r3
 8013814:	4313      	orrs	r3, r2
 8013816:	b29b      	uxth	r3, r3
 8013818:	4618      	mov	r0, r3
 801381a:	f7f7 fa27 	bl	800ac6c <lwip_htons>
 801381e:	4603      	mov	r3, r0
 8013820:	461a      	mov	r2, r3
 8013822:	693b      	ldr	r3, [r7, #16]
 8013824:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013826:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013828:	4618      	mov	r0, r3
 801382a:	f7f7 fa1f 	bl	800ac6c <lwip_htons>
 801382e:	4603      	mov	r3, r0
 8013830:	461a      	mov	r2, r3
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	2200      	movs	r2, #0
 801383a:	741a      	strb	r2, [r3, #16]
 801383c:	2200      	movs	r2, #0
 801383e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	2200      	movs	r2, #0
 8013844:	749a      	strb	r2, [r3, #18]
 8013846:	2200      	movs	r2, #0
 8013848:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801384a:	697b      	ldr	r3, [r7, #20]
}
 801384c:	4618      	mov	r0, r3
 801384e:	3718      	adds	r7, #24
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	08020bdc 	.word	0x08020bdc
 8013858:	080212b4 	.word	0x080212b4
 801385c:	08020c30 	.word	0x08020c30

08013860 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013860:	b5b0      	push	{r4, r5, r7, lr}
 8013862:	b08a      	sub	sp, #40	; 0x28
 8013864:	af04      	add	r7, sp, #16
 8013866:	60f8      	str	r0, [r7, #12]
 8013868:	607b      	str	r3, [r7, #4]
 801386a:	460b      	mov	r3, r1
 801386c:	817b      	strh	r3, [r7, #10]
 801386e:	4613      	mov	r3, r2
 8013870:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d106      	bne.n	8013886 <tcp_output_alloc_header+0x26>
 8013878:	4b15      	ldr	r3, [pc, #84]	; (80138d0 <tcp_output_alloc_header+0x70>)
 801387a:	f240 7242 	movw	r2, #1858	; 0x742
 801387e:	4915      	ldr	r1, [pc, #84]	; (80138d4 <tcp_output_alloc_header+0x74>)
 8013880:	4815      	ldr	r0, [pc, #84]	; (80138d8 <tcp_output_alloc_header+0x78>)
 8013882:	f006 fd55 	bl	801a330 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	8adb      	ldrh	r3, [r3, #22]
 801388e:	68fa      	ldr	r2, [r7, #12]
 8013890:	8b12      	ldrh	r2, [r2, #24]
 8013892:	68f9      	ldr	r1, [r7, #12]
 8013894:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013896:	893d      	ldrh	r5, [r7, #8]
 8013898:	897c      	ldrh	r4, [r7, #10]
 801389a:	9103      	str	r1, [sp, #12]
 801389c:	2110      	movs	r1, #16
 801389e:	9102      	str	r1, [sp, #8]
 80138a0:	9201      	str	r2, [sp, #4]
 80138a2:	9300      	str	r3, [sp, #0]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	462a      	mov	r2, r5
 80138a8:	4621      	mov	r1, r4
 80138aa:	f7ff ff67 	bl	801377c <tcp_output_alloc_header_common>
 80138ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d006      	beq.n	80138c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ba:	68fa      	ldr	r2, [r7, #12]
 80138bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80138be:	441a      	add	r2, r3
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80138c4:	697b      	ldr	r3, [r7, #20]
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3718      	adds	r7, #24
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bdb0      	pop	{r4, r5, r7, pc}
 80138ce:	bf00      	nop
 80138d0:	08020bdc 	.word	0x08020bdc
 80138d4:	080212e4 	.word	0x080212e4
 80138d8:	08020c30 	.word	0x08020c30

080138dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b088      	sub	sp, #32
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	60f8      	str	r0, [r7, #12]
 80138e4:	60b9      	str	r1, [r7, #8]
 80138e6:	4611      	mov	r1, r2
 80138e8:	461a      	mov	r2, r3
 80138ea:	460b      	mov	r3, r1
 80138ec:	71fb      	strb	r3, [r7, #7]
 80138ee:	4613      	mov	r3, r2
 80138f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80138f6:	68bb      	ldr	r3, [r7, #8]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d106      	bne.n	801390a <tcp_output_fill_options+0x2e>
 80138fc:	4b13      	ldr	r3, [pc, #76]	; (801394c <tcp_output_fill_options+0x70>)
 80138fe:	f240 7256 	movw	r2, #1878	; 0x756
 8013902:	4913      	ldr	r1, [pc, #76]	; (8013950 <tcp_output_fill_options+0x74>)
 8013904:	4813      	ldr	r0, [pc, #76]	; (8013954 <tcp_output_fill_options+0x78>)
 8013906:	f006 fd13 	bl	801a330 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	3314      	adds	r3, #20
 8013914:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013916:	69bb      	ldr	r3, [r7, #24]
 8013918:	f103 0214 	add.w	r2, r3, #20
 801391c:	8bfb      	ldrh	r3, [r7, #30]
 801391e:	009b      	lsls	r3, r3, #2
 8013920:	4619      	mov	r1, r3
 8013922:	79fb      	ldrb	r3, [r7, #7]
 8013924:	009b      	lsls	r3, r3, #2
 8013926:	f003 0304 	and.w	r3, r3, #4
 801392a:	440b      	add	r3, r1
 801392c:	4413      	add	r3, r2
 801392e:	697a      	ldr	r2, [r7, #20]
 8013930:	429a      	cmp	r2, r3
 8013932:	d006      	beq.n	8013942 <tcp_output_fill_options+0x66>
 8013934:	4b05      	ldr	r3, [pc, #20]	; (801394c <tcp_output_fill_options+0x70>)
 8013936:	f240 7275 	movw	r2, #1909	; 0x775
 801393a:	4907      	ldr	r1, [pc, #28]	; (8013958 <tcp_output_fill_options+0x7c>)
 801393c:	4805      	ldr	r0, [pc, #20]	; (8013954 <tcp_output_fill_options+0x78>)
 801393e:	f006 fcf7 	bl	801a330 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013942:	bf00      	nop
 8013944:	3720      	adds	r7, #32
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	08020bdc 	.word	0x08020bdc
 8013950:	0802130c 	.word	0x0802130c
 8013954:	08020c30 	.word	0x08020c30
 8013958:	08021204 	.word	0x08021204

0801395c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b08a      	sub	sp, #40	; 0x28
 8013960:	af04      	add	r7, sp, #16
 8013962:	60f8      	str	r0, [r7, #12]
 8013964:	60b9      	str	r1, [r7, #8]
 8013966:	607a      	str	r2, [r7, #4]
 8013968:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d106      	bne.n	801397e <tcp_output_control_segment+0x22>
 8013970:	4b1c      	ldr	r3, [pc, #112]	; (80139e4 <tcp_output_control_segment+0x88>)
 8013972:	f240 7287 	movw	r2, #1927	; 0x787
 8013976:	491c      	ldr	r1, [pc, #112]	; (80139e8 <tcp_output_control_segment+0x8c>)
 8013978:	481c      	ldr	r0, [pc, #112]	; (80139ec <tcp_output_control_segment+0x90>)
 801397a:	f006 fcd9 	bl	801a330 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801397e:	683a      	ldr	r2, [r7, #0]
 8013980:	6879      	ldr	r1, [r7, #4]
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f7fe fae8 	bl	8011f58 <tcp_route>
 8013988:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d102      	bne.n	8013996 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013990:	23fc      	movs	r3, #252	; 0xfc
 8013992:	75fb      	strb	r3, [r7, #23]
 8013994:	e01c      	b.n	80139d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d006      	beq.n	80139aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	7adb      	ldrb	r3, [r3, #11]
 80139a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	7a9b      	ldrb	r3, [r3, #10]
 80139a6:	757b      	strb	r3, [r7, #21]
 80139a8:	e003      	b.n	80139b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80139aa:	23ff      	movs	r3, #255	; 0xff
 80139ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80139ae:	2300      	movs	r3, #0
 80139b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80139b2:	7dba      	ldrb	r2, [r7, #22]
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	9302      	str	r3, [sp, #8]
 80139b8:	2306      	movs	r3, #6
 80139ba:	9301      	str	r3, [sp, #4]
 80139bc:	7d7b      	ldrb	r3, [r7, #21]
 80139be:	9300      	str	r3, [sp, #0]
 80139c0:	4613      	mov	r3, r2
 80139c2:	683a      	ldr	r2, [r7, #0]
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	68b8      	ldr	r0, [r7, #8]
 80139c8:	f004 fa10 	bl	8017dec <ip4_output_if>
 80139cc:	4603      	mov	r3, r0
 80139ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80139d0:	68b8      	ldr	r0, [r7, #8]
 80139d2:	f7f9 fcd9 	bl	800d388 <pbuf_free>
  return err;
 80139d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139da:	4618      	mov	r0, r3
 80139dc:	3718      	adds	r7, #24
 80139de:	46bd      	mov	sp, r7
 80139e0:	bd80      	pop	{r7, pc}
 80139e2:	bf00      	nop
 80139e4:	08020bdc 	.word	0x08020bdc
 80139e8:	08021334 	.word	0x08021334
 80139ec:	08020c30 	.word	0x08020c30

080139f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80139f0:	b590      	push	{r4, r7, lr}
 80139f2:	b08b      	sub	sp, #44	; 0x2c
 80139f4:	af04      	add	r7, sp, #16
 80139f6:	60f8      	str	r0, [r7, #12]
 80139f8:	60b9      	str	r1, [r7, #8]
 80139fa:	607a      	str	r2, [r7, #4]
 80139fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80139fe:	683b      	ldr	r3, [r7, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d106      	bne.n	8013a12 <tcp_rst+0x22>
 8013a04:	4b1f      	ldr	r3, [pc, #124]	; (8013a84 <tcp_rst+0x94>)
 8013a06:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013a0a:	491f      	ldr	r1, [pc, #124]	; (8013a88 <tcp_rst+0x98>)
 8013a0c:	481f      	ldr	r0, [pc, #124]	; (8013a8c <tcp_rst+0x9c>)
 8013a0e:	f006 fc8f 	bl	801a330 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d106      	bne.n	8013a26 <tcp_rst+0x36>
 8013a18:	4b1a      	ldr	r3, [pc, #104]	; (8013a84 <tcp_rst+0x94>)
 8013a1a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013a1e:	491c      	ldr	r1, [pc, #112]	; (8013a90 <tcp_rst+0xa0>)
 8013a20:	481a      	ldr	r0, [pc, #104]	; (8013a8c <tcp_rst+0x9c>)
 8013a22:	f006 fc85 	bl	801a330 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013a26:	2300      	movs	r3, #0
 8013a28:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013a2a:	f246 0308 	movw	r3, #24584	; 0x6008
 8013a2e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013a30:	7dfb      	ldrb	r3, [r7, #23]
 8013a32:	b29c      	uxth	r4, r3
 8013a34:	68b8      	ldr	r0, [r7, #8]
 8013a36:	f7f7 f92e 	bl	800ac96 <lwip_htonl>
 8013a3a:	4602      	mov	r2, r0
 8013a3c:	8abb      	ldrh	r3, [r7, #20]
 8013a3e:	9303      	str	r3, [sp, #12]
 8013a40:	2314      	movs	r3, #20
 8013a42:	9302      	str	r3, [sp, #8]
 8013a44:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013a46:	9301      	str	r3, [sp, #4]
 8013a48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013a4a:	9300      	str	r3, [sp, #0]
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	2200      	movs	r2, #0
 8013a50:	4621      	mov	r1, r4
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f7ff fe92 	bl	801377c <tcp_output_alloc_header_common>
 8013a58:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d00c      	beq.n	8013a7a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013a60:	7dfb      	ldrb	r3, [r7, #23]
 8013a62:	2200      	movs	r2, #0
 8013a64:	6939      	ldr	r1, [r7, #16]
 8013a66:	68f8      	ldr	r0, [r7, #12]
 8013a68:	f7ff ff38 	bl	80138dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6e:	683a      	ldr	r2, [r7, #0]
 8013a70:	6939      	ldr	r1, [r7, #16]
 8013a72:	68f8      	ldr	r0, [r7, #12]
 8013a74:	f7ff ff72 	bl	801395c <tcp_output_control_segment>
 8013a78:	e000      	b.n	8013a7c <tcp_rst+0x8c>
    return;
 8013a7a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013a7c:	371c      	adds	r7, #28
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd90      	pop	{r4, r7, pc}
 8013a82:	bf00      	nop
 8013a84:	08020bdc 	.word	0x08020bdc
 8013a88:	08021360 	.word	0x08021360
 8013a8c:	08020c30 	.word	0x08020c30
 8013a90:	0802137c 	.word	0x0802137c

08013a94 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013a94:	b590      	push	{r4, r7, lr}
 8013a96:	b087      	sub	sp, #28
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d106      	bne.n	8013ab8 <tcp_send_empty_ack+0x24>
 8013aaa:	4b28      	ldr	r3, [pc, #160]	; (8013b4c <tcp_send_empty_ack+0xb8>)
 8013aac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013ab0:	4927      	ldr	r1, [pc, #156]	; (8013b50 <tcp_send_empty_ack+0xbc>)
 8013ab2:	4828      	ldr	r0, [pc, #160]	; (8013b54 <tcp_send_empty_ack+0xc0>)
 8013ab4:	f006 fc3c 	bl	801a330 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ab8:	7dfb      	ldrb	r3, [r7, #23]
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	b2db      	uxtb	r3, r3
 8013abe:	f003 0304 	and.w	r3, r3, #4
 8013ac2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013ac4:	7d7b      	ldrb	r3, [r7, #21]
 8013ac6:	b29c      	uxth	r4, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013acc:	4618      	mov	r0, r3
 8013ace:	f7f7 f8e2 	bl	800ac96 <lwip_htonl>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f7ff fec1 	bl	8013860 <tcp_output_alloc_header>
 8013ade:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d109      	bne.n	8013afa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	8b5b      	ldrh	r3, [r3, #26]
 8013aea:	f043 0303 	orr.w	r3, r3, #3
 8013aee:	b29a      	uxth	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013af4:	f06f 0301 	mvn.w	r3, #1
 8013af8:	e023      	b.n	8013b42 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013afa:	7dbb      	ldrb	r3, [r7, #22]
 8013afc:	7dfa      	ldrb	r2, [r7, #23]
 8013afe:	6939      	ldr	r1, [r7, #16]
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7ff feeb 	bl	80138dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013b06:	687a      	ldr	r2, [r7, #4]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	6939      	ldr	r1, [r7, #16]
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7ff ff24 	bl	801395c <tcp_output_control_segment>
 8013b14:	4603      	mov	r3, r0
 8013b16:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d007      	beq.n	8013b30 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	8b5b      	ldrh	r3, [r3, #26]
 8013b24:	f043 0303 	orr.w	r3, r3, #3
 8013b28:	b29a      	uxth	r2, r3
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	835a      	strh	r2, [r3, #26]
 8013b2e:	e006      	b.n	8013b3e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	8b5b      	ldrh	r3, [r3, #26]
 8013b34:	f023 0303 	bic.w	r3, r3, #3
 8013b38:	b29a      	uxth	r2, r3
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	371c      	adds	r7, #28
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd90      	pop	{r4, r7, pc}
 8013b4a:	bf00      	nop
 8013b4c:	08020bdc 	.word	0x08020bdc
 8013b50:	08021398 	.word	0x08021398
 8013b54:	08020c30 	.word	0x08020c30

08013b58 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013b58:	b590      	push	{r4, r7, lr}
 8013b5a:	b087      	sub	sp, #28
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013b60:	2300      	movs	r3, #0
 8013b62:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d106      	bne.n	8013b78 <tcp_keepalive+0x20>
 8013b6a:	4b18      	ldr	r3, [pc, #96]	; (8013bcc <tcp_keepalive+0x74>)
 8013b6c:	f640 0224 	movw	r2, #2084	; 0x824
 8013b70:	4917      	ldr	r1, [pc, #92]	; (8013bd0 <tcp_keepalive+0x78>)
 8013b72:	4818      	ldr	r0, [pc, #96]	; (8013bd4 <tcp_keepalive+0x7c>)
 8013b74:	f006 fbdc 	bl	801a330 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013b78:	7dfb      	ldrb	r3, [r7, #23]
 8013b7a:	b29c      	uxth	r4, r3
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013b80:	3b01      	subs	r3, #1
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7f7 f887 	bl	800ac96 <lwip_htonl>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	4621      	mov	r1, r4
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f7ff fe66 	bl	8013860 <tcp_output_alloc_header>
 8013b94:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d102      	bne.n	8013ba2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba0:	e010      	b.n	8013bc4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013ba2:	7dfb      	ldrb	r3, [r7, #23]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	6939      	ldr	r1, [r7, #16]
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f7ff fe97 	bl	80138dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013bae:	687a      	ldr	r2, [r7, #4]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	3304      	adds	r3, #4
 8013bb4:	6939      	ldr	r1, [r7, #16]
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f7ff fed0 	bl	801395c <tcp_output_control_segment>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	371c      	adds	r7, #28
 8013bc8:	46bd      	mov	sp, r7
 8013bca:	bd90      	pop	{r4, r7, pc}
 8013bcc:	08020bdc 	.word	0x08020bdc
 8013bd0:	080213b8 	.word	0x080213b8
 8013bd4:	08020c30 	.word	0x08020c30

08013bd8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013bd8:	b590      	push	{r4, r7, lr}
 8013bda:	b08b      	sub	sp, #44	; 0x2c
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013be0:	2300      	movs	r3, #0
 8013be2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d106      	bne.n	8013bfa <tcp_zero_window_probe+0x22>
 8013bec:	4b4c      	ldr	r3, [pc, #304]	; (8013d20 <tcp_zero_window_probe+0x148>)
 8013bee:	f640 024f 	movw	r2, #2127	; 0x84f
 8013bf2:	494c      	ldr	r1, [pc, #304]	; (8013d24 <tcp_zero_window_probe+0x14c>)
 8013bf4:	484c      	ldr	r0, [pc, #304]	; (8013d28 <tcp_zero_window_probe+0x150>)
 8013bf6:	f006 fb9b 	bl	801a330 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bfe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013c00:	6a3b      	ldr	r3, [r7, #32]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d101      	bne.n	8013c0a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013c06:	2300      	movs	r3, #0
 8013c08:	e086      	b.n	8013d18 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c10:	2bff      	cmp	r3, #255	; 0xff
 8013c12:	d007      	beq.n	8013c24 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013c1a:	3301      	adds	r3, #1
 8013c1c:	b2da      	uxtb	r2, r3
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013c24:	6a3b      	ldr	r3, [r7, #32]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	899b      	ldrh	r3, [r3, #12]
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7f7 f81d 	bl	800ac6c <lwip_htons>
 8013c32:	4603      	mov	r3, r0
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	f003 0301 	and.w	r3, r3, #1
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d005      	beq.n	8013c4a <tcp_zero_window_probe+0x72>
 8013c3e:	6a3b      	ldr	r3, [r7, #32]
 8013c40:	891b      	ldrh	r3, [r3, #8]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d101      	bne.n	8013c4a <tcp_zero_window_probe+0x72>
 8013c46:	2301      	movs	r3, #1
 8013c48:	e000      	b.n	8013c4c <tcp_zero_window_probe+0x74>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013c4e:	7ffb      	ldrb	r3, [r7, #31]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	bf0c      	ite	eq
 8013c54:	2301      	moveq	r3, #1
 8013c56:	2300      	movne	r3, #0
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c60:	b299      	uxth	r1, r3
 8013c62:	6a3b      	ldr	r3, [r7, #32]
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	685b      	ldr	r3, [r3, #4]
 8013c68:	8bba      	ldrh	r2, [r7, #28]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f7ff fdf8 	bl	8013860 <tcp_output_alloc_header>
 8013c70:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d102      	bne.n	8013c7e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013c78:	f04f 33ff 	mov.w	r3, #4294967295
 8013c7c:	e04c      	b.n	8013d18 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013c84:	7ffb      	ldrb	r3, [r7, #31]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d011      	beq.n	8013cae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	899b      	ldrh	r3, [r3, #12]
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	b21b      	sxth	r3, r3
 8013c92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c96:	b21c      	sxth	r4, r3
 8013c98:	2011      	movs	r0, #17
 8013c9a:	f7f6 ffe7 	bl	800ac6c <lwip_htons>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	b21b      	sxth	r3, r3
 8013ca2:	4323      	orrs	r3, r4
 8013ca4:	b21b      	sxth	r3, r3
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	819a      	strh	r2, [r3, #12]
 8013cac:	e010      	b.n	8013cd0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013cae:	69bb      	ldr	r3, [r7, #24]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	3314      	adds	r3, #20
 8013cb4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013cb6:	6a3b      	ldr	r3, [r7, #32]
 8013cb8:	6858      	ldr	r0, [r3, #4]
 8013cba:	6a3b      	ldr	r3, [r7, #32]
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	891a      	ldrh	r2, [r3, #8]
 8013cc0:	6a3b      	ldr	r3, [r7, #32]
 8013cc2:	891b      	ldrh	r3, [r3, #8]
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	b29b      	uxth	r3, r3
 8013cc8:	2201      	movs	r2, #1
 8013cca:	6939      	ldr	r1, [r7, #16]
 8013ccc:	f7f9 fd62 	bl	800d794 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013cd0:	6a3b      	ldr	r3, [r7, #32]
 8013cd2:	68db      	ldr	r3, [r3, #12]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	f7f6 ffdd 	bl	800ac96 <lwip_htonl>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	3301      	adds	r3, #1
 8013ce0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	1ad3      	subs	r3, r2, r3
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	da02      	bge.n	8013cf4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	68fa      	ldr	r2, [r7, #12]
 8013cf2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	69b9      	ldr	r1, [r7, #24]
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7ff fded 	bl	80138dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013d02:	687a      	ldr	r2, [r7, #4]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	3304      	adds	r3, #4
 8013d08:	69b9      	ldr	r1, [r7, #24]
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f7ff fe26 	bl	801395c <tcp_output_control_segment>
 8013d10:	4603      	mov	r3, r0
 8013d12:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013d14:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	372c      	adds	r7, #44	; 0x2c
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd90      	pop	{r4, r7, pc}
 8013d20:	08020bdc 	.word	0x08020bdc
 8013d24:	080213d4 	.word	0x080213d4
 8013d28:	08020c30 	.word	0x08020c30

08013d2c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b082      	sub	sp, #8
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013d34:	f7f9 ff98 	bl	800dc68 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013d38:	4b0a      	ldr	r3, [pc, #40]	; (8013d64 <tcpip_tcp_timer+0x38>)
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d103      	bne.n	8013d48 <tcpip_tcp_timer+0x1c>
 8013d40:	4b09      	ldr	r3, [pc, #36]	; (8013d68 <tcpip_tcp_timer+0x3c>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d005      	beq.n	8013d54 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013d48:	2200      	movs	r2, #0
 8013d4a:	4908      	ldr	r1, [pc, #32]	; (8013d6c <tcpip_tcp_timer+0x40>)
 8013d4c:	20fa      	movs	r0, #250	; 0xfa
 8013d4e:	f000 f8f3 	bl	8013f38 <sys_timeout>
 8013d52:	e003      	b.n	8013d5c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013d54:	4b06      	ldr	r3, [pc, #24]	; (8013d70 <tcpip_tcp_timer+0x44>)
 8013d56:	2200      	movs	r2, #0
 8013d58:	601a      	str	r2, [r3, #0]
  }
}
 8013d5a:	bf00      	nop
 8013d5c:	bf00      	nop
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}
 8013d64:	200280ac 	.word	0x200280ac
 8013d68:	200280bc 	.word	0x200280bc
 8013d6c:	08013d2d 	.word	0x08013d2d
 8013d70:	200214dc 	.word	0x200214dc

08013d74 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013d78:	4b0a      	ldr	r3, [pc, #40]	; (8013da4 <tcp_timer_needed+0x30>)
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d10f      	bne.n	8013da0 <tcp_timer_needed+0x2c>
 8013d80:	4b09      	ldr	r3, [pc, #36]	; (8013da8 <tcp_timer_needed+0x34>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d103      	bne.n	8013d90 <tcp_timer_needed+0x1c>
 8013d88:	4b08      	ldr	r3, [pc, #32]	; (8013dac <tcp_timer_needed+0x38>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d007      	beq.n	8013da0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013d90:	4b04      	ldr	r3, [pc, #16]	; (8013da4 <tcp_timer_needed+0x30>)
 8013d92:	2201      	movs	r2, #1
 8013d94:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013d96:	2200      	movs	r2, #0
 8013d98:	4905      	ldr	r1, [pc, #20]	; (8013db0 <tcp_timer_needed+0x3c>)
 8013d9a:	20fa      	movs	r0, #250	; 0xfa
 8013d9c:	f000 f8cc 	bl	8013f38 <sys_timeout>
  }
}
 8013da0:	bf00      	nop
 8013da2:	bd80      	pop	{r7, pc}
 8013da4:	200214dc 	.word	0x200214dc
 8013da8:	200280ac 	.word	0x200280ac
 8013dac:	200280bc 	.word	0x200280bc
 8013db0:	08013d2d 	.word	0x08013d2d

08013db4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b086      	sub	sp, #24
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	60f8      	str	r0, [r7, #12]
 8013dbc:	60b9      	str	r1, [r7, #8]
 8013dbe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013dc0:	200a      	movs	r0, #10
 8013dc2:	f7f8 fbdf 	bl	800c584 <memp_malloc>
 8013dc6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d109      	bne.n	8013de2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d151      	bne.n	8013e78 <sys_timeout_abs+0xc4>
 8013dd4:	4b2a      	ldr	r3, [pc, #168]	; (8013e80 <sys_timeout_abs+0xcc>)
 8013dd6:	22be      	movs	r2, #190	; 0xbe
 8013dd8:	492a      	ldr	r1, [pc, #168]	; (8013e84 <sys_timeout_abs+0xd0>)
 8013dda:	482b      	ldr	r0, [pc, #172]	; (8013e88 <sys_timeout_abs+0xd4>)
 8013ddc:	f006 faa8 	bl	801a330 <iprintf>
    return;
 8013de0:	e04a      	b.n	8013e78 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	2200      	movs	r2, #0
 8013de6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013de8:	693b      	ldr	r3, [r7, #16]
 8013dea:	68ba      	ldr	r2, [r7, #8]
 8013dec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	687a      	ldr	r2, [r7, #4]
 8013df2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013df4:	693b      	ldr	r3, [r7, #16]
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013dfa:	4b24      	ldr	r3, [pc, #144]	; (8013e8c <sys_timeout_abs+0xd8>)
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d103      	bne.n	8013e0a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013e02:	4a22      	ldr	r2, [pc, #136]	; (8013e8c <sys_timeout_abs+0xd8>)
 8013e04:	693b      	ldr	r3, [r7, #16]
 8013e06:	6013      	str	r3, [r2, #0]
    return;
 8013e08:	e037      	b.n	8013e7a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	685a      	ldr	r2, [r3, #4]
 8013e0e:	4b1f      	ldr	r3, [pc, #124]	; (8013e8c <sys_timeout_abs+0xd8>)
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	1ad3      	subs	r3, r2, r3
 8013e16:	0fdb      	lsrs	r3, r3, #31
 8013e18:	f003 0301 	and.w	r3, r3, #1
 8013e1c:	b2db      	uxtb	r3, r3
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d007      	beq.n	8013e32 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013e22:	4b1a      	ldr	r3, [pc, #104]	; (8013e8c <sys_timeout_abs+0xd8>)
 8013e24:	681a      	ldr	r2, [r3, #0]
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013e2a:	4a18      	ldr	r2, [pc, #96]	; (8013e8c <sys_timeout_abs+0xd8>)
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	6013      	str	r3, [r2, #0]
 8013e30:	e023      	b.n	8013e7a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e32:	4b16      	ldr	r3, [pc, #88]	; (8013e8c <sys_timeout_abs+0xd8>)
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	617b      	str	r3, [r7, #20]
 8013e38:	e01a      	b.n	8013e70 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013e3a:	697b      	ldr	r3, [r7, #20]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d00b      	beq.n	8013e5a <sys_timeout_abs+0xa6>
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	685a      	ldr	r2, [r3, #4]
 8013e46:	697b      	ldr	r3, [r7, #20]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	1ad3      	subs	r3, r2, r3
 8013e4e:	0fdb      	lsrs	r3, r3, #31
 8013e50:	f003 0301 	and.w	r3, r3, #1
 8013e54:	b2db      	uxtb	r3, r3
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d007      	beq.n	8013e6a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	681a      	ldr	r2, [r3, #0]
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	693a      	ldr	r2, [r7, #16]
 8013e66:	601a      	str	r2, [r3, #0]
        break;
 8013e68:	e007      	b.n	8013e7a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013e6a:	697b      	ldr	r3, [r7, #20]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	617b      	str	r3, [r7, #20]
 8013e70:	697b      	ldr	r3, [r7, #20]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d1e1      	bne.n	8013e3a <sys_timeout_abs+0x86>
 8013e76:	e000      	b.n	8013e7a <sys_timeout_abs+0xc6>
    return;
 8013e78:	bf00      	nop
      }
    }
  }
}
 8013e7a:	3718      	adds	r7, #24
 8013e7c:	46bd      	mov	sp, r7
 8013e7e:	bd80      	pop	{r7, pc}
 8013e80:	080213f8 	.word	0x080213f8
 8013e84:	0802142c 	.word	0x0802142c
 8013e88:	0802146c 	.word	0x0802146c
 8013e8c:	200214d4 	.word	0x200214d4

08013e90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b086      	sub	sp, #24
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	4798      	blx	r3

  now = sys_now();
 8013ea2:	f7f1 fae5 	bl	8005470 <sys_now>
 8013ea6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ea8:	697b      	ldr	r3, [r7, #20]
 8013eaa:	681a      	ldr	r2, [r3, #0]
 8013eac:	4b0f      	ldr	r3, [pc, #60]	; (8013eec <lwip_cyclic_timer+0x5c>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	4413      	add	r3, r2
 8013eb2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013eb4:	68fa      	ldr	r2, [r7, #12]
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	1ad3      	subs	r3, r2, r3
 8013eba:	0fdb      	lsrs	r3, r3, #31
 8013ebc:	f003 0301 	and.w	r3, r3, #1
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d009      	beq.n	8013eda <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013ec6:	697b      	ldr	r3, [r7, #20]
 8013ec8:	681a      	ldr	r2, [r3, #0]
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	4413      	add	r3, r2
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	4907      	ldr	r1, [pc, #28]	; (8013ef0 <lwip_cyclic_timer+0x60>)
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7ff ff6e 	bl	8013db4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013ed8:	e004      	b.n	8013ee4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013eda:	687a      	ldr	r2, [r7, #4]
 8013edc:	4904      	ldr	r1, [pc, #16]	; (8013ef0 <lwip_cyclic_timer+0x60>)
 8013ede:	68f8      	ldr	r0, [r7, #12]
 8013ee0:	f7ff ff68 	bl	8013db4 <sys_timeout_abs>
}
 8013ee4:	bf00      	nop
 8013ee6:	3718      	adds	r7, #24
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}
 8013eec:	200214d8 	.word	0x200214d8
 8013ef0:	08013e91 	.word	0x08013e91

08013ef4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013efa:	2301      	movs	r3, #1
 8013efc:	607b      	str	r3, [r7, #4]
 8013efe:	e00e      	b.n	8013f1e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013f00:	4a0b      	ldr	r2, [pc, #44]	; (8013f30 <sys_timeouts_init+0x3c>)
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	00db      	lsls	r3, r3, #3
 8013f0c:	4a08      	ldr	r2, [pc, #32]	; (8013f30 <sys_timeouts_init+0x3c>)
 8013f0e:	4413      	add	r3, r2
 8013f10:	461a      	mov	r2, r3
 8013f12:	4908      	ldr	r1, [pc, #32]	; (8013f34 <sys_timeouts_init+0x40>)
 8013f14:	f000 f810 	bl	8013f38 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	607b      	str	r3, [r7, #4]
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2b05      	cmp	r3, #5
 8013f22:	d9ed      	bls.n	8013f00 <sys_timeouts_init+0xc>
  }
}
 8013f24:	bf00      	nop
 8013f26:	bf00      	nop
 8013f28:	3708      	adds	r7, #8
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	08022458 	.word	0x08022458
 8013f34:	08013e91 	.word	0x08013e91

08013f38 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b086      	sub	sp, #24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f4a:	d306      	bcc.n	8013f5a <sys_timeout+0x22>
 8013f4c:	4b0a      	ldr	r3, [pc, #40]	; (8013f78 <sys_timeout+0x40>)
 8013f4e:	f240 1229 	movw	r2, #297	; 0x129
 8013f52:	490a      	ldr	r1, [pc, #40]	; (8013f7c <sys_timeout+0x44>)
 8013f54:	480a      	ldr	r0, [pc, #40]	; (8013f80 <sys_timeout+0x48>)
 8013f56:	f006 f9eb 	bl	801a330 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013f5a:	f7f1 fa89 	bl	8005470 <sys_now>
 8013f5e:	4602      	mov	r2, r0
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	4413      	add	r3, r2
 8013f64:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	68b9      	ldr	r1, [r7, #8]
 8013f6a:	6978      	ldr	r0, [r7, #20]
 8013f6c:	f7ff ff22 	bl	8013db4 <sys_timeout_abs>
#endif
}
 8013f70:	bf00      	nop
 8013f72:	3718      	adds	r7, #24
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	080213f8 	.word	0x080213f8
 8013f7c:	08021494 	.word	0x08021494
 8013f80:	0802146c 	.word	0x0802146c

08013f84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013f8a:	f7f1 fa71 	bl	8005470 <sys_now>
 8013f8e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013f90:	4b17      	ldr	r3, [pc, #92]	; (8013ff0 <sys_check_timeouts+0x6c>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d022      	beq.n	8013fe2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	685b      	ldr	r3, [r3, #4]
 8013fa0:	68fa      	ldr	r2, [r7, #12]
 8013fa2:	1ad3      	subs	r3, r2, r3
 8013fa4:	0fdb      	lsrs	r3, r3, #31
 8013fa6:	f003 0301 	and.w	r3, r3, #1
 8013faa:	b2db      	uxtb	r3, r3
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d11a      	bne.n	8013fe6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4a0e      	ldr	r2, [pc, #56]	; (8013ff0 <sys_check_timeouts+0x6c>)
 8013fb6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	689b      	ldr	r3, [r3, #8]
 8013fbc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	68db      	ldr	r3, [r3, #12]
 8013fc2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	685b      	ldr	r3, [r3, #4]
 8013fc8:	4a0a      	ldr	r2, [pc, #40]	; (8013ff4 <sys_check_timeouts+0x70>)
 8013fca:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013fcc:	68b9      	ldr	r1, [r7, #8]
 8013fce:	200a      	movs	r0, #10
 8013fd0:	f7f8 fb2a 	bl	800c628 <memp_free>
    if (handler != NULL) {
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d0da      	beq.n	8013f90 <sys_check_timeouts+0xc>
      handler(arg);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6838      	ldr	r0, [r7, #0]
 8013fde:	4798      	blx	r3
  do {
 8013fe0:	e7d6      	b.n	8013f90 <sys_check_timeouts+0xc>
      return;
 8013fe2:	bf00      	nop
 8013fe4:	e000      	b.n	8013fe8 <sys_check_timeouts+0x64>
      return;
 8013fe6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013fe8:	3710      	adds	r7, #16
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	200214d4 	.word	0x200214d4
 8013ff4:	200214d8 	.word	0x200214d8

08013ff8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013ffe:	4b16      	ldr	r3, [pc, #88]	; (8014058 <sys_timeouts_sleeptime+0x60>)
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d102      	bne.n	801400c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014006:	f04f 33ff 	mov.w	r3, #4294967295
 801400a:	e020      	b.n	801404e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801400c:	f7f1 fa30 	bl	8005470 <sys_now>
 8014010:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014012:	4b11      	ldr	r3, [pc, #68]	; (8014058 <sys_timeouts_sleeptime+0x60>)
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	685a      	ldr	r2, [r3, #4]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	1ad3      	subs	r3, r2, r3
 801401c:	0fdb      	lsrs	r3, r3, #31
 801401e:	f003 0301 	and.w	r3, r3, #1
 8014022:	b2db      	uxtb	r3, r3
 8014024:	2b00      	cmp	r3, #0
 8014026:	d001      	beq.n	801402c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014028:	2300      	movs	r3, #0
 801402a:	e010      	b.n	801404e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801402c:	4b0a      	ldr	r3, [pc, #40]	; (8014058 <sys_timeouts_sleeptime+0x60>)
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	685a      	ldr	r2, [r3, #4]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	1ad3      	subs	r3, r2, r3
 8014036:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	da06      	bge.n	801404c <sys_timeouts_sleeptime+0x54>
 801403e:	4b07      	ldr	r3, [pc, #28]	; (801405c <sys_timeouts_sleeptime+0x64>)
 8014040:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014044:	4906      	ldr	r1, [pc, #24]	; (8014060 <sys_timeouts_sleeptime+0x68>)
 8014046:	4807      	ldr	r0, [pc, #28]	; (8014064 <sys_timeouts_sleeptime+0x6c>)
 8014048:	f006 f972 	bl	801a330 <iprintf>
    return ret;
 801404c:	683b      	ldr	r3, [r7, #0]
  }
}
 801404e:	4618      	mov	r0, r3
 8014050:	3708      	adds	r7, #8
 8014052:	46bd      	mov	sp, r7
 8014054:	bd80      	pop	{r7, pc}
 8014056:	bf00      	nop
 8014058:	200214d4 	.word	0x200214d4
 801405c:	080213f8 	.word	0x080213f8
 8014060:	080214cc 	.word	0x080214cc
 8014064:	0802146c 	.word	0x0802146c

08014068 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014068:	b580      	push	{r7, lr}
 801406a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801406c:	f006 f9ee 	bl	801a44c <rand>
 8014070:	4603      	mov	r3, r0
 8014072:	b29b      	uxth	r3, r3
 8014074:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014078:	b29b      	uxth	r3, r3
 801407a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801407e:	b29a      	uxth	r2, r3
 8014080:	4b01      	ldr	r3, [pc, #4]	; (8014088 <udp_init+0x20>)
 8014082:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014084:	bf00      	nop
 8014086:	bd80      	pop	{r7, pc}
 8014088:	20000018 	.word	0x20000018

0801408c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014092:	2300      	movs	r3, #0
 8014094:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014096:	4b17      	ldr	r3, [pc, #92]	; (80140f4 <udp_new_port+0x68>)
 8014098:	881b      	ldrh	r3, [r3, #0]
 801409a:	1c5a      	adds	r2, r3, #1
 801409c:	b291      	uxth	r1, r2
 801409e:	4a15      	ldr	r2, [pc, #84]	; (80140f4 <udp_new_port+0x68>)
 80140a0:	8011      	strh	r1, [r2, #0]
 80140a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140a6:	4293      	cmp	r3, r2
 80140a8:	d103      	bne.n	80140b2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80140aa:	4b12      	ldr	r3, [pc, #72]	; (80140f4 <udp_new_port+0x68>)
 80140ac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80140b0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80140b2:	4b11      	ldr	r3, [pc, #68]	; (80140f8 <udp_new_port+0x6c>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	603b      	str	r3, [r7, #0]
 80140b8:	e011      	b.n	80140de <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80140ba:	683b      	ldr	r3, [r7, #0]
 80140bc:	8a5a      	ldrh	r2, [r3, #18]
 80140be:	4b0d      	ldr	r3, [pc, #52]	; (80140f4 <udp_new_port+0x68>)
 80140c0:	881b      	ldrh	r3, [r3, #0]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d108      	bne.n	80140d8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80140c6:	88fb      	ldrh	r3, [r7, #6]
 80140c8:	3301      	adds	r3, #1
 80140ca:	80fb      	strh	r3, [r7, #6]
 80140cc:	88fb      	ldrh	r3, [r7, #6]
 80140ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80140d2:	d3e0      	bcc.n	8014096 <udp_new_port+0xa>
        return 0;
 80140d4:	2300      	movs	r3, #0
 80140d6:	e007      	b.n	80140e8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	603b      	str	r3, [r7, #0]
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d1ea      	bne.n	80140ba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80140e4:	4b03      	ldr	r3, [pc, #12]	; (80140f4 <udp_new_port+0x68>)
 80140e6:	881b      	ldrh	r3, [r3, #0]
}
 80140e8:	4618      	mov	r0, r3
 80140ea:	370c      	adds	r7, #12
 80140ec:	46bd      	mov	sp, r7
 80140ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f2:	4770      	bx	lr
 80140f4:	20000018 	.word	0x20000018
 80140f8:	200280c4 	.word	0x200280c4

080140fc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b084      	sub	sp, #16
 8014100:	af00      	add	r7, sp, #0
 8014102:	60f8      	str	r0, [r7, #12]
 8014104:	60b9      	str	r1, [r7, #8]
 8014106:	4613      	mov	r3, r2
 8014108:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d105      	bne.n	801411c <udp_input_local_match+0x20>
 8014110:	4b27      	ldr	r3, [pc, #156]	; (80141b0 <udp_input_local_match+0xb4>)
 8014112:	2287      	movs	r2, #135	; 0x87
 8014114:	4927      	ldr	r1, [pc, #156]	; (80141b4 <udp_input_local_match+0xb8>)
 8014116:	4828      	ldr	r0, [pc, #160]	; (80141b8 <udp_input_local_match+0xbc>)
 8014118:	f006 f90a 	bl	801a330 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801411c:	68bb      	ldr	r3, [r7, #8]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d105      	bne.n	801412e <udp_input_local_match+0x32>
 8014122:	4b23      	ldr	r3, [pc, #140]	; (80141b0 <udp_input_local_match+0xb4>)
 8014124:	2288      	movs	r2, #136	; 0x88
 8014126:	4925      	ldr	r1, [pc, #148]	; (80141bc <udp_input_local_match+0xc0>)
 8014128:	4823      	ldr	r0, [pc, #140]	; (80141b8 <udp_input_local_match+0xbc>)
 801412a:	f006 f901 	bl	801a330 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	7a1b      	ldrb	r3, [r3, #8]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d00b      	beq.n	801414e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014136:	68fb      	ldr	r3, [r7, #12]
 8014138:	7a1a      	ldrb	r2, [r3, #8]
 801413a:	4b21      	ldr	r3, [pc, #132]	; (80141c0 <udp_input_local_match+0xc4>)
 801413c:	685b      	ldr	r3, [r3, #4]
 801413e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014142:	3301      	adds	r3, #1
 8014144:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014146:	429a      	cmp	r2, r3
 8014148:	d001      	beq.n	801414e <udp_input_local_match+0x52>
    return 0;
 801414a:	2300      	movs	r3, #0
 801414c:	e02b      	b.n	80141a6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801414e:	79fb      	ldrb	r3, [r7, #7]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d018      	beq.n	8014186 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d013      	beq.n	8014182 <udp_input_local_match+0x86>
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d00f      	beq.n	8014182 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014162:	4b17      	ldr	r3, [pc, #92]	; (80141c0 <udp_input_local_match+0xc4>)
 8014164:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801416a:	d00a      	beq.n	8014182 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	681a      	ldr	r2, [r3, #0]
 8014170:	4b13      	ldr	r3, [pc, #76]	; (80141c0 <udp_input_local_match+0xc4>)
 8014172:	695b      	ldr	r3, [r3, #20]
 8014174:	405a      	eors	r2, r3
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	3308      	adds	r3, #8
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801417e:	2b00      	cmp	r3, #0
 8014180:	d110      	bne.n	80141a4 <udp_input_local_match+0xa8>
          return 1;
 8014182:	2301      	movs	r3, #1
 8014184:	e00f      	b.n	80141a6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d009      	beq.n	80141a0 <udp_input_local_match+0xa4>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d005      	beq.n	80141a0 <udp_input_local_match+0xa4>
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681a      	ldr	r2, [r3, #0]
 8014198:	4b09      	ldr	r3, [pc, #36]	; (80141c0 <udp_input_local_match+0xc4>)
 801419a:	695b      	ldr	r3, [r3, #20]
 801419c:	429a      	cmp	r2, r3
 801419e:	d101      	bne.n	80141a4 <udp_input_local_match+0xa8>
        return 1;
 80141a0:	2301      	movs	r3, #1
 80141a2:	e000      	b.n	80141a6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80141a4:	2300      	movs	r3, #0
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}
 80141ae:	bf00      	nop
 80141b0:	080214e0 	.word	0x080214e0
 80141b4:	08021510 	.word	0x08021510
 80141b8:	08021534 	.word	0x08021534
 80141bc:	0802155c 	.word	0x0802155c
 80141c0:	20024820 	.word	0x20024820

080141c4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80141c4:	b590      	push	{r4, r7, lr}
 80141c6:	b08d      	sub	sp, #52	; 0x34
 80141c8:	af02      	add	r7, sp, #8
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80141ce:	2300      	movs	r3, #0
 80141d0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d105      	bne.n	80141e4 <udp_input+0x20>
 80141d8:	4b7c      	ldr	r3, [pc, #496]	; (80143cc <udp_input+0x208>)
 80141da:	22cf      	movs	r2, #207	; 0xcf
 80141dc:	497c      	ldr	r1, [pc, #496]	; (80143d0 <udp_input+0x20c>)
 80141de:	487d      	ldr	r0, [pc, #500]	; (80143d4 <udp_input+0x210>)
 80141e0:	f006 f8a6 	bl	801a330 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d105      	bne.n	80141f6 <udp_input+0x32>
 80141ea:	4b78      	ldr	r3, [pc, #480]	; (80143cc <udp_input+0x208>)
 80141ec:	22d0      	movs	r2, #208	; 0xd0
 80141ee:	497a      	ldr	r1, [pc, #488]	; (80143d8 <udp_input+0x214>)
 80141f0:	4878      	ldr	r0, [pc, #480]	; (80143d4 <udp_input+0x210>)
 80141f2:	f006 f89d 	bl	801a330 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	895b      	ldrh	r3, [r3, #10]
 80141fa:	2b07      	cmp	r3, #7
 80141fc:	d803      	bhi.n	8014206 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f7f9 f8c2 	bl	800d388 <pbuf_free>
    goto end;
 8014204:	e0de      	b.n	80143c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801420c:	4b73      	ldr	r3, [pc, #460]	; (80143dc <udp_input+0x218>)
 801420e:	695b      	ldr	r3, [r3, #20]
 8014210:	4a72      	ldr	r2, [pc, #456]	; (80143dc <udp_input+0x218>)
 8014212:	6812      	ldr	r2, [r2, #0]
 8014214:	4611      	mov	r1, r2
 8014216:	4618      	mov	r0, r3
 8014218:	f003 fec0 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 801421c:	4603      	mov	r3, r0
 801421e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	881b      	ldrh	r3, [r3, #0]
 8014224:	b29b      	uxth	r3, r3
 8014226:	4618      	mov	r0, r3
 8014228:	f7f6 fd20 	bl	800ac6c <lwip_htons>
 801422c:	4603      	mov	r3, r0
 801422e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	885b      	ldrh	r3, [r3, #2]
 8014234:	b29b      	uxth	r3, r3
 8014236:	4618      	mov	r0, r3
 8014238:	f7f6 fd18 	bl	800ac6c <lwip_htons>
 801423c:	4603      	mov	r3, r0
 801423e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014240:	2300      	movs	r3, #0
 8014242:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014244:	2300      	movs	r3, #0
 8014246:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014248:	2300      	movs	r3, #0
 801424a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801424c:	4b64      	ldr	r3, [pc, #400]	; (80143e0 <udp_input+0x21c>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	627b      	str	r3, [r7, #36]	; 0x24
 8014252:	e054      	b.n	80142fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014256:	8a5b      	ldrh	r3, [r3, #18]
 8014258:	89fa      	ldrh	r2, [r7, #14]
 801425a:	429a      	cmp	r2, r3
 801425c:	d14a      	bne.n	80142f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801425e:	7cfb      	ldrb	r3, [r7, #19]
 8014260:	461a      	mov	r2, r3
 8014262:	6839      	ldr	r1, [r7, #0]
 8014264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014266:	f7ff ff49 	bl	80140fc <udp_input_local_match>
 801426a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801426c:	2b00      	cmp	r3, #0
 801426e:	d041      	beq.n	80142f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014272:	7c1b      	ldrb	r3, [r3, #16]
 8014274:	f003 0304 	and.w	r3, r3, #4
 8014278:	2b00      	cmp	r3, #0
 801427a:	d11d      	bne.n	80142b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801427c:	69fb      	ldr	r3, [r7, #28]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d102      	bne.n	8014288 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014284:	61fb      	str	r3, [r7, #28]
 8014286:	e017      	b.n	80142b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014288:	7cfb      	ldrb	r3, [r7, #19]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d014      	beq.n	80142b8 <udp_input+0xf4>
 801428e:	4b53      	ldr	r3, [pc, #332]	; (80143dc <udp_input+0x218>)
 8014290:	695b      	ldr	r3, [r3, #20]
 8014292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014296:	d10f      	bne.n	80142b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	681a      	ldr	r2, [r3, #0]
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	3304      	adds	r3, #4
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	429a      	cmp	r2, r3
 80142a4:	d008      	beq.n	80142b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80142a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	683b      	ldr	r3, [r7, #0]
 80142ac:	3304      	adds	r3, #4
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d101      	bne.n	80142b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80142b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	8a9b      	ldrh	r3, [r3, #20]
 80142bc:	8a3a      	ldrh	r2, [r7, #16]
 80142be:	429a      	cmp	r2, r3
 80142c0:	d118      	bne.n	80142f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80142c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d005      	beq.n	80142d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80142ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142cc:	685a      	ldr	r2, [r3, #4]
 80142ce:	4b43      	ldr	r3, [pc, #268]	; (80143dc <udp_input+0x218>)
 80142d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d10e      	bne.n	80142f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80142d6:	6a3b      	ldr	r3, [r7, #32]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d014      	beq.n	8014306 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80142dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142de:	68da      	ldr	r2, [r3, #12]
 80142e0:	6a3b      	ldr	r3, [r7, #32]
 80142e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80142e4:	4b3e      	ldr	r3, [pc, #248]	; (80143e0 <udp_input+0x21c>)
 80142e6:	681a      	ldr	r2, [r3, #0]
 80142e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80142ec:	4a3c      	ldr	r2, [pc, #240]	; (80143e0 <udp_input+0x21c>)
 80142ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80142f2:	e008      	b.n	8014306 <udp_input+0x142>
      }
    }

    prev = pcb;
 80142f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	627b      	str	r3, [r7, #36]	; 0x24
 80142fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014300:	2b00      	cmp	r3, #0
 8014302:	d1a7      	bne.n	8014254 <udp_input+0x90>
 8014304:	e000      	b.n	8014308 <udp_input+0x144>
        break;
 8014306:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430a:	2b00      	cmp	r3, #0
 801430c:	d101      	bne.n	8014312 <udp_input+0x14e>
    pcb = uncon_pcb;
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014314:	2b00      	cmp	r3, #0
 8014316:	d002      	beq.n	801431e <udp_input+0x15a>
    for_us = 1;
 8014318:	2301      	movs	r3, #1
 801431a:	76fb      	strb	r3, [r7, #27]
 801431c:	e00a      	b.n	8014334 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	3304      	adds	r3, #4
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	4b2d      	ldr	r3, [pc, #180]	; (80143dc <udp_input+0x218>)
 8014326:	695b      	ldr	r3, [r3, #20]
 8014328:	429a      	cmp	r2, r3
 801432a:	bf0c      	ite	eq
 801432c:	2301      	moveq	r3, #1
 801432e:	2300      	movne	r3, #0
 8014330:	b2db      	uxtb	r3, r3
 8014332:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014334:	7efb      	ldrb	r3, [r7, #27]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d041      	beq.n	80143be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801433a:	2108      	movs	r1, #8
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f7f8 ff9d 	bl	800d27c <pbuf_remove_header>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d00a      	beq.n	801435e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014348:	4b20      	ldr	r3, [pc, #128]	; (80143cc <udp_input+0x208>)
 801434a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801434e:	4925      	ldr	r1, [pc, #148]	; (80143e4 <udp_input+0x220>)
 8014350:	4820      	ldr	r0, [pc, #128]	; (80143d4 <udp_input+0x210>)
 8014352:	f005 ffed 	bl	801a330 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014356:	6878      	ldr	r0, [r7, #4]
 8014358:	f7f9 f816 	bl	800d388 <pbuf_free>
      goto end;
 801435c:	e032      	b.n	80143c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014360:	2b00      	cmp	r3, #0
 8014362:	d012      	beq.n	801438a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014366:	699b      	ldr	r3, [r3, #24]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00a      	beq.n	8014382 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436e:	699c      	ldr	r4, [r3, #24]
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	69d8      	ldr	r0, [r3, #28]
 8014374:	8a3b      	ldrh	r3, [r7, #16]
 8014376:	9300      	str	r3, [sp, #0]
 8014378:	4b1b      	ldr	r3, [pc, #108]	; (80143e8 <udp_input+0x224>)
 801437a:	687a      	ldr	r2, [r7, #4]
 801437c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801437e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014380:	e021      	b.n	80143c6 <udp_input+0x202>
        pbuf_free(p);
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f7f9 f800 	bl	800d388 <pbuf_free>
        goto end;
 8014388:	e01c      	b.n	80143c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801438a:	7cfb      	ldrb	r3, [r7, #19]
 801438c:	2b00      	cmp	r3, #0
 801438e:	d112      	bne.n	80143b6 <udp_input+0x1f2>
 8014390:	4b12      	ldr	r3, [pc, #72]	; (80143dc <udp_input+0x218>)
 8014392:	695b      	ldr	r3, [r3, #20]
 8014394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014398:	2be0      	cmp	r3, #224	; 0xe0
 801439a:	d00c      	beq.n	80143b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801439c:	4b0f      	ldr	r3, [pc, #60]	; (80143dc <udp_input+0x218>)
 801439e:	899b      	ldrh	r3, [r3, #12]
 80143a0:	3308      	adds	r3, #8
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	b21b      	sxth	r3, r3
 80143a6:	4619      	mov	r1, r3
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f7f8 ffda 	bl	800d362 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80143ae:	2103      	movs	r1, #3
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f003 fab5 	bl	8017920 <icmp_dest_unreach>
      pbuf_free(p);
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f7f8 ffe6 	bl	800d388 <pbuf_free>
  return;
 80143bc:	e003      	b.n	80143c6 <udp_input+0x202>
    pbuf_free(p);
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7f8 ffe2 	bl	800d388 <pbuf_free>
  return;
 80143c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80143c6:	372c      	adds	r7, #44	; 0x2c
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd90      	pop	{r4, r7, pc}
 80143cc:	080214e0 	.word	0x080214e0
 80143d0:	08021584 	.word	0x08021584
 80143d4:	08021534 	.word	0x08021534
 80143d8:	0802159c 	.word	0x0802159c
 80143dc:	20024820 	.word	0x20024820
 80143e0:	200280c4 	.word	0x200280c4
 80143e4:	080215b8 	.word	0x080215b8
 80143e8:	20024830 	.word	0x20024830

080143ec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b088      	sub	sp, #32
 80143f0:	af02      	add	r7, sp, #8
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	607a      	str	r2, [r7, #4]
 80143f8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d109      	bne.n	8014414 <udp_sendto+0x28>
 8014400:	4b23      	ldr	r3, [pc, #140]	; (8014490 <udp_sendto+0xa4>)
 8014402:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014406:	4923      	ldr	r1, [pc, #140]	; (8014494 <udp_sendto+0xa8>)
 8014408:	4823      	ldr	r0, [pc, #140]	; (8014498 <udp_sendto+0xac>)
 801440a:	f005 ff91 	bl	801a330 <iprintf>
 801440e:	f06f 030f 	mvn.w	r3, #15
 8014412:	e038      	b.n	8014486 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d109      	bne.n	801442e <udp_sendto+0x42>
 801441a:	4b1d      	ldr	r3, [pc, #116]	; (8014490 <udp_sendto+0xa4>)
 801441c:	f240 2219 	movw	r2, #537	; 0x219
 8014420:	491e      	ldr	r1, [pc, #120]	; (801449c <udp_sendto+0xb0>)
 8014422:	481d      	ldr	r0, [pc, #116]	; (8014498 <udp_sendto+0xac>)
 8014424:	f005 ff84 	bl	801a330 <iprintf>
 8014428:	f06f 030f 	mvn.w	r3, #15
 801442c:	e02b      	b.n	8014486 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d109      	bne.n	8014448 <udp_sendto+0x5c>
 8014434:	4b16      	ldr	r3, [pc, #88]	; (8014490 <udp_sendto+0xa4>)
 8014436:	f240 221a 	movw	r2, #538	; 0x21a
 801443a:	4919      	ldr	r1, [pc, #100]	; (80144a0 <udp_sendto+0xb4>)
 801443c:	4816      	ldr	r0, [pc, #88]	; (8014498 <udp_sendto+0xac>)
 801443e:	f005 ff77 	bl	801a330 <iprintf>
 8014442:	f06f 030f 	mvn.w	r3, #15
 8014446:	e01e      	b.n	8014486 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	7a1b      	ldrb	r3, [r3, #8]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d006      	beq.n	801445e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	7a1b      	ldrb	r3, [r3, #8]
 8014454:	4618      	mov	r0, r3
 8014456:	f7f8 fc09 	bl	800cc6c <netif_get_by_index>
 801445a:	6178      	str	r0, [r7, #20]
 801445c:	e003      	b.n	8014466 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f003 fae8 	bl	8017a34 <ip4_route>
 8014464:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d102      	bne.n	8014472 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801446c:	f06f 0303 	mvn.w	r3, #3
 8014470:	e009      	b.n	8014486 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014472:	887a      	ldrh	r2, [r7, #2]
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	9300      	str	r3, [sp, #0]
 8014478:	4613      	mov	r3, r2
 801447a:	687a      	ldr	r2, [r7, #4]
 801447c:	68b9      	ldr	r1, [r7, #8]
 801447e:	68f8      	ldr	r0, [r7, #12]
 8014480:	f000 f810 	bl	80144a4 <udp_sendto_if>
 8014484:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014486:	4618      	mov	r0, r3
 8014488:	3718      	adds	r7, #24
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}
 801448e:	bf00      	nop
 8014490:	080214e0 	.word	0x080214e0
 8014494:	08021604 	.word	0x08021604
 8014498:	08021534 	.word	0x08021534
 801449c:	0802161c 	.word	0x0802161c
 80144a0:	08021638 	.word	0x08021638

080144a4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b088      	sub	sp, #32
 80144a8:	af02      	add	r7, sp, #8
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	607a      	str	r2, [r7, #4]
 80144b0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d109      	bne.n	80144cc <udp_sendto_if+0x28>
 80144b8:	4b2e      	ldr	r3, [pc, #184]	; (8014574 <udp_sendto_if+0xd0>)
 80144ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144be:	492e      	ldr	r1, [pc, #184]	; (8014578 <udp_sendto_if+0xd4>)
 80144c0:	482e      	ldr	r0, [pc, #184]	; (801457c <udp_sendto_if+0xd8>)
 80144c2:	f005 ff35 	bl	801a330 <iprintf>
 80144c6:	f06f 030f 	mvn.w	r3, #15
 80144ca:	e04f      	b.n	801456c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d109      	bne.n	80144e6 <udp_sendto_if+0x42>
 80144d2:	4b28      	ldr	r3, [pc, #160]	; (8014574 <udp_sendto_if+0xd0>)
 80144d4:	f240 2281 	movw	r2, #641	; 0x281
 80144d8:	4929      	ldr	r1, [pc, #164]	; (8014580 <udp_sendto_if+0xdc>)
 80144da:	4828      	ldr	r0, [pc, #160]	; (801457c <udp_sendto_if+0xd8>)
 80144dc:	f005 ff28 	bl	801a330 <iprintf>
 80144e0:	f06f 030f 	mvn.w	r3, #15
 80144e4:	e042      	b.n	801456c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d109      	bne.n	8014500 <udp_sendto_if+0x5c>
 80144ec:	4b21      	ldr	r3, [pc, #132]	; (8014574 <udp_sendto_if+0xd0>)
 80144ee:	f240 2282 	movw	r2, #642	; 0x282
 80144f2:	4924      	ldr	r1, [pc, #144]	; (8014584 <udp_sendto_if+0xe0>)
 80144f4:	4821      	ldr	r0, [pc, #132]	; (801457c <udp_sendto_if+0xd8>)
 80144f6:	f005 ff1b 	bl	801a330 <iprintf>
 80144fa:	f06f 030f 	mvn.w	r3, #15
 80144fe:	e035      	b.n	801456c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014500:	6a3b      	ldr	r3, [r7, #32]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d109      	bne.n	801451a <udp_sendto_if+0x76>
 8014506:	4b1b      	ldr	r3, [pc, #108]	; (8014574 <udp_sendto_if+0xd0>)
 8014508:	f240 2283 	movw	r2, #643	; 0x283
 801450c:	491e      	ldr	r1, [pc, #120]	; (8014588 <udp_sendto_if+0xe4>)
 801450e:	481b      	ldr	r0, [pc, #108]	; (801457c <udp_sendto_if+0xd8>)
 8014510:	f005 ff0e 	bl	801a330 <iprintf>
 8014514:	f06f 030f 	mvn.w	r3, #15
 8014518:	e028      	b.n	801456c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d009      	beq.n	8014534 <udp_sendto_if+0x90>
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d005      	beq.n	8014534 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014530:	2be0      	cmp	r3, #224	; 0xe0
 8014532:	d103      	bne.n	801453c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014534:	6a3b      	ldr	r3, [r7, #32]
 8014536:	3304      	adds	r3, #4
 8014538:	617b      	str	r3, [r7, #20]
 801453a:	e00b      	b.n	8014554 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	681a      	ldr	r2, [r3, #0]
 8014540:	6a3b      	ldr	r3, [r7, #32]
 8014542:	3304      	adds	r3, #4
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	429a      	cmp	r2, r3
 8014548:	d002      	beq.n	8014550 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801454a:	f06f 0303 	mvn.w	r3, #3
 801454e:	e00d      	b.n	801456c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014554:	887a      	ldrh	r2, [r7, #2]
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	9301      	str	r3, [sp, #4]
 801455a:	6a3b      	ldr	r3, [r7, #32]
 801455c:	9300      	str	r3, [sp, #0]
 801455e:	4613      	mov	r3, r2
 8014560:	687a      	ldr	r2, [r7, #4]
 8014562:	68b9      	ldr	r1, [r7, #8]
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f000 f811 	bl	801458c <udp_sendto_if_src>
 801456a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801456c:	4618      	mov	r0, r3
 801456e:	3718      	adds	r7, #24
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	080214e0 	.word	0x080214e0
 8014578:	08021654 	.word	0x08021654
 801457c:	08021534 	.word	0x08021534
 8014580:	08021670 	.word	0x08021670
 8014584:	0802168c 	.word	0x0802168c
 8014588:	080216ac 	.word	0x080216ac

0801458c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b08c      	sub	sp, #48	; 0x30
 8014590:	af04      	add	r7, sp, #16
 8014592:	60f8      	str	r0, [r7, #12]
 8014594:	60b9      	str	r1, [r7, #8]
 8014596:	607a      	str	r2, [r7, #4]
 8014598:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2b00      	cmp	r3, #0
 801459e:	d109      	bne.n	80145b4 <udp_sendto_if_src+0x28>
 80145a0:	4b65      	ldr	r3, [pc, #404]	; (8014738 <udp_sendto_if_src+0x1ac>)
 80145a2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80145a6:	4965      	ldr	r1, [pc, #404]	; (801473c <udp_sendto_if_src+0x1b0>)
 80145a8:	4865      	ldr	r0, [pc, #404]	; (8014740 <udp_sendto_if_src+0x1b4>)
 80145aa:	f005 fec1 	bl	801a330 <iprintf>
 80145ae:	f06f 030f 	mvn.w	r3, #15
 80145b2:	e0bc      	b.n	801472e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d109      	bne.n	80145ce <udp_sendto_if_src+0x42>
 80145ba:	4b5f      	ldr	r3, [pc, #380]	; (8014738 <udp_sendto_if_src+0x1ac>)
 80145bc:	f240 22d2 	movw	r2, #722	; 0x2d2
 80145c0:	4960      	ldr	r1, [pc, #384]	; (8014744 <udp_sendto_if_src+0x1b8>)
 80145c2:	485f      	ldr	r0, [pc, #380]	; (8014740 <udp_sendto_if_src+0x1b4>)
 80145c4:	f005 feb4 	bl	801a330 <iprintf>
 80145c8:	f06f 030f 	mvn.w	r3, #15
 80145cc:	e0af      	b.n	801472e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d109      	bne.n	80145e8 <udp_sendto_if_src+0x5c>
 80145d4:	4b58      	ldr	r3, [pc, #352]	; (8014738 <udp_sendto_if_src+0x1ac>)
 80145d6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80145da:	495b      	ldr	r1, [pc, #364]	; (8014748 <udp_sendto_if_src+0x1bc>)
 80145dc:	4858      	ldr	r0, [pc, #352]	; (8014740 <udp_sendto_if_src+0x1b4>)
 80145de:	f005 fea7 	bl	801a330 <iprintf>
 80145e2:	f06f 030f 	mvn.w	r3, #15
 80145e6:	e0a2      	b.n	801472e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80145e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d109      	bne.n	8014602 <udp_sendto_if_src+0x76>
 80145ee:	4b52      	ldr	r3, [pc, #328]	; (8014738 <udp_sendto_if_src+0x1ac>)
 80145f0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80145f4:	4955      	ldr	r1, [pc, #340]	; (801474c <udp_sendto_if_src+0x1c0>)
 80145f6:	4852      	ldr	r0, [pc, #328]	; (8014740 <udp_sendto_if_src+0x1b4>)
 80145f8:	f005 fe9a 	bl	801a330 <iprintf>
 80145fc:	f06f 030f 	mvn.w	r3, #15
 8014600:	e095      	b.n	801472e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014604:	2b00      	cmp	r3, #0
 8014606:	d109      	bne.n	801461c <udp_sendto_if_src+0x90>
 8014608:	4b4b      	ldr	r3, [pc, #300]	; (8014738 <udp_sendto_if_src+0x1ac>)
 801460a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801460e:	4950      	ldr	r1, [pc, #320]	; (8014750 <udp_sendto_if_src+0x1c4>)
 8014610:	484b      	ldr	r0, [pc, #300]	; (8014740 <udp_sendto_if_src+0x1b4>)
 8014612:	f005 fe8d 	bl	801a330 <iprintf>
 8014616:	f06f 030f 	mvn.w	r3, #15
 801461a:	e088      	b.n	801472e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	8a5b      	ldrh	r3, [r3, #18]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d10f      	bne.n	8014644 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014624:	68f9      	ldr	r1, [r7, #12]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	8a5b      	ldrh	r3, [r3, #18]
 801462a:	461a      	mov	r2, r3
 801462c:	68f8      	ldr	r0, [r7, #12]
 801462e:	f000 f893 	bl	8014758 <udp_bind>
 8014632:	4603      	mov	r3, r0
 8014634:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014636:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d002      	beq.n	8014644 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801463e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014642:	e074      	b.n	801472e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	891b      	ldrh	r3, [r3, #8]
 8014648:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801464c:	4293      	cmp	r3, r2
 801464e:	d902      	bls.n	8014656 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014650:	f04f 33ff 	mov.w	r3, #4294967295
 8014654:	e06b      	b.n	801472e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014656:	2108      	movs	r1, #8
 8014658:	68b8      	ldr	r0, [r7, #8]
 801465a:	f7f8 fdff 	bl	800d25c <pbuf_add_header>
 801465e:	4603      	mov	r3, r0
 8014660:	2b00      	cmp	r3, #0
 8014662:	d015      	beq.n	8014690 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014664:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014668:	2108      	movs	r1, #8
 801466a:	2022      	movs	r0, #34	; 0x22
 801466c:	f7f8 fba8 	bl	800cdc0 <pbuf_alloc>
 8014670:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d102      	bne.n	801467e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014678:	f04f 33ff 	mov.w	r3, #4294967295
 801467c:	e057      	b.n	801472e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	891b      	ldrh	r3, [r3, #8]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d006      	beq.n	8014694 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014686:	68b9      	ldr	r1, [r7, #8]
 8014688:	69f8      	ldr	r0, [r7, #28]
 801468a:	f7f8 ffa1 	bl	800d5d0 <pbuf_chain>
 801468e:	e001      	b.n	8014694 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014694:	69fb      	ldr	r3, [r7, #28]
 8014696:	895b      	ldrh	r3, [r3, #10]
 8014698:	2b07      	cmp	r3, #7
 801469a:	d806      	bhi.n	80146aa <udp_sendto_if_src+0x11e>
 801469c:	4b26      	ldr	r3, [pc, #152]	; (8014738 <udp_sendto_if_src+0x1ac>)
 801469e:	f240 320d 	movw	r2, #781	; 0x30d
 80146a2:	492c      	ldr	r1, [pc, #176]	; (8014754 <udp_sendto_if_src+0x1c8>)
 80146a4:	4826      	ldr	r0, [pc, #152]	; (8014740 <udp_sendto_if_src+0x1b4>)
 80146a6:	f005 fe43 	bl	801a330 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	8a5b      	ldrh	r3, [r3, #18]
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7f6 fad9 	bl	800ac6c <lwip_htons>
 80146ba:	4603      	mov	r3, r0
 80146bc:	461a      	mov	r2, r3
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80146c2:	887b      	ldrh	r3, [r7, #2]
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7f6 fad1 	bl	800ac6c <lwip_htons>
 80146ca:	4603      	mov	r3, r0
 80146cc:	461a      	mov	r2, r3
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	2200      	movs	r2, #0
 80146d6:	719a      	strb	r2, [r3, #6]
 80146d8:	2200      	movs	r2, #0
 80146da:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80146dc:	69fb      	ldr	r3, [r7, #28]
 80146de:	891b      	ldrh	r3, [r3, #8]
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7f6 fac3 	bl	800ac6c <lwip_htons>
 80146e6:	4603      	mov	r3, r0
 80146e8:	461a      	mov	r2, r3
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80146ee:	2311      	movs	r3, #17
 80146f0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	7adb      	ldrb	r3, [r3, #11]
 80146f6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	7a9b      	ldrb	r3, [r3, #10]
 80146fc:	7cb9      	ldrb	r1, [r7, #18]
 80146fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014700:	9202      	str	r2, [sp, #8]
 8014702:	7cfa      	ldrb	r2, [r7, #19]
 8014704:	9201      	str	r2, [sp, #4]
 8014706:	9300      	str	r3, [sp, #0]
 8014708:	460b      	mov	r3, r1
 801470a:	687a      	ldr	r2, [r7, #4]
 801470c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801470e:	69f8      	ldr	r0, [r7, #28]
 8014710:	f003 fb96 	bl	8017e40 <ip4_output_if_src>
 8014714:	4603      	mov	r3, r0
 8014716:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014718:	69fa      	ldr	r2, [r7, #28]
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	429a      	cmp	r2, r3
 801471e:	d004      	beq.n	801472a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014720:	69f8      	ldr	r0, [r7, #28]
 8014722:	f7f8 fe31 	bl	800d388 <pbuf_free>
    q = NULL;
 8014726:	2300      	movs	r3, #0
 8014728:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801472a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801472e:	4618      	mov	r0, r3
 8014730:	3720      	adds	r7, #32
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}
 8014736:	bf00      	nop
 8014738:	080214e0 	.word	0x080214e0
 801473c:	080216cc 	.word	0x080216cc
 8014740:	08021534 	.word	0x08021534
 8014744:	080216ec 	.word	0x080216ec
 8014748:	0802170c 	.word	0x0802170c
 801474c:	08021730 	.word	0x08021730
 8014750:	08021754 	.word	0x08021754
 8014754:	08021778 	.word	0x08021778

08014758 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014758:	b580      	push	{r7, lr}
 801475a:	b086      	sub	sp, #24
 801475c:	af00      	add	r7, sp, #0
 801475e:	60f8      	str	r0, [r7, #12]
 8014760:	60b9      	str	r1, [r7, #8]
 8014762:	4613      	mov	r3, r2
 8014764:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d101      	bne.n	8014770 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801476c:	4b39      	ldr	r3, [pc, #228]	; (8014854 <udp_bind+0xfc>)
 801476e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d109      	bne.n	801478a <udp_bind+0x32>
 8014776:	4b38      	ldr	r3, [pc, #224]	; (8014858 <udp_bind+0x100>)
 8014778:	f240 32b7 	movw	r2, #951	; 0x3b7
 801477c:	4937      	ldr	r1, [pc, #220]	; (801485c <udp_bind+0x104>)
 801477e:	4838      	ldr	r0, [pc, #224]	; (8014860 <udp_bind+0x108>)
 8014780:	f005 fdd6 	bl	801a330 <iprintf>
 8014784:	f06f 030f 	mvn.w	r3, #15
 8014788:	e060      	b.n	801484c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801478a:	2300      	movs	r3, #0
 801478c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801478e:	4b35      	ldr	r3, [pc, #212]	; (8014864 <udp_bind+0x10c>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	617b      	str	r3, [r7, #20]
 8014794:	e009      	b.n	80147aa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014796:	68fa      	ldr	r2, [r7, #12]
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	429a      	cmp	r2, r3
 801479c:	d102      	bne.n	80147a4 <udp_bind+0x4c>
      rebind = 1;
 801479e:	2301      	movs	r3, #1
 80147a0:	74fb      	strb	r3, [r7, #19]
      break;
 80147a2:	e005      	b.n	80147b0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	617b      	str	r3, [r7, #20]
 80147aa:	697b      	ldr	r3, [r7, #20]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d1f2      	bne.n	8014796 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80147b0:	88fb      	ldrh	r3, [r7, #6]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d109      	bne.n	80147ca <udp_bind+0x72>
    port = udp_new_port();
 80147b6:	f7ff fc69 	bl	801408c <udp_new_port>
 80147ba:	4603      	mov	r3, r0
 80147bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80147be:	88fb      	ldrh	r3, [r7, #6]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d12c      	bne.n	801481e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80147c4:	f06f 0307 	mvn.w	r3, #7
 80147c8:	e040      	b.n	801484c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80147ca:	4b26      	ldr	r3, [pc, #152]	; (8014864 <udp_bind+0x10c>)
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	617b      	str	r3, [r7, #20]
 80147d0:	e022      	b.n	8014818 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80147d2:	68fa      	ldr	r2, [r7, #12]
 80147d4:	697b      	ldr	r3, [r7, #20]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d01b      	beq.n	8014812 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	8a5b      	ldrh	r3, [r3, #18]
 80147de:	88fa      	ldrh	r2, [r7, #6]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d116      	bne.n	8014812 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80147ec:	429a      	cmp	r2, r3
 80147ee:	d00d      	beq.n	801480c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d00a      	beq.n	801480c <udp_bind+0xb4>
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d006      	beq.n	801480c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80147fe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014800:	2b00      	cmp	r3, #0
 8014802:	d003      	beq.n	801480c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d102      	bne.n	8014812 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801480c:	f06f 0307 	mvn.w	r3, #7
 8014810:	e01c      	b.n	801484c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014812:	697b      	ldr	r3, [r7, #20]
 8014814:	68db      	ldr	r3, [r3, #12]
 8014816:	617b      	str	r3, [r7, #20]
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d1d9      	bne.n	80147d2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d002      	beq.n	801482a <udp_bind+0xd2>
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	e000      	b.n	801482c <udp_bind+0xd4>
 801482a:	2300      	movs	r3, #0
 801482c:	68fa      	ldr	r2, [r7, #12]
 801482e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	88fa      	ldrh	r2, [r7, #6]
 8014834:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014836:	7cfb      	ldrb	r3, [r7, #19]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d106      	bne.n	801484a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801483c:	4b09      	ldr	r3, [pc, #36]	; (8014864 <udp_bind+0x10c>)
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014844:	4a07      	ldr	r2, [pc, #28]	; (8014864 <udp_bind+0x10c>)
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801484a:	2300      	movs	r3, #0
}
 801484c:	4618      	mov	r0, r3
 801484e:	3718      	adds	r7, #24
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}
 8014854:	08022488 	.word	0x08022488
 8014858:	080214e0 	.word	0x080214e0
 801485c:	080217a8 	.word	0x080217a8
 8014860:	08021534 	.word	0x08021534
 8014864:	200280c4 	.word	0x200280c4

08014868 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014868:	b580      	push	{r7, lr}
 801486a:	b086      	sub	sp, #24
 801486c:	af00      	add	r7, sp, #0
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	4613      	mov	r3, r2
 8014874:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2b00      	cmp	r3, #0
 801487a:	d109      	bne.n	8014890 <udp_connect+0x28>
 801487c:	4b2c      	ldr	r3, [pc, #176]	; (8014930 <udp_connect+0xc8>)
 801487e:	f240 4235 	movw	r2, #1077	; 0x435
 8014882:	492c      	ldr	r1, [pc, #176]	; (8014934 <udp_connect+0xcc>)
 8014884:	482c      	ldr	r0, [pc, #176]	; (8014938 <udp_connect+0xd0>)
 8014886:	f005 fd53 	bl	801a330 <iprintf>
 801488a:	f06f 030f 	mvn.w	r3, #15
 801488e:	e04b      	b.n	8014928 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	2b00      	cmp	r3, #0
 8014894:	d109      	bne.n	80148aa <udp_connect+0x42>
 8014896:	4b26      	ldr	r3, [pc, #152]	; (8014930 <udp_connect+0xc8>)
 8014898:	f240 4236 	movw	r2, #1078	; 0x436
 801489c:	4927      	ldr	r1, [pc, #156]	; (801493c <udp_connect+0xd4>)
 801489e:	4826      	ldr	r0, [pc, #152]	; (8014938 <udp_connect+0xd0>)
 80148a0:	f005 fd46 	bl	801a330 <iprintf>
 80148a4:	f06f 030f 	mvn.w	r3, #15
 80148a8:	e03e      	b.n	8014928 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	8a5b      	ldrh	r3, [r3, #18]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d10f      	bne.n	80148d2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80148b2:	68f9      	ldr	r1, [r7, #12]
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	8a5b      	ldrh	r3, [r3, #18]
 80148b8:	461a      	mov	r2, r3
 80148ba:	68f8      	ldr	r0, [r7, #12]
 80148bc:	f7ff ff4c 	bl	8014758 <udp_bind>
 80148c0:	4603      	mov	r3, r0
 80148c2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80148c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d002      	beq.n	80148d2 <udp_connect+0x6a>
      return err;
 80148cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80148d0:	e02a      	b.n	8014928 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d002      	beq.n	80148de <udp_connect+0x76>
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	e000      	b.n	80148e0 <udp_connect+0x78>
 80148de:	2300      	movs	r3, #0
 80148e0:	68fa      	ldr	r2, [r7, #12]
 80148e2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	88fa      	ldrh	r2, [r7, #6]
 80148e8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	7c1b      	ldrb	r3, [r3, #16]
 80148ee:	f043 0304 	orr.w	r3, r3, #4
 80148f2:	b2da      	uxtb	r2, r3
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80148f8:	4b11      	ldr	r3, [pc, #68]	; (8014940 <udp_connect+0xd8>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	617b      	str	r3, [r7, #20]
 80148fe:	e008      	b.n	8014912 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014900:	68fa      	ldr	r2, [r7, #12]
 8014902:	697b      	ldr	r3, [r7, #20]
 8014904:	429a      	cmp	r2, r3
 8014906:	d101      	bne.n	801490c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014908:	2300      	movs	r3, #0
 801490a:	e00d      	b.n	8014928 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	617b      	str	r3, [r7, #20]
 8014912:	697b      	ldr	r3, [r7, #20]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d1f3      	bne.n	8014900 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014918:	4b09      	ldr	r3, [pc, #36]	; (8014940 <udp_connect+0xd8>)
 801491a:	681a      	ldr	r2, [r3, #0]
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014920:	4a07      	ldr	r2, [pc, #28]	; (8014940 <udp_connect+0xd8>)
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014926:	2300      	movs	r3, #0
}
 8014928:	4618      	mov	r0, r3
 801492a:	3718      	adds	r7, #24
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}
 8014930:	080214e0 	.word	0x080214e0
 8014934:	080217c0 	.word	0x080217c0
 8014938:	08021534 	.word	0x08021534
 801493c:	080217dc 	.word	0x080217dc
 8014940:	200280c4 	.word	0x200280c4

08014944 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b084      	sub	sp, #16
 8014948:	af00      	add	r7, sp, #0
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	60b9      	str	r1, [r7, #8]
 801494e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d107      	bne.n	8014966 <udp_recv+0x22>
 8014956:	4b08      	ldr	r3, [pc, #32]	; (8014978 <udp_recv+0x34>)
 8014958:	f240 428a 	movw	r2, #1162	; 0x48a
 801495c:	4907      	ldr	r1, [pc, #28]	; (801497c <udp_recv+0x38>)
 801495e:	4808      	ldr	r0, [pc, #32]	; (8014980 <udp_recv+0x3c>)
 8014960:	f005 fce6 	bl	801a330 <iprintf>
 8014964:	e005      	b.n	8014972 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	68ba      	ldr	r2, [r7, #8]
 801496a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	61da      	str	r2, [r3, #28]
}
 8014972:	3710      	adds	r7, #16
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	080214e0 	.word	0x080214e0
 801497c:	08021814 	.word	0x08021814
 8014980:	08021534 	.word	0x08021534

08014984 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b084      	sub	sp, #16
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d107      	bne.n	80149a2 <udp_remove+0x1e>
 8014992:	4b19      	ldr	r3, [pc, #100]	; (80149f8 <udp_remove+0x74>)
 8014994:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014998:	4918      	ldr	r1, [pc, #96]	; (80149fc <udp_remove+0x78>)
 801499a:	4819      	ldr	r0, [pc, #100]	; (8014a00 <udp_remove+0x7c>)
 801499c:	f005 fcc8 	bl	801a330 <iprintf>
 80149a0:	e026      	b.n	80149f0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80149a2:	4b18      	ldr	r3, [pc, #96]	; (8014a04 <udp_remove+0x80>)
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	687a      	ldr	r2, [r7, #4]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	d105      	bne.n	80149b8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80149ac:	4b15      	ldr	r3, [pc, #84]	; (8014a04 <udp_remove+0x80>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	4a14      	ldr	r2, [pc, #80]	; (8014a04 <udp_remove+0x80>)
 80149b4:	6013      	str	r3, [r2, #0]
 80149b6:	e017      	b.n	80149e8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149b8:	4b12      	ldr	r3, [pc, #72]	; (8014a04 <udp_remove+0x80>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	60fb      	str	r3, [r7, #12]
 80149be:	e010      	b.n	80149e2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	68db      	ldr	r3, [r3, #12]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d009      	beq.n	80149dc <udp_remove+0x58>
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d104      	bne.n	80149dc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	68da      	ldr	r2, [r3, #12]
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	60da      	str	r2, [r3, #12]
        break;
 80149da:	e005      	b.n	80149e8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	60fb      	str	r3, [r7, #12]
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d1eb      	bne.n	80149c0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80149e8:	6879      	ldr	r1, [r7, #4]
 80149ea:	2000      	movs	r0, #0
 80149ec:	f7f7 fe1c 	bl	800c628 <memp_free>
}
 80149f0:	3710      	adds	r7, #16
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	080214e0 	.word	0x080214e0
 80149fc:	0802182c 	.word	0x0802182c
 8014a00:	08021534 	.word	0x08021534
 8014a04:	200280c4 	.word	0x200280c4

08014a08 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014a0e:	2000      	movs	r0, #0
 8014a10:	f7f7 fdb8 	bl	800c584 <memp_malloc>
 8014a14:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d007      	beq.n	8014a2c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014a1c:	2220      	movs	r2, #32
 8014a1e:	2100      	movs	r1, #0
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f004 fe03 	bl	801962c <memset>
    pcb->ttl = UDP_TTL;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	22ff      	movs	r2, #255	; 0xff
 8014a2a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014a2c:	687b      	ldr	r3, [r7, #4]
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3708      	adds	r7, #8
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014a36:	b580      	push	{r7, lr}
 8014a38:	b084      	sub	sp, #16
 8014a3a:	af00      	add	r7, sp, #0
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014a40:	f7ff ffe2 	bl	8014a08 <udp_new>
 8014a44:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014a46:	68fb      	ldr	r3, [r7, #12]
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3710      	adds	r7, #16
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd80      	pop	{r7, pc}

08014a50 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014a50:	b480      	push	{r7}
 8014a52:	b085      	sub	sp, #20
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d01e      	beq.n	8014a9e <udp_netif_ip_addr_changed+0x4e>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d01a      	beq.n	8014a9e <udp_netif_ip_addr_changed+0x4e>
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d017      	beq.n	8014a9e <udp_netif_ip_addr_changed+0x4e>
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d013      	beq.n	8014a9e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a76:	4b0d      	ldr	r3, [pc, #52]	; (8014aac <udp_netif_ip_addr_changed+0x5c>)
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	60fb      	str	r3, [r7, #12]
 8014a7c:	e00c      	b.n	8014a98 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	681a      	ldr	r2, [r3, #0]
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d103      	bne.n	8014a92 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	681a      	ldr	r2, [r3, #0]
 8014a8e:	68fb      	ldr	r3, [r7, #12]
 8014a90:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	60fb      	str	r3, [r7, #12]
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d1ef      	bne.n	8014a7e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014a9e:	bf00      	nop
 8014aa0:	3714      	adds	r7, #20
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop
 8014aac:	200280c4 	.word	0x200280c4

08014ab0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014ab4:	4b20      	ldr	r3, [pc, #128]	; (8014b38 <dhcp_inc_pcb_refcount+0x88>)
 8014ab6:	781b      	ldrb	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d133      	bne.n	8014b24 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014abc:	4b1f      	ldr	r3, [pc, #124]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d005      	beq.n	8014ad0 <dhcp_inc_pcb_refcount+0x20>
 8014ac4:	4b1e      	ldr	r3, [pc, #120]	; (8014b40 <dhcp_inc_pcb_refcount+0x90>)
 8014ac6:	22e5      	movs	r2, #229	; 0xe5
 8014ac8:	491e      	ldr	r1, [pc, #120]	; (8014b44 <dhcp_inc_pcb_refcount+0x94>)
 8014aca:	481f      	ldr	r0, [pc, #124]	; (8014b48 <dhcp_inc_pcb_refcount+0x98>)
 8014acc:	f005 fc30 	bl	801a330 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014ad0:	f7ff ff9a 	bl	8014a08 <udp_new>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	4a19      	ldr	r2, [pc, #100]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014ad8:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014ada:	4b18      	ldr	r3, [pc, #96]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d102      	bne.n	8014ae8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ae6:	e024      	b.n	8014b32 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014ae8:	4b14      	ldr	r3, [pc, #80]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	7a5a      	ldrb	r2, [r3, #9]
 8014aee:	4b13      	ldr	r3, [pc, #76]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014af0:	681b      	ldr	r3, [r3, #0]
 8014af2:	f042 0220 	orr.w	r2, r2, #32
 8014af6:	b2d2      	uxtb	r2, r2
 8014af8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014afa:	4b10      	ldr	r3, [pc, #64]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	2244      	movs	r2, #68	; 0x44
 8014b00:	4912      	ldr	r1, [pc, #72]	; (8014b4c <dhcp_inc_pcb_refcount+0x9c>)
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7ff fe28 	bl	8014758 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014b08:	4b0c      	ldr	r3, [pc, #48]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2243      	movs	r2, #67	; 0x43
 8014b0e:	490f      	ldr	r1, [pc, #60]	; (8014b4c <dhcp_inc_pcb_refcount+0x9c>)
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7ff fea9 	bl	8014868 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014b16:	4b09      	ldr	r3, [pc, #36]	; (8014b3c <dhcp_inc_pcb_refcount+0x8c>)
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	490c      	ldr	r1, [pc, #48]	; (8014b50 <dhcp_inc_pcb_refcount+0xa0>)
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7ff ff10 	bl	8014944 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014b24:	4b04      	ldr	r3, [pc, #16]	; (8014b38 <dhcp_inc_pcb_refcount+0x88>)
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	3301      	adds	r3, #1
 8014b2a:	b2da      	uxtb	r2, r3
 8014b2c:	4b02      	ldr	r3, [pc, #8]	; (8014b38 <dhcp_inc_pcb_refcount+0x88>)
 8014b2e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014b30:	2300      	movs	r3, #0
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	bd80      	pop	{r7, pc}
 8014b36:	bf00      	nop
 8014b38:	200214e4 	.word	0x200214e4
 8014b3c:	200214e0 	.word	0x200214e0
 8014b40:	08021844 	.word	0x08021844
 8014b44:	0802187c 	.word	0x0802187c
 8014b48:	080218a4 	.word	0x080218a4
 8014b4c:	08022488 	.word	0x08022488
 8014b50:	08016489 	.word	0x08016489

08014b54 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014b58:	4b0e      	ldr	r3, [pc, #56]	; (8014b94 <dhcp_dec_pcb_refcount+0x40>)
 8014b5a:	781b      	ldrb	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d105      	bne.n	8014b6c <dhcp_dec_pcb_refcount+0x18>
 8014b60:	4b0d      	ldr	r3, [pc, #52]	; (8014b98 <dhcp_dec_pcb_refcount+0x44>)
 8014b62:	22ff      	movs	r2, #255	; 0xff
 8014b64:	490d      	ldr	r1, [pc, #52]	; (8014b9c <dhcp_dec_pcb_refcount+0x48>)
 8014b66:	480e      	ldr	r0, [pc, #56]	; (8014ba0 <dhcp_dec_pcb_refcount+0x4c>)
 8014b68:	f005 fbe2 	bl	801a330 <iprintf>
  dhcp_pcb_refcount--;
 8014b6c:	4b09      	ldr	r3, [pc, #36]	; (8014b94 <dhcp_dec_pcb_refcount+0x40>)
 8014b6e:	781b      	ldrb	r3, [r3, #0]
 8014b70:	3b01      	subs	r3, #1
 8014b72:	b2da      	uxtb	r2, r3
 8014b74:	4b07      	ldr	r3, [pc, #28]	; (8014b94 <dhcp_dec_pcb_refcount+0x40>)
 8014b76:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014b78:	4b06      	ldr	r3, [pc, #24]	; (8014b94 <dhcp_dec_pcb_refcount+0x40>)
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d107      	bne.n	8014b90 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014b80:	4b08      	ldr	r3, [pc, #32]	; (8014ba4 <dhcp_dec_pcb_refcount+0x50>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	4618      	mov	r0, r3
 8014b86:	f7ff fefd 	bl	8014984 <udp_remove>
    dhcp_pcb = NULL;
 8014b8a:	4b06      	ldr	r3, [pc, #24]	; (8014ba4 <dhcp_dec_pcb_refcount+0x50>)
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	601a      	str	r2, [r3, #0]
  }
}
 8014b90:	bf00      	nop
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	200214e4 	.word	0x200214e4
 8014b98:	08021844 	.word	0x08021844
 8014b9c:	080218cc 	.word	0x080218cc
 8014ba0:	080218a4 	.word	0x080218a4
 8014ba4:	200214e0 	.word	0x200214e0

08014ba8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bb4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014bb6:	210c      	movs	r1, #12
 8014bb8:	68f8      	ldr	r0, [r7, #12]
 8014bba:	f001 f877 	bl	8015cac <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014bbe:	4b06      	ldr	r3, [pc, #24]	; (8014bd8 <dhcp_handle_nak+0x30>)
 8014bc0:	4a05      	ldr	r2, [pc, #20]	; (8014bd8 <dhcp_handle_nak+0x30>)
 8014bc2:	4905      	ldr	r1, [pc, #20]	; (8014bd8 <dhcp_handle_nak+0x30>)
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	f7f7 fed1 	bl	800c96c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f000 fc6a 	bl	80154a4 <dhcp_discover>
}
 8014bd0:	bf00      	nop
 8014bd2:	3710      	adds	r7, #16
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	bd80      	pop	{r7, pc}
 8014bd8:	08022488 	.word	0x08022488

08014bdc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014be8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014bea:	2108      	movs	r1, #8
 8014bec:	68f8      	ldr	r0, [r7, #12]
 8014bee:	f001 f85d 	bl	8015cac <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	331c      	adds	r3, #28
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	4619      	mov	r1, r3
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f002 fb8e 	bl	801731c <etharp_query>
 8014c00:	4603      	mov	r3, r0
 8014c02:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	799b      	ldrb	r3, [r3, #6]
 8014c08:	2bff      	cmp	r3, #255	; 0xff
 8014c0a:	d005      	beq.n	8014c18 <dhcp_check+0x3c>
    dhcp->tries++;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	799b      	ldrb	r3, [r3, #6]
 8014c10:	3301      	adds	r3, #1
 8014c12:	b2da      	uxtb	r2, r3
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014c18:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014c1c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014c1e:	893b      	ldrh	r3, [r7, #8]
 8014c20:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014c24:	4a06      	ldr	r2, [pc, #24]	; (8014c40 <dhcp_check+0x64>)
 8014c26:	fb82 1203 	smull	r1, r2, r2, r3
 8014c2a:	1152      	asrs	r2, r2, #5
 8014c2c:	17db      	asrs	r3, r3, #31
 8014c2e:	1ad3      	subs	r3, r2, r3
 8014c30:	b29a      	uxth	r2, r3
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014c36:	bf00      	nop
 8014c38:	3710      	adds	r7, #16
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	10624dd3 	.word	0x10624dd3

08014c44 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c52:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014c54:	4b0c      	ldr	r3, [pc, #48]	; (8014c88 <dhcp_handle_offer+0x44>)
 8014c56:	789b      	ldrb	r3, [r3, #2]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d011      	beq.n	8014c80 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014c62:	4b0a      	ldr	r3, [pc, #40]	; (8014c8c <dhcp_handle_offer+0x48>)
 8014c64:	689b      	ldr	r3, [r3, #8]
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7f6 f815 	bl	800ac96 <lwip_htonl>
 8014c6c:	4602      	mov	r2, r0
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	691a      	ldr	r2, [r3, #16]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014c7a:	6878      	ldr	r0, [r7, #4]
 8014c7c:	f000 f808 	bl	8014c90 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014c80:	bf00      	nop
 8014c82:	3710      	adds	r7, #16
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	200280c8 	.word	0x200280c8
 8014c8c:	200280d4 	.word	0x200280d4

08014c90 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014c90:	b5b0      	push	{r4, r5, r7, lr}
 8014c92:	b08a      	sub	sp, #40	; 0x28
 8014c94:	af02      	add	r7, sp, #8
 8014c96:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d109      	bne.n	8014cb2 <dhcp_select+0x22>
 8014c9e:	4b71      	ldr	r3, [pc, #452]	; (8014e64 <dhcp_select+0x1d4>)
 8014ca0:	f240 1277 	movw	r2, #375	; 0x177
 8014ca4:	4970      	ldr	r1, [pc, #448]	; (8014e68 <dhcp_select+0x1d8>)
 8014ca6:	4871      	ldr	r0, [pc, #452]	; (8014e6c <dhcp_select+0x1dc>)
 8014ca8:	f005 fb42 	bl	801a330 <iprintf>
 8014cac:	f06f 030f 	mvn.w	r3, #15
 8014cb0:	e0d3      	b.n	8014e5a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cb6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d109      	bne.n	8014cd2 <dhcp_select+0x42>
 8014cbe:	4b69      	ldr	r3, [pc, #420]	; (8014e64 <dhcp_select+0x1d4>)
 8014cc0:	f240 1279 	movw	r2, #377	; 0x179
 8014cc4:	496a      	ldr	r1, [pc, #424]	; (8014e70 <dhcp_select+0x1e0>)
 8014cc6:	4869      	ldr	r0, [pc, #420]	; (8014e6c <dhcp_select+0x1dc>)
 8014cc8:	f005 fb32 	bl	801a330 <iprintf>
 8014ccc:	f06f 0305 	mvn.w	r3, #5
 8014cd0:	e0c3      	b.n	8014e5a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	69b8      	ldr	r0, [r7, #24]
 8014cd6:	f000 ffe9 	bl	8015cac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014cda:	f107 030c 	add.w	r3, r7, #12
 8014cde:	2203      	movs	r2, #3
 8014ce0:	69b9      	ldr	r1, [r7, #24]
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f001 fc9e 	bl	8016624 <dhcp_create_msg>
 8014ce8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014cea:	697b      	ldr	r3, [r7, #20]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	f000 8085 	beq.w	8014dfc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014cf8:	89b8      	ldrh	r0, [r7, #12]
 8014cfa:	693b      	ldr	r3, [r7, #16]
 8014cfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d00:	2302      	movs	r3, #2
 8014d02:	2239      	movs	r2, #57	; 0x39
 8014d04:	f000 ffec 	bl	8015ce0 <dhcp_option>
 8014d08:	4603      	mov	r3, r0
 8014d0a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014d0c:	89b8      	ldrh	r0, [r7, #12]
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d18:	461a      	mov	r2, r3
 8014d1a:	f001 f83b 	bl	8015d94 <dhcp_option_short>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014d22:	89b8      	ldrh	r0, [r7, #12]
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d2a:	2304      	movs	r3, #4
 8014d2c:	2232      	movs	r2, #50	; 0x32
 8014d2e:	f000 ffd7 	bl	8015ce0 <dhcp_option>
 8014d32:	4603      	mov	r3, r0
 8014d34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014d36:	89bc      	ldrh	r4, [r7, #12]
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d3e:	69bb      	ldr	r3, [r7, #24]
 8014d40:	69db      	ldr	r3, [r3, #28]
 8014d42:	4618      	mov	r0, r3
 8014d44:	f7f5 ffa7 	bl	800ac96 <lwip_htonl>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	4629      	mov	r1, r5
 8014d4e:	4620      	mov	r0, r4
 8014d50:	f001 f852 	bl	8015df8 <dhcp_option_long>
 8014d54:	4603      	mov	r3, r0
 8014d56:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014d58:	89b8      	ldrh	r0, [r7, #12]
 8014d5a:	693b      	ldr	r3, [r7, #16]
 8014d5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d60:	2304      	movs	r3, #4
 8014d62:	2236      	movs	r2, #54	; 0x36
 8014d64:	f000 ffbc 	bl	8015ce0 <dhcp_option>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014d6c:	89bc      	ldrh	r4, [r7, #12]
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014d74:	69bb      	ldr	r3, [r7, #24]
 8014d76:	699b      	ldr	r3, [r3, #24]
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f7f5 ff8c 	bl	800ac96 <lwip_htonl>
 8014d7e:	4603      	mov	r3, r0
 8014d80:	461a      	mov	r2, r3
 8014d82:	4629      	mov	r1, r5
 8014d84:	4620      	mov	r0, r4
 8014d86:	f001 f837 	bl	8015df8 <dhcp_option_long>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014d8e:	89b8      	ldrh	r0, [r7, #12]
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014d96:	2304      	movs	r3, #4
 8014d98:	2237      	movs	r2, #55	; 0x37
 8014d9a:	f000 ffa1 	bl	8015ce0 <dhcp_option>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014da2:	2300      	movs	r3, #0
 8014da4:	77bb      	strb	r3, [r7, #30]
 8014da6:	e00e      	b.n	8014dc6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014da8:	89b8      	ldrh	r0, [r7, #12]
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014db0:	7fbb      	ldrb	r3, [r7, #30]
 8014db2:	4a30      	ldr	r2, [pc, #192]	; (8014e74 <dhcp_select+0x1e4>)
 8014db4:	5cd3      	ldrb	r3, [r2, r3]
 8014db6:	461a      	mov	r2, r3
 8014db8:	f000 ffc6 	bl	8015d48 <dhcp_option_byte>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014dc0:	7fbb      	ldrb	r3, [r7, #30]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	77bb      	strb	r3, [r7, #30]
 8014dc6:	7fbb      	ldrb	r3, [r7, #30]
 8014dc8:	2b03      	cmp	r3, #3
 8014dca:	d9ed      	bls.n	8014da8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014dcc:	89b8      	ldrh	r0, [r7, #12]
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	33f0      	adds	r3, #240	; 0xf0
 8014dd2:	697a      	ldr	r2, [r7, #20]
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	f001 fcfb 	bl	80167d0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014dda:	4b27      	ldr	r3, [pc, #156]	; (8014e78 <dhcp_select+0x1e8>)
 8014ddc:	6818      	ldr	r0, [r3, #0]
 8014dde:	4b27      	ldr	r3, [pc, #156]	; (8014e7c <dhcp_select+0x1ec>)
 8014de0:	9301      	str	r3, [sp, #4]
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	9300      	str	r3, [sp, #0]
 8014de6:	2343      	movs	r3, #67	; 0x43
 8014de8:	4a25      	ldr	r2, [pc, #148]	; (8014e80 <dhcp_select+0x1f0>)
 8014dea:	6979      	ldr	r1, [r7, #20]
 8014dec:	f7ff fbce 	bl	801458c <udp_sendto_if_src>
 8014df0:	4603      	mov	r3, r0
 8014df2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014df4:	6978      	ldr	r0, [r7, #20]
 8014df6:	f7f8 fac7 	bl	800d388 <pbuf_free>
 8014dfa:	e001      	b.n	8014e00 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014dfc:	23ff      	movs	r3, #255	; 0xff
 8014dfe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	799b      	ldrb	r3, [r3, #6]
 8014e04:	2bff      	cmp	r3, #255	; 0xff
 8014e06:	d005      	beq.n	8014e14 <dhcp_select+0x184>
    dhcp->tries++;
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	799b      	ldrb	r3, [r3, #6]
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	b2da      	uxtb	r2, r3
 8014e10:	69bb      	ldr	r3, [r7, #24]
 8014e12:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014e14:	69bb      	ldr	r3, [r7, #24]
 8014e16:	799b      	ldrb	r3, [r3, #6]
 8014e18:	2b05      	cmp	r3, #5
 8014e1a:	d80d      	bhi.n	8014e38 <dhcp_select+0x1a8>
 8014e1c:	69bb      	ldr	r3, [r7, #24]
 8014e1e:	799b      	ldrb	r3, [r3, #6]
 8014e20:	461a      	mov	r2, r3
 8014e22:	2301      	movs	r3, #1
 8014e24:	4093      	lsls	r3, r2
 8014e26:	b29b      	uxth	r3, r3
 8014e28:	461a      	mov	r2, r3
 8014e2a:	0152      	lsls	r2, r2, #5
 8014e2c:	1ad2      	subs	r2, r2, r3
 8014e2e:	0092      	lsls	r2, r2, #2
 8014e30:	4413      	add	r3, r2
 8014e32:	00db      	lsls	r3, r3, #3
 8014e34:	b29b      	uxth	r3, r3
 8014e36:	e001      	b.n	8014e3c <dhcp_select+0x1ac>
 8014e38:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014e3c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014e3e:	89fb      	ldrh	r3, [r7, #14]
 8014e40:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014e44:	4a0f      	ldr	r2, [pc, #60]	; (8014e84 <dhcp_select+0x1f4>)
 8014e46:	fb82 1203 	smull	r1, r2, r2, r3
 8014e4a:	1152      	asrs	r2, r2, #5
 8014e4c:	17db      	asrs	r3, r3, #31
 8014e4e:	1ad3      	subs	r3, r2, r3
 8014e50:	b29a      	uxth	r2, r3
 8014e52:	69bb      	ldr	r3, [r7, #24]
 8014e54:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014e56:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3720      	adds	r7, #32
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bdb0      	pop	{r4, r5, r7, pc}
 8014e62:	bf00      	nop
 8014e64:	08021844 	.word	0x08021844
 8014e68:	080218f0 	.word	0x080218f0
 8014e6c:	080218a4 	.word	0x080218a4
 8014e70:	0802190c 	.word	0x0802190c
 8014e74:	2000001c 	.word	0x2000001c
 8014e78:	200214e0 	.word	0x200214e0
 8014e7c:	08022488 	.word	0x08022488
 8014e80:	0802248c 	.word	0x0802248c
 8014e84:	10624dd3 	.word	0x10624dd3

08014e88 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b082      	sub	sp, #8
 8014e8c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014e8e:	4b27      	ldr	r3, [pc, #156]	; (8014f2c <dhcp_coarse_tmr+0xa4>)
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	607b      	str	r3, [r7, #4]
 8014e94:	e042      	b.n	8014f1c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e9a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d039      	beq.n	8014f16 <dhcp_coarse_tmr+0x8e>
 8014ea2:	683b      	ldr	r3, [r7, #0]
 8014ea4:	795b      	ldrb	r3, [r3, #5]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d035      	beq.n	8014f16 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	8a9b      	ldrh	r3, [r3, #20]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d012      	beq.n	8014ed8 <dhcp_coarse_tmr+0x50>
 8014eb2:	683b      	ldr	r3, [r7, #0]
 8014eb4:	8a5b      	ldrh	r3, [r3, #18]
 8014eb6:	3301      	adds	r3, #1
 8014eb8:	b29a      	uxth	r2, r3
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	825a      	strh	r2, [r3, #18]
 8014ebe:	683b      	ldr	r3, [r7, #0]
 8014ec0:	8a5a      	ldrh	r2, [r3, #18]
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	8a9b      	ldrh	r3, [r3, #20]
 8014ec6:	429a      	cmp	r2, r3
 8014ec8:	d106      	bne.n	8014ed8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014eca:	6878      	ldr	r0, [r7, #4]
 8014ecc:	f000 fe54 	bl	8015b78 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f000 f98b 	bl	80151ec <dhcp_start>
 8014ed6:	e01e      	b.n	8014f16 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	8a1b      	ldrh	r3, [r3, #16]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d00b      	beq.n	8014ef8 <dhcp_coarse_tmr+0x70>
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	8a1b      	ldrh	r3, [r3, #16]
 8014ee4:	1e5a      	subs	r2, r3, #1
 8014ee6:	b291      	uxth	r1, r2
 8014ee8:	683a      	ldr	r2, [r7, #0]
 8014eea:	8211      	strh	r1, [r2, #16]
 8014eec:	2b01      	cmp	r3, #1
 8014eee:	d103      	bne.n	8014ef8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014ef0:	6878      	ldr	r0, [r7, #4]
 8014ef2:	f000 f8c7 	bl	8015084 <dhcp_t2_timeout>
 8014ef6:	e00e      	b.n	8014f16 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	89db      	ldrh	r3, [r3, #14]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d00a      	beq.n	8014f16 <dhcp_coarse_tmr+0x8e>
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	89db      	ldrh	r3, [r3, #14]
 8014f04:	1e5a      	subs	r2, r3, #1
 8014f06:	b291      	uxth	r1, r2
 8014f08:	683a      	ldr	r2, [r7, #0]
 8014f0a:	81d1      	strh	r1, [r2, #14]
 8014f0c:	2b01      	cmp	r3, #1
 8014f0e:	d102      	bne.n	8014f16 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 f888 	bl	8015026 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	607b      	str	r3, [r7, #4]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d1b9      	bne.n	8014e96 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014f22:	bf00      	nop
 8014f24:	bf00      	nop
 8014f26:	3708      	adds	r7, #8
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	2002809c 	.word	0x2002809c

08014f30 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014f36:	4b16      	ldr	r3, [pc, #88]	; (8014f90 <dhcp_fine_tmr+0x60>)
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	607b      	str	r3, [r7, #4]
 8014f3c:	e020      	b.n	8014f80 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f42:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d017      	beq.n	8014f7a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014f4a:	683b      	ldr	r3, [r7, #0]
 8014f4c:	891b      	ldrh	r3, [r3, #8]
 8014f4e:	2b01      	cmp	r3, #1
 8014f50:	d906      	bls.n	8014f60 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	891b      	ldrh	r3, [r3, #8]
 8014f56:	3b01      	subs	r3, #1
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	683b      	ldr	r3, [r7, #0]
 8014f5c:	811a      	strh	r2, [r3, #8]
 8014f5e:	e00c      	b.n	8014f7a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	891b      	ldrh	r3, [r3, #8]
 8014f64:	2b01      	cmp	r3, #1
 8014f66:	d108      	bne.n	8014f7a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	891b      	ldrh	r3, [r3, #8]
 8014f6c:	3b01      	subs	r3, #1
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f000 f80d 	bl	8014f94 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	607b      	str	r3, [r7, #4]
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d1db      	bne.n	8014f3e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014f86:	bf00      	nop
 8014f88:	bf00      	nop
 8014f8a:	3708      	adds	r7, #8
 8014f8c:	46bd      	mov	sp, r7
 8014f8e:	bd80      	pop	{r7, pc}
 8014f90:	2002809c 	.word	0x2002809c

08014f94 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b084      	sub	sp, #16
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fa0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	795b      	ldrb	r3, [r3, #5]
 8014fa6:	2b0c      	cmp	r3, #12
 8014fa8:	d003      	beq.n	8014fb2 <dhcp_timeout+0x1e>
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	795b      	ldrb	r3, [r3, #5]
 8014fae:	2b06      	cmp	r3, #6
 8014fb0:	d103      	bne.n	8014fba <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f000 fa76 	bl	80154a4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014fb8:	e031      	b.n	801501e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	795b      	ldrb	r3, [r3, #5]
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d10e      	bne.n	8014fe0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	799b      	ldrb	r3, [r3, #6]
 8014fc6:	2b05      	cmp	r3, #5
 8014fc8:	d803      	bhi.n	8014fd2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7ff fe60 	bl	8014c90 <dhcp_select>
}
 8014fd0:	e025      	b.n	801501e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014fd2:	6878      	ldr	r0, [r7, #4]
 8014fd4:	f000 fdd0 	bl	8015b78 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f000 f907 	bl	80151ec <dhcp_start>
}
 8014fde:	e01e      	b.n	801501e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	795b      	ldrb	r3, [r3, #5]
 8014fe4:	2b08      	cmp	r3, #8
 8014fe6:	d10b      	bne.n	8015000 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014fe8:	68fb      	ldr	r3, [r7, #12]
 8014fea:	799b      	ldrb	r3, [r3, #6]
 8014fec:	2b01      	cmp	r3, #1
 8014fee:	d803      	bhi.n	8014ff8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014ff0:	6878      	ldr	r0, [r7, #4]
 8014ff2:	f7ff fdf3 	bl	8014bdc <dhcp_check>
}
 8014ff6:	e012      	b.n	801501e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f000 faf5 	bl	80155e8 <dhcp_bind>
}
 8014ffe:	e00e      	b.n	801501e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	795b      	ldrb	r3, [r3, #5]
 8015004:	2b03      	cmp	r3, #3
 8015006:	d10a      	bne.n	801501e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	799b      	ldrb	r3, [r3, #6]
 801500c:	2b01      	cmp	r3, #1
 801500e:	d803      	bhi.n	8015018 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f000 fcfb 	bl	8015a0c <dhcp_reboot>
}
 8015016:	e002      	b.n	801501e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f000 fa43 	bl	80154a4 <dhcp_discover>
}
 801501e:	bf00      	nop
 8015020:	3710      	adds	r7, #16
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}

08015026 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015026:	b580      	push	{r7, lr}
 8015028:	b084      	sub	sp, #16
 801502a:	af00      	add	r7, sp, #0
 801502c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015032:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	795b      	ldrb	r3, [r3, #5]
 8015038:	2b01      	cmp	r3, #1
 801503a:	d007      	beq.n	801504c <dhcp_t1_timeout+0x26>
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	795b      	ldrb	r3, [r3, #5]
 8015040:	2b0a      	cmp	r3, #10
 8015042:	d003      	beq.n	801504c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015048:	2b05      	cmp	r3, #5
 801504a:	d117      	bne.n	801507c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	f000 fba5 	bl	801579c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	899b      	ldrh	r3, [r3, #12]
 8015056:	461a      	mov	r2, r3
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	8a5b      	ldrh	r3, [r3, #18]
 801505c:	1ad3      	subs	r3, r2, r3
 801505e:	2b01      	cmp	r3, #1
 8015060:	dd0c      	ble.n	801507c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	899b      	ldrh	r3, [r3, #12]
 8015066:	461a      	mov	r2, r3
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	8a5b      	ldrh	r3, [r3, #18]
 801506c:	1ad3      	subs	r3, r2, r3
 801506e:	2b00      	cmp	r3, #0
 8015070:	da00      	bge.n	8015074 <dhcp_t1_timeout+0x4e>
 8015072:	3301      	adds	r3, #1
 8015074:	105b      	asrs	r3, r3, #1
 8015076:	b29a      	uxth	r2, r3
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801507c:	bf00      	nop
 801507e:	3710      	adds	r7, #16
 8015080:	46bd      	mov	sp, r7
 8015082:	bd80      	pop	{r7, pc}

08015084 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015090:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	795b      	ldrb	r3, [r3, #5]
 8015096:	2b01      	cmp	r3, #1
 8015098:	d00b      	beq.n	80150b2 <dhcp_t2_timeout+0x2e>
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	795b      	ldrb	r3, [r3, #5]
 801509e:	2b0a      	cmp	r3, #10
 80150a0:	d007      	beq.n	80150b2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80150a6:	2b05      	cmp	r3, #5
 80150a8:	d003      	beq.n	80150b2 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	795b      	ldrb	r3, [r3, #5]
 80150ae:	2b04      	cmp	r3, #4
 80150b0:	d117      	bne.n	80150e2 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f000 fc0e 	bl	80158d4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	8a9b      	ldrh	r3, [r3, #20]
 80150bc:	461a      	mov	r2, r3
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	8a5b      	ldrh	r3, [r3, #18]
 80150c2:	1ad3      	subs	r3, r2, r3
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	dd0c      	ble.n	80150e2 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	8a9b      	ldrh	r3, [r3, #20]
 80150cc:	461a      	mov	r2, r3
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	8a5b      	ldrh	r3, [r3, #18]
 80150d2:	1ad3      	subs	r3, r2, r3
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	da00      	bge.n	80150da <dhcp_t2_timeout+0x56>
 80150d8:	3301      	adds	r3, #1
 80150da:	105b      	asrs	r3, r3, #1
 80150dc:	b29a      	uxth	r2, r3
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80150e2:	bf00      	nop
 80150e4:	3710      	adds	r7, #16
 80150e6:	46bd      	mov	sp, r7
 80150e8:	bd80      	pop	{r7, pc}
	...

080150ec <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b086      	sub	sp, #24
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150fa:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	2200      	movs	r2, #0
 8015100:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015102:	693b      	ldr	r3, [r7, #16]
 8015104:	2200      	movs	r2, #0
 8015106:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015108:	4b36      	ldr	r3, [pc, #216]	; (80151e4 <dhcp_handle_ack+0xf8>)
 801510a:	78db      	ldrb	r3, [r3, #3]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d003      	beq.n	8015118 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015110:	4b35      	ldr	r3, [pc, #212]	; (80151e8 <dhcp_handle_ack+0xfc>)
 8015112:	68da      	ldr	r2, [r3, #12]
 8015114:	693b      	ldr	r3, [r7, #16]
 8015116:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015118:	4b32      	ldr	r3, [pc, #200]	; (80151e4 <dhcp_handle_ack+0xf8>)
 801511a:	791b      	ldrb	r3, [r3, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d004      	beq.n	801512a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015120:	4b31      	ldr	r3, [pc, #196]	; (80151e8 <dhcp_handle_ack+0xfc>)
 8015122:	691a      	ldr	r2, [r3, #16]
 8015124:	693b      	ldr	r3, [r7, #16]
 8015126:	62da      	str	r2, [r3, #44]	; 0x2c
 8015128:	e004      	b.n	8015134 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801512a:	693b      	ldr	r3, [r7, #16]
 801512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801512e:	085a      	lsrs	r2, r3, #1
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015134:	4b2b      	ldr	r3, [pc, #172]	; (80151e4 <dhcp_handle_ack+0xf8>)
 8015136:	795b      	ldrb	r3, [r3, #5]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d004      	beq.n	8015146 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801513c:	4b2a      	ldr	r3, [pc, #168]	; (80151e8 <dhcp_handle_ack+0xfc>)
 801513e:	695a      	ldr	r2, [r3, #20]
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	631a      	str	r2, [r3, #48]	; 0x30
 8015144:	e007      	b.n	8015156 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801514a:	4613      	mov	r3, r2
 801514c:	00db      	lsls	r3, r3, #3
 801514e:	1a9b      	subs	r3, r3, r2
 8015150:	08da      	lsrs	r2, r3, #3
 8015152:	693b      	ldr	r3, [r7, #16]
 8015154:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	691a      	ldr	r2, [r3, #16]
 801515a:	693b      	ldr	r3, [r7, #16]
 801515c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801515e:	4b21      	ldr	r3, [pc, #132]	; (80151e4 <dhcp_handle_ack+0xf8>)
 8015160:	799b      	ldrb	r3, [r3, #6]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d00b      	beq.n	801517e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015166:	4b20      	ldr	r3, [pc, #128]	; (80151e8 <dhcp_handle_ack+0xfc>)
 8015168:	699b      	ldr	r3, [r3, #24]
 801516a:	4618      	mov	r0, r3
 801516c:	f7f5 fd93 	bl	800ac96 <lwip_htonl>
 8015170:	4602      	mov	r2, r0
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	2201      	movs	r2, #1
 801517a:	71da      	strb	r2, [r3, #7]
 801517c:	e002      	b.n	8015184 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801517e:	693b      	ldr	r3, [r7, #16]
 8015180:	2200      	movs	r2, #0
 8015182:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015184:	4b17      	ldr	r3, [pc, #92]	; (80151e4 <dhcp_handle_ack+0xf8>)
 8015186:	79db      	ldrb	r3, [r3, #7]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d007      	beq.n	801519c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801518c:	4b16      	ldr	r3, [pc, #88]	; (80151e8 <dhcp_handle_ack+0xfc>)
 801518e:	69db      	ldr	r3, [r3, #28]
 8015190:	4618      	mov	r0, r3
 8015192:	f7f5 fd80 	bl	800ac96 <lwip_htonl>
 8015196:	4602      	mov	r2, r0
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801519c:	2300      	movs	r3, #0
 801519e:	75fb      	strb	r3, [r7, #23]
 80151a0:	e013      	b.n	80151ca <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80151a2:	7dfb      	ldrb	r3, [r7, #23]
 80151a4:	3308      	adds	r3, #8
 80151a6:	4a10      	ldr	r2, [pc, #64]	; (80151e8 <dhcp_handle_ack+0xfc>)
 80151a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7f5 fd72 	bl	800ac96 <lwip_htonl>
 80151b2:	4603      	mov	r3, r0
 80151b4:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 80151b6:	f107 020c 	add.w	r2, r7, #12
 80151ba:	7dfb      	ldrb	r3, [r7, #23]
 80151bc:	4611      	mov	r1, r2
 80151be:	4618      	mov	r0, r3
 80151c0:	f7f5 fdc4 	bl	800ad4c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80151c4:	7dfb      	ldrb	r3, [r7, #23]
 80151c6:	3301      	adds	r3, #1
 80151c8:	75fb      	strb	r3, [r7, #23]
 80151ca:	7dfb      	ldrb	r3, [r7, #23]
 80151cc:	2b01      	cmp	r3, #1
 80151ce:	d805      	bhi.n	80151dc <dhcp_handle_ack+0xf0>
 80151d0:	7dfb      	ldrb	r3, [r7, #23]
 80151d2:	3308      	adds	r3, #8
 80151d4:	4a03      	ldr	r2, [pc, #12]	; (80151e4 <dhcp_handle_ack+0xf8>)
 80151d6:	5cd3      	ldrb	r3, [r2, r3]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d1e2      	bne.n	80151a2 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80151dc:	bf00      	nop
 80151de:	3718      	adds	r7, #24
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	200280c8 	.word	0x200280c8
 80151e8:	200280d4 	.word	0x200280d4

080151ec <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b084      	sub	sp, #16
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d109      	bne.n	801520e <dhcp_start+0x22>
 80151fa:	4b37      	ldr	r3, [pc, #220]	; (80152d8 <dhcp_start+0xec>)
 80151fc:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015200:	4936      	ldr	r1, [pc, #216]	; (80152dc <dhcp_start+0xf0>)
 8015202:	4837      	ldr	r0, [pc, #220]	; (80152e0 <dhcp_start+0xf4>)
 8015204:	f005 f894 	bl	801a330 <iprintf>
 8015208:	f06f 030f 	mvn.w	r3, #15
 801520c:	e060      	b.n	80152d0 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015214:	f003 0301 	and.w	r3, r3, #1
 8015218:	2b00      	cmp	r3, #0
 801521a:	d109      	bne.n	8015230 <dhcp_start+0x44>
 801521c:	4b2e      	ldr	r3, [pc, #184]	; (80152d8 <dhcp_start+0xec>)
 801521e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015222:	4930      	ldr	r1, [pc, #192]	; (80152e4 <dhcp_start+0xf8>)
 8015224:	482e      	ldr	r0, [pc, #184]	; (80152e0 <dhcp_start+0xf4>)
 8015226:	f005 f883 	bl	801a330 <iprintf>
 801522a:	f06f 030f 	mvn.w	r3, #15
 801522e:	e04f      	b.n	80152d0 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015234:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801523a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801523e:	d202      	bcs.n	8015246 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015240:	f04f 33ff 	mov.w	r3, #4294967295
 8015244:	e044      	b.n	80152d0 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	2b00      	cmp	r3, #0
 801524a:	d10d      	bne.n	8015268 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801524c:	2034      	movs	r0, #52	; 0x34
 801524e:	f7f7 f817 	bl	800c280 <mem_malloc>
 8015252:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d102      	bne.n	8015260 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801525a:	f04f 33ff 	mov.w	r3, #4294967295
 801525e:	e037      	b.n	80152d0 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	68fa      	ldr	r2, [r7, #12]
 8015264:	625a      	str	r2, [r3, #36]	; 0x24
 8015266:	e005      	b.n	8015274 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	791b      	ldrb	r3, [r3, #4]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d001      	beq.n	8015274 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015270:	f7ff fc70 	bl	8014b54 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015274:	2234      	movs	r2, #52	; 0x34
 8015276:	2100      	movs	r1, #0
 8015278:	68f8      	ldr	r0, [r7, #12]
 801527a:	f004 f9d7 	bl	801962c <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801527e:	f7ff fc17 	bl	8014ab0 <dhcp_inc_pcb_refcount>
 8015282:	4603      	mov	r3, r0
 8015284:	2b00      	cmp	r3, #0
 8015286:	d002      	beq.n	801528e <dhcp_start+0xa2>
    return ERR_MEM;
 8015288:	f04f 33ff 	mov.w	r3, #4294967295
 801528c:	e020      	b.n	80152d0 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	2201      	movs	r2, #1
 8015292:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801529a:	f003 0304 	and.w	r3, r3, #4
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d105      	bne.n	80152ae <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80152a2:	2102      	movs	r1, #2
 80152a4:	68f8      	ldr	r0, [r7, #12]
 80152a6:	f000 fd01 	bl	8015cac <dhcp_set_state>
    return ERR_OK;
 80152aa:	2300      	movs	r3, #0
 80152ac:	e010      	b.n	80152d0 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f000 f8f8 	bl	80154a4 <dhcp_discover>
 80152b4:	4603      	mov	r3, r0
 80152b6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80152b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d005      	beq.n	80152cc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f000 fc59 	bl	8015b78 <dhcp_release_and_stop>
    return ERR_MEM;
 80152c6:	f04f 33ff 	mov.w	r3, #4294967295
 80152ca:	e001      	b.n	80152d0 <dhcp_start+0xe4>
  }
  return result;
 80152cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	3710      	adds	r7, #16
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd80      	pop	{r7, pc}
 80152d8:	08021844 	.word	0x08021844
 80152dc:	08021928 	.word	0x08021928
 80152e0:	080218a4 	.word	0x080218a4
 80152e4:	0802196c 	.word	0x0802196c

080152e8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b084      	sub	sp, #16
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152f4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d025      	beq.n	8015348 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	795b      	ldrb	r3, [r3, #5]
 8015300:	2b0a      	cmp	r3, #10
 8015302:	d008      	beq.n	8015316 <dhcp_network_changed+0x2e>
 8015304:	2b0a      	cmp	r3, #10
 8015306:	dc0d      	bgt.n	8015324 <dhcp_network_changed+0x3c>
 8015308:	2b00      	cmp	r3, #0
 801530a:	d01f      	beq.n	801534c <dhcp_network_changed+0x64>
 801530c:	2b00      	cmp	r3, #0
 801530e:	db09      	blt.n	8015324 <dhcp_network_changed+0x3c>
 8015310:	3b03      	subs	r3, #3
 8015312:	2b02      	cmp	r3, #2
 8015314:	d806      	bhi.n	8015324 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	2200      	movs	r2, #0
 801531a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f000 fb75 	bl	8015a0c <dhcp_reboot>
      break;
 8015322:	e014      	b.n	801534e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	795b      	ldrb	r3, [r3, #5]
 8015328:	2b0c      	cmp	r3, #12
 801532a:	d906      	bls.n	801533a <dhcp_network_changed+0x52>
 801532c:	4b09      	ldr	r3, [pc, #36]	; (8015354 <dhcp_network_changed+0x6c>)
 801532e:	f240 326d 	movw	r2, #877	; 0x36d
 8015332:	4909      	ldr	r1, [pc, #36]	; (8015358 <dhcp_network_changed+0x70>)
 8015334:	4809      	ldr	r0, [pc, #36]	; (801535c <dhcp_network_changed+0x74>)
 8015336:	f004 fffb 	bl	801a330 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	2200      	movs	r2, #0
 801533e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f000 f8af 	bl	80154a4 <dhcp_discover>
      break;
 8015346:	e002      	b.n	801534e <dhcp_network_changed+0x66>
    return;
 8015348:	bf00      	nop
 801534a:	e000      	b.n	801534e <dhcp_network_changed+0x66>
      break;
 801534c:	bf00      	nop
  }
}
 801534e:	3710      	adds	r7, #16
 8015350:	46bd      	mov	sp, r7
 8015352:	bd80      	pop	{r7, pc}
 8015354:	08021844 	.word	0x08021844
 8015358:	08021990 	.word	0x08021990
 801535c:	080218a4 	.word	0x080218a4

08015360 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b084      	sub	sp, #16
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
 8015368:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d107      	bne.n	8015380 <dhcp_arp_reply+0x20>
 8015370:	4b0e      	ldr	r3, [pc, #56]	; (80153ac <dhcp_arp_reply+0x4c>)
 8015372:	f240 328b 	movw	r2, #907	; 0x38b
 8015376:	490e      	ldr	r1, [pc, #56]	; (80153b0 <dhcp_arp_reply+0x50>)
 8015378:	480e      	ldr	r0, [pc, #56]	; (80153b4 <dhcp_arp_reply+0x54>)
 801537a:	f004 ffd9 	bl	801a330 <iprintf>
 801537e:	e012      	b.n	80153a6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015384:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d00c      	beq.n	80153a6 <dhcp_arp_reply+0x46>
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	795b      	ldrb	r3, [r3, #5]
 8015390:	2b08      	cmp	r3, #8
 8015392:	d108      	bne.n	80153a6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	69db      	ldr	r3, [r3, #28]
 801539c:	429a      	cmp	r2, r3
 801539e:	d102      	bne.n	80153a6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f000 f809 	bl	80153b8 <dhcp_decline>
    }
  }
}
 80153a6:	3710      	adds	r7, #16
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	08021844 	.word	0x08021844
 80153b0:	08021928 	.word	0x08021928
 80153b4:	080218a4 	.word	0x080218a4

080153b8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80153b8:	b5b0      	push	{r4, r5, r7, lr}
 80153ba:	b08a      	sub	sp, #40	; 0x28
 80153bc:	af02      	add	r7, sp, #8
 80153be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153c4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80153c6:	210c      	movs	r1, #12
 80153c8:	69b8      	ldr	r0, [r7, #24]
 80153ca:	f000 fc6f 	bl	8015cac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80153ce:	f107 030c 	add.w	r3, r7, #12
 80153d2:	2204      	movs	r2, #4
 80153d4:	69b9      	ldr	r1, [r7, #24]
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f001 f924 	bl	8016624 <dhcp_create_msg>
 80153dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d035      	beq.n	8015450 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80153ea:	89b8      	ldrh	r0, [r7, #12]
 80153ec:	693b      	ldr	r3, [r7, #16]
 80153ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153f2:	2304      	movs	r3, #4
 80153f4:	2232      	movs	r2, #50	; 0x32
 80153f6:	f000 fc73 	bl	8015ce0 <dhcp_option>
 80153fa:	4603      	mov	r3, r0
 80153fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80153fe:	89bc      	ldrh	r4, [r7, #12]
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015406:	69bb      	ldr	r3, [r7, #24]
 8015408:	69db      	ldr	r3, [r3, #28]
 801540a:	4618      	mov	r0, r3
 801540c:	f7f5 fc43 	bl	800ac96 <lwip_htonl>
 8015410:	4603      	mov	r3, r0
 8015412:	461a      	mov	r2, r3
 8015414:	4629      	mov	r1, r5
 8015416:	4620      	mov	r0, r4
 8015418:	f000 fcee 	bl	8015df8 <dhcp_option_long>
 801541c:	4603      	mov	r3, r0
 801541e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015420:	89b8      	ldrh	r0, [r7, #12]
 8015422:	693b      	ldr	r3, [r7, #16]
 8015424:	33f0      	adds	r3, #240	; 0xf0
 8015426:	697a      	ldr	r2, [r7, #20]
 8015428:	4619      	mov	r1, r3
 801542a:	f001 f9d1 	bl	80167d0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801542e:	4b19      	ldr	r3, [pc, #100]	; (8015494 <dhcp_decline+0xdc>)
 8015430:	6818      	ldr	r0, [r3, #0]
 8015432:	4b19      	ldr	r3, [pc, #100]	; (8015498 <dhcp_decline+0xe0>)
 8015434:	9301      	str	r3, [sp, #4]
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	9300      	str	r3, [sp, #0]
 801543a:	2343      	movs	r3, #67	; 0x43
 801543c:	4a17      	ldr	r2, [pc, #92]	; (801549c <dhcp_decline+0xe4>)
 801543e:	6979      	ldr	r1, [r7, #20]
 8015440:	f7ff f8a4 	bl	801458c <udp_sendto_if_src>
 8015444:	4603      	mov	r3, r0
 8015446:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015448:	6978      	ldr	r0, [r7, #20]
 801544a:	f7f7 ff9d 	bl	800d388 <pbuf_free>
 801544e:	e001      	b.n	8015454 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015450:	23ff      	movs	r3, #255	; 0xff
 8015452:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	799b      	ldrb	r3, [r3, #6]
 8015458:	2bff      	cmp	r3, #255	; 0xff
 801545a:	d005      	beq.n	8015468 <dhcp_decline+0xb0>
    dhcp->tries++;
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	799b      	ldrb	r3, [r3, #6]
 8015460:	3301      	adds	r3, #1
 8015462:	b2da      	uxtb	r2, r3
 8015464:	69bb      	ldr	r3, [r7, #24]
 8015466:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015468:	f242 7310 	movw	r3, #10000	; 0x2710
 801546c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801546e:	89fb      	ldrh	r3, [r7, #14]
 8015470:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015474:	4a0a      	ldr	r2, [pc, #40]	; (80154a0 <dhcp_decline+0xe8>)
 8015476:	fb82 1203 	smull	r1, r2, r2, r3
 801547a:	1152      	asrs	r2, r2, #5
 801547c:	17db      	asrs	r3, r3, #31
 801547e:	1ad3      	subs	r3, r2, r3
 8015480:	b29a      	uxth	r2, r3
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015486:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801548a:	4618      	mov	r0, r3
 801548c:	3720      	adds	r7, #32
 801548e:	46bd      	mov	sp, r7
 8015490:	bdb0      	pop	{r4, r5, r7, pc}
 8015492:	bf00      	nop
 8015494:	200214e0 	.word	0x200214e0
 8015498:	08022488 	.word	0x08022488
 801549c:	0802248c 	.word	0x0802248c
 80154a0:	10624dd3 	.word	0x10624dd3

080154a4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b08a      	sub	sp, #40	; 0x28
 80154a8:	af02      	add	r7, sp, #8
 80154aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154b0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80154b2:	2300      	movs	r3, #0
 80154b4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	2200      	movs	r2, #0
 80154ba:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80154bc:	2106      	movs	r1, #6
 80154be:	69b8      	ldr	r0, [r7, #24]
 80154c0:	f000 fbf4 	bl	8015cac <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80154c4:	f107 0308 	add.w	r3, r7, #8
 80154c8:	2201      	movs	r2, #1
 80154ca:	69b9      	ldr	r1, [r7, #24]
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f001 f8a9 	bl	8016624 <dhcp_create_msg>
 80154d2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d04b      	beq.n	8015572 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80154e0:	8938      	ldrh	r0, [r7, #8]
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154e8:	2302      	movs	r3, #2
 80154ea:	2239      	movs	r2, #57	; 0x39
 80154ec:	f000 fbf8 	bl	8015ce0 <dhcp_option>
 80154f0:	4603      	mov	r3, r0
 80154f2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80154f4:	8938      	ldrh	r0, [r7, #8]
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015500:	461a      	mov	r2, r3
 8015502:	f000 fc47 	bl	8015d94 <dhcp_option_short>
 8015506:	4603      	mov	r3, r0
 8015508:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801550a:	8938      	ldrh	r0, [r7, #8]
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015512:	2304      	movs	r3, #4
 8015514:	2237      	movs	r2, #55	; 0x37
 8015516:	f000 fbe3 	bl	8015ce0 <dhcp_option>
 801551a:	4603      	mov	r3, r0
 801551c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801551e:	2300      	movs	r3, #0
 8015520:	77fb      	strb	r3, [r7, #31]
 8015522:	e00e      	b.n	8015542 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015524:	8938      	ldrh	r0, [r7, #8]
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801552c:	7ffb      	ldrb	r3, [r7, #31]
 801552e:	4a29      	ldr	r2, [pc, #164]	; (80155d4 <dhcp_discover+0x130>)
 8015530:	5cd3      	ldrb	r3, [r2, r3]
 8015532:	461a      	mov	r2, r3
 8015534:	f000 fc08 	bl	8015d48 <dhcp_option_byte>
 8015538:	4603      	mov	r3, r0
 801553a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801553c:	7ffb      	ldrb	r3, [r7, #31]
 801553e:	3301      	adds	r3, #1
 8015540:	77fb      	strb	r3, [r7, #31]
 8015542:	7ffb      	ldrb	r3, [r7, #31]
 8015544:	2b03      	cmp	r3, #3
 8015546:	d9ed      	bls.n	8015524 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015548:	8938      	ldrh	r0, [r7, #8]
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	33f0      	adds	r3, #240	; 0xf0
 801554e:	693a      	ldr	r2, [r7, #16]
 8015550:	4619      	mov	r1, r3
 8015552:	f001 f93d 	bl	80167d0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015556:	4b20      	ldr	r3, [pc, #128]	; (80155d8 <dhcp_discover+0x134>)
 8015558:	6818      	ldr	r0, [r3, #0]
 801555a:	4b20      	ldr	r3, [pc, #128]	; (80155dc <dhcp_discover+0x138>)
 801555c:	9301      	str	r3, [sp, #4]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	2343      	movs	r3, #67	; 0x43
 8015564:	4a1e      	ldr	r2, [pc, #120]	; (80155e0 <dhcp_discover+0x13c>)
 8015566:	6939      	ldr	r1, [r7, #16]
 8015568:	f7ff f810 	bl	801458c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801556c:	6938      	ldr	r0, [r7, #16]
 801556e:	f7f7 ff0b 	bl	800d388 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015572:	69bb      	ldr	r3, [r7, #24]
 8015574:	799b      	ldrb	r3, [r3, #6]
 8015576:	2bff      	cmp	r3, #255	; 0xff
 8015578:	d005      	beq.n	8015586 <dhcp_discover+0xe2>
    dhcp->tries++;
 801557a:	69bb      	ldr	r3, [r7, #24]
 801557c:	799b      	ldrb	r3, [r3, #6]
 801557e:	3301      	adds	r3, #1
 8015580:	b2da      	uxtb	r2, r3
 8015582:	69bb      	ldr	r3, [r7, #24]
 8015584:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	799b      	ldrb	r3, [r3, #6]
 801558a:	2b05      	cmp	r3, #5
 801558c:	d80d      	bhi.n	80155aa <dhcp_discover+0x106>
 801558e:	69bb      	ldr	r3, [r7, #24]
 8015590:	799b      	ldrb	r3, [r3, #6]
 8015592:	461a      	mov	r2, r3
 8015594:	2301      	movs	r3, #1
 8015596:	4093      	lsls	r3, r2
 8015598:	b29b      	uxth	r3, r3
 801559a:	461a      	mov	r2, r3
 801559c:	0152      	lsls	r2, r2, #5
 801559e:	1ad2      	subs	r2, r2, r3
 80155a0:	0092      	lsls	r2, r2, #2
 80155a2:	4413      	add	r3, r2
 80155a4:	00db      	lsls	r3, r3, #3
 80155a6:	b29b      	uxth	r3, r3
 80155a8:	e001      	b.n	80155ae <dhcp_discover+0x10a>
 80155aa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80155ae:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80155b0:	897b      	ldrh	r3, [r7, #10]
 80155b2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80155b6:	4a0b      	ldr	r2, [pc, #44]	; (80155e4 <dhcp_discover+0x140>)
 80155b8:	fb82 1203 	smull	r1, r2, r2, r3
 80155bc:	1152      	asrs	r2, r2, #5
 80155be:	17db      	asrs	r3, r3, #31
 80155c0:	1ad3      	subs	r3, r2, r3
 80155c2:	b29a      	uxth	r2, r3
 80155c4:	69bb      	ldr	r3, [r7, #24]
 80155c6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80155c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3720      	adds	r7, #32
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	2000001c 	.word	0x2000001c
 80155d8:	200214e0 	.word	0x200214e0
 80155dc:	08022488 	.word	0x08022488
 80155e0:	0802248c 	.word	0x0802248c
 80155e4:	10624dd3 	.word	0x10624dd3

080155e8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b088      	sub	sp, #32
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d107      	bne.n	8015606 <dhcp_bind+0x1e>
 80155f6:	4b64      	ldr	r3, [pc, #400]	; (8015788 <dhcp_bind+0x1a0>)
 80155f8:	f240 4215 	movw	r2, #1045	; 0x415
 80155fc:	4963      	ldr	r1, [pc, #396]	; (801578c <dhcp_bind+0x1a4>)
 80155fe:	4864      	ldr	r0, [pc, #400]	; (8015790 <dhcp_bind+0x1a8>)
 8015600:	f004 fe96 	bl	801a330 <iprintf>
 8015604:	e0bc      	b.n	8015780 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801560a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d107      	bne.n	8015622 <dhcp_bind+0x3a>
 8015612:	4b5d      	ldr	r3, [pc, #372]	; (8015788 <dhcp_bind+0x1a0>)
 8015614:	f240 4217 	movw	r2, #1047	; 0x417
 8015618:	495e      	ldr	r1, [pc, #376]	; (8015794 <dhcp_bind+0x1ac>)
 801561a:	485d      	ldr	r0, [pc, #372]	; (8015790 <dhcp_bind+0x1a8>)
 801561c:	f004 fe88 	bl	801a330 <iprintf>
 8015620:	e0ae      	b.n	8015780 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	2200      	movs	r2, #0
 8015626:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015630:	d019      	beq.n	8015666 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015632:	69bb      	ldr	r3, [r7, #24]
 8015634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015636:	331e      	adds	r3, #30
 8015638:	4a57      	ldr	r2, [pc, #348]	; (8015798 <dhcp_bind+0x1b0>)
 801563a:	fba2 2303 	umull	r2, r3, r2, r3
 801563e:	095b      	lsrs	r3, r3, #5
 8015640:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015642:	69fb      	ldr	r3, [r7, #28]
 8015644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015648:	d302      	bcc.n	8015650 <dhcp_bind+0x68>
      timeout = 0xffff;
 801564a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801564e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	b29a      	uxth	r2, r3
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015658:	69bb      	ldr	r3, [r7, #24]
 801565a:	8a9b      	ldrh	r3, [r3, #20]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d102      	bne.n	8015666 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015660:	69bb      	ldr	r3, [r7, #24]
 8015662:	2201      	movs	r2, #1
 8015664:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801566a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801566e:	d01d      	beq.n	80156ac <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015674:	331e      	adds	r3, #30
 8015676:	4a48      	ldr	r2, [pc, #288]	; (8015798 <dhcp_bind+0x1b0>)
 8015678:	fba2 2303 	umull	r2, r3, r2, r3
 801567c:	095b      	lsrs	r3, r3, #5
 801567e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015686:	d302      	bcc.n	801568e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801568c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801568e:	69fb      	ldr	r3, [r7, #28]
 8015690:	b29a      	uxth	r2, r3
 8015692:	69bb      	ldr	r3, [r7, #24]
 8015694:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015696:	69bb      	ldr	r3, [r7, #24]
 8015698:	895b      	ldrh	r3, [r3, #10]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d102      	bne.n	80156a4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801569e:	69bb      	ldr	r3, [r7, #24]
 80156a0:	2201      	movs	r2, #1
 80156a2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80156a4:	69bb      	ldr	r3, [r7, #24]
 80156a6:	895a      	ldrh	r2, [r3, #10]
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80156ac:	69bb      	ldr	r3, [r7, #24]
 80156ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156b4:	d01d      	beq.n	80156f2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80156b6:	69bb      	ldr	r3, [r7, #24]
 80156b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156ba:	331e      	adds	r3, #30
 80156bc:	4a36      	ldr	r2, [pc, #216]	; (8015798 <dhcp_bind+0x1b0>)
 80156be:	fba2 2303 	umull	r2, r3, r2, r3
 80156c2:	095b      	lsrs	r3, r3, #5
 80156c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80156c6:	69fb      	ldr	r3, [r7, #28]
 80156c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80156cc:	d302      	bcc.n	80156d4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80156ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	b29a      	uxth	r2, r3
 80156d8:	69bb      	ldr	r3, [r7, #24]
 80156da:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80156dc:	69bb      	ldr	r3, [r7, #24]
 80156de:	899b      	ldrh	r3, [r3, #12]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d102      	bne.n	80156ea <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80156e4:	69bb      	ldr	r3, [r7, #24]
 80156e6:	2201      	movs	r2, #1
 80156e8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80156ea:	69bb      	ldr	r3, [r7, #24]
 80156ec:	899a      	ldrh	r2, [r3, #12]
 80156ee:	69bb      	ldr	r3, [r7, #24]
 80156f0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	895a      	ldrh	r2, [r3, #10]
 80156f6:	69bb      	ldr	r3, [r7, #24]
 80156f8:	899b      	ldrh	r3, [r3, #12]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d306      	bcc.n	801570c <dhcp_bind+0x124>
 80156fe:	69bb      	ldr	r3, [r7, #24]
 8015700:	899b      	ldrh	r3, [r3, #12]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d002      	beq.n	801570c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015706:	69bb      	ldr	r3, [r7, #24]
 8015708:	2200      	movs	r2, #0
 801570a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801570c:	69bb      	ldr	r3, [r7, #24]
 801570e:	79db      	ldrb	r3, [r3, #7]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d003      	beq.n	801571c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015714:	69bb      	ldr	r3, [r7, #24]
 8015716:	6a1b      	ldr	r3, [r3, #32]
 8015718:	613b      	str	r3, [r7, #16]
 801571a:	e014      	b.n	8015746 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801571c:	69bb      	ldr	r3, [r7, #24]
 801571e:	331c      	adds	r3, #28
 8015720:	781b      	ldrb	r3, [r3, #0]
 8015722:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015728:	2b00      	cmp	r3, #0
 801572a:	db02      	blt.n	8015732 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801572c:	23ff      	movs	r3, #255	; 0xff
 801572e:	613b      	str	r3, [r7, #16]
 8015730:	e009      	b.n	8015746 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015732:	7dfb      	ldrb	r3, [r7, #23]
 8015734:	2bbf      	cmp	r3, #191	; 0xbf
 8015736:	d903      	bls.n	8015740 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015738:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801573c:	613b      	str	r3, [r7, #16]
 801573e:	e002      	b.n	8015746 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015744:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801574a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	2b00      	cmp	r3, #0
 8015750:	d108      	bne.n	8015764 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015752:	69bb      	ldr	r3, [r7, #24]
 8015754:	69da      	ldr	r2, [r3, #28]
 8015756:	693b      	ldr	r3, [r7, #16]
 8015758:	4013      	ands	r3, r2
 801575a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015762:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015764:	210a      	movs	r1, #10
 8015766:	69b8      	ldr	r0, [r7, #24]
 8015768:	f000 faa0 	bl	8015cac <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801576c:	69bb      	ldr	r3, [r7, #24]
 801576e:	f103 011c 	add.w	r1, r3, #28
 8015772:	f107 030c 	add.w	r3, r7, #12
 8015776:	f107 0210 	add.w	r2, r7, #16
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f7f7 f8f6 	bl	800c96c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015780:	3720      	adds	r7, #32
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	08021844 	.word	0x08021844
 801578c:	080219a4 	.word	0x080219a4
 8015790:	080218a4 	.word	0x080218a4
 8015794:	080219c0 	.word	0x080219c0
 8015798:	88888889 	.word	0x88888889

0801579c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b08a      	sub	sp, #40	; 0x28
 80157a0:	af02      	add	r7, sp, #8
 80157a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157a8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80157aa:	2105      	movs	r1, #5
 80157ac:	69b8      	ldr	r0, [r7, #24]
 80157ae:	f000 fa7d 	bl	8015cac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80157b2:	f107 030c 	add.w	r3, r7, #12
 80157b6:	2203      	movs	r2, #3
 80157b8:	69b9      	ldr	r1, [r7, #24]
 80157ba:	6878      	ldr	r0, [r7, #4]
 80157bc:	f000 ff32 	bl	8016624 <dhcp_create_msg>
 80157c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d04e      	beq.n	8015866 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80157c8:	697b      	ldr	r3, [r7, #20]
 80157ca:	685b      	ldr	r3, [r3, #4]
 80157cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80157ce:	89b8      	ldrh	r0, [r7, #12]
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157d6:	2302      	movs	r3, #2
 80157d8:	2239      	movs	r2, #57	; 0x39
 80157da:	f000 fa81 	bl	8015ce0 <dhcp_option>
 80157de:	4603      	mov	r3, r0
 80157e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80157e2:	89b8      	ldrh	r0, [r7, #12]
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80157ee:	461a      	mov	r2, r3
 80157f0:	f000 fad0 	bl	8015d94 <dhcp_option_short>
 80157f4:	4603      	mov	r3, r0
 80157f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80157f8:	89b8      	ldrh	r0, [r7, #12]
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015800:	2304      	movs	r3, #4
 8015802:	2237      	movs	r2, #55	; 0x37
 8015804:	f000 fa6c 	bl	8015ce0 <dhcp_option>
 8015808:	4603      	mov	r3, r0
 801580a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801580c:	2300      	movs	r3, #0
 801580e:	77bb      	strb	r3, [r7, #30]
 8015810:	e00e      	b.n	8015830 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015812:	89b8      	ldrh	r0, [r7, #12]
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801581a:	7fbb      	ldrb	r3, [r7, #30]
 801581c:	4a2a      	ldr	r2, [pc, #168]	; (80158c8 <dhcp_renew+0x12c>)
 801581e:	5cd3      	ldrb	r3, [r2, r3]
 8015820:	461a      	mov	r2, r3
 8015822:	f000 fa91 	bl	8015d48 <dhcp_option_byte>
 8015826:	4603      	mov	r3, r0
 8015828:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801582a:	7fbb      	ldrb	r3, [r7, #30]
 801582c:	3301      	adds	r3, #1
 801582e:	77bb      	strb	r3, [r7, #30]
 8015830:	7fbb      	ldrb	r3, [r7, #30]
 8015832:	2b03      	cmp	r3, #3
 8015834:	d9ed      	bls.n	8015812 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015836:	89b8      	ldrh	r0, [r7, #12]
 8015838:	693b      	ldr	r3, [r7, #16]
 801583a:	33f0      	adds	r3, #240	; 0xf0
 801583c:	697a      	ldr	r2, [r7, #20]
 801583e:	4619      	mov	r1, r3
 8015840:	f000 ffc6 	bl	80167d0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015844:	4b21      	ldr	r3, [pc, #132]	; (80158cc <dhcp_renew+0x130>)
 8015846:	6818      	ldr	r0, [r3, #0]
 8015848:	69bb      	ldr	r3, [r7, #24]
 801584a:	f103 0218 	add.w	r2, r3, #24
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	2343      	movs	r3, #67	; 0x43
 8015854:	6979      	ldr	r1, [r7, #20]
 8015856:	f7fe fe25 	bl	80144a4 <udp_sendto_if>
 801585a:	4603      	mov	r3, r0
 801585c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801585e:	6978      	ldr	r0, [r7, #20]
 8015860:	f7f7 fd92 	bl	800d388 <pbuf_free>
 8015864:	e001      	b.n	801586a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015866:	23ff      	movs	r3, #255	; 0xff
 8015868:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801586a:	69bb      	ldr	r3, [r7, #24]
 801586c:	799b      	ldrb	r3, [r3, #6]
 801586e:	2bff      	cmp	r3, #255	; 0xff
 8015870:	d005      	beq.n	801587e <dhcp_renew+0xe2>
    dhcp->tries++;
 8015872:	69bb      	ldr	r3, [r7, #24]
 8015874:	799b      	ldrb	r3, [r3, #6]
 8015876:	3301      	adds	r3, #1
 8015878:	b2da      	uxtb	r2, r3
 801587a:	69bb      	ldr	r3, [r7, #24]
 801587c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	799b      	ldrb	r3, [r3, #6]
 8015882:	2b09      	cmp	r3, #9
 8015884:	d80a      	bhi.n	801589c <dhcp_renew+0x100>
 8015886:	69bb      	ldr	r3, [r7, #24]
 8015888:	799b      	ldrb	r3, [r3, #6]
 801588a:	b29b      	uxth	r3, r3
 801588c:	461a      	mov	r2, r3
 801588e:	0152      	lsls	r2, r2, #5
 8015890:	1ad2      	subs	r2, r2, r3
 8015892:	0092      	lsls	r2, r2, #2
 8015894:	4413      	add	r3, r2
 8015896:	011b      	lsls	r3, r3, #4
 8015898:	b29b      	uxth	r3, r3
 801589a:	e001      	b.n	80158a0 <dhcp_renew+0x104>
 801589c:	f644 6320 	movw	r3, #20000	; 0x4e20
 80158a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80158a2:	89fb      	ldrh	r3, [r7, #14]
 80158a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80158a8:	4a09      	ldr	r2, [pc, #36]	; (80158d0 <dhcp_renew+0x134>)
 80158aa:	fb82 1203 	smull	r1, r2, r2, r3
 80158ae:	1152      	asrs	r2, r2, #5
 80158b0:	17db      	asrs	r3, r3, #31
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	b29a      	uxth	r2, r3
 80158b6:	69bb      	ldr	r3, [r7, #24]
 80158b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80158ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80158be:	4618      	mov	r0, r3
 80158c0:	3720      	adds	r7, #32
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd80      	pop	{r7, pc}
 80158c6:	bf00      	nop
 80158c8:	2000001c 	.word	0x2000001c
 80158cc:	200214e0 	.word	0x200214e0
 80158d0:	10624dd3 	.word	0x10624dd3

080158d4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80158d4:	b580      	push	{r7, lr}
 80158d6:	b08a      	sub	sp, #40	; 0x28
 80158d8:	af02      	add	r7, sp, #8
 80158da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158e0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80158e2:	2104      	movs	r1, #4
 80158e4:	69b8      	ldr	r0, [r7, #24]
 80158e6:	f000 f9e1 	bl	8015cac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80158ea:	f107 030c 	add.w	r3, r7, #12
 80158ee:	2203      	movs	r2, #3
 80158f0:	69b9      	ldr	r1, [r7, #24]
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f000 fe96 	bl	8016624 <dhcp_create_msg>
 80158f8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80158fa:	697b      	ldr	r3, [r7, #20]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d04c      	beq.n	801599a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	685b      	ldr	r3, [r3, #4]
 8015904:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015906:	89b8      	ldrh	r0, [r7, #12]
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801590e:	2302      	movs	r3, #2
 8015910:	2239      	movs	r2, #57	; 0x39
 8015912:	f000 f9e5 	bl	8015ce0 <dhcp_option>
 8015916:	4603      	mov	r3, r0
 8015918:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801591a:	89b8      	ldrh	r0, [r7, #12]
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015926:	461a      	mov	r2, r3
 8015928:	f000 fa34 	bl	8015d94 <dhcp_option_short>
 801592c:	4603      	mov	r3, r0
 801592e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015930:	89b8      	ldrh	r0, [r7, #12]
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015938:	2304      	movs	r3, #4
 801593a:	2237      	movs	r2, #55	; 0x37
 801593c:	f000 f9d0 	bl	8015ce0 <dhcp_option>
 8015940:	4603      	mov	r3, r0
 8015942:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015944:	2300      	movs	r3, #0
 8015946:	77bb      	strb	r3, [r7, #30]
 8015948:	e00e      	b.n	8015968 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801594a:	89b8      	ldrh	r0, [r7, #12]
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015952:	7fbb      	ldrb	r3, [r7, #30]
 8015954:	4a29      	ldr	r2, [pc, #164]	; (80159fc <dhcp_rebind+0x128>)
 8015956:	5cd3      	ldrb	r3, [r2, r3]
 8015958:	461a      	mov	r2, r3
 801595a:	f000 f9f5 	bl	8015d48 <dhcp_option_byte>
 801595e:	4603      	mov	r3, r0
 8015960:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015962:	7fbb      	ldrb	r3, [r7, #30]
 8015964:	3301      	adds	r3, #1
 8015966:	77bb      	strb	r3, [r7, #30]
 8015968:	7fbb      	ldrb	r3, [r7, #30]
 801596a:	2b03      	cmp	r3, #3
 801596c:	d9ed      	bls.n	801594a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801596e:	89b8      	ldrh	r0, [r7, #12]
 8015970:	693b      	ldr	r3, [r7, #16]
 8015972:	33f0      	adds	r3, #240	; 0xf0
 8015974:	697a      	ldr	r2, [r7, #20]
 8015976:	4619      	mov	r1, r3
 8015978:	f000 ff2a 	bl	80167d0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801597c:	4b20      	ldr	r3, [pc, #128]	; (8015a00 <dhcp_rebind+0x12c>)
 801597e:	6818      	ldr	r0, [r3, #0]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	9300      	str	r3, [sp, #0]
 8015984:	2343      	movs	r3, #67	; 0x43
 8015986:	4a1f      	ldr	r2, [pc, #124]	; (8015a04 <dhcp_rebind+0x130>)
 8015988:	6979      	ldr	r1, [r7, #20]
 801598a:	f7fe fd8b 	bl	80144a4 <udp_sendto_if>
 801598e:	4603      	mov	r3, r0
 8015990:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015992:	6978      	ldr	r0, [r7, #20]
 8015994:	f7f7 fcf8 	bl	800d388 <pbuf_free>
 8015998:	e001      	b.n	801599e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801599a:	23ff      	movs	r3, #255	; 0xff
 801599c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	799b      	ldrb	r3, [r3, #6]
 80159a2:	2bff      	cmp	r3, #255	; 0xff
 80159a4:	d005      	beq.n	80159b2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	799b      	ldrb	r3, [r3, #6]
 80159aa:	3301      	adds	r3, #1
 80159ac:	b2da      	uxtb	r2, r3
 80159ae:	69bb      	ldr	r3, [r7, #24]
 80159b0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	799b      	ldrb	r3, [r3, #6]
 80159b6:	2b09      	cmp	r3, #9
 80159b8:	d80a      	bhi.n	80159d0 <dhcp_rebind+0xfc>
 80159ba:	69bb      	ldr	r3, [r7, #24]
 80159bc:	799b      	ldrb	r3, [r3, #6]
 80159be:	b29b      	uxth	r3, r3
 80159c0:	461a      	mov	r2, r3
 80159c2:	0152      	lsls	r2, r2, #5
 80159c4:	1ad2      	subs	r2, r2, r3
 80159c6:	0092      	lsls	r2, r2, #2
 80159c8:	4413      	add	r3, r2
 80159ca:	00db      	lsls	r3, r3, #3
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	e001      	b.n	80159d4 <dhcp_rebind+0x100>
 80159d0:	f242 7310 	movw	r3, #10000	; 0x2710
 80159d4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80159d6:	89fb      	ldrh	r3, [r7, #14]
 80159d8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80159dc:	4a0a      	ldr	r2, [pc, #40]	; (8015a08 <dhcp_rebind+0x134>)
 80159de:	fb82 1203 	smull	r1, r2, r2, r3
 80159e2:	1152      	asrs	r2, r2, #5
 80159e4:	17db      	asrs	r3, r3, #31
 80159e6:	1ad3      	subs	r3, r2, r3
 80159e8:	b29a      	uxth	r2, r3
 80159ea:	69bb      	ldr	r3, [r7, #24]
 80159ec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80159ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3720      	adds	r7, #32
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	2000001c 	.word	0x2000001c
 8015a00:	200214e0 	.word	0x200214e0
 8015a04:	0802248c 	.word	0x0802248c
 8015a08:	10624dd3 	.word	0x10624dd3

08015a0c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015a0c:	b5b0      	push	{r4, r5, r7, lr}
 8015a0e:	b08a      	sub	sp, #40	; 0x28
 8015a10:	af02      	add	r7, sp, #8
 8015a12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a18:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015a1a:	2103      	movs	r1, #3
 8015a1c:	69b8      	ldr	r0, [r7, #24]
 8015a1e:	f000 f945 	bl	8015cac <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015a22:	f107 030c 	add.w	r3, r7, #12
 8015a26:	2203      	movs	r2, #3
 8015a28:	69b9      	ldr	r1, [r7, #24]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f000 fdfa 	bl	8016624 <dhcp_create_msg>
 8015a30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d066      	beq.n	8015b06 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015a38:	697b      	ldr	r3, [r7, #20]
 8015a3a:	685b      	ldr	r3, [r3, #4]
 8015a3c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015a3e:	89b8      	ldrh	r0, [r7, #12]
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a46:	2302      	movs	r3, #2
 8015a48:	2239      	movs	r2, #57	; 0x39
 8015a4a:	f000 f949 	bl	8015ce0 <dhcp_option>
 8015a4e:	4603      	mov	r3, r0
 8015a50:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015a52:	89b8      	ldrh	r0, [r7, #12]
 8015a54:	693b      	ldr	r3, [r7, #16]
 8015a56:	33f0      	adds	r3, #240	; 0xf0
 8015a58:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	f000 f999 	bl	8015d94 <dhcp_option_short>
 8015a62:	4603      	mov	r3, r0
 8015a64:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015a66:	89b8      	ldrh	r0, [r7, #12]
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a6e:	2304      	movs	r3, #4
 8015a70:	2232      	movs	r2, #50	; 0x32
 8015a72:	f000 f935 	bl	8015ce0 <dhcp_option>
 8015a76:	4603      	mov	r3, r0
 8015a78:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015a7a:	89bc      	ldrh	r4, [r7, #12]
 8015a7c:	693b      	ldr	r3, [r7, #16]
 8015a7e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015a82:	69bb      	ldr	r3, [r7, #24]
 8015a84:	69db      	ldr	r3, [r3, #28]
 8015a86:	4618      	mov	r0, r3
 8015a88:	f7f5 f905 	bl	800ac96 <lwip_htonl>
 8015a8c:	4603      	mov	r3, r0
 8015a8e:	461a      	mov	r2, r3
 8015a90:	4629      	mov	r1, r5
 8015a92:	4620      	mov	r0, r4
 8015a94:	f000 f9b0 	bl	8015df8 <dhcp_option_long>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015a9c:	89b8      	ldrh	r0, [r7, #12]
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015aa4:	2304      	movs	r3, #4
 8015aa6:	2237      	movs	r2, #55	; 0x37
 8015aa8:	f000 f91a 	bl	8015ce0 <dhcp_option>
 8015aac:	4603      	mov	r3, r0
 8015aae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	77bb      	strb	r3, [r7, #30]
 8015ab4:	e00e      	b.n	8015ad4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015ab6:	89b8      	ldrh	r0, [r7, #12]
 8015ab8:	693b      	ldr	r3, [r7, #16]
 8015aba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015abe:	7fbb      	ldrb	r3, [r7, #30]
 8015ac0:	4a29      	ldr	r2, [pc, #164]	; (8015b68 <dhcp_reboot+0x15c>)
 8015ac2:	5cd3      	ldrb	r3, [r2, r3]
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	f000 f93f 	bl	8015d48 <dhcp_option_byte>
 8015aca:	4603      	mov	r3, r0
 8015acc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ace:	7fbb      	ldrb	r3, [r7, #30]
 8015ad0:	3301      	adds	r3, #1
 8015ad2:	77bb      	strb	r3, [r7, #30]
 8015ad4:	7fbb      	ldrb	r3, [r7, #30]
 8015ad6:	2b03      	cmp	r3, #3
 8015ad8:	d9ed      	bls.n	8015ab6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015ada:	89b8      	ldrh	r0, [r7, #12]
 8015adc:	693b      	ldr	r3, [r7, #16]
 8015ade:	33f0      	adds	r3, #240	; 0xf0
 8015ae0:	697a      	ldr	r2, [r7, #20]
 8015ae2:	4619      	mov	r1, r3
 8015ae4:	f000 fe74 	bl	80167d0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015ae8:	4b20      	ldr	r3, [pc, #128]	; (8015b6c <dhcp_reboot+0x160>)
 8015aea:	6818      	ldr	r0, [r3, #0]
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	9300      	str	r3, [sp, #0]
 8015af0:	2343      	movs	r3, #67	; 0x43
 8015af2:	4a1f      	ldr	r2, [pc, #124]	; (8015b70 <dhcp_reboot+0x164>)
 8015af4:	6979      	ldr	r1, [r7, #20]
 8015af6:	f7fe fcd5 	bl	80144a4 <udp_sendto_if>
 8015afa:	4603      	mov	r3, r0
 8015afc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015afe:	6978      	ldr	r0, [r7, #20]
 8015b00:	f7f7 fc42 	bl	800d388 <pbuf_free>
 8015b04:	e001      	b.n	8015b0a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015b06:	23ff      	movs	r3, #255	; 0xff
 8015b08:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015b0a:	69bb      	ldr	r3, [r7, #24]
 8015b0c:	799b      	ldrb	r3, [r3, #6]
 8015b0e:	2bff      	cmp	r3, #255	; 0xff
 8015b10:	d005      	beq.n	8015b1e <dhcp_reboot+0x112>
    dhcp->tries++;
 8015b12:	69bb      	ldr	r3, [r7, #24]
 8015b14:	799b      	ldrb	r3, [r3, #6]
 8015b16:	3301      	adds	r3, #1
 8015b18:	b2da      	uxtb	r2, r3
 8015b1a:	69bb      	ldr	r3, [r7, #24]
 8015b1c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015b1e:	69bb      	ldr	r3, [r7, #24]
 8015b20:	799b      	ldrb	r3, [r3, #6]
 8015b22:	2b09      	cmp	r3, #9
 8015b24:	d80a      	bhi.n	8015b3c <dhcp_reboot+0x130>
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	799b      	ldrb	r3, [r3, #6]
 8015b2a:	b29b      	uxth	r3, r3
 8015b2c:	461a      	mov	r2, r3
 8015b2e:	0152      	lsls	r2, r2, #5
 8015b30:	1ad2      	subs	r2, r2, r3
 8015b32:	0092      	lsls	r2, r2, #2
 8015b34:	4413      	add	r3, r2
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	e001      	b.n	8015b40 <dhcp_reboot+0x134>
 8015b3c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015b40:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b42:	89fb      	ldrh	r3, [r7, #14]
 8015b44:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015b48:	4a0a      	ldr	r2, [pc, #40]	; (8015b74 <dhcp_reboot+0x168>)
 8015b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8015b4e:	1152      	asrs	r2, r2, #5
 8015b50:	17db      	asrs	r3, r3, #31
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	69bb      	ldr	r3, [r7, #24]
 8015b58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015b5a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3720      	adds	r7, #32
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bdb0      	pop	{r4, r5, r7, pc}
 8015b66:	bf00      	nop
 8015b68:	2000001c 	.word	0x2000001c
 8015b6c:	200214e0 	.word	0x200214e0
 8015b70:	0802248c 	.word	0x0802248c
 8015b74:	10624dd3 	.word	0x10624dd3

08015b78 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015b78:	b5b0      	push	{r4, r5, r7, lr}
 8015b7a:	b08a      	sub	sp, #40	; 0x28
 8015b7c:	af02      	add	r7, sp, #8
 8015b7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b84:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	f000 8084 	beq.w	8015c96 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015b8e:	69fb      	ldr	r3, [r7, #28]
 8015b90:	795b      	ldrb	r3, [r3, #5]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	f000 8081 	beq.w	8015c9a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015b98:	69fb      	ldr	r3, [r7, #28]
 8015b9a:	699b      	ldr	r3, [r3, #24]
 8015b9c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015b9e:	69fb      	ldr	r3, [r7, #28]
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015ba4:	69fb      	ldr	r3, [r7, #28]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015baa:	69fb      	ldr	r3, [r7, #28]
 8015bac:	2200      	movs	r2, #0
 8015bae:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015bb0:	69fb      	ldr	r3, [r7, #28]
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015bb6:	69fb      	ldr	r3, [r7, #28]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	631a      	str	r2, [r3, #48]	; 0x30
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015bc0:	69fb      	ldr	r3, [r7, #28]
 8015bc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8015bc4:	69fb      	ldr	r3, [r7, #28]
 8015bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bc8:	69fb      	ldr	r3, [r7, #28]
 8015bca:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015bcc:	69fb      	ldr	r3, [r7, #28]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	829a      	strh	r2, [r3, #20]
 8015bd2:	69fb      	ldr	r3, [r7, #28]
 8015bd4:	8a9a      	ldrh	r2, [r3, #20]
 8015bd6:	69fb      	ldr	r3, [r7, #28]
 8015bd8:	825a      	strh	r2, [r3, #18]
 8015bda:	69fb      	ldr	r3, [r7, #28]
 8015bdc:	8a5a      	ldrh	r2, [r3, #18]
 8015bde:	69fb      	ldr	r3, [r7, #28]
 8015be0:	821a      	strh	r2, [r3, #16]
 8015be2:	69fb      	ldr	r3, [r7, #28]
 8015be4:	8a1a      	ldrh	r2, [r3, #16]
 8015be6:	69fb      	ldr	r3, [r7, #28]
 8015be8:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f000 fe1e 	bl	801682c <dhcp_supplied_address>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d03b      	beq.n	8015c6e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015bf6:	f107 030e 	add.w	r3, r7, #14
 8015bfa:	2207      	movs	r2, #7
 8015bfc:	69f9      	ldr	r1, [r7, #28]
 8015bfe:	6878      	ldr	r0, [r7, #4]
 8015c00:	f000 fd10 	bl	8016624 <dhcp_create_msg>
 8015c04:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015c06:	69bb      	ldr	r3, [r7, #24]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d030      	beq.n	8015c6e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015c0c:	69bb      	ldr	r3, [r7, #24]
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015c12:	89f8      	ldrh	r0, [r7, #14]
 8015c14:	697b      	ldr	r3, [r7, #20]
 8015c16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c1a:	2304      	movs	r3, #4
 8015c1c:	2236      	movs	r2, #54	; 0x36
 8015c1e:	f000 f85f 	bl	8015ce0 <dhcp_option>
 8015c22:	4603      	mov	r3, r0
 8015c24:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015c26:	89fc      	ldrh	r4, [r7, #14]
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7f5 f830 	bl	800ac96 <lwip_htonl>
 8015c36:	4603      	mov	r3, r0
 8015c38:	461a      	mov	r2, r3
 8015c3a:	4629      	mov	r1, r5
 8015c3c:	4620      	mov	r0, r4
 8015c3e:	f000 f8db 	bl	8015df8 <dhcp_option_long>
 8015c42:	4603      	mov	r3, r0
 8015c44:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015c46:	89f8      	ldrh	r0, [r7, #14]
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	33f0      	adds	r3, #240	; 0xf0
 8015c4c:	69ba      	ldr	r2, [r7, #24]
 8015c4e:	4619      	mov	r1, r3
 8015c50:	f000 fdbe 	bl	80167d0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015c54:	4b13      	ldr	r3, [pc, #76]	; (8015ca4 <dhcp_release_and_stop+0x12c>)
 8015c56:	6818      	ldr	r0, [r3, #0]
 8015c58:	f107 0210 	add.w	r2, r7, #16
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	9300      	str	r3, [sp, #0]
 8015c60:	2343      	movs	r3, #67	; 0x43
 8015c62:	69b9      	ldr	r1, [r7, #24]
 8015c64:	f7fe fc1e 	bl	80144a4 <udp_sendto_if>
      pbuf_free(p_out);
 8015c68:	69b8      	ldr	r0, [r7, #24]
 8015c6a:	f7f7 fb8d 	bl	800d388 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015c6e:	4b0e      	ldr	r3, [pc, #56]	; (8015ca8 <dhcp_release_and_stop+0x130>)
 8015c70:	4a0d      	ldr	r2, [pc, #52]	; (8015ca8 <dhcp_release_and_stop+0x130>)
 8015c72:	490d      	ldr	r1, [pc, #52]	; (8015ca8 <dhcp_release_and_stop+0x130>)
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f7f6 fe79 	bl	800c96c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015c7a:	2100      	movs	r1, #0
 8015c7c:	69f8      	ldr	r0, [r7, #28]
 8015c7e:	f000 f815 	bl	8015cac <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015c82:	69fb      	ldr	r3, [r7, #28]
 8015c84:	791b      	ldrb	r3, [r3, #4]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d008      	beq.n	8015c9c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015c8a:	f7fe ff63 	bl	8014b54 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	2200      	movs	r2, #0
 8015c92:	711a      	strb	r2, [r3, #4]
 8015c94:	e002      	b.n	8015c9c <dhcp_release_and_stop+0x124>
    return;
 8015c96:	bf00      	nop
 8015c98:	e000      	b.n	8015c9c <dhcp_release_and_stop+0x124>
    return;
 8015c9a:	bf00      	nop
  }
}
 8015c9c:	3720      	adds	r7, #32
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	200214e0 	.word	0x200214e0
 8015ca8:	08022488 	.word	0x08022488

08015cac <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015cac:	b480      	push	{r7}
 8015cae:	b083      	sub	sp, #12
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	460b      	mov	r3, r1
 8015cb6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	795b      	ldrb	r3, [r3, #5]
 8015cbc:	78fa      	ldrb	r2, [r7, #3]
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d008      	beq.n	8015cd4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	78fa      	ldrb	r2, [r7, #3]
 8015cc6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2200      	movs	r2, #0
 8015ccc:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	811a      	strh	r2, [r3, #8]
  }
}
 8015cd4:	bf00      	nop
 8015cd6:	370c      	adds	r7, #12
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr

08015ce0 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b082      	sub	sp, #8
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6039      	str	r1, [r7, #0]
 8015ce8:	4611      	mov	r1, r2
 8015cea:	461a      	mov	r2, r3
 8015cec:	4603      	mov	r3, r0
 8015cee:	80fb      	strh	r3, [r7, #6]
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	717b      	strb	r3, [r7, #5]
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015cf8:	88fa      	ldrh	r2, [r7, #6]
 8015cfa:	793b      	ldrb	r3, [r7, #4]
 8015cfc:	4413      	add	r3, r2
 8015cfe:	3302      	adds	r3, #2
 8015d00:	2b44      	cmp	r3, #68	; 0x44
 8015d02:	d906      	bls.n	8015d12 <dhcp_option+0x32>
 8015d04:	4b0d      	ldr	r3, [pc, #52]	; (8015d3c <dhcp_option+0x5c>)
 8015d06:	f240 529a 	movw	r2, #1434	; 0x59a
 8015d0a:	490d      	ldr	r1, [pc, #52]	; (8015d40 <dhcp_option+0x60>)
 8015d0c:	480d      	ldr	r0, [pc, #52]	; (8015d44 <dhcp_option+0x64>)
 8015d0e:	f004 fb0f 	bl	801a330 <iprintf>
  options[options_out_len++] = option_type;
 8015d12:	88fb      	ldrh	r3, [r7, #6]
 8015d14:	1c5a      	adds	r2, r3, #1
 8015d16:	80fa      	strh	r2, [r7, #6]
 8015d18:	461a      	mov	r2, r3
 8015d1a:	683b      	ldr	r3, [r7, #0]
 8015d1c:	4413      	add	r3, r2
 8015d1e:	797a      	ldrb	r2, [r7, #5]
 8015d20:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015d22:	88fb      	ldrh	r3, [r7, #6]
 8015d24:	1c5a      	adds	r2, r3, #1
 8015d26:	80fa      	strh	r2, [r7, #6]
 8015d28:	461a      	mov	r2, r3
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	4413      	add	r3, r2
 8015d2e:	793a      	ldrb	r2, [r7, #4]
 8015d30:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d32:	88fb      	ldrh	r3, [r7, #6]
}
 8015d34:	4618      	mov	r0, r3
 8015d36:	3708      	adds	r7, #8
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	08021844 	.word	0x08021844
 8015d40:	080219d8 	.word	0x080219d8
 8015d44:	080218a4 	.word	0x080218a4

08015d48 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	4603      	mov	r3, r0
 8015d50:	6039      	str	r1, [r7, #0]
 8015d52:	80fb      	strh	r3, [r7, #6]
 8015d54:	4613      	mov	r3, r2
 8015d56:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015d58:	88fb      	ldrh	r3, [r7, #6]
 8015d5a:	2b43      	cmp	r3, #67	; 0x43
 8015d5c:	d906      	bls.n	8015d6c <dhcp_option_byte+0x24>
 8015d5e:	4b0a      	ldr	r3, [pc, #40]	; (8015d88 <dhcp_option_byte+0x40>)
 8015d60:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015d64:	4909      	ldr	r1, [pc, #36]	; (8015d8c <dhcp_option_byte+0x44>)
 8015d66:	480a      	ldr	r0, [pc, #40]	; (8015d90 <dhcp_option_byte+0x48>)
 8015d68:	f004 fae2 	bl	801a330 <iprintf>
  options[options_out_len++] = value;
 8015d6c:	88fb      	ldrh	r3, [r7, #6]
 8015d6e:	1c5a      	adds	r2, r3, #1
 8015d70:	80fa      	strh	r2, [r7, #6]
 8015d72:	461a      	mov	r2, r3
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	4413      	add	r3, r2
 8015d78:	797a      	ldrb	r2, [r7, #5]
 8015d7a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015d7c:	88fb      	ldrh	r3, [r7, #6]
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3708      	adds	r7, #8
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}
 8015d86:	bf00      	nop
 8015d88:	08021844 	.word	0x08021844
 8015d8c:	08021a1c 	.word	0x08021a1c
 8015d90:	080218a4 	.word	0x080218a4

08015d94 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b082      	sub	sp, #8
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	6039      	str	r1, [r7, #0]
 8015d9e:	80fb      	strh	r3, [r7, #6]
 8015da0:	4613      	mov	r3, r2
 8015da2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015da4:	88fb      	ldrh	r3, [r7, #6]
 8015da6:	3302      	adds	r3, #2
 8015da8:	2b44      	cmp	r3, #68	; 0x44
 8015daa:	d906      	bls.n	8015dba <dhcp_option_short+0x26>
 8015dac:	4b0f      	ldr	r3, [pc, #60]	; (8015dec <dhcp_option_short+0x58>)
 8015dae:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015db2:	490f      	ldr	r1, [pc, #60]	; (8015df0 <dhcp_option_short+0x5c>)
 8015db4:	480f      	ldr	r0, [pc, #60]	; (8015df4 <dhcp_option_short+0x60>)
 8015db6:	f004 fabb 	bl	801a330 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015dba:	88bb      	ldrh	r3, [r7, #4]
 8015dbc:	0a1b      	lsrs	r3, r3, #8
 8015dbe:	b29a      	uxth	r2, r3
 8015dc0:	88fb      	ldrh	r3, [r7, #6]
 8015dc2:	1c59      	adds	r1, r3, #1
 8015dc4:	80f9      	strh	r1, [r7, #6]
 8015dc6:	4619      	mov	r1, r3
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	440b      	add	r3, r1
 8015dcc:	b2d2      	uxtb	r2, r2
 8015dce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015dd0:	88fb      	ldrh	r3, [r7, #6]
 8015dd2:	1c5a      	adds	r2, r3, #1
 8015dd4:	80fa      	strh	r2, [r7, #6]
 8015dd6:	461a      	mov	r2, r3
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	4413      	add	r3, r2
 8015ddc:	88ba      	ldrh	r2, [r7, #4]
 8015dde:	b2d2      	uxtb	r2, r2
 8015de0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015de2:	88fb      	ldrh	r3, [r7, #6]
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	08021844 	.word	0x08021844
 8015df0:	08021a54 	.word	0x08021a54
 8015df4:	080218a4 	.word	0x080218a4

08015df8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b084      	sub	sp, #16
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	4603      	mov	r3, r0
 8015e00:	60b9      	str	r1, [r7, #8]
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015e06:	89fb      	ldrh	r3, [r7, #14]
 8015e08:	3304      	adds	r3, #4
 8015e0a:	2b44      	cmp	r3, #68	; 0x44
 8015e0c:	d906      	bls.n	8015e1c <dhcp_option_long+0x24>
 8015e0e:	4b19      	ldr	r3, [pc, #100]	; (8015e74 <dhcp_option_long+0x7c>)
 8015e10:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015e14:	4918      	ldr	r1, [pc, #96]	; (8015e78 <dhcp_option_long+0x80>)
 8015e16:	4819      	ldr	r0, [pc, #100]	; (8015e7c <dhcp_option_long+0x84>)
 8015e18:	f004 fa8a 	bl	801a330 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	0e1a      	lsrs	r2, r3, #24
 8015e20:	89fb      	ldrh	r3, [r7, #14]
 8015e22:	1c59      	adds	r1, r3, #1
 8015e24:	81f9      	strh	r1, [r7, #14]
 8015e26:	4619      	mov	r1, r3
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	440b      	add	r3, r1
 8015e2c:	b2d2      	uxtb	r2, r2
 8015e2e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	0c1a      	lsrs	r2, r3, #16
 8015e34:	89fb      	ldrh	r3, [r7, #14]
 8015e36:	1c59      	adds	r1, r3, #1
 8015e38:	81f9      	strh	r1, [r7, #14]
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	68bb      	ldr	r3, [r7, #8]
 8015e3e:	440b      	add	r3, r1
 8015e40:	b2d2      	uxtb	r2, r2
 8015e42:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	0a1a      	lsrs	r2, r3, #8
 8015e48:	89fb      	ldrh	r3, [r7, #14]
 8015e4a:	1c59      	adds	r1, r3, #1
 8015e4c:	81f9      	strh	r1, [r7, #14]
 8015e4e:	4619      	mov	r1, r3
 8015e50:	68bb      	ldr	r3, [r7, #8]
 8015e52:	440b      	add	r3, r1
 8015e54:	b2d2      	uxtb	r2, r2
 8015e56:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015e58:	89fb      	ldrh	r3, [r7, #14]
 8015e5a:	1c5a      	adds	r2, r3, #1
 8015e5c:	81fa      	strh	r2, [r7, #14]
 8015e5e:	461a      	mov	r2, r3
 8015e60:	68bb      	ldr	r3, [r7, #8]
 8015e62:	4413      	add	r3, r2
 8015e64:	687a      	ldr	r2, [r7, #4]
 8015e66:	b2d2      	uxtb	r2, r2
 8015e68:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015e6a:	89fb      	ldrh	r3, [r7, #14]
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3710      	adds	r7, #16
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	08021844 	.word	0x08021844
 8015e78:	08021a90 	.word	0x08021a90
 8015e7c:	080218a4 	.word	0x080218a4

08015e80 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b090      	sub	sp, #64	; 0x40
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
 8015e88:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015e92:	220a      	movs	r2, #10
 8015e94:	2100      	movs	r1, #0
 8015e96:	48ba      	ldr	r0, [pc, #744]	; (8016180 <dhcp_parse_reply+0x300>)
 8015e98:	f003 fbc8 	bl	801962c <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	895b      	ldrh	r3, [r3, #10]
 8015ea0:	2b2b      	cmp	r3, #43	; 0x2b
 8015ea2:	d802      	bhi.n	8015eaa <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015ea4:	f06f 0301 	mvn.w	r3, #1
 8015ea8:	e2e9      	b.n	801647e <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015eb0:	23f0      	movs	r3, #240	; 0xf0
 8015eb2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	891b      	ldrh	r3, [r3, #8]
 8015eb8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015ebe:	e00c      	b.n	8015eda <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec2:	895b      	ldrh	r3, [r3, #10]
 8015ec4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ecc:	895b      	ldrh	r3, [r3, #10]
 8015ece:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015ed0:	1ad3      	subs	r3, r2, r3
 8015ed2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d004      	beq.n	8015eea <dhcp_parse_reply+0x6a>
 8015ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee2:	895b      	ldrh	r3, [r3, #10]
 8015ee4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d2ea      	bcs.n	8015ec0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d102      	bne.n	8015ef6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015ef0:	f06f 0301 	mvn.w	r3, #1
 8015ef4:	e2c3      	b.n	801647e <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 8015ef6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ef8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015efa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015efc:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015f04:	e267      	b.n	80163d6 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8015f06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f0a:	4413      	add	r3, r2
 8015f0c:	781b      	ldrb	r3, [r3, #0]
 8015f0e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015f10:	2300      	movs	r3, #0
 8015f12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015f16:	f04f 33ff 	mov.w	r3, #4294967295
 8015f1a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015f1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f1e:	3302      	adds	r3, #2
 8015f20:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015f22:	8bfa      	ldrh	r2, [r7, #30]
 8015f24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f26:	429a      	cmp	r2, r3
 8015f28:	d202      	bcs.n	8015f30 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015f2a:	f06f 0301 	mvn.w	r3, #1
 8015f2e:	e2a6      	b.n	801647e <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015f30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f32:	3301      	adds	r3, #1
 8015f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f36:	8952      	ldrh	r2, [r2, #10]
 8015f38:	4293      	cmp	r3, r2
 8015f3a:	da07      	bge.n	8015f4c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015f3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f3e:	3301      	adds	r3, #1
 8015f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f42:	4413      	add	r3, r2
 8015f44:	781b      	ldrb	r3, [r3, #0]
 8015f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f4a:	e00b      	b.n	8015f64 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d004      	beq.n	8015f5e <dhcp_parse_reply+0xde>
 8015f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	685b      	ldr	r3, [r3, #4]
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	e000      	b.n	8015f60 <dhcp_parse_reply+0xe0>
 8015f5e:	2300      	movs	r3, #0
 8015f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015f64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015f6c:	7dfb      	ldrb	r3, [r7, #23]
 8015f6e:	2b3b      	cmp	r3, #59	; 0x3b
 8015f70:	f200 815a 	bhi.w	8016228 <dhcp_parse_reply+0x3a8>
 8015f74:	a201      	add	r2, pc, #4	; (adr r2, 8015f7c <dhcp_parse_reply+0xfc>)
 8015f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f7a:	bf00      	nop
 8015f7c:	0801606d 	.word	0x0801606d
 8015f80:	0801607d 	.word	0x0801607d
 8015f84:	08016229 	.word	0x08016229
 8015f88:	0801609f 	.word	0x0801609f
 8015f8c:	08016229 	.word	0x08016229
 8015f90:	08016229 	.word	0x08016229
 8015f94:	080160cb 	.word	0x080160cb
 8015f98:	08016229 	.word	0x08016229
 8015f9c:	08016229 	.word	0x08016229
 8015fa0:	08016229 	.word	0x08016229
 8015fa4:	08016229 	.word	0x08016229
 8015fa8:	08016229 	.word	0x08016229
 8015fac:	08016229 	.word	0x08016229
 8015fb0:	08016229 	.word	0x08016229
 8015fb4:	08016229 	.word	0x08016229
 8015fb8:	08016229 	.word	0x08016229
 8015fbc:	08016229 	.word	0x08016229
 8015fc0:	08016229 	.word	0x08016229
 8015fc4:	08016229 	.word	0x08016229
 8015fc8:	08016229 	.word	0x08016229
 8015fcc:	08016229 	.word	0x08016229
 8015fd0:	08016229 	.word	0x08016229
 8015fd4:	08016229 	.word	0x08016229
 8015fd8:	08016229 	.word	0x08016229
 8015fdc:	08016229 	.word	0x08016229
 8015fe0:	08016229 	.word	0x08016229
 8015fe4:	08016229 	.word	0x08016229
 8015fe8:	08016229 	.word	0x08016229
 8015fec:	08016229 	.word	0x08016229
 8015ff0:	08016229 	.word	0x08016229
 8015ff4:	08016229 	.word	0x08016229
 8015ff8:	08016229 	.word	0x08016229
 8015ffc:	08016229 	.word	0x08016229
 8016000:	08016229 	.word	0x08016229
 8016004:	08016229 	.word	0x08016229
 8016008:	08016229 	.word	0x08016229
 801600c:	08016229 	.word	0x08016229
 8016010:	08016229 	.word	0x08016229
 8016014:	08016229 	.word	0x08016229
 8016018:	08016229 	.word	0x08016229
 801601c:	08016229 	.word	0x08016229
 8016020:	08016229 	.word	0x08016229
 8016024:	08016229 	.word	0x08016229
 8016028:	08016229 	.word	0x08016229
 801602c:	08016229 	.word	0x08016229
 8016030:	08016229 	.word	0x08016229
 8016034:	08016229 	.word	0x08016229
 8016038:	08016229 	.word	0x08016229
 801603c:	08016229 	.word	0x08016229
 8016040:	08016229 	.word	0x08016229
 8016044:	08016229 	.word	0x08016229
 8016048:	08016121 	.word	0x08016121
 801604c:	08016143 	.word	0x08016143
 8016050:	080161a1 	.word	0x080161a1
 8016054:	080161c3 	.word	0x080161c3
 8016058:	08016229 	.word	0x08016229
 801605c:	08016229 	.word	0x08016229
 8016060:	08016229 	.word	0x08016229
 8016064:	080161e5 	.word	0x080161e5
 8016068:	08016207 	.word	0x08016207
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801606c:	2300      	movs	r3, #0
 801606e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801607a:	e0d9      	b.n	8016230 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801607c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016080:	2b04      	cmp	r3, #4
 8016082:	d009      	beq.n	8016098 <dhcp_parse_reply+0x218>
 8016084:	4b3f      	ldr	r3, [pc, #252]	; (8016184 <dhcp_parse_reply+0x304>)
 8016086:	f240 622e 	movw	r2, #1582	; 0x62e
 801608a:	493f      	ldr	r1, [pc, #252]	; (8016188 <dhcp_parse_reply+0x308>)
 801608c:	483f      	ldr	r0, [pc, #252]	; (801618c <dhcp_parse_reply+0x30c>)
 801608e:	f004 f94f 	bl	801a330 <iprintf>
 8016092:	f06f 0305 	mvn.w	r3, #5
 8016096:	e1f2      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016098:	2306      	movs	r3, #6
 801609a:	623b      	str	r3, [r7, #32]
        break;
 801609c:	e0c8      	b.n	8016230 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801609e:	2304      	movs	r3, #4
 80160a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80160a4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80160a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160ac:	429a      	cmp	r2, r3
 80160ae:	d209      	bcs.n	80160c4 <dhcp_parse_reply+0x244>
 80160b0:	4b34      	ldr	r3, [pc, #208]	; (8016184 <dhcp_parse_reply+0x304>)
 80160b2:	f240 6233 	movw	r2, #1587	; 0x633
 80160b6:	4936      	ldr	r1, [pc, #216]	; (8016190 <dhcp_parse_reply+0x310>)
 80160b8:	4834      	ldr	r0, [pc, #208]	; (801618c <dhcp_parse_reply+0x30c>)
 80160ba:	f004 f939 	bl	801a330 <iprintf>
 80160be:	f06f 0305 	mvn.w	r3, #5
 80160c2:	e1dc      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80160c4:	2307      	movs	r3, #7
 80160c6:	623b      	str	r3, [r7, #32]
        break;
 80160c8:	e0b2      	b.n	8016230 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80160ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160ce:	f003 0303 	and.w	r3, r3, #3
 80160d2:	b2db      	uxtb	r3, r3
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d009      	beq.n	80160ec <dhcp_parse_reply+0x26c>
 80160d8:	4b2a      	ldr	r3, [pc, #168]	; (8016184 <dhcp_parse_reply+0x304>)
 80160da:	f240 6239 	movw	r2, #1593	; 0x639
 80160de:	492d      	ldr	r1, [pc, #180]	; (8016194 <dhcp_parse_reply+0x314>)
 80160e0:	482a      	ldr	r0, [pc, #168]	; (801618c <dhcp_parse_reply+0x30c>)
 80160e2:	f004 f925 	bl	801a330 <iprintf>
 80160e6:	f06f 0305 	mvn.w	r3, #5
 80160ea:	e1c8      	b.n	801647e <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80160ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160f0:	2b08      	cmp	r3, #8
 80160f2:	bf28      	it	cs
 80160f4:	2308      	movcs	r3, #8
 80160f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80160fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80160fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016102:	429a      	cmp	r2, r3
 8016104:	d209      	bcs.n	801611a <dhcp_parse_reply+0x29a>
 8016106:	4b1f      	ldr	r3, [pc, #124]	; (8016184 <dhcp_parse_reply+0x304>)
 8016108:	f240 623c 	movw	r2, #1596	; 0x63c
 801610c:	4920      	ldr	r1, [pc, #128]	; (8016190 <dhcp_parse_reply+0x310>)
 801610e:	481f      	ldr	r0, [pc, #124]	; (801618c <dhcp_parse_reply+0x30c>)
 8016110:	f004 f90e 	bl	801a330 <iprintf>
 8016114:	f06f 0305 	mvn.w	r3, #5
 8016118:	e1b1      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801611a:	2308      	movs	r3, #8
 801611c:	623b      	str	r3, [r7, #32]
        break;
 801611e:	e087      	b.n	8016230 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016124:	2b04      	cmp	r3, #4
 8016126:	d009      	beq.n	801613c <dhcp_parse_reply+0x2bc>
 8016128:	4b16      	ldr	r3, [pc, #88]	; (8016184 <dhcp_parse_reply+0x304>)
 801612a:	f240 6241 	movw	r2, #1601	; 0x641
 801612e:	4916      	ldr	r1, [pc, #88]	; (8016188 <dhcp_parse_reply+0x308>)
 8016130:	4816      	ldr	r0, [pc, #88]	; (801618c <dhcp_parse_reply+0x30c>)
 8016132:	f004 f8fd 	bl	801a330 <iprintf>
 8016136:	f06f 0305 	mvn.w	r3, #5
 801613a:	e1a0      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801613c:	2303      	movs	r3, #3
 801613e:	623b      	str	r3, [r7, #32]
        break;
 8016140:	e076      	b.n	8016230 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016142:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016146:	2b01      	cmp	r3, #1
 8016148:	d009      	beq.n	801615e <dhcp_parse_reply+0x2de>
 801614a:	4b0e      	ldr	r3, [pc, #56]	; (8016184 <dhcp_parse_reply+0x304>)
 801614c:	f240 624f 	movw	r2, #1615	; 0x64f
 8016150:	4911      	ldr	r1, [pc, #68]	; (8016198 <dhcp_parse_reply+0x318>)
 8016152:	480e      	ldr	r0, [pc, #56]	; (801618c <dhcp_parse_reply+0x30c>)
 8016154:	f004 f8ec 	bl	801a330 <iprintf>
 8016158:	f06f 0305 	mvn.w	r3, #5
 801615c:	e18f      	b.n	801647e <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801615e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016160:	2bf0      	cmp	r3, #240	; 0xf0
 8016162:	d009      	beq.n	8016178 <dhcp_parse_reply+0x2f8>
 8016164:	4b07      	ldr	r3, [pc, #28]	; (8016184 <dhcp_parse_reply+0x304>)
 8016166:	f240 6251 	movw	r2, #1617	; 0x651
 801616a:	490c      	ldr	r1, [pc, #48]	; (801619c <dhcp_parse_reply+0x31c>)
 801616c:	4807      	ldr	r0, [pc, #28]	; (801618c <dhcp_parse_reply+0x30c>)
 801616e:	f004 f8df 	bl	801a330 <iprintf>
 8016172:	f06f 0305 	mvn.w	r3, #5
 8016176:	e182      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016178:	2300      	movs	r3, #0
 801617a:	623b      	str	r3, [r7, #32]
        break;
 801617c:	e058      	b.n	8016230 <dhcp_parse_reply+0x3b0>
 801617e:	bf00      	nop
 8016180:	200280c8 	.word	0x200280c8
 8016184:	08021844 	.word	0x08021844
 8016188:	08021acc 	.word	0x08021acc
 801618c:	080218a4 	.word	0x080218a4
 8016190:	08021ad8 	.word	0x08021ad8
 8016194:	08021aec 	.word	0x08021aec
 8016198:	08021afc 	.word	0x08021afc
 801619c:	08021b08 	.word	0x08021b08
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80161a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d009      	beq.n	80161bc <dhcp_parse_reply+0x33c>
 80161a8:	4ba5      	ldr	r3, [pc, #660]	; (8016440 <dhcp_parse_reply+0x5c0>)
 80161aa:	f240 6255 	movw	r2, #1621	; 0x655
 80161ae:	49a5      	ldr	r1, [pc, #660]	; (8016444 <dhcp_parse_reply+0x5c4>)
 80161b0:	48a5      	ldr	r0, [pc, #660]	; (8016448 <dhcp_parse_reply+0x5c8>)
 80161b2:	f004 f8bd 	bl	801a330 <iprintf>
 80161b6:	f06f 0305 	mvn.w	r3, #5
 80161ba:	e160      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80161bc:	2301      	movs	r3, #1
 80161be:	623b      	str	r3, [r7, #32]
        break;
 80161c0:	e036      	b.n	8016230 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80161c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161c6:	2b04      	cmp	r3, #4
 80161c8:	d009      	beq.n	80161de <dhcp_parse_reply+0x35e>
 80161ca:	4b9d      	ldr	r3, [pc, #628]	; (8016440 <dhcp_parse_reply+0x5c0>)
 80161cc:	f240 6259 	movw	r2, #1625	; 0x659
 80161d0:	499e      	ldr	r1, [pc, #632]	; (801644c <dhcp_parse_reply+0x5cc>)
 80161d2:	489d      	ldr	r0, [pc, #628]	; (8016448 <dhcp_parse_reply+0x5c8>)
 80161d4:	f004 f8ac 	bl	801a330 <iprintf>
 80161d8:	f06f 0305 	mvn.w	r3, #5
 80161dc:	e14f      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80161de:	2302      	movs	r3, #2
 80161e0:	623b      	str	r3, [r7, #32]
        break;
 80161e2:	e025      	b.n	8016230 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80161e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161e8:	2b04      	cmp	r3, #4
 80161ea:	d009      	beq.n	8016200 <dhcp_parse_reply+0x380>
 80161ec:	4b94      	ldr	r3, [pc, #592]	; (8016440 <dhcp_parse_reply+0x5c0>)
 80161ee:	f240 625d 	movw	r2, #1629	; 0x65d
 80161f2:	4996      	ldr	r1, [pc, #600]	; (801644c <dhcp_parse_reply+0x5cc>)
 80161f4:	4894      	ldr	r0, [pc, #592]	; (8016448 <dhcp_parse_reply+0x5c8>)
 80161f6:	f004 f89b 	bl	801a330 <iprintf>
 80161fa:	f06f 0305 	mvn.w	r3, #5
 80161fe:	e13e      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016200:	2304      	movs	r3, #4
 8016202:	623b      	str	r3, [r7, #32]
        break;
 8016204:	e014      	b.n	8016230 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801620a:	2b04      	cmp	r3, #4
 801620c:	d009      	beq.n	8016222 <dhcp_parse_reply+0x3a2>
 801620e:	4b8c      	ldr	r3, [pc, #560]	; (8016440 <dhcp_parse_reply+0x5c0>)
 8016210:	f240 6261 	movw	r2, #1633	; 0x661
 8016214:	498d      	ldr	r1, [pc, #564]	; (801644c <dhcp_parse_reply+0x5cc>)
 8016216:	488c      	ldr	r0, [pc, #560]	; (8016448 <dhcp_parse_reply+0x5c8>)
 8016218:	f004 f88a 	bl	801a330 <iprintf>
 801621c:	f06f 0305 	mvn.w	r3, #5
 8016220:	e12d      	b.n	801647e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016222:	2305      	movs	r3, #5
 8016224:	623b      	str	r3, [r7, #32]
        break;
 8016226:	e003      	b.n	8016230 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8016228:	2300      	movs	r3, #0
 801622a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801622e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016230:	7dfb      	ldrb	r3, [r7, #23]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d103      	bne.n	801623e <dhcp_parse_reply+0x3be>
      offset++;
 8016236:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016238:	3301      	adds	r3, #1
 801623a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801623c:	e0a1      	b.n	8016382 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801623e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016244:	4413      	add	r3, r2
 8016246:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801624a:	4293      	cmp	r3, r2
 801624c:	dd02      	ble.n	8016254 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801624e:	f06f 0301 	mvn.w	r3, #1
 8016252:	e114      	b.n	801647e <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 8016254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016258:	b29a      	uxth	r2, r3
 801625a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801625c:	4413      	add	r3, r2
 801625e:	b29b      	uxth	r3, r3
 8016260:	3302      	adds	r3, #2
 8016262:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8016264:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016268:	2b00      	cmp	r3, #0
 801626a:	f000 808a 	beq.w	8016382 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801626e:	2300      	movs	r3, #0
 8016270:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016272:	6a3b      	ldr	r3, [r7, #32]
 8016274:	2b00      	cmp	r3, #0
 8016276:	db02      	blt.n	801627e <dhcp_parse_reply+0x3fe>
 8016278:	6a3b      	ldr	r3, [r7, #32]
 801627a:	2b09      	cmp	r3, #9
 801627c:	dd06      	ble.n	801628c <dhcp_parse_reply+0x40c>
 801627e:	4b70      	ldr	r3, [pc, #448]	; (8016440 <dhcp_parse_reply+0x5c0>)
 8016280:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016284:	4972      	ldr	r1, [pc, #456]	; (8016450 <dhcp_parse_reply+0x5d0>)
 8016286:	4870      	ldr	r0, [pc, #448]	; (8016448 <dhcp_parse_reply+0x5c8>)
 8016288:	f004 f852 	bl	801a330 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801628c:	4a71      	ldr	r2, [pc, #452]	; (8016454 <dhcp_parse_reply+0x5d4>)
 801628e:	6a3b      	ldr	r3, [r7, #32]
 8016290:	4413      	add	r3, r2
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d174      	bne.n	8016382 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8016298:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801629c:	2b04      	cmp	r3, #4
 801629e:	bf28      	it	cs
 80162a0:	2304      	movcs	r3, #4
 80162a2:	b2db      	uxtb	r3, r3
 80162a4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80162a6:	8bfb      	ldrh	r3, [r7, #30]
 80162a8:	8aba      	ldrh	r2, [r7, #20]
 80162aa:	f107 0108 	add.w	r1, r7, #8
 80162ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162b0:	f7f7 fa70 	bl	800d794 <pbuf_copy_partial>
 80162b4:	4603      	mov	r3, r0
 80162b6:	461a      	mov	r2, r3
 80162b8:	8abb      	ldrh	r3, [r7, #20]
 80162ba:	4293      	cmp	r3, r2
 80162bc:	d002      	beq.n	80162c4 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 80162be:	f06f 0301 	mvn.w	r3, #1
 80162c2:	e0dc      	b.n	801647e <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 80162c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162c8:	2b04      	cmp	r3, #4
 80162ca:	d933      	bls.n	8016334 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80162cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80162d0:	f003 0303 	and.w	r3, r3, #3
 80162d4:	b2db      	uxtb	r3, r3
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d009      	beq.n	80162ee <dhcp_parse_reply+0x46e>
 80162da:	4b59      	ldr	r3, [pc, #356]	; (8016440 <dhcp_parse_reply+0x5c0>)
 80162dc:	f240 6281 	movw	r2, #1665	; 0x681
 80162e0:	495d      	ldr	r1, [pc, #372]	; (8016458 <dhcp_parse_reply+0x5d8>)
 80162e2:	4859      	ldr	r0, [pc, #356]	; (8016448 <dhcp_parse_reply+0x5c8>)
 80162e4:	f004 f824 	bl	801a330 <iprintf>
 80162e8:	f06f 0305 	mvn.w	r3, #5
 80162ec:	e0c7      	b.n	801647e <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 80162ee:	4a59      	ldr	r2, [pc, #356]	; (8016454 <dhcp_parse_reply+0x5d4>)
 80162f0:	6a3b      	ldr	r3, [r7, #32]
 80162f2:	4413      	add	r3, r2
 80162f4:	2201      	movs	r2, #1
 80162f6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80162f8:	68bb      	ldr	r3, [r7, #8]
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7f4 fccb 	bl	800ac96 <lwip_htonl>
 8016300:	4602      	mov	r2, r0
 8016302:	4956      	ldr	r1, [pc, #344]	; (801645c <dhcp_parse_reply+0x5dc>)
 8016304:	6a3b      	ldr	r3, [r7, #32]
 8016306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801630a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801630e:	3b04      	subs	r3, #4
 8016310:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016314:	8bfb      	ldrh	r3, [r7, #30]
 8016316:	3304      	adds	r3, #4
 8016318:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801631a:	8a7a      	ldrh	r2, [r7, #18]
 801631c:	8bfb      	ldrh	r3, [r7, #30]
 801631e:	429a      	cmp	r2, r3
 8016320:	d202      	bcs.n	8016328 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 8016322:	f06f 0301 	mvn.w	r3, #1
 8016326:	e0aa      	b.n	801647e <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 8016328:	8a7b      	ldrh	r3, [r7, #18]
 801632a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801632c:	6a3b      	ldr	r3, [r7, #32]
 801632e:	3301      	adds	r3, #1
 8016330:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8016332:	e79e      	b.n	8016272 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8016334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016338:	2b04      	cmp	r3, #4
 801633a:	d106      	bne.n	801634a <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	4618      	mov	r0, r3
 8016340:	f7f4 fca9 	bl	800ac96 <lwip_htonl>
 8016344:	4603      	mov	r3, r0
 8016346:	60bb      	str	r3, [r7, #8]
 8016348:	e011      	b.n	801636e <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801634a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801634e:	2b01      	cmp	r3, #1
 8016350:	d009      	beq.n	8016366 <dhcp_parse_reply+0x4e6>
 8016352:	4b3b      	ldr	r3, [pc, #236]	; (8016440 <dhcp_parse_reply+0x5c0>)
 8016354:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016358:	4941      	ldr	r1, [pc, #260]	; (8016460 <dhcp_parse_reply+0x5e0>)
 801635a:	483b      	ldr	r0, [pc, #236]	; (8016448 <dhcp_parse_reply+0x5c8>)
 801635c:	f003 ffe8 	bl	801a330 <iprintf>
 8016360:	f06f 0305 	mvn.w	r3, #5
 8016364:	e08b      	b.n	801647e <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 8016366:	f107 0308 	add.w	r3, r7, #8
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801636e:	4a39      	ldr	r2, [pc, #228]	; (8016454 <dhcp_parse_reply+0x5d4>)
 8016370:	6a3b      	ldr	r3, [r7, #32]
 8016372:	4413      	add	r3, r2
 8016374:	2201      	movs	r2, #1
 8016376:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016378:	68ba      	ldr	r2, [r7, #8]
 801637a:	4938      	ldr	r1, [pc, #224]	; (801645c <dhcp_parse_reply+0x5dc>)
 801637c:	6a3b      	ldr	r3, [r7, #32]
 801637e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8016382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016384:	895b      	ldrh	r3, [r3, #10]
 8016386:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016388:	429a      	cmp	r2, r3
 801638a:	d324      	bcc.n	80163d6 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801638e:	895b      	ldrh	r3, [r3, #10]
 8016390:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016392:	1ad3      	subs	r3, r2, r3
 8016394:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	895b      	ldrh	r3, [r3, #10]
 801639a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801639c:	1ad3      	subs	r3, r2, r3
 801639e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80163a0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80163a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d213      	bcs.n	80163d0 <dhcp_parse_reply+0x550>
        q = q->next;
 80163a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80163ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d109      	bne.n	80163c8 <dhcp_parse_reply+0x548>
 80163b4:	4b22      	ldr	r3, [pc, #136]	; (8016440 <dhcp_parse_reply+0x5c0>)
 80163b6:	f240 629d 	movw	r2, #1693	; 0x69d
 80163ba:	492a      	ldr	r1, [pc, #168]	; (8016464 <dhcp_parse_reply+0x5e4>)
 80163bc:	4822      	ldr	r0, [pc, #136]	; (8016448 <dhcp_parse_reply+0x5c8>)
 80163be:	f003 ffb7 	bl	801a330 <iprintf>
 80163c2:	f06f 0305 	mvn.w	r3, #5
 80163c6:	e05a      	b.n	801647e <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 80163c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80163ce:	e002      	b.n	80163d6 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80163d0:	f06f 0301 	mvn.w	r3, #1
 80163d4:	e053      	b.n	801647e <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80163d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00a      	beq.n	80163f2 <dhcp_parse_reply+0x572>
 80163dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80163de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d206      	bcs.n	80163f2 <dhcp_parse_reply+0x572>
 80163e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80163e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80163e8:	4413      	add	r3, r2
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	2bff      	cmp	r3, #255	; 0xff
 80163ee:	f47f ad8a 	bne.w	8015f06 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80163f2:	4b18      	ldr	r3, [pc, #96]	; (8016454 <dhcp_parse_reply+0x5d4>)
 80163f4:	781b      	ldrb	r3, [r3, #0]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d018      	beq.n	801642c <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80163fa:	4b18      	ldr	r3, [pc, #96]	; (801645c <dhcp_parse_reply+0x5dc>)
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016400:	4b14      	ldr	r3, [pc, #80]	; (8016454 <dhcp_parse_reply+0x5d4>)
 8016402:	2200      	movs	r2, #0
 8016404:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	2b01      	cmp	r3, #1
 801640a:	d102      	bne.n	8016412 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801640c:	2301      	movs	r3, #1
 801640e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016410:	e00c      	b.n	801642c <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	2b02      	cmp	r3, #2
 8016416:	d102      	bne.n	801641e <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 8016418:	2301      	movs	r3, #1
 801641a:	62bb      	str	r3, [r7, #40]	; 0x28
 801641c:	e006      	b.n	801642c <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801641e:	68fb      	ldr	r3, [r7, #12]
 8016420:	2b03      	cmp	r3, #3
 8016422:	d103      	bne.n	801642c <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 8016424:	2301      	movs	r3, #1
 8016426:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016428:	2301      	movs	r3, #1
 801642a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801642e:	2b00      	cmp	r3, #0
 8016430:	d01a      	beq.n	8016468 <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016432:	2300      	movs	r3, #0
 8016434:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016436:	236c      	movs	r3, #108	; 0x6c
 8016438:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801643a:	23ec      	movs	r3, #236	; 0xec
 801643c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801643e:	e53c      	b.n	8015eba <dhcp_parse_reply+0x3a>
 8016440:	08021844 	.word	0x08021844
 8016444:	08021afc 	.word	0x08021afc
 8016448:	080218a4 	.word	0x080218a4
 801644c:	08021acc 	.word	0x08021acc
 8016450:	08021b20 	.word	0x08021b20
 8016454:	200280c8 	.word	0x200280c8
 8016458:	08021b34 	.word	0x08021b34
 801645c:	200280d4 	.word	0x200280d4
 8016460:	08021b4c 	.word	0x08021b4c
 8016464:	08021b60 	.word	0x08021b60
  } else if (parse_sname_as_options) {
 8016468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646a:	2b00      	cmp	r3, #0
 801646c:	d006      	beq.n	801647c <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 801646e:	2300      	movs	r3, #0
 8016470:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016472:	232c      	movs	r3, #44	; 0x2c
 8016474:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016476:	236c      	movs	r3, #108	; 0x6c
 8016478:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801647a:	e51e      	b.n	8015eba <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801647c:	2300      	movs	r3, #0
}
 801647e:	4618      	mov	r0, r3
 8016480:	3740      	adds	r7, #64	; 0x40
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop

08016488 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016488:	b580      	push	{r7, lr}
 801648a:	b08a      	sub	sp, #40	; 0x28
 801648c:	af00      	add	r7, sp, #0
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	607a      	str	r2, [r7, #4]
 8016494:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8016496:	4b60      	ldr	r3, [pc, #384]	; (8016618 <dhcp_recv+0x190>)
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801649c:	6a3b      	ldr	r3, [r7, #32]
 801649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164a0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	f000 809d 	beq.w	80165ea <dhcp_recv+0x162>
 80164b0:	69fb      	ldr	r3, [r7, #28]
 80164b2:	791b      	ldrb	r3, [r3, #4]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	f000 8098 	beq.w	80165ea <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	895b      	ldrh	r3, [r3, #10]
 80164be:	2b2b      	cmp	r3, #43	; 0x2b
 80164c0:	f240 8095 	bls.w	80165ee <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80164c4:	69bb      	ldr	r3, [r7, #24]
 80164c6:	781b      	ldrb	r3, [r3, #0]
 80164c8:	2b02      	cmp	r3, #2
 80164ca:	f040 8092 	bne.w	80165f2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80164ce:	2300      	movs	r3, #0
 80164d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164d4:	e012      	b.n	80164fc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80164d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164da:	6a3a      	ldr	r2, [r7, #32]
 80164dc:	4413      	add	r3, r2
 80164de:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80164e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164e6:	69b9      	ldr	r1, [r7, #24]
 80164e8:	440b      	add	r3, r1
 80164ea:	7f1b      	ldrb	r3, [r3, #28]
 80164ec:	429a      	cmp	r2, r3
 80164ee:	f040 8082 	bne.w	80165f6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80164f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164f6:	3301      	adds	r3, #1
 80164f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80164fc:	6a3b      	ldr	r3, [r7, #32]
 80164fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016502:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016506:	429a      	cmp	r2, r3
 8016508:	d203      	bcs.n	8016512 <dhcp_recv+0x8a>
 801650a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801650e:	2b05      	cmp	r3, #5
 8016510:	d9e1      	bls.n	80164d6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016512:	69bb      	ldr	r3, [r7, #24]
 8016514:	685b      	ldr	r3, [r3, #4]
 8016516:	4618      	mov	r0, r3
 8016518:	f7f4 fbbd 	bl	800ac96 <lwip_htonl>
 801651c:	4602      	mov	r2, r0
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	429a      	cmp	r2, r3
 8016524:	d169      	bne.n	80165fa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016526:	69f9      	ldr	r1, [r7, #28]
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f7ff fca9 	bl	8015e80 <dhcp_parse_reply>
 801652e:	4603      	mov	r3, r0
 8016530:	2b00      	cmp	r3, #0
 8016532:	d164      	bne.n	80165fe <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016534:	4b39      	ldr	r3, [pc, #228]	; (801661c <dhcp_recv+0x194>)
 8016536:	785b      	ldrb	r3, [r3, #1]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d062      	beq.n	8016602 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016542:	4b37      	ldr	r3, [pc, #220]	; (8016620 <dhcp_recv+0x198>)
 8016544:	685b      	ldr	r3, [r3, #4]
 8016546:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016548:	7cfb      	ldrb	r3, [r7, #19]
 801654a:	2b05      	cmp	r3, #5
 801654c:	d12a      	bne.n	80165a4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801654e:	69fb      	ldr	r3, [r7, #28]
 8016550:	795b      	ldrb	r3, [r3, #5]
 8016552:	2b01      	cmp	r3, #1
 8016554:	d112      	bne.n	801657c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016556:	6979      	ldr	r1, [r7, #20]
 8016558:	6a38      	ldr	r0, [r7, #32]
 801655a:	f7fe fdc7 	bl	80150ec <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801655e:	6a3b      	ldr	r3, [r7, #32]
 8016560:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016564:	f003 0308 	and.w	r3, r3, #8
 8016568:	2b00      	cmp	r3, #0
 801656a:	d003      	beq.n	8016574 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801656c:	6a38      	ldr	r0, [r7, #32]
 801656e:	f7fe fb35 	bl	8014bdc <dhcp_check>
 8016572:	e049      	b.n	8016608 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016574:	6a38      	ldr	r0, [r7, #32]
 8016576:	f7ff f837 	bl	80155e8 <dhcp_bind>
 801657a:	e045      	b.n	8016608 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801657c:	69fb      	ldr	r3, [r7, #28]
 801657e:	795b      	ldrb	r3, [r3, #5]
 8016580:	2b03      	cmp	r3, #3
 8016582:	d007      	beq.n	8016594 <dhcp_recv+0x10c>
 8016584:	69fb      	ldr	r3, [r7, #28]
 8016586:	795b      	ldrb	r3, [r3, #5]
 8016588:	2b04      	cmp	r3, #4
 801658a:	d003      	beq.n	8016594 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801658c:	69fb      	ldr	r3, [r7, #28]
 801658e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016590:	2b05      	cmp	r3, #5
 8016592:	d139      	bne.n	8016608 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8016594:	6979      	ldr	r1, [r7, #20]
 8016596:	6a38      	ldr	r0, [r7, #32]
 8016598:	f7fe fda8 	bl	80150ec <dhcp_handle_ack>
      dhcp_bind(netif);
 801659c:	6a38      	ldr	r0, [r7, #32]
 801659e:	f7ff f823 	bl	80155e8 <dhcp_bind>
 80165a2:	e031      	b.n	8016608 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80165a4:	7cfb      	ldrb	r3, [r7, #19]
 80165a6:	2b06      	cmp	r3, #6
 80165a8:	d113      	bne.n	80165d2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80165aa:	69fb      	ldr	r3, [r7, #28]
 80165ac:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80165ae:	2b03      	cmp	r3, #3
 80165b0:	d00b      	beq.n	80165ca <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80165b2:	69fb      	ldr	r3, [r7, #28]
 80165b4:	795b      	ldrb	r3, [r3, #5]
 80165b6:	2b01      	cmp	r3, #1
 80165b8:	d007      	beq.n	80165ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80165ba:	69fb      	ldr	r3, [r7, #28]
 80165bc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80165be:	2b04      	cmp	r3, #4
 80165c0:	d003      	beq.n	80165ca <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80165c2:	69fb      	ldr	r3, [r7, #28]
 80165c4:	795b      	ldrb	r3, [r3, #5]
 80165c6:	2b05      	cmp	r3, #5
 80165c8:	d103      	bne.n	80165d2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80165ca:	6a38      	ldr	r0, [r7, #32]
 80165cc:	f7fe faec 	bl	8014ba8 <dhcp_handle_nak>
 80165d0:	e01a      	b.n	8016608 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80165d2:	7cfb      	ldrb	r3, [r7, #19]
 80165d4:	2b02      	cmp	r3, #2
 80165d6:	d116      	bne.n	8016606 <dhcp_recv+0x17e>
 80165d8:	69fb      	ldr	r3, [r7, #28]
 80165da:	795b      	ldrb	r3, [r3, #5]
 80165dc:	2b06      	cmp	r3, #6
 80165de:	d112      	bne.n	8016606 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80165e0:	6979      	ldr	r1, [r7, #20]
 80165e2:	6a38      	ldr	r0, [r7, #32]
 80165e4:	f7fe fb2e 	bl	8014c44 <dhcp_handle_offer>
 80165e8:	e00e      	b.n	8016608 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165ea:	bf00      	nop
 80165ec:	e00c      	b.n	8016608 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165ee:	bf00      	nop
 80165f0:	e00a      	b.n	8016608 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165f2:	bf00      	nop
 80165f4:	e008      	b.n	8016608 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80165f6:	bf00      	nop
 80165f8:	e006      	b.n	8016608 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165fa:	bf00      	nop
 80165fc:	e004      	b.n	8016608 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80165fe:	bf00      	nop
 8016600:	e002      	b.n	8016608 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016602:	bf00      	nop
 8016604:	e000      	b.n	8016608 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016606:	bf00      	nop
  pbuf_free(p);
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7f6 febd 	bl	800d388 <pbuf_free>
}
 801660e:	bf00      	nop
 8016610:	3728      	adds	r7, #40	; 0x28
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	20024820 	.word	0x20024820
 801661c:	200280c8 	.word	0x200280c8
 8016620:	200280d4 	.word	0x200280d4

08016624 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b088      	sub	sp, #32
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	60b9      	str	r1, [r7, #8]
 801662e:	603b      	str	r3, [r7, #0]
 8016630:	4613      	mov	r3, r2
 8016632:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d108      	bne.n	801664c <dhcp_create_msg+0x28>
 801663a:	4b5f      	ldr	r3, [pc, #380]	; (80167b8 <dhcp_create_msg+0x194>)
 801663c:	f240 7269 	movw	r2, #1897	; 0x769
 8016640:	495e      	ldr	r1, [pc, #376]	; (80167bc <dhcp_create_msg+0x198>)
 8016642:	485f      	ldr	r0, [pc, #380]	; (80167c0 <dhcp_create_msg+0x19c>)
 8016644:	f003 fe74 	bl	801a330 <iprintf>
 8016648:	2300      	movs	r3, #0
 801664a:	e0b1      	b.n	80167b0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d108      	bne.n	8016664 <dhcp_create_msg+0x40>
 8016652:	4b59      	ldr	r3, [pc, #356]	; (80167b8 <dhcp_create_msg+0x194>)
 8016654:	f240 726a 	movw	r2, #1898	; 0x76a
 8016658:	495a      	ldr	r1, [pc, #360]	; (80167c4 <dhcp_create_msg+0x1a0>)
 801665a:	4859      	ldr	r0, [pc, #356]	; (80167c0 <dhcp_create_msg+0x19c>)
 801665c:	f003 fe68 	bl	801a330 <iprintf>
 8016660:	2300      	movs	r3, #0
 8016662:	e0a5      	b.n	80167b0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016664:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016668:	f44f 719a 	mov.w	r1, #308	; 0x134
 801666c:	2036      	movs	r0, #54	; 0x36
 801666e:	f7f6 fba7 	bl	800cdc0 <pbuf_alloc>
 8016672:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016674:	69bb      	ldr	r3, [r7, #24]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d101      	bne.n	801667e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801667a:	2300      	movs	r3, #0
 801667c:	e098      	b.n	80167b0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801667e:	69bb      	ldr	r3, [r7, #24]
 8016680:	895b      	ldrh	r3, [r3, #10]
 8016682:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016686:	d206      	bcs.n	8016696 <dhcp_create_msg+0x72>
 8016688:	4b4b      	ldr	r3, [pc, #300]	; (80167b8 <dhcp_create_msg+0x194>)
 801668a:	f240 7271 	movw	r2, #1905	; 0x771
 801668e:	494e      	ldr	r1, [pc, #312]	; (80167c8 <dhcp_create_msg+0x1a4>)
 8016690:	484b      	ldr	r0, [pc, #300]	; (80167c0 <dhcp_create_msg+0x19c>)
 8016692:	f003 fe4d 	bl	801a330 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8016696:	79fb      	ldrb	r3, [r7, #7]
 8016698:	2b03      	cmp	r3, #3
 801669a:	d103      	bne.n	80166a4 <dhcp_create_msg+0x80>
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	795b      	ldrb	r3, [r3, #5]
 80166a0:	2b03      	cmp	r3, #3
 80166a2:	d10d      	bne.n	80166c0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	799b      	ldrb	r3, [r3, #6]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d105      	bne.n	80166b8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80166ac:	f003 fece 	bl	801a44c <rand>
 80166b0:	4603      	mov	r3, r0
 80166b2:	461a      	mov	r2, r3
 80166b4:	4b45      	ldr	r3, [pc, #276]	; (80167cc <dhcp_create_msg+0x1a8>)
 80166b6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80166b8:	4b44      	ldr	r3, [pc, #272]	; (80167cc <dhcp_create_msg+0x1a8>)
 80166ba:	681a      	ldr	r2, [r3, #0]
 80166bc:	68bb      	ldr	r3, [r7, #8]
 80166be:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80166c0:	69bb      	ldr	r3, [r7, #24]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80166c6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80166ca:	2100      	movs	r1, #0
 80166cc:	6978      	ldr	r0, [r7, #20]
 80166ce:	f002 ffad 	bl	801962c <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	2201      	movs	r2, #1
 80166d6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	2201      	movs	r2, #1
 80166dc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80166e4:	697b      	ldr	r3, [r7, #20]
 80166e6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	4618      	mov	r0, r3
 80166ee:	f7f4 fad2 	bl	800ac96 <lwip_htonl>
 80166f2:	4602      	mov	r2, r0
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80166f8:	79fb      	ldrb	r3, [r7, #7]
 80166fa:	2b08      	cmp	r3, #8
 80166fc:	d010      	beq.n	8016720 <dhcp_create_msg+0xfc>
 80166fe:	79fb      	ldrb	r3, [r7, #7]
 8016700:	2b04      	cmp	r3, #4
 8016702:	d00d      	beq.n	8016720 <dhcp_create_msg+0xfc>
 8016704:	79fb      	ldrb	r3, [r7, #7]
 8016706:	2b07      	cmp	r3, #7
 8016708:	d00a      	beq.n	8016720 <dhcp_create_msg+0xfc>
 801670a:	79fb      	ldrb	r3, [r7, #7]
 801670c:	2b03      	cmp	r3, #3
 801670e:	d10c      	bne.n	801672a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016714:	2b05      	cmp	r3, #5
 8016716:	d003      	beq.n	8016720 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016718:	68bb      	ldr	r3, [r7, #8]
 801671a:	795b      	ldrb	r3, [r3, #5]
 801671c:	2b04      	cmp	r3, #4
 801671e:	d104      	bne.n	801672a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	3304      	adds	r3, #4
 8016724:	681a      	ldr	r2, [r3, #0]
 8016726:	697b      	ldr	r3, [r7, #20]
 8016728:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801672a:	2300      	movs	r3, #0
 801672c:	83fb      	strh	r3, [r7, #30]
 801672e:	e00c      	b.n	801674a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016730:	8bfa      	ldrh	r2, [r7, #30]
 8016732:	8bfb      	ldrh	r3, [r7, #30]
 8016734:	68f9      	ldr	r1, [r7, #12]
 8016736:	440a      	add	r2, r1
 8016738:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801673c:	697a      	ldr	r2, [r7, #20]
 801673e:	4413      	add	r3, r2
 8016740:	460a      	mov	r2, r1
 8016742:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016744:	8bfb      	ldrh	r3, [r7, #30]
 8016746:	3301      	adds	r3, #1
 8016748:	83fb      	strh	r3, [r7, #30]
 801674a:	8bfb      	ldrh	r3, [r7, #30]
 801674c:	2b05      	cmp	r3, #5
 801674e:	d9ef      	bls.n	8016730 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	2200      	movs	r2, #0
 8016754:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016758:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801675c:	2200      	movs	r2, #0
 801675e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016762:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016766:	2200      	movs	r2, #0
 8016768:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801676c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016770:	2200      	movs	r2, #0
 8016772:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016776:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016780:	2301      	movs	r3, #1
 8016782:	2235      	movs	r2, #53	; 0x35
 8016784:	2000      	movs	r0, #0
 8016786:	f7ff faab 	bl	8015ce0 <dhcp_option>
 801678a:	4603      	mov	r3, r0
 801678c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016794:	79fa      	ldrb	r2, [r7, #7]
 8016796:	8a7b      	ldrh	r3, [r7, #18]
 8016798:	4618      	mov	r0, r3
 801679a:	f7ff fad5 	bl	8015d48 <dhcp_option_byte>
 801679e:	4603      	mov	r3, r0
 80167a0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d002      	beq.n	80167ae <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	8a7a      	ldrh	r2, [r7, #18]
 80167ac:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80167ae:	69bb      	ldr	r3, [r7, #24]
}
 80167b0:	4618      	mov	r0, r3
 80167b2:	3720      	adds	r7, #32
 80167b4:	46bd      	mov	sp, r7
 80167b6:	bd80      	pop	{r7, pc}
 80167b8:	08021844 	.word	0x08021844
 80167bc:	08021b74 	.word	0x08021b74
 80167c0:	080218a4 	.word	0x080218a4
 80167c4:	08021b94 	.word	0x08021b94
 80167c8:	08021bb4 	.word	0x08021bb4
 80167cc:	200214e8 	.word	0x200214e8

080167d0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b084      	sub	sp, #16
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	4603      	mov	r3, r0
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	607a      	str	r2, [r7, #4]
 80167dc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80167de:	89fb      	ldrh	r3, [r7, #14]
 80167e0:	1c5a      	adds	r2, r3, #1
 80167e2:	81fa      	strh	r2, [r7, #14]
 80167e4:	461a      	mov	r2, r3
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	4413      	add	r3, r2
 80167ea:	22ff      	movs	r2, #255	; 0xff
 80167ec:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80167ee:	e007      	b.n	8016800 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80167f0:	89fb      	ldrh	r3, [r7, #14]
 80167f2:	1c5a      	adds	r2, r3, #1
 80167f4:	81fa      	strh	r2, [r7, #14]
 80167f6:	461a      	mov	r2, r3
 80167f8:	68bb      	ldr	r3, [r7, #8]
 80167fa:	4413      	add	r3, r2
 80167fc:	2200      	movs	r2, #0
 80167fe:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016800:	89fb      	ldrh	r3, [r7, #14]
 8016802:	2b43      	cmp	r3, #67	; 0x43
 8016804:	d904      	bls.n	8016810 <dhcp_option_trailer+0x40>
 8016806:	89fb      	ldrh	r3, [r7, #14]
 8016808:	f003 0303 	and.w	r3, r3, #3
 801680c:	2b00      	cmp	r3, #0
 801680e:	d002      	beq.n	8016816 <dhcp_option_trailer+0x46>
 8016810:	89fb      	ldrh	r3, [r7, #14]
 8016812:	2b43      	cmp	r3, #67	; 0x43
 8016814:	d9ec      	bls.n	80167f0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016816:	89fb      	ldrh	r3, [r7, #14]
 8016818:	33f0      	adds	r3, #240	; 0xf0
 801681a:	b29b      	uxth	r3, r3
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7f6 fc2c 	bl	800d07c <pbuf_realloc>
}
 8016824:	bf00      	nop
 8016826:	3710      	adds	r7, #16
 8016828:	46bd      	mov	sp, r7
 801682a:	bd80      	pop	{r7, pc}

0801682c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801682c:	b480      	push	{r7}
 801682e:	b085      	sub	sp, #20
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d017      	beq.n	801686a <dhcp_supplied_address+0x3e>
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801683e:	2b00      	cmp	r3, #0
 8016840:	d013      	beq.n	801686a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016846:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	795b      	ldrb	r3, [r3, #5]
 801684c:	2b0a      	cmp	r3, #10
 801684e:	d007      	beq.n	8016860 <dhcp_supplied_address+0x34>
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	795b      	ldrb	r3, [r3, #5]
 8016854:	2b05      	cmp	r3, #5
 8016856:	d003      	beq.n	8016860 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801685c:	2b04      	cmp	r3, #4
 801685e:	d101      	bne.n	8016864 <dhcp_supplied_address+0x38>
 8016860:	2301      	movs	r3, #1
 8016862:	e000      	b.n	8016866 <dhcp_supplied_address+0x3a>
 8016864:	2300      	movs	r3, #0
 8016866:	b2db      	uxtb	r3, r3
 8016868:	e000      	b.n	801686c <dhcp_supplied_address+0x40>
  }
  return 0;
 801686a:	2300      	movs	r3, #0
}
 801686c:	4618      	mov	r0, r3
 801686e:	3714      	adds	r7, #20
 8016870:	46bd      	mov	sp, r7
 8016872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016876:	4770      	bx	lr

08016878 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016880:	4915      	ldr	r1, [pc, #84]	; (80168d8 <etharp_free_entry+0x60>)
 8016882:	687a      	ldr	r2, [r7, #4]
 8016884:	4613      	mov	r3, r2
 8016886:	005b      	lsls	r3, r3, #1
 8016888:	4413      	add	r3, r2
 801688a:	00db      	lsls	r3, r3, #3
 801688c:	440b      	add	r3, r1
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d013      	beq.n	80168bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016894:	4910      	ldr	r1, [pc, #64]	; (80168d8 <etharp_free_entry+0x60>)
 8016896:	687a      	ldr	r2, [r7, #4]
 8016898:	4613      	mov	r3, r2
 801689a:	005b      	lsls	r3, r3, #1
 801689c:	4413      	add	r3, r2
 801689e:	00db      	lsls	r3, r3, #3
 80168a0:	440b      	add	r3, r1
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	4618      	mov	r0, r3
 80168a6:	f7f6 fd6f 	bl	800d388 <pbuf_free>
    arp_table[i].q = NULL;
 80168aa:	490b      	ldr	r1, [pc, #44]	; (80168d8 <etharp_free_entry+0x60>)
 80168ac:	687a      	ldr	r2, [r7, #4]
 80168ae:	4613      	mov	r3, r2
 80168b0:	005b      	lsls	r3, r3, #1
 80168b2:	4413      	add	r3, r2
 80168b4:	00db      	lsls	r3, r3, #3
 80168b6:	440b      	add	r3, r1
 80168b8:	2200      	movs	r2, #0
 80168ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80168bc:	4906      	ldr	r1, [pc, #24]	; (80168d8 <etharp_free_entry+0x60>)
 80168be:	687a      	ldr	r2, [r7, #4]
 80168c0:	4613      	mov	r3, r2
 80168c2:	005b      	lsls	r3, r3, #1
 80168c4:	4413      	add	r3, r2
 80168c6:	00db      	lsls	r3, r3, #3
 80168c8:	440b      	add	r3, r1
 80168ca:	3314      	adds	r3, #20
 80168cc:	2200      	movs	r2, #0
 80168ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80168d0:	bf00      	nop
 80168d2:	3708      	adds	r7, #8
 80168d4:	46bd      	mov	sp, r7
 80168d6:	bd80      	pop	{r7, pc}
 80168d8:	200214ec 	.word	0x200214ec

080168dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80168e2:	2300      	movs	r3, #0
 80168e4:	607b      	str	r3, [r7, #4]
 80168e6:	e096      	b.n	8016a16 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80168e8:	494f      	ldr	r1, [pc, #316]	; (8016a28 <etharp_tmr+0x14c>)
 80168ea:	687a      	ldr	r2, [r7, #4]
 80168ec:	4613      	mov	r3, r2
 80168ee:	005b      	lsls	r3, r3, #1
 80168f0:	4413      	add	r3, r2
 80168f2:	00db      	lsls	r3, r3, #3
 80168f4:	440b      	add	r3, r1
 80168f6:	3314      	adds	r3, #20
 80168f8:	781b      	ldrb	r3, [r3, #0]
 80168fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80168fc:	78fb      	ldrb	r3, [r7, #3]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	f000 8086 	beq.w	8016a10 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016904:	4948      	ldr	r1, [pc, #288]	; (8016a28 <etharp_tmr+0x14c>)
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	4613      	mov	r3, r2
 801690a:	005b      	lsls	r3, r3, #1
 801690c:	4413      	add	r3, r2
 801690e:	00db      	lsls	r3, r3, #3
 8016910:	440b      	add	r3, r1
 8016912:	3312      	adds	r3, #18
 8016914:	881b      	ldrh	r3, [r3, #0]
 8016916:	3301      	adds	r3, #1
 8016918:	b298      	uxth	r0, r3
 801691a:	4943      	ldr	r1, [pc, #268]	; (8016a28 <etharp_tmr+0x14c>)
 801691c:	687a      	ldr	r2, [r7, #4]
 801691e:	4613      	mov	r3, r2
 8016920:	005b      	lsls	r3, r3, #1
 8016922:	4413      	add	r3, r2
 8016924:	00db      	lsls	r3, r3, #3
 8016926:	440b      	add	r3, r1
 8016928:	3312      	adds	r3, #18
 801692a:	4602      	mov	r2, r0
 801692c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801692e:	493e      	ldr	r1, [pc, #248]	; (8016a28 <etharp_tmr+0x14c>)
 8016930:	687a      	ldr	r2, [r7, #4]
 8016932:	4613      	mov	r3, r2
 8016934:	005b      	lsls	r3, r3, #1
 8016936:	4413      	add	r3, r2
 8016938:	00db      	lsls	r3, r3, #3
 801693a:	440b      	add	r3, r1
 801693c:	3312      	adds	r3, #18
 801693e:	881b      	ldrh	r3, [r3, #0]
 8016940:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016944:	d215      	bcs.n	8016972 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016946:	4938      	ldr	r1, [pc, #224]	; (8016a28 <etharp_tmr+0x14c>)
 8016948:	687a      	ldr	r2, [r7, #4]
 801694a:	4613      	mov	r3, r2
 801694c:	005b      	lsls	r3, r3, #1
 801694e:	4413      	add	r3, r2
 8016950:	00db      	lsls	r3, r3, #3
 8016952:	440b      	add	r3, r1
 8016954:	3314      	adds	r3, #20
 8016956:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016958:	2b01      	cmp	r3, #1
 801695a:	d10e      	bne.n	801697a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801695c:	4932      	ldr	r1, [pc, #200]	; (8016a28 <etharp_tmr+0x14c>)
 801695e:	687a      	ldr	r2, [r7, #4]
 8016960:	4613      	mov	r3, r2
 8016962:	005b      	lsls	r3, r3, #1
 8016964:	4413      	add	r3, r2
 8016966:	00db      	lsls	r3, r3, #3
 8016968:	440b      	add	r3, r1
 801696a:	3312      	adds	r3, #18
 801696c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801696e:	2b04      	cmp	r3, #4
 8016970:	d903      	bls.n	801697a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016972:	6878      	ldr	r0, [r7, #4]
 8016974:	f7ff ff80 	bl	8016878 <etharp_free_entry>
 8016978:	e04a      	b.n	8016a10 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801697a:	492b      	ldr	r1, [pc, #172]	; (8016a28 <etharp_tmr+0x14c>)
 801697c:	687a      	ldr	r2, [r7, #4]
 801697e:	4613      	mov	r3, r2
 8016980:	005b      	lsls	r3, r3, #1
 8016982:	4413      	add	r3, r2
 8016984:	00db      	lsls	r3, r3, #3
 8016986:	440b      	add	r3, r1
 8016988:	3314      	adds	r3, #20
 801698a:	781b      	ldrb	r3, [r3, #0]
 801698c:	2b03      	cmp	r3, #3
 801698e:	d10a      	bne.n	80169a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016990:	4925      	ldr	r1, [pc, #148]	; (8016a28 <etharp_tmr+0x14c>)
 8016992:	687a      	ldr	r2, [r7, #4]
 8016994:	4613      	mov	r3, r2
 8016996:	005b      	lsls	r3, r3, #1
 8016998:	4413      	add	r3, r2
 801699a:	00db      	lsls	r3, r3, #3
 801699c:	440b      	add	r3, r1
 801699e:	3314      	adds	r3, #20
 80169a0:	2204      	movs	r2, #4
 80169a2:	701a      	strb	r2, [r3, #0]
 80169a4:	e034      	b.n	8016a10 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80169a6:	4920      	ldr	r1, [pc, #128]	; (8016a28 <etharp_tmr+0x14c>)
 80169a8:	687a      	ldr	r2, [r7, #4]
 80169aa:	4613      	mov	r3, r2
 80169ac:	005b      	lsls	r3, r3, #1
 80169ae:	4413      	add	r3, r2
 80169b0:	00db      	lsls	r3, r3, #3
 80169b2:	440b      	add	r3, r1
 80169b4:	3314      	adds	r3, #20
 80169b6:	781b      	ldrb	r3, [r3, #0]
 80169b8:	2b04      	cmp	r3, #4
 80169ba:	d10a      	bne.n	80169d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80169bc:	491a      	ldr	r1, [pc, #104]	; (8016a28 <etharp_tmr+0x14c>)
 80169be:	687a      	ldr	r2, [r7, #4]
 80169c0:	4613      	mov	r3, r2
 80169c2:	005b      	lsls	r3, r3, #1
 80169c4:	4413      	add	r3, r2
 80169c6:	00db      	lsls	r3, r3, #3
 80169c8:	440b      	add	r3, r1
 80169ca:	3314      	adds	r3, #20
 80169cc:	2202      	movs	r2, #2
 80169ce:	701a      	strb	r2, [r3, #0]
 80169d0:	e01e      	b.n	8016a10 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80169d2:	4915      	ldr	r1, [pc, #84]	; (8016a28 <etharp_tmr+0x14c>)
 80169d4:	687a      	ldr	r2, [r7, #4]
 80169d6:	4613      	mov	r3, r2
 80169d8:	005b      	lsls	r3, r3, #1
 80169da:	4413      	add	r3, r2
 80169dc:	00db      	lsls	r3, r3, #3
 80169de:	440b      	add	r3, r1
 80169e0:	3314      	adds	r3, #20
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	2b01      	cmp	r3, #1
 80169e6:	d113      	bne.n	8016a10 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80169e8:	490f      	ldr	r1, [pc, #60]	; (8016a28 <etharp_tmr+0x14c>)
 80169ea:	687a      	ldr	r2, [r7, #4]
 80169ec:	4613      	mov	r3, r2
 80169ee:	005b      	lsls	r3, r3, #1
 80169f0:	4413      	add	r3, r2
 80169f2:	00db      	lsls	r3, r3, #3
 80169f4:	440b      	add	r3, r1
 80169f6:	3308      	adds	r3, #8
 80169f8:	6818      	ldr	r0, [r3, #0]
 80169fa:	687a      	ldr	r2, [r7, #4]
 80169fc:	4613      	mov	r3, r2
 80169fe:	005b      	lsls	r3, r3, #1
 8016a00:	4413      	add	r3, r2
 8016a02:	00db      	lsls	r3, r3, #3
 8016a04:	4a08      	ldr	r2, [pc, #32]	; (8016a28 <etharp_tmr+0x14c>)
 8016a06:	4413      	add	r3, r2
 8016a08:	3304      	adds	r3, #4
 8016a0a:	4619      	mov	r1, r3
 8016a0c:	f000 fe72 	bl	80176f4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	3301      	adds	r3, #1
 8016a14:	607b      	str	r3, [r7, #4]
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2b09      	cmp	r3, #9
 8016a1a:	f77f af65 	ble.w	80168e8 <etharp_tmr+0xc>
      }
    }
  }
}
 8016a1e:	bf00      	nop
 8016a20:	bf00      	nop
 8016a22:	3708      	adds	r7, #8
 8016a24:	46bd      	mov	sp, r7
 8016a26:	bd80      	pop	{r7, pc}
 8016a28:	200214ec 	.word	0x200214ec

08016a2c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b08a      	sub	sp, #40	; 0x28
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	60f8      	str	r0, [r7, #12]
 8016a34:	460b      	mov	r3, r1
 8016a36:	607a      	str	r2, [r7, #4]
 8016a38:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016a3a:	230a      	movs	r3, #10
 8016a3c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016a3e:	230a      	movs	r3, #10
 8016a40:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016a42:	230a      	movs	r3, #10
 8016a44:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016a46:	2300      	movs	r3, #0
 8016a48:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016a4a:	230a      	movs	r3, #10
 8016a4c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016a4e:	2300      	movs	r3, #0
 8016a50:	83bb      	strh	r3, [r7, #28]
 8016a52:	2300      	movs	r3, #0
 8016a54:	837b      	strh	r3, [r7, #26]
 8016a56:	2300      	movs	r3, #0
 8016a58:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	843b      	strh	r3, [r7, #32]
 8016a5e:	e0ae      	b.n	8016bbe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016a60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016a64:	49a6      	ldr	r1, [pc, #664]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016a66:	4613      	mov	r3, r2
 8016a68:	005b      	lsls	r3, r3, #1
 8016a6a:	4413      	add	r3, r2
 8016a6c:	00db      	lsls	r3, r3, #3
 8016a6e:	440b      	add	r3, r1
 8016a70:	3314      	adds	r3, #20
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016a76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016a7a:	2b0a      	cmp	r3, #10
 8016a7c:	d105      	bne.n	8016a8a <etharp_find_entry+0x5e>
 8016a7e:	7dfb      	ldrb	r3, [r7, #23]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d102      	bne.n	8016a8a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016a84:	8c3b      	ldrh	r3, [r7, #32]
 8016a86:	847b      	strh	r3, [r7, #34]	; 0x22
 8016a88:	e095      	b.n	8016bb6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016a8a:	7dfb      	ldrb	r3, [r7, #23]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	f000 8092 	beq.w	8016bb6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016a92:	7dfb      	ldrb	r3, [r7, #23]
 8016a94:	2b01      	cmp	r3, #1
 8016a96:	d009      	beq.n	8016aac <etharp_find_entry+0x80>
 8016a98:	7dfb      	ldrb	r3, [r7, #23]
 8016a9a:	2b01      	cmp	r3, #1
 8016a9c:	d806      	bhi.n	8016aac <etharp_find_entry+0x80>
 8016a9e:	4b99      	ldr	r3, [pc, #612]	; (8016d04 <etharp_find_entry+0x2d8>)
 8016aa0:	f240 1223 	movw	r2, #291	; 0x123
 8016aa4:	4998      	ldr	r1, [pc, #608]	; (8016d08 <etharp_find_entry+0x2dc>)
 8016aa6:	4899      	ldr	r0, [pc, #612]	; (8016d0c <etharp_find_entry+0x2e0>)
 8016aa8:	f003 fc42 	bl	801a330 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d020      	beq.n	8016af4 <etharp_find_entry+0xc8>
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	6819      	ldr	r1, [r3, #0]
 8016ab6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016aba:	4891      	ldr	r0, [pc, #580]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016abc:	4613      	mov	r3, r2
 8016abe:	005b      	lsls	r3, r3, #1
 8016ac0:	4413      	add	r3, r2
 8016ac2:	00db      	lsls	r3, r3, #3
 8016ac4:	4403      	add	r3, r0
 8016ac6:	3304      	adds	r3, #4
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	4299      	cmp	r1, r3
 8016acc:	d112      	bne.n	8016af4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d00c      	beq.n	8016aee <etharp_find_entry+0xc2>
 8016ad4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ad8:	4989      	ldr	r1, [pc, #548]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016ada:	4613      	mov	r3, r2
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	4413      	add	r3, r2
 8016ae0:	00db      	lsls	r3, r3, #3
 8016ae2:	440b      	add	r3, r1
 8016ae4:	3308      	adds	r3, #8
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	687a      	ldr	r2, [r7, #4]
 8016aea:	429a      	cmp	r2, r3
 8016aec:	d102      	bne.n	8016af4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016aee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016af2:	e100      	b.n	8016cf6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016af4:	7dfb      	ldrb	r3, [r7, #23]
 8016af6:	2b01      	cmp	r3, #1
 8016af8:	d140      	bne.n	8016b7c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016afa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016afe:	4980      	ldr	r1, [pc, #512]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016b00:	4613      	mov	r3, r2
 8016b02:	005b      	lsls	r3, r3, #1
 8016b04:	4413      	add	r3, r2
 8016b06:	00db      	lsls	r3, r3, #3
 8016b08:	440b      	add	r3, r1
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d01a      	beq.n	8016b46 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016b10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b14:	497a      	ldr	r1, [pc, #488]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016b16:	4613      	mov	r3, r2
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	4413      	add	r3, r2
 8016b1c:	00db      	lsls	r3, r3, #3
 8016b1e:	440b      	add	r3, r1
 8016b20:	3312      	adds	r3, #18
 8016b22:	881b      	ldrh	r3, [r3, #0]
 8016b24:	8bba      	ldrh	r2, [r7, #28]
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d845      	bhi.n	8016bb6 <etharp_find_entry+0x18a>
            old_queue = i;
 8016b2a:	8c3b      	ldrh	r3, [r7, #32]
 8016b2c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016b2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b32:	4973      	ldr	r1, [pc, #460]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016b34:	4613      	mov	r3, r2
 8016b36:	005b      	lsls	r3, r3, #1
 8016b38:	4413      	add	r3, r2
 8016b3a:	00db      	lsls	r3, r3, #3
 8016b3c:	440b      	add	r3, r1
 8016b3e:	3312      	adds	r3, #18
 8016b40:	881b      	ldrh	r3, [r3, #0]
 8016b42:	83bb      	strh	r3, [r7, #28]
 8016b44:	e037      	b.n	8016bb6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016b46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b4a:	496d      	ldr	r1, [pc, #436]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	005b      	lsls	r3, r3, #1
 8016b50:	4413      	add	r3, r2
 8016b52:	00db      	lsls	r3, r3, #3
 8016b54:	440b      	add	r3, r1
 8016b56:	3312      	adds	r3, #18
 8016b58:	881b      	ldrh	r3, [r3, #0]
 8016b5a:	8b7a      	ldrh	r2, [r7, #26]
 8016b5c:	429a      	cmp	r2, r3
 8016b5e:	d82a      	bhi.n	8016bb6 <etharp_find_entry+0x18a>
            old_pending = i;
 8016b60:	8c3b      	ldrh	r3, [r7, #32]
 8016b62:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016b64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b68:	4965      	ldr	r1, [pc, #404]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	005b      	lsls	r3, r3, #1
 8016b6e:	4413      	add	r3, r2
 8016b70:	00db      	lsls	r3, r3, #3
 8016b72:	440b      	add	r3, r1
 8016b74:	3312      	adds	r3, #18
 8016b76:	881b      	ldrh	r3, [r3, #0]
 8016b78:	837b      	strh	r3, [r7, #26]
 8016b7a:	e01c      	b.n	8016bb6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016b7c:	7dfb      	ldrb	r3, [r7, #23]
 8016b7e:	2b01      	cmp	r3, #1
 8016b80:	d919      	bls.n	8016bb6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016b82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016b86:	495e      	ldr	r1, [pc, #376]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016b88:	4613      	mov	r3, r2
 8016b8a:	005b      	lsls	r3, r3, #1
 8016b8c:	4413      	add	r3, r2
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	440b      	add	r3, r1
 8016b92:	3312      	adds	r3, #18
 8016b94:	881b      	ldrh	r3, [r3, #0]
 8016b96:	8b3a      	ldrh	r2, [r7, #24]
 8016b98:	429a      	cmp	r2, r3
 8016b9a:	d80c      	bhi.n	8016bb6 <etharp_find_entry+0x18a>
            old_stable = i;
 8016b9c:	8c3b      	ldrh	r3, [r7, #32]
 8016b9e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016ba0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ba4:	4956      	ldr	r1, [pc, #344]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016ba6:	4613      	mov	r3, r2
 8016ba8:	005b      	lsls	r3, r3, #1
 8016baa:	4413      	add	r3, r2
 8016bac:	00db      	lsls	r3, r3, #3
 8016bae:	440b      	add	r3, r1
 8016bb0:	3312      	adds	r3, #18
 8016bb2:	881b      	ldrh	r3, [r3, #0]
 8016bb4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bb6:	8c3b      	ldrh	r3, [r7, #32]
 8016bb8:	3301      	adds	r3, #1
 8016bba:	b29b      	uxth	r3, r3
 8016bbc:	843b      	strh	r3, [r7, #32]
 8016bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016bc2:	2b09      	cmp	r3, #9
 8016bc4:	f77f af4c 	ble.w	8016a60 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016bc8:	7afb      	ldrb	r3, [r7, #11]
 8016bca:	f003 0302 	and.w	r3, r3, #2
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d108      	bne.n	8016be4 <etharp_find_entry+0x1b8>
 8016bd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016bd6:	2b0a      	cmp	r3, #10
 8016bd8:	d107      	bne.n	8016bea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016bda:	7afb      	ldrb	r3, [r7, #11]
 8016bdc:	f003 0301 	and.w	r3, r3, #1
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d102      	bne.n	8016bea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016be4:	f04f 33ff 	mov.w	r3, #4294967295
 8016be8:	e085      	b.n	8016cf6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016bea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016bee:	2b09      	cmp	r3, #9
 8016bf0:	dc02      	bgt.n	8016bf8 <etharp_find_entry+0x1cc>
    i = empty;
 8016bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016bf4:	843b      	strh	r3, [r7, #32]
 8016bf6:	e039      	b.n	8016c6c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016bf8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016bfc:	2b09      	cmp	r3, #9
 8016bfe:	dc14      	bgt.n	8016c2a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016c02:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016c04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c08:	493d      	ldr	r1, [pc, #244]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	005b      	lsls	r3, r3, #1
 8016c0e:	4413      	add	r3, r2
 8016c10:	00db      	lsls	r3, r3, #3
 8016c12:	440b      	add	r3, r1
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d018      	beq.n	8016c4c <etharp_find_entry+0x220>
 8016c1a:	4b3a      	ldr	r3, [pc, #232]	; (8016d04 <etharp_find_entry+0x2d8>)
 8016c1c:	f240 126d 	movw	r2, #365	; 0x16d
 8016c20:	493b      	ldr	r1, [pc, #236]	; (8016d10 <etharp_find_entry+0x2e4>)
 8016c22:	483a      	ldr	r0, [pc, #232]	; (8016d0c <etharp_find_entry+0x2e0>)
 8016c24:	f003 fb84 	bl	801a330 <iprintf>
 8016c28:	e010      	b.n	8016c4c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016c2a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016c2e:	2b09      	cmp	r3, #9
 8016c30:	dc02      	bgt.n	8016c38 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016c32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016c34:	843b      	strh	r3, [r7, #32]
 8016c36:	e009      	b.n	8016c4c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016c38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016c3c:	2b09      	cmp	r3, #9
 8016c3e:	dc02      	bgt.n	8016c46 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016c40:	8bfb      	ldrh	r3, [r7, #30]
 8016c42:	843b      	strh	r3, [r7, #32]
 8016c44:	e002      	b.n	8016c4c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016c46:	f04f 33ff 	mov.w	r3, #4294967295
 8016c4a:	e054      	b.n	8016cf6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c50:	2b09      	cmp	r3, #9
 8016c52:	dd06      	ble.n	8016c62 <etharp_find_entry+0x236>
 8016c54:	4b2b      	ldr	r3, [pc, #172]	; (8016d04 <etharp_find_entry+0x2d8>)
 8016c56:	f240 127f 	movw	r2, #383	; 0x17f
 8016c5a:	492e      	ldr	r1, [pc, #184]	; (8016d14 <etharp_find_entry+0x2e8>)
 8016c5c:	482b      	ldr	r0, [pc, #172]	; (8016d0c <etharp_find_entry+0x2e0>)
 8016c5e:	f003 fb67 	bl	801a330 <iprintf>
    etharp_free_entry(i);
 8016c62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7ff fe06 	bl	8016878 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016c6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016c70:	2b09      	cmp	r3, #9
 8016c72:	dd06      	ble.n	8016c82 <etharp_find_entry+0x256>
 8016c74:	4b23      	ldr	r3, [pc, #140]	; (8016d04 <etharp_find_entry+0x2d8>)
 8016c76:	f240 1283 	movw	r2, #387	; 0x183
 8016c7a:	4926      	ldr	r1, [pc, #152]	; (8016d14 <etharp_find_entry+0x2e8>)
 8016c7c:	4823      	ldr	r0, [pc, #140]	; (8016d0c <etharp_find_entry+0x2e0>)
 8016c7e:	f003 fb57 	bl	801a330 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016c82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016c86:	491e      	ldr	r1, [pc, #120]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016c88:	4613      	mov	r3, r2
 8016c8a:	005b      	lsls	r3, r3, #1
 8016c8c:	4413      	add	r3, r2
 8016c8e:	00db      	lsls	r3, r3, #3
 8016c90:	440b      	add	r3, r1
 8016c92:	3314      	adds	r3, #20
 8016c94:	781b      	ldrb	r3, [r3, #0]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d006      	beq.n	8016ca8 <etharp_find_entry+0x27c>
 8016c9a:	4b1a      	ldr	r3, [pc, #104]	; (8016d04 <etharp_find_entry+0x2d8>)
 8016c9c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016ca0:	491d      	ldr	r1, [pc, #116]	; (8016d18 <etharp_find_entry+0x2ec>)
 8016ca2:	481a      	ldr	r0, [pc, #104]	; (8016d0c <etharp_find_entry+0x2e0>)
 8016ca4:	f003 fb44 	bl	801a330 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d00b      	beq.n	8016cc6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	6819      	ldr	r1, [r3, #0]
 8016cb6:	4812      	ldr	r0, [pc, #72]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016cb8:	4613      	mov	r3, r2
 8016cba:	005b      	lsls	r3, r3, #1
 8016cbc:	4413      	add	r3, r2
 8016cbe:	00db      	lsls	r3, r3, #3
 8016cc0:	4403      	add	r3, r0
 8016cc2:	3304      	adds	r3, #4
 8016cc4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016cc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cca:	490d      	ldr	r1, [pc, #52]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016ccc:	4613      	mov	r3, r2
 8016cce:	005b      	lsls	r3, r3, #1
 8016cd0:	4413      	add	r3, r2
 8016cd2:	00db      	lsls	r3, r3, #3
 8016cd4:	440b      	add	r3, r1
 8016cd6:	3312      	adds	r3, #18
 8016cd8:	2200      	movs	r2, #0
 8016cda:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016cdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ce0:	4907      	ldr	r1, [pc, #28]	; (8016d00 <etharp_find_entry+0x2d4>)
 8016ce2:	4613      	mov	r3, r2
 8016ce4:	005b      	lsls	r3, r3, #1
 8016ce6:	4413      	add	r3, r2
 8016ce8:	00db      	lsls	r3, r3, #3
 8016cea:	440b      	add	r3, r1
 8016cec:	3308      	adds	r3, #8
 8016cee:	687a      	ldr	r2, [r7, #4]
 8016cf0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016cf2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016cf6:	4618      	mov	r0, r3
 8016cf8:	3728      	adds	r7, #40	; 0x28
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bd80      	pop	{r7, pc}
 8016cfe:	bf00      	nop
 8016d00:	200214ec 	.word	0x200214ec
 8016d04:	08021bf4 	.word	0x08021bf4
 8016d08:	08021c2c 	.word	0x08021c2c
 8016d0c:	08021c6c 	.word	0x08021c6c
 8016d10:	08021c94 	.word	0x08021c94
 8016d14:	08021cac 	.word	0x08021cac
 8016d18:	08021cc0 	.word	0x08021cc0

08016d1c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b088      	sub	sp, #32
 8016d20:	af02      	add	r7, sp, #8
 8016d22:	60f8      	str	r0, [r7, #12]
 8016d24:	60b9      	str	r1, [r7, #8]
 8016d26:	607a      	str	r2, [r7, #4]
 8016d28:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016d30:	2b06      	cmp	r3, #6
 8016d32:	d006      	beq.n	8016d42 <etharp_update_arp_entry+0x26>
 8016d34:	4b48      	ldr	r3, [pc, #288]	; (8016e58 <etharp_update_arp_entry+0x13c>)
 8016d36:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016d3a:	4948      	ldr	r1, [pc, #288]	; (8016e5c <etharp_update_arp_entry+0x140>)
 8016d3c:	4848      	ldr	r0, [pc, #288]	; (8016e60 <etharp_update_arp_entry+0x144>)
 8016d3e:	f003 faf7 	bl	801a330 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016d42:	68bb      	ldr	r3, [r7, #8]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d012      	beq.n	8016d6e <etharp_update_arp_entry+0x52>
 8016d48:	68bb      	ldr	r3, [r7, #8]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d00e      	beq.n	8016d6e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	68f9      	ldr	r1, [r7, #12]
 8016d56:	4618      	mov	r0, r3
 8016d58:	f001 f920 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 8016d5c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d105      	bne.n	8016d6e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016d6a:	2be0      	cmp	r3, #224	; 0xe0
 8016d6c:	d102      	bne.n	8016d74 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016d6e:	f06f 030f 	mvn.w	r3, #15
 8016d72:	e06c      	b.n	8016e4e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016d74:	78fb      	ldrb	r3, [r7, #3]
 8016d76:	68fa      	ldr	r2, [r7, #12]
 8016d78:	4619      	mov	r1, r3
 8016d7a:	68b8      	ldr	r0, [r7, #8]
 8016d7c:	f7ff fe56 	bl	8016a2c <etharp_find_entry>
 8016d80:	4603      	mov	r3, r0
 8016d82:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016d84:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	da02      	bge.n	8016d92 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016d8c:	8afb      	ldrh	r3, [r7, #22]
 8016d8e:	b25b      	sxtb	r3, r3
 8016d90:	e05d      	b.n	8016e4e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016d92:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016d96:	4933      	ldr	r1, [pc, #204]	; (8016e64 <etharp_update_arp_entry+0x148>)
 8016d98:	4613      	mov	r3, r2
 8016d9a:	005b      	lsls	r3, r3, #1
 8016d9c:	4413      	add	r3, r2
 8016d9e:	00db      	lsls	r3, r3, #3
 8016da0:	440b      	add	r3, r1
 8016da2:	3314      	adds	r3, #20
 8016da4:	2202      	movs	r2, #2
 8016da6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016da8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dac:	492d      	ldr	r1, [pc, #180]	; (8016e64 <etharp_update_arp_entry+0x148>)
 8016dae:	4613      	mov	r3, r2
 8016db0:	005b      	lsls	r3, r3, #1
 8016db2:	4413      	add	r3, r2
 8016db4:	00db      	lsls	r3, r3, #3
 8016db6:	440b      	add	r3, r1
 8016db8:	3308      	adds	r3, #8
 8016dba:	68fa      	ldr	r2, [r7, #12]
 8016dbc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016dbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016dc2:	4613      	mov	r3, r2
 8016dc4:	005b      	lsls	r3, r3, #1
 8016dc6:	4413      	add	r3, r2
 8016dc8:	00db      	lsls	r3, r3, #3
 8016dca:	3308      	adds	r3, #8
 8016dcc:	4a25      	ldr	r2, [pc, #148]	; (8016e64 <etharp_update_arp_entry+0x148>)
 8016dce:	4413      	add	r3, r2
 8016dd0:	3304      	adds	r3, #4
 8016dd2:	2206      	movs	r2, #6
 8016dd4:	6879      	ldr	r1, [r7, #4]
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f002 fc00 	bl	80195dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016ddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016de0:	4920      	ldr	r1, [pc, #128]	; (8016e64 <etharp_update_arp_entry+0x148>)
 8016de2:	4613      	mov	r3, r2
 8016de4:	005b      	lsls	r3, r3, #1
 8016de6:	4413      	add	r3, r2
 8016de8:	00db      	lsls	r3, r3, #3
 8016dea:	440b      	add	r3, r1
 8016dec:	3312      	adds	r3, #18
 8016dee:	2200      	movs	r2, #0
 8016df0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016df2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016df6:	491b      	ldr	r1, [pc, #108]	; (8016e64 <etharp_update_arp_entry+0x148>)
 8016df8:	4613      	mov	r3, r2
 8016dfa:	005b      	lsls	r3, r3, #1
 8016dfc:	4413      	add	r3, r2
 8016dfe:	00db      	lsls	r3, r3, #3
 8016e00:	440b      	add	r3, r1
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d021      	beq.n	8016e4c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016e08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e0c:	4915      	ldr	r1, [pc, #84]	; (8016e64 <etharp_update_arp_entry+0x148>)
 8016e0e:	4613      	mov	r3, r2
 8016e10:	005b      	lsls	r3, r3, #1
 8016e12:	4413      	add	r3, r2
 8016e14:	00db      	lsls	r3, r3, #3
 8016e16:	440b      	add	r3, r1
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016e1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016e20:	4910      	ldr	r1, [pc, #64]	; (8016e64 <etharp_update_arp_entry+0x148>)
 8016e22:	4613      	mov	r3, r2
 8016e24:	005b      	lsls	r3, r3, #1
 8016e26:	4413      	add	r3, r2
 8016e28:	00db      	lsls	r3, r3, #3
 8016e2a:	440b      	add	r3, r1
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016e36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e3a:	9300      	str	r3, [sp, #0]
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	6939      	ldr	r1, [r7, #16]
 8016e40:	68f8      	ldr	r0, [r7, #12]
 8016e42:	f002 f96f 	bl	8019124 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016e46:	6938      	ldr	r0, [r7, #16]
 8016e48:	f7f6 fa9e 	bl	800d388 <pbuf_free>
  }
  return ERR_OK;
 8016e4c:	2300      	movs	r3, #0
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3718      	adds	r7, #24
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}
 8016e56:	bf00      	nop
 8016e58:	08021bf4 	.word	0x08021bf4
 8016e5c:	08021cec 	.word	0x08021cec
 8016e60:	08021c6c 	.word	0x08021c6c
 8016e64:	200214ec 	.word	0x200214ec

08016e68 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b084      	sub	sp, #16
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e70:	2300      	movs	r3, #0
 8016e72:	60fb      	str	r3, [r7, #12]
 8016e74:	e01e      	b.n	8016eb4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016e76:	4913      	ldr	r1, [pc, #76]	; (8016ec4 <etharp_cleanup_netif+0x5c>)
 8016e78:	68fa      	ldr	r2, [r7, #12]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	005b      	lsls	r3, r3, #1
 8016e7e:	4413      	add	r3, r2
 8016e80:	00db      	lsls	r3, r3, #3
 8016e82:	440b      	add	r3, r1
 8016e84:	3314      	adds	r3, #20
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016e8a:	7afb      	ldrb	r3, [r7, #11]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d00e      	beq.n	8016eae <etharp_cleanup_netif+0x46>
 8016e90:	490c      	ldr	r1, [pc, #48]	; (8016ec4 <etharp_cleanup_netif+0x5c>)
 8016e92:	68fa      	ldr	r2, [r7, #12]
 8016e94:	4613      	mov	r3, r2
 8016e96:	005b      	lsls	r3, r3, #1
 8016e98:	4413      	add	r3, r2
 8016e9a:	00db      	lsls	r3, r3, #3
 8016e9c:	440b      	add	r3, r1
 8016e9e:	3308      	adds	r3, #8
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	687a      	ldr	r2, [r7, #4]
 8016ea4:	429a      	cmp	r2, r3
 8016ea6:	d102      	bne.n	8016eae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016ea8:	68f8      	ldr	r0, [r7, #12]
 8016eaa:	f7ff fce5 	bl	8016878 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	3301      	adds	r3, #1
 8016eb2:	60fb      	str	r3, [r7, #12]
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	2b09      	cmp	r3, #9
 8016eb8:	dddd      	ble.n	8016e76 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016eba:	bf00      	nop
 8016ebc:	bf00      	nop
 8016ebe:	3710      	adds	r7, #16
 8016ec0:	46bd      	mov	sp, r7
 8016ec2:	bd80      	pop	{r7, pc}
 8016ec4:	200214ec 	.word	0x200214ec

08016ec8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016ec8:	b5b0      	push	{r4, r5, r7, lr}
 8016eca:	b08a      	sub	sp, #40	; 0x28
 8016ecc:	af04      	add	r7, sp, #16
 8016ece:	6078      	str	r0, [r7, #4]
 8016ed0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d107      	bne.n	8016ee8 <etharp_input+0x20>
 8016ed8:	4b3f      	ldr	r3, [pc, #252]	; (8016fd8 <etharp_input+0x110>)
 8016eda:	f240 228a 	movw	r2, #650	; 0x28a
 8016ede:	493f      	ldr	r1, [pc, #252]	; (8016fdc <etharp_input+0x114>)
 8016ee0:	483f      	ldr	r0, [pc, #252]	; (8016fe0 <etharp_input+0x118>)
 8016ee2:	f003 fa25 	bl	801a330 <iprintf>
 8016ee6:	e074      	b.n	8016fd2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016ee8:	687b      	ldr	r3, [r7, #4]
 8016eea:	685b      	ldr	r3, [r3, #4]
 8016eec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	881b      	ldrh	r3, [r3, #0]
 8016ef2:	b29b      	uxth	r3, r3
 8016ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ef8:	d10c      	bne.n	8016f14 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016efa:	693b      	ldr	r3, [r7, #16]
 8016efc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016efe:	2b06      	cmp	r3, #6
 8016f00:	d108      	bne.n	8016f14 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016f02:	693b      	ldr	r3, [r7, #16]
 8016f04:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016f06:	2b04      	cmp	r3, #4
 8016f08:	d104      	bne.n	8016f14 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016f0a:	693b      	ldr	r3, [r7, #16]
 8016f0c:	885b      	ldrh	r3, [r3, #2]
 8016f0e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016f10:	2b08      	cmp	r3, #8
 8016f12:	d003      	beq.n	8016f1c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016f14:	6878      	ldr	r0, [r7, #4]
 8016f16:	f7f6 fa37 	bl	800d388 <pbuf_free>
    return;
 8016f1a:	e05a      	b.n	8016fd2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016f1c:	693b      	ldr	r3, [r7, #16]
 8016f1e:	330e      	adds	r3, #14
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016f24:	693b      	ldr	r3, [r7, #16]
 8016f26:	3318      	adds	r3, #24
 8016f28:	681b      	ldr	r3, [r3, #0]
 8016f2a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	3304      	adds	r3, #4
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d102      	bne.n	8016f3c <etharp_input+0x74>
    for_us = 0;
 8016f36:	2300      	movs	r3, #0
 8016f38:	75fb      	strb	r3, [r7, #23]
 8016f3a:	e009      	b.n	8016f50 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016f3c:	68ba      	ldr	r2, [r7, #8]
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	3304      	adds	r3, #4
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	bf0c      	ite	eq
 8016f48:	2301      	moveq	r3, #1
 8016f4a:	2300      	movne	r3, #0
 8016f4c:	b2db      	uxtb	r3, r3
 8016f4e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016f50:	693b      	ldr	r3, [r7, #16]
 8016f52:	f103 0208 	add.w	r2, r3, #8
 8016f56:	7dfb      	ldrb	r3, [r7, #23]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d001      	beq.n	8016f60 <etharp_input+0x98>
 8016f5c:	2301      	movs	r3, #1
 8016f5e:	e000      	b.n	8016f62 <etharp_input+0x9a>
 8016f60:	2302      	movs	r3, #2
 8016f62:	f107 010c 	add.w	r1, r7, #12
 8016f66:	6838      	ldr	r0, [r7, #0]
 8016f68:	f7ff fed8 	bl	8016d1c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016f6c:	693b      	ldr	r3, [r7, #16]
 8016f6e:	88db      	ldrh	r3, [r3, #6]
 8016f70:	b29b      	uxth	r3, r3
 8016f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f76:	d003      	beq.n	8016f80 <etharp_input+0xb8>
 8016f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016f7c:	d01e      	beq.n	8016fbc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016f7e:	e025      	b.n	8016fcc <etharp_input+0x104>
      if (for_us) {
 8016f80:	7dfb      	ldrb	r3, [r7, #23]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d021      	beq.n	8016fca <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016f8c:	693b      	ldr	r3, [r7, #16]
 8016f8e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016f92:	683b      	ldr	r3, [r7, #0]
 8016f94:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016f9c:	693a      	ldr	r2, [r7, #16]
 8016f9e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016fa0:	2102      	movs	r1, #2
 8016fa2:	9103      	str	r1, [sp, #12]
 8016fa4:	f107 010c 	add.w	r1, r7, #12
 8016fa8:	9102      	str	r1, [sp, #8]
 8016faa:	9201      	str	r2, [sp, #4]
 8016fac:	9300      	str	r3, [sp, #0]
 8016fae:	462b      	mov	r3, r5
 8016fb0:	4622      	mov	r2, r4
 8016fb2:	4601      	mov	r1, r0
 8016fb4:	6838      	ldr	r0, [r7, #0]
 8016fb6:	f000 faef 	bl	8017598 <etharp_raw>
      break;
 8016fba:	e006      	b.n	8016fca <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016fbc:	f107 030c 	add.w	r3, r7, #12
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	6838      	ldr	r0, [r7, #0]
 8016fc4:	f7fe f9cc 	bl	8015360 <dhcp_arp_reply>
      break;
 8016fc8:	e000      	b.n	8016fcc <etharp_input+0x104>
      break;
 8016fca:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7f6 f9db 	bl	800d388 <pbuf_free>
}
 8016fd2:	3718      	adds	r7, #24
 8016fd4:	46bd      	mov	sp, r7
 8016fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8016fd8:	08021bf4 	.word	0x08021bf4
 8016fdc:	08021d44 	.word	0x08021d44
 8016fe0:	08021c6c 	.word	0x08021c6c

08016fe4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b086      	sub	sp, #24
 8016fe8:	af02      	add	r7, sp, #8
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	60b9      	str	r1, [r7, #8]
 8016fee:	4613      	mov	r3, r2
 8016ff0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016ff2:	79fa      	ldrb	r2, [r7, #7]
 8016ff4:	4944      	ldr	r1, [pc, #272]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8016ff6:	4613      	mov	r3, r2
 8016ff8:	005b      	lsls	r3, r3, #1
 8016ffa:	4413      	add	r3, r2
 8016ffc:	00db      	lsls	r3, r3, #3
 8016ffe:	440b      	add	r3, r1
 8017000:	3314      	adds	r3, #20
 8017002:	781b      	ldrb	r3, [r3, #0]
 8017004:	2b01      	cmp	r3, #1
 8017006:	d806      	bhi.n	8017016 <etharp_output_to_arp_index+0x32>
 8017008:	4b40      	ldr	r3, [pc, #256]	; (801710c <etharp_output_to_arp_index+0x128>)
 801700a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801700e:	4940      	ldr	r1, [pc, #256]	; (8017110 <etharp_output_to_arp_index+0x12c>)
 8017010:	4840      	ldr	r0, [pc, #256]	; (8017114 <etharp_output_to_arp_index+0x130>)
 8017012:	f003 f98d 	bl	801a330 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017016:	79fa      	ldrb	r2, [r7, #7]
 8017018:	493b      	ldr	r1, [pc, #236]	; (8017108 <etharp_output_to_arp_index+0x124>)
 801701a:	4613      	mov	r3, r2
 801701c:	005b      	lsls	r3, r3, #1
 801701e:	4413      	add	r3, r2
 8017020:	00db      	lsls	r3, r3, #3
 8017022:	440b      	add	r3, r1
 8017024:	3314      	adds	r3, #20
 8017026:	781b      	ldrb	r3, [r3, #0]
 8017028:	2b02      	cmp	r3, #2
 801702a:	d153      	bne.n	80170d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801702c:	79fa      	ldrb	r2, [r7, #7]
 801702e:	4936      	ldr	r1, [pc, #216]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	3312      	adds	r3, #18
 801703c:	881b      	ldrh	r3, [r3, #0]
 801703e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017042:	d919      	bls.n	8017078 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017044:	79fa      	ldrb	r2, [r7, #7]
 8017046:	4613      	mov	r3, r2
 8017048:	005b      	lsls	r3, r3, #1
 801704a:	4413      	add	r3, r2
 801704c:	00db      	lsls	r3, r3, #3
 801704e:	4a2e      	ldr	r2, [pc, #184]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8017050:	4413      	add	r3, r2
 8017052:	3304      	adds	r3, #4
 8017054:	4619      	mov	r1, r3
 8017056:	68f8      	ldr	r0, [r7, #12]
 8017058:	f000 fb4c 	bl	80176f4 <etharp_request>
 801705c:	4603      	mov	r3, r0
 801705e:	2b00      	cmp	r3, #0
 8017060:	d138      	bne.n	80170d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017062:	79fa      	ldrb	r2, [r7, #7]
 8017064:	4928      	ldr	r1, [pc, #160]	; (8017108 <etharp_output_to_arp_index+0x124>)
 8017066:	4613      	mov	r3, r2
 8017068:	005b      	lsls	r3, r3, #1
 801706a:	4413      	add	r3, r2
 801706c:	00db      	lsls	r3, r3, #3
 801706e:	440b      	add	r3, r1
 8017070:	3314      	adds	r3, #20
 8017072:	2203      	movs	r2, #3
 8017074:	701a      	strb	r2, [r3, #0]
 8017076:	e02d      	b.n	80170d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017078:	79fa      	ldrb	r2, [r7, #7]
 801707a:	4923      	ldr	r1, [pc, #140]	; (8017108 <etharp_output_to_arp_index+0x124>)
 801707c:	4613      	mov	r3, r2
 801707e:	005b      	lsls	r3, r3, #1
 8017080:	4413      	add	r3, r2
 8017082:	00db      	lsls	r3, r3, #3
 8017084:	440b      	add	r3, r1
 8017086:	3312      	adds	r3, #18
 8017088:	881b      	ldrh	r3, [r3, #0]
 801708a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801708e:	d321      	bcc.n	80170d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017090:	79fa      	ldrb	r2, [r7, #7]
 8017092:	4613      	mov	r3, r2
 8017094:	005b      	lsls	r3, r3, #1
 8017096:	4413      	add	r3, r2
 8017098:	00db      	lsls	r3, r3, #3
 801709a:	4a1b      	ldr	r2, [pc, #108]	; (8017108 <etharp_output_to_arp_index+0x124>)
 801709c:	4413      	add	r3, r2
 801709e:	1d19      	adds	r1, r3, #4
 80170a0:	79fa      	ldrb	r2, [r7, #7]
 80170a2:	4613      	mov	r3, r2
 80170a4:	005b      	lsls	r3, r3, #1
 80170a6:	4413      	add	r3, r2
 80170a8:	00db      	lsls	r3, r3, #3
 80170aa:	3308      	adds	r3, #8
 80170ac:	4a16      	ldr	r2, [pc, #88]	; (8017108 <etharp_output_to_arp_index+0x124>)
 80170ae:	4413      	add	r3, r2
 80170b0:	3304      	adds	r3, #4
 80170b2:	461a      	mov	r2, r3
 80170b4:	68f8      	ldr	r0, [r7, #12]
 80170b6:	f000 fafb 	bl	80176b0 <etharp_request_dst>
 80170ba:	4603      	mov	r3, r0
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d109      	bne.n	80170d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80170c0:	79fa      	ldrb	r2, [r7, #7]
 80170c2:	4911      	ldr	r1, [pc, #68]	; (8017108 <etharp_output_to_arp_index+0x124>)
 80170c4:	4613      	mov	r3, r2
 80170c6:	005b      	lsls	r3, r3, #1
 80170c8:	4413      	add	r3, r2
 80170ca:	00db      	lsls	r3, r3, #3
 80170cc:	440b      	add	r3, r1
 80170ce:	3314      	adds	r3, #20
 80170d0:	2203      	movs	r2, #3
 80170d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80170da:	79fa      	ldrb	r2, [r7, #7]
 80170dc:	4613      	mov	r3, r2
 80170de:	005b      	lsls	r3, r3, #1
 80170e0:	4413      	add	r3, r2
 80170e2:	00db      	lsls	r3, r3, #3
 80170e4:	3308      	adds	r3, #8
 80170e6:	4a08      	ldr	r2, [pc, #32]	; (8017108 <etharp_output_to_arp_index+0x124>)
 80170e8:	4413      	add	r3, r2
 80170ea:	3304      	adds	r3, #4
 80170ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80170f0:	9200      	str	r2, [sp, #0]
 80170f2:	460a      	mov	r2, r1
 80170f4:	68b9      	ldr	r1, [r7, #8]
 80170f6:	68f8      	ldr	r0, [r7, #12]
 80170f8:	f002 f814 	bl	8019124 <ethernet_output>
 80170fc:	4603      	mov	r3, r0
}
 80170fe:	4618      	mov	r0, r3
 8017100:	3710      	adds	r7, #16
 8017102:	46bd      	mov	sp, r7
 8017104:	bd80      	pop	{r7, pc}
 8017106:	bf00      	nop
 8017108:	200214ec 	.word	0x200214ec
 801710c:	08021bf4 	.word	0x08021bf4
 8017110:	08021d64 	.word	0x08021d64
 8017114:	08021c6c 	.word	0x08021c6c

08017118 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b08a      	sub	sp, #40	; 0x28
 801711c:	af02      	add	r7, sp, #8
 801711e:	60f8      	str	r0, [r7, #12]
 8017120:	60b9      	str	r1, [r7, #8]
 8017122:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d106      	bne.n	801713c <etharp_output+0x24>
 801712e:	4b73      	ldr	r3, [pc, #460]	; (80172fc <etharp_output+0x1e4>)
 8017130:	f240 321e 	movw	r2, #798	; 0x31e
 8017134:	4972      	ldr	r1, [pc, #456]	; (8017300 <etharp_output+0x1e8>)
 8017136:	4873      	ldr	r0, [pc, #460]	; (8017304 <etharp_output+0x1ec>)
 8017138:	f003 f8fa 	bl	801a330 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d106      	bne.n	8017150 <etharp_output+0x38>
 8017142:	4b6e      	ldr	r3, [pc, #440]	; (80172fc <etharp_output+0x1e4>)
 8017144:	f240 321f 	movw	r2, #799	; 0x31f
 8017148:	496f      	ldr	r1, [pc, #444]	; (8017308 <etharp_output+0x1f0>)
 801714a:	486e      	ldr	r0, [pc, #440]	; (8017304 <etharp_output+0x1ec>)
 801714c:	f003 f8f0 	bl	801a330 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d106      	bne.n	8017164 <etharp_output+0x4c>
 8017156:	4b69      	ldr	r3, [pc, #420]	; (80172fc <etharp_output+0x1e4>)
 8017158:	f44f 7248 	mov.w	r2, #800	; 0x320
 801715c:	496b      	ldr	r1, [pc, #428]	; (801730c <etharp_output+0x1f4>)
 801715e:	4869      	ldr	r0, [pc, #420]	; (8017304 <etharp_output+0x1ec>)
 8017160:	f003 f8e6 	bl	801a330 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	68f9      	ldr	r1, [r7, #12]
 801716a:	4618      	mov	r0, r3
 801716c:	f000 ff16 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 8017170:	4603      	mov	r3, r0
 8017172:	2b00      	cmp	r3, #0
 8017174:	d002      	beq.n	801717c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017176:	4b66      	ldr	r3, [pc, #408]	; (8017310 <etharp_output+0x1f8>)
 8017178:	61fb      	str	r3, [r7, #28]
 801717a:	e0af      	b.n	80172dc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017184:	2be0      	cmp	r3, #224	; 0xe0
 8017186:	d118      	bne.n	80171ba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017188:	2301      	movs	r3, #1
 801718a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801718c:	2300      	movs	r3, #0
 801718e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017190:	235e      	movs	r3, #94	; 0x5e
 8017192:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	3301      	adds	r3, #1
 8017198:	781b      	ldrb	r3, [r3, #0]
 801719a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	3302      	adds	r3, #2
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	3303      	adds	r3, #3
 80171ae:	781b      	ldrb	r3, [r3, #0]
 80171b0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80171b2:	f107 0310 	add.w	r3, r7, #16
 80171b6:	61fb      	str	r3, [r7, #28]
 80171b8:	e090      	b.n	80172dc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	3304      	adds	r3, #4
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	405a      	eors	r2, r3
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	3308      	adds	r3, #8
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	4013      	ands	r3, r2
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d012      	beq.n	80171f8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80171d8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80171dc:	4293      	cmp	r3, r2
 80171de:	d00b      	beq.n	80171f8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	330c      	adds	r3, #12
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d003      	beq.n	80171f2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	330c      	adds	r3, #12
 80171ee:	61bb      	str	r3, [r7, #24]
 80171f0:	e002      	b.n	80171f8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80171f2:	f06f 0303 	mvn.w	r3, #3
 80171f6:	e07d      	b.n	80172f4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80171f8:	4b46      	ldr	r3, [pc, #280]	; (8017314 <etharp_output+0x1fc>)
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	4619      	mov	r1, r3
 80171fe:	4a46      	ldr	r2, [pc, #280]	; (8017318 <etharp_output+0x200>)
 8017200:	460b      	mov	r3, r1
 8017202:	005b      	lsls	r3, r3, #1
 8017204:	440b      	add	r3, r1
 8017206:	00db      	lsls	r3, r3, #3
 8017208:	4413      	add	r3, r2
 801720a:	3314      	adds	r3, #20
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	2b01      	cmp	r3, #1
 8017210:	d925      	bls.n	801725e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017212:	4b40      	ldr	r3, [pc, #256]	; (8017314 <etharp_output+0x1fc>)
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	4619      	mov	r1, r3
 8017218:	4a3f      	ldr	r2, [pc, #252]	; (8017318 <etharp_output+0x200>)
 801721a:	460b      	mov	r3, r1
 801721c:	005b      	lsls	r3, r3, #1
 801721e:	440b      	add	r3, r1
 8017220:	00db      	lsls	r3, r3, #3
 8017222:	4413      	add	r3, r2
 8017224:	3308      	adds	r3, #8
 8017226:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017228:	68fa      	ldr	r2, [r7, #12]
 801722a:	429a      	cmp	r2, r3
 801722c:	d117      	bne.n	801725e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801722e:	69bb      	ldr	r3, [r7, #24]
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	4b38      	ldr	r3, [pc, #224]	; (8017314 <etharp_output+0x1fc>)
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	4618      	mov	r0, r3
 8017238:	4937      	ldr	r1, [pc, #220]	; (8017318 <etharp_output+0x200>)
 801723a:	4603      	mov	r3, r0
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	4403      	add	r3, r0
 8017240:	00db      	lsls	r3, r3, #3
 8017242:	440b      	add	r3, r1
 8017244:	3304      	adds	r3, #4
 8017246:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017248:	429a      	cmp	r2, r3
 801724a:	d108      	bne.n	801725e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801724c:	4b31      	ldr	r3, [pc, #196]	; (8017314 <etharp_output+0x1fc>)
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	461a      	mov	r2, r3
 8017252:	68b9      	ldr	r1, [r7, #8]
 8017254:	68f8      	ldr	r0, [r7, #12]
 8017256:	f7ff fec5 	bl	8016fe4 <etharp_output_to_arp_index>
 801725a:	4603      	mov	r3, r0
 801725c:	e04a      	b.n	80172f4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801725e:	2300      	movs	r3, #0
 8017260:	75fb      	strb	r3, [r7, #23]
 8017262:	e031      	b.n	80172c8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017264:	7dfa      	ldrb	r2, [r7, #23]
 8017266:	492c      	ldr	r1, [pc, #176]	; (8017318 <etharp_output+0x200>)
 8017268:	4613      	mov	r3, r2
 801726a:	005b      	lsls	r3, r3, #1
 801726c:	4413      	add	r3, r2
 801726e:	00db      	lsls	r3, r3, #3
 8017270:	440b      	add	r3, r1
 8017272:	3314      	adds	r3, #20
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	2b01      	cmp	r3, #1
 8017278:	d923      	bls.n	80172c2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801727a:	7dfa      	ldrb	r2, [r7, #23]
 801727c:	4926      	ldr	r1, [pc, #152]	; (8017318 <etharp_output+0x200>)
 801727e:	4613      	mov	r3, r2
 8017280:	005b      	lsls	r3, r3, #1
 8017282:	4413      	add	r3, r2
 8017284:	00db      	lsls	r3, r3, #3
 8017286:	440b      	add	r3, r1
 8017288:	3308      	adds	r3, #8
 801728a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801728c:	68fa      	ldr	r2, [r7, #12]
 801728e:	429a      	cmp	r2, r3
 8017290:	d117      	bne.n	80172c2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017292:	69bb      	ldr	r3, [r7, #24]
 8017294:	6819      	ldr	r1, [r3, #0]
 8017296:	7dfa      	ldrb	r2, [r7, #23]
 8017298:	481f      	ldr	r0, [pc, #124]	; (8017318 <etharp_output+0x200>)
 801729a:	4613      	mov	r3, r2
 801729c:	005b      	lsls	r3, r3, #1
 801729e:	4413      	add	r3, r2
 80172a0:	00db      	lsls	r3, r3, #3
 80172a2:	4403      	add	r3, r0
 80172a4:	3304      	adds	r3, #4
 80172a6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80172a8:	4299      	cmp	r1, r3
 80172aa:	d10a      	bne.n	80172c2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80172ac:	4a19      	ldr	r2, [pc, #100]	; (8017314 <etharp_output+0x1fc>)
 80172ae:	7dfb      	ldrb	r3, [r7, #23]
 80172b0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80172b2:	7dfb      	ldrb	r3, [r7, #23]
 80172b4:	461a      	mov	r2, r3
 80172b6:	68b9      	ldr	r1, [r7, #8]
 80172b8:	68f8      	ldr	r0, [r7, #12]
 80172ba:	f7ff fe93 	bl	8016fe4 <etharp_output_to_arp_index>
 80172be:	4603      	mov	r3, r0
 80172c0:	e018      	b.n	80172f4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80172c2:	7dfb      	ldrb	r3, [r7, #23]
 80172c4:	3301      	adds	r3, #1
 80172c6:	75fb      	strb	r3, [r7, #23]
 80172c8:	7dfb      	ldrb	r3, [r7, #23]
 80172ca:	2b09      	cmp	r3, #9
 80172cc:	d9ca      	bls.n	8017264 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80172ce:	68ba      	ldr	r2, [r7, #8]
 80172d0:	69b9      	ldr	r1, [r7, #24]
 80172d2:	68f8      	ldr	r0, [r7, #12]
 80172d4:	f000 f822 	bl	801731c <etharp_query>
 80172d8:	4603      	mov	r3, r0
 80172da:	e00b      	b.n	80172f4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80172e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80172e6:	9300      	str	r3, [sp, #0]
 80172e8:	69fb      	ldr	r3, [r7, #28]
 80172ea:	68b9      	ldr	r1, [r7, #8]
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f001 ff19 	bl	8019124 <ethernet_output>
 80172f2:	4603      	mov	r3, r0
}
 80172f4:	4618      	mov	r0, r3
 80172f6:	3720      	adds	r7, #32
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}
 80172fc:	08021bf4 	.word	0x08021bf4
 8017300:	08021d44 	.word	0x08021d44
 8017304:	08021c6c 	.word	0x08021c6c
 8017308:	08021d94 	.word	0x08021d94
 801730c:	08021d34 	.word	0x08021d34
 8017310:	08022490 	.word	0x08022490
 8017314:	200215dc 	.word	0x200215dc
 8017318:	200214ec 	.word	0x200214ec

0801731c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b08c      	sub	sp, #48	; 0x30
 8017320:	af02      	add	r7, sp, #8
 8017322:	60f8      	str	r0, [r7, #12]
 8017324:	60b9      	str	r1, [r7, #8]
 8017326:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	332a      	adds	r3, #42	; 0x2a
 801732c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801732e:	23ff      	movs	r3, #255	; 0xff
 8017330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017334:	2300      	movs	r3, #0
 8017336:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017338:	68bb      	ldr	r3, [r7, #8]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	68f9      	ldr	r1, [r7, #12]
 801733e:	4618      	mov	r0, r3
 8017340:	f000 fe2c 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 8017344:	4603      	mov	r3, r0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d10c      	bne.n	8017364 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801734a:	68bb      	ldr	r3, [r7, #8]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017352:	2be0      	cmp	r3, #224	; 0xe0
 8017354:	d006      	beq.n	8017364 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017356:	68bb      	ldr	r3, [r7, #8]
 8017358:	2b00      	cmp	r3, #0
 801735a:	d003      	beq.n	8017364 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d102      	bne.n	801736a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017364:	f06f 030f 	mvn.w	r3, #15
 8017368:	e101      	b.n	801756e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801736a:	68fa      	ldr	r2, [r7, #12]
 801736c:	2101      	movs	r1, #1
 801736e:	68b8      	ldr	r0, [r7, #8]
 8017370:	f7ff fb5c 	bl	8016a2c <etharp_find_entry>
 8017374:	4603      	mov	r3, r0
 8017376:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017378:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801737c:	2b00      	cmp	r3, #0
 801737e:	da02      	bge.n	8017386 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017380:	8a7b      	ldrh	r3, [r7, #18]
 8017382:	b25b      	sxtb	r3, r3
 8017384:	e0f3      	b.n	801756e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017386:	8a7b      	ldrh	r3, [r7, #18]
 8017388:	2b7e      	cmp	r3, #126	; 0x7e
 801738a:	d906      	bls.n	801739a <etharp_query+0x7e>
 801738c:	4b7a      	ldr	r3, [pc, #488]	; (8017578 <etharp_query+0x25c>)
 801738e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017392:	497a      	ldr	r1, [pc, #488]	; (801757c <etharp_query+0x260>)
 8017394:	487a      	ldr	r0, [pc, #488]	; (8017580 <etharp_query+0x264>)
 8017396:	f002 ffcb 	bl	801a330 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801739a:	8a7b      	ldrh	r3, [r7, #18]
 801739c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801739e:	7c7a      	ldrb	r2, [r7, #17]
 80173a0:	4978      	ldr	r1, [pc, #480]	; (8017584 <etharp_query+0x268>)
 80173a2:	4613      	mov	r3, r2
 80173a4:	005b      	lsls	r3, r3, #1
 80173a6:	4413      	add	r3, r2
 80173a8:	00db      	lsls	r3, r3, #3
 80173aa:	440b      	add	r3, r1
 80173ac:	3314      	adds	r3, #20
 80173ae:	781b      	ldrb	r3, [r3, #0]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d115      	bne.n	80173e0 <etharp_query+0xc4>
    is_new_entry = 1;
 80173b4:	2301      	movs	r3, #1
 80173b6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80173b8:	7c7a      	ldrb	r2, [r7, #17]
 80173ba:	4972      	ldr	r1, [pc, #456]	; (8017584 <etharp_query+0x268>)
 80173bc:	4613      	mov	r3, r2
 80173be:	005b      	lsls	r3, r3, #1
 80173c0:	4413      	add	r3, r2
 80173c2:	00db      	lsls	r3, r3, #3
 80173c4:	440b      	add	r3, r1
 80173c6:	3314      	adds	r3, #20
 80173c8:	2201      	movs	r2, #1
 80173ca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80173cc:	7c7a      	ldrb	r2, [r7, #17]
 80173ce:	496d      	ldr	r1, [pc, #436]	; (8017584 <etharp_query+0x268>)
 80173d0:	4613      	mov	r3, r2
 80173d2:	005b      	lsls	r3, r3, #1
 80173d4:	4413      	add	r3, r2
 80173d6:	00db      	lsls	r3, r3, #3
 80173d8:	440b      	add	r3, r1
 80173da:	3308      	adds	r3, #8
 80173dc:	68fa      	ldr	r2, [r7, #12]
 80173de:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80173e0:	7c7a      	ldrb	r2, [r7, #17]
 80173e2:	4968      	ldr	r1, [pc, #416]	; (8017584 <etharp_query+0x268>)
 80173e4:	4613      	mov	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	440b      	add	r3, r1
 80173ee:	3314      	adds	r3, #20
 80173f0:	781b      	ldrb	r3, [r3, #0]
 80173f2:	2b01      	cmp	r3, #1
 80173f4:	d011      	beq.n	801741a <etharp_query+0xfe>
 80173f6:	7c7a      	ldrb	r2, [r7, #17]
 80173f8:	4962      	ldr	r1, [pc, #392]	; (8017584 <etharp_query+0x268>)
 80173fa:	4613      	mov	r3, r2
 80173fc:	005b      	lsls	r3, r3, #1
 80173fe:	4413      	add	r3, r2
 8017400:	00db      	lsls	r3, r3, #3
 8017402:	440b      	add	r3, r1
 8017404:	3314      	adds	r3, #20
 8017406:	781b      	ldrb	r3, [r3, #0]
 8017408:	2b01      	cmp	r3, #1
 801740a:	d806      	bhi.n	801741a <etharp_query+0xfe>
 801740c:	4b5a      	ldr	r3, [pc, #360]	; (8017578 <etharp_query+0x25c>)
 801740e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017412:	495d      	ldr	r1, [pc, #372]	; (8017588 <etharp_query+0x26c>)
 8017414:	485a      	ldr	r0, [pc, #360]	; (8017580 <etharp_query+0x264>)
 8017416:	f002 ff8b 	bl	801a330 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801741a:	6a3b      	ldr	r3, [r7, #32]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d102      	bne.n	8017426 <etharp_query+0x10a>
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d10c      	bne.n	8017440 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017426:	68b9      	ldr	r1, [r7, #8]
 8017428:	68f8      	ldr	r0, [r7, #12]
 801742a:	f000 f963 	bl	80176f4 <etharp_request>
 801742e:	4603      	mov	r3, r0
 8017430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d102      	bne.n	8017440 <etharp_query+0x124>
      return result;
 801743a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801743e:	e096      	b.n	801756e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d106      	bne.n	8017454 <etharp_query+0x138>
 8017446:	4b4c      	ldr	r3, [pc, #304]	; (8017578 <etharp_query+0x25c>)
 8017448:	f240 32e1 	movw	r2, #993	; 0x3e1
 801744c:	494f      	ldr	r1, [pc, #316]	; (801758c <etharp_query+0x270>)
 801744e:	484c      	ldr	r0, [pc, #304]	; (8017580 <etharp_query+0x264>)
 8017450:	f002 ff6e 	bl	801a330 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017454:	7c7a      	ldrb	r2, [r7, #17]
 8017456:	494b      	ldr	r1, [pc, #300]	; (8017584 <etharp_query+0x268>)
 8017458:	4613      	mov	r3, r2
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	4413      	add	r3, r2
 801745e:	00db      	lsls	r3, r3, #3
 8017460:	440b      	add	r3, r1
 8017462:	3314      	adds	r3, #20
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	2b01      	cmp	r3, #1
 8017468:	d917      	bls.n	801749a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801746a:	4a49      	ldr	r2, [pc, #292]	; (8017590 <etharp_query+0x274>)
 801746c:	7c7b      	ldrb	r3, [r7, #17]
 801746e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017470:	7c7a      	ldrb	r2, [r7, #17]
 8017472:	4613      	mov	r3, r2
 8017474:	005b      	lsls	r3, r3, #1
 8017476:	4413      	add	r3, r2
 8017478:	00db      	lsls	r3, r3, #3
 801747a:	3308      	adds	r3, #8
 801747c:	4a41      	ldr	r2, [pc, #260]	; (8017584 <etharp_query+0x268>)
 801747e:	4413      	add	r3, r2
 8017480:	3304      	adds	r3, #4
 8017482:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017486:	9200      	str	r2, [sp, #0]
 8017488:	697a      	ldr	r2, [r7, #20]
 801748a:	6879      	ldr	r1, [r7, #4]
 801748c:	68f8      	ldr	r0, [r7, #12]
 801748e:	f001 fe49 	bl	8019124 <ethernet_output>
 8017492:	4603      	mov	r3, r0
 8017494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017498:	e067      	b.n	801756a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801749a:	7c7a      	ldrb	r2, [r7, #17]
 801749c:	4939      	ldr	r1, [pc, #228]	; (8017584 <etharp_query+0x268>)
 801749e:	4613      	mov	r3, r2
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4413      	add	r3, r2
 80174a4:	00db      	lsls	r3, r3, #3
 80174a6:	440b      	add	r3, r1
 80174a8:	3314      	adds	r3, #20
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	2b01      	cmp	r3, #1
 80174ae:	d15c      	bne.n	801756a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80174b0:	2300      	movs	r3, #0
 80174b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174b8:	e01c      	b.n	80174f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80174ba:	69fb      	ldr	r3, [r7, #28]
 80174bc:	895a      	ldrh	r2, [r3, #10]
 80174be:	69fb      	ldr	r3, [r7, #28]
 80174c0:	891b      	ldrh	r3, [r3, #8]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d10a      	bne.n	80174dc <etharp_query+0x1c0>
 80174c6:	69fb      	ldr	r3, [r7, #28]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d006      	beq.n	80174dc <etharp_query+0x1c0>
 80174ce:	4b2a      	ldr	r3, [pc, #168]	; (8017578 <etharp_query+0x25c>)
 80174d0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80174d4:	492f      	ldr	r1, [pc, #188]	; (8017594 <etharp_query+0x278>)
 80174d6:	482a      	ldr	r0, [pc, #168]	; (8017580 <etharp_query+0x264>)
 80174d8:	f002 ff2a 	bl	801a330 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	7b1b      	ldrb	r3, [r3, #12]
 80174e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d002      	beq.n	80174ee <etharp_query+0x1d2>
        copy_needed = 1;
 80174e8:	2301      	movs	r3, #1
 80174ea:	61bb      	str	r3, [r7, #24]
        break;
 80174ec:	e005      	b.n	80174fa <etharp_query+0x1de>
      }
      p = p->next;
 80174ee:	69fb      	ldr	r3, [r7, #28]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80174f4:	69fb      	ldr	r3, [r7, #28]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d1df      	bne.n	80174ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 80174fa:	69bb      	ldr	r3, [r7, #24]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d007      	beq.n	8017510 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017500:	687a      	ldr	r2, [r7, #4]
 8017502:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017506:	200e      	movs	r0, #14
 8017508:	f7f6 faee 	bl	800dae8 <pbuf_clone>
 801750c:	61f8      	str	r0, [r7, #28]
 801750e:	e004      	b.n	801751a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017514:	69f8      	ldr	r0, [r7, #28]
 8017516:	f7f5 ffdd 	bl	800d4d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801751a:	69fb      	ldr	r3, [r7, #28]
 801751c:	2b00      	cmp	r3, #0
 801751e:	d021      	beq.n	8017564 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017520:	7c7a      	ldrb	r2, [r7, #17]
 8017522:	4918      	ldr	r1, [pc, #96]	; (8017584 <etharp_query+0x268>)
 8017524:	4613      	mov	r3, r2
 8017526:	005b      	lsls	r3, r3, #1
 8017528:	4413      	add	r3, r2
 801752a:	00db      	lsls	r3, r3, #3
 801752c:	440b      	add	r3, r1
 801752e:	681b      	ldr	r3, [r3, #0]
 8017530:	2b00      	cmp	r3, #0
 8017532:	d00a      	beq.n	801754a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017534:	7c7a      	ldrb	r2, [r7, #17]
 8017536:	4913      	ldr	r1, [pc, #76]	; (8017584 <etharp_query+0x268>)
 8017538:	4613      	mov	r3, r2
 801753a:	005b      	lsls	r3, r3, #1
 801753c:	4413      	add	r3, r2
 801753e:	00db      	lsls	r3, r3, #3
 8017540:	440b      	add	r3, r1
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	4618      	mov	r0, r3
 8017546:	f7f5 ff1f 	bl	800d388 <pbuf_free>
      }
      arp_table[i].q = p;
 801754a:	7c7a      	ldrb	r2, [r7, #17]
 801754c:	490d      	ldr	r1, [pc, #52]	; (8017584 <etharp_query+0x268>)
 801754e:	4613      	mov	r3, r2
 8017550:	005b      	lsls	r3, r3, #1
 8017552:	4413      	add	r3, r2
 8017554:	00db      	lsls	r3, r3, #3
 8017556:	440b      	add	r3, r1
 8017558:	69fa      	ldr	r2, [r7, #28]
 801755a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801755c:	2300      	movs	r3, #0
 801755e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017562:	e002      	b.n	801756a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017564:	23ff      	movs	r3, #255	; 0xff
 8017566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801756a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801756e:	4618      	mov	r0, r3
 8017570:	3728      	adds	r7, #40	; 0x28
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}
 8017576:	bf00      	nop
 8017578:	08021bf4 	.word	0x08021bf4
 801757c:	08021da0 	.word	0x08021da0
 8017580:	08021c6c 	.word	0x08021c6c
 8017584:	200214ec 	.word	0x200214ec
 8017588:	08021db0 	.word	0x08021db0
 801758c:	08021d94 	.word	0x08021d94
 8017590:	200215dc 	.word	0x200215dc
 8017594:	08021dd8 	.word	0x08021dd8

08017598 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b08a      	sub	sp, #40	; 0x28
 801759c:	af02      	add	r7, sp, #8
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	60b9      	str	r1, [r7, #8]
 80175a2:	607a      	str	r2, [r7, #4]
 80175a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80175a6:	2300      	movs	r3, #0
 80175a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d106      	bne.n	80175be <etharp_raw+0x26>
 80175b0:	4b3a      	ldr	r3, [pc, #232]	; (801769c <etharp_raw+0x104>)
 80175b2:	f240 4257 	movw	r2, #1111	; 0x457
 80175b6:	493a      	ldr	r1, [pc, #232]	; (80176a0 <etharp_raw+0x108>)
 80175b8:	483a      	ldr	r0, [pc, #232]	; (80176a4 <etharp_raw+0x10c>)
 80175ba:	f002 feb9 	bl	801a330 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80175be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175c2:	211c      	movs	r1, #28
 80175c4:	200e      	movs	r0, #14
 80175c6:	f7f5 fbfb 	bl	800cdc0 <pbuf_alloc>
 80175ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80175cc:	69bb      	ldr	r3, [r7, #24]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d102      	bne.n	80175d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80175d2:	f04f 33ff 	mov.w	r3, #4294967295
 80175d6:	e05d      	b.n	8017694 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80175d8:	69bb      	ldr	r3, [r7, #24]
 80175da:	895b      	ldrh	r3, [r3, #10]
 80175dc:	2b1b      	cmp	r3, #27
 80175de:	d806      	bhi.n	80175ee <etharp_raw+0x56>
 80175e0:	4b2e      	ldr	r3, [pc, #184]	; (801769c <etharp_raw+0x104>)
 80175e2:	f240 4262 	movw	r2, #1122	; 0x462
 80175e6:	4930      	ldr	r1, [pc, #192]	; (80176a8 <etharp_raw+0x110>)
 80175e8:	482e      	ldr	r0, [pc, #184]	; (80176a4 <etharp_raw+0x10c>)
 80175ea:	f002 fea1 	bl	801a330 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80175ee:	69bb      	ldr	r3, [r7, #24]
 80175f0:	685b      	ldr	r3, [r3, #4]
 80175f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80175f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80175f6:	4618      	mov	r0, r3
 80175f8:	f7f3 fb38 	bl	800ac6c <lwip_htons>
 80175fc:	4603      	mov	r3, r0
 80175fe:	461a      	mov	r2, r3
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801760a:	2b06      	cmp	r3, #6
 801760c:	d006      	beq.n	801761c <etharp_raw+0x84>
 801760e:	4b23      	ldr	r3, [pc, #140]	; (801769c <etharp_raw+0x104>)
 8017610:	f240 4269 	movw	r2, #1129	; 0x469
 8017614:	4925      	ldr	r1, [pc, #148]	; (80176ac <etharp_raw+0x114>)
 8017616:	4823      	ldr	r0, [pc, #140]	; (80176a4 <etharp_raw+0x10c>)
 8017618:	f002 fe8a 	bl	801a330 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801761c:	697b      	ldr	r3, [r7, #20]
 801761e:	3308      	adds	r3, #8
 8017620:	2206      	movs	r2, #6
 8017622:	6839      	ldr	r1, [r7, #0]
 8017624:	4618      	mov	r0, r3
 8017626:	f001 ffd9 	bl	80195dc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	3312      	adds	r3, #18
 801762e:	2206      	movs	r2, #6
 8017630:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017632:	4618      	mov	r0, r3
 8017634:	f001 ffd2 	bl	80195dc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017638:	697b      	ldr	r3, [r7, #20]
 801763a:	330e      	adds	r3, #14
 801763c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801763e:	6812      	ldr	r2, [r2, #0]
 8017640:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017642:	697b      	ldr	r3, [r7, #20]
 8017644:	3318      	adds	r3, #24
 8017646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017648:	6812      	ldr	r2, [r2, #0]
 801764a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	2200      	movs	r2, #0
 8017650:	701a      	strb	r2, [r3, #0]
 8017652:	2200      	movs	r2, #0
 8017654:	f042 0201 	orr.w	r2, r2, #1
 8017658:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	2200      	movs	r2, #0
 801765e:	f042 0208 	orr.w	r2, r2, #8
 8017662:	709a      	strb	r2, [r3, #2]
 8017664:	2200      	movs	r2, #0
 8017666:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017668:	697b      	ldr	r3, [r7, #20]
 801766a:	2206      	movs	r2, #6
 801766c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	2204      	movs	r2, #4
 8017672:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017674:	f640 0306 	movw	r3, #2054	; 0x806
 8017678:	9300      	str	r3, [sp, #0]
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	68ba      	ldr	r2, [r7, #8]
 801767e:	69b9      	ldr	r1, [r7, #24]
 8017680:	68f8      	ldr	r0, [r7, #12]
 8017682:	f001 fd4f 	bl	8019124 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017686:	69b8      	ldr	r0, [r7, #24]
 8017688:	f7f5 fe7e 	bl	800d388 <pbuf_free>
  p = NULL;
 801768c:	2300      	movs	r3, #0
 801768e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017690:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017694:	4618      	mov	r0, r3
 8017696:	3720      	adds	r7, #32
 8017698:	46bd      	mov	sp, r7
 801769a:	bd80      	pop	{r7, pc}
 801769c:	08021bf4 	.word	0x08021bf4
 80176a0:	08021d44 	.word	0x08021d44
 80176a4:	08021c6c 	.word	0x08021c6c
 80176a8:	08021df4 	.word	0x08021df4
 80176ac:	08021e28 	.word	0x08021e28

080176b0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b088      	sub	sp, #32
 80176b4:	af04      	add	r7, sp, #16
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80176cc:	2201      	movs	r2, #1
 80176ce:	9203      	str	r2, [sp, #12]
 80176d0:	68ba      	ldr	r2, [r7, #8]
 80176d2:	9202      	str	r2, [sp, #8]
 80176d4:	4a06      	ldr	r2, [pc, #24]	; (80176f0 <etharp_request_dst+0x40>)
 80176d6:	9201      	str	r2, [sp, #4]
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	4603      	mov	r3, r0
 80176dc:	687a      	ldr	r2, [r7, #4]
 80176de:	68f8      	ldr	r0, [r7, #12]
 80176e0:	f7ff ff5a 	bl	8017598 <etharp_raw>
 80176e4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3710      	adds	r7, #16
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd80      	pop	{r7, pc}
 80176ee:	bf00      	nop
 80176f0:	08022498 	.word	0x08022498

080176f4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b082      	sub	sp, #8
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]
 80176fc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80176fe:	4a05      	ldr	r2, [pc, #20]	; (8017714 <etharp_request+0x20>)
 8017700:	6839      	ldr	r1, [r7, #0]
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f7ff ffd4 	bl	80176b0 <etharp_request_dst>
 8017708:	4603      	mov	r3, r0
}
 801770a:	4618      	mov	r0, r3
 801770c:	3708      	adds	r7, #8
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}
 8017712:	bf00      	nop
 8017714:	08022490 	.word	0x08022490

08017718 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017718:	b580      	push	{r7, lr}
 801771a:	b08e      	sub	sp, #56	; 0x38
 801771c:	af04      	add	r7, sp, #16
 801771e:	6078      	str	r0, [r7, #4]
 8017720:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017722:	4b79      	ldr	r3, [pc, #484]	; (8017908 <icmp_input+0x1f0>)
 8017724:	689b      	ldr	r3, [r3, #8]
 8017726:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801772a:	781b      	ldrb	r3, [r3, #0]
 801772c:	f003 030f 	and.w	r3, r3, #15
 8017730:	b2db      	uxtb	r3, r3
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	b2db      	uxtb	r3, r3
 8017736:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017738:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801773a:	2b13      	cmp	r3, #19
 801773c:	f240 80cd 	bls.w	80178da <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	895b      	ldrh	r3, [r3, #10]
 8017744:	2b03      	cmp	r3, #3
 8017746:	f240 80ca 	bls.w	80178de <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	685b      	ldr	r3, [r3, #4]
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017754:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017758:	2b00      	cmp	r3, #0
 801775a:	f000 80b7 	beq.w	80178cc <icmp_input+0x1b4>
 801775e:	2b08      	cmp	r3, #8
 8017760:	f040 80b7 	bne.w	80178d2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017764:	4b69      	ldr	r3, [pc, #420]	; (801790c <icmp_input+0x1f4>)
 8017766:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017768:	4b67      	ldr	r3, [pc, #412]	; (8017908 <icmp_input+0x1f0>)
 801776a:	695b      	ldr	r3, [r3, #20]
 801776c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017770:	2be0      	cmp	r3, #224	; 0xe0
 8017772:	f000 80bb 	beq.w	80178ec <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017776:	4b64      	ldr	r3, [pc, #400]	; (8017908 <icmp_input+0x1f0>)
 8017778:	695b      	ldr	r3, [r3, #20]
 801777a:	4a63      	ldr	r2, [pc, #396]	; (8017908 <icmp_input+0x1f0>)
 801777c:	6812      	ldr	r2, [r2, #0]
 801777e:	4611      	mov	r1, r2
 8017780:	4618      	mov	r0, r3
 8017782:	f000 fc0b 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 8017786:	4603      	mov	r3, r0
 8017788:	2b00      	cmp	r3, #0
 801778a:	f040 80b1 	bne.w	80178f0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	891b      	ldrh	r3, [r3, #8]
 8017792:	2b07      	cmp	r3, #7
 8017794:	f240 80a5 	bls.w	80178e2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801779a:	330e      	adds	r3, #14
 801779c:	4619      	mov	r1, r3
 801779e:	6878      	ldr	r0, [r7, #4]
 80177a0:	f7f5 fd5c 	bl	800d25c <pbuf_add_header>
 80177a4:	4603      	mov	r3, r0
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d04b      	beq.n	8017842 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	891a      	ldrh	r2, [r3, #8]
 80177ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177b0:	4413      	add	r3, r2
 80177b2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	891b      	ldrh	r3, [r3, #8]
 80177b8:	8b7a      	ldrh	r2, [r7, #26]
 80177ba:	429a      	cmp	r2, r3
 80177bc:	f0c0 809a 	bcc.w	80178f4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80177c0:	8b7b      	ldrh	r3, [r7, #26]
 80177c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80177c6:	4619      	mov	r1, r3
 80177c8:	200e      	movs	r0, #14
 80177ca:	f7f5 faf9 	bl	800cdc0 <pbuf_alloc>
 80177ce:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	f000 8090 	beq.w	80178f8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	895b      	ldrh	r3, [r3, #10]
 80177dc:	461a      	mov	r2, r3
 80177de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177e0:	3308      	adds	r3, #8
 80177e2:	429a      	cmp	r2, r3
 80177e4:	d203      	bcs.n	80177ee <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80177e6:	6978      	ldr	r0, [r7, #20]
 80177e8:	f7f5 fdce 	bl	800d388 <pbuf_free>
          goto icmperr;
 80177ec:	e085      	b.n	80178fa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80177ee:	697b      	ldr	r3, [r7, #20]
 80177f0:	685b      	ldr	r3, [r3, #4]
 80177f2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80177f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177f6:	4618      	mov	r0, r3
 80177f8:	f001 fef0 	bl	80195dc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80177fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80177fe:	4619      	mov	r1, r3
 8017800:	6978      	ldr	r0, [r7, #20]
 8017802:	f7f5 fd3b 	bl	800d27c <pbuf_remove_header>
 8017806:	4603      	mov	r3, r0
 8017808:	2b00      	cmp	r3, #0
 801780a:	d009      	beq.n	8017820 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801780c:	4b40      	ldr	r3, [pc, #256]	; (8017910 <icmp_input+0x1f8>)
 801780e:	22b6      	movs	r2, #182	; 0xb6
 8017810:	4940      	ldr	r1, [pc, #256]	; (8017914 <icmp_input+0x1fc>)
 8017812:	4841      	ldr	r0, [pc, #260]	; (8017918 <icmp_input+0x200>)
 8017814:	f002 fd8c 	bl	801a330 <iprintf>
          pbuf_free(r);
 8017818:	6978      	ldr	r0, [r7, #20]
 801781a:	f7f5 fdb5 	bl	800d388 <pbuf_free>
          goto icmperr;
 801781e:	e06c      	b.n	80178fa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017820:	6879      	ldr	r1, [r7, #4]
 8017822:	6978      	ldr	r0, [r7, #20]
 8017824:	f7f5 fee4 	bl	800d5f0 <pbuf_copy>
 8017828:	4603      	mov	r3, r0
 801782a:	2b00      	cmp	r3, #0
 801782c:	d003      	beq.n	8017836 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801782e:	6978      	ldr	r0, [r7, #20]
 8017830:	f7f5 fdaa 	bl	800d388 <pbuf_free>
          goto icmperr;
 8017834:	e061      	b.n	80178fa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017836:	6878      	ldr	r0, [r7, #4]
 8017838:	f7f5 fda6 	bl	800d388 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	607b      	str	r3, [r7, #4]
 8017840:	e00f      	b.n	8017862 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017844:	330e      	adds	r3, #14
 8017846:	4619      	mov	r1, r3
 8017848:	6878      	ldr	r0, [r7, #4]
 801784a:	f7f5 fd17 	bl	800d27c <pbuf_remove_header>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d006      	beq.n	8017862 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017854:	4b2e      	ldr	r3, [pc, #184]	; (8017910 <icmp_input+0x1f8>)
 8017856:	22c7      	movs	r2, #199	; 0xc7
 8017858:	4930      	ldr	r1, [pc, #192]	; (801791c <icmp_input+0x204>)
 801785a:	482f      	ldr	r0, [pc, #188]	; (8017918 <icmp_input+0x200>)
 801785c:	f002 fd68 	bl	801a330 <iprintf>
          goto icmperr;
 8017860:	e04b      	b.n	80178fa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	685b      	ldr	r3, [r3, #4]
 8017866:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801786a:	4619      	mov	r1, r3
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f7f5 fcf5 	bl	800d25c <pbuf_add_header>
 8017872:	4603      	mov	r3, r0
 8017874:	2b00      	cmp	r3, #0
 8017876:	d12b      	bne.n	80178d0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	685b      	ldr	r3, [r3, #4]
 801787c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801787e:	69fb      	ldr	r3, [r7, #28]
 8017880:	681a      	ldr	r2, [r3, #0]
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017886:	4b20      	ldr	r3, [pc, #128]	; (8017908 <icmp_input+0x1f0>)
 8017888:	691a      	ldr	r2, [r3, #16]
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801788e:	693b      	ldr	r3, [r7, #16]
 8017890:	2200      	movs	r2, #0
 8017892:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017894:	693b      	ldr	r3, [r7, #16]
 8017896:	2200      	movs	r2, #0
 8017898:	709a      	strb	r2, [r3, #2]
 801789a:	2200      	movs	r2, #0
 801789c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	22ff      	movs	r2, #255	; 0xff
 80178a2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2200      	movs	r2, #0
 80178a8:	729a      	strb	r2, [r3, #10]
 80178aa:	2200      	movs	r2, #0
 80178ac:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	9302      	str	r3, [sp, #8]
 80178b2:	2301      	movs	r3, #1
 80178b4:	9301      	str	r3, [sp, #4]
 80178b6:	2300      	movs	r3, #0
 80178b8:	9300      	str	r3, [sp, #0]
 80178ba:	23ff      	movs	r3, #255	; 0xff
 80178bc:	2200      	movs	r2, #0
 80178be:	69f9      	ldr	r1, [r7, #28]
 80178c0:	6878      	ldr	r0, [r7, #4]
 80178c2:	f000 fa93 	bl	8017dec <ip4_output_if>
 80178c6:	4603      	mov	r3, r0
 80178c8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80178ca:	e001      	b.n	80178d0 <icmp_input+0x1b8>
      break;
 80178cc:	bf00      	nop
 80178ce:	e000      	b.n	80178d2 <icmp_input+0x1ba>
      break;
 80178d0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	f7f5 fd58 	bl	800d388 <pbuf_free>
  return;
 80178d8:	e013      	b.n	8017902 <icmp_input+0x1ea>
    goto lenerr;
 80178da:	bf00      	nop
 80178dc:	e002      	b.n	80178e4 <icmp_input+0x1cc>
    goto lenerr;
 80178de:	bf00      	nop
 80178e0:	e000      	b.n	80178e4 <icmp_input+0x1cc>
        goto lenerr;
 80178e2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f7f5 fd4f 	bl	800d388 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80178ea:	e00a      	b.n	8017902 <icmp_input+0x1ea>
        goto icmperr;
 80178ec:	bf00      	nop
 80178ee:	e004      	b.n	80178fa <icmp_input+0x1e2>
        goto icmperr;
 80178f0:	bf00      	nop
 80178f2:	e002      	b.n	80178fa <icmp_input+0x1e2>
          goto icmperr;
 80178f4:	bf00      	nop
 80178f6:	e000      	b.n	80178fa <icmp_input+0x1e2>
          goto icmperr;
 80178f8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7f5 fd44 	bl	800d388 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017900:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017902:	3728      	adds	r7, #40	; 0x28
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}
 8017908:	20024820 	.word	0x20024820
 801790c:	20024834 	.word	0x20024834
 8017910:	08021e6c 	.word	0x08021e6c
 8017914:	08021ea4 	.word	0x08021ea4
 8017918:	08021edc 	.word	0x08021edc
 801791c:	08021f04 	.word	0x08021f04

08017920 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017920:	b580      	push	{r7, lr}
 8017922:	b082      	sub	sp, #8
 8017924:	af00      	add	r7, sp, #0
 8017926:	6078      	str	r0, [r7, #4]
 8017928:	460b      	mov	r3, r1
 801792a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801792c:	78fb      	ldrb	r3, [r7, #3]
 801792e:	461a      	mov	r2, r3
 8017930:	2103      	movs	r1, #3
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	f000 f814 	bl	8017960 <icmp_send_response>
}
 8017938:	bf00      	nop
 801793a:	3708      	adds	r7, #8
 801793c:	46bd      	mov	sp, r7
 801793e:	bd80      	pop	{r7, pc}

08017940 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b082      	sub	sp, #8
 8017944:	af00      	add	r7, sp, #0
 8017946:	6078      	str	r0, [r7, #4]
 8017948:	460b      	mov	r3, r1
 801794a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801794c:	78fb      	ldrb	r3, [r7, #3]
 801794e:	461a      	mov	r2, r3
 8017950:	210b      	movs	r1, #11
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f000 f804 	bl	8017960 <icmp_send_response>
}
 8017958:	bf00      	nop
 801795a:	3708      	adds	r7, #8
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b08c      	sub	sp, #48	; 0x30
 8017964:	af04      	add	r7, sp, #16
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	460b      	mov	r3, r1
 801796a:	70fb      	strb	r3, [r7, #3]
 801796c:	4613      	mov	r3, r2
 801796e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017970:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017974:	2124      	movs	r1, #36	; 0x24
 8017976:	2022      	movs	r0, #34	; 0x22
 8017978:	f7f5 fa22 	bl	800cdc0 <pbuf_alloc>
 801797c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801797e:	69fb      	ldr	r3, [r7, #28]
 8017980:	2b00      	cmp	r3, #0
 8017982:	d04c      	beq.n	8017a1e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017984:	69fb      	ldr	r3, [r7, #28]
 8017986:	895b      	ldrh	r3, [r3, #10]
 8017988:	2b23      	cmp	r3, #35	; 0x23
 801798a:	d806      	bhi.n	801799a <icmp_send_response+0x3a>
 801798c:	4b26      	ldr	r3, [pc, #152]	; (8017a28 <icmp_send_response+0xc8>)
 801798e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017992:	4926      	ldr	r1, [pc, #152]	; (8017a2c <icmp_send_response+0xcc>)
 8017994:	4826      	ldr	r0, [pc, #152]	; (8017a30 <icmp_send_response+0xd0>)
 8017996:	f002 fccb 	bl	801a330 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	685b      	ldr	r3, [r3, #4]
 801799e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80179a0:	69fb      	ldr	r3, [r7, #28]
 80179a2:	685b      	ldr	r3, [r3, #4]
 80179a4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	78fa      	ldrb	r2, [r7, #3]
 80179aa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	78ba      	ldrb	r2, [r7, #2]
 80179b0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	2200      	movs	r2, #0
 80179b6:	711a      	strb	r2, [r3, #4]
 80179b8:	2200      	movs	r2, #0
 80179ba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80179bc:	697b      	ldr	r3, [r7, #20]
 80179be:	2200      	movs	r2, #0
 80179c0:	719a      	strb	r2, [r3, #6]
 80179c2:	2200      	movs	r2, #0
 80179c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80179c6:	69fb      	ldr	r3, [r7, #28]
 80179c8:	685b      	ldr	r3, [r3, #4]
 80179ca:	f103 0008 	add.w	r0, r3, #8
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	221c      	movs	r2, #28
 80179d4:	4619      	mov	r1, r3
 80179d6:	f001 fe01 	bl	80195dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80179da:	69bb      	ldr	r3, [r7, #24]
 80179dc:	68db      	ldr	r3, [r3, #12]
 80179de:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80179e0:	f107 030c 	add.w	r3, r7, #12
 80179e4:	4618      	mov	r0, r3
 80179e6:	f000 f825 	bl	8017a34 <ip4_route>
 80179ea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80179ec:	693b      	ldr	r3, [r7, #16]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d011      	beq.n	8017a16 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80179f2:	697b      	ldr	r3, [r7, #20]
 80179f4:	2200      	movs	r2, #0
 80179f6:	709a      	strb	r2, [r3, #2]
 80179f8:	2200      	movs	r2, #0
 80179fa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80179fc:	f107 020c 	add.w	r2, r7, #12
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	9302      	str	r3, [sp, #8]
 8017a04:	2301      	movs	r3, #1
 8017a06:	9301      	str	r3, [sp, #4]
 8017a08:	2300      	movs	r3, #0
 8017a0a:	9300      	str	r3, [sp, #0]
 8017a0c:	23ff      	movs	r3, #255	; 0xff
 8017a0e:	2100      	movs	r1, #0
 8017a10:	69f8      	ldr	r0, [r7, #28]
 8017a12:	f000 f9eb 	bl	8017dec <ip4_output_if>
  }
  pbuf_free(q);
 8017a16:	69f8      	ldr	r0, [r7, #28]
 8017a18:	f7f5 fcb6 	bl	800d388 <pbuf_free>
 8017a1c:	e000      	b.n	8017a20 <icmp_send_response+0xc0>
    return;
 8017a1e:	bf00      	nop
}
 8017a20:	3720      	adds	r7, #32
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
 8017a26:	bf00      	nop
 8017a28:	08021e6c 	.word	0x08021e6c
 8017a2c:	08021f38 	.word	0x08021f38
 8017a30:	08021edc 	.word	0x08021edc

08017a34 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017a34:	b480      	push	{r7}
 8017a36:	b085      	sub	sp, #20
 8017a38:	af00      	add	r7, sp, #0
 8017a3a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017a3c:	4b33      	ldr	r3, [pc, #204]	; (8017b0c <ip4_route+0xd8>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	60fb      	str	r3, [r7, #12]
 8017a42:	e036      	b.n	8017ab2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a4a:	f003 0301 	and.w	r3, r3, #1
 8017a4e:	b2db      	uxtb	r3, r3
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d02b      	beq.n	8017aac <ip4_route+0x78>
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a5a:	089b      	lsrs	r3, r3, #2
 8017a5c:	f003 0301 	and.w	r3, r3, #1
 8017a60:	b2db      	uxtb	r3, r3
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d022      	beq.n	8017aac <ip4_route+0x78>
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	3304      	adds	r3, #4
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d01d      	beq.n	8017aac <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681a      	ldr	r2, [r3, #0]
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	3304      	adds	r3, #4
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	405a      	eors	r2, r3
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	3308      	adds	r3, #8
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	4013      	ands	r3, r2
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d101      	bne.n	8017a8c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	e038      	b.n	8017afe <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017a92:	f003 0302 	and.w	r3, r3, #2
 8017a96:	2b00      	cmp	r3, #0
 8017a98:	d108      	bne.n	8017aac <ip4_route+0x78>
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	681a      	ldr	r2, [r3, #0]
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	330c      	adds	r3, #12
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d101      	bne.n	8017aac <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	e028      	b.n	8017afe <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	60fb      	str	r3, [r7, #12]
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d1c5      	bne.n	8017a44 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ab8:	4b15      	ldr	r3, [pc, #84]	; (8017b10 <ip4_route+0xdc>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d01a      	beq.n	8017af6 <ip4_route+0xc2>
 8017ac0:	4b13      	ldr	r3, [pc, #76]	; (8017b10 <ip4_route+0xdc>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ac8:	f003 0301 	and.w	r3, r3, #1
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d012      	beq.n	8017af6 <ip4_route+0xc2>
 8017ad0:	4b0f      	ldr	r3, [pc, #60]	; (8017b10 <ip4_route+0xdc>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ad8:	f003 0304 	and.w	r3, r3, #4
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d00a      	beq.n	8017af6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017ae0:	4b0b      	ldr	r3, [pc, #44]	; (8017b10 <ip4_route+0xdc>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017ae8:	2b00      	cmp	r3, #0
 8017aea:	d004      	beq.n	8017af6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	b2db      	uxtb	r3, r3
 8017af2:	2b7f      	cmp	r3, #127	; 0x7f
 8017af4:	d101      	bne.n	8017afa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017af6:	2300      	movs	r3, #0
 8017af8:	e001      	b.n	8017afe <ip4_route+0xca>
  }

  return netif_default;
 8017afa:	4b05      	ldr	r3, [pc, #20]	; (8017b10 <ip4_route+0xdc>)
 8017afc:	681b      	ldr	r3, [r3, #0]
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3714      	adds	r7, #20
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	2002809c 	.word	0x2002809c
 8017b10:	200280a0 	.word	0x200280a0

08017b14 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b082      	sub	sp, #8
 8017b18:	af00      	add	r7, sp, #0
 8017b1a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017b22:	f003 0301 	and.w	r3, r3, #1
 8017b26:	b2db      	uxtb	r3, r3
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d016      	beq.n	8017b5a <ip4_input_accept+0x46>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	3304      	adds	r3, #4
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d011      	beq.n	8017b5a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b36:	4b0b      	ldr	r3, [pc, #44]	; (8017b64 <ip4_input_accept+0x50>)
 8017b38:	695a      	ldr	r2, [r3, #20]
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	3304      	adds	r3, #4
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d008      	beq.n	8017b56 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017b44:	4b07      	ldr	r3, [pc, #28]	; (8017b64 <ip4_input_accept+0x50>)
 8017b46:	695b      	ldr	r3, [r3, #20]
 8017b48:	6879      	ldr	r1, [r7, #4]
 8017b4a:	4618      	mov	r0, r3
 8017b4c:	f000 fa26 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 8017b50:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	d001      	beq.n	8017b5a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017b56:	2301      	movs	r3, #1
 8017b58:	e000      	b.n	8017b5c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017b5a:	2300      	movs	r3, #0
}
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	3708      	adds	r7, #8
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	20024820 	.word	0x20024820

08017b68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017b68:	b580      	push	{r7, lr}
 8017b6a:	b088      	sub	sp, #32
 8017b6c:	af00      	add	r7, sp, #0
 8017b6e:	6078      	str	r0, [r7, #4]
 8017b70:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017b72:	2301      	movs	r3, #1
 8017b74:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	685b      	ldr	r3, [r3, #4]
 8017b7a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017b7c:	69fb      	ldr	r3, [r7, #28]
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	091b      	lsrs	r3, r3, #4
 8017b82:	b2db      	uxtb	r3, r3
 8017b84:	2b04      	cmp	r3, #4
 8017b86:	d004      	beq.n	8017b92 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017b88:	6878      	ldr	r0, [r7, #4]
 8017b8a:	f7f5 fbfd 	bl	800d388 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	e123      	b.n	8017dda <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017b92:	69fb      	ldr	r3, [r7, #28]
 8017b94:	781b      	ldrb	r3, [r3, #0]
 8017b96:	f003 030f 	and.w	r3, r3, #15
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	009b      	lsls	r3, r3, #2
 8017b9e:	b2db      	uxtb	r3, r3
 8017ba0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017ba2:	69fb      	ldr	r3, [r7, #28]
 8017ba4:	885b      	ldrh	r3, [r3, #2]
 8017ba6:	b29b      	uxth	r3, r3
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f7f3 f85f 	bl	800ac6c <lwip_htons>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	891b      	ldrh	r3, [r3, #8]
 8017bb6:	8a3a      	ldrh	r2, [r7, #16]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	d204      	bcs.n	8017bc6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017bbc:	8a3b      	ldrh	r3, [r7, #16]
 8017bbe:	4619      	mov	r1, r3
 8017bc0:	6878      	ldr	r0, [r7, #4]
 8017bc2:	f7f5 fa5b 	bl	800d07c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	895b      	ldrh	r3, [r3, #10]
 8017bca:	8a7a      	ldrh	r2, [r7, #18]
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d807      	bhi.n	8017be0 <ip4_input+0x78>
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	891b      	ldrh	r3, [r3, #8]
 8017bd4:	8a3a      	ldrh	r2, [r7, #16]
 8017bd6:	429a      	cmp	r2, r3
 8017bd8:	d802      	bhi.n	8017be0 <ip4_input+0x78>
 8017bda:	8a7b      	ldrh	r3, [r7, #18]
 8017bdc:	2b13      	cmp	r3, #19
 8017bde:	d804      	bhi.n	8017bea <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017be0:	6878      	ldr	r0, [r7, #4]
 8017be2:	f7f5 fbd1 	bl	800d388 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017be6:	2300      	movs	r3, #0
 8017be8:	e0f7      	b.n	8017dda <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017bea:	69fb      	ldr	r3, [r7, #28]
 8017bec:	691b      	ldr	r3, [r3, #16]
 8017bee:	4a7d      	ldr	r2, [pc, #500]	; (8017de4 <ip4_input+0x27c>)
 8017bf0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017bf2:	69fb      	ldr	r3, [r7, #28]
 8017bf4:	68db      	ldr	r3, [r3, #12]
 8017bf6:	4a7b      	ldr	r2, [pc, #492]	; (8017de4 <ip4_input+0x27c>)
 8017bf8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017bfa:	4b7a      	ldr	r3, [pc, #488]	; (8017de4 <ip4_input+0x27c>)
 8017bfc:	695b      	ldr	r3, [r3, #20]
 8017bfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017c02:	2be0      	cmp	r3, #224	; 0xe0
 8017c04:	d112      	bne.n	8017c2c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c0c:	f003 0301 	and.w	r3, r3, #1
 8017c10:	b2db      	uxtb	r3, r3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d007      	beq.n	8017c26 <ip4_input+0xbe>
 8017c16:	683b      	ldr	r3, [r7, #0]
 8017c18:	3304      	adds	r3, #4
 8017c1a:	681b      	ldr	r3, [r3, #0]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d002      	beq.n	8017c26 <ip4_input+0xbe>
      netif = inp;
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	61bb      	str	r3, [r7, #24]
 8017c24:	e02a      	b.n	8017c7c <ip4_input+0x114>
    } else {
      netif = NULL;
 8017c26:	2300      	movs	r3, #0
 8017c28:	61bb      	str	r3, [r7, #24]
 8017c2a:	e027      	b.n	8017c7c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017c2c:	6838      	ldr	r0, [r7, #0]
 8017c2e:	f7ff ff71 	bl	8017b14 <ip4_input_accept>
 8017c32:	4603      	mov	r3, r0
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d002      	beq.n	8017c3e <ip4_input+0xd6>
      netif = inp;
 8017c38:	683b      	ldr	r3, [r7, #0]
 8017c3a:	61bb      	str	r3, [r7, #24]
 8017c3c:	e01e      	b.n	8017c7c <ip4_input+0x114>
    } else {
      netif = NULL;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017c42:	4b68      	ldr	r3, [pc, #416]	; (8017de4 <ip4_input+0x27c>)
 8017c44:	695b      	ldr	r3, [r3, #20]
 8017c46:	b2db      	uxtb	r3, r3
 8017c48:	2b7f      	cmp	r3, #127	; 0x7f
 8017c4a:	d017      	beq.n	8017c7c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017c4c:	4b66      	ldr	r3, [pc, #408]	; (8017de8 <ip4_input+0x280>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	61bb      	str	r3, [r7, #24]
 8017c52:	e00e      	b.n	8017c72 <ip4_input+0x10a>
          if (netif == inp) {
 8017c54:	69ba      	ldr	r2, [r7, #24]
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	429a      	cmp	r2, r3
 8017c5a:	d006      	beq.n	8017c6a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017c5c:	69b8      	ldr	r0, [r7, #24]
 8017c5e:	f7ff ff59 	bl	8017b14 <ip4_input_accept>
 8017c62:	4603      	mov	r3, r0
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d108      	bne.n	8017c7a <ip4_input+0x112>
 8017c68:	e000      	b.n	8017c6c <ip4_input+0x104>
            continue;
 8017c6a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017c6c:	69bb      	ldr	r3, [r7, #24]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	61bb      	str	r3, [r7, #24]
 8017c72:	69bb      	ldr	r3, [r7, #24]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d1ed      	bne.n	8017c54 <ip4_input+0xec>
 8017c78:	e000      	b.n	8017c7c <ip4_input+0x114>
            break;
 8017c7a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017c7c:	69bb      	ldr	r3, [r7, #24]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d111      	bne.n	8017ca6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017c82:	69fb      	ldr	r3, [r7, #28]
 8017c84:	7a5b      	ldrb	r3, [r3, #9]
 8017c86:	2b11      	cmp	r3, #17
 8017c88:	d10d      	bne.n	8017ca6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017c8a:	8a7b      	ldrh	r3, [r7, #18]
 8017c8c:	69fa      	ldr	r2, [r7, #28]
 8017c8e:	4413      	add	r3, r2
 8017c90:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	885b      	ldrh	r3, [r3, #2]
 8017c96:	b29b      	uxth	r3, r3
 8017c98:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017c9c:	d103      	bne.n	8017ca6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017ca6:	697b      	ldr	r3, [r7, #20]
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d017      	beq.n	8017cdc <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017cac:	4b4d      	ldr	r3, [pc, #308]	; (8017de4 <ip4_input+0x27c>)
 8017cae:	691b      	ldr	r3, [r3, #16]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d013      	beq.n	8017cdc <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017cb4:	4b4b      	ldr	r3, [pc, #300]	; (8017de4 <ip4_input+0x27c>)
 8017cb6:	691b      	ldr	r3, [r3, #16]
 8017cb8:	6839      	ldr	r1, [r7, #0]
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f000 f96e 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d105      	bne.n	8017cd2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017cc6:	4b47      	ldr	r3, [pc, #284]	; (8017de4 <ip4_input+0x27c>)
 8017cc8:	691b      	ldr	r3, [r3, #16]
 8017cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017cce:	2be0      	cmp	r3, #224	; 0xe0
 8017cd0:	d104      	bne.n	8017cdc <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017cd2:	6878      	ldr	r0, [r7, #4]
 8017cd4:	f7f5 fb58 	bl	800d388 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017cd8:	2300      	movs	r3, #0
 8017cda:	e07e      	b.n	8017dda <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017cdc:	69bb      	ldr	r3, [r7, #24]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d104      	bne.n	8017cec <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017ce2:	6878      	ldr	r0, [r7, #4]
 8017ce4:	f7f5 fb50 	bl	800d388 <pbuf_free>
    return ERR_OK;
 8017ce8:	2300      	movs	r3, #0
 8017cea:	e076      	b.n	8017dda <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017cec:	69fb      	ldr	r3, [r7, #28]
 8017cee:	88db      	ldrh	r3, [r3, #6]
 8017cf0:	b29b      	uxth	r3, r3
 8017cf2:	461a      	mov	r2, r3
 8017cf4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017cf8:	4013      	ands	r3, r2
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d00b      	beq.n	8017d16 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 fe4e 	bl	80189a0 <ip4_reass>
 8017d04:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d101      	bne.n	8017d10 <ip4_input+0x1a8>
      return ERR_OK;
 8017d0c:	2300      	movs	r3, #0
 8017d0e:	e064      	b.n	8017dda <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	685b      	ldr	r3, [r3, #4]
 8017d14:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017d16:	4a33      	ldr	r2, [pc, #204]	; (8017de4 <ip4_input+0x27c>)
 8017d18:	69bb      	ldr	r3, [r7, #24]
 8017d1a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017d1c:	4a31      	ldr	r2, [pc, #196]	; (8017de4 <ip4_input+0x27c>)
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017d22:	4a30      	ldr	r2, [pc, #192]	; (8017de4 <ip4_input+0x27c>)
 8017d24:	69fb      	ldr	r3, [r7, #28]
 8017d26:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017d28:	69fb      	ldr	r3, [r7, #28]
 8017d2a:	781b      	ldrb	r3, [r3, #0]
 8017d2c:	f003 030f 	and.w	r3, r3, #15
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	009b      	lsls	r3, r3, #2
 8017d34:	b2db      	uxtb	r3, r3
 8017d36:	b29a      	uxth	r2, r3
 8017d38:	4b2a      	ldr	r3, [pc, #168]	; (8017de4 <ip4_input+0x27c>)
 8017d3a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017d3c:	8a7b      	ldrh	r3, [r7, #18]
 8017d3e:	4619      	mov	r1, r3
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f7f5 fa9b 	bl	800d27c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017d46:	69fb      	ldr	r3, [r7, #28]
 8017d48:	7a5b      	ldrb	r3, [r3, #9]
 8017d4a:	2b11      	cmp	r3, #17
 8017d4c:	d006      	beq.n	8017d5c <ip4_input+0x1f4>
 8017d4e:	2b11      	cmp	r3, #17
 8017d50:	dc13      	bgt.n	8017d7a <ip4_input+0x212>
 8017d52:	2b01      	cmp	r3, #1
 8017d54:	d00c      	beq.n	8017d70 <ip4_input+0x208>
 8017d56:	2b06      	cmp	r3, #6
 8017d58:	d005      	beq.n	8017d66 <ip4_input+0x1fe>
 8017d5a:	e00e      	b.n	8017d7a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017d5c:	6839      	ldr	r1, [r7, #0]
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f7fc fa30 	bl	80141c4 <udp_input>
        break;
 8017d64:	e026      	b.n	8017db4 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017d66:	6839      	ldr	r1, [r7, #0]
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f7f7 fded 	bl	800f948 <tcp_input>
        break;
 8017d6e:	e021      	b.n	8017db4 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017d70:	6839      	ldr	r1, [r7, #0]
 8017d72:	6878      	ldr	r0, [r7, #4]
 8017d74:	f7ff fcd0 	bl	8017718 <icmp_input>
        break;
 8017d78:	e01c      	b.n	8017db4 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d7a:	4b1a      	ldr	r3, [pc, #104]	; (8017de4 <ip4_input+0x27c>)
 8017d7c:	695b      	ldr	r3, [r3, #20]
 8017d7e:	69b9      	ldr	r1, [r7, #24]
 8017d80:	4618      	mov	r0, r3
 8017d82:	f000 f90b 	bl	8017f9c <ip4_addr_isbroadcast_u32>
 8017d86:	4603      	mov	r3, r0
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d10f      	bne.n	8017dac <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d8c:	4b15      	ldr	r3, [pc, #84]	; (8017de4 <ip4_input+0x27c>)
 8017d8e:	695b      	ldr	r3, [r3, #20]
 8017d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017d94:	2be0      	cmp	r3, #224	; 0xe0
 8017d96:	d009      	beq.n	8017dac <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017d98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017d9c:	4619      	mov	r1, r3
 8017d9e:	6878      	ldr	r0, [r7, #4]
 8017da0:	f7f5 fadf 	bl	800d362 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017da4:	2102      	movs	r1, #2
 8017da6:	6878      	ldr	r0, [r7, #4]
 8017da8:	f7ff fdba 	bl	8017920 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017dac:	6878      	ldr	r0, [r7, #4]
 8017dae:	f7f5 faeb 	bl	800d388 <pbuf_free>
        break;
 8017db2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017db4:	4b0b      	ldr	r3, [pc, #44]	; (8017de4 <ip4_input+0x27c>)
 8017db6:	2200      	movs	r2, #0
 8017db8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017dba:	4b0a      	ldr	r3, [pc, #40]	; (8017de4 <ip4_input+0x27c>)
 8017dbc:	2200      	movs	r2, #0
 8017dbe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017dc0:	4b08      	ldr	r3, [pc, #32]	; (8017de4 <ip4_input+0x27c>)
 8017dc2:	2200      	movs	r2, #0
 8017dc4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017dc6:	4b07      	ldr	r3, [pc, #28]	; (8017de4 <ip4_input+0x27c>)
 8017dc8:	2200      	movs	r2, #0
 8017dca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017dcc:	4b05      	ldr	r3, [pc, #20]	; (8017de4 <ip4_input+0x27c>)
 8017dce:	2200      	movs	r2, #0
 8017dd0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017dd2:	4b04      	ldr	r3, [pc, #16]	; (8017de4 <ip4_input+0x27c>)
 8017dd4:	2200      	movs	r2, #0
 8017dd6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017dd8:	2300      	movs	r3, #0
}
 8017dda:	4618      	mov	r0, r3
 8017ddc:	3720      	adds	r7, #32
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	20024820 	.word	0x20024820
 8017de8:	2002809c 	.word	0x2002809c

08017dec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017dec:	b580      	push	{r7, lr}
 8017dee:	b08a      	sub	sp, #40	; 0x28
 8017df0:	af04      	add	r7, sp, #16
 8017df2:	60f8      	str	r0, [r7, #12]
 8017df4:	60b9      	str	r1, [r7, #8]
 8017df6:	607a      	str	r2, [r7, #4]
 8017df8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d009      	beq.n	8017e18 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017e04:	68bb      	ldr	r3, [r7, #8]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d003      	beq.n	8017e12 <ip4_output_if+0x26>
 8017e0a:	68bb      	ldr	r3, [r7, #8]
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d102      	bne.n	8017e18 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e14:	3304      	adds	r3, #4
 8017e16:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017e18:	78fa      	ldrb	r2, [r7, #3]
 8017e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e1c:	9302      	str	r3, [sp, #8]
 8017e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017e22:	9301      	str	r3, [sp, #4]
 8017e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017e28:	9300      	str	r3, [sp, #0]
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	687a      	ldr	r2, [r7, #4]
 8017e2e:	6979      	ldr	r1, [r7, #20]
 8017e30:	68f8      	ldr	r0, [r7, #12]
 8017e32:	f000 f805 	bl	8017e40 <ip4_output_if_src>
 8017e36:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	3718      	adds	r7, #24
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b088      	sub	sp, #32
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	60f8      	str	r0, [r7, #12]
 8017e48:	60b9      	str	r1, [r7, #8]
 8017e4a:	607a      	str	r2, [r7, #4]
 8017e4c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	7b9b      	ldrb	r3, [r3, #14]
 8017e52:	2b01      	cmp	r3, #1
 8017e54:	d006      	beq.n	8017e64 <ip4_output_if_src+0x24>
 8017e56:	4b4b      	ldr	r3, [pc, #300]	; (8017f84 <ip4_output_if_src+0x144>)
 8017e58:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017e5c:	494a      	ldr	r1, [pc, #296]	; (8017f88 <ip4_output_if_src+0x148>)
 8017e5e:	484b      	ldr	r0, [pc, #300]	; (8017f8c <ip4_output_if_src+0x14c>)
 8017e60:	f002 fa66 	bl	801a330 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d060      	beq.n	8017f2c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017e6a:	2314      	movs	r3, #20
 8017e6c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017e6e:	2114      	movs	r1, #20
 8017e70:	68f8      	ldr	r0, [r7, #12]
 8017e72:	f7f5 f9f3 	bl	800d25c <pbuf_add_header>
 8017e76:	4603      	mov	r3, r0
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d002      	beq.n	8017e82 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017e7c:	f06f 0301 	mvn.w	r3, #1
 8017e80:	e07c      	b.n	8017f7c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	685b      	ldr	r3, [r3, #4]
 8017e86:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	895b      	ldrh	r3, [r3, #10]
 8017e8c:	2b13      	cmp	r3, #19
 8017e8e:	d806      	bhi.n	8017e9e <ip4_output_if_src+0x5e>
 8017e90:	4b3c      	ldr	r3, [pc, #240]	; (8017f84 <ip4_output_if_src+0x144>)
 8017e92:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017e96:	493e      	ldr	r1, [pc, #248]	; (8017f90 <ip4_output_if_src+0x150>)
 8017e98:	483c      	ldr	r0, [pc, #240]	; (8017f8c <ip4_output_if_src+0x14c>)
 8017e9a:	f002 fa49 	bl	801a330 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017e9e:	69fb      	ldr	r3, [r7, #28]
 8017ea0:	78fa      	ldrb	r2, [r7, #3]
 8017ea2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017eaa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	69fb      	ldr	r3, [r7, #28]
 8017eb2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017eb4:	8b7b      	ldrh	r3, [r7, #26]
 8017eb6:	089b      	lsrs	r3, r3, #2
 8017eb8:	b29b      	uxth	r3, r3
 8017eba:	b2db      	uxtb	r3, r3
 8017ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ec0:	b2da      	uxtb	r2, r3
 8017ec2:	69fb      	ldr	r3, [r7, #28]
 8017ec4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017ec6:	69fb      	ldr	r3, [r7, #28]
 8017ec8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017ecc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	891b      	ldrh	r3, [r3, #8]
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7f2 feca 	bl	800ac6c <lwip_htons>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	461a      	mov	r2, r3
 8017edc:	69fb      	ldr	r3, [r7, #28]
 8017ede:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017ee0:	69fb      	ldr	r3, [r7, #28]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	719a      	strb	r2, [r3, #6]
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017eea:	4b2a      	ldr	r3, [pc, #168]	; (8017f94 <ip4_output_if_src+0x154>)
 8017eec:	881b      	ldrh	r3, [r3, #0]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7f2 febc 	bl	800ac6c <lwip_htons>
 8017ef4:	4603      	mov	r3, r0
 8017ef6:	461a      	mov	r2, r3
 8017ef8:	69fb      	ldr	r3, [r7, #28]
 8017efa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017efc:	4b25      	ldr	r3, [pc, #148]	; (8017f94 <ip4_output_if_src+0x154>)
 8017efe:	881b      	ldrh	r3, [r3, #0]
 8017f00:	3301      	adds	r3, #1
 8017f02:	b29a      	uxth	r2, r3
 8017f04:	4b23      	ldr	r3, [pc, #140]	; (8017f94 <ip4_output_if_src+0x154>)
 8017f06:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017f08:	68bb      	ldr	r3, [r7, #8]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d104      	bne.n	8017f18 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017f0e:	4b22      	ldr	r3, [pc, #136]	; (8017f98 <ip4_output_if_src+0x158>)
 8017f10:	681a      	ldr	r2, [r3, #0]
 8017f12:	69fb      	ldr	r3, [r7, #28]
 8017f14:	60da      	str	r2, [r3, #12]
 8017f16:	e003      	b.n	8017f20 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017f18:	68bb      	ldr	r3, [r7, #8]
 8017f1a:	681a      	ldr	r2, [r3, #0]
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017f20:	69fb      	ldr	r3, [r7, #28]
 8017f22:	2200      	movs	r2, #0
 8017f24:	729a      	strb	r2, [r3, #10]
 8017f26:	2200      	movs	r2, #0
 8017f28:	72da      	strb	r2, [r3, #11]
 8017f2a:	e00f      	b.n	8017f4c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	895b      	ldrh	r3, [r3, #10]
 8017f30:	2b13      	cmp	r3, #19
 8017f32:	d802      	bhi.n	8017f3a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017f34:	f06f 0301 	mvn.w	r3, #1
 8017f38:	e020      	b.n	8017f7c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017f3a:	68fb      	ldr	r3, [r7, #12]
 8017f3c:	685b      	ldr	r3, [r3, #4]
 8017f3e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017f40:	69fb      	ldr	r3, [r7, #28]
 8017f42:	691b      	ldr	r3, [r3, #16]
 8017f44:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017f46:	f107 0314 	add.w	r3, r7, #20
 8017f4a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d00c      	beq.n	8017f6e <ip4_output_if_src+0x12e>
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	891a      	ldrh	r2, [r3, #8]
 8017f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	d906      	bls.n	8017f6e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017f60:	687a      	ldr	r2, [r7, #4]
 8017f62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f64:	68f8      	ldr	r0, [r7, #12]
 8017f66:	f000 ff09 	bl	8018d7c <ip4_frag>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	e006      	b.n	8017f7c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f70:	695b      	ldr	r3, [r3, #20]
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	68f9      	ldr	r1, [r7, #12]
 8017f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f78:	4798      	blx	r3
 8017f7a:	4603      	mov	r3, r0
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	3720      	adds	r7, #32
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd80      	pop	{r7, pc}
 8017f84:	08021f64 	.word	0x08021f64
 8017f88:	08021f98 	.word	0x08021f98
 8017f8c:	08021fa4 	.word	0x08021fa4
 8017f90:	08021fcc 	.word	0x08021fcc
 8017f94:	200215de 	.word	0x200215de
 8017f98:	08022488 	.word	0x08022488

08017f9c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017f9c:	b480      	push	{r7}
 8017f9e:	b085      	sub	sp, #20
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	6078      	str	r0, [r7, #4]
 8017fa4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fb0:	d002      	beq.n	8017fb8 <ip4_addr_isbroadcast_u32+0x1c>
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d101      	bne.n	8017fbc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017fb8:	2301      	movs	r3, #1
 8017fba:	e02a      	b.n	8018012 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017fc2:	f003 0302 	and.w	r3, r3, #2
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d101      	bne.n	8017fce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	e021      	b.n	8018012 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	3304      	adds	r3, #4
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	687a      	ldr	r2, [r7, #4]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d101      	bne.n	8017fde <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	e019      	b.n	8018012 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017fde:	68fa      	ldr	r2, [r7, #12]
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	3304      	adds	r3, #4
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	405a      	eors	r2, r3
 8017fe8:	683b      	ldr	r3, [r7, #0]
 8017fea:	3308      	adds	r3, #8
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	4013      	ands	r3, r2
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d10d      	bne.n	8018010 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017ff4:	683b      	ldr	r3, [r7, #0]
 8017ff6:	3308      	adds	r3, #8
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	43da      	mvns	r2, r3
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018000:	683b      	ldr	r3, [r7, #0]
 8018002:	3308      	adds	r3, #8
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018008:	429a      	cmp	r2, r3
 801800a:	d101      	bne.n	8018010 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801800c:	2301      	movs	r3, #1
 801800e:	e000      	b.n	8018012 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018010:	2300      	movs	r3, #0
  }
}
 8018012:	4618      	mov	r0, r3
 8018014:	3714      	adds	r7, #20
 8018016:	46bd      	mov	sp, r7
 8018018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801c:	4770      	bx	lr
	...

08018020 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8018020:	b580      	push	{r7, lr}
 8018022:	b08a      	sub	sp, #40	; 0x28
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
 8018028:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801802a:	f107 030c 	add.w	r3, r7, #12
 801802e:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	781b      	ldrb	r3, [r3, #0]
 8018034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8018038:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801803c:	3301      	adds	r3, #1
 801803e:	4a89      	ldr	r2, [pc, #548]	; (8018264 <ip4addr_aton+0x244>)
 8018040:	4413      	add	r3, r2
 8018042:	781b      	ldrb	r3, [r3, #0]
 8018044:	f003 0304 	and.w	r3, r3, #4
 8018048:	2b00      	cmp	r3, #0
 801804a:	d101      	bne.n	8018050 <ip4addr_aton+0x30>
      return 0;
 801804c:	2300      	movs	r3, #0
 801804e:	e105      	b.n	801825c <ip4addr_aton+0x23c>
    }
    val = 0;
 8018050:	2300      	movs	r3, #0
 8018052:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8018054:	230a      	movs	r3, #10
 8018056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801805a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801805e:	2b30      	cmp	r3, #48	; 0x30
 8018060:	d11c      	bne.n	801809c <ip4addr_aton+0x7c>
      c = *++cp;
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	3301      	adds	r3, #1
 8018066:	607b      	str	r3, [r7, #4]
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8018070:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018074:	2b78      	cmp	r3, #120	; 0x78
 8018076:	d003      	beq.n	8018080 <ip4addr_aton+0x60>
 8018078:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801807c:	2b58      	cmp	r3, #88	; 0x58
 801807e:	d10a      	bne.n	8018096 <ip4addr_aton+0x76>
        base = 16;
 8018080:	2310      	movs	r3, #16
 8018082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	3301      	adds	r3, #1
 801808a:	607b      	str	r3, [r7, #4]
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018094:	e002      	b.n	801809c <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8018096:	2308      	movs	r3, #8
 8018098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801809c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80180a0:	3301      	adds	r3, #1
 80180a2:	4a70      	ldr	r2, [pc, #448]	; (8018264 <ip4addr_aton+0x244>)
 80180a4:	4413      	add	r3, r2
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	f003 0304 	and.w	r3, r3, #4
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d011      	beq.n	80180d4 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 80180b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180b6:	fb02 f203 	mul.w	r2, r2, r3
 80180ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80180be:	4413      	add	r3, r2
 80180c0:	3b30      	subs	r3, #48	; 0x30
 80180c2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	3301      	adds	r3, #1
 80180c8:	607b      	str	r3, [r7, #4]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80180d2:	e7e3      	b.n	801809c <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 80180d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180d8:	2b10      	cmp	r3, #16
 80180da:	d127      	bne.n	801812c <ip4addr_aton+0x10c>
 80180dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80180e0:	3301      	adds	r3, #1
 80180e2:	4a60      	ldr	r2, [pc, #384]	; (8018264 <ip4addr_aton+0x244>)
 80180e4:	4413      	add	r3, r2
 80180e6:	781b      	ldrb	r3, [r3, #0]
 80180e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d01d      	beq.n	801812c <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80180f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f2:	011b      	lsls	r3, r3, #4
 80180f4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180f8:	f102 010a 	add.w	r1, r2, #10
 80180fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018100:	3201      	adds	r2, #1
 8018102:	4858      	ldr	r0, [pc, #352]	; (8018264 <ip4addr_aton+0x244>)
 8018104:	4402      	add	r2, r0
 8018106:	7812      	ldrb	r2, [r2, #0]
 8018108:	f002 0203 	and.w	r2, r2, #3
 801810c:	2a02      	cmp	r2, #2
 801810e:	d101      	bne.n	8018114 <ip4addr_aton+0xf4>
 8018110:	2261      	movs	r2, #97	; 0x61
 8018112:	e000      	b.n	8018116 <ip4addr_aton+0xf6>
 8018114:	2241      	movs	r2, #65	; 0x41
 8018116:	1a8a      	subs	r2, r1, r2
 8018118:	4313      	orrs	r3, r2
 801811a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	3301      	adds	r3, #1
 8018120:	607b      	str	r3, [r7, #4]
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	781b      	ldrb	r3, [r3, #0]
 8018126:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801812a:	e7b7      	b.n	801809c <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801812c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018130:	2b2e      	cmp	r3, #46	; 0x2e
 8018132:	d114      	bne.n	801815e <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8018134:	f107 030c 	add.w	r3, r7, #12
 8018138:	330c      	adds	r3, #12
 801813a:	69fa      	ldr	r2, [r7, #28]
 801813c:	429a      	cmp	r2, r3
 801813e:	d301      	bcc.n	8018144 <ip4addr_aton+0x124>
        return 0;
 8018140:	2300      	movs	r3, #0
 8018142:	e08b      	b.n	801825c <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 8018144:	69fb      	ldr	r3, [r7, #28]
 8018146:	1d1a      	adds	r2, r3, #4
 8018148:	61fa      	str	r2, [r7, #28]
 801814a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801814c:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	3301      	adds	r3, #1
 8018152:	607b      	str	r3, [r7, #4]
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	781b      	ldrb	r3, [r3, #0]
 8018158:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801815c:	e76c      	b.n	8018038 <ip4addr_aton+0x18>
    } else {
      break;
 801815e:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8018160:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018164:	2b00      	cmp	r3, #0
 8018166:	d00b      	beq.n	8018180 <ip4addr_aton+0x160>
 8018168:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801816c:	3301      	adds	r3, #1
 801816e:	4a3d      	ldr	r2, [pc, #244]	; (8018264 <ip4addr_aton+0x244>)
 8018170:	4413      	add	r3, r2
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	f003 0308 	and.w	r3, r3, #8
 8018178:	2b00      	cmp	r3, #0
 801817a:	d101      	bne.n	8018180 <ip4addr_aton+0x160>
    return 0;
 801817c:	2300      	movs	r3, #0
 801817e:	e06d      	b.n	801825c <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8018180:	f107 030c 	add.w	r3, r7, #12
 8018184:	69fa      	ldr	r2, [r7, #28]
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	109b      	asrs	r3, r3, #2
 801818a:	3301      	adds	r3, #1
 801818c:	2b04      	cmp	r3, #4
 801818e:	d853      	bhi.n	8018238 <ip4addr_aton+0x218>
 8018190:	a201      	add	r2, pc, #4	; (adr r2, 8018198 <ip4addr_aton+0x178>)
 8018192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018196:	bf00      	nop
 8018198:	080181ad 	.word	0x080181ad
 801819c:	08018247 	.word	0x08018247
 80181a0:	080181b1 	.word	0x080181b1
 80181a4:	080181d3 	.word	0x080181d3
 80181a8:	08018201 	.word	0x08018201

    case 0:
      return 0;       /* initial nondigit */
 80181ac:	2300      	movs	r3, #0
 80181ae:	e055      	b.n	801825c <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80181b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80181b6:	d301      	bcc.n	80181bc <ip4addr_aton+0x19c>
        return 0;
 80181b8:	2300      	movs	r3, #0
 80181ba:	e04f      	b.n	801825c <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 80181bc:	68fb      	ldr	r3, [r7, #12]
 80181be:	2bff      	cmp	r3, #255	; 0xff
 80181c0:	d901      	bls.n	80181c6 <ip4addr_aton+0x1a6>
        return 0;
 80181c2:	2300      	movs	r3, #0
 80181c4:	e04a      	b.n	801825c <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 80181c6:	68fb      	ldr	r3, [r7, #12]
 80181c8:	061b      	lsls	r3, r3, #24
 80181ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181cc:	4313      	orrs	r3, r2
 80181ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80181d0:	e03a      	b.n	8018248 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80181d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80181d8:	d301      	bcc.n	80181de <ip4addr_aton+0x1be>
        return 0;
 80181da:	2300      	movs	r3, #0
 80181dc:	e03e      	b.n	801825c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2bff      	cmp	r3, #255	; 0xff
 80181e2:	d802      	bhi.n	80181ea <ip4addr_aton+0x1ca>
 80181e4:	693b      	ldr	r3, [r7, #16]
 80181e6:	2bff      	cmp	r3, #255	; 0xff
 80181e8:	d901      	bls.n	80181ee <ip4addr_aton+0x1ce>
        return 0;
 80181ea:	2300      	movs	r3, #0
 80181ec:	e036      	b.n	801825c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	061a      	lsls	r2, r3, #24
 80181f2:	693b      	ldr	r3, [r7, #16]
 80181f4:	041b      	lsls	r3, r3, #16
 80181f6:	4313      	orrs	r3, r2
 80181f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181fa:	4313      	orrs	r3, r2
 80181fc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80181fe:	e023      	b.n	8018248 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8018200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018202:	2bff      	cmp	r3, #255	; 0xff
 8018204:	d901      	bls.n	801820a <ip4addr_aton+0x1ea>
        return 0;
 8018206:	2300      	movs	r3, #0
 8018208:	e028      	b.n	801825c <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	2bff      	cmp	r3, #255	; 0xff
 801820e:	d805      	bhi.n	801821c <ip4addr_aton+0x1fc>
 8018210:	693b      	ldr	r3, [r7, #16]
 8018212:	2bff      	cmp	r3, #255	; 0xff
 8018214:	d802      	bhi.n	801821c <ip4addr_aton+0x1fc>
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	2bff      	cmp	r3, #255	; 0xff
 801821a:	d901      	bls.n	8018220 <ip4addr_aton+0x200>
        return 0;
 801821c:	2300      	movs	r3, #0
 801821e:	e01d      	b.n	801825c <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8018220:	68fb      	ldr	r3, [r7, #12]
 8018222:	061a      	lsls	r2, r3, #24
 8018224:	693b      	ldr	r3, [r7, #16]
 8018226:	041b      	lsls	r3, r3, #16
 8018228:	431a      	orrs	r2, r3
 801822a:	697b      	ldr	r3, [r7, #20]
 801822c:	021b      	lsls	r3, r3, #8
 801822e:	4313      	orrs	r3, r2
 8018230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018232:	4313      	orrs	r3, r2
 8018234:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8018236:	e007      	b.n	8018248 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8018238:	4b0b      	ldr	r3, [pc, #44]	; (8018268 <ip4addr_aton+0x248>)
 801823a:	22f9      	movs	r2, #249	; 0xf9
 801823c:	490b      	ldr	r1, [pc, #44]	; (801826c <ip4addr_aton+0x24c>)
 801823e:	480c      	ldr	r0, [pc, #48]	; (8018270 <ip4addr_aton+0x250>)
 8018240:	f002 f876 	bl	801a330 <iprintf>
      break;
 8018244:	e000      	b.n	8018248 <ip4addr_aton+0x228>
      break;
 8018246:	bf00      	nop
  }
  if (addr) {
 8018248:	683b      	ldr	r3, [r7, #0]
 801824a:	2b00      	cmp	r3, #0
 801824c:	d005      	beq.n	801825a <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801824e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018250:	f7f2 fd21 	bl	800ac96 <lwip_htonl>
 8018254:	4602      	mov	r2, r0
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801825a:	2301      	movs	r3, #1
}
 801825c:	4618      	mov	r0, r3
 801825e:	3728      	adds	r7, #40	; 0x28
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	080224a8 	.word	0x080224a8
 8018268:	08021ffc 	.word	0x08021ffc
 801826c:	08022038 	.word	0x08022038
 8018270:	08022044 	.word	0x08022044

08018274 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b082      	sub	sp, #8
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801827c:	2210      	movs	r2, #16
 801827e:	4904      	ldr	r1, [pc, #16]	; (8018290 <ip4addr_ntoa+0x1c>)
 8018280:	6878      	ldr	r0, [r7, #4]
 8018282:	f000 f807 	bl	8018294 <ip4addr_ntoa_r>
 8018286:	4603      	mov	r3, r0
}
 8018288:	4618      	mov	r0, r3
 801828a:	3708      	adds	r7, #8
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}
 8018290:	200215e0 	.word	0x200215e0

08018294 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8018294:	b480      	push	{r7}
 8018296:	b08d      	sub	sp, #52	; 0x34
 8018298:	af00      	add	r7, sp, #0
 801829a:	60f8      	str	r0, [r7, #12]
 801829c:	60b9      	str	r1, [r7, #8]
 801829e:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80182a0:	2300      	movs	r3, #0
 80182a2:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80182aa:	68bb      	ldr	r3, [r7, #8]
 80182ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80182ae:	f107 0318 	add.w	r3, r7, #24
 80182b2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80182b4:	2300      	movs	r3, #0
 80182b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80182ba:	e059      	b.n	8018370 <ip4addr_ntoa_r+0xdc>
    i = 0;
 80182bc:	2300      	movs	r3, #0
 80182be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80182c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c4:	781a      	ldrb	r2, [r3, #0]
 80182c6:	4b33      	ldr	r3, [pc, #204]	; (8018394 <ip4addr_ntoa_r+0x100>)
 80182c8:	fba3 1302 	umull	r1, r3, r3, r2
 80182cc:	08d9      	lsrs	r1, r3, #3
 80182ce:	460b      	mov	r3, r1
 80182d0:	009b      	lsls	r3, r3, #2
 80182d2:	440b      	add	r3, r1
 80182d4:	005b      	lsls	r3, r3, #1
 80182d6:	1ad3      	subs	r3, r2, r3
 80182d8:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80182da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182dc:	781b      	ldrb	r3, [r3, #0]
 80182de:	4a2d      	ldr	r2, [pc, #180]	; (8018394 <ip4addr_ntoa_r+0x100>)
 80182e0:	fba2 2303 	umull	r2, r3, r2, r3
 80182e4:	08db      	lsrs	r3, r3, #3
 80182e6:	b2da      	uxtb	r2, r3
 80182e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182ea:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80182ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80182f0:	1c5a      	adds	r2, r3, #1
 80182f2:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80182f6:	4619      	mov	r1, r3
 80182f8:	7ffb      	ldrb	r3, [r7, #31]
 80182fa:	3330      	adds	r3, #48	; 0x30
 80182fc:	b2da      	uxtb	r2, r3
 80182fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018302:	440b      	add	r3, r1
 8018304:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8018308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801830a:	781b      	ldrb	r3, [r3, #0]
 801830c:	2b00      	cmp	r3, #0
 801830e:	d1d8      	bne.n	80182c2 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8018310:	e012      	b.n	8018338 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8018312:	6a3b      	ldr	r3, [r7, #32]
 8018314:	1c5a      	adds	r2, r3, #1
 8018316:	623a      	str	r2, [r7, #32]
 8018318:	687a      	ldr	r2, [r7, #4]
 801831a:	429a      	cmp	r2, r3
 801831c:	dc01      	bgt.n	8018322 <ip4addr_ntoa_r+0x8e>
        return NULL;
 801831e:	2300      	movs	r3, #0
 8018320:	e031      	b.n	8018386 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8018322:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018328:	1c59      	adds	r1, r3, #1
 801832a:	62f9      	str	r1, [r7, #44]	; 0x2c
 801832c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8018330:	440a      	add	r2, r1
 8018332:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8018336:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8018338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801833c:	1e5a      	subs	r2, r3, #1
 801833e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8018342:	2b00      	cmp	r3, #0
 8018344:	d1e5      	bne.n	8018312 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8018346:	6a3b      	ldr	r3, [r7, #32]
 8018348:	1c5a      	adds	r2, r3, #1
 801834a:	623a      	str	r2, [r7, #32]
 801834c:	687a      	ldr	r2, [r7, #4]
 801834e:	429a      	cmp	r2, r3
 8018350:	dc01      	bgt.n	8018356 <ip4addr_ntoa_r+0xc2>
      return NULL;
 8018352:	2300      	movs	r3, #0
 8018354:	e017      	b.n	8018386 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8018356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018358:	1c5a      	adds	r2, r3, #1
 801835a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801835c:	222e      	movs	r2, #46	; 0x2e
 801835e:	701a      	strb	r2, [r3, #0]
    ap++;
 8018360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018362:	3301      	adds	r3, #1
 8018364:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8018366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801836a:	3301      	adds	r3, #1
 801836c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018374:	2b03      	cmp	r3, #3
 8018376:	d9a1      	bls.n	80182bc <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8018378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801837a:	3b01      	subs	r3, #1
 801837c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018380:	2200      	movs	r2, #0
 8018382:	701a      	strb	r2, [r3, #0]
  return buf;
 8018384:	68bb      	ldr	r3, [r7, #8]
}
 8018386:	4618      	mov	r0, r3
 8018388:	3734      	adds	r7, #52	; 0x34
 801838a:	46bd      	mov	sp, r7
 801838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018390:	4770      	bx	lr
 8018392:	bf00      	nop
 8018394:	cccccccd 	.word	0xcccccccd

08018398 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b084      	sub	sp, #16
 801839c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801839e:	2300      	movs	r3, #0
 80183a0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80183a2:	4b12      	ldr	r3, [pc, #72]	; (80183ec <ip_reass_tmr+0x54>)
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80183a8:	e018      	b.n	80183dc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	7fdb      	ldrb	r3, [r3, #31]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d00b      	beq.n	80183ca <ip_reass_tmr+0x32>
      r->timer--;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	7fdb      	ldrb	r3, [r3, #31]
 80183b6:	3b01      	subs	r3, #1
 80183b8:	b2da      	uxtb	r2, r3
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80183c2:	68fb      	ldr	r3, [r7, #12]
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	60fb      	str	r3, [r7, #12]
 80183c8:	e008      	b.n	80183dc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	681b      	ldr	r3, [r3, #0]
 80183d2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80183d4:	68b9      	ldr	r1, [r7, #8]
 80183d6:	6878      	ldr	r0, [r7, #4]
 80183d8:	f000 f80a 	bl	80183f0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d1e3      	bne.n	80183aa <ip_reass_tmr+0x12>
    }
  }
}
 80183e2:	bf00      	nop
 80183e4:	bf00      	nop
 80183e6:	3710      	adds	r7, #16
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	200215f0 	.word	0x200215f0

080183f0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b088      	sub	sp, #32
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
 80183f8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80183fa:	2300      	movs	r3, #0
 80183fc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80183fe:	683a      	ldr	r2, [r7, #0]
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	429a      	cmp	r2, r3
 8018404:	d105      	bne.n	8018412 <ip_reass_free_complete_datagram+0x22>
 8018406:	4b45      	ldr	r3, [pc, #276]	; (801851c <ip_reass_free_complete_datagram+0x12c>)
 8018408:	22ab      	movs	r2, #171	; 0xab
 801840a:	4945      	ldr	r1, [pc, #276]	; (8018520 <ip_reass_free_complete_datagram+0x130>)
 801840c:	4845      	ldr	r0, [pc, #276]	; (8018524 <ip_reass_free_complete_datagram+0x134>)
 801840e:	f001 ff8f 	bl	801a330 <iprintf>
  if (prev != NULL) {
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d00a      	beq.n	801842e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	687a      	ldr	r2, [r7, #4]
 801841e:	429a      	cmp	r2, r3
 8018420:	d005      	beq.n	801842e <ip_reass_free_complete_datagram+0x3e>
 8018422:	4b3e      	ldr	r3, [pc, #248]	; (801851c <ip_reass_free_complete_datagram+0x12c>)
 8018424:	22ad      	movs	r2, #173	; 0xad
 8018426:	4940      	ldr	r1, [pc, #256]	; (8018528 <ip_reass_free_complete_datagram+0x138>)
 8018428:	483e      	ldr	r0, [pc, #248]	; (8018524 <ip_reass_free_complete_datagram+0x134>)
 801842a:	f001 ff81 	bl	801a330 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018436:	697b      	ldr	r3, [r7, #20]
 8018438:	889b      	ldrh	r3, [r3, #4]
 801843a:	b29b      	uxth	r3, r3
 801843c:	2b00      	cmp	r3, #0
 801843e:	d12a      	bne.n	8018496 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018446:	697b      	ldr	r3, [r7, #20]
 8018448:	681a      	ldr	r2, [r3, #0]
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801844e:	69bb      	ldr	r3, [r7, #24]
 8018450:	6858      	ldr	r0, [r3, #4]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	3308      	adds	r3, #8
 8018456:	2214      	movs	r2, #20
 8018458:	4619      	mov	r1, r3
 801845a:	f001 f8bf 	bl	80195dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801845e:	2101      	movs	r1, #1
 8018460:	69b8      	ldr	r0, [r7, #24]
 8018462:	f7ff fa6d 	bl	8017940 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018466:	69b8      	ldr	r0, [r7, #24]
 8018468:	f7f5 f81c 	bl	800d4a4 <pbuf_clen>
 801846c:	4603      	mov	r3, r0
 801846e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018470:	8bfa      	ldrh	r2, [r7, #30]
 8018472:	8a7b      	ldrh	r3, [r7, #18]
 8018474:	4413      	add	r3, r2
 8018476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801847a:	db05      	blt.n	8018488 <ip_reass_free_complete_datagram+0x98>
 801847c:	4b27      	ldr	r3, [pc, #156]	; (801851c <ip_reass_free_complete_datagram+0x12c>)
 801847e:	22bc      	movs	r2, #188	; 0xbc
 8018480:	492a      	ldr	r1, [pc, #168]	; (801852c <ip_reass_free_complete_datagram+0x13c>)
 8018482:	4828      	ldr	r0, [pc, #160]	; (8018524 <ip_reass_free_complete_datagram+0x134>)
 8018484:	f001 ff54 	bl	801a330 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018488:	8bfa      	ldrh	r2, [r7, #30]
 801848a:	8a7b      	ldrh	r3, [r7, #18]
 801848c:	4413      	add	r3, r2
 801848e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018490:	69b8      	ldr	r0, [r7, #24]
 8018492:	f7f4 ff79 	bl	800d388 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	685b      	ldr	r3, [r3, #4]
 801849a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801849c:	e01f      	b.n	80184de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801849e:	69bb      	ldr	r3, [r7, #24]
 80184a0:	685b      	ldr	r3, [r3, #4]
 80184a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80184a4:	69bb      	ldr	r3, [r7, #24]
 80184a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80184a8:	697b      	ldr	r3, [r7, #20]
 80184aa:	681b      	ldr	r3, [r3, #0]
 80184ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80184ae:	68f8      	ldr	r0, [r7, #12]
 80184b0:	f7f4 fff8 	bl	800d4a4 <pbuf_clen>
 80184b4:	4603      	mov	r3, r0
 80184b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80184b8:	8bfa      	ldrh	r2, [r7, #30]
 80184ba:	8a7b      	ldrh	r3, [r7, #18]
 80184bc:	4413      	add	r3, r2
 80184be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80184c2:	db05      	blt.n	80184d0 <ip_reass_free_complete_datagram+0xe0>
 80184c4:	4b15      	ldr	r3, [pc, #84]	; (801851c <ip_reass_free_complete_datagram+0x12c>)
 80184c6:	22cc      	movs	r2, #204	; 0xcc
 80184c8:	4918      	ldr	r1, [pc, #96]	; (801852c <ip_reass_free_complete_datagram+0x13c>)
 80184ca:	4816      	ldr	r0, [pc, #88]	; (8018524 <ip_reass_free_complete_datagram+0x134>)
 80184cc:	f001 ff30 	bl	801a330 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80184d0:	8bfa      	ldrh	r2, [r7, #30]
 80184d2:	8a7b      	ldrh	r3, [r7, #18]
 80184d4:	4413      	add	r3, r2
 80184d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80184d8:	68f8      	ldr	r0, [r7, #12]
 80184da:	f7f4 ff55 	bl	800d388 <pbuf_free>
  while (p != NULL) {
 80184de:	69bb      	ldr	r3, [r7, #24]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d1dc      	bne.n	801849e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80184e4:	6839      	ldr	r1, [r7, #0]
 80184e6:	6878      	ldr	r0, [r7, #4]
 80184e8:	f000 f8c2 	bl	8018670 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80184ec:	4b10      	ldr	r3, [pc, #64]	; (8018530 <ip_reass_free_complete_datagram+0x140>)
 80184ee:	881b      	ldrh	r3, [r3, #0]
 80184f0:	8bfa      	ldrh	r2, [r7, #30]
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d905      	bls.n	8018502 <ip_reass_free_complete_datagram+0x112>
 80184f6:	4b09      	ldr	r3, [pc, #36]	; (801851c <ip_reass_free_complete_datagram+0x12c>)
 80184f8:	22d2      	movs	r2, #210	; 0xd2
 80184fa:	490e      	ldr	r1, [pc, #56]	; (8018534 <ip_reass_free_complete_datagram+0x144>)
 80184fc:	4809      	ldr	r0, [pc, #36]	; (8018524 <ip_reass_free_complete_datagram+0x134>)
 80184fe:	f001 ff17 	bl	801a330 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018502:	4b0b      	ldr	r3, [pc, #44]	; (8018530 <ip_reass_free_complete_datagram+0x140>)
 8018504:	881a      	ldrh	r2, [r3, #0]
 8018506:	8bfb      	ldrh	r3, [r7, #30]
 8018508:	1ad3      	subs	r3, r2, r3
 801850a:	b29a      	uxth	r2, r3
 801850c:	4b08      	ldr	r3, [pc, #32]	; (8018530 <ip_reass_free_complete_datagram+0x140>)
 801850e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018510:	8bfb      	ldrh	r3, [r7, #30]
}
 8018512:	4618      	mov	r0, r3
 8018514:	3720      	adds	r7, #32
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	0802206c 	.word	0x0802206c
 8018520:	080220a8 	.word	0x080220a8
 8018524:	080220b4 	.word	0x080220b4
 8018528:	080220dc 	.word	0x080220dc
 801852c:	080220f0 	.word	0x080220f0
 8018530:	200215f4 	.word	0x200215f4
 8018534:	08022110 	.word	0x08022110

08018538 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b08a      	sub	sp, #40	; 0x28
 801853c:	af00      	add	r7, sp, #0
 801853e:	6078      	str	r0, [r7, #4]
 8018540:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018542:	2300      	movs	r3, #0
 8018544:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018546:	2300      	movs	r3, #0
 8018548:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801854a:	2300      	movs	r3, #0
 801854c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801854e:	2300      	movs	r3, #0
 8018550:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018552:	2300      	movs	r3, #0
 8018554:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018556:	4b28      	ldr	r3, [pc, #160]	; (80185f8 <ip_reass_remove_oldest_datagram+0xc0>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801855c:	e030      	b.n	80185c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801855e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018560:	695a      	ldr	r2, [r3, #20]
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	68db      	ldr	r3, [r3, #12]
 8018566:	429a      	cmp	r2, r3
 8018568:	d10c      	bne.n	8018584 <ip_reass_remove_oldest_datagram+0x4c>
 801856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801856c:	699a      	ldr	r2, [r3, #24]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	691b      	ldr	r3, [r3, #16]
 8018572:	429a      	cmp	r2, r3
 8018574:	d106      	bne.n	8018584 <ip_reass_remove_oldest_datagram+0x4c>
 8018576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018578:	899a      	ldrh	r2, [r3, #12]
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	889b      	ldrh	r3, [r3, #4]
 801857e:	b29b      	uxth	r3, r3
 8018580:	429a      	cmp	r2, r3
 8018582:	d014      	beq.n	80185ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018584:	693b      	ldr	r3, [r7, #16]
 8018586:	3301      	adds	r3, #1
 8018588:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801858a:	6a3b      	ldr	r3, [r7, #32]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d104      	bne.n	801859a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018592:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018594:	69fb      	ldr	r3, [r7, #28]
 8018596:	61bb      	str	r3, [r7, #24]
 8018598:	e009      	b.n	80185ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801859c:	7fda      	ldrb	r2, [r3, #31]
 801859e:	6a3b      	ldr	r3, [r7, #32]
 80185a0:	7fdb      	ldrb	r3, [r3, #31]
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d803      	bhi.n	80185ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80185a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80185aa:	69fb      	ldr	r3, [r7, #28]
 80185ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80185ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d001      	beq.n	80185ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80185b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80185ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80185c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d1cb      	bne.n	801855e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80185c6:	6a3b      	ldr	r3, [r7, #32]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d008      	beq.n	80185de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80185cc:	69b9      	ldr	r1, [r7, #24]
 80185ce:	6a38      	ldr	r0, [r7, #32]
 80185d0:	f7ff ff0e 	bl	80183f0 <ip_reass_free_complete_datagram>
 80185d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80185d6:	697a      	ldr	r2, [r7, #20]
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	4413      	add	r3, r2
 80185dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80185de:	697a      	ldr	r2, [r7, #20]
 80185e0:	683b      	ldr	r3, [r7, #0]
 80185e2:	429a      	cmp	r2, r3
 80185e4:	da02      	bge.n	80185ec <ip_reass_remove_oldest_datagram+0xb4>
 80185e6:	693b      	ldr	r3, [r7, #16]
 80185e8:	2b01      	cmp	r3, #1
 80185ea:	dcac      	bgt.n	8018546 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80185ec:	697b      	ldr	r3, [r7, #20]
}
 80185ee:	4618      	mov	r0, r3
 80185f0:	3728      	adds	r7, #40	; 0x28
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	200215f0 	.word	0x200215f0

080185fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b084      	sub	sp, #16
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
 8018604:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018606:	2004      	movs	r0, #4
 8018608:	f7f3 ffbc 	bl	800c584 <memp_malloc>
 801860c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d110      	bne.n	8018636 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018614:	6839      	ldr	r1, [r7, #0]
 8018616:	6878      	ldr	r0, [r7, #4]
 8018618:	f7ff ff8e 	bl	8018538 <ip_reass_remove_oldest_datagram>
 801861c:	4602      	mov	r2, r0
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	4293      	cmp	r3, r2
 8018622:	dc03      	bgt.n	801862c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018624:	2004      	movs	r0, #4
 8018626:	f7f3 ffad 	bl	800c584 <memp_malloc>
 801862a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d101      	bne.n	8018636 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018632:	2300      	movs	r3, #0
 8018634:	e016      	b.n	8018664 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018636:	2220      	movs	r2, #32
 8018638:	2100      	movs	r1, #0
 801863a:	68f8      	ldr	r0, [r7, #12]
 801863c:	f000 fff6 	bl	801962c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018640:	68fb      	ldr	r3, [r7, #12]
 8018642:	220f      	movs	r2, #15
 8018644:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018646:	4b09      	ldr	r3, [pc, #36]	; (801866c <ip_reass_enqueue_new_datagram+0x70>)
 8018648:	681a      	ldr	r2, [r3, #0]
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801864e:	4a07      	ldr	r2, [pc, #28]	; (801866c <ip_reass_enqueue_new_datagram+0x70>)
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	3308      	adds	r3, #8
 8018658:	2214      	movs	r2, #20
 801865a:	6879      	ldr	r1, [r7, #4]
 801865c:	4618      	mov	r0, r3
 801865e:	f000 ffbd 	bl	80195dc <memcpy>
  return ipr;
 8018662:	68fb      	ldr	r3, [r7, #12]
}
 8018664:	4618      	mov	r0, r3
 8018666:	3710      	adds	r7, #16
 8018668:	46bd      	mov	sp, r7
 801866a:	bd80      	pop	{r7, pc}
 801866c:	200215f0 	.word	0x200215f0

08018670 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b082      	sub	sp, #8
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801867a:	4b10      	ldr	r3, [pc, #64]	; (80186bc <ip_reass_dequeue_datagram+0x4c>)
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	687a      	ldr	r2, [r7, #4]
 8018680:	429a      	cmp	r2, r3
 8018682:	d104      	bne.n	801868e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	4a0c      	ldr	r2, [pc, #48]	; (80186bc <ip_reass_dequeue_datagram+0x4c>)
 801868a:	6013      	str	r3, [r2, #0]
 801868c:	e00d      	b.n	80186aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801868e:	683b      	ldr	r3, [r7, #0]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d106      	bne.n	80186a2 <ip_reass_dequeue_datagram+0x32>
 8018694:	4b0a      	ldr	r3, [pc, #40]	; (80186c0 <ip_reass_dequeue_datagram+0x50>)
 8018696:	f240 1245 	movw	r2, #325	; 0x145
 801869a:	490a      	ldr	r1, [pc, #40]	; (80186c4 <ip_reass_dequeue_datagram+0x54>)
 801869c:	480a      	ldr	r0, [pc, #40]	; (80186c8 <ip_reass_dequeue_datagram+0x58>)
 801869e:	f001 fe47 	bl	801a330 <iprintf>
    prev->next = ipr->next;
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	681a      	ldr	r2, [r3, #0]
 80186a6:	683b      	ldr	r3, [r7, #0]
 80186a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80186aa:	6879      	ldr	r1, [r7, #4]
 80186ac:	2004      	movs	r0, #4
 80186ae:	f7f3 ffbb 	bl	800c628 <memp_free>
}
 80186b2:	bf00      	nop
 80186b4:	3708      	adds	r7, #8
 80186b6:	46bd      	mov	sp, r7
 80186b8:	bd80      	pop	{r7, pc}
 80186ba:	bf00      	nop
 80186bc:	200215f0 	.word	0x200215f0
 80186c0:	0802206c 	.word	0x0802206c
 80186c4:	08022134 	.word	0x08022134
 80186c8:	080220b4 	.word	0x080220b4

080186cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b08c      	sub	sp, #48	; 0x30
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80186d8:	2300      	movs	r3, #0
 80186da:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80186dc:	2301      	movs	r3, #1
 80186de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80186e0:	68bb      	ldr	r3, [r7, #8]
 80186e2:	685b      	ldr	r3, [r3, #4]
 80186e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80186e6:	69fb      	ldr	r3, [r7, #28]
 80186e8:	885b      	ldrh	r3, [r3, #2]
 80186ea:	b29b      	uxth	r3, r3
 80186ec:	4618      	mov	r0, r3
 80186ee:	f7f2 fabd 	bl	800ac6c <lwip_htons>
 80186f2:	4603      	mov	r3, r0
 80186f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80186f6:	69fb      	ldr	r3, [r7, #28]
 80186f8:	781b      	ldrb	r3, [r3, #0]
 80186fa:	f003 030f 	and.w	r3, r3, #15
 80186fe:	b2db      	uxtb	r3, r3
 8018700:	009b      	lsls	r3, r3, #2
 8018702:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018704:	7e7b      	ldrb	r3, [r7, #25]
 8018706:	b29b      	uxth	r3, r3
 8018708:	8b7a      	ldrh	r2, [r7, #26]
 801870a:	429a      	cmp	r2, r3
 801870c:	d202      	bcs.n	8018714 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801870e:	f04f 33ff 	mov.w	r3, #4294967295
 8018712:	e135      	b.n	8018980 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018714:	7e7b      	ldrb	r3, [r7, #25]
 8018716:	b29b      	uxth	r3, r3
 8018718:	8b7a      	ldrh	r2, [r7, #26]
 801871a:	1ad3      	subs	r3, r2, r3
 801871c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801871e:	69fb      	ldr	r3, [r7, #28]
 8018720:	88db      	ldrh	r3, [r3, #6]
 8018722:	b29b      	uxth	r3, r3
 8018724:	4618      	mov	r0, r3
 8018726:	f7f2 faa1 	bl	800ac6c <lwip_htons>
 801872a:	4603      	mov	r3, r0
 801872c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018730:	b29b      	uxth	r3, r3
 8018732:	00db      	lsls	r3, r3, #3
 8018734:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018736:	68bb      	ldr	r3, [r7, #8]
 8018738:	685b      	ldr	r3, [r3, #4]
 801873a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801873c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801873e:	2200      	movs	r2, #0
 8018740:	701a      	strb	r2, [r3, #0]
 8018742:	2200      	movs	r2, #0
 8018744:	705a      	strb	r2, [r3, #1]
 8018746:	2200      	movs	r2, #0
 8018748:	709a      	strb	r2, [r3, #2]
 801874a:	2200      	movs	r2, #0
 801874c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018750:	8afa      	ldrh	r2, [r7, #22]
 8018752:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018754:	8afa      	ldrh	r2, [r7, #22]
 8018756:	8b7b      	ldrh	r3, [r7, #26]
 8018758:	4413      	add	r3, r2
 801875a:	b29a      	uxth	r2, r3
 801875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801875e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018762:	88db      	ldrh	r3, [r3, #6]
 8018764:	b29b      	uxth	r3, r3
 8018766:	8afa      	ldrh	r2, [r7, #22]
 8018768:	429a      	cmp	r2, r3
 801876a:	d902      	bls.n	8018772 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801876c:	f04f 33ff 	mov.w	r3, #4294967295
 8018770:	e106      	b.n	8018980 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	685b      	ldr	r3, [r3, #4]
 8018776:	627b      	str	r3, [r7, #36]	; 0x24
 8018778:	e068      	b.n	801884c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801877c:	685b      	ldr	r3, [r3, #4]
 801877e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018782:	889b      	ldrh	r3, [r3, #4]
 8018784:	b29a      	uxth	r2, r3
 8018786:	693b      	ldr	r3, [r7, #16]
 8018788:	889b      	ldrh	r3, [r3, #4]
 801878a:	b29b      	uxth	r3, r3
 801878c:	429a      	cmp	r2, r3
 801878e:	d235      	bcs.n	80187fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018794:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018798:	2b00      	cmp	r3, #0
 801879a:	d020      	beq.n	80187de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801879e:	889b      	ldrh	r3, [r3, #4]
 80187a0:	b29a      	uxth	r2, r3
 80187a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187a4:	88db      	ldrh	r3, [r3, #6]
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	429a      	cmp	r2, r3
 80187aa:	d307      	bcc.n	80187bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80187ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ae:	88db      	ldrh	r3, [r3, #6]
 80187b0:	b29a      	uxth	r2, r3
 80187b2:	693b      	ldr	r3, [r7, #16]
 80187b4:	889b      	ldrh	r3, [r3, #4]
 80187b6:	b29b      	uxth	r3, r3
 80187b8:	429a      	cmp	r2, r3
 80187ba:	d902      	bls.n	80187c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187bc:	f04f 33ff 	mov.w	r3, #4294967295
 80187c0:	e0de      	b.n	8018980 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80187c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c4:	68ba      	ldr	r2, [r7, #8]
 80187c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80187c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ca:	88db      	ldrh	r3, [r3, #6]
 80187cc:	b29a      	uxth	r2, r3
 80187ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d0:	889b      	ldrh	r3, [r3, #4]
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	429a      	cmp	r2, r3
 80187d6:	d03d      	beq.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80187d8:	2300      	movs	r3, #0
 80187da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80187dc:	e03a      	b.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80187de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187e0:	88db      	ldrh	r3, [r3, #6]
 80187e2:	b29a      	uxth	r2, r3
 80187e4:	693b      	ldr	r3, [r7, #16]
 80187e6:	889b      	ldrh	r3, [r3, #4]
 80187e8:	b29b      	uxth	r3, r3
 80187ea:	429a      	cmp	r2, r3
 80187ec:	d902      	bls.n	80187f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187ee:	f04f 33ff 	mov.w	r3, #4294967295
 80187f2:	e0c5      	b.n	8018980 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	68ba      	ldr	r2, [r7, #8]
 80187f8:	605a      	str	r2, [r3, #4]
      break;
 80187fa:	e02b      	b.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80187fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fe:	889b      	ldrh	r3, [r3, #4]
 8018800:	b29a      	uxth	r2, r3
 8018802:	693b      	ldr	r3, [r7, #16]
 8018804:	889b      	ldrh	r3, [r3, #4]
 8018806:	b29b      	uxth	r3, r3
 8018808:	429a      	cmp	r2, r3
 801880a:	d102      	bne.n	8018812 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801880c:	f04f 33ff 	mov.w	r3, #4294967295
 8018810:	e0b6      	b.n	8018980 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018814:	889b      	ldrh	r3, [r3, #4]
 8018816:	b29a      	uxth	r2, r3
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	88db      	ldrh	r3, [r3, #6]
 801881c:	b29b      	uxth	r3, r3
 801881e:	429a      	cmp	r2, r3
 8018820:	d202      	bcs.n	8018828 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018822:	f04f 33ff 	mov.w	r3, #4294967295
 8018826:	e0ab      	b.n	8018980 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801882a:	2b00      	cmp	r3, #0
 801882c:	d009      	beq.n	8018842 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018830:	88db      	ldrh	r3, [r3, #6]
 8018832:	b29a      	uxth	r2, r3
 8018834:	693b      	ldr	r3, [r7, #16]
 8018836:	889b      	ldrh	r3, [r3, #4]
 8018838:	b29b      	uxth	r3, r3
 801883a:	429a      	cmp	r2, r3
 801883c:	d001      	beq.n	8018842 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801883e:	2300      	movs	r3, #0
 8018840:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018842:	693b      	ldr	r3, [r7, #16]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801884e:	2b00      	cmp	r3, #0
 8018850:	d193      	bne.n	801877a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018852:	e000      	b.n	8018856 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018854:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018858:	2b00      	cmp	r3, #0
 801885a:	d12d      	bne.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801885c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801885e:	2b00      	cmp	r3, #0
 8018860:	d01c      	beq.n	801889c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018864:	88db      	ldrh	r3, [r3, #6]
 8018866:	b29a      	uxth	r2, r3
 8018868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801886a:	889b      	ldrh	r3, [r3, #4]
 801886c:	b29b      	uxth	r3, r3
 801886e:	429a      	cmp	r2, r3
 8018870:	d906      	bls.n	8018880 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018872:	4b45      	ldr	r3, [pc, #276]	; (8018988 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018874:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018878:	4944      	ldr	r1, [pc, #272]	; (801898c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801887a:	4845      	ldr	r0, [pc, #276]	; (8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801887c:	f001 fd58 	bl	801a330 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018882:	68ba      	ldr	r2, [r7, #8]
 8018884:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018888:	88db      	ldrh	r3, [r3, #6]
 801888a:	b29a      	uxth	r2, r3
 801888c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801888e:	889b      	ldrh	r3, [r3, #4]
 8018890:	b29b      	uxth	r3, r3
 8018892:	429a      	cmp	r2, r3
 8018894:	d010      	beq.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018896:	2300      	movs	r3, #0
 8018898:	623b      	str	r3, [r7, #32]
 801889a:	e00d      	b.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	685b      	ldr	r3, [r3, #4]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d006      	beq.n	80188b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80188a4:	4b38      	ldr	r3, [pc, #224]	; (8018988 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80188aa:	493a      	ldr	r1, [pc, #232]	; (8018994 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80188ac:	4838      	ldr	r0, [pc, #224]	; (8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188ae:	f001 fd3f 	bl	801a330 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	68ba      	ldr	r2, [r7, #8]
 80188b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d105      	bne.n	80188ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	7f9b      	ldrb	r3, [r3, #30]
 80188c2:	f003 0301 	and.w	r3, r3, #1
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d059      	beq.n	801897e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80188ca:	6a3b      	ldr	r3, [r7, #32]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d04f      	beq.n	8018970 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	685b      	ldr	r3, [r3, #4]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d006      	beq.n	80188e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	889b      	ldrh	r3, [r3, #4]
 80188e0:	b29b      	uxth	r3, r3
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d002      	beq.n	80188ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80188e6:	2300      	movs	r3, #0
 80188e8:	623b      	str	r3, [r7, #32]
 80188ea:	e041      	b.n	8018970 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80188ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80188f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80188f6:	e012      	b.n	801891e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80188f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fa:	685b      	ldr	r3, [r3, #4]
 80188fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80188fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018900:	88db      	ldrh	r3, [r3, #6]
 8018902:	b29a      	uxth	r2, r3
 8018904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018906:	889b      	ldrh	r3, [r3, #4]
 8018908:	b29b      	uxth	r3, r3
 801890a:	429a      	cmp	r2, r3
 801890c:	d002      	beq.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801890e:	2300      	movs	r3, #0
 8018910:	623b      	str	r3, [r7, #32]
            break;
 8018912:	e007      	b.n	8018924 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018916:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801891e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018920:	2b00      	cmp	r3, #0
 8018922:	d1e9      	bne.n	80188f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018924:	6a3b      	ldr	r3, [r7, #32]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d022      	beq.n	8018970 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801892a:	68fb      	ldr	r3, [r7, #12]
 801892c:	685b      	ldr	r3, [r3, #4]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d106      	bne.n	8018940 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018932:	4b15      	ldr	r3, [pc, #84]	; (8018988 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018934:	f240 12df 	movw	r2, #479	; 0x1df
 8018938:	4917      	ldr	r1, [pc, #92]	; (8018998 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801893a:	4815      	ldr	r0, [pc, #84]	; (8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801893c:	f001 fcf8 	bl	801a330 <iprintf>
          LWIP_ASSERT("sanity check",
 8018940:	68fb      	ldr	r3, [r7, #12]
 8018942:	685b      	ldr	r3, [r3, #4]
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018948:	429a      	cmp	r2, r3
 801894a:	d106      	bne.n	801895a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801894c:	4b0e      	ldr	r3, [pc, #56]	; (8018988 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801894e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018952:	4911      	ldr	r1, [pc, #68]	; (8018998 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018954:	480e      	ldr	r0, [pc, #56]	; (8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018956:	f001 fceb 	bl	801a330 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801895a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	2b00      	cmp	r3, #0
 8018960:	d006      	beq.n	8018970 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018962:	4b09      	ldr	r3, [pc, #36]	; (8018988 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018964:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018968:	490c      	ldr	r1, [pc, #48]	; (801899c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801896a:	4809      	ldr	r0, [pc, #36]	; (8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801896c:	f001 fce0 	bl	801a330 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018970:	6a3b      	ldr	r3, [r7, #32]
 8018972:	2b00      	cmp	r3, #0
 8018974:	bf14      	ite	ne
 8018976:	2301      	movne	r3, #1
 8018978:	2300      	moveq	r3, #0
 801897a:	b2db      	uxtb	r3, r3
 801897c:	e000      	b.n	8018980 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801897e:	2300      	movs	r3, #0
}
 8018980:	4618      	mov	r0, r3
 8018982:	3730      	adds	r7, #48	; 0x30
 8018984:	46bd      	mov	sp, r7
 8018986:	bd80      	pop	{r7, pc}
 8018988:	0802206c 	.word	0x0802206c
 801898c:	08022150 	.word	0x08022150
 8018990:	080220b4 	.word	0x080220b4
 8018994:	08022170 	.word	0x08022170
 8018998:	080221a8 	.word	0x080221a8
 801899c:	080221b8 	.word	0x080221b8

080189a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b08e      	sub	sp, #56	; 0x38
 80189a4:	af00      	add	r7, sp, #0
 80189a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	685b      	ldr	r3, [r3, #4]
 80189ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80189ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189b0:	781b      	ldrb	r3, [r3, #0]
 80189b2:	f003 030f 	and.w	r3, r3, #15
 80189b6:	b2db      	uxtb	r3, r3
 80189b8:	009b      	lsls	r3, r3, #2
 80189ba:	b2db      	uxtb	r3, r3
 80189bc:	2b14      	cmp	r3, #20
 80189be:	f040 8167 	bne.w	8018c90 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80189c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c4:	88db      	ldrh	r3, [r3, #6]
 80189c6:	b29b      	uxth	r3, r3
 80189c8:	4618      	mov	r0, r3
 80189ca:	f7f2 f94f 	bl	800ac6c <lwip_htons>
 80189ce:	4603      	mov	r3, r0
 80189d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189d4:	b29b      	uxth	r3, r3
 80189d6:	00db      	lsls	r3, r3, #3
 80189d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80189da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189dc:	885b      	ldrh	r3, [r3, #2]
 80189de:	b29b      	uxth	r3, r3
 80189e0:	4618      	mov	r0, r3
 80189e2:	f7f2 f943 	bl	800ac6c <lwip_htons>
 80189e6:	4603      	mov	r3, r0
 80189e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80189ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ec:	781b      	ldrb	r3, [r3, #0]
 80189ee:	f003 030f 	and.w	r3, r3, #15
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	009b      	lsls	r3, r3, #2
 80189f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80189fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a02:	429a      	cmp	r2, r3
 8018a04:	f0c0 8146 	bcc.w	8018c94 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018a0c:	b29b      	uxth	r3, r3
 8018a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018a10:	1ad3      	subs	r3, r2, r3
 8018a12:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018a14:	6878      	ldr	r0, [r7, #4]
 8018a16:	f7f4 fd45 	bl	800d4a4 <pbuf_clen>
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018a1e:	4b9f      	ldr	r3, [pc, #636]	; (8018c9c <ip4_reass+0x2fc>)
 8018a20:	881b      	ldrh	r3, [r3, #0]
 8018a22:	461a      	mov	r2, r3
 8018a24:	8c3b      	ldrh	r3, [r7, #32]
 8018a26:	4413      	add	r3, r2
 8018a28:	2b0a      	cmp	r3, #10
 8018a2a:	dd10      	ble.n	8018a4e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018a2c:	8c3b      	ldrh	r3, [r7, #32]
 8018a2e:	4619      	mov	r1, r3
 8018a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a32:	f7ff fd81 	bl	8018538 <ip_reass_remove_oldest_datagram>
 8018a36:	4603      	mov	r3, r0
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	f000 812d 	beq.w	8018c98 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018a3e:	4b97      	ldr	r3, [pc, #604]	; (8018c9c <ip4_reass+0x2fc>)
 8018a40:	881b      	ldrh	r3, [r3, #0]
 8018a42:	461a      	mov	r2, r3
 8018a44:	8c3b      	ldrh	r3, [r7, #32]
 8018a46:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018a48:	2b0a      	cmp	r3, #10
 8018a4a:	f300 8125 	bgt.w	8018c98 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018a4e:	4b94      	ldr	r3, [pc, #592]	; (8018ca0 <ip4_reass+0x300>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	633b      	str	r3, [r7, #48]	; 0x30
 8018a54:	e015      	b.n	8018a82 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a58:	695a      	ldr	r2, [r3, #20]
 8018a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a5c:	68db      	ldr	r3, [r3, #12]
 8018a5e:	429a      	cmp	r2, r3
 8018a60:	d10c      	bne.n	8018a7c <ip4_reass+0xdc>
 8018a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a64:	699a      	ldr	r2, [r3, #24]
 8018a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a68:	691b      	ldr	r3, [r3, #16]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d106      	bne.n	8018a7c <ip4_reass+0xdc>
 8018a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a70:	899a      	ldrh	r2, [r3, #12]
 8018a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a74:	889b      	ldrh	r3, [r3, #4]
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	d006      	beq.n	8018a8a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	633b      	str	r3, [r7, #48]	; 0x30
 8018a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d1e6      	bne.n	8018a56 <ip4_reass+0xb6>
 8018a88:	e000      	b.n	8018a8c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018a8a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d109      	bne.n	8018aa6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018a92:	8c3b      	ldrh	r3, [r7, #32]
 8018a94:	4619      	mov	r1, r3
 8018a96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a98:	f7ff fdb0 	bl	80185fc <ip_reass_enqueue_new_datagram>
 8018a9c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d11c      	bne.n	8018ade <ip4_reass+0x13e>
      goto nullreturn;
 8018aa4:	e109      	b.n	8018cba <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aa8:	88db      	ldrh	r3, [r3, #6]
 8018aaa:	b29b      	uxth	r3, r3
 8018aac:	4618      	mov	r0, r3
 8018aae:	f7f2 f8dd 	bl	800ac6c <lwip_htons>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d110      	bne.n	8018ade <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018abe:	89db      	ldrh	r3, [r3, #14]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	f7f2 f8d3 	bl	800ac6c <lwip_htons>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d006      	beq.n	8018ade <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ad2:	3308      	adds	r3, #8
 8018ad4:	2214      	movs	r2, #20
 8018ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f000 fd7f 	bl	80195dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae0:	88db      	ldrh	r3, [r3, #6]
 8018ae2:	b29b      	uxth	r3, r3
 8018ae4:	f003 0320 	and.w	r3, r3, #32
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	bf0c      	ite	eq
 8018aec:	2301      	moveq	r3, #1
 8018aee:	2300      	movne	r3, #0
 8018af0:	b2db      	uxtb	r3, r3
 8018af2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018af4:	69fb      	ldr	r3, [r7, #28]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d00e      	beq.n	8018b18 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018afa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018afe:	4413      	add	r3, r2
 8018b00:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018b02:	8b7a      	ldrh	r2, [r7, #26]
 8018b04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018b06:	429a      	cmp	r2, r3
 8018b08:	f0c0 80a0 	bcc.w	8018c4c <ip4_reass+0x2ac>
 8018b0c:	8b7b      	ldrh	r3, [r7, #26]
 8018b0e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018b12:	4293      	cmp	r3, r2
 8018b14:	f200 809a 	bhi.w	8018c4c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018b18:	69fa      	ldr	r2, [r7, #28]
 8018b1a:	6879      	ldr	r1, [r7, #4]
 8018b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b1e:	f7ff fdd5 	bl	80186cc <ip_reass_chain_frag_into_datagram_and_validate>
 8018b22:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018b24:	697b      	ldr	r3, [r7, #20]
 8018b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b2a:	f000 8091 	beq.w	8018c50 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018b2e:	4b5b      	ldr	r3, [pc, #364]	; (8018c9c <ip4_reass+0x2fc>)
 8018b30:	881a      	ldrh	r2, [r3, #0]
 8018b32:	8c3b      	ldrh	r3, [r7, #32]
 8018b34:	4413      	add	r3, r2
 8018b36:	b29a      	uxth	r2, r3
 8018b38:	4b58      	ldr	r3, [pc, #352]	; (8018c9c <ip4_reass+0x2fc>)
 8018b3a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018b3c:	69fb      	ldr	r3, [r7, #28]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d00d      	beq.n	8018b5e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018b42:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b46:	4413      	add	r3, r2
 8018b48:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b4c:	8a7a      	ldrh	r2, [r7, #18]
 8018b4e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b52:	7f9b      	ldrb	r3, [r3, #30]
 8018b54:	f043 0301 	orr.w	r3, r3, #1
 8018b58:	b2da      	uxtb	r2, r3
 8018b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b5c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018b5e:	697b      	ldr	r3, [r7, #20]
 8018b60:	2b01      	cmp	r3, #1
 8018b62:	d171      	bne.n	8018c48 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b66:	8b9b      	ldrh	r3, [r3, #28]
 8018b68:	3314      	adds	r3, #20
 8018b6a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b6e:	685b      	ldr	r3, [r3, #4]
 8018b70:	685b      	ldr	r3, [r3, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b78:	685b      	ldr	r3, [r3, #4]
 8018b7a:	685b      	ldr	r3, [r3, #4]
 8018b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b80:	3308      	adds	r3, #8
 8018b82:	2214      	movs	r2, #20
 8018b84:	4619      	mov	r1, r3
 8018b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b88:	f000 fd28 	bl	80195dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018b8c:	8a3b      	ldrh	r3, [r7, #16]
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7f2 f86c 	bl	800ac6c <lwip_htons>
 8018b94:	4603      	mov	r3, r0
 8018b96:	461a      	mov	r2, r3
 8018b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b9a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b9e:	2200      	movs	r2, #0
 8018ba0:	719a      	strb	r2, [r3, #6]
 8018ba2:	2200      	movs	r2, #0
 8018ba4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ba8:	2200      	movs	r2, #0
 8018baa:	729a      	strb	r2, [r3, #10]
 8018bac:	2200      	movs	r2, #0
 8018bae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bb2:	685b      	ldr	r3, [r3, #4]
 8018bb4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018bb6:	e00d      	b.n	8018bd4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bba:	685b      	ldr	r3, [r3, #4]
 8018bbc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018bbe:	2114      	movs	r1, #20
 8018bc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018bc2:	f7f4 fb5b 	bl	800d27c <pbuf_remove_header>
      pbuf_cat(p, r);
 8018bc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018bc8:	6878      	ldr	r0, [r7, #4]
 8018bca:	f7f4 fcab 	bl	800d524 <pbuf_cat>
      r = iprh->next_pbuf;
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d1ee      	bne.n	8018bb8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018bda:	4b31      	ldr	r3, [pc, #196]	; (8018ca0 <ip4_reass+0x300>)
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018be0:	429a      	cmp	r2, r3
 8018be2:	d102      	bne.n	8018bea <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018be4:	2300      	movs	r3, #0
 8018be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018be8:	e010      	b.n	8018c0c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018bea:	4b2d      	ldr	r3, [pc, #180]	; (8018ca0 <ip4_reass+0x300>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018bf0:	e007      	b.n	8018c02 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bf4:	681b      	ldr	r3, [r3, #0]
 8018bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d006      	beq.n	8018c0a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	d1f4      	bne.n	8018bf2 <ip4_reass+0x252>
 8018c08:	e000      	b.n	8018c0c <ip4_reass+0x26c>
          break;
 8018c0a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c10:	f7ff fd2e 	bl	8018670 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018c14:	6878      	ldr	r0, [r7, #4]
 8018c16:	f7f4 fc45 	bl	800d4a4 <pbuf_clen>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018c1e:	4b1f      	ldr	r3, [pc, #124]	; (8018c9c <ip4_reass+0x2fc>)
 8018c20:	881b      	ldrh	r3, [r3, #0]
 8018c22:	8c3a      	ldrh	r2, [r7, #32]
 8018c24:	429a      	cmp	r2, r3
 8018c26:	d906      	bls.n	8018c36 <ip4_reass+0x296>
 8018c28:	4b1e      	ldr	r3, [pc, #120]	; (8018ca4 <ip4_reass+0x304>)
 8018c2a:	f240 229b 	movw	r2, #667	; 0x29b
 8018c2e:	491e      	ldr	r1, [pc, #120]	; (8018ca8 <ip4_reass+0x308>)
 8018c30:	481e      	ldr	r0, [pc, #120]	; (8018cac <ip4_reass+0x30c>)
 8018c32:	f001 fb7d 	bl	801a330 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018c36:	4b19      	ldr	r3, [pc, #100]	; (8018c9c <ip4_reass+0x2fc>)
 8018c38:	881a      	ldrh	r2, [r3, #0]
 8018c3a:	8c3b      	ldrh	r3, [r7, #32]
 8018c3c:	1ad3      	subs	r3, r2, r3
 8018c3e:	b29a      	uxth	r2, r3
 8018c40:	4b16      	ldr	r3, [pc, #88]	; (8018c9c <ip4_reass+0x2fc>)
 8018c42:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	e03c      	b.n	8018cc2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	e03a      	b.n	8018cc2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018c4c:	bf00      	nop
 8018c4e:	e000      	b.n	8018c52 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018c50:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d106      	bne.n	8018c66 <ip4_reass+0x2c6>
 8018c58:	4b12      	ldr	r3, [pc, #72]	; (8018ca4 <ip4_reass+0x304>)
 8018c5a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018c5e:	4914      	ldr	r1, [pc, #80]	; (8018cb0 <ip4_reass+0x310>)
 8018c60:	4812      	ldr	r0, [pc, #72]	; (8018cac <ip4_reass+0x30c>)
 8018c62:	f001 fb65 	bl	801a330 <iprintf>
  if (ipr->p == NULL) {
 8018c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c68:	685b      	ldr	r3, [r3, #4]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d124      	bne.n	8018cb8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018c6e:	4b0c      	ldr	r3, [pc, #48]	; (8018ca0 <ip4_reass+0x300>)
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c74:	429a      	cmp	r2, r3
 8018c76:	d006      	beq.n	8018c86 <ip4_reass+0x2e6>
 8018c78:	4b0a      	ldr	r3, [pc, #40]	; (8018ca4 <ip4_reass+0x304>)
 8018c7a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018c7e:	490d      	ldr	r1, [pc, #52]	; (8018cb4 <ip4_reass+0x314>)
 8018c80:	480a      	ldr	r0, [pc, #40]	; (8018cac <ip4_reass+0x30c>)
 8018c82:	f001 fb55 	bl	801a330 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018c86:	2100      	movs	r1, #0
 8018c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c8a:	f7ff fcf1 	bl	8018670 <ip_reass_dequeue_datagram>
 8018c8e:	e014      	b.n	8018cba <ip4_reass+0x31a>
    goto nullreturn;
 8018c90:	bf00      	nop
 8018c92:	e012      	b.n	8018cba <ip4_reass+0x31a>
    goto nullreturn;
 8018c94:	bf00      	nop
 8018c96:	e010      	b.n	8018cba <ip4_reass+0x31a>
      goto nullreturn;
 8018c98:	bf00      	nop
 8018c9a:	e00e      	b.n	8018cba <ip4_reass+0x31a>
 8018c9c:	200215f4 	.word	0x200215f4
 8018ca0:	200215f0 	.word	0x200215f0
 8018ca4:	0802206c 	.word	0x0802206c
 8018ca8:	080221dc 	.word	0x080221dc
 8018cac:	080220b4 	.word	0x080220b4
 8018cb0:	080221f8 	.word	0x080221f8
 8018cb4:	08022204 	.word	0x08022204
  }

nullreturn:
 8018cb8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018cba:	6878      	ldr	r0, [r7, #4]
 8018cbc:	f7f4 fb64 	bl	800d388 <pbuf_free>
  return NULL;
 8018cc0:	2300      	movs	r3, #0
}
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	3738      	adds	r7, #56	; 0x38
 8018cc6:	46bd      	mov	sp, r7
 8018cc8:	bd80      	pop	{r7, pc}
 8018cca:	bf00      	nop

08018ccc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018ccc:	b580      	push	{r7, lr}
 8018cce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018cd0:	2005      	movs	r0, #5
 8018cd2:	f7f3 fc57 	bl	800c584 <memp_malloc>
 8018cd6:	4603      	mov	r3, r0
}
 8018cd8:	4618      	mov	r0, r3
 8018cda:	bd80      	pop	{r7, pc}

08018cdc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b082      	sub	sp, #8
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d106      	bne.n	8018cf8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018cea:	4b07      	ldr	r3, [pc, #28]	; (8018d08 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018cec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018cf0:	4906      	ldr	r1, [pc, #24]	; (8018d0c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018cf2:	4807      	ldr	r0, [pc, #28]	; (8018d10 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018cf4:	f001 fb1c 	bl	801a330 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018cf8:	6879      	ldr	r1, [r7, #4]
 8018cfa:	2005      	movs	r0, #5
 8018cfc:	f7f3 fc94 	bl	800c628 <memp_free>
}
 8018d00:	bf00      	nop
 8018d02:	3708      	adds	r7, #8
 8018d04:	46bd      	mov	sp, r7
 8018d06:	bd80      	pop	{r7, pc}
 8018d08:	0802206c 	.word	0x0802206c
 8018d0c:	08022224 	.word	0x08022224
 8018d10:	080220b4 	.word	0x080220b4

08018d14 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b084      	sub	sp, #16
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	2b00      	cmp	r3, #0
 8018d24:	d106      	bne.n	8018d34 <ipfrag_free_pbuf_custom+0x20>
 8018d26:	4b11      	ldr	r3, [pc, #68]	; (8018d6c <ipfrag_free_pbuf_custom+0x58>)
 8018d28:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018d2c:	4910      	ldr	r1, [pc, #64]	; (8018d70 <ipfrag_free_pbuf_custom+0x5c>)
 8018d2e:	4811      	ldr	r0, [pc, #68]	; (8018d74 <ipfrag_free_pbuf_custom+0x60>)
 8018d30:	f001 fafe 	bl	801a330 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018d34:	68fa      	ldr	r2, [r7, #12]
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	429a      	cmp	r2, r3
 8018d3a:	d006      	beq.n	8018d4a <ipfrag_free_pbuf_custom+0x36>
 8018d3c:	4b0b      	ldr	r3, [pc, #44]	; (8018d6c <ipfrag_free_pbuf_custom+0x58>)
 8018d3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018d42:	490d      	ldr	r1, [pc, #52]	; (8018d78 <ipfrag_free_pbuf_custom+0x64>)
 8018d44:	480b      	ldr	r0, [pc, #44]	; (8018d74 <ipfrag_free_pbuf_custom+0x60>)
 8018d46:	f001 faf3 	bl	801a330 <iprintf>
  if (pcr->original != NULL) {
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	695b      	ldr	r3, [r3, #20]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d004      	beq.n	8018d5c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	695b      	ldr	r3, [r3, #20]
 8018d56:	4618      	mov	r0, r3
 8018d58:	f7f4 fb16 	bl	800d388 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018d5c:	68f8      	ldr	r0, [r7, #12]
 8018d5e:	f7ff ffbd 	bl	8018cdc <ip_frag_free_pbuf_custom_ref>
}
 8018d62:	bf00      	nop
 8018d64:	3710      	adds	r7, #16
 8018d66:	46bd      	mov	sp, r7
 8018d68:	bd80      	pop	{r7, pc}
 8018d6a:	bf00      	nop
 8018d6c:	0802206c 	.word	0x0802206c
 8018d70:	08022230 	.word	0x08022230
 8018d74:	080220b4 	.word	0x080220b4
 8018d78:	0802223c 	.word	0x0802223c

08018d7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018d7c:	b580      	push	{r7, lr}
 8018d7e:	b094      	sub	sp, #80	; 0x50
 8018d80:	af02      	add	r7, sp, #8
 8018d82:	60f8      	str	r0, [r7, #12]
 8018d84:	60b9      	str	r1, [r7, #8]
 8018d86:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018d8e:	68bb      	ldr	r3, [r7, #8]
 8018d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d92:	3b14      	subs	r3, #20
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	da00      	bge.n	8018d9a <ip4_frag+0x1e>
 8018d98:	3307      	adds	r3, #7
 8018d9a:	10db      	asrs	r3, r3, #3
 8018d9c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018d9e:	2314      	movs	r3, #20
 8018da0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018da2:	68fb      	ldr	r3, [r7, #12]
 8018da4:	685b      	ldr	r3, [r3, #4]
 8018da6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018daa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018dae:	781b      	ldrb	r3, [r3, #0]
 8018db0:	f003 030f 	and.w	r3, r3, #15
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	009b      	lsls	r3, r3, #2
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	2b14      	cmp	r3, #20
 8018dbc:	d002      	beq.n	8018dc4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018dbe:	f06f 0305 	mvn.w	r3, #5
 8018dc2:	e110      	b.n	8018fe6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	895b      	ldrh	r3, [r3, #10]
 8018dc8:	2b13      	cmp	r3, #19
 8018dca:	d809      	bhi.n	8018de0 <ip4_frag+0x64>
 8018dcc:	4b88      	ldr	r3, [pc, #544]	; (8018ff0 <ip4_frag+0x274>)
 8018dce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018dd2:	4988      	ldr	r1, [pc, #544]	; (8018ff4 <ip4_frag+0x278>)
 8018dd4:	4888      	ldr	r0, [pc, #544]	; (8018ff8 <ip4_frag+0x27c>)
 8018dd6:	f001 faab 	bl	801a330 <iprintf>
 8018dda:	f06f 0305 	mvn.w	r3, #5
 8018dde:	e102      	b.n	8018fe6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018de2:	88db      	ldrh	r3, [r3, #6]
 8018de4:	b29b      	uxth	r3, r3
 8018de6:	4618      	mov	r0, r3
 8018de8:	f7f1 ff40 	bl	800ac6c <lwip_htons>
 8018dec:	4603      	mov	r3, r0
 8018dee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018df0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018df6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018dfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018e00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	891b      	ldrh	r3, [r3, #8]
 8018e06:	3b14      	subs	r3, #20
 8018e08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018e0c:	e0e1      	b.n	8018fd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018e0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018e10:	00db      	lsls	r3, r3, #3
 8018e12:	b29b      	uxth	r3, r3
 8018e14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018e18:	4293      	cmp	r3, r2
 8018e1a:	bf28      	it	cs
 8018e1c:	4613      	movcs	r3, r2
 8018e1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018e20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e24:	2114      	movs	r1, #20
 8018e26:	200e      	movs	r0, #14
 8018e28:	f7f3 ffca 	bl	800cdc0 <pbuf_alloc>
 8018e2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	f000 80d5 	beq.w	8018fe0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e38:	895b      	ldrh	r3, [r3, #10]
 8018e3a:	2b13      	cmp	r3, #19
 8018e3c:	d806      	bhi.n	8018e4c <ip4_frag+0xd0>
 8018e3e:	4b6c      	ldr	r3, [pc, #432]	; (8018ff0 <ip4_frag+0x274>)
 8018e40:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018e44:	496d      	ldr	r1, [pc, #436]	; (8018ffc <ip4_frag+0x280>)
 8018e46:	486c      	ldr	r0, [pc, #432]	; (8018ff8 <ip4_frag+0x27c>)
 8018e48:	f001 fa72 	bl	801a330 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e4e:	685b      	ldr	r3, [r3, #4]
 8018e50:	2214      	movs	r2, #20
 8018e52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018e54:	4618      	mov	r0, r3
 8018e56:	f000 fbc1 	bl	80195dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e5c:	685b      	ldr	r3, [r3, #4]
 8018e5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018e60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018e66:	e064      	b.n	8018f32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018e68:	68fb      	ldr	r3, [r7, #12]
 8018e6a:	895a      	ldrh	r2, [r3, #10]
 8018e6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018e6e:	1ad3      	subs	r3, r2, r3
 8018e70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	895b      	ldrh	r3, [r3, #10]
 8018e76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018e78:	429a      	cmp	r2, r3
 8018e7a:	d906      	bls.n	8018e8a <ip4_frag+0x10e>
 8018e7c:	4b5c      	ldr	r3, [pc, #368]	; (8018ff0 <ip4_frag+0x274>)
 8018e7e:	f240 322d 	movw	r2, #813	; 0x32d
 8018e82:	495f      	ldr	r1, [pc, #380]	; (8019000 <ip4_frag+0x284>)
 8018e84:	485c      	ldr	r0, [pc, #368]	; (8018ff8 <ip4_frag+0x27c>)
 8018e86:	f001 fa53 	bl	801a330 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018e8a:	8bfa      	ldrh	r2, [r7, #30]
 8018e8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018e90:	4293      	cmp	r3, r2
 8018e92:	bf28      	it	cs
 8018e94:	4613      	movcs	r3, r2
 8018e96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018e9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d105      	bne.n	8018eae <ip4_frag+0x132>
        poff = 0;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	60fb      	str	r3, [r7, #12]
        continue;
 8018eac:	e041      	b.n	8018f32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018eae:	f7ff ff0d 	bl	8018ccc <ip_frag_alloc_pbuf_custom_ref>
 8018eb2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018eb4:	69bb      	ldr	r3, [r7, #24]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d103      	bne.n	8018ec2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018eba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ebc:	f7f4 fa64 	bl	800d388 <pbuf_free>
        goto memerr;
 8018ec0:	e08f      	b.n	8018fe2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ec2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ec8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018eca:	4413      	add	r3, r2
 8018ecc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018ed0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018ed4:	9201      	str	r2, [sp, #4]
 8018ed6:	9300      	str	r3, [sp, #0]
 8018ed8:	4603      	mov	r3, r0
 8018eda:	2241      	movs	r2, #65	; 0x41
 8018edc:	2000      	movs	r0, #0
 8018ede:	f7f4 f899 	bl	800d014 <pbuf_alloced_custom>
 8018ee2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d106      	bne.n	8018ef8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018eea:	69b8      	ldr	r0, [r7, #24]
 8018eec:	f7ff fef6 	bl	8018cdc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ef2:	f7f4 fa49 	bl	800d388 <pbuf_free>
        goto memerr;
 8018ef6:	e074      	b.n	8018fe2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018ef8:	68f8      	ldr	r0, [r7, #12]
 8018efa:	f7f4 faeb 	bl	800d4d4 <pbuf_ref>
      pcr->original = p;
 8018efe:	69bb      	ldr	r3, [r7, #24]
 8018f00:	68fa      	ldr	r2, [r7, #12]
 8018f02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018f04:	69bb      	ldr	r3, [r7, #24]
 8018f06:	4a3f      	ldr	r2, [pc, #252]	; (8019004 <ip4_frag+0x288>)
 8018f08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018f0a:	6979      	ldr	r1, [r7, #20]
 8018f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f0e:	f7f4 fb09 	bl	800d524 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018f12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018f16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018f1a:	1ad3      	subs	r3, r2, r3
 8018f1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018f20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	d004      	beq.n	8018f32 <ip4_frag+0x1b6>
        poff = 0;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018f32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d196      	bne.n	8018e68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018f3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018f3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018f40:	4413      	add	r3, r2
 8018f42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018f44:	68bb      	ldr	r3, [r7, #8]
 8018f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018f48:	f1a3 0213 	sub.w	r2, r3, #19
 8018f4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f50:	429a      	cmp	r2, r3
 8018f52:	bfcc      	ite	gt
 8018f54:	2301      	movgt	r3, #1
 8018f56:	2300      	movle	r3, #0
 8018f58:	b2db      	uxtb	r3, r3
 8018f5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018f5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018f66:	6a3b      	ldr	r3, [r7, #32]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d002      	beq.n	8018f72 <ip4_frag+0x1f6>
 8018f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d003      	beq.n	8018f7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018f72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018f74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018f78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018f7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7f1 fe75 	bl	800ac6c <lwip_htons>
 8018f82:	4603      	mov	r3, r0
 8018f84:	461a      	mov	r2, r3
 8018f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f8c:	3314      	adds	r3, #20
 8018f8e:	b29b      	uxth	r3, r3
 8018f90:	4618      	mov	r0, r3
 8018f92:	f7f1 fe6b 	bl	800ac6c <lwip_htons>
 8018f96:	4603      	mov	r3, r0
 8018f98:	461a      	mov	r2, r3
 8018f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	729a      	strb	r2, [r3, #10]
 8018fa4:	2200      	movs	r2, #0
 8018fa6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	695b      	ldr	r3, [r3, #20]
 8018fac:	687a      	ldr	r2, [r7, #4]
 8018fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018fb0:	68b8      	ldr	r0, [r7, #8]
 8018fb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018fb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018fb6:	f7f4 f9e7 	bl	800d388 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018fba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018fbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018fc0:	1ad3      	subs	r3, r2, r3
 8018fc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018fc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018fca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018fcc:	4413      	add	r3, r2
 8018fce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018fd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	f47f af19 	bne.w	8018e0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018fdc:	2300      	movs	r3, #0
 8018fde:	e002      	b.n	8018fe6 <ip4_frag+0x26a>
      goto memerr;
 8018fe0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018fe2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3748      	adds	r7, #72	; 0x48
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}
 8018fee:	bf00      	nop
 8018ff0:	0802206c 	.word	0x0802206c
 8018ff4:	08022248 	.word	0x08022248
 8018ff8:	080220b4 	.word	0x080220b4
 8018ffc:	08022264 	.word	0x08022264
 8019000:	08022284 	.word	0x08022284
 8019004:	08018d15 	.word	0x08018d15

08019008 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b086      	sub	sp, #24
 801900c:	af00      	add	r7, sp, #0
 801900e:	6078      	str	r0, [r7, #4]
 8019010:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019012:	230e      	movs	r3, #14
 8019014:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	895b      	ldrh	r3, [r3, #10]
 801901a:	2b0e      	cmp	r3, #14
 801901c:	d96e      	bls.n	80190fc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	7bdb      	ldrb	r3, [r3, #15]
 8019022:	2b00      	cmp	r3, #0
 8019024:	d106      	bne.n	8019034 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019026:	683b      	ldr	r3, [r7, #0]
 8019028:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801902c:	3301      	adds	r3, #1
 801902e:	b2da      	uxtb	r2, r3
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	685b      	ldr	r3, [r3, #4]
 8019038:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801903a:	693b      	ldr	r3, [r7, #16]
 801903c:	7b1a      	ldrb	r2, [r3, #12]
 801903e:	7b5b      	ldrb	r3, [r3, #13]
 8019040:	021b      	lsls	r3, r3, #8
 8019042:	4313      	orrs	r3, r2
 8019044:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019046:	693b      	ldr	r3, [r7, #16]
 8019048:	781b      	ldrb	r3, [r3, #0]
 801904a:	f003 0301 	and.w	r3, r3, #1
 801904e:	2b00      	cmp	r3, #0
 8019050:	d023      	beq.n	801909a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019052:	693b      	ldr	r3, [r7, #16]
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	2b01      	cmp	r3, #1
 8019058:	d10f      	bne.n	801907a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801905a:	693b      	ldr	r3, [r7, #16]
 801905c:	785b      	ldrb	r3, [r3, #1]
 801905e:	2b00      	cmp	r3, #0
 8019060:	d11b      	bne.n	801909a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019062:	693b      	ldr	r3, [r7, #16]
 8019064:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019066:	2b5e      	cmp	r3, #94	; 0x5e
 8019068:	d117      	bne.n	801909a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	7b5b      	ldrb	r3, [r3, #13]
 801906e:	f043 0310 	orr.w	r3, r3, #16
 8019072:	b2da      	uxtb	r2, r3
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	735a      	strb	r2, [r3, #13]
 8019078:	e00f      	b.n	801909a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801907a:	693b      	ldr	r3, [r7, #16]
 801907c:	2206      	movs	r2, #6
 801907e:	4928      	ldr	r1, [pc, #160]	; (8019120 <ethernet_input+0x118>)
 8019080:	4618      	mov	r0, r3
 8019082:	f000 fa9d 	bl	80195c0 <memcmp>
 8019086:	4603      	mov	r3, r0
 8019088:	2b00      	cmp	r3, #0
 801908a:	d106      	bne.n	801909a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	7b5b      	ldrb	r3, [r3, #13]
 8019090:	f043 0308 	orr.w	r3, r3, #8
 8019094:	b2da      	uxtb	r2, r3
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801909a:	89fb      	ldrh	r3, [r7, #14]
 801909c:	2b08      	cmp	r3, #8
 801909e:	d003      	beq.n	80190a8 <ethernet_input+0xa0>
 80190a0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80190a4:	d014      	beq.n	80190d0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80190a6:	e032      	b.n	801910e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80190ae:	f003 0308 	and.w	r3, r3, #8
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d024      	beq.n	8019100 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80190b6:	8afb      	ldrh	r3, [r7, #22]
 80190b8:	4619      	mov	r1, r3
 80190ba:	6878      	ldr	r0, [r7, #4]
 80190bc:	f7f4 f8de 	bl	800d27c <pbuf_remove_header>
 80190c0:	4603      	mov	r3, r0
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d11e      	bne.n	8019104 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80190c6:	6839      	ldr	r1, [r7, #0]
 80190c8:	6878      	ldr	r0, [r7, #4]
 80190ca:	f7fe fd4d 	bl	8017b68 <ip4_input>
      break;
 80190ce:	e013      	b.n	80190f8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80190d6:	f003 0308 	and.w	r3, r3, #8
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d014      	beq.n	8019108 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80190de:	8afb      	ldrh	r3, [r7, #22]
 80190e0:	4619      	mov	r1, r3
 80190e2:	6878      	ldr	r0, [r7, #4]
 80190e4:	f7f4 f8ca 	bl	800d27c <pbuf_remove_header>
 80190e8:	4603      	mov	r3, r0
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d10e      	bne.n	801910c <ethernet_input+0x104>
        etharp_input(p, netif);
 80190ee:	6839      	ldr	r1, [r7, #0]
 80190f0:	6878      	ldr	r0, [r7, #4]
 80190f2:	f7fd fee9 	bl	8016ec8 <etharp_input>
      break;
 80190f6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80190f8:	2300      	movs	r3, #0
 80190fa:	e00c      	b.n	8019116 <ethernet_input+0x10e>
    goto free_and_return;
 80190fc:	bf00      	nop
 80190fe:	e006      	b.n	801910e <ethernet_input+0x106>
        goto free_and_return;
 8019100:	bf00      	nop
 8019102:	e004      	b.n	801910e <ethernet_input+0x106>
        goto free_and_return;
 8019104:	bf00      	nop
 8019106:	e002      	b.n	801910e <ethernet_input+0x106>
        goto free_and_return;
 8019108:	bf00      	nop
 801910a:	e000      	b.n	801910e <ethernet_input+0x106>
        goto free_and_return;
 801910c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f7f4 f93a 	bl	800d388 <pbuf_free>
  return ERR_OK;
 8019114:	2300      	movs	r3, #0
}
 8019116:	4618      	mov	r0, r3
 8019118:	3718      	adds	r7, #24
 801911a:	46bd      	mov	sp, r7
 801911c:	bd80      	pop	{r7, pc}
 801911e:	bf00      	nop
 8019120:	08022490 	.word	0x08022490

08019124 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019124:	b580      	push	{r7, lr}
 8019126:	b086      	sub	sp, #24
 8019128:	af00      	add	r7, sp, #0
 801912a:	60f8      	str	r0, [r7, #12]
 801912c:	60b9      	str	r1, [r7, #8]
 801912e:	607a      	str	r2, [r7, #4]
 8019130:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019132:	8c3b      	ldrh	r3, [r7, #32]
 8019134:	4618      	mov	r0, r3
 8019136:	f7f1 fd99 	bl	800ac6c <lwip_htons>
 801913a:	4603      	mov	r3, r0
 801913c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801913e:	210e      	movs	r1, #14
 8019140:	68b8      	ldr	r0, [r7, #8]
 8019142:	f7f4 f88b 	bl	800d25c <pbuf_add_header>
 8019146:	4603      	mov	r3, r0
 8019148:	2b00      	cmp	r3, #0
 801914a:	d125      	bne.n	8019198 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801914c:	68bb      	ldr	r3, [r7, #8]
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019152:	693b      	ldr	r3, [r7, #16]
 8019154:	8afa      	ldrh	r2, [r7, #22]
 8019156:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019158:	693b      	ldr	r3, [r7, #16]
 801915a:	2206      	movs	r2, #6
 801915c:	6839      	ldr	r1, [r7, #0]
 801915e:	4618      	mov	r0, r3
 8019160:	f000 fa3c 	bl	80195dc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019164:	693b      	ldr	r3, [r7, #16]
 8019166:	3306      	adds	r3, #6
 8019168:	2206      	movs	r2, #6
 801916a:	6879      	ldr	r1, [r7, #4]
 801916c:	4618      	mov	r0, r3
 801916e:	f000 fa35 	bl	80195dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019178:	2b06      	cmp	r3, #6
 801917a:	d006      	beq.n	801918a <ethernet_output+0x66>
 801917c:	4b0a      	ldr	r3, [pc, #40]	; (80191a8 <ethernet_output+0x84>)
 801917e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019182:	490a      	ldr	r1, [pc, #40]	; (80191ac <ethernet_output+0x88>)
 8019184:	480a      	ldr	r0, [pc, #40]	; (80191b0 <ethernet_output+0x8c>)
 8019186:	f001 f8d3 	bl	801a330 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	699b      	ldr	r3, [r3, #24]
 801918e:	68b9      	ldr	r1, [r7, #8]
 8019190:	68f8      	ldr	r0, [r7, #12]
 8019192:	4798      	blx	r3
 8019194:	4603      	mov	r3, r0
 8019196:	e002      	b.n	801919e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019198:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801919a:	f06f 0301 	mvn.w	r3, #1
}
 801919e:	4618      	mov	r0, r3
 80191a0:	3718      	adds	r7, #24
 80191a2:	46bd      	mov	sp, r7
 80191a4:	bd80      	pop	{r7, pc}
 80191a6:	bf00      	nop
 80191a8:	08022294 	.word	0x08022294
 80191ac:	080222cc 	.word	0x080222cc
 80191b0:	08022300 	.word	0x08022300

080191b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b086      	sub	sp, #24
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
 80191bc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80191be:	683b      	ldr	r3, [r7, #0]
 80191c0:	60bb      	str	r3, [r7, #8]
 80191c2:	2304      	movs	r3, #4
 80191c4:	60fb      	str	r3, [r7, #12]
 80191c6:	2300      	movs	r3, #0
 80191c8:	613b      	str	r3, [r7, #16]
 80191ca:	2300      	movs	r3, #0
 80191cc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80191ce:	f107 0308 	add.w	r3, r7, #8
 80191d2:	2100      	movs	r1, #0
 80191d4:	4618      	mov	r0, r3
 80191d6:	f7ec fc1c 	bl	8005a12 <osMessageCreate>
 80191da:	4602      	mov	r2, r0
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d102      	bne.n	80191ee <sys_mbox_new+0x3a>
    return ERR_MEM;
 80191e8:	f04f 33ff 	mov.w	r3, #4294967295
 80191ec:	e000      	b.n	80191f0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80191ee:	2300      	movs	r3, #0
}
 80191f0:	4618      	mov	r0, r3
 80191f2:	3718      	adds	r7, #24
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}

080191f8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b082      	sub	sp, #8
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	4618      	mov	r0, r3
 8019206:	f7ec fce1 	bl	8005bcc <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4618      	mov	r0, r3
 8019210:	f7ec fcf2 	bl	8005bf8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019214:	bf00      	nop
 8019216:	3708      	adds	r7, #8
 8019218:	46bd      	mov	sp, r7
 801921a:	bd80      	pop	{r7, pc}

0801921c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b084      	sub	sp, #16
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
 8019224:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	6839      	ldr	r1, [r7, #0]
 801922c:	2200      	movs	r2, #0
 801922e:	4618      	mov	r0, r3
 8019230:	f7ec fc18 	bl	8005a64 <osMessagePut>
 8019234:	4603      	mov	r3, r0
 8019236:	2b00      	cmp	r3, #0
 8019238:	d102      	bne.n	8019240 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801923a:	2300      	movs	r3, #0
 801923c:	73fb      	strb	r3, [r7, #15]
 801923e:	e001      	b.n	8019244 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019240:	23ff      	movs	r3, #255	; 0xff
 8019242:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019244:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019248:	4618      	mov	r0, r3
 801924a:	3710      	adds	r7, #16
 801924c:	46bd      	mov	sp, r7
 801924e:	bd80      	pop	{r7, pc}

08019250 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b08c      	sub	sp, #48	; 0x30
 8019254:	af00      	add	r7, sp, #0
 8019256:	61f8      	str	r0, [r7, #28]
 8019258:	61b9      	str	r1, [r7, #24]
 801925a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801925c:	f7ec fa03 	bl	8005666 <osKernelSysTick>
 8019260:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019262:	697b      	ldr	r3, [r7, #20]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d017      	beq.n	8019298 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019268:	69fb      	ldr	r3, [r7, #28]
 801926a:	6819      	ldr	r1, [r3, #0]
 801926c:	f107 0320 	add.w	r3, r7, #32
 8019270:	697a      	ldr	r2, [r7, #20]
 8019272:	4618      	mov	r0, r3
 8019274:	f7ec fc36 	bl	8005ae4 <osMessageGet>

    if(event.status == osEventMessage)
 8019278:	6a3b      	ldr	r3, [r7, #32]
 801927a:	2b10      	cmp	r3, #16
 801927c:	d109      	bne.n	8019292 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019280:	461a      	mov	r2, r3
 8019282:	69bb      	ldr	r3, [r7, #24]
 8019284:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019286:	f7ec f9ee 	bl	8005666 <osKernelSysTick>
 801928a:	4602      	mov	r2, r0
 801928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801928e:	1ad3      	subs	r3, r2, r3
 8019290:	e019      	b.n	80192c6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019292:	f04f 33ff 	mov.w	r3, #4294967295
 8019296:	e016      	b.n	80192c6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019298:	69fb      	ldr	r3, [r7, #28]
 801929a:	6819      	ldr	r1, [r3, #0]
 801929c:	463b      	mov	r3, r7
 801929e:	f04f 32ff 	mov.w	r2, #4294967295
 80192a2:	4618      	mov	r0, r3
 80192a4:	f7ec fc1e 	bl	8005ae4 <osMessageGet>
 80192a8:	f107 0320 	add.w	r3, r7, #32
 80192ac:	463a      	mov	r2, r7
 80192ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80192b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80192b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b6:	461a      	mov	r2, r3
 80192b8:	69bb      	ldr	r3, [r7, #24]
 80192ba:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80192bc:	f7ec f9d3 	bl	8005666 <osKernelSysTick>
 80192c0:	4602      	mov	r2, r0
 80192c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192c4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3730      	adds	r7, #48	; 0x30
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}

080192ce <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 80192ce:	b580      	push	{r7, lr}
 80192d0:	b086      	sub	sp, #24
 80192d2:	af00      	add	r7, sp, #0
 80192d4:	6078      	str	r0, [r7, #4]
 80192d6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	6819      	ldr	r1, [r3, #0]
 80192dc:	f107 030c 	add.w	r3, r7, #12
 80192e0:	2200      	movs	r2, #0
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7ec fbfe 	bl	8005ae4 <osMessageGet>

  if(event.status == osEventMessage)
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	2b10      	cmp	r3, #16
 80192ec:	d105      	bne.n	80192fa <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	461a      	mov	r2, r3
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80192f6:	2300      	movs	r3, #0
 80192f8:	e001      	b.n	80192fe <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80192fa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80192fe:	4618      	mov	r0, r3
 8019300:	3718      	adds	r7, #24
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}

08019306 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019306:	b480      	push	{r7}
 8019308:	b083      	sub	sp, #12
 801930a:	af00      	add	r7, sp, #0
 801930c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	681b      	ldr	r3, [r3, #0]
 8019312:	2b00      	cmp	r3, #0
 8019314:	d101      	bne.n	801931a <sys_mbox_valid+0x14>
    return 0;
 8019316:	2300      	movs	r3, #0
 8019318:	e000      	b.n	801931c <sys_mbox_valid+0x16>
  else
    return 1;
 801931a:	2301      	movs	r3, #1
}
 801931c:	4618      	mov	r0, r3
 801931e:	370c      	adds	r7, #12
 8019320:	46bd      	mov	sp, r7
 8019322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019326:	4770      	bx	lr

08019328 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019328:	b480      	push	{r7}
 801932a:	b083      	sub	sp, #12
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2200      	movs	r2, #0
 8019334:	601a      	str	r2, [r3, #0]
}
 8019336:	bf00      	nop
 8019338:	370c      	adds	r7, #12
 801933a:	46bd      	mov	sp, r7
 801933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019340:	4770      	bx	lr

08019342 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019342:	b580      	push	{r7, lr}
 8019344:	b084      	sub	sp, #16
 8019346:	af00      	add	r7, sp, #0
 8019348:	6078      	str	r0, [r7, #4]
 801934a:	460b      	mov	r3, r1
 801934c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801934e:	2300      	movs	r3, #0
 8019350:	60bb      	str	r3, [r7, #8]
 8019352:	2300      	movs	r3, #0
 8019354:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8019356:	f107 0308 	add.w	r3, r7, #8
 801935a:	2101      	movs	r1, #1
 801935c:	4618      	mov	r0, r3
 801935e:	f7ec fa8f 	bl	8005880 <osSemaphoreCreate>
 8019362:	4602      	mov	r2, r0
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	2b00      	cmp	r3, #0
 801936e:	d102      	bne.n	8019376 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019370:	f04f 33ff 	mov.w	r3, #4294967295
 8019374:	e009      	b.n	801938a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8019376:	78fb      	ldrb	r3, [r7, #3]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d105      	bne.n	8019388 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2100      	movs	r1, #0
 8019382:	4618      	mov	r0, r3
 8019384:	f7ec faae 	bl	80058e4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019388:	2300      	movs	r3, #0
}
 801938a:	4618      	mov	r0, r3
 801938c:	3710      	adds	r7, #16
 801938e:	46bd      	mov	sp, r7
 8019390:	bd80      	pop	{r7, pc}

08019392 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019392:	b580      	push	{r7, lr}
 8019394:	b084      	sub	sp, #16
 8019396:	af00      	add	r7, sp, #0
 8019398:	6078      	str	r0, [r7, #4]
 801939a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801939c:	f7ec f963 	bl	8005666 <osKernelSysTick>
 80193a0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d011      	beq.n	80193cc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80193a8:	687b      	ldr	r3, [r7, #4]
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	6839      	ldr	r1, [r7, #0]
 80193ae:	4618      	mov	r0, r3
 80193b0:	f7ec fa98 	bl	80058e4 <osSemaphoreWait>
 80193b4:	4603      	mov	r3, r0
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d105      	bne.n	80193c6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80193ba:	f7ec f954 	bl	8005666 <osKernelSysTick>
 80193be:	4602      	mov	r2, r0
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	1ad3      	subs	r3, r2, r3
 80193c4:	e012      	b.n	80193ec <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 80193c6:	f04f 33ff 	mov.w	r3, #4294967295
 80193ca:	e00f      	b.n	80193ec <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 80193cc:	bf00      	nop
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f04f 31ff 	mov.w	r1, #4294967295
 80193d6:	4618      	mov	r0, r3
 80193d8:	f7ec fa84 	bl	80058e4 <osSemaphoreWait>
 80193dc:	4603      	mov	r3, r0
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d1f5      	bne.n	80193ce <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80193e2:	f7ec f940 	bl	8005666 <osKernelSysTick>
 80193e6:	4602      	mov	r2, r0
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80193ec:	4618      	mov	r0, r3
 80193ee:	3710      	adds	r7, #16
 80193f0:	46bd      	mov	sp, r7
 80193f2:	bd80      	pop	{r7, pc}

080193f4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b082      	sub	sp, #8
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4618      	mov	r0, r3
 8019402:	f7ec fabd 	bl	8005980 <osSemaphoreRelease>
}
 8019406:	bf00      	nop
 8019408:	3708      	adds	r7, #8
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}

0801940e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801940e:	b580      	push	{r7, lr}
 8019410:	b082      	sub	sp, #8
 8019412:	af00      	add	r7, sp, #0
 8019414:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	4618      	mov	r0, r3
 801941c:	f7ec fae6 	bl	80059ec <osSemaphoreDelete>
}
 8019420:	bf00      	nop
 8019422:	3708      	adds	r7, #8
 8019424:	46bd      	mov	sp, r7
 8019426:	bd80      	pop	{r7, pc}

08019428 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019428:	b480      	push	{r7}
 801942a:	b083      	sub	sp, #12
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d101      	bne.n	801943c <sys_sem_valid+0x14>
    return 0;
 8019438:	2300      	movs	r3, #0
 801943a:	e000      	b.n	801943e <sys_sem_valid+0x16>
  else
    return 1;
 801943c:	2301      	movs	r3, #1
}
 801943e:	4618      	mov	r0, r3
 8019440:	370c      	adds	r7, #12
 8019442:	46bd      	mov	sp, r7
 8019444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019448:	4770      	bx	lr

0801944a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801944a:	b480      	push	{r7}
 801944c:	b083      	sub	sp, #12
 801944e:	af00      	add	r7, sp, #0
 8019450:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	2200      	movs	r2, #0
 8019456:	601a      	str	r2, [r3, #0]
}
 8019458:	bf00      	nop
 801945a:	370c      	adds	r7, #12
 801945c:	46bd      	mov	sp, r7
 801945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019462:	4770      	bx	lr

08019464 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019464:	b580      	push	{r7, lr}
 8019466:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019468:	4803      	ldr	r0, [pc, #12]	; (8019478 <sys_init+0x14>)
 801946a:	f7ec f96c 	bl	8005746 <osMutexCreate>
 801946e:	4603      	mov	r3, r0
 8019470:	4a02      	ldr	r2, [pc, #8]	; (801947c <sys_init+0x18>)
 8019472:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019474:	bf00      	nop
 8019476:	bd80      	pop	{r7, pc}
 8019478:	080224a0 	.word	0x080224a0
 801947c:	20028100 	.word	0x20028100

08019480 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019480:	b580      	push	{r7, lr}
 8019482:	b084      	sub	sp, #16
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8019488:	2300      	movs	r3, #0
 801948a:	60bb      	str	r3, [r7, #8]
 801948c:	2300      	movs	r3, #0
 801948e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019490:	f107 0308 	add.w	r3, r7, #8
 8019494:	4618      	mov	r0, r3
 8019496:	f7ec f956 	bl	8005746 <osMutexCreate>
 801949a:	4602      	mov	r2, r0
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d102      	bne.n	80194ae <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80194a8:	f04f 33ff 	mov.w	r3, #4294967295
 80194ac:	e000      	b.n	80194b0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80194ae:	2300      	movs	r3, #0
}
 80194b0:	4618      	mov	r0, r3
 80194b2:	3710      	adds	r7, #16
 80194b4:	46bd      	mov	sp, r7
 80194b6:	bd80      	pop	{r7, pc}

080194b8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b082      	sub	sp, #8
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	f04f 31ff 	mov.w	r1, #4294967295
 80194c8:	4618      	mov	r0, r3
 80194ca:	f7ec f955 	bl	8005778 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80194ce:	bf00      	nop
 80194d0:	3708      	adds	r7, #8
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd80      	pop	{r7, pc}

080194d6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80194d6:	b580      	push	{r7, lr}
 80194d8:	b082      	sub	sp, #8
 80194da:	af00      	add	r7, sp, #0
 80194dc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7ec f996 	bl	8005814 <osMutexRelease>
}
 80194e8:	bf00      	nop
 80194ea:	3708      	adds	r7, #8
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bd80      	pop	{r7, pc}

080194f0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b08c      	sub	sp, #48	; 0x30
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	60f8      	str	r0, [r7, #12]
 80194f8:	60b9      	str	r1, [r7, #8]
 80194fa:	607a      	str	r2, [r7, #4]
 80194fc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80194fe:	f107 0314 	add.w	r3, r7, #20
 8019502:	2200      	movs	r2, #0
 8019504:	601a      	str	r2, [r3, #0]
 8019506:	605a      	str	r2, [r3, #4]
 8019508:	609a      	str	r2, [r3, #8]
 801950a:	60da      	str	r2, [r3, #12]
 801950c:	611a      	str	r2, [r3, #16]
 801950e:	615a      	str	r2, [r3, #20]
 8019510:	619a      	str	r2, [r3, #24]
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	617b      	str	r3, [r7, #20]
 8019516:	68bb      	ldr	r3, [r7, #8]
 8019518:	61bb      	str	r3, [r7, #24]
 801951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801951c:	b21b      	sxth	r3, r3
 801951e:	83bb      	strh	r3, [r7, #28]
 8019520:	683b      	ldr	r3, [r7, #0]
 8019522:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019524:	f107 0314 	add.w	r3, r7, #20
 8019528:	6879      	ldr	r1, [r7, #4]
 801952a:	4618      	mov	r0, r3
 801952c:	f7ec f8ab 	bl	8005686 <osThreadCreate>
 8019530:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019532:	4618      	mov	r0, r3
 8019534:	3730      	adds	r7, #48	; 0x30
 8019536:	46bd      	mov	sp, r7
 8019538:	bd80      	pop	{r7, pc}
	...

0801953c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801953c:	b580      	push	{r7, lr}
 801953e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019540:	4b04      	ldr	r3, [pc, #16]	; (8019554 <sys_arch_protect+0x18>)
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	f04f 31ff 	mov.w	r1, #4294967295
 8019548:	4618      	mov	r0, r3
 801954a:	f7ec f915 	bl	8005778 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801954e:	2301      	movs	r3, #1
}
 8019550:	4618      	mov	r0, r3
 8019552:	bd80      	pop	{r7, pc}
 8019554:	20028100 	.word	0x20028100

08019558 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019558:	b580      	push	{r7, lr}
 801955a:	b082      	sub	sp, #8
 801955c:	af00      	add	r7, sp, #0
 801955e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019560:	4b04      	ldr	r3, [pc, #16]	; (8019574 <sys_arch_unprotect+0x1c>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	4618      	mov	r0, r3
 8019566:	f7ec f955 	bl	8005814 <osMutexRelease>
}
 801956a:	bf00      	nop
 801956c:	3708      	adds	r7, #8
 801956e:	46bd      	mov	sp, r7
 8019570:	bd80      	pop	{r7, pc}
 8019572:	bf00      	nop
 8019574:	20028100 	.word	0x20028100

08019578 <__libc_init_array>:
 8019578:	b570      	push	{r4, r5, r6, lr}
 801957a:	4d0d      	ldr	r5, [pc, #52]	; (80195b0 <__libc_init_array+0x38>)
 801957c:	4c0d      	ldr	r4, [pc, #52]	; (80195b4 <__libc_init_array+0x3c>)
 801957e:	1b64      	subs	r4, r4, r5
 8019580:	10a4      	asrs	r4, r4, #2
 8019582:	2600      	movs	r6, #0
 8019584:	42a6      	cmp	r6, r4
 8019586:	d109      	bne.n	801959c <__libc_init_array+0x24>
 8019588:	4d0b      	ldr	r5, [pc, #44]	; (80195b8 <__libc_init_array+0x40>)
 801958a:	4c0c      	ldr	r4, [pc, #48]	; (80195bc <__libc_init_array+0x44>)
 801958c:	f005 f96e 	bl	801e86c <_init>
 8019590:	1b64      	subs	r4, r4, r5
 8019592:	10a4      	asrs	r4, r4, #2
 8019594:	2600      	movs	r6, #0
 8019596:	42a6      	cmp	r6, r4
 8019598:	d105      	bne.n	80195a6 <__libc_init_array+0x2e>
 801959a:	bd70      	pop	{r4, r5, r6, pc}
 801959c:	f855 3b04 	ldr.w	r3, [r5], #4
 80195a0:	4798      	blx	r3
 80195a2:	3601      	adds	r6, #1
 80195a4:	e7ee      	b.n	8019584 <__libc_init_array+0xc>
 80195a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80195aa:	4798      	blx	r3
 80195ac:	3601      	adds	r6, #1
 80195ae:	e7f2      	b.n	8019596 <__libc_init_array+0x1e>
 80195b0:	080229e0 	.word	0x080229e0
 80195b4:	080229e0 	.word	0x080229e0
 80195b8:	080229e0 	.word	0x080229e0
 80195bc:	080229e4 	.word	0x080229e4

080195c0 <memcmp>:
 80195c0:	b530      	push	{r4, r5, lr}
 80195c2:	3901      	subs	r1, #1
 80195c4:	2400      	movs	r4, #0
 80195c6:	42a2      	cmp	r2, r4
 80195c8:	d101      	bne.n	80195ce <memcmp+0xe>
 80195ca:	2000      	movs	r0, #0
 80195cc:	e005      	b.n	80195da <memcmp+0x1a>
 80195ce:	5d03      	ldrb	r3, [r0, r4]
 80195d0:	3401      	adds	r4, #1
 80195d2:	5d0d      	ldrb	r5, [r1, r4]
 80195d4:	42ab      	cmp	r3, r5
 80195d6:	d0f6      	beq.n	80195c6 <memcmp+0x6>
 80195d8:	1b58      	subs	r0, r3, r5
 80195da:	bd30      	pop	{r4, r5, pc}

080195dc <memcpy>:
 80195dc:	440a      	add	r2, r1
 80195de:	4291      	cmp	r1, r2
 80195e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80195e4:	d100      	bne.n	80195e8 <memcpy+0xc>
 80195e6:	4770      	bx	lr
 80195e8:	b510      	push	{r4, lr}
 80195ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80195ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80195f2:	4291      	cmp	r1, r2
 80195f4:	d1f9      	bne.n	80195ea <memcpy+0xe>
 80195f6:	bd10      	pop	{r4, pc}

080195f8 <memmove>:
 80195f8:	4288      	cmp	r0, r1
 80195fa:	b510      	push	{r4, lr}
 80195fc:	eb01 0402 	add.w	r4, r1, r2
 8019600:	d902      	bls.n	8019608 <memmove+0x10>
 8019602:	4284      	cmp	r4, r0
 8019604:	4623      	mov	r3, r4
 8019606:	d807      	bhi.n	8019618 <memmove+0x20>
 8019608:	1e43      	subs	r3, r0, #1
 801960a:	42a1      	cmp	r1, r4
 801960c:	d008      	beq.n	8019620 <memmove+0x28>
 801960e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019612:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019616:	e7f8      	b.n	801960a <memmove+0x12>
 8019618:	4402      	add	r2, r0
 801961a:	4601      	mov	r1, r0
 801961c:	428a      	cmp	r2, r1
 801961e:	d100      	bne.n	8019622 <memmove+0x2a>
 8019620:	bd10      	pop	{r4, pc}
 8019622:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019626:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801962a:	e7f7      	b.n	801961c <memmove+0x24>

0801962c <memset>:
 801962c:	4402      	add	r2, r0
 801962e:	4603      	mov	r3, r0
 8019630:	4293      	cmp	r3, r2
 8019632:	d100      	bne.n	8019636 <memset+0xa>
 8019634:	4770      	bx	lr
 8019636:	f803 1b01 	strb.w	r1, [r3], #1
 801963a:	e7f9      	b.n	8019630 <memset+0x4>

0801963c <__cvt>:
 801963c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019640:	ec55 4b10 	vmov	r4, r5, d0
 8019644:	2d00      	cmp	r5, #0
 8019646:	460e      	mov	r6, r1
 8019648:	4619      	mov	r1, r3
 801964a:	462b      	mov	r3, r5
 801964c:	bfbb      	ittet	lt
 801964e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019652:	461d      	movlt	r5, r3
 8019654:	2300      	movge	r3, #0
 8019656:	232d      	movlt	r3, #45	; 0x2d
 8019658:	700b      	strb	r3, [r1, #0]
 801965a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801965c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019660:	4691      	mov	r9, r2
 8019662:	f023 0820 	bic.w	r8, r3, #32
 8019666:	bfbc      	itt	lt
 8019668:	4622      	movlt	r2, r4
 801966a:	4614      	movlt	r4, r2
 801966c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019670:	d005      	beq.n	801967e <__cvt+0x42>
 8019672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019676:	d100      	bne.n	801967a <__cvt+0x3e>
 8019678:	3601      	adds	r6, #1
 801967a:	2102      	movs	r1, #2
 801967c:	e000      	b.n	8019680 <__cvt+0x44>
 801967e:	2103      	movs	r1, #3
 8019680:	ab03      	add	r3, sp, #12
 8019682:	9301      	str	r3, [sp, #4]
 8019684:	ab02      	add	r3, sp, #8
 8019686:	9300      	str	r3, [sp, #0]
 8019688:	ec45 4b10 	vmov	d0, r4, r5
 801968c:	4653      	mov	r3, sl
 801968e:	4632      	mov	r2, r6
 8019690:	f002 f812 	bl	801b6b8 <_dtoa_r>
 8019694:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019698:	4607      	mov	r7, r0
 801969a:	d102      	bne.n	80196a2 <__cvt+0x66>
 801969c:	f019 0f01 	tst.w	r9, #1
 80196a0:	d022      	beq.n	80196e8 <__cvt+0xac>
 80196a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80196a6:	eb07 0906 	add.w	r9, r7, r6
 80196aa:	d110      	bne.n	80196ce <__cvt+0x92>
 80196ac:	783b      	ldrb	r3, [r7, #0]
 80196ae:	2b30      	cmp	r3, #48	; 0x30
 80196b0:	d10a      	bne.n	80196c8 <__cvt+0x8c>
 80196b2:	2200      	movs	r2, #0
 80196b4:	2300      	movs	r3, #0
 80196b6:	4620      	mov	r0, r4
 80196b8:	4629      	mov	r1, r5
 80196ba:	f7e7 fa25 	bl	8000b08 <__aeabi_dcmpeq>
 80196be:	b918      	cbnz	r0, 80196c8 <__cvt+0x8c>
 80196c0:	f1c6 0601 	rsb	r6, r6, #1
 80196c4:	f8ca 6000 	str.w	r6, [sl]
 80196c8:	f8da 3000 	ldr.w	r3, [sl]
 80196cc:	4499      	add	r9, r3
 80196ce:	2200      	movs	r2, #0
 80196d0:	2300      	movs	r3, #0
 80196d2:	4620      	mov	r0, r4
 80196d4:	4629      	mov	r1, r5
 80196d6:	f7e7 fa17 	bl	8000b08 <__aeabi_dcmpeq>
 80196da:	b108      	cbz	r0, 80196e0 <__cvt+0xa4>
 80196dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80196e0:	2230      	movs	r2, #48	; 0x30
 80196e2:	9b03      	ldr	r3, [sp, #12]
 80196e4:	454b      	cmp	r3, r9
 80196e6:	d307      	bcc.n	80196f8 <__cvt+0xbc>
 80196e8:	9b03      	ldr	r3, [sp, #12]
 80196ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196ec:	1bdb      	subs	r3, r3, r7
 80196ee:	4638      	mov	r0, r7
 80196f0:	6013      	str	r3, [r2, #0]
 80196f2:	b004      	add	sp, #16
 80196f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196f8:	1c59      	adds	r1, r3, #1
 80196fa:	9103      	str	r1, [sp, #12]
 80196fc:	701a      	strb	r2, [r3, #0]
 80196fe:	e7f0      	b.n	80196e2 <__cvt+0xa6>

08019700 <__exponent>:
 8019700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019702:	4603      	mov	r3, r0
 8019704:	2900      	cmp	r1, #0
 8019706:	bfb8      	it	lt
 8019708:	4249      	neglt	r1, r1
 801970a:	f803 2b02 	strb.w	r2, [r3], #2
 801970e:	bfb4      	ite	lt
 8019710:	222d      	movlt	r2, #45	; 0x2d
 8019712:	222b      	movge	r2, #43	; 0x2b
 8019714:	2909      	cmp	r1, #9
 8019716:	7042      	strb	r2, [r0, #1]
 8019718:	dd2a      	ble.n	8019770 <__exponent+0x70>
 801971a:	f10d 0407 	add.w	r4, sp, #7
 801971e:	46a4      	mov	ip, r4
 8019720:	270a      	movs	r7, #10
 8019722:	46a6      	mov	lr, r4
 8019724:	460a      	mov	r2, r1
 8019726:	fb91 f6f7 	sdiv	r6, r1, r7
 801972a:	fb07 1516 	mls	r5, r7, r6, r1
 801972e:	3530      	adds	r5, #48	; 0x30
 8019730:	2a63      	cmp	r2, #99	; 0x63
 8019732:	f104 34ff 	add.w	r4, r4, #4294967295
 8019736:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801973a:	4631      	mov	r1, r6
 801973c:	dcf1      	bgt.n	8019722 <__exponent+0x22>
 801973e:	3130      	adds	r1, #48	; 0x30
 8019740:	f1ae 0502 	sub.w	r5, lr, #2
 8019744:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019748:	1c44      	adds	r4, r0, #1
 801974a:	4629      	mov	r1, r5
 801974c:	4561      	cmp	r1, ip
 801974e:	d30a      	bcc.n	8019766 <__exponent+0x66>
 8019750:	f10d 0209 	add.w	r2, sp, #9
 8019754:	eba2 020e 	sub.w	r2, r2, lr
 8019758:	4565      	cmp	r5, ip
 801975a:	bf88      	it	hi
 801975c:	2200      	movhi	r2, #0
 801975e:	4413      	add	r3, r2
 8019760:	1a18      	subs	r0, r3, r0
 8019762:	b003      	add	sp, #12
 8019764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019766:	f811 2b01 	ldrb.w	r2, [r1], #1
 801976a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801976e:	e7ed      	b.n	801974c <__exponent+0x4c>
 8019770:	2330      	movs	r3, #48	; 0x30
 8019772:	3130      	adds	r1, #48	; 0x30
 8019774:	7083      	strb	r3, [r0, #2]
 8019776:	70c1      	strb	r1, [r0, #3]
 8019778:	1d03      	adds	r3, r0, #4
 801977a:	e7f1      	b.n	8019760 <__exponent+0x60>

0801977c <_printf_float>:
 801977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019780:	ed2d 8b02 	vpush	{d8}
 8019784:	b08d      	sub	sp, #52	; 0x34
 8019786:	460c      	mov	r4, r1
 8019788:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801978c:	4616      	mov	r6, r2
 801978e:	461f      	mov	r7, r3
 8019790:	4605      	mov	r5, r0
 8019792:	f003 fabb 	bl	801cd0c <_localeconv_r>
 8019796:	f8d0 a000 	ldr.w	sl, [r0]
 801979a:	4650      	mov	r0, sl
 801979c:	f7e6 fd38 	bl	8000210 <strlen>
 80197a0:	2300      	movs	r3, #0
 80197a2:	930a      	str	r3, [sp, #40]	; 0x28
 80197a4:	6823      	ldr	r3, [r4, #0]
 80197a6:	9305      	str	r3, [sp, #20]
 80197a8:	f8d8 3000 	ldr.w	r3, [r8]
 80197ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80197b0:	3307      	adds	r3, #7
 80197b2:	f023 0307 	bic.w	r3, r3, #7
 80197b6:	f103 0208 	add.w	r2, r3, #8
 80197ba:	f8c8 2000 	str.w	r2, [r8]
 80197be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80197c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80197ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80197ce:	9307      	str	r3, [sp, #28]
 80197d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80197d4:	ee08 0a10 	vmov	s16, r0
 80197d8:	4b9f      	ldr	r3, [pc, #636]	; (8019a58 <_printf_float+0x2dc>)
 80197da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80197de:	f04f 32ff 	mov.w	r2, #4294967295
 80197e2:	f7e7 f9c3 	bl	8000b6c <__aeabi_dcmpun>
 80197e6:	bb88      	cbnz	r0, 801984c <_printf_float+0xd0>
 80197e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80197ec:	4b9a      	ldr	r3, [pc, #616]	; (8019a58 <_printf_float+0x2dc>)
 80197ee:	f04f 32ff 	mov.w	r2, #4294967295
 80197f2:	f7e7 f99d 	bl	8000b30 <__aeabi_dcmple>
 80197f6:	bb48      	cbnz	r0, 801984c <_printf_float+0xd0>
 80197f8:	2200      	movs	r2, #0
 80197fa:	2300      	movs	r3, #0
 80197fc:	4640      	mov	r0, r8
 80197fe:	4649      	mov	r1, r9
 8019800:	f7e7 f98c 	bl	8000b1c <__aeabi_dcmplt>
 8019804:	b110      	cbz	r0, 801980c <_printf_float+0x90>
 8019806:	232d      	movs	r3, #45	; 0x2d
 8019808:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801980c:	4b93      	ldr	r3, [pc, #588]	; (8019a5c <_printf_float+0x2e0>)
 801980e:	4894      	ldr	r0, [pc, #592]	; (8019a60 <_printf_float+0x2e4>)
 8019810:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019814:	bf94      	ite	ls
 8019816:	4698      	movls	r8, r3
 8019818:	4680      	movhi	r8, r0
 801981a:	2303      	movs	r3, #3
 801981c:	6123      	str	r3, [r4, #16]
 801981e:	9b05      	ldr	r3, [sp, #20]
 8019820:	f023 0204 	bic.w	r2, r3, #4
 8019824:	6022      	str	r2, [r4, #0]
 8019826:	f04f 0900 	mov.w	r9, #0
 801982a:	9700      	str	r7, [sp, #0]
 801982c:	4633      	mov	r3, r6
 801982e:	aa0b      	add	r2, sp, #44	; 0x2c
 8019830:	4621      	mov	r1, r4
 8019832:	4628      	mov	r0, r5
 8019834:	f000 f9d8 	bl	8019be8 <_printf_common>
 8019838:	3001      	adds	r0, #1
 801983a:	f040 8090 	bne.w	801995e <_printf_float+0x1e2>
 801983e:	f04f 30ff 	mov.w	r0, #4294967295
 8019842:	b00d      	add	sp, #52	; 0x34
 8019844:	ecbd 8b02 	vpop	{d8}
 8019848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801984c:	4642      	mov	r2, r8
 801984e:	464b      	mov	r3, r9
 8019850:	4640      	mov	r0, r8
 8019852:	4649      	mov	r1, r9
 8019854:	f7e7 f98a 	bl	8000b6c <__aeabi_dcmpun>
 8019858:	b140      	cbz	r0, 801986c <_printf_float+0xf0>
 801985a:	464b      	mov	r3, r9
 801985c:	2b00      	cmp	r3, #0
 801985e:	bfbc      	itt	lt
 8019860:	232d      	movlt	r3, #45	; 0x2d
 8019862:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8019866:	487f      	ldr	r0, [pc, #508]	; (8019a64 <_printf_float+0x2e8>)
 8019868:	4b7f      	ldr	r3, [pc, #508]	; (8019a68 <_printf_float+0x2ec>)
 801986a:	e7d1      	b.n	8019810 <_printf_float+0x94>
 801986c:	6863      	ldr	r3, [r4, #4]
 801986e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8019872:	9206      	str	r2, [sp, #24]
 8019874:	1c5a      	adds	r2, r3, #1
 8019876:	d13f      	bne.n	80198f8 <_printf_float+0x17c>
 8019878:	2306      	movs	r3, #6
 801987a:	6063      	str	r3, [r4, #4]
 801987c:	9b05      	ldr	r3, [sp, #20]
 801987e:	6861      	ldr	r1, [r4, #4]
 8019880:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019884:	2300      	movs	r3, #0
 8019886:	9303      	str	r3, [sp, #12]
 8019888:	ab0a      	add	r3, sp, #40	; 0x28
 801988a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801988e:	ab09      	add	r3, sp, #36	; 0x24
 8019890:	ec49 8b10 	vmov	d0, r8, r9
 8019894:	9300      	str	r3, [sp, #0]
 8019896:	6022      	str	r2, [r4, #0]
 8019898:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801989c:	4628      	mov	r0, r5
 801989e:	f7ff fecd 	bl	801963c <__cvt>
 80198a2:	9b06      	ldr	r3, [sp, #24]
 80198a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80198a6:	2b47      	cmp	r3, #71	; 0x47
 80198a8:	4680      	mov	r8, r0
 80198aa:	d108      	bne.n	80198be <_printf_float+0x142>
 80198ac:	1cc8      	adds	r0, r1, #3
 80198ae:	db02      	blt.n	80198b6 <_printf_float+0x13a>
 80198b0:	6863      	ldr	r3, [r4, #4]
 80198b2:	4299      	cmp	r1, r3
 80198b4:	dd41      	ble.n	801993a <_printf_float+0x1be>
 80198b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80198ba:	fa5f fb8b 	uxtb.w	fp, fp
 80198be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80198c2:	d820      	bhi.n	8019906 <_printf_float+0x18a>
 80198c4:	3901      	subs	r1, #1
 80198c6:	465a      	mov	r2, fp
 80198c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80198cc:	9109      	str	r1, [sp, #36]	; 0x24
 80198ce:	f7ff ff17 	bl	8019700 <__exponent>
 80198d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80198d4:	1813      	adds	r3, r2, r0
 80198d6:	2a01      	cmp	r2, #1
 80198d8:	4681      	mov	r9, r0
 80198da:	6123      	str	r3, [r4, #16]
 80198dc:	dc02      	bgt.n	80198e4 <_printf_float+0x168>
 80198de:	6822      	ldr	r2, [r4, #0]
 80198e0:	07d2      	lsls	r2, r2, #31
 80198e2:	d501      	bpl.n	80198e8 <_printf_float+0x16c>
 80198e4:	3301      	adds	r3, #1
 80198e6:	6123      	str	r3, [r4, #16]
 80198e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d09c      	beq.n	801982a <_printf_float+0xae>
 80198f0:	232d      	movs	r3, #45	; 0x2d
 80198f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80198f6:	e798      	b.n	801982a <_printf_float+0xae>
 80198f8:	9a06      	ldr	r2, [sp, #24]
 80198fa:	2a47      	cmp	r2, #71	; 0x47
 80198fc:	d1be      	bne.n	801987c <_printf_float+0x100>
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d1bc      	bne.n	801987c <_printf_float+0x100>
 8019902:	2301      	movs	r3, #1
 8019904:	e7b9      	b.n	801987a <_printf_float+0xfe>
 8019906:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801990a:	d118      	bne.n	801993e <_printf_float+0x1c2>
 801990c:	2900      	cmp	r1, #0
 801990e:	6863      	ldr	r3, [r4, #4]
 8019910:	dd0b      	ble.n	801992a <_printf_float+0x1ae>
 8019912:	6121      	str	r1, [r4, #16]
 8019914:	b913      	cbnz	r3, 801991c <_printf_float+0x1a0>
 8019916:	6822      	ldr	r2, [r4, #0]
 8019918:	07d0      	lsls	r0, r2, #31
 801991a:	d502      	bpl.n	8019922 <_printf_float+0x1a6>
 801991c:	3301      	adds	r3, #1
 801991e:	440b      	add	r3, r1
 8019920:	6123      	str	r3, [r4, #16]
 8019922:	65a1      	str	r1, [r4, #88]	; 0x58
 8019924:	f04f 0900 	mov.w	r9, #0
 8019928:	e7de      	b.n	80198e8 <_printf_float+0x16c>
 801992a:	b913      	cbnz	r3, 8019932 <_printf_float+0x1b6>
 801992c:	6822      	ldr	r2, [r4, #0]
 801992e:	07d2      	lsls	r2, r2, #31
 8019930:	d501      	bpl.n	8019936 <_printf_float+0x1ba>
 8019932:	3302      	adds	r3, #2
 8019934:	e7f4      	b.n	8019920 <_printf_float+0x1a4>
 8019936:	2301      	movs	r3, #1
 8019938:	e7f2      	b.n	8019920 <_printf_float+0x1a4>
 801993a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801993e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019940:	4299      	cmp	r1, r3
 8019942:	db05      	blt.n	8019950 <_printf_float+0x1d4>
 8019944:	6823      	ldr	r3, [r4, #0]
 8019946:	6121      	str	r1, [r4, #16]
 8019948:	07d8      	lsls	r0, r3, #31
 801994a:	d5ea      	bpl.n	8019922 <_printf_float+0x1a6>
 801994c:	1c4b      	adds	r3, r1, #1
 801994e:	e7e7      	b.n	8019920 <_printf_float+0x1a4>
 8019950:	2900      	cmp	r1, #0
 8019952:	bfd4      	ite	le
 8019954:	f1c1 0202 	rsble	r2, r1, #2
 8019958:	2201      	movgt	r2, #1
 801995a:	4413      	add	r3, r2
 801995c:	e7e0      	b.n	8019920 <_printf_float+0x1a4>
 801995e:	6823      	ldr	r3, [r4, #0]
 8019960:	055a      	lsls	r2, r3, #21
 8019962:	d407      	bmi.n	8019974 <_printf_float+0x1f8>
 8019964:	6923      	ldr	r3, [r4, #16]
 8019966:	4642      	mov	r2, r8
 8019968:	4631      	mov	r1, r6
 801996a:	4628      	mov	r0, r5
 801996c:	47b8      	blx	r7
 801996e:	3001      	adds	r0, #1
 8019970:	d12c      	bne.n	80199cc <_printf_float+0x250>
 8019972:	e764      	b.n	801983e <_printf_float+0xc2>
 8019974:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019978:	f240 80e0 	bls.w	8019b3c <_printf_float+0x3c0>
 801997c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019980:	2200      	movs	r2, #0
 8019982:	2300      	movs	r3, #0
 8019984:	f7e7 f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 8019988:	2800      	cmp	r0, #0
 801998a:	d034      	beq.n	80199f6 <_printf_float+0x27a>
 801998c:	4a37      	ldr	r2, [pc, #220]	; (8019a6c <_printf_float+0x2f0>)
 801998e:	2301      	movs	r3, #1
 8019990:	4631      	mov	r1, r6
 8019992:	4628      	mov	r0, r5
 8019994:	47b8      	blx	r7
 8019996:	3001      	adds	r0, #1
 8019998:	f43f af51 	beq.w	801983e <_printf_float+0xc2>
 801999c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80199a0:	429a      	cmp	r2, r3
 80199a2:	db02      	blt.n	80199aa <_printf_float+0x22e>
 80199a4:	6823      	ldr	r3, [r4, #0]
 80199a6:	07d8      	lsls	r0, r3, #31
 80199a8:	d510      	bpl.n	80199cc <_printf_float+0x250>
 80199aa:	ee18 3a10 	vmov	r3, s16
 80199ae:	4652      	mov	r2, sl
 80199b0:	4631      	mov	r1, r6
 80199b2:	4628      	mov	r0, r5
 80199b4:	47b8      	blx	r7
 80199b6:	3001      	adds	r0, #1
 80199b8:	f43f af41 	beq.w	801983e <_printf_float+0xc2>
 80199bc:	f04f 0800 	mov.w	r8, #0
 80199c0:	f104 091a 	add.w	r9, r4, #26
 80199c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199c6:	3b01      	subs	r3, #1
 80199c8:	4543      	cmp	r3, r8
 80199ca:	dc09      	bgt.n	80199e0 <_printf_float+0x264>
 80199cc:	6823      	ldr	r3, [r4, #0]
 80199ce:	079b      	lsls	r3, r3, #30
 80199d0:	f100 8105 	bmi.w	8019bde <_printf_float+0x462>
 80199d4:	68e0      	ldr	r0, [r4, #12]
 80199d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80199d8:	4298      	cmp	r0, r3
 80199da:	bfb8      	it	lt
 80199dc:	4618      	movlt	r0, r3
 80199de:	e730      	b.n	8019842 <_printf_float+0xc6>
 80199e0:	2301      	movs	r3, #1
 80199e2:	464a      	mov	r2, r9
 80199e4:	4631      	mov	r1, r6
 80199e6:	4628      	mov	r0, r5
 80199e8:	47b8      	blx	r7
 80199ea:	3001      	adds	r0, #1
 80199ec:	f43f af27 	beq.w	801983e <_printf_float+0xc2>
 80199f0:	f108 0801 	add.w	r8, r8, #1
 80199f4:	e7e6      	b.n	80199c4 <_printf_float+0x248>
 80199f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	dc39      	bgt.n	8019a70 <_printf_float+0x2f4>
 80199fc:	4a1b      	ldr	r2, [pc, #108]	; (8019a6c <_printf_float+0x2f0>)
 80199fe:	2301      	movs	r3, #1
 8019a00:	4631      	mov	r1, r6
 8019a02:	4628      	mov	r0, r5
 8019a04:	47b8      	blx	r7
 8019a06:	3001      	adds	r0, #1
 8019a08:	f43f af19 	beq.w	801983e <_printf_float+0xc2>
 8019a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019a10:	4313      	orrs	r3, r2
 8019a12:	d102      	bne.n	8019a1a <_printf_float+0x29e>
 8019a14:	6823      	ldr	r3, [r4, #0]
 8019a16:	07d9      	lsls	r1, r3, #31
 8019a18:	d5d8      	bpl.n	80199cc <_printf_float+0x250>
 8019a1a:	ee18 3a10 	vmov	r3, s16
 8019a1e:	4652      	mov	r2, sl
 8019a20:	4631      	mov	r1, r6
 8019a22:	4628      	mov	r0, r5
 8019a24:	47b8      	blx	r7
 8019a26:	3001      	adds	r0, #1
 8019a28:	f43f af09 	beq.w	801983e <_printf_float+0xc2>
 8019a2c:	f04f 0900 	mov.w	r9, #0
 8019a30:	f104 0a1a 	add.w	sl, r4, #26
 8019a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a36:	425b      	negs	r3, r3
 8019a38:	454b      	cmp	r3, r9
 8019a3a:	dc01      	bgt.n	8019a40 <_printf_float+0x2c4>
 8019a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a3e:	e792      	b.n	8019966 <_printf_float+0x1ea>
 8019a40:	2301      	movs	r3, #1
 8019a42:	4652      	mov	r2, sl
 8019a44:	4631      	mov	r1, r6
 8019a46:	4628      	mov	r0, r5
 8019a48:	47b8      	blx	r7
 8019a4a:	3001      	adds	r0, #1
 8019a4c:	f43f aef7 	beq.w	801983e <_printf_float+0xc2>
 8019a50:	f109 0901 	add.w	r9, r9, #1
 8019a54:	e7ee      	b.n	8019a34 <_printf_float+0x2b8>
 8019a56:	bf00      	nop
 8019a58:	7fefffff 	.word	0x7fefffff
 8019a5c:	080225b0 	.word	0x080225b0
 8019a60:	080225b4 	.word	0x080225b4
 8019a64:	080225bc 	.word	0x080225bc
 8019a68:	080225b8 	.word	0x080225b8
 8019a6c:	080229c1 	.word	0x080229c1
 8019a70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019a74:	429a      	cmp	r2, r3
 8019a76:	bfa8      	it	ge
 8019a78:	461a      	movge	r2, r3
 8019a7a:	2a00      	cmp	r2, #0
 8019a7c:	4691      	mov	r9, r2
 8019a7e:	dc37      	bgt.n	8019af0 <_printf_float+0x374>
 8019a80:	f04f 0b00 	mov.w	fp, #0
 8019a84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019a88:	f104 021a 	add.w	r2, r4, #26
 8019a8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019a8e:	9305      	str	r3, [sp, #20]
 8019a90:	eba3 0309 	sub.w	r3, r3, r9
 8019a94:	455b      	cmp	r3, fp
 8019a96:	dc33      	bgt.n	8019b00 <_printf_float+0x384>
 8019a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019a9c:	429a      	cmp	r2, r3
 8019a9e:	db3b      	blt.n	8019b18 <_printf_float+0x39c>
 8019aa0:	6823      	ldr	r3, [r4, #0]
 8019aa2:	07da      	lsls	r2, r3, #31
 8019aa4:	d438      	bmi.n	8019b18 <_printf_float+0x39c>
 8019aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019aa8:	9b05      	ldr	r3, [sp, #20]
 8019aaa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019aac:	1ad3      	subs	r3, r2, r3
 8019aae:	eba2 0901 	sub.w	r9, r2, r1
 8019ab2:	4599      	cmp	r9, r3
 8019ab4:	bfa8      	it	ge
 8019ab6:	4699      	movge	r9, r3
 8019ab8:	f1b9 0f00 	cmp.w	r9, #0
 8019abc:	dc35      	bgt.n	8019b2a <_printf_float+0x3ae>
 8019abe:	f04f 0800 	mov.w	r8, #0
 8019ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019ac6:	f104 0a1a 	add.w	sl, r4, #26
 8019aca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019ace:	1a9b      	subs	r3, r3, r2
 8019ad0:	eba3 0309 	sub.w	r3, r3, r9
 8019ad4:	4543      	cmp	r3, r8
 8019ad6:	f77f af79 	ble.w	80199cc <_printf_float+0x250>
 8019ada:	2301      	movs	r3, #1
 8019adc:	4652      	mov	r2, sl
 8019ade:	4631      	mov	r1, r6
 8019ae0:	4628      	mov	r0, r5
 8019ae2:	47b8      	blx	r7
 8019ae4:	3001      	adds	r0, #1
 8019ae6:	f43f aeaa 	beq.w	801983e <_printf_float+0xc2>
 8019aea:	f108 0801 	add.w	r8, r8, #1
 8019aee:	e7ec      	b.n	8019aca <_printf_float+0x34e>
 8019af0:	4613      	mov	r3, r2
 8019af2:	4631      	mov	r1, r6
 8019af4:	4642      	mov	r2, r8
 8019af6:	4628      	mov	r0, r5
 8019af8:	47b8      	blx	r7
 8019afa:	3001      	adds	r0, #1
 8019afc:	d1c0      	bne.n	8019a80 <_printf_float+0x304>
 8019afe:	e69e      	b.n	801983e <_printf_float+0xc2>
 8019b00:	2301      	movs	r3, #1
 8019b02:	4631      	mov	r1, r6
 8019b04:	4628      	mov	r0, r5
 8019b06:	9205      	str	r2, [sp, #20]
 8019b08:	47b8      	blx	r7
 8019b0a:	3001      	adds	r0, #1
 8019b0c:	f43f ae97 	beq.w	801983e <_printf_float+0xc2>
 8019b10:	9a05      	ldr	r2, [sp, #20]
 8019b12:	f10b 0b01 	add.w	fp, fp, #1
 8019b16:	e7b9      	b.n	8019a8c <_printf_float+0x310>
 8019b18:	ee18 3a10 	vmov	r3, s16
 8019b1c:	4652      	mov	r2, sl
 8019b1e:	4631      	mov	r1, r6
 8019b20:	4628      	mov	r0, r5
 8019b22:	47b8      	blx	r7
 8019b24:	3001      	adds	r0, #1
 8019b26:	d1be      	bne.n	8019aa6 <_printf_float+0x32a>
 8019b28:	e689      	b.n	801983e <_printf_float+0xc2>
 8019b2a:	9a05      	ldr	r2, [sp, #20]
 8019b2c:	464b      	mov	r3, r9
 8019b2e:	4442      	add	r2, r8
 8019b30:	4631      	mov	r1, r6
 8019b32:	4628      	mov	r0, r5
 8019b34:	47b8      	blx	r7
 8019b36:	3001      	adds	r0, #1
 8019b38:	d1c1      	bne.n	8019abe <_printf_float+0x342>
 8019b3a:	e680      	b.n	801983e <_printf_float+0xc2>
 8019b3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019b3e:	2a01      	cmp	r2, #1
 8019b40:	dc01      	bgt.n	8019b46 <_printf_float+0x3ca>
 8019b42:	07db      	lsls	r3, r3, #31
 8019b44:	d538      	bpl.n	8019bb8 <_printf_float+0x43c>
 8019b46:	2301      	movs	r3, #1
 8019b48:	4642      	mov	r2, r8
 8019b4a:	4631      	mov	r1, r6
 8019b4c:	4628      	mov	r0, r5
 8019b4e:	47b8      	blx	r7
 8019b50:	3001      	adds	r0, #1
 8019b52:	f43f ae74 	beq.w	801983e <_printf_float+0xc2>
 8019b56:	ee18 3a10 	vmov	r3, s16
 8019b5a:	4652      	mov	r2, sl
 8019b5c:	4631      	mov	r1, r6
 8019b5e:	4628      	mov	r0, r5
 8019b60:	47b8      	blx	r7
 8019b62:	3001      	adds	r0, #1
 8019b64:	f43f ae6b 	beq.w	801983e <_printf_float+0xc2>
 8019b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019b6c:	2200      	movs	r2, #0
 8019b6e:	2300      	movs	r3, #0
 8019b70:	f7e6 ffca 	bl	8000b08 <__aeabi_dcmpeq>
 8019b74:	b9d8      	cbnz	r0, 8019bae <_printf_float+0x432>
 8019b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b78:	f108 0201 	add.w	r2, r8, #1
 8019b7c:	3b01      	subs	r3, #1
 8019b7e:	4631      	mov	r1, r6
 8019b80:	4628      	mov	r0, r5
 8019b82:	47b8      	blx	r7
 8019b84:	3001      	adds	r0, #1
 8019b86:	d10e      	bne.n	8019ba6 <_printf_float+0x42a>
 8019b88:	e659      	b.n	801983e <_printf_float+0xc2>
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	4652      	mov	r2, sl
 8019b8e:	4631      	mov	r1, r6
 8019b90:	4628      	mov	r0, r5
 8019b92:	47b8      	blx	r7
 8019b94:	3001      	adds	r0, #1
 8019b96:	f43f ae52 	beq.w	801983e <_printf_float+0xc2>
 8019b9a:	f108 0801 	add.w	r8, r8, #1
 8019b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ba0:	3b01      	subs	r3, #1
 8019ba2:	4543      	cmp	r3, r8
 8019ba4:	dcf1      	bgt.n	8019b8a <_printf_float+0x40e>
 8019ba6:	464b      	mov	r3, r9
 8019ba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019bac:	e6dc      	b.n	8019968 <_printf_float+0x1ec>
 8019bae:	f04f 0800 	mov.w	r8, #0
 8019bb2:	f104 0a1a 	add.w	sl, r4, #26
 8019bb6:	e7f2      	b.n	8019b9e <_printf_float+0x422>
 8019bb8:	2301      	movs	r3, #1
 8019bba:	4642      	mov	r2, r8
 8019bbc:	e7df      	b.n	8019b7e <_printf_float+0x402>
 8019bbe:	2301      	movs	r3, #1
 8019bc0:	464a      	mov	r2, r9
 8019bc2:	4631      	mov	r1, r6
 8019bc4:	4628      	mov	r0, r5
 8019bc6:	47b8      	blx	r7
 8019bc8:	3001      	adds	r0, #1
 8019bca:	f43f ae38 	beq.w	801983e <_printf_float+0xc2>
 8019bce:	f108 0801 	add.w	r8, r8, #1
 8019bd2:	68e3      	ldr	r3, [r4, #12]
 8019bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019bd6:	1a5b      	subs	r3, r3, r1
 8019bd8:	4543      	cmp	r3, r8
 8019bda:	dcf0      	bgt.n	8019bbe <_printf_float+0x442>
 8019bdc:	e6fa      	b.n	80199d4 <_printf_float+0x258>
 8019bde:	f04f 0800 	mov.w	r8, #0
 8019be2:	f104 0919 	add.w	r9, r4, #25
 8019be6:	e7f4      	b.n	8019bd2 <_printf_float+0x456>

08019be8 <_printf_common>:
 8019be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019bec:	4616      	mov	r6, r2
 8019bee:	4699      	mov	r9, r3
 8019bf0:	688a      	ldr	r2, [r1, #8]
 8019bf2:	690b      	ldr	r3, [r1, #16]
 8019bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019bf8:	4293      	cmp	r3, r2
 8019bfa:	bfb8      	it	lt
 8019bfc:	4613      	movlt	r3, r2
 8019bfe:	6033      	str	r3, [r6, #0]
 8019c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019c04:	4607      	mov	r7, r0
 8019c06:	460c      	mov	r4, r1
 8019c08:	b10a      	cbz	r2, 8019c0e <_printf_common+0x26>
 8019c0a:	3301      	adds	r3, #1
 8019c0c:	6033      	str	r3, [r6, #0]
 8019c0e:	6823      	ldr	r3, [r4, #0]
 8019c10:	0699      	lsls	r1, r3, #26
 8019c12:	bf42      	ittt	mi
 8019c14:	6833      	ldrmi	r3, [r6, #0]
 8019c16:	3302      	addmi	r3, #2
 8019c18:	6033      	strmi	r3, [r6, #0]
 8019c1a:	6825      	ldr	r5, [r4, #0]
 8019c1c:	f015 0506 	ands.w	r5, r5, #6
 8019c20:	d106      	bne.n	8019c30 <_printf_common+0x48>
 8019c22:	f104 0a19 	add.w	sl, r4, #25
 8019c26:	68e3      	ldr	r3, [r4, #12]
 8019c28:	6832      	ldr	r2, [r6, #0]
 8019c2a:	1a9b      	subs	r3, r3, r2
 8019c2c:	42ab      	cmp	r3, r5
 8019c2e:	dc26      	bgt.n	8019c7e <_printf_common+0x96>
 8019c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019c34:	1e13      	subs	r3, r2, #0
 8019c36:	6822      	ldr	r2, [r4, #0]
 8019c38:	bf18      	it	ne
 8019c3a:	2301      	movne	r3, #1
 8019c3c:	0692      	lsls	r2, r2, #26
 8019c3e:	d42b      	bmi.n	8019c98 <_printf_common+0xb0>
 8019c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019c44:	4649      	mov	r1, r9
 8019c46:	4638      	mov	r0, r7
 8019c48:	47c0      	blx	r8
 8019c4a:	3001      	adds	r0, #1
 8019c4c:	d01e      	beq.n	8019c8c <_printf_common+0xa4>
 8019c4e:	6823      	ldr	r3, [r4, #0]
 8019c50:	68e5      	ldr	r5, [r4, #12]
 8019c52:	6832      	ldr	r2, [r6, #0]
 8019c54:	f003 0306 	and.w	r3, r3, #6
 8019c58:	2b04      	cmp	r3, #4
 8019c5a:	bf08      	it	eq
 8019c5c:	1aad      	subeq	r5, r5, r2
 8019c5e:	68a3      	ldr	r3, [r4, #8]
 8019c60:	6922      	ldr	r2, [r4, #16]
 8019c62:	bf0c      	ite	eq
 8019c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019c68:	2500      	movne	r5, #0
 8019c6a:	4293      	cmp	r3, r2
 8019c6c:	bfc4      	itt	gt
 8019c6e:	1a9b      	subgt	r3, r3, r2
 8019c70:	18ed      	addgt	r5, r5, r3
 8019c72:	2600      	movs	r6, #0
 8019c74:	341a      	adds	r4, #26
 8019c76:	42b5      	cmp	r5, r6
 8019c78:	d11a      	bne.n	8019cb0 <_printf_common+0xc8>
 8019c7a:	2000      	movs	r0, #0
 8019c7c:	e008      	b.n	8019c90 <_printf_common+0xa8>
 8019c7e:	2301      	movs	r3, #1
 8019c80:	4652      	mov	r2, sl
 8019c82:	4649      	mov	r1, r9
 8019c84:	4638      	mov	r0, r7
 8019c86:	47c0      	blx	r8
 8019c88:	3001      	adds	r0, #1
 8019c8a:	d103      	bne.n	8019c94 <_printf_common+0xac>
 8019c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c94:	3501      	adds	r5, #1
 8019c96:	e7c6      	b.n	8019c26 <_printf_common+0x3e>
 8019c98:	18e1      	adds	r1, r4, r3
 8019c9a:	1c5a      	adds	r2, r3, #1
 8019c9c:	2030      	movs	r0, #48	; 0x30
 8019c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019ca2:	4422      	add	r2, r4
 8019ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019cac:	3302      	adds	r3, #2
 8019cae:	e7c7      	b.n	8019c40 <_printf_common+0x58>
 8019cb0:	2301      	movs	r3, #1
 8019cb2:	4622      	mov	r2, r4
 8019cb4:	4649      	mov	r1, r9
 8019cb6:	4638      	mov	r0, r7
 8019cb8:	47c0      	blx	r8
 8019cba:	3001      	adds	r0, #1
 8019cbc:	d0e6      	beq.n	8019c8c <_printf_common+0xa4>
 8019cbe:	3601      	adds	r6, #1
 8019cc0:	e7d9      	b.n	8019c76 <_printf_common+0x8e>
	...

08019cc4 <_printf_i>:
 8019cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019cc8:	460c      	mov	r4, r1
 8019cca:	4691      	mov	r9, r2
 8019ccc:	7e27      	ldrb	r7, [r4, #24]
 8019cce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019cd0:	2f78      	cmp	r7, #120	; 0x78
 8019cd2:	4680      	mov	r8, r0
 8019cd4:	469a      	mov	sl, r3
 8019cd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019cda:	d807      	bhi.n	8019cec <_printf_i+0x28>
 8019cdc:	2f62      	cmp	r7, #98	; 0x62
 8019cde:	d80a      	bhi.n	8019cf6 <_printf_i+0x32>
 8019ce0:	2f00      	cmp	r7, #0
 8019ce2:	f000 80d8 	beq.w	8019e96 <_printf_i+0x1d2>
 8019ce6:	2f58      	cmp	r7, #88	; 0x58
 8019ce8:	f000 80a3 	beq.w	8019e32 <_printf_i+0x16e>
 8019cec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019cf4:	e03a      	b.n	8019d6c <_printf_i+0xa8>
 8019cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019cfa:	2b15      	cmp	r3, #21
 8019cfc:	d8f6      	bhi.n	8019cec <_printf_i+0x28>
 8019cfe:	a001      	add	r0, pc, #4	; (adr r0, 8019d04 <_printf_i+0x40>)
 8019d00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019d04:	08019d5d 	.word	0x08019d5d
 8019d08:	08019d71 	.word	0x08019d71
 8019d0c:	08019ced 	.word	0x08019ced
 8019d10:	08019ced 	.word	0x08019ced
 8019d14:	08019ced 	.word	0x08019ced
 8019d18:	08019ced 	.word	0x08019ced
 8019d1c:	08019d71 	.word	0x08019d71
 8019d20:	08019ced 	.word	0x08019ced
 8019d24:	08019ced 	.word	0x08019ced
 8019d28:	08019ced 	.word	0x08019ced
 8019d2c:	08019ced 	.word	0x08019ced
 8019d30:	08019e7d 	.word	0x08019e7d
 8019d34:	08019da1 	.word	0x08019da1
 8019d38:	08019e5f 	.word	0x08019e5f
 8019d3c:	08019ced 	.word	0x08019ced
 8019d40:	08019ced 	.word	0x08019ced
 8019d44:	08019e9f 	.word	0x08019e9f
 8019d48:	08019ced 	.word	0x08019ced
 8019d4c:	08019da1 	.word	0x08019da1
 8019d50:	08019ced 	.word	0x08019ced
 8019d54:	08019ced 	.word	0x08019ced
 8019d58:	08019e67 	.word	0x08019e67
 8019d5c:	680b      	ldr	r3, [r1, #0]
 8019d5e:	1d1a      	adds	r2, r3, #4
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	600a      	str	r2, [r1, #0]
 8019d64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019d6c:	2301      	movs	r3, #1
 8019d6e:	e0a3      	b.n	8019eb8 <_printf_i+0x1f4>
 8019d70:	6825      	ldr	r5, [r4, #0]
 8019d72:	6808      	ldr	r0, [r1, #0]
 8019d74:	062e      	lsls	r6, r5, #24
 8019d76:	f100 0304 	add.w	r3, r0, #4
 8019d7a:	d50a      	bpl.n	8019d92 <_printf_i+0xce>
 8019d7c:	6805      	ldr	r5, [r0, #0]
 8019d7e:	600b      	str	r3, [r1, #0]
 8019d80:	2d00      	cmp	r5, #0
 8019d82:	da03      	bge.n	8019d8c <_printf_i+0xc8>
 8019d84:	232d      	movs	r3, #45	; 0x2d
 8019d86:	426d      	negs	r5, r5
 8019d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d8c:	485e      	ldr	r0, [pc, #376]	; (8019f08 <_printf_i+0x244>)
 8019d8e:	230a      	movs	r3, #10
 8019d90:	e019      	b.n	8019dc6 <_printf_i+0x102>
 8019d92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019d96:	6805      	ldr	r5, [r0, #0]
 8019d98:	600b      	str	r3, [r1, #0]
 8019d9a:	bf18      	it	ne
 8019d9c:	b22d      	sxthne	r5, r5
 8019d9e:	e7ef      	b.n	8019d80 <_printf_i+0xbc>
 8019da0:	680b      	ldr	r3, [r1, #0]
 8019da2:	6825      	ldr	r5, [r4, #0]
 8019da4:	1d18      	adds	r0, r3, #4
 8019da6:	6008      	str	r0, [r1, #0]
 8019da8:	0628      	lsls	r0, r5, #24
 8019daa:	d501      	bpl.n	8019db0 <_printf_i+0xec>
 8019dac:	681d      	ldr	r5, [r3, #0]
 8019dae:	e002      	b.n	8019db6 <_printf_i+0xf2>
 8019db0:	0669      	lsls	r1, r5, #25
 8019db2:	d5fb      	bpl.n	8019dac <_printf_i+0xe8>
 8019db4:	881d      	ldrh	r5, [r3, #0]
 8019db6:	4854      	ldr	r0, [pc, #336]	; (8019f08 <_printf_i+0x244>)
 8019db8:	2f6f      	cmp	r7, #111	; 0x6f
 8019dba:	bf0c      	ite	eq
 8019dbc:	2308      	moveq	r3, #8
 8019dbe:	230a      	movne	r3, #10
 8019dc0:	2100      	movs	r1, #0
 8019dc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019dc6:	6866      	ldr	r6, [r4, #4]
 8019dc8:	60a6      	str	r6, [r4, #8]
 8019dca:	2e00      	cmp	r6, #0
 8019dcc:	bfa2      	ittt	ge
 8019dce:	6821      	ldrge	r1, [r4, #0]
 8019dd0:	f021 0104 	bicge.w	r1, r1, #4
 8019dd4:	6021      	strge	r1, [r4, #0]
 8019dd6:	b90d      	cbnz	r5, 8019ddc <_printf_i+0x118>
 8019dd8:	2e00      	cmp	r6, #0
 8019dda:	d04d      	beq.n	8019e78 <_printf_i+0x1b4>
 8019ddc:	4616      	mov	r6, r2
 8019dde:	fbb5 f1f3 	udiv	r1, r5, r3
 8019de2:	fb03 5711 	mls	r7, r3, r1, r5
 8019de6:	5dc7      	ldrb	r7, [r0, r7]
 8019de8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019dec:	462f      	mov	r7, r5
 8019dee:	42bb      	cmp	r3, r7
 8019df0:	460d      	mov	r5, r1
 8019df2:	d9f4      	bls.n	8019dde <_printf_i+0x11a>
 8019df4:	2b08      	cmp	r3, #8
 8019df6:	d10b      	bne.n	8019e10 <_printf_i+0x14c>
 8019df8:	6823      	ldr	r3, [r4, #0]
 8019dfa:	07df      	lsls	r7, r3, #31
 8019dfc:	d508      	bpl.n	8019e10 <_printf_i+0x14c>
 8019dfe:	6923      	ldr	r3, [r4, #16]
 8019e00:	6861      	ldr	r1, [r4, #4]
 8019e02:	4299      	cmp	r1, r3
 8019e04:	bfde      	ittt	le
 8019e06:	2330      	movle	r3, #48	; 0x30
 8019e08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019e0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019e10:	1b92      	subs	r2, r2, r6
 8019e12:	6122      	str	r2, [r4, #16]
 8019e14:	f8cd a000 	str.w	sl, [sp]
 8019e18:	464b      	mov	r3, r9
 8019e1a:	aa03      	add	r2, sp, #12
 8019e1c:	4621      	mov	r1, r4
 8019e1e:	4640      	mov	r0, r8
 8019e20:	f7ff fee2 	bl	8019be8 <_printf_common>
 8019e24:	3001      	adds	r0, #1
 8019e26:	d14c      	bne.n	8019ec2 <_printf_i+0x1fe>
 8019e28:	f04f 30ff 	mov.w	r0, #4294967295
 8019e2c:	b004      	add	sp, #16
 8019e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e32:	4835      	ldr	r0, [pc, #212]	; (8019f08 <_printf_i+0x244>)
 8019e34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019e38:	6823      	ldr	r3, [r4, #0]
 8019e3a:	680e      	ldr	r6, [r1, #0]
 8019e3c:	061f      	lsls	r7, r3, #24
 8019e3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8019e42:	600e      	str	r6, [r1, #0]
 8019e44:	d514      	bpl.n	8019e70 <_printf_i+0x1ac>
 8019e46:	07d9      	lsls	r1, r3, #31
 8019e48:	bf44      	itt	mi
 8019e4a:	f043 0320 	orrmi.w	r3, r3, #32
 8019e4e:	6023      	strmi	r3, [r4, #0]
 8019e50:	b91d      	cbnz	r5, 8019e5a <_printf_i+0x196>
 8019e52:	6823      	ldr	r3, [r4, #0]
 8019e54:	f023 0320 	bic.w	r3, r3, #32
 8019e58:	6023      	str	r3, [r4, #0]
 8019e5a:	2310      	movs	r3, #16
 8019e5c:	e7b0      	b.n	8019dc0 <_printf_i+0xfc>
 8019e5e:	6823      	ldr	r3, [r4, #0]
 8019e60:	f043 0320 	orr.w	r3, r3, #32
 8019e64:	6023      	str	r3, [r4, #0]
 8019e66:	2378      	movs	r3, #120	; 0x78
 8019e68:	4828      	ldr	r0, [pc, #160]	; (8019f0c <_printf_i+0x248>)
 8019e6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019e6e:	e7e3      	b.n	8019e38 <_printf_i+0x174>
 8019e70:	065e      	lsls	r6, r3, #25
 8019e72:	bf48      	it	mi
 8019e74:	b2ad      	uxthmi	r5, r5
 8019e76:	e7e6      	b.n	8019e46 <_printf_i+0x182>
 8019e78:	4616      	mov	r6, r2
 8019e7a:	e7bb      	b.n	8019df4 <_printf_i+0x130>
 8019e7c:	680b      	ldr	r3, [r1, #0]
 8019e7e:	6826      	ldr	r6, [r4, #0]
 8019e80:	6960      	ldr	r0, [r4, #20]
 8019e82:	1d1d      	adds	r5, r3, #4
 8019e84:	600d      	str	r5, [r1, #0]
 8019e86:	0635      	lsls	r5, r6, #24
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	d501      	bpl.n	8019e90 <_printf_i+0x1cc>
 8019e8c:	6018      	str	r0, [r3, #0]
 8019e8e:	e002      	b.n	8019e96 <_printf_i+0x1d2>
 8019e90:	0671      	lsls	r1, r6, #25
 8019e92:	d5fb      	bpl.n	8019e8c <_printf_i+0x1c8>
 8019e94:	8018      	strh	r0, [r3, #0]
 8019e96:	2300      	movs	r3, #0
 8019e98:	6123      	str	r3, [r4, #16]
 8019e9a:	4616      	mov	r6, r2
 8019e9c:	e7ba      	b.n	8019e14 <_printf_i+0x150>
 8019e9e:	680b      	ldr	r3, [r1, #0]
 8019ea0:	1d1a      	adds	r2, r3, #4
 8019ea2:	600a      	str	r2, [r1, #0]
 8019ea4:	681e      	ldr	r6, [r3, #0]
 8019ea6:	6862      	ldr	r2, [r4, #4]
 8019ea8:	2100      	movs	r1, #0
 8019eaa:	4630      	mov	r0, r6
 8019eac:	f7e6 f9b8 	bl	8000220 <memchr>
 8019eb0:	b108      	cbz	r0, 8019eb6 <_printf_i+0x1f2>
 8019eb2:	1b80      	subs	r0, r0, r6
 8019eb4:	6060      	str	r0, [r4, #4]
 8019eb6:	6863      	ldr	r3, [r4, #4]
 8019eb8:	6123      	str	r3, [r4, #16]
 8019eba:	2300      	movs	r3, #0
 8019ebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ec0:	e7a8      	b.n	8019e14 <_printf_i+0x150>
 8019ec2:	6923      	ldr	r3, [r4, #16]
 8019ec4:	4632      	mov	r2, r6
 8019ec6:	4649      	mov	r1, r9
 8019ec8:	4640      	mov	r0, r8
 8019eca:	47d0      	blx	sl
 8019ecc:	3001      	adds	r0, #1
 8019ece:	d0ab      	beq.n	8019e28 <_printf_i+0x164>
 8019ed0:	6823      	ldr	r3, [r4, #0]
 8019ed2:	079b      	lsls	r3, r3, #30
 8019ed4:	d413      	bmi.n	8019efe <_printf_i+0x23a>
 8019ed6:	68e0      	ldr	r0, [r4, #12]
 8019ed8:	9b03      	ldr	r3, [sp, #12]
 8019eda:	4298      	cmp	r0, r3
 8019edc:	bfb8      	it	lt
 8019ede:	4618      	movlt	r0, r3
 8019ee0:	e7a4      	b.n	8019e2c <_printf_i+0x168>
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	4632      	mov	r2, r6
 8019ee6:	4649      	mov	r1, r9
 8019ee8:	4640      	mov	r0, r8
 8019eea:	47d0      	blx	sl
 8019eec:	3001      	adds	r0, #1
 8019eee:	d09b      	beq.n	8019e28 <_printf_i+0x164>
 8019ef0:	3501      	adds	r5, #1
 8019ef2:	68e3      	ldr	r3, [r4, #12]
 8019ef4:	9903      	ldr	r1, [sp, #12]
 8019ef6:	1a5b      	subs	r3, r3, r1
 8019ef8:	42ab      	cmp	r3, r5
 8019efa:	dcf2      	bgt.n	8019ee2 <_printf_i+0x21e>
 8019efc:	e7eb      	b.n	8019ed6 <_printf_i+0x212>
 8019efe:	2500      	movs	r5, #0
 8019f00:	f104 0619 	add.w	r6, r4, #25
 8019f04:	e7f5      	b.n	8019ef2 <_printf_i+0x22e>
 8019f06:	bf00      	nop
 8019f08:	080225c0 	.word	0x080225c0
 8019f0c:	080225d1 	.word	0x080225d1

08019f10 <_scanf_float>:
 8019f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f14:	b087      	sub	sp, #28
 8019f16:	4617      	mov	r7, r2
 8019f18:	9303      	str	r3, [sp, #12]
 8019f1a:	688b      	ldr	r3, [r1, #8]
 8019f1c:	1e5a      	subs	r2, r3, #1
 8019f1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019f22:	bf83      	ittte	hi
 8019f24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019f28:	195b      	addhi	r3, r3, r5
 8019f2a:	9302      	strhi	r3, [sp, #8]
 8019f2c:	2300      	movls	r3, #0
 8019f2e:	bf86      	itte	hi
 8019f30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019f34:	608b      	strhi	r3, [r1, #8]
 8019f36:	9302      	strls	r3, [sp, #8]
 8019f38:	680b      	ldr	r3, [r1, #0]
 8019f3a:	468b      	mov	fp, r1
 8019f3c:	2500      	movs	r5, #0
 8019f3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019f42:	f84b 3b1c 	str.w	r3, [fp], #28
 8019f46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019f4a:	4680      	mov	r8, r0
 8019f4c:	460c      	mov	r4, r1
 8019f4e:	465e      	mov	r6, fp
 8019f50:	46aa      	mov	sl, r5
 8019f52:	46a9      	mov	r9, r5
 8019f54:	9501      	str	r5, [sp, #4]
 8019f56:	68a2      	ldr	r2, [r4, #8]
 8019f58:	b152      	cbz	r2, 8019f70 <_scanf_float+0x60>
 8019f5a:	683b      	ldr	r3, [r7, #0]
 8019f5c:	781b      	ldrb	r3, [r3, #0]
 8019f5e:	2b4e      	cmp	r3, #78	; 0x4e
 8019f60:	d864      	bhi.n	801a02c <_scanf_float+0x11c>
 8019f62:	2b40      	cmp	r3, #64	; 0x40
 8019f64:	d83c      	bhi.n	8019fe0 <_scanf_float+0xd0>
 8019f66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019f6a:	b2c8      	uxtb	r0, r1
 8019f6c:	280e      	cmp	r0, #14
 8019f6e:	d93a      	bls.n	8019fe6 <_scanf_float+0xd6>
 8019f70:	f1b9 0f00 	cmp.w	r9, #0
 8019f74:	d003      	beq.n	8019f7e <_scanf_float+0x6e>
 8019f76:	6823      	ldr	r3, [r4, #0]
 8019f78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019f7c:	6023      	str	r3, [r4, #0]
 8019f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019f82:	f1ba 0f01 	cmp.w	sl, #1
 8019f86:	f200 8113 	bhi.w	801a1b0 <_scanf_float+0x2a0>
 8019f8a:	455e      	cmp	r6, fp
 8019f8c:	f200 8105 	bhi.w	801a19a <_scanf_float+0x28a>
 8019f90:	2501      	movs	r5, #1
 8019f92:	4628      	mov	r0, r5
 8019f94:	b007      	add	sp, #28
 8019f96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019f9e:	2a0d      	cmp	r2, #13
 8019fa0:	d8e6      	bhi.n	8019f70 <_scanf_float+0x60>
 8019fa2:	a101      	add	r1, pc, #4	; (adr r1, 8019fa8 <_scanf_float+0x98>)
 8019fa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019fa8:	0801a0e7 	.word	0x0801a0e7
 8019fac:	08019f71 	.word	0x08019f71
 8019fb0:	08019f71 	.word	0x08019f71
 8019fb4:	08019f71 	.word	0x08019f71
 8019fb8:	0801a147 	.word	0x0801a147
 8019fbc:	0801a11f 	.word	0x0801a11f
 8019fc0:	08019f71 	.word	0x08019f71
 8019fc4:	08019f71 	.word	0x08019f71
 8019fc8:	0801a0f5 	.word	0x0801a0f5
 8019fcc:	08019f71 	.word	0x08019f71
 8019fd0:	08019f71 	.word	0x08019f71
 8019fd4:	08019f71 	.word	0x08019f71
 8019fd8:	08019f71 	.word	0x08019f71
 8019fdc:	0801a0ad 	.word	0x0801a0ad
 8019fe0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019fe4:	e7db      	b.n	8019f9e <_scanf_float+0x8e>
 8019fe6:	290e      	cmp	r1, #14
 8019fe8:	d8c2      	bhi.n	8019f70 <_scanf_float+0x60>
 8019fea:	a001      	add	r0, pc, #4	; (adr r0, 8019ff0 <_scanf_float+0xe0>)
 8019fec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019ff0:	0801a09f 	.word	0x0801a09f
 8019ff4:	08019f71 	.word	0x08019f71
 8019ff8:	0801a09f 	.word	0x0801a09f
 8019ffc:	0801a133 	.word	0x0801a133
 801a000:	08019f71 	.word	0x08019f71
 801a004:	0801a04d 	.word	0x0801a04d
 801a008:	0801a089 	.word	0x0801a089
 801a00c:	0801a089 	.word	0x0801a089
 801a010:	0801a089 	.word	0x0801a089
 801a014:	0801a089 	.word	0x0801a089
 801a018:	0801a089 	.word	0x0801a089
 801a01c:	0801a089 	.word	0x0801a089
 801a020:	0801a089 	.word	0x0801a089
 801a024:	0801a089 	.word	0x0801a089
 801a028:	0801a089 	.word	0x0801a089
 801a02c:	2b6e      	cmp	r3, #110	; 0x6e
 801a02e:	d809      	bhi.n	801a044 <_scanf_float+0x134>
 801a030:	2b60      	cmp	r3, #96	; 0x60
 801a032:	d8b2      	bhi.n	8019f9a <_scanf_float+0x8a>
 801a034:	2b54      	cmp	r3, #84	; 0x54
 801a036:	d077      	beq.n	801a128 <_scanf_float+0x218>
 801a038:	2b59      	cmp	r3, #89	; 0x59
 801a03a:	d199      	bne.n	8019f70 <_scanf_float+0x60>
 801a03c:	2d07      	cmp	r5, #7
 801a03e:	d197      	bne.n	8019f70 <_scanf_float+0x60>
 801a040:	2508      	movs	r5, #8
 801a042:	e029      	b.n	801a098 <_scanf_float+0x188>
 801a044:	2b74      	cmp	r3, #116	; 0x74
 801a046:	d06f      	beq.n	801a128 <_scanf_float+0x218>
 801a048:	2b79      	cmp	r3, #121	; 0x79
 801a04a:	e7f6      	b.n	801a03a <_scanf_float+0x12a>
 801a04c:	6821      	ldr	r1, [r4, #0]
 801a04e:	05c8      	lsls	r0, r1, #23
 801a050:	d51a      	bpl.n	801a088 <_scanf_float+0x178>
 801a052:	9b02      	ldr	r3, [sp, #8]
 801a054:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a058:	6021      	str	r1, [r4, #0]
 801a05a:	f109 0901 	add.w	r9, r9, #1
 801a05e:	b11b      	cbz	r3, 801a068 <_scanf_float+0x158>
 801a060:	3b01      	subs	r3, #1
 801a062:	3201      	adds	r2, #1
 801a064:	9302      	str	r3, [sp, #8]
 801a066:	60a2      	str	r2, [r4, #8]
 801a068:	68a3      	ldr	r3, [r4, #8]
 801a06a:	3b01      	subs	r3, #1
 801a06c:	60a3      	str	r3, [r4, #8]
 801a06e:	6923      	ldr	r3, [r4, #16]
 801a070:	3301      	adds	r3, #1
 801a072:	6123      	str	r3, [r4, #16]
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	3b01      	subs	r3, #1
 801a078:	2b00      	cmp	r3, #0
 801a07a:	607b      	str	r3, [r7, #4]
 801a07c:	f340 8084 	ble.w	801a188 <_scanf_float+0x278>
 801a080:	683b      	ldr	r3, [r7, #0]
 801a082:	3301      	adds	r3, #1
 801a084:	603b      	str	r3, [r7, #0]
 801a086:	e766      	b.n	8019f56 <_scanf_float+0x46>
 801a088:	eb1a 0f05 	cmn.w	sl, r5
 801a08c:	f47f af70 	bne.w	8019f70 <_scanf_float+0x60>
 801a090:	6822      	ldr	r2, [r4, #0]
 801a092:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a096:	6022      	str	r2, [r4, #0]
 801a098:	f806 3b01 	strb.w	r3, [r6], #1
 801a09c:	e7e4      	b.n	801a068 <_scanf_float+0x158>
 801a09e:	6822      	ldr	r2, [r4, #0]
 801a0a0:	0610      	lsls	r0, r2, #24
 801a0a2:	f57f af65 	bpl.w	8019f70 <_scanf_float+0x60>
 801a0a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a0aa:	e7f4      	b.n	801a096 <_scanf_float+0x186>
 801a0ac:	f1ba 0f00 	cmp.w	sl, #0
 801a0b0:	d10e      	bne.n	801a0d0 <_scanf_float+0x1c0>
 801a0b2:	f1b9 0f00 	cmp.w	r9, #0
 801a0b6:	d10e      	bne.n	801a0d6 <_scanf_float+0x1c6>
 801a0b8:	6822      	ldr	r2, [r4, #0]
 801a0ba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a0be:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a0c2:	d108      	bne.n	801a0d6 <_scanf_float+0x1c6>
 801a0c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a0c8:	6022      	str	r2, [r4, #0]
 801a0ca:	f04f 0a01 	mov.w	sl, #1
 801a0ce:	e7e3      	b.n	801a098 <_scanf_float+0x188>
 801a0d0:	f1ba 0f02 	cmp.w	sl, #2
 801a0d4:	d055      	beq.n	801a182 <_scanf_float+0x272>
 801a0d6:	2d01      	cmp	r5, #1
 801a0d8:	d002      	beq.n	801a0e0 <_scanf_float+0x1d0>
 801a0da:	2d04      	cmp	r5, #4
 801a0dc:	f47f af48 	bne.w	8019f70 <_scanf_float+0x60>
 801a0e0:	3501      	adds	r5, #1
 801a0e2:	b2ed      	uxtb	r5, r5
 801a0e4:	e7d8      	b.n	801a098 <_scanf_float+0x188>
 801a0e6:	f1ba 0f01 	cmp.w	sl, #1
 801a0ea:	f47f af41 	bne.w	8019f70 <_scanf_float+0x60>
 801a0ee:	f04f 0a02 	mov.w	sl, #2
 801a0f2:	e7d1      	b.n	801a098 <_scanf_float+0x188>
 801a0f4:	b97d      	cbnz	r5, 801a116 <_scanf_float+0x206>
 801a0f6:	f1b9 0f00 	cmp.w	r9, #0
 801a0fa:	f47f af3c 	bne.w	8019f76 <_scanf_float+0x66>
 801a0fe:	6822      	ldr	r2, [r4, #0]
 801a100:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a104:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a108:	f47f af39 	bne.w	8019f7e <_scanf_float+0x6e>
 801a10c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a110:	6022      	str	r2, [r4, #0]
 801a112:	2501      	movs	r5, #1
 801a114:	e7c0      	b.n	801a098 <_scanf_float+0x188>
 801a116:	2d03      	cmp	r5, #3
 801a118:	d0e2      	beq.n	801a0e0 <_scanf_float+0x1d0>
 801a11a:	2d05      	cmp	r5, #5
 801a11c:	e7de      	b.n	801a0dc <_scanf_float+0x1cc>
 801a11e:	2d02      	cmp	r5, #2
 801a120:	f47f af26 	bne.w	8019f70 <_scanf_float+0x60>
 801a124:	2503      	movs	r5, #3
 801a126:	e7b7      	b.n	801a098 <_scanf_float+0x188>
 801a128:	2d06      	cmp	r5, #6
 801a12a:	f47f af21 	bne.w	8019f70 <_scanf_float+0x60>
 801a12e:	2507      	movs	r5, #7
 801a130:	e7b2      	b.n	801a098 <_scanf_float+0x188>
 801a132:	6822      	ldr	r2, [r4, #0]
 801a134:	0591      	lsls	r1, r2, #22
 801a136:	f57f af1b 	bpl.w	8019f70 <_scanf_float+0x60>
 801a13a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a13e:	6022      	str	r2, [r4, #0]
 801a140:	f8cd 9004 	str.w	r9, [sp, #4]
 801a144:	e7a8      	b.n	801a098 <_scanf_float+0x188>
 801a146:	6822      	ldr	r2, [r4, #0]
 801a148:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a14c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a150:	d006      	beq.n	801a160 <_scanf_float+0x250>
 801a152:	0550      	lsls	r0, r2, #21
 801a154:	f57f af0c 	bpl.w	8019f70 <_scanf_float+0x60>
 801a158:	f1b9 0f00 	cmp.w	r9, #0
 801a15c:	f43f af0f 	beq.w	8019f7e <_scanf_float+0x6e>
 801a160:	0591      	lsls	r1, r2, #22
 801a162:	bf58      	it	pl
 801a164:	9901      	ldrpl	r1, [sp, #4]
 801a166:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a16a:	bf58      	it	pl
 801a16c:	eba9 0101 	subpl.w	r1, r9, r1
 801a170:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a174:	bf58      	it	pl
 801a176:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a17a:	6022      	str	r2, [r4, #0]
 801a17c:	f04f 0900 	mov.w	r9, #0
 801a180:	e78a      	b.n	801a098 <_scanf_float+0x188>
 801a182:	f04f 0a03 	mov.w	sl, #3
 801a186:	e787      	b.n	801a098 <_scanf_float+0x188>
 801a188:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a18c:	4639      	mov	r1, r7
 801a18e:	4640      	mov	r0, r8
 801a190:	4798      	blx	r3
 801a192:	2800      	cmp	r0, #0
 801a194:	f43f aedf 	beq.w	8019f56 <_scanf_float+0x46>
 801a198:	e6ea      	b.n	8019f70 <_scanf_float+0x60>
 801a19a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a19e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a1a2:	463a      	mov	r2, r7
 801a1a4:	4640      	mov	r0, r8
 801a1a6:	4798      	blx	r3
 801a1a8:	6923      	ldr	r3, [r4, #16]
 801a1aa:	3b01      	subs	r3, #1
 801a1ac:	6123      	str	r3, [r4, #16]
 801a1ae:	e6ec      	b.n	8019f8a <_scanf_float+0x7a>
 801a1b0:	1e6b      	subs	r3, r5, #1
 801a1b2:	2b06      	cmp	r3, #6
 801a1b4:	d825      	bhi.n	801a202 <_scanf_float+0x2f2>
 801a1b6:	2d02      	cmp	r5, #2
 801a1b8:	d836      	bhi.n	801a228 <_scanf_float+0x318>
 801a1ba:	455e      	cmp	r6, fp
 801a1bc:	f67f aee8 	bls.w	8019f90 <_scanf_float+0x80>
 801a1c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a1c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a1c8:	463a      	mov	r2, r7
 801a1ca:	4640      	mov	r0, r8
 801a1cc:	4798      	blx	r3
 801a1ce:	6923      	ldr	r3, [r4, #16]
 801a1d0:	3b01      	subs	r3, #1
 801a1d2:	6123      	str	r3, [r4, #16]
 801a1d4:	e7f1      	b.n	801a1ba <_scanf_float+0x2aa>
 801a1d6:	9802      	ldr	r0, [sp, #8]
 801a1d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a1dc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a1e0:	9002      	str	r0, [sp, #8]
 801a1e2:	463a      	mov	r2, r7
 801a1e4:	4640      	mov	r0, r8
 801a1e6:	4798      	blx	r3
 801a1e8:	6923      	ldr	r3, [r4, #16]
 801a1ea:	3b01      	subs	r3, #1
 801a1ec:	6123      	str	r3, [r4, #16]
 801a1ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a1f2:	fa5f fa8a 	uxtb.w	sl, sl
 801a1f6:	f1ba 0f02 	cmp.w	sl, #2
 801a1fa:	d1ec      	bne.n	801a1d6 <_scanf_float+0x2c6>
 801a1fc:	3d03      	subs	r5, #3
 801a1fe:	b2ed      	uxtb	r5, r5
 801a200:	1b76      	subs	r6, r6, r5
 801a202:	6823      	ldr	r3, [r4, #0]
 801a204:	05da      	lsls	r2, r3, #23
 801a206:	d52f      	bpl.n	801a268 <_scanf_float+0x358>
 801a208:	055b      	lsls	r3, r3, #21
 801a20a:	d510      	bpl.n	801a22e <_scanf_float+0x31e>
 801a20c:	455e      	cmp	r6, fp
 801a20e:	f67f aebf 	bls.w	8019f90 <_scanf_float+0x80>
 801a212:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a21a:	463a      	mov	r2, r7
 801a21c:	4640      	mov	r0, r8
 801a21e:	4798      	blx	r3
 801a220:	6923      	ldr	r3, [r4, #16]
 801a222:	3b01      	subs	r3, #1
 801a224:	6123      	str	r3, [r4, #16]
 801a226:	e7f1      	b.n	801a20c <_scanf_float+0x2fc>
 801a228:	46aa      	mov	sl, r5
 801a22a:	9602      	str	r6, [sp, #8]
 801a22c:	e7df      	b.n	801a1ee <_scanf_float+0x2de>
 801a22e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a232:	6923      	ldr	r3, [r4, #16]
 801a234:	2965      	cmp	r1, #101	; 0x65
 801a236:	f103 33ff 	add.w	r3, r3, #4294967295
 801a23a:	f106 35ff 	add.w	r5, r6, #4294967295
 801a23e:	6123      	str	r3, [r4, #16]
 801a240:	d00c      	beq.n	801a25c <_scanf_float+0x34c>
 801a242:	2945      	cmp	r1, #69	; 0x45
 801a244:	d00a      	beq.n	801a25c <_scanf_float+0x34c>
 801a246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a24a:	463a      	mov	r2, r7
 801a24c:	4640      	mov	r0, r8
 801a24e:	4798      	blx	r3
 801a250:	6923      	ldr	r3, [r4, #16]
 801a252:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a256:	3b01      	subs	r3, #1
 801a258:	1eb5      	subs	r5, r6, #2
 801a25a:	6123      	str	r3, [r4, #16]
 801a25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a260:	463a      	mov	r2, r7
 801a262:	4640      	mov	r0, r8
 801a264:	4798      	blx	r3
 801a266:	462e      	mov	r6, r5
 801a268:	6825      	ldr	r5, [r4, #0]
 801a26a:	f015 0510 	ands.w	r5, r5, #16
 801a26e:	d158      	bne.n	801a322 <_scanf_float+0x412>
 801a270:	7035      	strb	r5, [r6, #0]
 801a272:	6823      	ldr	r3, [r4, #0]
 801a274:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a27c:	d11c      	bne.n	801a2b8 <_scanf_float+0x3a8>
 801a27e:	9b01      	ldr	r3, [sp, #4]
 801a280:	454b      	cmp	r3, r9
 801a282:	eba3 0209 	sub.w	r2, r3, r9
 801a286:	d124      	bne.n	801a2d2 <_scanf_float+0x3c2>
 801a288:	2200      	movs	r2, #0
 801a28a:	4659      	mov	r1, fp
 801a28c:	4640      	mov	r0, r8
 801a28e:	f000 fff9 	bl	801b284 <_strtod_r>
 801a292:	9b03      	ldr	r3, [sp, #12]
 801a294:	6821      	ldr	r1, [r4, #0]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	f011 0f02 	tst.w	r1, #2
 801a29c:	ec57 6b10 	vmov	r6, r7, d0
 801a2a0:	f103 0204 	add.w	r2, r3, #4
 801a2a4:	d020      	beq.n	801a2e8 <_scanf_float+0x3d8>
 801a2a6:	9903      	ldr	r1, [sp, #12]
 801a2a8:	600a      	str	r2, [r1, #0]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	e9c3 6700 	strd	r6, r7, [r3]
 801a2b0:	68e3      	ldr	r3, [r4, #12]
 801a2b2:	3301      	adds	r3, #1
 801a2b4:	60e3      	str	r3, [r4, #12]
 801a2b6:	e66c      	b.n	8019f92 <_scanf_float+0x82>
 801a2b8:	9b04      	ldr	r3, [sp, #16]
 801a2ba:	2b00      	cmp	r3, #0
 801a2bc:	d0e4      	beq.n	801a288 <_scanf_float+0x378>
 801a2be:	9905      	ldr	r1, [sp, #20]
 801a2c0:	230a      	movs	r3, #10
 801a2c2:	462a      	mov	r2, r5
 801a2c4:	3101      	adds	r1, #1
 801a2c6:	4640      	mov	r0, r8
 801a2c8:	f001 f866 	bl	801b398 <_strtol_r>
 801a2cc:	9b04      	ldr	r3, [sp, #16]
 801a2ce:	9e05      	ldr	r6, [sp, #20]
 801a2d0:	1ac2      	subs	r2, r0, r3
 801a2d2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a2d6:	429e      	cmp	r6, r3
 801a2d8:	bf28      	it	cs
 801a2da:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a2de:	4912      	ldr	r1, [pc, #72]	; (801a328 <_scanf_float+0x418>)
 801a2e0:	4630      	mov	r0, r6
 801a2e2:	f000 f8f9 	bl	801a4d8 <siprintf>
 801a2e6:	e7cf      	b.n	801a288 <_scanf_float+0x378>
 801a2e8:	f011 0f04 	tst.w	r1, #4
 801a2ec:	9903      	ldr	r1, [sp, #12]
 801a2ee:	600a      	str	r2, [r1, #0]
 801a2f0:	d1db      	bne.n	801a2aa <_scanf_float+0x39a>
 801a2f2:	f8d3 8000 	ldr.w	r8, [r3]
 801a2f6:	ee10 2a10 	vmov	r2, s0
 801a2fa:	ee10 0a10 	vmov	r0, s0
 801a2fe:	463b      	mov	r3, r7
 801a300:	4639      	mov	r1, r7
 801a302:	f7e6 fc33 	bl	8000b6c <__aeabi_dcmpun>
 801a306:	b128      	cbz	r0, 801a314 <_scanf_float+0x404>
 801a308:	4808      	ldr	r0, [pc, #32]	; (801a32c <_scanf_float+0x41c>)
 801a30a:	f000 f8df 	bl	801a4cc <nanf>
 801a30e:	ed88 0a00 	vstr	s0, [r8]
 801a312:	e7cd      	b.n	801a2b0 <_scanf_float+0x3a0>
 801a314:	4630      	mov	r0, r6
 801a316:	4639      	mov	r1, r7
 801a318:	f7e6 fc86 	bl	8000c28 <__aeabi_d2f>
 801a31c:	f8c8 0000 	str.w	r0, [r8]
 801a320:	e7c6      	b.n	801a2b0 <_scanf_float+0x3a0>
 801a322:	2500      	movs	r5, #0
 801a324:	e635      	b.n	8019f92 <_scanf_float+0x82>
 801a326:	bf00      	nop
 801a328:	080225e2 	.word	0x080225e2
 801a32c:	080226eb 	.word	0x080226eb

0801a330 <iprintf>:
 801a330:	b40f      	push	{r0, r1, r2, r3}
 801a332:	4b0a      	ldr	r3, [pc, #40]	; (801a35c <iprintf+0x2c>)
 801a334:	b513      	push	{r0, r1, r4, lr}
 801a336:	681c      	ldr	r4, [r3, #0]
 801a338:	b124      	cbz	r4, 801a344 <iprintf+0x14>
 801a33a:	69a3      	ldr	r3, [r4, #24]
 801a33c:	b913      	cbnz	r3, 801a344 <iprintf+0x14>
 801a33e:	4620      	mov	r0, r4
 801a340:	f002 f8c6 	bl	801c4d0 <__sinit>
 801a344:	ab05      	add	r3, sp, #20
 801a346:	9a04      	ldr	r2, [sp, #16]
 801a348:	68a1      	ldr	r1, [r4, #8]
 801a34a:	9301      	str	r3, [sp, #4]
 801a34c:	4620      	mov	r0, r4
 801a34e:	f003 fe41 	bl	801dfd4 <_vfiprintf_r>
 801a352:	b002      	add	sp, #8
 801a354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a358:	b004      	add	sp, #16
 801a35a:	4770      	bx	lr
 801a35c:	20000020 	.word	0x20000020

0801a360 <_puts_r>:
 801a360:	b570      	push	{r4, r5, r6, lr}
 801a362:	460e      	mov	r6, r1
 801a364:	4605      	mov	r5, r0
 801a366:	b118      	cbz	r0, 801a370 <_puts_r+0x10>
 801a368:	6983      	ldr	r3, [r0, #24]
 801a36a:	b90b      	cbnz	r3, 801a370 <_puts_r+0x10>
 801a36c:	f002 f8b0 	bl	801c4d0 <__sinit>
 801a370:	69ab      	ldr	r3, [r5, #24]
 801a372:	68ac      	ldr	r4, [r5, #8]
 801a374:	b913      	cbnz	r3, 801a37c <_puts_r+0x1c>
 801a376:	4628      	mov	r0, r5
 801a378:	f002 f8aa 	bl	801c4d0 <__sinit>
 801a37c:	4b2c      	ldr	r3, [pc, #176]	; (801a430 <_puts_r+0xd0>)
 801a37e:	429c      	cmp	r4, r3
 801a380:	d120      	bne.n	801a3c4 <_puts_r+0x64>
 801a382:	686c      	ldr	r4, [r5, #4]
 801a384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a386:	07db      	lsls	r3, r3, #31
 801a388:	d405      	bmi.n	801a396 <_puts_r+0x36>
 801a38a:	89a3      	ldrh	r3, [r4, #12]
 801a38c:	0598      	lsls	r0, r3, #22
 801a38e:	d402      	bmi.n	801a396 <_puts_r+0x36>
 801a390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a392:	f002 fcc0 	bl	801cd16 <__retarget_lock_acquire_recursive>
 801a396:	89a3      	ldrh	r3, [r4, #12]
 801a398:	0719      	lsls	r1, r3, #28
 801a39a:	d51d      	bpl.n	801a3d8 <_puts_r+0x78>
 801a39c:	6923      	ldr	r3, [r4, #16]
 801a39e:	b1db      	cbz	r3, 801a3d8 <_puts_r+0x78>
 801a3a0:	3e01      	subs	r6, #1
 801a3a2:	68a3      	ldr	r3, [r4, #8]
 801a3a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a3a8:	3b01      	subs	r3, #1
 801a3aa:	60a3      	str	r3, [r4, #8]
 801a3ac:	bb39      	cbnz	r1, 801a3fe <_puts_r+0x9e>
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	da38      	bge.n	801a424 <_puts_r+0xc4>
 801a3b2:	4622      	mov	r2, r4
 801a3b4:	210a      	movs	r1, #10
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f000 fff0 	bl	801b39c <__swbuf_r>
 801a3bc:	3001      	adds	r0, #1
 801a3be:	d011      	beq.n	801a3e4 <_puts_r+0x84>
 801a3c0:	250a      	movs	r5, #10
 801a3c2:	e011      	b.n	801a3e8 <_puts_r+0x88>
 801a3c4:	4b1b      	ldr	r3, [pc, #108]	; (801a434 <_puts_r+0xd4>)
 801a3c6:	429c      	cmp	r4, r3
 801a3c8:	d101      	bne.n	801a3ce <_puts_r+0x6e>
 801a3ca:	68ac      	ldr	r4, [r5, #8]
 801a3cc:	e7da      	b.n	801a384 <_puts_r+0x24>
 801a3ce:	4b1a      	ldr	r3, [pc, #104]	; (801a438 <_puts_r+0xd8>)
 801a3d0:	429c      	cmp	r4, r3
 801a3d2:	bf08      	it	eq
 801a3d4:	68ec      	ldreq	r4, [r5, #12]
 801a3d6:	e7d5      	b.n	801a384 <_puts_r+0x24>
 801a3d8:	4621      	mov	r1, r4
 801a3da:	4628      	mov	r0, r5
 801a3dc:	f001 f842 	bl	801b464 <__swsetup_r>
 801a3e0:	2800      	cmp	r0, #0
 801a3e2:	d0dd      	beq.n	801a3a0 <_puts_r+0x40>
 801a3e4:	f04f 35ff 	mov.w	r5, #4294967295
 801a3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a3ea:	07da      	lsls	r2, r3, #31
 801a3ec:	d405      	bmi.n	801a3fa <_puts_r+0x9a>
 801a3ee:	89a3      	ldrh	r3, [r4, #12]
 801a3f0:	059b      	lsls	r3, r3, #22
 801a3f2:	d402      	bmi.n	801a3fa <_puts_r+0x9a>
 801a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3f6:	f002 fc8f 	bl	801cd18 <__retarget_lock_release_recursive>
 801a3fa:	4628      	mov	r0, r5
 801a3fc:	bd70      	pop	{r4, r5, r6, pc}
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	da04      	bge.n	801a40c <_puts_r+0xac>
 801a402:	69a2      	ldr	r2, [r4, #24]
 801a404:	429a      	cmp	r2, r3
 801a406:	dc06      	bgt.n	801a416 <_puts_r+0xb6>
 801a408:	290a      	cmp	r1, #10
 801a40a:	d004      	beq.n	801a416 <_puts_r+0xb6>
 801a40c:	6823      	ldr	r3, [r4, #0]
 801a40e:	1c5a      	adds	r2, r3, #1
 801a410:	6022      	str	r2, [r4, #0]
 801a412:	7019      	strb	r1, [r3, #0]
 801a414:	e7c5      	b.n	801a3a2 <_puts_r+0x42>
 801a416:	4622      	mov	r2, r4
 801a418:	4628      	mov	r0, r5
 801a41a:	f000 ffbf 	bl	801b39c <__swbuf_r>
 801a41e:	3001      	adds	r0, #1
 801a420:	d1bf      	bne.n	801a3a2 <_puts_r+0x42>
 801a422:	e7df      	b.n	801a3e4 <_puts_r+0x84>
 801a424:	6823      	ldr	r3, [r4, #0]
 801a426:	250a      	movs	r5, #10
 801a428:	1c5a      	adds	r2, r3, #1
 801a42a:	6022      	str	r2, [r4, #0]
 801a42c:	701d      	strb	r5, [r3, #0]
 801a42e:	e7db      	b.n	801a3e8 <_puts_r+0x88>
 801a430:	0802278c 	.word	0x0802278c
 801a434:	080227ac 	.word	0x080227ac
 801a438:	0802276c 	.word	0x0802276c

0801a43c <puts>:
 801a43c:	4b02      	ldr	r3, [pc, #8]	; (801a448 <puts+0xc>)
 801a43e:	4601      	mov	r1, r0
 801a440:	6818      	ldr	r0, [r3, #0]
 801a442:	f7ff bf8d 	b.w	801a360 <_puts_r>
 801a446:	bf00      	nop
 801a448:	20000020 	.word	0x20000020

0801a44c <rand>:
 801a44c:	4b17      	ldr	r3, [pc, #92]	; (801a4ac <rand+0x60>)
 801a44e:	b510      	push	{r4, lr}
 801a450:	681c      	ldr	r4, [r3, #0]
 801a452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a454:	b9b3      	cbnz	r3, 801a484 <rand+0x38>
 801a456:	2018      	movs	r0, #24
 801a458:	f002 fcd6 	bl	801ce08 <malloc>
 801a45c:	63a0      	str	r0, [r4, #56]	; 0x38
 801a45e:	b928      	cbnz	r0, 801a46c <rand+0x20>
 801a460:	4602      	mov	r2, r0
 801a462:	4b13      	ldr	r3, [pc, #76]	; (801a4b0 <rand+0x64>)
 801a464:	4813      	ldr	r0, [pc, #76]	; (801a4b4 <rand+0x68>)
 801a466:	214e      	movs	r1, #78	; 0x4e
 801a468:	f001 f86a 	bl	801b540 <__assert_func>
 801a46c:	4a12      	ldr	r2, [pc, #72]	; (801a4b8 <rand+0x6c>)
 801a46e:	4b13      	ldr	r3, [pc, #76]	; (801a4bc <rand+0x70>)
 801a470:	e9c0 2300 	strd	r2, r3, [r0]
 801a474:	4b12      	ldr	r3, [pc, #72]	; (801a4c0 <rand+0x74>)
 801a476:	6083      	str	r3, [r0, #8]
 801a478:	230b      	movs	r3, #11
 801a47a:	8183      	strh	r3, [r0, #12]
 801a47c:	2201      	movs	r2, #1
 801a47e:	2300      	movs	r3, #0
 801a480:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a484:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a486:	480f      	ldr	r0, [pc, #60]	; (801a4c4 <rand+0x78>)
 801a488:	690a      	ldr	r2, [r1, #16]
 801a48a:	694b      	ldr	r3, [r1, #20]
 801a48c:	4c0e      	ldr	r4, [pc, #56]	; (801a4c8 <rand+0x7c>)
 801a48e:	4350      	muls	r0, r2
 801a490:	fb04 0003 	mla	r0, r4, r3, r0
 801a494:	fba2 3404 	umull	r3, r4, r2, r4
 801a498:	1c5a      	adds	r2, r3, #1
 801a49a:	4404      	add	r4, r0
 801a49c:	f144 0000 	adc.w	r0, r4, #0
 801a4a0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a4a4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a4a8:	bd10      	pop	{r4, pc}
 801a4aa:	bf00      	nop
 801a4ac:	20000020 	.word	0x20000020
 801a4b0:	080225e7 	.word	0x080225e7
 801a4b4:	080225fe 	.word	0x080225fe
 801a4b8:	abcd330e 	.word	0xabcd330e
 801a4bc:	e66d1234 	.word	0xe66d1234
 801a4c0:	0005deec 	.word	0x0005deec
 801a4c4:	5851f42d 	.word	0x5851f42d
 801a4c8:	4c957f2d 	.word	0x4c957f2d

0801a4cc <nanf>:
 801a4cc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a4d4 <nanf+0x8>
 801a4d0:	4770      	bx	lr
 801a4d2:	bf00      	nop
 801a4d4:	7fc00000 	.word	0x7fc00000

0801a4d8 <siprintf>:
 801a4d8:	b40e      	push	{r1, r2, r3}
 801a4da:	b500      	push	{lr}
 801a4dc:	b09c      	sub	sp, #112	; 0x70
 801a4de:	ab1d      	add	r3, sp, #116	; 0x74
 801a4e0:	9002      	str	r0, [sp, #8]
 801a4e2:	9006      	str	r0, [sp, #24]
 801a4e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a4e8:	4809      	ldr	r0, [pc, #36]	; (801a510 <siprintf+0x38>)
 801a4ea:	9107      	str	r1, [sp, #28]
 801a4ec:	9104      	str	r1, [sp, #16]
 801a4ee:	4909      	ldr	r1, [pc, #36]	; (801a514 <siprintf+0x3c>)
 801a4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a4f4:	9105      	str	r1, [sp, #20]
 801a4f6:	6800      	ldr	r0, [r0, #0]
 801a4f8:	9301      	str	r3, [sp, #4]
 801a4fa:	a902      	add	r1, sp, #8
 801a4fc:	f003 fa6e 	bl	801d9dc <_svfiprintf_r>
 801a500:	9b02      	ldr	r3, [sp, #8]
 801a502:	2200      	movs	r2, #0
 801a504:	701a      	strb	r2, [r3, #0]
 801a506:	b01c      	add	sp, #112	; 0x70
 801a508:	f85d eb04 	ldr.w	lr, [sp], #4
 801a50c:	b003      	add	sp, #12
 801a50e:	4770      	bx	lr
 801a510:	20000020 	.word	0x20000020
 801a514:	ffff0208 	.word	0xffff0208

0801a518 <siscanf>:
 801a518:	b40e      	push	{r1, r2, r3}
 801a51a:	b510      	push	{r4, lr}
 801a51c:	b09f      	sub	sp, #124	; 0x7c
 801a51e:	ac21      	add	r4, sp, #132	; 0x84
 801a520:	f44f 7101 	mov.w	r1, #516	; 0x204
 801a524:	f854 2b04 	ldr.w	r2, [r4], #4
 801a528:	9201      	str	r2, [sp, #4]
 801a52a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a52e:	9004      	str	r0, [sp, #16]
 801a530:	9008      	str	r0, [sp, #32]
 801a532:	f7e5 fe6d 	bl	8000210 <strlen>
 801a536:	4b0c      	ldr	r3, [pc, #48]	; (801a568 <siscanf+0x50>)
 801a538:	9005      	str	r0, [sp, #20]
 801a53a:	9009      	str	r0, [sp, #36]	; 0x24
 801a53c:	930d      	str	r3, [sp, #52]	; 0x34
 801a53e:	480b      	ldr	r0, [pc, #44]	; (801a56c <siscanf+0x54>)
 801a540:	9a01      	ldr	r2, [sp, #4]
 801a542:	6800      	ldr	r0, [r0, #0]
 801a544:	9403      	str	r4, [sp, #12]
 801a546:	2300      	movs	r3, #0
 801a548:	9311      	str	r3, [sp, #68]	; 0x44
 801a54a:	9316      	str	r3, [sp, #88]	; 0x58
 801a54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a550:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a554:	a904      	add	r1, sp, #16
 801a556:	4623      	mov	r3, r4
 801a558:	f003 fb9a 	bl	801dc90 <__ssvfiscanf_r>
 801a55c:	b01f      	add	sp, #124	; 0x7c
 801a55e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a562:	b003      	add	sp, #12
 801a564:	4770      	bx	lr
 801a566:	bf00      	nop
 801a568:	0801a593 	.word	0x0801a593
 801a56c:	20000020 	.word	0x20000020

0801a570 <__sread>:
 801a570:	b510      	push	{r4, lr}
 801a572:	460c      	mov	r4, r1
 801a574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a578:	f003 ffa8 	bl	801e4cc <_read_r>
 801a57c:	2800      	cmp	r0, #0
 801a57e:	bfab      	itete	ge
 801a580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a582:	89a3      	ldrhlt	r3, [r4, #12]
 801a584:	181b      	addge	r3, r3, r0
 801a586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a58a:	bfac      	ite	ge
 801a58c:	6563      	strge	r3, [r4, #84]	; 0x54
 801a58e:	81a3      	strhlt	r3, [r4, #12]
 801a590:	bd10      	pop	{r4, pc}

0801a592 <__seofread>:
 801a592:	2000      	movs	r0, #0
 801a594:	4770      	bx	lr

0801a596 <__swrite>:
 801a596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a59a:	461f      	mov	r7, r3
 801a59c:	898b      	ldrh	r3, [r1, #12]
 801a59e:	05db      	lsls	r3, r3, #23
 801a5a0:	4605      	mov	r5, r0
 801a5a2:	460c      	mov	r4, r1
 801a5a4:	4616      	mov	r6, r2
 801a5a6:	d505      	bpl.n	801a5b4 <__swrite+0x1e>
 801a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5ac:	2302      	movs	r3, #2
 801a5ae:	2200      	movs	r2, #0
 801a5b0:	f002 fbb4 	bl	801cd1c <_lseek_r>
 801a5b4:	89a3      	ldrh	r3, [r4, #12]
 801a5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a5ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a5be:	81a3      	strh	r3, [r4, #12]
 801a5c0:	4632      	mov	r2, r6
 801a5c2:	463b      	mov	r3, r7
 801a5c4:	4628      	mov	r0, r5
 801a5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ca:	f000 bf39 	b.w	801b440 <_write_r>

0801a5ce <__sseek>:
 801a5ce:	b510      	push	{r4, lr}
 801a5d0:	460c      	mov	r4, r1
 801a5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5d6:	f002 fba1 	bl	801cd1c <_lseek_r>
 801a5da:	1c43      	adds	r3, r0, #1
 801a5dc:	89a3      	ldrh	r3, [r4, #12]
 801a5de:	bf15      	itete	ne
 801a5e0:	6560      	strne	r0, [r4, #84]	; 0x54
 801a5e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a5e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a5ea:	81a3      	strheq	r3, [r4, #12]
 801a5ec:	bf18      	it	ne
 801a5ee:	81a3      	strhne	r3, [r4, #12]
 801a5f0:	bd10      	pop	{r4, pc}

0801a5f2 <__sclose>:
 801a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5f6:	f000 bfc1 	b.w	801b57c <_close_r>

0801a5fa <strchr>:
 801a5fa:	b2c9      	uxtb	r1, r1
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a602:	b11a      	cbz	r2, 801a60c <strchr+0x12>
 801a604:	428a      	cmp	r2, r1
 801a606:	d1f9      	bne.n	801a5fc <strchr+0x2>
 801a608:	4618      	mov	r0, r3
 801a60a:	4770      	bx	lr
 801a60c:	2900      	cmp	r1, #0
 801a60e:	bf18      	it	ne
 801a610:	2300      	movne	r3, #0
 801a612:	e7f9      	b.n	801a608 <strchr+0xe>

0801a614 <strncmp>:
 801a614:	b510      	push	{r4, lr}
 801a616:	b16a      	cbz	r2, 801a634 <strncmp+0x20>
 801a618:	3901      	subs	r1, #1
 801a61a:	1884      	adds	r4, r0, r2
 801a61c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a620:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a624:	4293      	cmp	r3, r2
 801a626:	d103      	bne.n	801a630 <strncmp+0x1c>
 801a628:	42a0      	cmp	r0, r4
 801a62a:	d001      	beq.n	801a630 <strncmp+0x1c>
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d1f5      	bne.n	801a61c <strncmp+0x8>
 801a630:	1a98      	subs	r0, r3, r2
 801a632:	bd10      	pop	{r4, pc}
 801a634:	4610      	mov	r0, r2
 801a636:	e7fc      	b.n	801a632 <strncmp+0x1e>

0801a638 <sulp>:
 801a638:	b570      	push	{r4, r5, r6, lr}
 801a63a:	4604      	mov	r4, r0
 801a63c:	460d      	mov	r5, r1
 801a63e:	ec45 4b10 	vmov	d0, r4, r5
 801a642:	4616      	mov	r6, r2
 801a644:	f002 ff66 	bl	801d514 <__ulp>
 801a648:	ec51 0b10 	vmov	r0, r1, d0
 801a64c:	b17e      	cbz	r6, 801a66e <sulp+0x36>
 801a64e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a652:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a656:	2b00      	cmp	r3, #0
 801a658:	dd09      	ble.n	801a66e <sulp+0x36>
 801a65a:	051b      	lsls	r3, r3, #20
 801a65c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a660:	2400      	movs	r4, #0
 801a662:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a666:	4622      	mov	r2, r4
 801a668:	462b      	mov	r3, r5
 801a66a:	f7e5 ffe5 	bl	8000638 <__aeabi_dmul>
 801a66e:	bd70      	pop	{r4, r5, r6, pc}

0801a670 <_strtod_l>:
 801a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a674:	b0a3      	sub	sp, #140	; 0x8c
 801a676:	461f      	mov	r7, r3
 801a678:	2300      	movs	r3, #0
 801a67a:	931e      	str	r3, [sp, #120]	; 0x78
 801a67c:	4ba4      	ldr	r3, [pc, #656]	; (801a910 <_strtod_l+0x2a0>)
 801a67e:	9219      	str	r2, [sp, #100]	; 0x64
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	9307      	str	r3, [sp, #28]
 801a684:	4604      	mov	r4, r0
 801a686:	4618      	mov	r0, r3
 801a688:	4688      	mov	r8, r1
 801a68a:	f7e5 fdc1 	bl	8000210 <strlen>
 801a68e:	f04f 0a00 	mov.w	sl, #0
 801a692:	4605      	mov	r5, r0
 801a694:	f04f 0b00 	mov.w	fp, #0
 801a698:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a69e:	781a      	ldrb	r2, [r3, #0]
 801a6a0:	2a2b      	cmp	r2, #43	; 0x2b
 801a6a2:	d04c      	beq.n	801a73e <_strtod_l+0xce>
 801a6a4:	d839      	bhi.n	801a71a <_strtod_l+0xaa>
 801a6a6:	2a0d      	cmp	r2, #13
 801a6a8:	d832      	bhi.n	801a710 <_strtod_l+0xa0>
 801a6aa:	2a08      	cmp	r2, #8
 801a6ac:	d832      	bhi.n	801a714 <_strtod_l+0xa4>
 801a6ae:	2a00      	cmp	r2, #0
 801a6b0:	d03c      	beq.n	801a72c <_strtod_l+0xbc>
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	930e      	str	r3, [sp, #56]	; 0x38
 801a6b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a6b8:	7833      	ldrb	r3, [r6, #0]
 801a6ba:	2b30      	cmp	r3, #48	; 0x30
 801a6bc:	f040 80b4 	bne.w	801a828 <_strtod_l+0x1b8>
 801a6c0:	7873      	ldrb	r3, [r6, #1]
 801a6c2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a6c6:	2b58      	cmp	r3, #88	; 0x58
 801a6c8:	d16c      	bne.n	801a7a4 <_strtod_l+0x134>
 801a6ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a6cc:	9301      	str	r3, [sp, #4]
 801a6ce:	ab1e      	add	r3, sp, #120	; 0x78
 801a6d0:	9702      	str	r7, [sp, #8]
 801a6d2:	9300      	str	r3, [sp, #0]
 801a6d4:	4a8f      	ldr	r2, [pc, #572]	; (801a914 <_strtod_l+0x2a4>)
 801a6d6:	ab1f      	add	r3, sp, #124	; 0x7c
 801a6d8:	a91d      	add	r1, sp, #116	; 0x74
 801a6da:	4620      	mov	r0, r4
 801a6dc:	f002 f80e 	bl	801c6fc <__gethex>
 801a6e0:	f010 0707 	ands.w	r7, r0, #7
 801a6e4:	4605      	mov	r5, r0
 801a6e6:	d005      	beq.n	801a6f4 <_strtod_l+0x84>
 801a6e8:	2f06      	cmp	r7, #6
 801a6ea:	d12a      	bne.n	801a742 <_strtod_l+0xd2>
 801a6ec:	3601      	adds	r6, #1
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	961d      	str	r6, [sp, #116]	; 0x74
 801a6f2:	930e      	str	r3, [sp, #56]	; 0x38
 801a6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	f040 8596 	bne.w	801b228 <_strtod_l+0xbb8>
 801a6fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a6fe:	b1db      	cbz	r3, 801a738 <_strtod_l+0xc8>
 801a700:	4652      	mov	r2, sl
 801a702:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a706:	ec43 2b10 	vmov	d0, r2, r3
 801a70a:	b023      	add	sp, #140	; 0x8c
 801a70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a710:	2a20      	cmp	r2, #32
 801a712:	d1ce      	bne.n	801a6b2 <_strtod_l+0x42>
 801a714:	3301      	adds	r3, #1
 801a716:	931d      	str	r3, [sp, #116]	; 0x74
 801a718:	e7c0      	b.n	801a69c <_strtod_l+0x2c>
 801a71a:	2a2d      	cmp	r2, #45	; 0x2d
 801a71c:	d1c9      	bne.n	801a6b2 <_strtod_l+0x42>
 801a71e:	2201      	movs	r2, #1
 801a720:	920e      	str	r2, [sp, #56]	; 0x38
 801a722:	1c5a      	adds	r2, r3, #1
 801a724:	921d      	str	r2, [sp, #116]	; 0x74
 801a726:	785b      	ldrb	r3, [r3, #1]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d1c4      	bne.n	801a6b6 <_strtod_l+0x46>
 801a72c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a72e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a732:	2b00      	cmp	r3, #0
 801a734:	f040 8576 	bne.w	801b224 <_strtod_l+0xbb4>
 801a738:	4652      	mov	r2, sl
 801a73a:	465b      	mov	r3, fp
 801a73c:	e7e3      	b.n	801a706 <_strtod_l+0x96>
 801a73e:	2200      	movs	r2, #0
 801a740:	e7ee      	b.n	801a720 <_strtod_l+0xb0>
 801a742:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a744:	b13a      	cbz	r2, 801a756 <_strtod_l+0xe6>
 801a746:	2135      	movs	r1, #53	; 0x35
 801a748:	a820      	add	r0, sp, #128	; 0x80
 801a74a:	f002 ffee 	bl	801d72a <__copybits>
 801a74e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801a750:	4620      	mov	r0, r4
 801a752:	f002 fbb3 	bl	801cebc <_Bfree>
 801a756:	3f01      	subs	r7, #1
 801a758:	2f05      	cmp	r7, #5
 801a75a:	d807      	bhi.n	801a76c <_strtod_l+0xfc>
 801a75c:	e8df f007 	tbb	[pc, r7]
 801a760:	1d180b0e 	.word	0x1d180b0e
 801a764:	030e      	.short	0x030e
 801a766:	f04f 0b00 	mov.w	fp, #0
 801a76a:	46da      	mov	sl, fp
 801a76c:	0728      	lsls	r0, r5, #28
 801a76e:	d5c1      	bpl.n	801a6f4 <_strtod_l+0x84>
 801a770:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a774:	e7be      	b.n	801a6f4 <_strtod_l+0x84>
 801a776:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801a77a:	e7f7      	b.n	801a76c <_strtod_l+0xfc>
 801a77c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801a780:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801a782:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a786:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a78a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a78e:	e7ed      	b.n	801a76c <_strtod_l+0xfc>
 801a790:	f8df b184 	ldr.w	fp, [pc, #388]	; 801a918 <_strtod_l+0x2a8>
 801a794:	f04f 0a00 	mov.w	sl, #0
 801a798:	e7e8      	b.n	801a76c <_strtod_l+0xfc>
 801a79a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a79e:	f04f 3aff 	mov.w	sl, #4294967295
 801a7a2:	e7e3      	b.n	801a76c <_strtod_l+0xfc>
 801a7a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a7a6:	1c5a      	adds	r2, r3, #1
 801a7a8:	921d      	str	r2, [sp, #116]	; 0x74
 801a7aa:	785b      	ldrb	r3, [r3, #1]
 801a7ac:	2b30      	cmp	r3, #48	; 0x30
 801a7ae:	d0f9      	beq.n	801a7a4 <_strtod_l+0x134>
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d09f      	beq.n	801a6f4 <_strtod_l+0x84>
 801a7b4:	2301      	movs	r3, #1
 801a7b6:	f04f 0900 	mov.w	r9, #0
 801a7ba:	9304      	str	r3, [sp, #16]
 801a7bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a7be:	930a      	str	r3, [sp, #40]	; 0x28
 801a7c0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801a7c4:	464f      	mov	r7, r9
 801a7c6:	220a      	movs	r2, #10
 801a7c8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a7ca:	7806      	ldrb	r6, [r0, #0]
 801a7cc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a7d0:	b2d9      	uxtb	r1, r3
 801a7d2:	2909      	cmp	r1, #9
 801a7d4:	d92a      	bls.n	801a82c <_strtod_l+0x1bc>
 801a7d6:	9907      	ldr	r1, [sp, #28]
 801a7d8:	462a      	mov	r2, r5
 801a7da:	f7ff ff1b 	bl	801a614 <strncmp>
 801a7de:	b398      	cbz	r0, 801a848 <_strtod_l+0x1d8>
 801a7e0:	2000      	movs	r0, #0
 801a7e2:	4633      	mov	r3, r6
 801a7e4:	463d      	mov	r5, r7
 801a7e6:	9007      	str	r0, [sp, #28]
 801a7e8:	4602      	mov	r2, r0
 801a7ea:	2b65      	cmp	r3, #101	; 0x65
 801a7ec:	d001      	beq.n	801a7f2 <_strtod_l+0x182>
 801a7ee:	2b45      	cmp	r3, #69	; 0x45
 801a7f0:	d118      	bne.n	801a824 <_strtod_l+0x1b4>
 801a7f2:	b91d      	cbnz	r5, 801a7fc <_strtod_l+0x18c>
 801a7f4:	9b04      	ldr	r3, [sp, #16]
 801a7f6:	4303      	orrs	r3, r0
 801a7f8:	d098      	beq.n	801a72c <_strtod_l+0xbc>
 801a7fa:	2500      	movs	r5, #0
 801a7fc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801a800:	f108 0301 	add.w	r3, r8, #1
 801a804:	931d      	str	r3, [sp, #116]	; 0x74
 801a806:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a80a:	2b2b      	cmp	r3, #43	; 0x2b
 801a80c:	d075      	beq.n	801a8fa <_strtod_l+0x28a>
 801a80e:	2b2d      	cmp	r3, #45	; 0x2d
 801a810:	d07b      	beq.n	801a90a <_strtod_l+0x29a>
 801a812:	f04f 0c00 	mov.w	ip, #0
 801a816:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a81a:	2909      	cmp	r1, #9
 801a81c:	f240 8082 	bls.w	801a924 <_strtod_l+0x2b4>
 801a820:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801a824:	2600      	movs	r6, #0
 801a826:	e09d      	b.n	801a964 <_strtod_l+0x2f4>
 801a828:	2300      	movs	r3, #0
 801a82a:	e7c4      	b.n	801a7b6 <_strtod_l+0x146>
 801a82c:	2f08      	cmp	r7, #8
 801a82e:	bfd8      	it	le
 801a830:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a832:	f100 0001 	add.w	r0, r0, #1
 801a836:	bfda      	itte	le
 801a838:	fb02 3301 	mlale	r3, r2, r1, r3
 801a83c:	9309      	strle	r3, [sp, #36]	; 0x24
 801a83e:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a842:	3701      	adds	r7, #1
 801a844:	901d      	str	r0, [sp, #116]	; 0x74
 801a846:	e7bf      	b.n	801a7c8 <_strtod_l+0x158>
 801a848:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a84a:	195a      	adds	r2, r3, r5
 801a84c:	921d      	str	r2, [sp, #116]	; 0x74
 801a84e:	5d5b      	ldrb	r3, [r3, r5]
 801a850:	2f00      	cmp	r7, #0
 801a852:	d037      	beq.n	801a8c4 <_strtod_l+0x254>
 801a854:	9007      	str	r0, [sp, #28]
 801a856:	463d      	mov	r5, r7
 801a858:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801a85c:	2a09      	cmp	r2, #9
 801a85e:	d912      	bls.n	801a886 <_strtod_l+0x216>
 801a860:	2201      	movs	r2, #1
 801a862:	e7c2      	b.n	801a7ea <_strtod_l+0x17a>
 801a864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a866:	1c5a      	adds	r2, r3, #1
 801a868:	921d      	str	r2, [sp, #116]	; 0x74
 801a86a:	785b      	ldrb	r3, [r3, #1]
 801a86c:	3001      	adds	r0, #1
 801a86e:	2b30      	cmp	r3, #48	; 0x30
 801a870:	d0f8      	beq.n	801a864 <_strtod_l+0x1f4>
 801a872:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a876:	2a08      	cmp	r2, #8
 801a878:	f200 84db 	bhi.w	801b232 <_strtod_l+0xbc2>
 801a87c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a87e:	9007      	str	r0, [sp, #28]
 801a880:	2000      	movs	r0, #0
 801a882:	920a      	str	r2, [sp, #40]	; 0x28
 801a884:	4605      	mov	r5, r0
 801a886:	3b30      	subs	r3, #48	; 0x30
 801a888:	f100 0201 	add.w	r2, r0, #1
 801a88c:	d014      	beq.n	801a8b8 <_strtod_l+0x248>
 801a88e:	9907      	ldr	r1, [sp, #28]
 801a890:	4411      	add	r1, r2
 801a892:	9107      	str	r1, [sp, #28]
 801a894:	462a      	mov	r2, r5
 801a896:	eb00 0e05 	add.w	lr, r0, r5
 801a89a:	210a      	movs	r1, #10
 801a89c:	4572      	cmp	r2, lr
 801a89e:	d113      	bne.n	801a8c8 <_strtod_l+0x258>
 801a8a0:	182a      	adds	r2, r5, r0
 801a8a2:	2a08      	cmp	r2, #8
 801a8a4:	f105 0501 	add.w	r5, r5, #1
 801a8a8:	4405      	add	r5, r0
 801a8aa:	dc1c      	bgt.n	801a8e6 <_strtod_l+0x276>
 801a8ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a8ae:	220a      	movs	r2, #10
 801a8b0:	fb02 3301 	mla	r3, r2, r1, r3
 801a8b4:	9309      	str	r3, [sp, #36]	; 0x24
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a8ba:	1c59      	adds	r1, r3, #1
 801a8bc:	911d      	str	r1, [sp, #116]	; 0x74
 801a8be:	785b      	ldrb	r3, [r3, #1]
 801a8c0:	4610      	mov	r0, r2
 801a8c2:	e7c9      	b.n	801a858 <_strtod_l+0x1e8>
 801a8c4:	4638      	mov	r0, r7
 801a8c6:	e7d2      	b.n	801a86e <_strtod_l+0x1fe>
 801a8c8:	2a08      	cmp	r2, #8
 801a8ca:	dc04      	bgt.n	801a8d6 <_strtod_l+0x266>
 801a8cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a8ce:	434e      	muls	r6, r1
 801a8d0:	9609      	str	r6, [sp, #36]	; 0x24
 801a8d2:	3201      	adds	r2, #1
 801a8d4:	e7e2      	b.n	801a89c <_strtod_l+0x22c>
 801a8d6:	f102 0c01 	add.w	ip, r2, #1
 801a8da:	f1bc 0f10 	cmp.w	ip, #16
 801a8de:	bfd8      	it	le
 801a8e0:	fb01 f909 	mulle.w	r9, r1, r9
 801a8e4:	e7f5      	b.n	801a8d2 <_strtod_l+0x262>
 801a8e6:	2d10      	cmp	r5, #16
 801a8e8:	bfdc      	itt	le
 801a8ea:	220a      	movle	r2, #10
 801a8ec:	fb02 3909 	mlale	r9, r2, r9, r3
 801a8f0:	e7e1      	b.n	801a8b6 <_strtod_l+0x246>
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	9307      	str	r3, [sp, #28]
 801a8f6:	2201      	movs	r2, #1
 801a8f8:	e77c      	b.n	801a7f4 <_strtod_l+0x184>
 801a8fa:	f04f 0c00 	mov.w	ip, #0
 801a8fe:	f108 0302 	add.w	r3, r8, #2
 801a902:	931d      	str	r3, [sp, #116]	; 0x74
 801a904:	f898 3002 	ldrb.w	r3, [r8, #2]
 801a908:	e785      	b.n	801a816 <_strtod_l+0x1a6>
 801a90a:	f04f 0c01 	mov.w	ip, #1
 801a90e:	e7f6      	b.n	801a8fe <_strtod_l+0x28e>
 801a910:	08022838 	.word	0x08022838
 801a914:	08022660 	.word	0x08022660
 801a918:	7ff00000 	.word	0x7ff00000
 801a91c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a91e:	1c59      	adds	r1, r3, #1
 801a920:	911d      	str	r1, [sp, #116]	; 0x74
 801a922:	785b      	ldrb	r3, [r3, #1]
 801a924:	2b30      	cmp	r3, #48	; 0x30
 801a926:	d0f9      	beq.n	801a91c <_strtod_l+0x2ac>
 801a928:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801a92c:	2908      	cmp	r1, #8
 801a92e:	f63f af79 	bhi.w	801a824 <_strtod_l+0x1b4>
 801a932:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801a936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a938:	9308      	str	r3, [sp, #32]
 801a93a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a93c:	1c59      	adds	r1, r3, #1
 801a93e:	911d      	str	r1, [sp, #116]	; 0x74
 801a940:	785b      	ldrb	r3, [r3, #1]
 801a942:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801a946:	2e09      	cmp	r6, #9
 801a948:	d937      	bls.n	801a9ba <_strtod_l+0x34a>
 801a94a:	9e08      	ldr	r6, [sp, #32]
 801a94c:	1b89      	subs	r1, r1, r6
 801a94e:	2908      	cmp	r1, #8
 801a950:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a954:	dc02      	bgt.n	801a95c <_strtod_l+0x2ec>
 801a956:	4576      	cmp	r6, lr
 801a958:	bfa8      	it	ge
 801a95a:	4676      	movge	r6, lr
 801a95c:	f1bc 0f00 	cmp.w	ip, #0
 801a960:	d000      	beq.n	801a964 <_strtod_l+0x2f4>
 801a962:	4276      	negs	r6, r6
 801a964:	2d00      	cmp	r5, #0
 801a966:	d14f      	bne.n	801aa08 <_strtod_l+0x398>
 801a968:	9904      	ldr	r1, [sp, #16]
 801a96a:	4301      	orrs	r1, r0
 801a96c:	f47f aec2 	bne.w	801a6f4 <_strtod_l+0x84>
 801a970:	2a00      	cmp	r2, #0
 801a972:	f47f aedb 	bne.w	801a72c <_strtod_l+0xbc>
 801a976:	2b69      	cmp	r3, #105	; 0x69
 801a978:	d027      	beq.n	801a9ca <_strtod_l+0x35a>
 801a97a:	dc24      	bgt.n	801a9c6 <_strtod_l+0x356>
 801a97c:	2b49      	cmp	r3, #73	; 0x49
 801a97e:	d024      	beq.n	801a9ca <_strtod_l+0x35a>
 801a980:	2b4e      	cmp	r3, #78	; 0x4e
 801a982:	f47f aed3 	bne.w	801a72c <_strtod_l+0xbc>
 801a986:	499e      	ldr	r1, [pc, #632]	; (801ac00 <_strtod_l+0x590>)
 801a988:	a81d      	add	r0, sp, #116	; 0x74
 801a98a:	f002 f90f 	bl	801cbac <__match>
 801a98e:	2800      	cmp	r0, #0
 801a990:	f43f aecc 	beq.w	801a72c <_strtod_l+0xbc>
 801a994:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a996:	781b      	ldrb	r3, [r3, #0]
 801a998:	2b28      	cmp	r3, #40	; 0x28
 801a99a:	d12d      	bne.n	801a9f8 <_strtod_l+0x388>
 801a99c:	4999      	ldr	r1, [pc, #612]	; (801ac04 <_strtod_l+0x594>)
 801a99e:	aa20      	add	r2, sp, #128	; 0x80
 801a9a0:	a81d      	add	r0, sp, #116	; 0x74
 801a9a2:	f002 f917 	bl	801cbd4 <__hexnan>
 801a9a6:	2805      	cmp	r0, #5
 801a9a8:	d126      	bne.n	801a9f8 <_strtod_l+0x388>
 801a9aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a9ac:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801a9b0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a9b4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a9b8:	e69c      	b.n	801a6f4 <_strtod_l+0x84>
 801a9ba:	210a      	movs	r1, #10
 801a9bc:	fb01 3e0e 	mla	lr, r1, lr, r3
 801a9c0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a9c4:	e7b9      	b.n	801a93a <_strtod_l+0x2ca>
 801a9c6:	2b6e      	cmp	r3, #110	; 0x6e
 801a9c8:	e7db      	b.n	801a982 <_strtod_l+0x312>
 801a9ca:	498f      	ldr	r1, [pc, #572]	; (801ac08 <_strtod_l+0x598>)
 801a9cc:	a81d      	add	r0, sp, #116	; 0x74
 801a9ce:	f002 f8ed 	bl	801cbac <__match>
 801a9d2:	2800      	cmp	r0, #0
 801a9d4:	f43f aeaa 	beq.w	801a72c <_strtod_l+0xbc>
 801a9d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a9da:	498c      	ldr	r1, [pc, #560]	; (801ac0c <_strtod_l+0x59c>)
 801a9dc:	3b01      	subs	r3, #1
 801a9de:	a81d      	add	r0, sp, #116	; 0x74
 801a9e0:	931d      	str	r3, [sp, #116]	; 0x74
 801a9e2:	f002 f8e3 	bl	801cbac <__match>
 801a9e6:	b910      	cbnz	r0, 801a9ee <_strtod_l+0x37e>
 801a9e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a9ea:	3301      	adds	r3, #1
 801a9ec:	931d      	str	r3, [sp, #116]	; 0x74
 801a9ee:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801ac1c <_strtod_l+0x5ac>
 801a9f2:	f04f 0a00 	mov.w	sl, #0
 801a9f6:	e67d      	b.n	801a6f4 <_strtod_l+0x84>
 801a9f8:	4885      	ldr	r0, [pc, #532]	; (801ac10 <_strtod_l+0x5a0>)
 801a9fa:	f003 fd79 	bl	801e4f0 <nan>
 801a9fe:	ed8d 0b04 	vstr	d0, [sp, #16]
 801aa02:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801aa06:	e675      	b.n	801a6f4 <_strtod_l+0x84>
 801aa08:	9b07      	ldr	r3, [sp, #28]
 801aa0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa0c:	1af3      	subs	r3, r6, r3
 801aa0e:	2f00      	cmp	r7, #0
 801aa10:	bf08      	it	eq
 801aa12:	462f      	moveq	r7, r5
 801aa14:	2d10      	cmp	r5, #16
 801aa16:	9308      	str	r3, [sp, #32]
 801aa18:	46a8      	mov	r8, r5
 801aa1a:	bfa8      	it	ge
 801aa1c:	f04f 0810 	movge.w	r8, #16
 801aa20:	f7e5 fd90 	bl	8000544 <__aeabi_ui2d>
 801aa24:	2d09      	cmp	r5, #9
 801aa26:	4682      	mov	sl, r0
 801aa28:	468b      	mov	fp, r1
 801aa2a:	dd13      	ble.n	801aa54 <_strtod_l+0x3e4>
 801aa2c:	4b79      	ldr	r3, [pc, #484]	; (801ac14 <_strtod_l+0x5a4>)
 801aa2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801aa32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801aa36:	f7e5 fdff 	bl	8000638 <__aeabi_dmul>
 801aa3a:	4682      	mov	sl, r0
 801aa3c:	4648      	mov	r0, r9
 801aa3e:	468b      	mov	fp, r1
 801aa40:	f7e5 fd80 	bl	8000544 <__aeabi_ui2d>
 801aa44:	4602      	mov	r2, r0
 801aa46:	460b      	mov	r3, r1
 801aa48:	4650      	mov	r0, sl
 801aa4a:	4659      	mov	r1, fp
 801aa4c:	f7e5 fc3e 	bl	80002cc <__adddf3>
 801aa50:	4682      	mov	sl, r0
 801aa52:	468b      	mov	fp, r1
 801aa54:	2d0f      	cmp	r5, #15
 801aa56:	dc38      	bgt.n	801aaca <_strtod_l+0x45a>
 801aa58:	9b08      	ldr	r3, [sp, #32]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	f43f ae4a 	beq.w	801a6f4 <_strtod_l+0x84>
 801aa60:	dd24      	ble.n	801aaac <_strtod_l+0x43c>
 801aa62:	2b16      	cmp	r3, #22
 801aa64:	dc0b      	bgt.n	801aa7e <_strtod_l+0x40e>
 801aa66:	4d6b      	ldr	r5, [pc, #428]	; (801ac14 <_strtod_l+0x5a4>)
 801aa68:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801aa6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801aa70:	4652      	mov	r2, sl
 801aa72:	465b      	mov	r3, fp
 801aa74:	f7e5 fde0 	bl	8000638 <__aeabi_dmul>
 801aa78:	4682      	mov	sl, r0
 801aa7a:	468b      	mov	fp, r1
 801aa7c:	e63a      	b.n	801a6f4 <_strtod_l+0x84>
 801aa7e:	9a08      	ldr	r2, [sp, #32]
 801aa80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801aa84:	4293      	cmp	r3, r2
 801aa86:	db20      	blt.n	801aaca <_strtod_l+0x45a>
 801aa88:	4c62      	ldr	r4, [pc, #392]	; (801ac14 <_strtod_l+0x5a4>)
 801aa8a:	f1c5 050f 	rsb	r5, r5, #15
 801aa8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801aa92:	4652      	mov	r2, sl
 801aa94:	465b      	mov	r3, fp
 801aa96:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aa9a:	f7e5 fdcd 	bl	8000638 <__aeabi_dmul>
 801aa9e:	9b08      	ldr	r3, [sp, #32]
 801aaa0:	1b5d      	subs	r5, r3, r5
 801aaa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801aaa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 801aaaa:	e7e3      	b.n	801aa74 <_strtod_l+0x404>
 801aaac:	9b08      	ldr	r3, [sp, #32]
 801aaae:	3316      	adds	r3, #22
 801aab0:	db0b      	blt.n	801aaca <_strtod_l+0x45a>
 801aab2:	9b07      	ldr	r3, [sp, #28]
 801aab4:	4a57      	ldr	r2, [pc, #348]	; (801ac14 <_strtod_l+0x5a4>)
 801aab6:	1b9e      	subs	r6, r3, r6
 801aab8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801aabc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801aac0:	4650      	mov	r0, sl
 801aac2:	4659      	mov	r1, fp
 801aac4:	f7e5 fee2 	bl	800088c <__aeabi_ddiv>
 801aac8:	e7d6      	b.n	801aa78 <_strtod_l+0x408>
 801aaca:	9b08      	ldr	r3, [sp, #32]
 801aacc:	eba5 0808 	sub.w	r8, r5, r8
 801aad0:	4498      	add	r8, r3
 801aad2:	f1b8 0f00 	cmp.w	r8, #0
 801aad6:	dd71      	ble.n	801abbc <_strtod_l+0x54c>
 801aad8:	f018 030f 	ands.w	r3, r8, #15
 801aadc:	d00a      	beq.n	801aaf4 <_strtod_l+0x484>
 801aade:	494d      	ldr	r1, [pc, #308]	; (801ac14 <_strtod_l+0x5a4>)
 801aae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801aae4:	4652      	mov	r2, sl
 801aae6:	465b      	mov	r3, fp
 801aae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801aaec:	f7e5 fda4 	bl	8000638 <__aeabi_dmul>
 801aaf0:	4682      	mov	sl, r0
 801aaf2:	468b      	mov	fp, r1
 801aaf4:	f038 080f 	bics.w	r8, r8, #15
 801aaf8:	d04d      	beq.n	801ab96 <_strtod_l+0x526>
 801aafa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801aafe:	dd22      	ble.n	801ab46 <_strtod_l+0x4d6>
 801ab00:	2500      	movs	r5, #0
 801ab02:	462e      	mov	r6, r5
 801ab04:	9509      	str	r5, [sp, #36]	; 0x24
 801ab06:	9507      	str	r5, [sp, #28]
 801ab08:	2322      	movs	r3, #34	; 0x22
 801ab0a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801ac1c <_strtod_l+0x5ac>
 801ab0e:	6023      	str	r3, [r4, #0]
 801ab10:	f04f 0a00 	mov.w	sl, #0
 801ab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	f43f adec 	beq.w	801a6f4 <_strtod_l+0x84>
 801ab1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ab1e:	4620      	mov	r0, r4
 801ab20:	f002 f9cc 	bl	801cebc <_Bfree>
 801ab24:	9907      	ldr	r1, [sp, #28]
 801ab26:	4620      	mov	r0, r4
 801ab28:	f002 f9c8 	bl	801cebc <_Bfree>
 801ab2c:	4631      	mov	r1, r6
 801ab2e:	4620      	mov	r0, r4
 801ab30:	f002 f9c4 	bl	801cebc <_Bfree>
 801ab34:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ab36:	4620      	mov	r0, r4
 801ab38:	f002 f9c0 	bl	801cebc <_Bfree>
 801ab3c:	4629      	mov	r1, r5
 801ab3e:	4620      	mov	r0, r4
 801ab40:	f002 f9bc 	bl	801cebc <_Bfree>
 801ab44:	e5d6      	b.n	801a6f4 <_strtod_l+0x84>
 801ab46:	2300      	movs	r3, #0
 801ab48:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ab4c:	4650      	mov	r0, sl
 801ab4e:	4659      	mov	r1, fp
 801ab50:	4699      	mov	r9, r3
 801ab52:	f1b8 0f01 	cmp.w	r8, #1
 801ab56:	dc21      	bgt.n	801ab9c <_strtod_l+0x52c>
 801ab58:	b10b      	cbz	r3, 801ab5e <_strtod_l+0x4ee>
 801ab5a:	4682      	mov	sl, r0
 801ab5c:	468b      	mov	fp, r1
 801ab5e:	4b2e      	ldr	r3, [pc, #184]	; (801ac18 <_strtod_l+0x5a8>)
 801ab60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801ab64:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801ab68:	4652      	mov	r2, sl
 801ab6a:	465b      	mov	r3, fp
 801ab6c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801ab70:	f7e5 fd62 	bl	8000638 <__aeabi_dmul>
 801ab74:	4b29      	ldr	r3, [pc, #164]	; (801ac1c <_strtod_l+0x5ac>)
 801ab76:	460a      	mov	r2, r1
 801ab78:	400b      	ands	r3, r1
 801ab7a:	4929      	ldr	r1, [pc, #164]	; (801ac20 <_strtod_l+0x5b0>)
 801ab7c:	428b      	cmp	r3, r1
 801ab7e:	4682      	mov	sl, r0
 801ab80:	d8be      	bhi.n	801ab00 <_strtod_l+0x490>
 801ab82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ab86:	428b      	cmp	r3, r1
 801ab88:	bf86      	itte	hi
 801ab8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801ac24 <_strtod_l+0x5b4>
 801ab8e:	f04f 3aff 	movhi.w	sl, #4294967295
 801ab92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801ab96:	2300      	movs	r3, #0
 801ab98:	9304      	str	r3, [sp, #16]
 801ab9a:	e081      	b.n	801aca0 <_strtod_l+0x630>
 801ab9c:	f018 0f01 	tst.w	r8, #1
 801aba0:	d007      	beq.n	801abb2 <_strtod_l+0x542>
 801aba2:	4b1d      	ldr	r3, [pc, #116]	; (801ac18 <_strtod_l+0x5a8>)
 801aba4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abac:	f7e5 fd44 	bl	8000638 <__aeabi_dmul>
 801abb0:	2301      	movs	r3, #1
 801abb2:	f109 0901 	add.w	r9, r9, #1
 801abb6:	ea4f 0868 	mov.w	r8, r8, asr #1
 801abba:	e7ca      	b.n	801ab52 <_strtod_l+0x4e2>
 801abbc:	d0eb      	beq.n	801ab96 <_strtod_l+0x526>
 801abbe:	f1c8 0800 	rsb	r8, r8, #0
 801abc2:	f018 020f 	ands.w	r2, r8, #15
 801abc6:	d00a      	beq.n	801abde <_strtod_l+0x56e>
 801abc8:	4b12      	ldr	r3, [pc, #72]	; (801ac14 <_strtod_l+0x5a4>)
 801abca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801abce:	4650      	mov	r0, sl
 801abd0:	4659      	mov	r1, fp
 801abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abd6:	f7e5 fe59 	bl	800088c <__aeabi_ddiv>
 801abda:	4682      	mov	sl, r0
 801abdc:	468b      	mov	fp, r1
 801abde:	ea5f 1828 	movs.w	r8, r8, asr #4
 801abe2:	d0d8      	beq.n	801ab96 <_strtod_l+0x526>
 801abe4:	f1b8 0f1f 	cmp.w	r8, #31
 801abe8:	dd1e      	ble.n	801ac28 <_strtod_l+0x5b8>
 801abea:	2500      	movs	r5, #0
 801abec:	462e      	mov	r6, r5
 801abee:	9509      	str	r5, [sp, #36]	; 0x24
 801abf0:	9507      	str	r5, [sp, #28]
 801abf2:	2322      	movs	r3, #34	; 0x22
 801abf4:	f04f 0a00 	mov.w	sl, #0
 801abf8:	f04f 0b00 	mov.w	fp, #0
 801abfc:	6023      	str	r3, [r4, #0]
 801abfe:	e789      	b.n	801ab14 <_strtod_l+0x4a4>
 801ac00:	080225bd 	.word	0x080225bd
 801ac04:	08022674 	.word	0x08022674
 801ac08:	080225b5 	.word	0x080225b5
 801ac0c:	080226ef 	.word	0x080226ef
 801ac10:	080226eb 	.word	0x080226eb
 801ac14:	080228d8 	.word	0x080228d8
 801ac18:	080228b0 	.word	0x080228b0
 801ac1c:	7ff00000 	.word	0x7ff00000
 801ac20:	7ca00000 	.word	0x7ca00000
 801ac24:	7fefffff 	.word	0x7fefffff
 801ac28:	f018 0310 	ands.w	r3, r8, #16
 801ac2c:	bf18      	it	ne
 801ac2e:	236a      	movne	r3, #106	; 0x6a
 801ac30:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801afe8 <_strtod_l+0x978>
 801ac34:	9304      	str	r3, [sp, #16]
 801ac36:	4650      	mov	r0, sl
 801ac38:	4659      	mov	r1, fp
 801ac3a:	2300      	movs	r3, #0
 801ac3c:	f018 0f01 	tst.w	r8, #1
 801ac40:	d004      	beq.n	801ac4c <_strtod_l+0x5dc>
 801ac42:	e9d9 2300 	ldrd	r2, r3, [r9]
 801ac46:	f7e5 fcf7 	bl	8000638 <__aeabi_dmul>
 801ac4a:	2301      	movs	r3, #1
 801ac4c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801ac50:	f109 0908 	add.w	r9, r9, #8
 801ac54:	d1f2      	bne.n	801ac3c <_strtod_l+0x5cc>
 801ac56:	b10b      	cbz	r3, 801ac5c <_strtod_l+0x5ec>
 801ac58:	4682      	mov	sl, r0
 801ac5a:	468b      	mov	fp, r1
 801ac5c:	9b04      	ldr	r3, [sp, #16]
 801ac5e:	b1bb      	cbz	r3, 801ac90 <_strtod_l+0x620>
 801ac60:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801ac64:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	4659      	mov	r1, fp
 801ac6c:	dd10      	ble.n	801ac90 <_strtod_l+0x620>
 801ac6e:	2b1f      	cmp	r3, #31
 801ac70:	f340 8128 	ble.w	801aec4 <_strtod_l+0x854>
 801ac74:	2b34      	cmp	r3, #52	; 0x34
 801ac76:	bfde      	ittt	le
 801ac78:	3b20      	suble	r3, #32
 801ac7a:	f04f 32ff 	movle.w	r2, #4294967295
 801ac7e:	fa02 f303 	lslle.w	r3, r2, r3
 801ac82:	f04f 0a00 	mov.w	sl, #0
 801ac86:	bfcc      	ite	gt
 801ac88:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801ac8c:	ea03 0b01 	andle.w	fp, r3, r1
 801ac90:	2200      	movs	r2, #0
 801ac92:	2300      	movs	r3, #0
 801ac94:	4650      	mov	r0, sl
 801ac96:	4659      	mov	r1, fp
 801ac98:	f7e5 ff36 	bl	8000b08 <__aeabi_dcmpeq>
 801ac9c:	2800      	cmp	r0, #0
 801ac9e:	d1a4      	bne.n	801abea <_strtod_l+0x57a>
 801aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aca2:	9300      	str	r3, [sp, #0]
 801aca4:	990a      	ldr	r1, [sp, #40]	; 0x28
 801aca6:	462b      	mov	r3, r5
 801aca8:	463a      	mov	r2, r7
 801acaa:	4620      	mov	r0, r4
 801acac:	f002 f972 	bl	801cf94 <__s2b>
 801acb0:	9009      	str	r0, [sp, #36]	; 0x24
 801acb2:	2800      	cmp	r0, #0
 801acb4:	f43f af24 	beq.w	801ab00 <_strtod_l+0x490>
 801acb8:	9b07      	ldr	r3, [sp, #28]
 801acba:	1b9e      	subs	r6, r3, r6
 801acbc:	9b08      	ldr	r3, [sp, #32]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	bfb4      	ite	lt
 801acc2:	4633      	movlt	r3, r6
 801acc4:	2300      	movge	r3, #0
 801acc6:	9310      	str	r3, [sp, #64]	; 0x40
 801acc8:	9b08      	ldr	r3, [sp, #32]
 801acca:	2500      	movs	r5, #0
 801accc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801acd0:	9318      	str	r3, [sp, #96]	; 0x60
 801acd2:	462e      	mov	r6, r5
 801acd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acd6:	4620      	mov	r0, r4
 801acd8:	6859      	ldr	r1, [r3, #4]
 801acda:	f002 f8af 	bl	801ce3c <_Balloc>
 801acde:	9007      	str	r0, [sp, #28]
 801ace0:	2800      	cmp	r0, #0
 801ace2:	f43f af11 	beq.w	801ab08 <_strtod_l+0x498>
 801ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ace8:	691a      	ldr	r2, [r3, #16]
 801acea:	3202      	adds	r2, #2
 801acec:	f103 010c 	add.w	r1, r3, #12
 801acf0:	0092      	lsls	r2, r2, #2
 801acf2:	300c      	adds	r0, #12
 801acf4:	f7fe fc72 	bl	80195dc <memcpy>
 801acf8:	ec4b ab10 	vmov	d0, sl, fp
 801acfc:	aa20      	add	r2, sp, #128	; 0x80
 801acfe:	a91f      	add	r1, sp, #124	; 0x7c
 801ad00:	4620      	mov	r0, r4
 801ad02:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801ad06:	f002 fc81 	bl	801d60c <__d2b>
 801ad0a:	901e      	str	r0, [sp, #120]	; 0x78
 801ad0c:	2800      	cmp	r0, #0
 801ad0e:	f43f aefb 	beq.w	801ab08 <_strtod_l+0x498>
 801ad12:	2101      	movs	r1, #1
 801ad14:	4620      	mov	r0, r4
 801ad16:	f002 f9d7 	bl	801d0c8 <__i2b>
 801ad1a:	4606      	mov	r6, r0
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	f43f aef3 	beq.w	801ab08 <_strtod_l+0x498>
 801ad22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ad24:	9904      	ldr	r1, [sp, #16]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	bfab      	itete	ge
 801ad2a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801ad2c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801ad2e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801ad30:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801ad34:	bfac      	ite	ge
 801ad36:	eb03 0902 	addge.w	r9, r3, r2
 801ad3a:	1ad7      	sublt	r7, r2, r3
 801ad3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ad3e:	eba3 0801 	sub.w	r8, r3, r1
 801ad42:	4490      	add	r8, r2
 801ad44:	4ba3      	ldr	r3, [pc, #652]	; (801afd4 <_strtod_l+0x964>)
 801ad46:	f108 38ff 	add.w	r8, r8, #4294967295
 801ad4a:	4598      	cmp	r8, r3
 801ad4c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ad50:	f280 80cc 	bge.w	801aeec <_strtod_l+0x87c>
 801ad54:	eba3 0308 	sub.w	r3, r3, r8
 801ad58:	2b1f      	cmp	r3, #31
 801ad5a:	eba2 0203 	sub.w	r2, r2, r3
 801ad5e:	f04f 0101 	mov.w	r1, #1
 801ad62:	f300 80b6 	bgt.w	801aed2 <_strtod_l+0x862>
 801ad66:	fa01 f303 	lsl.w	r3, r1, r3
 801ad6a:	9311      	str	r3, [sp, #68]	; 0x44
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	930c      	str	r3, [sp, #48]	; 0x30
 801ad70:	eb09 0802 	add.w	r8, r9, r2
 801ad74:	9b04      	ldr	r3, [sp, #16]
 801ad76:	45c1      	cmp	r9, r8
 801ad78:	4417      	add	r7, r2
 801ad7a:	441f      	add	r7, r3
 801ad7c:	464b      	mov	r3, r9
 801ad7e:	bfa8      	it	ge
 801ad80:	4643      	movge	r3, r8
 801ad82:	42bb      	cmp	r3, r7
 801ad84:	bfa8      	it	ge
 801ad86:	463b      	movge	r3, r7
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	bfc2      	ittt	gt
 801ad8c:	eba8 0803 	subgt.w	r8, r8, r3
 801ad90:	1aff      	subgt	r7, r7, r3
 801ad92:	eba9 0903 	subgt.w	r9, r9, r3
 801ad96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	dd17      	ble.n	801adcc <_strtod_l+0x75c>
 801ad9c:	4631      	mov	r1, r6
 801ad9e:	461a      	mov	r2, r3
 801ada0:	4620      	mov	r0, r4
 801ada2:	f002 fa4d 	bl	801d240 <__pow5mult>
 801ada6:	4606      	mov	r6, r0
 801ada8:	2800      	cmp	r0, #0
 801adaa:	f43f aead 	beq.w	801ab08 <_strtod_l+0x498>
 801adae:	4601      	mov	r1, r0
 801adb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801adb2:	4620      	mov	r0, r4
 801adb4:	f002 f99e 	bl	801d0f4 <__multiply>
 801adb8:	900f      	str	r0, [sp, #60]	; 0x3c
 801adba:	2800      	cmp	r0, #0
 801adbc:	f43f aea4 	beq.w	801ab08 <_strtod_l+0x498>
 801adc0:	991e      	ldr	r1, [sp, #120]	; 0x78
 801adc2:	4620      	mov	r0, r4
 801adc4:	f002 f87a 	bl	801cebc <_Bfree>
 801adc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801adca:	931e      	str	r3, [sp, #120]	; 0x78
 801adcc:	f1b8 0f00 	cmp.w	r8, #0
 801add0:	f300 8091 	bgt.w	801aef6 <_strtod_l+0x886>
 801add4:	9b08      	ldr	r3, [sp, #32]
 801add6:	2b00      	cmp	r3, #0
 801add8:	dd08      	ble.n	801adec <_strtod_l+0x77c>
 801adda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801addc:	9907      	ldr	r1, [sp, #28]
 801adde:	4620      	mov	r0, r4
 801ade0:	f002 fa2e 	bl	801d240 <__pow5mult>
 801ade4:	9007      	str	r0, [sp, #28]
 801ade6:	2800      	cmp	r0, #0
 801ade8:	f43f ae8e 	beq.w	801ab08 <_strtod_l+0x498>
 801adec:	2f00      	cmp	r7, #0
 801adee:	dd08      	ble.n	801ae02 <_strtod_l+0x792>
 801adf0:	9907      	ldr	r1, [sp, #28]
 801adf2:	463a      	mov	r2, r7
 801adf4:	4620      	mov	r0, r4
 801adf6:	f002 fa7d 	bl	801d2f4 <__lshift>
 801adfa:	9007      	str	r0, [sp, #28]
 801adfc:	2800      	cmp	r0, #0
 801adfe:	f43f ae83 	beq.w	801ab08 <_strtod_l+0x498>
 801ae02:	f1b9 0f00 	cmp.w	r9, #0
 801ae06:	dd08      	ble.n	801ae1a <_strtod_l+0x7aa>
 801ae08:	4631      	mov	r1, r6
 801ae0a:	464a      	mov	r2, r9
 801ae0c:	4620      	mov	r0, r4
 801ae0e:	f002 fa71 	bl	801d2f4 <__lshift>
 801ae12:	4606      	mov	r6, r0
 801ae14:	2800      	cmp	r0, #0
 801ae16:	f43f ae77 	beq.w	801ab08 <_strtod_l+0x498>
 801ae1a:	9a07      	ldr	r2, [sp, #28]
 801ae1c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ae1e:	4620      	mov	r0, r4
 801ae20:	f002 faf0 	bl	801d404 <__mdiff>
 801ae24:	4605      	mov	r5, r0
 801ae26:	2800      	cmp	r0, #0
 801ae28:	f43f ae6e 	beq.w	801ab08 <_strtod_l+0x498>
 801ae2c:	68c3      	ldr	r3, [r0, #12]
 801ae2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae30:	2300      	movs	r3, #0
 801ae32:	60c3      	str	r3, [r0, #12]
 801ae34:	4631      	mov	r1, r6
 801ae36:	f002 fac9 	bl	801d3cc <__mcmp>
 801ae3a:	2800      	cmp	r0, #0
 801ae3c:	da65      	bge.n	801af0a <_strtod_l+0x89a>
 801ae3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae40:	ea53 030a 	orrs.w	r3, r3, sl
 801ae44:	f040 8087 	bne.w	801af56 <_strtod_l+0x8e6>
 801ae48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	f040 8082 	bne.w	801af56 <_strtod_l+0x8e6>
 801ae52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ae56:	0d1b      	lsrs	r3, r3, #20
 801ae58:	051b      	lsls	r3, r3, #20
 801ae5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ae5e:	d97a      	bls.n	801af56 <_strtod_l+0x8e6>
 801ae60:	696b      	ldr	r3, [r5, #20]
 801ae62:	b913      	cbnz	r3, 801ae6a <_strtod_l+0x7fa>
 801ae64:	692b      	ldr	r3, [r5, #16]
 801ae66:	2b01      	cmp	r3, #1
 801ae68:	dd75      	ble.n	801af56 <_strtod_l+0x8e6>
 801ae6a:	4629      	mov	r1, r5
 801ae6c:	2201      	movs	r2, #1
 801ae6e:	4620      	mov	r0, r4
 801ae70:	f002 fa40 	bl	801d2f4 <__lshift>
 801ae74:	4631      	mov	r1, r6
 801ae76:	4605      	mov	r5, r0
 801ae78:	f002 faa8 	bl	801d3cc <__mcmp>
 801ae7c:	2800      	cmp	r0, #0
 801ae7e:	dd6a      	ble.n	801af56 <_strtod_l+0x8e6>
 801ae80:	9904      	ldr	r1, [sp, #16]
 801ae82:	4a55      	ldr	r2, [pc, #340]	; (801afd8 <_strtod_l+0x968>)
 801ae84:	465b      	mov	r3, fp
 801ae86:	2900      	cmp	r1, #0
 801ae88:	f000 8085 	beq.w	801af96 <_strtod_l+0x926>
 801ae8c:	ea02 010b 	and.w	r1, r2, fp
 801ae90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ae94:	dc7f      	bgt.n	801af96 <_strtod_l+0x926>
 801ae96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ae9a:	f77f aeaa 	ble.w	801abf2 <_strtod_l+0x582>
 801ae9e:	4a4f      	ldr	r2, [pc, #316]	; (801afdc <_strtod_l+0x96c>)
 801aea0:	2300      	movs	r3, #0
 801aea2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801aea6:	4650      	mov	r0, sl
 801aea8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801aeac:	4659      	mov	r1, fp
 801aeae:	f7e5 fbc3 	bl	8000638 <__aeabi_dmul>
 801aeb2:	460b      	mov	r3, r1
 801aeb4:	4303      	orrs	r3, r0
 801aeb6:	bf08      	it	eq
 801aeb8:	2322      	moveq	r3, #34	; 0x22
 801aeba:	4682      	mov	sl, r0
 801aebc:	468b      	mov	fp, r1
 801aebe:	bf08      	it	eq
 801aec0:	6023      	streq	r3, [r4, #0]
 801aec2:	e62b      	b.n	801ab1c <_strtod_l+0x4ac>
 801aec4:	f04f 32ff 	mov.w	r2, #4294967295
 801aec8:	fa02 f303 	lsl.w	r3, r2, r3
 801aecc:	ea03 0a0a 	and.w	sl, r3, sl
 801aed0:	e6de      	b.n	801ac90 <_strtod_l+0x620>
 801aed2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801aed6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801aeda:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801aede:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801aee2:	fa01 f308 	lsl.w	r3, r1, r8
 801aee6:	930c      	str	r3, [sp, #48]	; 0x30
 801aee8:	9111      	str	r1, [sp, #68]	; 0x44
 801aeea:	e741      	b.n	801ad70 <_strtod_l+0x700>
 801aeec:	2300      	movs	r3, #0
 801aeee:	930c      	str	r3, [sp, #48]	; 0x30
 801aef0:	2301      	movs	r3, #1
 801aef2:	9311      	str	r3, [sp, #68]	; 0x44
 801aef4:	e73c      	b.n	801ad70 <_strtod_l+0x700>
 801aef6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801aef8:	4642      	mov	r2, r8
 801aefa:	4620      	mov	r0, r4
 801aefc:	f002 f9fa 	bl	801d2f4 <__lshift>
 801af00:	901e      	str	r0, [sp, #120]	; 0x78
 801af02:	2800      	cmp	r0, #0
 801af04:	f47f af66 	bne.w	801add4 <_strtod_l+0x764>
 801af08:	e5fe      	b.n	801ab08 <_strtod_l+0x498>
 801af0a:	465f      	mov	r7, fp
 801af0c:	d16e      	bne.n	801afec <_strtod_l+0x97c>
 801af0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af14:	b342      	cbz	r2, 801af68 <_strtod_l+0x8f8>
 801af16:	4a32      	ldr	r2, [pc, #200]	; (801afe0 <_strtod_l+0x970>)
 801af18:	4293      	cmp	r3, r2
 801af1a:	d128      	bne.n	801af6e <_strtod_l+0x8fe>
 801af1c:	9b04      	ldr	r3, [sp, #16]
 801af1e:	4650      	mov	r0, sl
 801af20:	b1eb      	cbz	r3, 801af5e <_strtod_l+0x8ee>
 801af22:	4a2d      	ldr	r2, [pc, #180]	; (801afd8 <_strtod_l+0x968>)
 801af24:	403a      	ands	r2, r7
 801af26:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801af2a:	f04f 31ff 	mov.w	r1, #4294967295
 801af2e:	d819      	bhi.n	801af64 <_strtod_l+0x8f4>
 801af30:	0d12      	lsrs	r2, r2, #20
 801af32:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801af36:	fa01 f303 	lsl.w	r3, r1, r3
 801af3a:	4298      	cmp	r0, r3
 801af3c:	d117      	bne.n	801af6e <_strtod_l+0x8fe>
 801af3e:	4b29      	ldr	r3, [pc, #164]	; (801afe4 <_strtod_l+0x974>)
 801af40:	429f      	cmp	r7, r3
 801af42:	d102      	bne.n	801af4a <_strtod_l+0x8da>
 801af44:	3001      	adds	r0, #1
 801af46:	f43f addf 	beq.w	801ab08 <_strtod_l+0x498>
 801af4a:	4b23      	ldr	r3, [pc, #140]	; (801afd8 <_strtod_l+0x968>)
 801af4c:	403b      	ands	r3, r7
 801af4e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801af52:	f04f 0a00 	mov.w	sl, #0
 801af56:	9b04      	ldr	r3, [sp, #16]
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d1a0      	bne.n	801ae9e <_strtod_l+0x82e>
 801af5c:	e5de      	b.n	801ab1c <_strtod_l+0x4ac>
 801af5e:	f04f 33ff 	mov.w	r3, #4294967295
 801af62:	e7ea      	b.n	801af3a <_strtod_l+0x8ca>
 801af64:	460b      	mov	r3, r1
 801af66:	e7e8      	b.n	801af3a <_strtod_l+0x8ca>
 801af68:	ea53 030a 	orrs.w	r3, r3, sl
 801af6c:	d088      	beq.n	801ae80 <_strtod_l+0x810>
 801af6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af70:	b1db      	cbz	r3, 801afaa <_strtod_l+0x93a>
 801af72:	423b      	tst	r3, r7
 801af74:	d0ef      	beq.n	801af56 <_strtod_l+0x8e6>
 801af76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af78:	9a04      	ldr	r2, [sp, #16]
 801af7a:	4650      	mov	r0, sl
 801af7c:	4659      	mov	r1, fp
 801af7e:	b1c3      	cbz	r3, 801afb2 <_strtod_l+0x942>
 801af80:	f7ff fb5a 	bl	801a638 <sulp>
 801af84:	4602      	mov	r2, r0
 801af86:	460b      	mov	r3, r1
 801af88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801af8c:	f7e5 f99e 	bl	80002cc <__adddf3>
 801af90:	4682      	mov	sl, r0
 801af92:	468b      	mov	fp, r1
 801af94:	e7df      	b.n	801af56 <_strtod_l+0x8e6>
 801af96:	4013      	ands	r3, r2
 801af98:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801af9c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801afa0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801afa4:	f04f 3aff 	mov.w	sl, #4294967295
 801afa8:	e7d5      	b.n	801af56 <_strtod_l+0x8e6>
 801afaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801afac:	ea13 0f0a 	tst.w	r3, sl
 801afb0:	e7e0      	b.n	801af74 <_strtod_l+0x904>
 801afb2:	f7ff fb41 	bl	801a638 <sulp>
 801afb6:	4602      	mov	r2, r0
 801afb8:	460b      	mov	r3, r1
 801afba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801afbe:	f7e5 f983 	bl	80002c8 <__aeabi_dsub>
 801afc2:	2200      	movs	r2, #0
 801afc4:	2300      	movs	r3, #0
 801afc6:	4682      	mov	sl, r0
 801afc8:	468b      	mov	fp, r1
 801afca:	f7e5 fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 801afce:	2800      	cmp	r0, #0
 801afd0:	d0c1      	beq.n	801af56 <_strtod_l+0x8e6>
 801afd2:	e60e      	b.n	801abf2 <_strtod_l+0x582>
 801afd4:	fffffc02 	.word	0xfffffc02
 801afd8:	7ff00000 	.word	0x7ff00000
 801afdc:	39500000 	.word	0x39500000
 801afe0:	000fffff 	.word	0x000fffff
 801afe4:	7fefffff 	.word	0x7fefffff
 801afe8:	08022688 	.word	0x08022688
 801afec:	4631      	mov	r1, r6
 801afee:	4628      	mov	r0, r5
 801aff0:	f002 fb68 	bl	801d6c4 <__ratio>
 801aff4:	ec59 8b10 	vmov	r8, r9, d0
 801aff8:	ee10 0a10 	vmov	r0, s0
 801affc:	2200      	movs	r2, #0
 801affe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b002:	4649      	mov	r1, r9
 801b004:	f7e5 fd94 	bl	8000b30 <__aeabi_dcmple>
 801b008:	2800      	cmp	r0, #0
 801b00a:	d07c      	beq.n	801b106 <_strtod_l+0xa96>
 801b00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b00e:	2b00      	cmp	r3, #0
 801b010:	d04c      	beq.n	801b0ac <_strtod_l+0xa3c>
 801b012:	4b95      	ldr	r3, [pc, #596]	; (801b268 <_strtod_l+0xbf8>)
 801b014:	2200      	movs	r2, #0
 801b016:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b01a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b268 <_strtod_l+0xbf8>
 801b01e:	f04f 0800 	mov.w	r8, #0
 801b022:	4b92      	ldr	r3, [pc, #584]	; (801b26c <_strtod_l+0xbfc>)
 801b024:	403b      	ands	r3, r7
 801b026:	9311      	str	r3, [sp, #68]	; 0x44
 801b028:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b02a:	4b91      	ldr	r3, [pc, #580]	; (801b270 <_strtod_l+0xc00>)
 801b02c:	429a      	cmp	r2, r3
 801b02e:	f040 80b2 	bne.w	801b196 <_strtod_l+0xb26>
 801b032:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b036:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b03a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b03e:	ec4b ab10 	vmov	d0, sl, fp
 801b042:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801b046:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b04a:	f002 fa63 	bl	801d514 <__ulp>
 801b04e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b052:	ec53 2b10 	vmov	r2, r3, d0
 801b056:	f7e5 faef 	bl	8000638 <__aeabi_dmul>
 801b05a:	4652      	mov	r2, sl
 801b05c:	465b      	mov	r3, fp
 801b05e:	f7e5 f935 	bl	80002cc <__adddf3>
 801b062:	460b      	mov	r3, r1
 801b064:	4981      	ldr	r1, [pc, #516]	; (801b26c <_strtod_l+0xbfc>)
 801b066:	4a83      	ldr	r2, [pc, #524]	; (801b274 <_strtod_l+0xc04>)
 801b068:	4019      	ands	r1, r3
 801b06a:	4291      	cmp	r1, r2
 801b06c:	4682      	mov	sl, r0
 801b06e:	d95e      	bls.n	801b12e <_strtod_l+0xabe>
 801b070:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b072:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b076:	4293      	cmp	r3, r2
 801b078:	d103      	bne.n	801b082 <_strtod_l+0xa12>
 801b07a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b07c:	3301      	adds	r3, #1
 801b07e:	f43f ad43 	beq.w	801ab08 <_strtod_l+0x498>
 801b082:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 801b280 <_strtod_l+0xc10>
 801b086:	f04f 3aff 	mov.w	sl, #4294967295
 801b08a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801b08c:	4620      	mov	r0, r4
 801b08e:	f001 ff15 	bl	801cebc <_Bfree>
 801b092:	9907      	ldr	r1, [sp, #28]
 801b094:	4620      	mov	r0, r4
 801b096:	f001 ff11 	bl	801cebc <_Bfree>
 801b09a:	4631      	mov	r1, r6
 801b09c:	4620      	mov	r0, r4
 801b09e:	f001 ff0d 	bl	801cebc <_Bfree>
 801b0a2:	4629      	mov	r1, r5
 801b0a4:	4620      	mov	r0, r4
 801b0a6:	f001 ff09 	bl	801cebc <_Bfree>
 801b0aa:	e613      	b.n	801acd4 <_strtod_l+0x664>
 801b0ac:	f1ba 0f00 	cmp.w	sl, #0
 801b0b0:	d11b      	bne.n	801b0ea <_strtod_l+0xa7a>
 801b0b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b0b6:	b9f3      	cbnz	r3, 801b0f6 <_strtod_l+0xa86>
 801b0b8:	4b6b      	ldr	r3, [pc, #428]	; (801b268 <_strtod_l+0xbf8>)
 801b0ba:	2200      	movs	r2, #0
 801b0bc:	4640      	mov	r0, r8
 801b0be:	4649      	mov	r1, r9
 801b0c0:	f7e5 fd2c 	bl	8000b1c <__aeabi_dcmplt>
 801b0c4:	b9d0      	cbnz	r0, 801b0fc <_strtod_l+0xa8c>
 801b0c6:	4640      	mov	r0, r8
 801b0c8:	4649      	mov	r1, r9
 801b0ca:	4b6b      	ldr	r3, [pc, #428]	; (801b278 <_strtod_l+0xc08>)
 801b0cc:	2200      	movs	r2, #0
 801b0ce:	f7e5 fab3 	bl	8000638 <__aeabi_dmul>
 801b0d2:	4680      	mov	r8, r0
 801b0d4:	4689      	mov	r9, r1
 801b0d6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b0da:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801b0de:	931b      	str	r3, [sp, #108]	; 0x6c
 801b0e0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801b0e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b0e8:	e79b      	b.n	801b022 <_strtod_l+0x9b2>
 801b0ea:	f1ba 0f01 	cmp.w	sl, #1
 801b0ee:	d102      	bne.n	801b0f6 <_strtod_l+0xa86>
 801b0f0:	2f00      	cmp	r7, #0
 801b0f2:	f43f ad7e 	beq.w	801abf2 <_strtod_l+0x582>
 801b0f6:	4b61      	ldr	r3, [pc, #388]	; (801b27c <_strtod_l+0xc0c>)
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	e78c      	b.n	801b016 <_strtod_l+0x9a6>
 801b0fc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 801b278 <_strtod_l+0xc08>
 801b100:	f04f 0800 	mov.w	r8, #0
 801b104:	e7e7      	b.n	801b0d6 <_strtod_l+0xa66>
 801b106:	4b5c      	ldr	r3, [pc, #368]	; (801b278 <_strtod_l+0xc08>)
 801b108:	4640      	mov	r0, r8
 801b10a:	4649      	mov	r1, r9
 801b10c:	2200      	movs	r2, #0
 801b10e:	f7e5 fa93 	bl	8000638 <__aeabi_dmul>
 801b112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b114:	4680      	mov	r8, r0
 801b116:	4689      	mov	r9, r1
 801b118:	b933      	cbnz	r3, 801b128 <_strtod_l+0xab8>
 801b11a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b11e:	9012      	str	r0, [sp, #72]	; 0x48
 801b120:	9313      	str	r3, [sp, #76]	; 0x4c
 801b122:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801b126:	e7dd      	b.n	801b0e4 <_strtod_l+0xa74>
 801b128:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801b12c:	e7f9      	b.n	801b122 <_strtod_l+0xab2>
 801b12e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b132:	9b04      	ldr	r3, [sp, #16]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d1a8      	bne.n	801b08a <_strtod_l+0xa1a>
 801b138:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b13c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b13e:	0d1b      	lsrs	r3, r3, #20
 801b140:	051b      	lsls	r3, r3, #20
 801b142:	429a      	cmp	r2, r3
 801b144:	d1a1      	bne.n	801b08a <_strtod_l+0xa1a>
 801b146:	4640      	mov	r0, r8
 801b148:	4649      	mov	r1, r9
 801b14a:	f7e5 fdd5 	bl	8000cf8 <__aeabi_d2lz>
 801b14e:	f7e5 fa45 	bl	80005dc <__aeabi_l2d>
 801b152:	4602      	mov	r2, r0
 801b154:	460b      	mov	r3, r1
 801b156:	4640      	mov	r0, r8
 801b158:	4649      	mov	r1, r9
 801b15a:	f7e5 f8b5 	bl	80002c8 <__aeabi_dsub>
 801b15e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b160:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b164:	ea43 030a 	orr.w	r3, r3, sl
 801b168:	4313      	orrs	r3, r2
 801b16a:	4680      	mov	r8, r0
 801b16c:	4689      	mov	r9, r1
 801b16e:	d053      	beq.n	801b218 <_strtod_l+0xba8>
 801b170:	a335      	add	r3, pc, #212	; (adr r3, 801b248 <_strtod_l+0xbd8>)
 801b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b176:	f7e5 fcd1 	bl	8000b1c <__aeabi_dcmplt>
 801b17a:	2800      	cmp	r0, #0
 801b17c:	f47f acce 	bne.w	801ab1c <_strtod_l+0x4ac>
 801b180:	a333      	add	r3, pc, #204	; (adr r3, 801b250 <_strtod_l+0xbe0>)
 801b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b186:	4640      	mov	r0, r8
 801b188:	4649      	mov	r1, r9
 801b18a:	f7e5 fce5 	bl	8000b58 <__aeabi_dcmpgt>
 801b18e:	2800      	cmp	r0, #0
 801b190:	f43f af7b 	beq.w	801b08a <_strtod_l+0xa1a>
 801b194:	e4c2      	b.n	801ab1c <_strtod_l+0x4ac>
 801b196:	9b04      	ldr	r3, [sp, #16]
 801b198:	b333      	cbz	r3, 801b1e8 <_strtod_l+0xb78>
 801b19a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b19c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b1a0:	d822      	bhi.n	801b1e8 <_strtod_l+0xb78>
 801b1a2:	a32d      	add	r3, pc, #180	; (adr r3, 801b258 <_strtod_l+0xbe8>)
 801b1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1a8:	4640      	mov	r0, r8
 801b1aa:	4649      	mov	r1, r9
 801b1ac:	f7e5 fcc0 	bl	8000b30 <__aeabi_dcmple>
 801b1b0:	b1a0      	cbz	r0, 801b1dc <_strtod_l+0xb6c>
 801b1b2:	4649      	mov	r1, r9
 801b1b4:	4640      	mov	r0, r8
 801b1b6:	f7e5 fd17 	bl	8000be8 <__aeabi_d2uiz>
 801b1ba:	2801      	cmp	r0, #1
 801b1bc:	bf38      	it	cc
 801b1be:	2001      	movcc	r0, #1
 801b1c0:	f7e5 f9c0 	bl	8000544 <__aeabi_ui2d>
 801b1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b1c6:	4680      	mov	r8, r0
 801b1c8:	4689      	mov	r9, r1
 801b1ca:	bb13      	cbnz	r3, 801b212 <_strtod_l+0xba2>
 801b1cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b1d0:	9014      	str	r0, [sp, #80]	; 0x50
 801b1d2:	9315      	str	r3, [sp, #84]	; 0x54
 801b1d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b1d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801b1dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b1de:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b1e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b1e4:	1a9b      	subs	r3, r3, r2
 801b1e6:	930d      	str	r3, [sp, #52]	; 0x34
 801b1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b1ec:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b1f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b1f4:	f002 f98e 	bl	801d514 <__ulp>
 801b1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b1fc:	ec53 2b10 	vmov	r2, r3, d0
 801b200:	f7e5 fa1a 	bl	8000638 <__aeabi_dmul>
 801b204:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b208:	f7e5 f860 	bl	80002cc <__adddf3>
 801b20c:	4682      	mov	sl, r0
 801b20e:	468b      	mov	fp, r1
 801b210:	e78f      	b.n	801b132 <_strtod_l+0xac2>
 801b212:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801b216:	e7dd      	b.n	801b1d4 <_strtod_l+0xb64>
 801b218:	a311      	add	r3, pc, #68	; (adr r3, 801b260 <_strtod_l+0xbf0>)
 801b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b21e:	f7e5 fc7d 	bl	8000b1c <__aeabi_dcmplt>
 801b222:	e7b4      	b.n	801b18e <_strtod_l+0xb1e>
 801b224:	2300      	movs	r3, #0
 801b226:	930e      	str	r3, [sp, #56]	; 0x38
 801b228:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b22a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b22c:	6013      	str	r3, [r2, #0]
 801b22e:	f7ff ba65 	b.w	801a6fc <_strtod_l+0x8c>
 801b232:	2b65      	cmp	r3, #101	; 0x65
 801b234:	f43f ab5d 	beq.w	801a8f2 <_strtod_l+0x282>
 801b238:	2b45      	cmp	r3, #69	; 0x45
 801b23a:	f43f ab5a 	beq.w	801a8f2 <_strtod_l+0x282>
 801b23e:	2201      	movs	r2, #1
 801b240:	f7ff bb92 	b.w	801a968 <_strtod_l+0x2f8>
 801b244:	f3af 8000 	nop.w
 801b248:	94a03595 	.word	0x94a03595
 801b24c:	3fdfffff 	.word	0x3fdfffff
 801b250:	35afe535 	.word	0x35afe535
 801b254:	3fe00000 	.word	0x3fe00000
 801b258:	ffc00000 	.word	0xffc00000
 801b25c:	41dfffff 	.word	0x41dfffff
 801b260:	94a03595 	.word	0x94a03595
 801b264:	3fcfffff 	.word	0x3fcfffff
 801b268:	3ff00000 	.word	0x3ff00000
 801b26c:	7ff00000 	.word	0x7ff00000
 801b270:	7fe00000 	.word	0x7fe00000
 801b274:	7c9fffff 	.word	0x7c9fffff
 801b278:	3fe00000 	.word	0x3fe00000
 801b27c:	bff00000 	.word	0xbff00000
 801b280:	7fefffff 	.word	0x7fefffff

0801b284 <_strtod_r>:
 801b284:	4b01      	ldr	r3, [pc, #4]	; (801b28c <_strtod_r+0x8>)
 801b286:	f7ff b9f3 	b.w	801a670 <_strtod_l>
 801b28a:	bf00      	nop
 801b28c:	20000088 	.word	0x20000088

0801b290 <_strtol_l.isra.0>:
 801b290:	2b01      	cmp	r3, #1
 801b292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b296:	d001      	beq.n	801b29c <_strtol_l.isra.0+0xc>
 801b298:	2b24      	cmp	r3, #36	; 0x24
 801b29a:	d906      	bls.n	801b2aa <_strtol_l.isra.0+0x1a>
 801b29c:	f000 fff8 	bl	801c290 <__errno>
 801b2a0:	2316      	movs	r3, #22
 801b2a2:	6003      	str	r3, [r0, #0]
 801b2a4:	2000      	movs	r0, #0
 801b2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b2aa:	4f3a      	ldr	r7, [pc, #232]	; (801b394 <_strtol_l.isra.0+0x104>)
 801b2ac:	468e      	mov	lr, r1
 801b2ae:	4676      	mov	r6, lr
 801b2b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b2b4:	5de5      	ldrb	r5, [r4, r7]
 801b2b6:	f015 0508 	ands.w	r5, r5, #8
 801b2ba:	d1f8      	bne.n	801b2ae <_strtol_l.isra.0+0x1e>
 801b2bc:	2c2d      	cmp	r4, #45	; 0x2d
 801b2be:	d134      	bne.n	801b32a <_strtol_l.isra.0+0x9a>
 801b2c0:	f89e 4000 	ldrb.w	r4, [lr]
 801b2c4:	f04f 0801 	mov.w	r8, #1
 801b2c8:	f106 0e02 	add.w	lr, r6, #2
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d05c      	beq.n	801b38a <_strtol_l.isra.0+0xfa>
 801b2d0:	2b10      	cmp	r3, #16
 801b2d2:	d10c      	bne.n	801b2ee <_strtol_l.isra.0+0x5e>
 801b2d4:	2c30      	cmp	r4, #48	; 0x30
 801b2d6:	d10a      	bne.n	801b2ee <_strtol_l.isra.0+0x5e>
 801b2d8:	f89e 4000 	ldrb.w	r4, [lr]
 801b2dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b2e0:	2c58      	cmp	r4, #88	; 0x58
 801b2e2:	d14d      	bne.n	801b380 <_strtol_l.isra.0+0xf0>
 801b2e4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801b2e8:	2310      	movs	r3, #16
 801b2ea:	f10e 0e02 	add.w	lr, lr, #2
 801b2ee:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801b2f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b2f6:	2600      	movs	r6, #0
 801b2f8:	fbbc f9f3 	udiv	r9, ip, r3
 801b2fc:	4635      	mov	r5, r6
 801b2fe:	fb03 ca19 	mls	sl, r3, r9, ip
 801b302:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801b306:	2f09      	cmp	r7, #9
 801b308:	d818      	bhi.n	801b33c <_strtol_l.isra.0+0xac>
 801b30a:	463c      	mov	r4, r7
 801b30c:	42a3      	cmp	r3, r4
 801b30e:	dd24      	ble.n	801b35a <_strtol_l.isra.0+0xca>
 801b310:	2e00      	cmp	r6, #0
 801b312:	db1f      	blt.n	801b354 <_strtol_l.isra.0+0xc4>
 801b314:	45a9      	cmp	r9, r5
 801b316:	d31d      	bcc.n	801b354 <_strtol_l.isra.0+0xc4>
 801b318:	d101      	bne.n	801b31e <_strtol_l.isra.0+0x8e>
 801b31a:	45a2      	cmp	sl, r4
 801b31c:	db1a      	blt.n	801b354 <_strtol_l.isra.0+0xc4>
 801b31e:	fb05 4503 	mla	r5, r5, r3, r4
 801b322:	2601      	movs	r6, #1
 801b324:	f81e 4b01 	ldrb.w	r4, [lr], #1
 801b328:	e7eb      	b.n	801b302 <_strtol_l.isra.0+0x72>
 801b32a:	2c2b      	cmp	r4, #43	; 0x2b
 801b32c:	bf08      	it	eq
 801b32e:	f89e 4000 	ldrbeq.w	r4, [lr]
 801b332:	46a8      	mov	r8, r5
 801b334:	bf08      	it	eq
 801b336:	f106 0e02 	addeq.w	lr, r6, #2
 801b33a:	e7c7      	b.n	801b2cc <_strtol_l.isra.0+0x3c>
 801b33c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801b340:	2f19      	cmp	r7, #25
 801b342:	d801      	bhi.n	801b348 <_strtol_l.isra.0+0xb8>
 801b344:	3c37      	subs	r4, #55	; 0x37
 801b346:	e7e1      	b.n	801b30c <_strtol_l.isra.0+0x7c>
 801b348:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801b34c:	2f19      	cmp	r7, #25
 801b34e:	d804      	bhi.n	801b35a <_strtol_l.isra.0+0xca>
 801b350:	3c57      	subs	r4, #87	; 0x57
 801b352:	e7db      	b.n	801b30c <_strtol_l.isra.0+0x7c>
 801b354:	f04f 36ff 	mov.w	r6, #4294967295
 801b358:	e7e4      	b.n	801b324 <_strtol_l.isra.0+0x94>
 801b35a:	2e00      	cmp	r6, #0
 801b35c:	da05      	bge.n	801b36a <_strtol_l.isra.0+0xda>
 801b35e:	2322      	movs	r3, #34	; 0x22
 801b360:	6003      	str	r3, [r0, #0]
 801b362:	4665      	mov	r5, ip
 801b364:	b942      	cbnz	r2, 801b378 <_strtol_l.isra.0+0xe8>
 801b366:	4628      	mov	r0, r5
 801b368:	e79d      	b.n	801b2a6 <_strtol_l.isra.0+0x16>
 801b36a:	f1b8 0f00 	cmp.w	r8, #0
 801b36e:	d000      	beq.n	801b372 <_strtol_l.isra.0+0xe2>
 801b370:	426d      	negs	r5, r5
 801b372:	2a00      	cmp	r2, #0
 801b374:	d0f7      	beq.n	801b366 <_strtol_l.isra.0+0xd6>
 801b376:	b10e      	cbz	r6, 801b37c <_strtol_l.isra.0+0xec>
 801b378:	f10e 31ff 	add.w	r1, lr, #4294967295
 801b37c:	6011      	str	r1, [r2, #0]
 801b37e:	e7f2      	b.n	801b366 <_strtol_l.isra.0+0xd6>
 801b380:	2430      	movs	r4, #48	; 0x30
 801b382:	2b00      	cmp	r3, #0
 801b384:	d1b3      	bne.n	801b2ee <_strtol_l.isra.0+0x5e>
 801b386:	2308      	movs	r3, #8
 801b388:	e7b1      	b.n	801b2ee <_strtol_l.isra.0+0x5e>
 801b38a:	2c30      	cmp	r4, #48	; 0x30
 801b38c:	d0a4      	beq.n	801b2d8 <_strtol_l.isra.0+0x48>
 801b38e:	230a      	movs	r3, #10
 801b390:	e7ad      	b.n	801b2ee <_strtol_l.isra.0+0x5e>
 801b392:	bf00      	nop
 801b394:	080224a9 	.word	0x080224a9

0801b398 <_strtol_r>:
 801b398:	f7ff bf7a 	b.w	801b290 <_strtol_l.isra.0>

0801b39c <__swbuf_r>:
 801b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b39e:	460e      	mov	r6, r1
 801b3a0:	4614      	mov	r4, r2
 801b3a2:	4605      	mov	r5, r0
 801b3a4:	b118      	cbz	r0, 801b3ae <__swbuf_r+0x12>
 801b3a6:	6983      	ldr	r3, [r0, #24]
 801b3a8:	b90b      	cbnz	r3, 801b3ae <__swbuf_r+0x12>
 801b3aa:	f001 f891 	bl	801c4d0 <__sinit>
 801b3ae:	4b21      	ldr	r3, [pc, #132]	; (801b434 <__swbuf_r+0x98>)
 801b3b0:	429c      	cmp	r4, r3
 801b3b2:	d12b      	bne.n	801b40c <__swbuf_r+0x70>
 801b3b4:	686c      	ldr	r4, [r5, #4]
 801b3b6:	69a3      	ldr	r3, [r4, #24]
 801b3b8:	60a3      	str	r3, [r4, #8]
 801b3ba:	89a3      	ldrh	r3, [r4, #12]
 801b3bc:	071a      	lsls	r2, r3, #28
 801b3be:	d52f      	bpl.n	801b420 <__swbuf_r+0x84>
 801b3c0:	6923      	ldr	r3, [r4, #16]
 801b3c2:	b36b      	cbz	r3, 801b420 <__swbuf_r+0x84>
 801b3c4:	6923      	ldr	r3, [r4, #16]
 801b3c6:	6820      	ldr	r0, [r4, #0]
 801b3c8:	1ac0      	subs	r0, r0, r3
 801b3ca:	6963      	ldr	r3, [r4, #20]
 801b3cc:	b2f6      	uxtb	r6, r6
 801b3ce:	4283      	cmp	r3, r0
 801b3d0:	4637      	mov	r7, r6
 801b3d2:	dc04      	bgt.n	801b3de <__swbuf_r+0x42>
 801b3d4:	4621      	mov	r1, r4
 801b3d6:	4628      	mov	r0, r5
 801b3d8:	f000 ffe6 	bl	801c3a8 <_fflush_r>
 801b3dc:	bb30      	cbnz	r0, 801b42c <__swbuf_r+0x90>
 801b3de:	68a3      	ldr	r3, [r4, #8]
 801b3e0:	3b01      	subs	r3, #1
 801b3e2:	60a3      	str	r3, [r4, #8]
 801b3e4:	6823      	ldr	r3, [r4, #0]
 801b3e6:	1c5a      	adds	r2, r3, #1
 801b3e8:	6022      	str	r2, [r4, #0]
 801b3ea:	701e      	strb	r6, [r3, #0]
 801b3ec:	6963      	ldr	r3, [r4, #20]
 801b3ee:	3001      	adds	r0, #1
 801b3f0:	4283      	cmp	r3, r0
 801b3f2:	d004      	beq.n	801b3fe <__swbuf_r+0x62>
 801b3f4:	89a3      	ldrh	r3, [r4, #12]
 801b3f6:	07db      	lsls	r3, r3, #31
 801b3f8:	d506      	bpl.n	801b408 <__swbuf_r+0x6c>
 801b3fa:	2e0a      	cmp	r6, #10
 801b3fc:	d104      	bne.n	801b408 <__swbuf_r+0x6c>
 801b3fe:	4621      	mov	r1, r4
 801b400:	4628      	mov	r0, r5
 801b402:	f000 ffd1 	bl	801c3a8 <_fflush_r>
 801b406:	b988      	cbnz	r0, 801b42c <__swbuf_r+0x90>
 801b408:	4638      	mov	r0, r7
 801b40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b40c:	4b0a      	ldr	r3, [pc, #40]	; (801b438 <__swbuf_r+0x9c>)
 801b40e:	429c      	cmp	r4, r3
 801b410:	d101      	bne.n	801b416 <__swbuf_r+0x7a>
 801b412:	68ac      	ldr	r4, [r5, #8]
 801b414:	e7cf      	b.n	801b3b6 <__swbuf_r+0x1a>
 801b416:	4b09      	ldr	r3, [pc, #36]	; (801b43c <__swbuf_r+0xa0>)
 801b418:	429c      	cmp	r4, r3
 801b41a:	bf08      	it	eq
 801b41c:	68ec      	ldreq	r4, [r5, #12]
 801b41e:	e7ca      	b.n	801b3b6 <__swbuf_r+0x1a>
 801b420:	4621      	mov	r1, r4
 801b422:	4628      	mov	r0, r5
 801b424:	f000 f81e 	bl	801b464 <__swsetup_r>
 801b428:	2800      	cmp	r0, #0
 801b42a:	d0cb      	beq.n	801b3c4 <__swbuf_r+0x28>
 801b42c:	f04f 37ff 	mov.w	r7, #4294967295
 801b430:	e7ea      	b.n	801b408 <__swbuf_r+0x6c>
 801b432:	bf00      	nop
 801b434:	0802278c 	.word	0x0802278c
 801b438:	080227ac 	.word	0x080227ac
 801b43c:	0802276c 	.word	0x0802276c

0801b440 <_write_r>:
 801b440:	b538      	push	{r3, r4, r5, lr}
 801b442:	4d07      	ldr	r5, [pc, #28]	; (801b460 <_write_r+0x20>)
 801b444:	4604      	mov	r4, r0
 801b446:	4608      	mov	r0, r1
 801b448:	4611      	mov	r1, r2
 801b44a:	2200      	movs	r2, #0
 801b44c:	602a      	str	r2, [r5, #0]
 801b44e:	461a      	mov	r2, r3
 801b450:	f7e6 f80d 	bl	800146e <_write>
 801b454:	1c43      	adds	r3, r0, #1
 801b456:	d102      	bne.n	801b45e <_write_r+0x1e>
 801b458:	682b      	ldr	r3, [r5, #0]
 801b45a:	b103      	cbz	r3, 801b45e <_write_r+0x1e>
 801b45c:	6023      	str	r3, [r4, #0]
 801b45e:	bd38      	pop	{r3, r4, r5, pc}
 801b460:	200280fc 	.word	0x200280fc

0801b464 <__swsetup_r>:
 801b464:	4b32      	ldr	r3, [pc, #200]	; (801b530 <__swsetup_r+0xcc>)
 801b466:	b570      	push	{r4, r5, r6, lr}
 801b468:	681d      	ldr	r5, [r3, #0]
 801b46a:	4606      	mov	r6, r0
 801b46c:	460c      	mov	r4, r1
 801b46e:	b125      	cbz	r5, 801b47a <__swsetup_r+0x16>
 801b470:	69ab      	ldr	r3, [r5, #24]
 801b472:	b913      	cbnz	r3, 801b47a <__swsetup_r+0x16>
 801b474:	4628      	mov	r0, r5
 801b476:	f001 f82b 	bl	801c4d0 <__sinit>
 801b47a:	4b2e      	ldr	r3, [pc, #184]	; (801b534 <__swsetup_r+0xd0>)
 801b47c:	429c      	cmp	r4, r3
 801b47e:	d10f      	bne.n	801b4a0 <__swsetup_r+0x3c>
 801b480:	686c      	ldr	r4, [r5, #4]
 801b482:	89a3      	ldrh	r3, [r4, #12]
 801b484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b488:	0719      	lsls	r1, r3, #28
 801b48a:	d42c      	bmi.n	801b4e6 <__swsetup_r+0x82>
 801b48c:	06dd      	lsls	r5, r3, #27
 801b48e:	d411      	bmi.n	801b4b4 <__swsetup_r+0x50>
 801b490:	2309      	movs	r3, #9
 801b492:	6033      	str	r3, [r6, #0]
 801b494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b498:	81a3      	strh	r3, [r4, #12]
 801b49a:	f04f 30ff 	mov.w	r0, #4294967295
 801b49e:	e03e      	b.n	801b51e <__swsetup_r+0xba>
 801b4a0:	4b25      	ldr	r3, [pc, #148]	; (801b538 <__swsetup_r+0xd4>)
 801b4a2:	429c      	cmp	r4, r3
 801b4a4:	d101      	bne.n	801b4aa <__swsetup_r+0x46>
 801b4a6:	68ac      	ldr	r4, [r5, #8]
 801b4a8:	e7eb      	b.n	801b482 <__swsetup_r+0x1e>
 801b4aa:	4b24      	ldr	r3, [pc, #144]	; (801b53c <__swsetup_r+0xd8>)
 801b4ac:	429c      	cmp	r4, r3
 801b4ae:	bf08      	it	eq
 801b4b0:	68ec      	ldreq	r4, [r5, #12]
 801b4b2:	e7e6      	b.n	801b482 <__swsetup_r+0x1e>
 801b4b4:	0758      	lsls	r0, r3, #29
 801b4b6:	d512      	bpl.n	801b4de <__swsetup_r+0x7a>
 801b4b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4ba:	b141      	cbz	r1, 801b4ce <__swsetup_r+0x6a>
 801b4bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b4c0:	4299      	cmp	r1, r3
 801b4c2:	d002      	beq.n	801b4ca <__swsetup_r+0x66>
 801b4c4:	4630      	mov	r0, r6
 801b4c6:	f002 f983 	bl	801d7d0 <_free_r>
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	6363      	str	r3, [r4, #52]	; 0x34
 801b4ce:	89a3      	ldrh	r3, [r4, #12]
 801b4d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b4d4:	81a3      	strh	r3, [r4, #12]
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	6063      	str	r3, [r4, #4]
 801b4da:	6923      	ldr	r3, [r4, #16]
 801b4dc:	6023      	str	r3, [r4, #0]
 801b4de:	89a3      	ldrh	r3, [r4, #12]
 801b4e0:	f043 0308 	orr.w	r3, r3, #8
 801b4e4:	81a3      	strh	r3, [r4, #12]
 801b4e6:	6923      	ldr	r3, [r4, #16]
 801b4e8:	b94b      	cbnz	r3, 801b4fe <__swsetup_r+0x9a>
 801b4ea:	89a3      	ldrh	r3, [r4, #12]
 801b4ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b4f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b4f4:	d003      	beq.n	801b4fe <__swsetup_r+0x9a>
 801b4f6:	4621      	mov	r1, r4
 801b4f8:	4630      	mov	r0, r6
 801b4fa:	f001 fc45 	bl	801cd88 <__smakebuf_r>
 801b4fe:	89a0      	ldrh	r0, [r4, #12]
 801b500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b504:	f010 0301 	ands.w	r3, r0, #1
 801b508:	d00a      	beq.n	801b520 <__swsetup_r+0xbc>
 801b50a:	2300      	movs	r3, #0
 801b50c:	60a3      	str	r3, [r4, #8]
 801b50e:	6963      	ldr	r3, [r4, #20]
 801b510:	425b      	negs	r3, r3
 801b512:	61a3      	str	r3, [r4, #24]
 801b514:	6923      	ldr	r3, [r4, #16]
 801b516:	b943      	cbnz	r3, 801b52a <__swsetup_r+0xc6>
 801b518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b51c:	d1ba      	bne.n	801b494 <__swsetup_r+0x30>
 801b51e:	bd70      	pop	{r4, r5, r6, pc}
 801b520:	0781      	lsls	r1, r0, #30
 801b522:	bf58      	it	pl
 801b524:	6963      	ldrpl	r3, [r4, #20]
 801b526:	60a3      	str	r3, [r4, #8]
 801b528:	e7f4      	b.n	801b514 <__swsetup_r+0xb0>
 801b52a:	2000      	movs	r0, #0
 801b52c:	e7f7      	b.n	801b51e <__swsetup_r+0xba>
 801b52e:	bf00      	nop
 801b530:	20000020 	.word	0x20000020
 801b534:	0802278c 	.word	0x0802278c
 801b538:	080227ac 	.word	0x080227ac
 801b53c:	0802276c 	.word	0x0802276c

0801b540 <__assert_func>:
 801b540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b542:	4614      	mov	r4, r2
 801b544:	461a      	mov	r2, r3
 801b546:	4b09      	ldr	r3, [pc, #36]	; (801b56c <__assert_func+0x2c>)
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	4605      	mov	r5, r0
 801b54c:	68d8      	ldr	r0, [r3, #12]
 801b54e:	b14c      	cbz	r4, 801b564 <__assert_func+0x24>
 801b550:	4b07      	ldr	r3, [pc, #28]	; (801b570 <__assert_func+0x30>)
 801b552:	9100      	str	r1, [sp, #0]
 801b554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b558:	4906      	ldr	r1, [pc, #24]	; (801b574 <__assert_func+0x34>)
 801b55a:	462b      	mov	r3, r5
 801b55c:	f001 f836 	bl	801c5cc <fiprintf>
 801b560:	f003 f8dd 	bl	801e71e <abort>
 801b564:	4b04      	ldr	r3, [pc, #16]	; (801b578 <__assert_func+0x38>)
 801b566:	461c      	mov	r4, r3
 801b568:	e7f3      	b.n	801b552 <__assert_func+0x12>
 801b56a:	bf00      	nop
 801b56c:	20000020 	.word	0x20000020
 801b570:	080226b0 	.word	0x080226b0
 801b574:	080226bd 	.word	0x080226bd
 801b578:	080226eb 	.word	0x080226eb

0801b57c <_close_r>:
 801b57c:	b538      	push	{r3, r4, r5, lr}
 801b57e:	4d06      	ldr	r5, [pc, #24]	; (801b598 <_close_r+0x1c>)
 801b580:	2300      	movs	r3, #0
 801b582:	4604      	mov	r4, r0
 801b584:	4608      	mov	r0, r1
 801b586:	602b      	str	r3, [r5, #0]
 801b588:	f7e6 f919 	bl	80017be <_close>
 801b58c:	1c43      	adds	r3, r0, #1
 801b58e:	d102      	bne.n	801b596 <_close_r+0x1a>
 801b590:	682b      	ldr	r3, [r5, #0]
 801b592:	b103      	cbz	r3, 801b596 <_close_r+0x1a>
 801b594:	6023      	str	r3, [r4, #0]
 801b596:	bd38      	pop	{r3, r4, r5, pc}
 801b598:	200280fc 	.word	0x200280fc

0801b59c <quorem>:
 801b59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5a0:	6903      	ldr	r3, [r0, #16]
 801b5a2:	690c      	ldr	r4, [r1, #16]
 801b5a4:	42a3      	cmp	r3, r4
 801b5a6:	4607      	mov	r7, r0
 801b5a8:	f2c0 8081 	blt.w	801b6ae <quorem+0x112>
 801b5ac:	3c01      	subs	r4, #1
 801b5ae:	f101 0814 	add.w	r8, r1, #20
 801b5b2:	f100 0514 	add.w	r5, r0, #20
 801b5b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b5ba:	9301      	str	r3, [sp, #4]
 801b5bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b5c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b5c4:	3301      	adds	r3, #1
 801b5c6:	429a      	cmp	r2, r3
 801b5c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b5cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b5d0:	fbb2 f6f3 	udiv	r6, r2, r3
 801b5d4:	d331      	bcc.n	801b63a <quorem+0x9e>
 801b5d6:	f04f 0e00 	mov.w	lr, #0
 801b5da:	4640      	mov	r0, r8
 801b5dc:	46ac      	mov	ip, r5
 801b5de:	46f2      	mov	sl, lr
 801b5e0:	f850 2b04 	ldr.w	r2, [r0], #4
 801b5e4:	b293      	uxth	r3, r2
 801b5e6:	fb06 e303 	mla	r3, r6, r3, lr
 801b5ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b5ee:	b29b      	uxth	r3, r3
 801b5f0:	ebaa 0303 	sub.w	r3, sl, r3
 801b5f4:	0c12      	lsrs	r2, r2, #16
 801b5f6:	f8dc a000 	ldr.w	sl, [ip]
 801b5fa:	fb06 e202 	mla	r2, r6, r2, lr
 801b5fe:	fa13 f38a 	uxtah	r3, r3, sl
 801b602:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b606:	fa1f fa82 	uxth.w	sl, r2
 801b60a:	f8dc 2000 	ldr.w	r2, [ip]
 801b60e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801b612:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b616:	b29b      	uxth	r3, r3
 801b618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b61c:	4581      	cmp	r9, r0
 801b61e:	f84c 3b04 	str.w	r3, [ip], #4
 801b622:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b626:	d2db      	bcs.n	801b5e0 <quorem+0x44>
 801b628:	f855 300b 	ldr.w	r3, [r5, fp]
 801b62c:	b92b      	cbnz	r3, 801b63a <quorem+0x9e>
 801b62e:	9b01      	ldr	r3, [sp, #4]
 801b630:	3b04      	subs	r3, #4
 801b632:	429d      	cmp	r5, r3
 801b634:	461a      	mov	r2, r3
 801b636:	d32e      	bcc.n	801b696 <quorem+0xfa>
 801b638:	613c      	str	r4, [r7, #16]
 801b63a:	4638      	mov	r0, r7
 801b63c:	f001 fec6 	bl	801d3cc <__mcmp>
 801b640:	2800      	cmp	r0, #0
 801b642:	db24      	blt.n	801b68e <quorem+0xf2>
 801b644:	3601      	adds	r6, #1
 801b646:	4628      	mov	r0, r5
 801b648:	f04f 0c00 	mov.w	ip, #0
 801b64c:	f858 2b04 	ldr.w	r2, [r8], #4
 801b650:	f8d0 e000 	ldr.w	lr, [r0]
 801b654:	b293      	uxth	r3, r2
 801b656:	ebac 0303 	sub.w	r3, ip, r3
 801b65a:	0c12      	lsrs	r2, r2, #16
 801b65c:	fa13 f38e 	uxtah	r3, r3, lr
 801b660:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b664:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b668:	b29b      	uxth	r3, r3
 801b66a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b66e:	45c1      	cmp	r9, r8
 801b670:	f840 3b04 	str.w	r3, [r0], #4
 801b674:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b678:	d2e8      	bcs.n	801b64c <quorem+0xb0>
 801b67a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b67e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b682:	b922      	cbnz	r2, 801b68e <quorem+0xf2>
 801b684:	3b04      	subs	r3, #4
 801b686:	429d      	cmp	r5, r3
 801b688:	461a      	mov	r2, r3
 801b68a:	d30a      	bcc.n	801b6a2 <quorem+0x106>
 801b68c:	613c      	str	r4, [r7, #16]
 801b68e:	4630      	mov	r0, r6
 801b690:	b003      	add	sp, #12
 801b692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b696:	6812      	ldr	r2, [r2, #0]
 801b698:	3b04      	subs	r3, #4
 801b69a:	2a00      	cmp	r2, #0
 801b69c:	d1cc      	bne.n	801b638 <quorem+0x9c>
 801b69e:	3c01      	subs	r4, #1
 801b6a0:	e7c7      	b.n	801b632 <quorem+0x96>
 801b6a2:	6812      	ldr	r2, [r2, #0]
 801b6a4:	3b04      	subs	r3, #4
 801b6a6:	2a00      	cmp	r2, #0
 801b6a8:	d1f0      	bne.n	801b68c <quorem+0xf0>
 801b6aa:	3c01      	subs	r4, #1
 801b6ac:	e7eb      	b.n	801b686 <quorem+0xea>
 801b6ae:	2000      	movs	r0, #0
 801b6b0:	e7ee      	b.n	801b690 <quorem+0xf4>
 801b6b2:	0000      	movs	r0, r0
 801b6b4:	0000      	movs	r0, r0
	...

0801b6b8 <_dtoa_r>:
 801b6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6bc:	ed2d 8b02 	vpush	{d8}
 801b6c0:	ec57 6b10 	vmov	r6, r7, d0
 801b6c4:	b095      	sub	sp, #84	; 0x54
 801b6c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b6c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b6cc:	9105      	str	r1, [sp, #20]
 801b6ce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b6d2:	4604      	mov	r4, r0
 801b6d4:	9209      	str	r2, [sp, #36]	; 0x24
 801b6d6:	930f      	str	r3, [sp, #60]	; 0x3c
 801b6d8:	b975      	cbnz	r5, 801b6f8 <_dtoa_r+0x40>
 801b6da:	2010      	movs	r0, #16
 801b6dc:	f001 fb94 	bl	801ce08 <malloc>
 801b6e0:	4602      	mov	r2, r0
 801b6e2:	6260      	str	r0, [r4, #36]	; 0x24
 801b6e4:	b920      	cbnz	r0, 801b6f0 <_dtoa_r+0x38>
 801b6e6:	4bb2      	ldr	r3, [pc, #712]	; (801b9b0 <_dtoa_r+0x2f8>)
 801b6e8:	21ea      	movs	r1, #234	; 0xea
 801b6ea:	48b2      	ldr	r0, [pc, #712]	; (801b9b4 <_dtoa_r+0x2fc>)
 801b6ec:	f7ff ff28 	bl	801b540 <__assert_func>
 801b6f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b6f4:	6005      	str	r5, [r0, #0]
 801b6f6:	60c5      	str	r5, [r0, #12]
 801b6f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b6fa:	6819      	ldr	r1, [r3, #0]
 801b6fc:	b151      	cbz	r1, 801b714 <_dtoa_r+0x5c>
 801b6fe:	685a      	ldr	r2, [r3, #4]
 801b700:	604a      	str	r2, [r1, #4]
 801b702:	2301      	movs	r3, #1
 801b704:	4093      	lsls	r3, r2
 801b706:	608b      	str	r3, [r1, #8]
 801b708:	4620      	mov	r0, r4
 801b70a:	f001 fbd7 	bl	801cebc <_Bfree>
 801b70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b710:	2200      	movs	r2, #0
 801b712:	601a      	str	r2, [r3, #0]
 801b714:	1e3b      	subs	r3, r7, #0
 801b716:	bfb9      	ittee	lt
 801b718:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b71c:	9303      	strlt	r3, [sp, #12]
 801b71e:	2300      	movge	r3, #0
 801b720:	f8c8 3000 	strge.w	r3, [r8]
 801b724:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801b728:	4ba3      	ldr	r3, [pc, #652]	; (801b9b8 <_dtoa_r+0x300>)
 801b72a:	bfbc      	itt	lt
 801b72c:	2201      	movlt	r2, #1
 801b72e:	f8c8 2000 	strlt.w	r2, [r8]
 801b732:	ea33 0309 	bics.w	r3, r3, r9
 801b736:	d11b      	bne.n	801b770 <_dtoa_r+0xb8>
 801b738:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b73a:	f242 730f 	movw	r3, #9999	; 0x270f
 801b73e:	6013      	str	r3, [r2, #0]
 801b740:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b744:	4333      	orrs	r3, r6
 801b746:	f000 857a 	beq.w	801c23e <_dtoa_r+0xb86>
 801b74a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b74c:	b963      	cbnz	r3, 801b768 <_dtoa_r+0xb0>
 801b74e:	4b9b      	ldr	r3, [pc, #620]	; (801b9bc <_dtoa_r+0x304>)
 801b750:	e024      	b.n	801b79c <_dtoa_r+0xe4>
 801b752:	4b9b      	ldr	r3, [pc, #620]	; (801b9c0 <_dtoa_r+0x308>)
 801b754:	9300      	str	r3, [sp, #0]
 801b756:	3308      	adds	r3, #8
 801b758:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b75a:	6013      	str	r3, [r2, #0]
 801b75c:	9800      	ldr	r0, [sp, #0]
 801b75e:	b015      	add	sp, #84	; 0x54
 801b760:	ecbd 8b02 	vpop	{d8}
 801b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b768:	4b94      	ldr	r3, [pc, #592]	; (801b9bc <_dtoa_r+0x304>)
 801b76a:	9300      	str	r3, [sp, #0]
 801b76c:	3303      	adds	r3, #3
 801b76e:	e7f3      	b.n	801b758 <_dtoa_r+0xa0>
 801b770:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b774:	2200      	movs	r2, #0
 801b776:	ec51 0b17 	vmov	r0, r1, d7
 801b77a:	2300      	movs	r3, #0
 801b77c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801b780:	f7e5 f9c2 	bl	8000b08 <__aeabi_dcmpeq>
 801b784:	4680      	mov	r8, r0
 801b786:	b158      	cbz	r0, 801b7a0 <_dtoa_r+0xe8>
 801b788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b78a:	2301      	movs	r3, #1
 801b78c:	6013      	str	r3, [r2, #0]
 801b78e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b790:	2b00      	cmp	r3, #0
 801b792:	f000 8551 	beq.w	801c238 <_dtoa_r+0xb80>
 801b796:	488b      	ldr	r0, [pc, #556]	; (801b9c4 <_dtoa_r+0x30c>)
 801b798:	6018      	str	r0, [r3, #0]
 801b79a:	1e43      	subs	r3, r0, #1
 801b79c:	9300      	str	r3, [sp, #0]
 801b79e:	e7dd      	b.n	801b75c <_dtoa_r+0xa4>
 801b7a0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b7a4:	aa12      	add	r2, sp, #72	; 0x48
 801b7a6:	a913      	add	r1, sp, #76	; 0x4c
 801b7a8:	4620      	mov	r0, r4
 801b7aa:	f001 ff2f 	bl	801d60c <__d2b>
 801b7ae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b7b2:	4683      	mov	fp, r0
 801b7b4:	2d00      	cmp	r5, #0
 801b7b6:	d07c      	beq.n	801b8b2 <_dtoa_r+0x1fa>
 801b7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b7ba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b7be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b7c2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801b7c6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b7ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b7ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b7d2:	4b7d      	ldr	r3, [pc, #500]	; (801b9c8 <_dtoa_r+0x310>)
 801b7d4:	2200      	movs	r2, #0
 801b7d6:	4630      	mov	r0, r6
 801b7d8:	4639      	mov	r1, r7
 801b7da:	f7e4 fd75 	bl	80002c8 <__aeabi_dsub>
 801b7de:	a36e      	add	r3, pc, #440	; (adr r3, 801b998 <_dtoa_r+0x2e0>)
 801b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e4:	f7e4 ff28 	bl	8000638 <__aeabi_dmul>
 801b7e8:	a36d      	add	r3, pc, #436	; (adr r3, 801b9a0 <_dtoa_r+0x2e8>)
 801b7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ee:	f7e4 fd6d 	bl	80002cc <__adddf3>
 801b7f2:	4606      	mov	r6, r0
 801b7f4:	4628      	mov	r0, r5
 801b7f6:	460f      	mov	r7, r1
 801b7f8:	f7e4 feb4 	bl	8000564 <__aeabi_i2d>
 801b7fc:	a36a      	add	r3, pc, #424	; (adr r3, 801b9a8 <_dtoa_r+0x2f0>)
 801b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b802:	f7e4 ff19 	bl	8000638 <__aeabi_dmul>
 801b806:	4602      	mov	r2, r0
 801b808:	460b      	mov	r3, r1
 801b80a:	4630      	mov	r0, r6
 801b80c:	4639      	mov	r1, r7
 801b80e:	f7e4 fd5d 	bl	80002cc <__adddf3>
 801b812:	4606      	mov	r6, r0
 801b814:	460f      	mov	r7, r1
 801b816:	f7e5 f9bf 	bl	8000b98 <__aeabi_d2iz>
 801b81a:	2200      	movs	r2, #0
 801b81c:	4682      	mov	sl, r0
 801b81e:	2300      	movs	r3, #0
 801b820:	4630      	mov	r0, r6
 801b822:	4639      	mov	r1, r7
 801b824:	f7e5 f97a 	bl	8000b1c <__aeabi_dcmplt>
 801b828:	b148      	cbz	r0, 801b83e <_dtoa_r+0x186>
 801b82a:	4650      	mov	r0, sl
 801b82c:	f7e4 fe9a 	bl	8000564 <__aeabi_i2d>
 801b830:	4632      	mov	r2, r6
 801b832:	463b      	mov	r3, r7
 801b834:	f7e5 f968 	bl	8000b08 <__aeabi_dcmpeq>
 801b838:	b908      	cbnz	r0, 801b83e <_dtoa_r+0x186>
 801b83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b83e:	f1ba 0f16 	cmp.w	sl, #22
 801b842:	d854      	bhi.n	801b8ee <_dtoa_r+0x236>
 801b844:	4b61      	ldr	r3, [pc, #388]	; (801b9cc <_dtoa_r+0x314>)
 801b846:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b84e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b852:	f7e5 f963 	bl	8000b1c <__aeabi_dcmplt>
 801b856:	2800      	cmp	r0, #0
 801b858:	d04b      	beq.n	801b8f2 <_dtoa_r+0x23a>
 801b85a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b85e:	2300      	movs	r3, #0
 801b860:	930e      	str	r3, [sp, #56]	; 0x38
 801b862:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b864:	1b5d      	subs	r5, r3, r5
 801b866:	1e6b      	subs	r3, r5, #1
 801b868:	9304      	str	r3, [sp, #16]
 801b86a:	bf43      	ittte	mi
 801b86c:	2300      	movmi	r3, #0
 801b86e:	f1c5 0801 	rsbmi	r8, r5, #1
 801b872:	9304      	strmi	r3, [sp, #16]
 801b874:	f04f 0800 	movpl.w	r8, #0
 801b878:	f1ba 0f00 	cmp.w	sl, #0
 801b87c:	db3b      	blt.n	801b8f6 <_dtoa_r+0x23e>
 801b87e:	9b04      	ldr	r3, [sp, #16]
 801b880:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b884:	4453      	add	r3, sl
 801b886:	9304      	str	r3, [sp, #16]
 801b888:	2300      	movs	r3, #0
 801b88a:	9306      	str	r3, [sp, #24]
 801b88c:	9b05      	ldr	r3, [sp, #20]
 801b88e:	2b09      	cmp	r3, #9
 801b890:	d869      	bhi.n	801b966 <_dtoa_r+0x2ae>
 801b892:	2b05      	cmp	r3, #5
 801b894:	bfc4      	itt	gt
 801b896:	3b04      	subgt	r3, #4
 801b898:	9305      	strgt	r3, [sp, #20]
 801b89a:	9b05      	ldr	r3, [sp, #20]
 801b89c:	f1a3 0302 	sub.w	r3, r3, #2
 801b8a0:	bfcc      	ite	gt
 801b8a2:	2500      	movgt	r5, #0
 801b8a4:	2501      	movle	r5, #1
 801b8a6:	2b03      	cmp	r3, #3
 801b8a8:	d869      	bhi.n	801b97e <_dtoa_r+0x2c6>
 801b8aa:	e8df f003 	tbb	[pc, r3]
 801b8ae:	4e2c      	.short	0x4e2c
 801b8b0:	5a4c      	.short	0x5a4c
 801b8b2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801b8b6:	441d      	add	r5, r3
 801b8b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b8bc:	2b20      	cmp	r3, #32
 801b8be:	bfc1      	itttt	gt
 801b8c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b8c4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b8c8:	fa09 f303 	lslgt.w	r3, r9, r3
 801b8cc:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b8d0:	bfda      	itte	le
 801b8d2:	f1c3 0320 	rsble	r3, r3, #32
 801b8d6:	fa06 f003 	lslle.w	r0, r6, r3
 801b8da:	4318      	orrgt	r0, r3
 801b8dc:	f7e4 fe32 	bl	8000544 <__aeabi_ui2d>
 801b8e0:	2301      	movs	r3, #1
 801b8e2:	4606      	mov	r6, r0
 801b8e4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b8e8:	3d01      	subs	r5, #1
 801b8ea:	9310      	str	r3, [sp, #64]	; 0x40
 801b8ec:	e771      	b.n	801b7d2 <_dtoa_r+0x11a>
 801b8ee:	2301      	movs	r3, #1
 801b8f0:	e7b6      	b.n	801b860 <_dtoa_r+0x1a8>
 801b8f2:	900e      	str	r0, [sp, #56]	; 0x38
 801b8f4:	e7b5      	b.n	801b862 <_dtoa_r+0x1aa>
 801b8f6:	f1ca 0300 	rsb	r3, sl, #0
 801b8fa:	9306      	str	r3, [sp, #24]
 801b8fc:	2300      	movs	r3, #0
 801b8fe:	eba8 080a 	sub.w	r8, r8, sl
 801b902:	930d      	str	r3, [sp, #52]	; 0x34
 801b904:	e7c2      	b.n	801b88c <_dtoa_r+0x1d4>
 801b906:	2300      	movs	r3, #0
 801b908:	9308      	str	r3, [sp, #32]
 801b90a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	dc39      	bgt.n	801b984 <_dtoa_r+0x2cc>
 801b910:	f04f 0901 	mov.w	r9, #1
 801b914:	f8cd 9004 	str.w	r9, [sp, #4]
 801b918:	464b      	mov	r3, r9
 801b91a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b91e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b920:	2200      	movs	r2, #0
 801b922:	6042      	str	r2, [r0, #4]
 801b924:	2204      	movs	r2, #4
 801b926:	f102 0614 	add.w	r6, r2, #20
 801b92a:	429e      	cmp	r6, r3
 801b92c:	6841      	ldr	r1, [r0, #4]
 801b92e:	d92f      	bls.n	801b990 <_dtoa_r+0x2d8>
 801b930:	4620      	mov	r0, r4
 801b932:	f001 fa83 	bl	801ce3c <_Balloc>
 801b936:	9000      	str	r0, [sp, #0]
 801b938:	2800      	cmp	r0, #0
 801b93a:	d14b      	bne.n	801b9d4 <_dtoa_r+0x31c>
 801b93c:	4b24      	ldr	r3, [pc, #144]	; (801b9d0 <_dtoa_r+0x318>)
 801b93e:	4602      	mov	r2, r0
 801b940:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b944:	e6d1      	b.n	801b6ea <_dtoa_r+0x32>
 801b946:	2301      	movs	r3, #1
 801b948:	e7de      	b.n	801b908 <_dtoa_r+0x250>
 801b94a:	2300      	movs	r3, #0
 801b94c:	9308      	str	r3, [sp, #32]
 801b94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b950:	eb0a 0903 	add.w	r9, sl, r3
 801b954:	f109 0301 	add.w	r3, r9, #1
 801b958:	2b01      	cmp	r3, #1
 801b95a:	9301      	str	r3, [sp, #4]
 801b95c:	bfb8      	it	lt
 801b95e:	2301      	movlt	r3, #1
 801b960:	e7dd      	b.n	801b91e <_dtoa_r+0x266>
 801b962:	2301      	movs	r3, #1
 801b964:	e7f2      	b.n	801b94c <_dtoa_r+0x294>
 801b966:	2501      	movs	r5, #1
 801b968:	2300      	movs	r3, #0
 801b96a:	9305      	str	r3, [sp, #20]
 801b96c:	9508      	str	r5, [sp, #32]
 801b96e:	f04f 39ff 	mov.w	r9, #4294967295
 801b972:	2200      	movs	r2, #0
 801b974:	f8cd 9004 	str.w	r9, [sp, #4]
 801b978:	2312      	movs	r3, #18
 801b97a:	9209      	str	r2, [sp, #36]	; 0x24
 801b97c:	e7cf      	b.n	801b91e <_dtoa_r+0x266>
 801b97e:	2301      	movs	r3, #1
 801b980:	9308      	str	r3, [sp, #32]
 801b982:	e7f4      	b.n	801b96e <_dtoa_r+0x2b6>
 801b984:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b988:	f8cd 9004 	str.w	r9, [sp, #4]
 801b98c:	464b      	mov	r3, r9
 801b98e:	e7c6      	b.n	801b91e <_dtoa_r+0x266>
 801b990:	3101      	adds	r1, #1
 801b992:	6041      	str	r1, [r0, #4]
 801b994:	0052      	lsls	r2, r2, #1
 801b996:	e7c6      	b.n	801b926 <_dtoa_r+0x26e>
 801b998:	636f4361 	.word	0x636f4361
 801b99c:	3fd287a7 	.word	0x3fd287a7
 801b9a0:	8b60c8b3 	.word	0x8b60c8b3
 801b9a4:	3fc68a28 	.word	0x3fc68a28
 801b9a8:	509f79fb 	.word	0x509f79fb
 801b9ac:	3fd34413 	.word	0x3fd34413
 801b9b0:	080225e7 	.word	0x080225e7
 801b9b4:	080226f9 	.word	0x080226f9
 801b9b8:	7ff00000 	.word	0x7ff00000
 801b9bc:	080226f5 	.word	0x080226f5
 801b9c0:	080226ec 	.word	0x080226ec
 801b9c4:	080229c2 	.word	0x080229c2
 801b9c8:	3ff80000 	.word	0x3ff80000
 801b9cc:	080228d8 	.word	0x080228d8
 801b9d0:	08022758 	.word	0x08022758
 801b9d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b9d6:	9a00      	ldr	r2, [sp, #0]
 801b9d8:	601a      	str	r2, [r3, #0]
 801b9da:	9b01      	ldr	r3, [sp, #4]
 801b9dc:	2b0e      	cmp	r3, #14
 801b9de:	f200 80ad 	bhi.w	801bb3c <_dtoa_r+0x484>
 801b9e2:	2d00      	cmp	r5, #0
 801b9e4:	f000 80aa 	beq.w	801bb3c <_dtoa_r+0x484>
 801b9e8:	f1ba 0f00 	cmp.w	sl, #0
 801b9ec:	dd36      	ble.n	801ba5c <_dtoa_r+0x3a4>
 801b9ee:	4ac3      	ldr	r2, [pc, #780]	; (801bcfc <_dtoa_r+0x644>)
 801b9f0:	f00a 030f 	and.w	r3, sl, #15
 801b9f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b9f8:	ed93 7b00 	vldr	d7, [r3]
 801b9fc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801ba00:	ea4f 172a 	mov.w	r7, sl, asr #4
 801ba04:	eeb0 8a47 	vmov.f32	s16, s14
 801ba08:	eef0 8a67 	vmov.f32	s17, s15
 801ba0c:	d016      	beq.n	801ba3c <_dtoa_r+0x384>
 801ba0e:	4bbc      	ldr	r3, [pc, #752]	; (801bd00 <_dtoa_r+0x648>)
 801ba10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ba14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ba18:	f7e4 ff38 	bl	800088c <__aeabi_ddiv>
 801ba1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba20:	f007 070f 	and.w	r7, r7, #15
 801ba24:	2503      	movs	r5, #3
 801ba26:	4eb6      	ldr	r6, [pc, #728]	; (801bd00 <_dtoa_r+0x648>)
 801ba28:	b957      	cbnz	r7, 801ba40 <_dtoa_r+0x388>
 801ba2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba2e:	ec53 2b18 	vmov	r2, r3, d8
 801ba32:	f7e4 ff2b 	bl	800088c <__aeabi_ddiv>
 801ba36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba3a:	e029      	b.n	801ba90 <_dtoa_r+0x3d8>
 801ba3c:	2502      	movs	r5, #2
 801ba3e:	e7f2      	b.n	801ba26 <_dtoa_r+0x36e>
 801ba40:	07f9      	lsls	r1, r7, #31
 801ba42:	d508      	bpl.n	801ba56 <_dtoa_r+0x39e>
 801ba44:	ec51 0b18 	vmov	r0, r1, d8
 801ba48:	e9d6 2300 	ldrd	r2, r3, [r6]
 801ba4c:	f7e4 fdf4 	bl	8000638 <__aeabi_dmul>
 801ba50:	ec41 0b18 	vmov	d8, r0, r1
 801ba54:	3501      	adds	r5, #1
 801ba56:	107f      	asrs	r7, r7, #1
 801ba58:	3608      	adds	r6, #8
 801ba5a:	e7e5      	b.n	801ba28 <_dtoa_r+0x370>
 801ba5c:	f000 80a6 	beq.w	801bbac <_dtoa_r+0x4f4>
 801ba60:	f1ca 0600 	rsb	r6, sl, #0
 801ba64:	4ba5      	ldr	r3, [pc, #660]	; (801bcfc <_dtoa_r+0x644>)
 801ba66:	4fa6      	ldr	r7, [pc, #664]	; (801bd00 <_dtoa_r+0x648>)
 801ba68:	f006 020f 	and.w	r2, r6, #15
 801ba6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ba78:	f7e4 fdde 	bl	8000638 <__aeabi_dmul>
 801ba7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ba80:	1136      	asrs	r6, r6, #4
 801ba82:	2300      	movs	r3, #0
 801ba84:	2502      	movs	r5, #2
 801ba86:	2e00      	cmp	r6, #0
 801ba88:	f040 8085 	bne.w	801bb96 <_dtoa_r+0x4de>
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d1d2      	bne.n	801ba36 <_dtoa_r+0x37e>
 801ba90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba92:	2b00      	cmp	r3, #0
 801ba94:	f000 808c 	beq.w	801bbb0 <_dtoa_r+0x4f8>
 801ba98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801ba9c:	4b99      	ldr	r3, [pc, #612]	; (801bd04 <_dtoa_r+0x64c>)
 801ba9e:	2200      	movs	r2, #0
 801baa0:	4630      	mov	r0, r6
 801baa2:	4639      	mov	r1, r7
 801baa4:	f7e5 f83a 	bl	8000b1c <__aeabi_dcmplt>
 801baa8:	2800      	cmp	r0, #0
 801baaa:	f000 8081 	beq.w	801bbb0 <_dtoa_r+0x4f8>
 801baae:	9b01      	ldr	r3, [sp, #4]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d07d      	beq.n	801bbb0 <_dtoa_r+0x4f8>
 801bab4:	f1b9 0f00 	cmp.w	r9, #0
 801bab8:	dd3c      	ble.n	801bb34 <_dtoa_r+0x47c>
 801baba:	f10a 33ff 	add.w	r3, sl, #4294967295
 801babe:	9307      	str	r3, [sp, #28]
 801bac0:	2200      	movs	r2, #0
 801bac2:	4b91      	ldr	r3, [pc, #580]	; (801bd08 <_dtoa_r+0x650>)
 801bac4:	4630      	mov	r0, r6
 801bac6:	4639      	mov	r1, r7
 801bac8:	f7e4 fdb6 	bl	8000638 <__aeabi_dmul>
 801bacc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bad0:	3501      	adds	r5, #1
 801bad2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801bad6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bada:	4628      	mov	r0, r5
 801badc:	f7e4 fd42 	bl	8000564 <__aeabi_i2d>
 801bae0:	4632      	mov	r2, r6
 801bae2:	463b      	mov	r3, r7
 801bae4:	f7e4 fda8 	bl	8000638 <__aeabi_dmul>
 801bae8:	4b88      	ldr	r3, [pc, #544]	; (801bd0c <_dtoa_r+0x654>)
 801baea:	2200      	movs	r2, #0
 801baec:	f7e4 fbee 	bl	80002cc <__adddf3>
 801baf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801baf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801baf8:	9303      	str	r3, [sp, #12]
 801bafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d15c      	bne.n	801bbba <_dtoa_r+0x502>
 801bb00:	4b83      	ldr	r3, [pc, #524]	; (801bd10 <_dtoa_r+0x658>)
 801bb02:	2200      	movs	r2, #0
 801bb04:	4630      	mov	r0, r6
 801bb06:	4639      	mov	r1, r7
 801bb08:	f7e4 fbde 	bl	80002c8 <__aeabi_dsub>
 801bb0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb10:	4606      	mov	r6, r0
 801bb12:	460f      	mov	r7, r1
 801bb14:	f7e5 f820 	bl	8000b58 <__aeabi_dcmpgt>
 801bb18:	2800      	cmp	r0, #0
 801bb1a:	f040 8296 	bne.w	801c04a <_dtoa_r+0x992>
 801bb1e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801bb22:	4630      	mov	r0, r6
 801bb24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb28:	4639      	mov	r1, r7
 801bb2a:	f7e4 fff7 	bl	8000b1c <__aeabi_dcmplt>
 801bb2e:	2800      	cmp	r0, #0
 801bb30:	f040 8288 	bne.w	801c044 <_dtoa_r+0x98c>
 801bb34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bb38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bb3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	f2c0 8158 	blt.w	801bdf4 <_dtoa_r+0x73c>
 801bb44:	f1ba 0f0e 	cmp.w	sl, #14
 801bb48:	f300 8154 	bgt.w	801bdf4 <_dtoa_r+0x73c>
 801bb4c:	4b6b      	ldr	r3, [pc, #428]	; (801bcfc <_dtoa_r+0x644>)
 801bb4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bb52:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bb56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	f280 80e3 	bge.w	801bd24 <_dtoa_r+0x66c>
 801bb5e:	9b01      	ldr	r3, [sp, #4]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	f300 80df 	bgt.w	801bd24 <_dtoa_r+0x66c>
 801bb66:	f040 826d 	bne.w	801c044 <_dtoa_r+0x98c>
 801bb6a:	4b69      	ldr	r3, [pc, #420]	; (801bd10 <_dtoa_r+0x658>)
 801bb6c:	2200      	movs	r2, #0
 801bb6e:	4640      	mov	r0, r8
 801bb70:	4649      	mov	r1, r9
 801bb72:	f7e4 fd61 	bl	8000638 <__aeabi_dmul>
 801bb76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb7a:	f7e4 ffe3 	bl	8000b44 <__aeabi_dcmpge>
 801bb7e:	9e01      	ldr	r6, [sp, #4]
 801bb80:	4637      	mov	r7, r6
 801bb82:	2800      	cmp	r0, #0
 801bb84:	f040 8243 	bne.w	801c00e <_dtoa_r+0x956>
 801bb88:	9d00      	ldr	r5, [sp, #0]
 801bb8a:	2331      	movs	r3, #49	; 0x31
 801bb8c:	f805 3b01 	strb.w	r3, [r5], #1
 801bb90:	f10a 0a01 	add.w	sl, sl, #1
 801bb94:	e23f      	b.n	801c016 <_dtoa_r+0x95e>
 801bb96:	07f2      	lsls	r2, r6, #31
 801bb98:	d505      	bpl.n	801bba6 <_dtoa_r+0x4ee>
 801bb9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bb9e:	f7e4 fd4b 	bl	8000638 <__aeabi_dmul>
 801bba2:	3501      	adds	r5, #1
 801bba4:	2301      	movs	r3, #1
 801bba6:	1076      	asrs	r6, r6, #1
 801bba8:	3708      	adds	r7, #8
 801bbaa:	e76c      	b.n	801ba86 <_dtoa_r+0x3ce>
 801bbac:	2502      	movs	r5, #2
 801bbae:	e76f      	b.n	801ba90 <_dtoa_r+0x3d8>
 801bbb0:	9b01      	ldr	r3, [sp, #4]
 801bbb2:	f8cd a01c 	str.w	sl, [sp, #28]
 801bbb6:	930c      	str	r3, [sp, #48]	; 0x30
 801bbb8:	e78d      	b.n	801bad6 <_dtoa_r+0x41e>
 801bbba:	9900      	ldr	r1, [sp, #0]
 801bbbc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801bbbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bbc0:	4b4e      	ldr	r3, [pc, #312]	; (801bcfc <_dtoa_r+0x644>)
 801bbc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bbc6:	4401      	add	r1, r0
 801bbc8:	9102      	str	r1, [sp, #8]
 801bbca:	9908      	ldr	r1, [sp, #32]
 801bbcc:	eeb0 8a47 	vmov.f32	s16, s14
 801bbd0:	eef0 8a67 	vmov.f32	s17, s15
 801bbd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bbd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bbdc:	2900      	cmp	r1, #0
 801bbde:	d045      	beq.n	801bc6c <_dtoa_r+0x5b4>
 801bbe0:	494c      	ldr	r1, [pc, #304]	; (801bd14 <_dtoa_r+0x65c>)
 801bbe2:	2000      	movs	r0, #0
 801bbe4:	f7e4 fe52 	bl	800088c <__aeabi_ddiv>
 801bbe8:	ec53 2b18 	vmov	r2, r3, d8
 801bbec:	f7e4 fb6c 	bl	80002c8 <__aeabi_dsub>
 801bbf0:	9d00      	ldr	r5, [sp, #0]
 801bbf2:	ec41 0b18 	vmov	d8, r0, r1
 801bbf6:	4639      	mov	r1, r7
 801bbf8:	4630      	mov	r0, r6
 801bbfa:	f7e4 ffcd 	bl	8000b98 <__aeabi_d2iz>
 801bbfe:	900c      	str	r0, [sp, #48]	; 0x30
 801bc00:	f7e4 fcb0 	bl	8000564 <__aeabi_i2d>
 801bc04:	4602      	mov	r2, r0
 801bc06:	460b      	mov	r3, r1
 801bc08:	4630      	mov	r0, r6
 801bc0a:	4639      	mov	r1, r7
 801bc0c:	f7e4 fb5c 	bl	80002c8 <__aeabi_dsub>
 801bc10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc12:	3330      	adds	r3, #48	; 0x30
 801bc14:	f805 3b01 	strb.w	r3, [r5], #1
 801bc18:	ec53 2b18 	vmov	r2, r3, d8
 801bc1c:	4606      	mov	r6, r0
 801bc1e:	460f      	mov	r7, r1
 801bc20:	f7e4 ff7c 	bl	8000b1c <__aeabi_dcmplt>
 801bc24:	2800      	cmp	r0, #0
 801bc26:	d165      	bne.n	801bcf4 <_dtoa_r+0x63c>
 801bc28:	4632      	mov	r2, r6
 801bc2a:	463b      	mov	r3, r7
 801bc2c:	4935      	ldr	r1, [pc, #212]	; (801bd04 <_dtoa_r+0x64c>)
 801bc2e:	2000      	movs	r0, #0
 801bc30:	f7e4 fb4a 	bl	80002c8 <__aeabi_dsub>
 801bc34:	ec53 2b18 	vmov	r2, r3, d8
 801bc38:	f7e4 ff70 	bl	8000b1c <__aeabi_dcmplt>
 801bc3c:	2800      	cmp	r0, #0
 801bc3e:	f040 80b9 	bne.w	801bdb4 <_dtoa_r+0x6fc>
 801bc42:	9b02      	ldr	r3, [sp, #8]
 801bc44:	429d      	cmp	r5, r3
 801bc46:	f43f af75 	beq.w	801bb34 <_dtoa_r+0x47c>
 801bc4a:	4b2f      	ldr	r3, [pc, #188]	; (801bd08 <_dtoa_r+0x650>)
 801bc4c:	ec51 0b18 	vmov	r0, r1, d8
 801bc50:	2200      	movs	r2, #0
 801bc52:	f7e4 fcf1 	bl	8000638 <__aeabi_dmul>
 801bc56:	4b2c      	ldr	r3, [pc, #176]	; (801bd08 <_dtoa_r+0x650>)
 801bc58:	ec41 0b18 	vmov	d8, r0, r1
 801bc5c:	2200      	movs	r2, #0
 801bc5e:	4630      	mov	r0, r6
 801bc60:	4639      	mov	r1, r7
 801bc62:	f7e4 fce9 	bl	8000638 <__aeabi_dmul>
 801bc66:	4606      	mov	r6, r0
 801bc68:	460f      	mov	r7, r1
 801bc6a:	e7c4      	b.n	801bbf6 <_dtoa_r+0x53e>
 801bc6c:	ec51 0b17 	vmov	r0, r1, d7
 801bc70:	f7e4 fce2 	bl	8000638 <__aeabi_dmul>
 801bc74:	9b02      	ldr	r3, [sp, #8]
 801bc76:	9d00      	ldr	r5, [sp, #0]
 801bc78:	930c      	str	r3, [sp, #48]	; 0x30
 801bc7a:	ec41 0b18 	vmov	d8, r0, r1
 801bc7e:	4639      	mov	r1, r7
 801bc80:	4630      	mov	r0, r6
 801bc82:	f7e4 ff89 	bl	8000b98 <__aeabi_d2iz>
 801bc86:	9011      	str	r0, [sp, #68]	; 0x44
 801bc88:	f7e4 fc6c 	bl	8000564 <__aeabi_i2d>
 801bc8c:	4602      	mov	r2, r0
 801bc8e:	460b      	mov	r3, r1
 801bc90:	4630      	mov	r0, r6
 801bc92:	4639      	mov	r1, r7
 801bc94:	f7e4 fb18 	bl	80002c8 <__aeabi_dsub>
 801bc98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc9a:	3330      	adds	r3, #48	; 0x30
 801bc9c:	f805 3b01 	strb.w	r3, [r5], #1
 801bca0:	9b02      	ldr	r3, [sp, #8]
 801bca2:	429d      	cmp	r5, r3
 801bca4:	4606      	mov	r6, r0
 801bca6:	460f      	mov	r7, r1
 801bca8:	f04f 0200 	mov.w	r2, #0
 801bcac:	d134      	bne.n	801bd18 <_dtoa_r+0x660>
 801bcae:	4b19      	ldr	r3, [pc, #100]	; (801bd14 <_dtoa_r+0x65c>)
 801bcb0:	ec51 0b18 	vmov	r0, r1, d8
 801bcb4:	f7e4 fb0a 	bl	80002cc <__adddf3>
 801bcb8:	4602      	mov	r2, r0
 801bcba:	460b      	mov	r3, r1
 801bcbc:	4630      	mov	r0, r6
 801bcbe:	4639      	mov	r1, r7
 801bcc0:	f7e4 ff4a 	bl	8000b58 <__aeabi_dcmpgt>
 801bcc4:	2800      	cmp	r0, #0
 801bcc6:	d175      	bne.n	801bdb4 <_dtoa_r+0x6fc>
 801bcc8:	ec53 2b18 	vmov	r2, r3, d8
 801bccc:	4911      	ldr	r1, [pc, #68]	; (801bd14 <_dtoa_r+0x65c>)
 801bcce:	2000      	movs	r0, #0
 801bcd0:	f7e4 fafa 	bl	80002c8 <__aeabi_dsub>
 801bcd4:	4602      	mov	r2, r0
 801bcd6:	460b      	mov	r3, r1
 801bcd8:	4630      	mov	r0, r6
 801bcda:	4639      	mov	r1, r7
 801bcdc:	f7e4 ff1e 	bl	8000b1c <__aeabi_dcmplt>
 801bce0:	2800      	cmp	r0, #0
 801bce2:	f43f af27 	beq.w	801bb34 <_dtoa_r+0x47c>
 801bce6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801bce8:	1e6b      	subs	r3, r5, #1
 801bcea:	930c      	str	r3, [sp, #48]	; 0x30
 801bcec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bcf0:	2b30      	cmp	r3, #48	; 0x30
 801bcf2:	d0f8      	beq.n	801bce6 <_dtoa_r+0x62e>
 801bcf4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801bcf8:	e04a      	b.n	801bd90 <_dtoa_r+0x6d8>
 801bcfa:	bf00      	nop
 801bcfc:	080228d8 	.word	0x080228d8
 801bd00:	080228b0 	.word	0x080228b0
 801bd04:	3ff00000 	.word	0x3ff00000
 801bd08:	40240000 	.word	0x40240000
 801bd0c:	401c0000 	.word	0x401c0000
 801bd10:	40140000 	.word	0x40140000
 801bd14:	3fe00000 	.word	0x3fe00000
 801bd18:	4baf      	ldr	r3, [pc, #700]	; (801bfd8 <_dtoa_r+0x920>)
 801bd1a:	f7e4 fc8d 	bl	8000638 <__aeabi_dmul>
 801bd1e:	4606      	mov	r6, r0
 801bd20:	460f      	mov	r7, r1
 801bd22:	e7ac      	b.n	801bc7e <_dtoa_r+0x5c6>
 801bd24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bd28:	9d00      	ldr	r5, [sp, #0]
 801bd2a:	4642      	mov	r2, r8
 801bd2c:	464b      	mov	r3, r9
 801bd2e:	4630      	mov	r0, r6
 801bd30:	4639      	mov	r1, r7
 801bd32:	f7e4 fdab 	bl	800088c <__aeabi_ddiv>
 801bd36:	f7e4 ff2f 	bl	8000b98 <__aeabi_d2iz>
 801bd3a:	9002      	str	r0, [sp, #8]
 801bd3c:	f7e4 fc12 	bl	8000564 <__aeabi_i2d>
 801bd40:	4642      	mov	r2, r8
 801bd42:	464b      	mov	r3, r9
 801bd44:	f7e4 fc78 	bl	8000638 <__aeabi_dmul>
 801bd48:	4602      	mov	r2, r0
 801bd4a:	460b      	mov	r3, r1
 801bd4c:	4630      	mov	r0, r6
 801bd4e:	4639      	mov	r1, r7
 801bd50:	f7e4 faba 	bl	80002c8 <__aeabi_dsub>
 801bd54:	9e02      	ldr	r6, [sp, #8]
 801bd56:	9f01      	ldr	r7, [sp, #4]
 801bd58:	3630      	adds	r6, #48	; 0x30
 801bd5a:	f805 6b01 	strb.w	r6, [r5], #1
 801bd5e:	9e00      	ldr	r6, [sp, #0]
 801bd60:	1bae      	subs	r6, r5, r6
 801bd62:	42b7      	cmp	r7, r6
 801bd64:	4602      	mov	r2, r0
 801bd66:	460b      	mov	r3, r1
 801bd68:	d137      	bne.n	801bdda <_dtoa_r+0x722>
 801bd6a:	f7e4 faaf 	bl	80002cc <__adddf3>
 801bd6e:	4642      	mov	r2, r8
 801bd70:	464b      	mov	r3, r9
 801bd72:	4606      	mov	r6, r0
 801bd74:	460f      	mov	r7, r1
 801bd76:	f7e4 feef 	bl	8000b58 <__aeabi_dcmpgt>
 801bd7a:	b9c8      	cbnz	r0, 801bdb0 <_dtoa_r+0x6f8>
 801bd7c:	4642      	mov	r2, r8
 801bd7e:	464b      	mov	r3, r9
 801bd80:	4630      	mov	r0, r6
 801bd82:	4639      	mov	r1, r7
 801bd84:	f7e4 fec0 	bl	8000b08 <__aeabi_dcmpeq>
 801bd88:	b110      	cbz	r0, 801bd90 <_dtoa_r+0x6d8>
 801bd8a:	9b02      	ldr	r3, [sp, #8]
 801bd8c:	07d9      	lsls	r1, r3, #31
 801bd8e:	d40f      	bmi.n	801bdb0 <_dtoa_r+0x6f8>
 801bd90:	4620      	mov	r0, r4
 801bd92:	4659      	mov	r1, fp
 801bd94:	f001 f892 	bl	801cebc <_Bfree>
 801bd98:	2300      	movs	r3, #0
 801bd9a:	702b      	strb	r3, [r5, #0]
 801bd9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bd9e:	f10a 0001 	add.w	r0, sl, #1
 801bda2:	6018      	str	r0, [r3, #0]
 801bda4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	f43f acd8 	beq.w	801b75c <_dtoa_r+0xa4>
 801bdac:	601d      	str	r5, [r3, #0]
 801bdae:	e4d5      	b.n	801b75c <_dtoa_r+0xa4>
 801bdb0:	f8cd a01c 	str.w	sl, [sp, #28]
 801bdb4:	462b      	mov	r3, r5
 801bdb6:	461d      	mov	r5, r3
 801bdb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bdbc:	2a39      	cmp	r2, #57	; 0x39
 801bdbe:	d108      	bne.n	801bdd2 <_dtoa_r+0x71a>
 801bdc0:	9a00      	ldr	r2, [sp, #0]
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	d1f7      	bne.n	801bdb6 <_dtoa_r+0x6fe>
 801bdc6:	9a07      	ldr	r2, [sp, #28]
 801bdc8:	9900      	ldr	r1, [sp, #0]
 801bdca:	3201      	adds	r2, #1
 801bdcc:	9207      	str	r2, [sp, #28]
 801bdce:	2230      	movs	r2, #48	; 0x30
 801bdd0:	700a      	strb	r2, [r1, #0]
 801bdd2:	781a      	ldrb	r2, [r3, #0]
 801bdd4:	3201      	adds	r2, #1
 801bdd6:	701a      	strb	r2, [r3, #0]
 801bdd8:	e78c      	b.n	801bcf4 <_dtoa_r+0x63c>
 801bdda:	4b7f      	ldr	r3, [pc, #508]	; (801bfd8 <_dtoa_r+0x920>)
 801bddc:	2200      	movs	r2, #0
 801bdde:	f7e4 fc2b 	bl	8000638 <__aeabi_dmul>
 801bde2:	2200      	movs	r2, #0
 801bde4:	2300      	movs	r3, #0
 801bde6:	4606      	mov	r6, r0
 801bde8:	460f      	mov	r7, r1
 801bdea:	f7e4 fe8d 	bl	8000b08 <__aeabi_dcmpeq>
 801bdee:	2800      	cmp	r0, #0
 801bdf0:	d09b      	beq.n	801bd2a <_dtoa_r+0x672>
 801bdf2:	e7cd      	b.n	801bd90 <_dtoa_r+0x6d8>
 801bdf4:	9a08      	ldr	r2, [sp, #32]
 801bdf6:	2a00      	cmp	r2, #0
 801bdf8:	f000 80c4 	beq.w	801bf84 <_dtoa_r+0x8cc>
 801bdfc:	9a05      	ldr	r2, [sp, #20]
 801bdfe:	2a01      	cmp	r2, #1
 801be00:	f300 80a8 	bgt.w	801bf54 <_dtoa_r+0x89c>
 801be04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801be06:	2a00      	cmp	r2, #0
 801be08:	f000 80a0 	beq.w	801bf4c <_dtoa_r+0x894>
 801be0c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801be10:	9e06      	ldr	r6, [sp, #24]
 801be12:	4645      	mov	r5, r8
 801be14:	9a04      	ldr	r2, [sp, #16]
 801be16:	2101      	movs	r1, #1
 801be18:	441a      	add	r2, r3
 801be1a:	4620      	mov	r0, r4
 801be1c:	4498      	add	r8, r3
 801be1e:	9204      	str	r2, [sp, #16]
 801be20:	f001 f952 	bl	801d0c8 <__i2b>
 801be24:	4607      	mov	r7, r0
 801be26:	2d00      	cmp	r5, #0
 801be28:	dd0b      	ble.n	801be42 <_dtoa_r+0x78a>
 801be2a:	9b04      	ldr	r3, [sp, #16]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	dd08      	ble.n	801be42 <_dtoa_r+0x78a>
 801be30:	42ab      	cmp	r3, r5
 801be32:	9a04      	ldr	r2, [sp, #16]
 801be34:	bfa8      	it	ge
 801be36:	462b      	movge	r3, r5
 801be38:	eba8 0803 	sub.w	r8, r8, r3
 801be3c:	1aed      	subs	r5, r5, r3
 801be3e:	1ad3      	subs	r3, r2, r3
 801be40:	9304      	str	r3, [sp, #16]
 801be42:	9b06      	ldr	r3, [sp, #24]
 801be44:	b1fb      	cbz	r3, 801be86 <_dtoa_r+0x7ce>
 801be46:	9b08      	ldr	r3, [sp, #32]
 801be48:	2b00      	cmp	r3, #0
 801be4a:	f000 809f 	beq.w	801bf8c <_dtoa_r+0x8d4>
 801be4e:	2e00      	cmp	r6, #0
 801be50:	dd11      	ble.n	801be76 <_dtoa_r+0x7be>
 801be52:	4639      	mov	r1, r7
 801be54:	4632      	mov	r2, r6
 801be56:	4620      	mov	r0, r4
 801be58:	f001 f9f2 	bl	801d240 <__pow5mult>
 801be5c:	465a      	mov	r2, fp
 801be5e:	4601      	mov	r1, r0
 801be60:	4607      	mov	r7, r0
 801be62:	4620      	mov	r0, r4
 801be64:	f001 f946 	bl	801d0f4 <__multiply>
 801be68:	4659      	mov	r1, fp
 801be6a:	9007      	str	r0, [sp, #28]
 801be6c:	4620      	mov	r0, r4
 801be6e:	f001 f825 	bl	801cebc <_Bfree>
 801be72:	9b07      	ldr	r3, [sp, #28]
 801be74:	469b      	mov	fp, r3
 801be76:	9b06      	ldr	r3, [sp, #24]
 801be78:	1b9a      	subs	r2, r3, r6
 801be7a:	d004      	beq.n	801be86 <_dtoa_r+0x7ce>
 801be7c:	4659      	mov	r1, fp
 801be7e:	4620      	mov	r0, r4
 801be80:	f001 f9de 	bl	801d240 <__pow5mult>
 801be84:	4683      	mov	fp, r0
 801be86:	2101      	movs	r1, #1
 801be88:	4620      	mov	r0, r4
 801be8a:	f001 f91d 	bl	801d0c8 <__i2b>
 801be8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801be90:	2b00      	cmp	r3, #0
 801be92:	4606      	mov	r6, r0
 801be94:	dd7c      	ble.n	801bf90 <_dtoa_r+0x8d8>
 801be96:	461a      	mov	r2, r3
 801be98:	4601      	mov	r1, r0
 801be9a:	4620      	mov	r0, r4
 801be9c:	f001 f9d0 	bl	801d240 <__pow5mult>
 801bea0:	9b05      	ldr	r3, [sp, #20]
 801bea2:	2b01      	cmp	r3, #1
 801bea4:	4606      	mov	r6, r0
 801bea6:	dd76      	ble.n	801bf96 <_dtoa_r+0x8de>
 801bea8:	2300      	movs	r3, #0
 801beaa:	9306      	str	r3, [sp, #24]
 801beac:	6933      	ldr	r3, [r6, #16]
 801beae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801beb2:	6918      	ldr	r0, [r3, #16]
 801beb4:	f001 f8b8 	bl	801d028 <__hi0bits>
 801beb8:	f1c0 0020 	rsb	r0, r0, #32
 801bebc:	9b04      	ldr	r3, [sp, #16]
 801bebe:	4418      	add	r0, r3
 801bec0:	f010 001f 	ands.w	r0, r0, #31
 801bec4:	f000 8086 	beq.w	801bfd4 <_dtoa_r+0x91c>
 801bec8:	f1c0 0320 	rsb	r3, r0, #32
 801becc:	2b04      	cmp	r3, #4
 801bece:	dd7f      	ble.n	801bfd0 <_dtoa_r+0x918>
 801bed0:	f1c0 001c 	rsb	r0, r0, #28
 801bed4:	9b04      	ldr	r3, [sp, #16]
 801bed6:	4403      	add	r3, r0
 801bed8:	4480      	add	r8, r0
 801beda:	4405      	add	r5, r0
 801bedc:	9304      	str	r3, [sp, #16]
 801bede:	f1b8 0f00 	cmp.w	r8, #0
 801bee2:	dd05      	ble.n	801bef0 <_dtoa_r+0x838>
 801bee4:	4659      	mov	r1, fp
 801bee6:	4642      	mov	r2, r8
 801bee8:	4620      	mov	r0, r4
 801beea:	f001 fa03 	bl	801d2f4 <__lshift>
 801beee:	4683      	mov	fp, r0
 801bef0:	9b04      	ldr	r3, [sp, #16]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	dd05      	ble.n	801bf02 <_dtoa_r+0x84a>
 801bef6:	4631      	mov	r1, r6
 801bef8:	461a      	mov	r2, r3
 801befa:	4620      	mov	r0, r4
 801befc:	f001 f9fa 	bl	801d2f4 <__lshift>
 801bf00:	4606      	mov	r6, r0
 801bf02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d069      	beq.n	801bfdc <_dtoa_r+0x924>
 801bf08:	4631      	mov	r1, r6
 801bf0a:	4658      	mov	r0, fp
 801bf0c:	f001 fa5e 	bl	801d3cc <__mcmp>
 801bf10:	2800      	cmp	r0, #0
 801bf12:	da63      	bge.n	801bfdc <_dtoa_r+0x924>
 801bf14:	2300      	movs	r3, #0
 801bf16:	4659      	mov	r1, fp
 801bf18:	220a      	movs	r2, #10
 801bf1a:	4620      	mov	r0, r4
 801bf1c:	f000 fff0 	bl	801cf00 <__multadd>
 801bf20:	9b08      	ldr	r3, [sp, #32]
 801bf22:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bf26:	4683      	mov	fp, r0
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	f000 818f 	beq.w	801c24c <_dtoa_r+0xb94>
 801bf2e:	4639      	mov	r1, r7
 801bf30:	2300      	movs	r3, #0
 801bf32:	220a      	movs	r2, #10
 801bf34:	4620      	mov	r0, r4
 801bf36:	f000 ffe3 	bl	801cf00 <__multadd>
 801bf3a:	f1b9 0f00 	cmp.w	r9, #0
 801bf3e:	4607      	mov	r7, r0
 801bf40:	f300 808e 	bgt.w	801c060 <_dtoa_r+0x9a8>
 801bf44:	9b05      	ldr	r3, [sp, #20]
 801bf46:	2b02      	cmp	r3, #2
 801bf48:	dc50      	bgt.n	801bfec <_dtoa_r+0x934>
 801bf4a:	e089      	b.n	801c060 <_dtoa_r+0x9a8>
 801bf4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bf4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bf52:	e75d      	b.n	801be10 <_dtoa_r+0x758>
 801bf54:	9b01      	ldr	r3, [sp, #4]
 801bf56:	1e5e      	subs	r6, r3, #1
 801bf58:	9b06      	ldr	r3, [sp, #24]
 801bf5a:	42b3      	cmp	r3, r6
 801bf5c:	bfbf      	itttt	lt
 801bf5e:	9b06      	ldrlt	r3, [sp, #24]
 801bf60:	9606      	strlt	r6, [sp, #24]
 801bf62:	1af2      	sublt	r2, r6, r3
 801bf64:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801bf66:	bfb6      	itet	lt
 801bf68:	189b      	addlt	r3, r3, r2
 801bf6a:	1b9e      	subge	r6, r3, r6
 801bf6c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801bf6e:	9b01      	ldr	r3, [sp, #4]
 801bf70:	bfb8      	it	lt
 801bf72:	2600      	movlt	r6, #0
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	bfb5      	itete	lt
 801bf78:	eba8 0503 	sublt.w	r5, r8, r3
 801bf7c:	9b01      	ldrge	r3, [sp, #4]
 801bf7e:	2300      	movlt	r3, #0
 801bf80:	4645      	movge	r5, r8
 801bf82:	e747      	b.n	801be14 <_dtoa_r+0x75c>
 801bf84:	9e06      	ldr	r6, [sp, #24]
 801bf86:	9f08      	ldr	r7, [sp, #32]
 801bf88:	4645      	mov	r5, r8
 801bf8a:	e74c      	b.n	801be26 <_dtoa_r+0x76e>
 801bf8c:	9a06      	ldr	r2, [sp, #24]
 801bf8e:	e775      	b.n	801be7c <_dtoa_r+0x7c4>
 801bf90:	9b05      	ldr	r3, [sp, #20]
 801bf92:	2b01      	cmp	r3, #1
 801bf94:	dc18      	bgt.n	801bfc8 <_dtoa_r+0x910>
 801bf96:	9b02      	ldr	r3, [sp, #8]
 801bf98:	b9b3      	cbnz	r3, 801bfc8 <_dtoa_r+0x910>
 801bf9a:	9b03      	ldr	r3, [sp, #12]
 801bf9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bfa0:	b9a3      	cbnz	r3, 801bfcc <_dtoa_r+0x914>
 801bfa2:	9b03      	ldr	r3, [sp, #12]
 801bfa4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bfa8:	0d1b      	lsrs	r3, r3, #20
 801bfaa:	051b      	lsls	r3, r3, #20
 801bfac:	b12b      	cbz	r3, 801bfba <_dtoa_r+0x902>
 801bfae:	9b04      	ldr	r3, [sp, #16]
 801bfb0:	3301      	adds	r3, #1
 801bfb2:	9304      	str	r3, [sp, #16]
 801bfb4:	f108 0801 	add.w	r8, r8, #1
 801bfb8:	2301      	movs	r3, #1
 801bfba:	9306      	str	r3, [sp, #24]
 801bfbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	f47f af74 	bne.w	801beac <_dtoa_r+0x7f4>
 801bfc4:	2001      	movs	r0, #1
 801bfc6:	e779      	b.n	801bebc <_dtoa_r+0x804>
 801bfc8:	2300      	movs	r3, #0
 801bfca:	e7f6      	b.n	801bfba <_dtoa_r+0x902>
 801bfcc:	9b02      	ldr	r3, [sp, #8]
 801bfce:	e7f4      	b.n	801bfba <_dtoa_r+0x902>
 801bfd0:	d085      	beq.n	801bede <_dtoa_r+0x826>
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	301c      	adds	r0, #28
 801bfd6:	e77d      	b.n	801bed4 <_dtoa_r+0x81c>
 801bfd8:	40240000 	.word	0x40240000
 801bfdc:	9b01      	ldr	r3, [sp, #4]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	dc38      	bgt.n	801c054 <_dtoa_r+0x99c>
 801bfe2:	9b05      	ldr	r3, [sp, #20]
 801bfe4:	2b02      	cmp	r3, #2
 801bfe6:	dd35      	ble.n	801c054 <_dtoa_r+0x99c>
 801bfe8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801bfec:	f1b9 0f00 	cmp.w	r9, #0
 801bff0:	d10d      	bne.n	801c00e <_dtoa_r+0x956>
 801bff2:	4631      	mov	r1, r6
 801bff4:	464b      	mov	r3, r9
 801bff6:	2205      	movs	r2, #5
 801bff8:	4620      	mov	r0, r4
 801bffa:	f000 ff81 	bl	801cf00 <__multadd>
 801bffe:	4601      	mov	r1, r0
 801c000:	4606      	mov	r6, r0
 801c002:	4658      	mov	r0, fp
 801c004:	f001 f9e2 	bl	801d3cc <__mcmp>
 801c008:	2800      	cmp	r0, #0
 801c00a:	f73f adbd 	bgt.w	801bb88 <_dtoa_r+0x4d0>
 801c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c010:	9d00      	ldr	r5, [sp, #0]
 801c012:	ea6f 0a03 	mvn.w	sl, r3
 801c016:	f04f 0800 	mov.w	r8, #0
 801c01a:	4631      	mov	r1, r6
 801c01c:	4620      	mov	r0, r4
 801c01e:	f000 ff4d 	bl	801cebc <_Bfree>
 801c022:	2f00      	cmp	r7, #0
 801c024:	f43f aeb4 	beq.w	801bd90 <_dtoa_r+0x6d8>
 801c028:	f1b8 0f00 	cmp.w	r8, #0
 801c02c:	d005      	beq.n	801c03a <_dtoa_r+0x982>
 801c02e:	45b8      	cmp	r8, r7
 801c030:	d003      	beq.n	801c03a <_dtoa_r+0x982>
 801c032:	4641      	mov	r1, r8
 801c034:	4620      	mov	r0, r4
 801c036:	f000 ff41 	bl	801cebc <_Bfree>
 801c03a:	4639      	mov	r1, r7
 801c03c:	4620      	mov	r0, r4
 801c03e:	f000 ff3d 	bl	801cebc <_Bfree>
 801c042:	e6a5      	b.n	801bd90 <_dtoa_r+0x6d8>
 801c044:	2600      	movs	r6, #0
 801c046:	4637      	mov	r7, r6
 801c048:	e7e1      	b.n	801c00e <_dtoa_r+0x956>
 801c04a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801c04c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801c050:	4637      	mov	r7, r6
 801c052:	e599      	b.n	801bb88 <_dtoa_r+0x4d0>
 801c054:	9b08      	ldr	r3, [sp, #32]
 801c056:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	f000 80fd 	beq.w	801c25a <_dtoa_r+0xba2>
 801c060:	2d00      	cmp	r5, #0
 801c062:	dd05      	ble.n	801c070 <_dtoa_r+0x9b8>
 801c064:	4639      	mov	r1, r7
 801c066:	462a      	mov	r2, r5
 801c068:	4620      	mov	r0, r4
 801c06a:	f001 f943 	bl	801d2f4 <__lshift>
 801c06e:	4607      	mov	r7, r0
 801c070:	9b06      	ldr	r3, [sp, #24]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d05c      	beq.n	801c130 <_dtoa_r+0xa78>
 801c076:	6879      	ldr	r1, [r7, #4]
 801c078:	4620      	mov	r0, r4
 801c07a:	f000 fedf 	bl	801ce3c <_Balloc>
 801c07e:	4605      	mov	r5, r0
 801c080:	b928      	cbnz	r0, 801c08e <_dtoa_r+0x9d6>
 801c082:	4b80      	ldr	r3, [pc, #512]	; (801c284 <_dtoa_r+0xbcc>)
 801c084:	4602      	mov	r2, r0
 801c086:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c08a:	f7ff bb2e 	b.w	801b6ea <_dtoa_r+0x32>
 801c08e:	693a      	ldr	r2, [r7, #16]
 801c090:	3202      	adds	r2, #2
 801c092:	0092      	lsls	r2, r2, #2
 801c094:	f107 010c 	add.w	r1, r7, #12
 801c098:	300c      	adds	r0, #12
 801c09a:	f7fd fa9f 	bl	80195dc <memcpy>
 801c09e:	2201      	movs	r2, #1
 801c0a0:	4629      	mov	r1, r5
 801c0a2:	4620      	mov	r0, r4
 801c0a4:	f001 f926 	bl	801d2f4 <__lshift>
 801c0a8:	9b00      	ldr	r3, [sp, #0]
 801c0aa:	3301      	adds	r3, #1
 801c0ac:	9301      	str	r3, [sp, #4]
 801c0ae:	9b00      	ldr	r3, [sp, #0]
 801c0b0:	444b      	add	r3, r9
 801c0b2:	9307      	str	r3, [sp, #28]
 801c0b4:	9b02      	ldr	r3, [sp, #8]
 801c0b6:	f003 0301 	and.w	r3, r3, #1
 801c0ba:	46b8      	mov	r8, r7
 801c0bc:	9306      	str	r3, [sp, #24]
 801c0be:	4607      	mov	r7, r0
 801c0c0:	9b01      	ldr	r3, [sp, #4]
 801c0c2:	4631      	mov	r1, r6
 801c0c4:	3b01      	subs	r3, #1
 801c0c6:	4658      	mov	r0, fp
 801c0c8:	9302      	str	r3, [sp, #8]
 801c0ca:	f7ff fa67 	bl	801b59c <quorem>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	3330      	adds	r3, #48	; 0x30
 801c0d2:	9004      	str	r0, [sp, #16]
 801c0d4:	4641      	mov	r1, r8
 801c0d6:	4658      	mov	r0, fp
 801c0d8:	9308      	str	r3, [sp, #32]
 801c0da:	f001 f977 	bl	801d3cc <__mcmp>
 801c0de:	463a      	mov	r2, r7
 801c0e0:	4681      	mov	r9, r0
 801c0e2:	4631      	mov	r1, r6
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	f001 f98d 	bl	801d404 <__mdiff>
 801c0ea:	68c2      	ldr	r2, [r0, #12]
 801c0ec:	9b08      	ldr	r3, [sp, #32]
 801c0ee:	4605      	mov	r5, r0
 801c0f0:	bb02      	cbnz	r2, 801c134 <_dtoa_r+0xa7c>
 801c0f2:	4601      	mov	r1, r0
 801c0f4:	4658      	mov	r0, fp
 801c0f6:	f001 f969 	bl	801d3cc <__mcmp>
 801c0fa:	9b08      	ldr	r3, [sp, #32]
 801c0fc:	4602      	mov	r2, r0
 801c0fe:	4629      	mov	r1, r5
 801c100:	4620      	mov	r0, r4
 801c102:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801c106:	f000 fed9 	bl	801cebc <_Bfree>
 801c10a:	9b05      	ldr	r3, [sp, #20]
 801c10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c10e:	9d01      	ldr	r5, [sp, #4]
 801c110:	ea43 0102 	orr.w	r1, r3, r2
 801c114:	9b06      	ldr	r3, [sp, #24]
 801c116:	430b      	orrs	r3, r1
 801c118:	9b08      	ldr	r3, [sp, #32]
 801c11a:	d10d      	bne.n	801c138 <_dtoa_r+0xa80>
 801c11c:	2b39      	cmp	r3, #57	; 0x39
 801c11e:	d029      	beq.n	801c174 <_dtoa_r+0xabc>
 801c120:	f1b9 0f00 	cmp.w	r9, #0
 801c124:	dd01      	ble.n	801c12a <_dtoa_r+0xa72>
 801c126:	9b04      	ldr	r3, [sp, #16]
 801c128:	3331      	adds	r3, #49	; 0x31
 801c12a:	9a02      	ldr	r2, [sp, #8]
 801c12c:	7013      	strb	r3, [r2, #0]
 801c12e:	e774      	b.n	801c01a <_dtoa_r+0x962>
 801c130:	4638      	mov	r0, r7
 801c132:	e7b9      	b.n	801c0a8 <_dtoa_r+0x9f0>
 801c134:	2201      	movs	r2, #1
 801c136:	e7e2      	b.n	801c0fe <_dtoa_r+0xa46>
 801c138:	f1b9 0f00 	cmp.w	r9, #0
 801c13c:	db06      	blt.n	801c14c <_dtoa_r+0xa94>
 801c13e:	9905      	ldr	r1, [sp, #20]
 801c140:	ea41 0909 	orr.w	r9, r1, r9
 801c144:	9906      	ldr	r1, [sp, #24]
 801c146:	ea59 0101 	orrs.w	r1, r9, r1
 801c14a:	d120      	bne.n	801c18e <_dtoa_r+0xad6>
 801c14c:	2a00      	cmp	r2, #0
 801c14e:	ddec      	ble.n	801c12a <_dtoa_r+0xa72>
 801c150:	4659      	mov	r1, fp
 801c152:	2201      	movs	r2, #1
 801c154:	4620      	mov	r0, r4
 801c156:	9301      	str	r3, [sp, #4]
 801c158:	f001 f8cc 	bl	801d2f4 <__lshift>
 801c15c:	4631      	mov	r1, r6
 801c15e:	4683      	mov	fp, r0
 801c160:	f001 f934 	bl	801d3cc <__mcmp>
 801c164:	2800      	cmp	r0, #0
 801c166:	9b01      	ldr	r3, [sp, #4]
 801c168:	dc02      	bgt.n	801c170 <_dtoa_r+0xab8>
 801c16a:	d1de      	bne.n	801c12a <_dtoa_r+0xa72>
 801c16c:	07da      	lsls	r2, r3, #31
 801c16e:	d5dc      	bpl.n	801c12a <_dtoa_r+0xa72>
 801c170:	2b39      	cmp	r3, #57	; 0x39
 801c172:	d1d8      	bne.n	801c126 <_dtoa_r+0xa6e>
 801c174:	9a02      	ldr	r2, [sp, #8]
 801c176:	2339      	movs	r3, #57	; 0x39
 801c178:	7013      	strb	r3, [r2, #0]
 801c17a:	462b      	mov	r3, r5
 801c17c:	461d      	mov	r5, r3
 801c17e:	3b01      	subs	r3, #1
 801c180:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c184:	2a39      	cmp	r2, #57	; 0x39
 801c186:	d050      	beq.n	801c22a <_dtoa_r+0xb72>
 801c188:	3201      	adds	r2, #1
 801c18a:	701a      	strb	r2, [r3, #0]
 801c18c:	e745      	b.n	801c01a <_dtoa_r+0x962>
 801c18e:	2a00      	cmp	r2, #0
 801c190:	dd03      	ble.n	801c19a <_dtoa_r+0xae2>
 801c192:	2b39      	cmp	r3, #57	; 0x39
 801c194:	d0ee      	beq.n	801c174 <_dtoa_r+0xabc>
 801c196:	3301      	adds	r3, #1
 801c198:	e7c7      	b.n	801c12a <_dtoa_r+0xa72>
 801c19a:	9a01      	ldr	r2, [sp, #4]
 801c19c:	9907      	ldr	r1, [sp, #28]
 801c19e:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c1a2:	428a      	cmp	r2, r1
 801c1a4:	d02a      	beq.n	801c1fc <_dtoa_r+0xb44>
 801c1a6:	4659      	mov	r1, fp
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	220a      	movs	r2, #10
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	f000 fea7 	bl	801cf00 <__multadd>
 801c1b2:	45b8      	cmp	r8, r7
 801c1b4:	4683      	mov	fp, r0
 801c1b6:	f04f 0300 	mov.w	r3, #0
 801c1ba:	f04f 020a 	mov.w	r2, #10
 801c1be:	4641      	mov	r1, r8
 801c1c0:	4620      	mov	r0, r4
 801c1c2:	d107      	bne.n	801c1d4 <_dtoa_r+0xb1c>
 801c1c4:	f000 fe9c 	bl	801cf00 <__multadd>
 801c1c8:	4680      	mov	r8, r0
 801c1ca:	4607      	mov	r7, r0
 801c1cc:	9b01      	ldr	r3, [sp, #4]
 801c1ce:	3301      	adds	r3, #1
 801c1d0:	9301      	str	r3, [sp, #4]
 801c1d2:	e775      	b.n	801c0c0 <_dtoa_r+0xa08>
 801c1d4:	f000 fe94 	bl	801cf00 <__multadd>
 801c1d8:	4639      	mov	r1, r7
 801c1da:	4680      	mov	r8, r0
 801c1dc:	2300      	movs	r3, #0
 801c1de:	220a      	movs	r2, #10
 801c1e0:	4620      	mov	r0, r4
 801c1e2:	f000 fe8d 	bl	801cf00 <__multadd>
 801c1e6:	4607      	mov	r7, r0
 801c1e8:	e7f0      	b.n	801c1cc <_dtoa_r+0xb14>
 801c1ea:	f1b9 0f00 	cmp.w	r9, #0
 801c1ee:	9a00      	ldr	r2, [sp, #0]
 801c1f0:	bfcc      	ite	gt
 801c1f2:	464d      	movgt	r5, r9
 801c1f4:	2501      	movle	r5, #1
 801c1f6:	4415      	add	r5, r2
 801c1f8:	f04f 0800 	mov.w	r8, #0
 801c1fc:	4659      	mov	r1, fp
 801c1fe:	2201      	movs	r2, #1
 801c200:	4620      	mov	r0, r4
 801c202:	9301      	str	r3, [sp, #4]
 801c204:	f001 f876 	bl	801d2f4 <__lshift>
 801c208:	4631      	mov	r1, r6
 801c20a:	4683      	mov	fp, r0
 801c20c:	f001 f8de 	bl	801d3cc <__mcmp>
 801c210:	2800      	cmp	r0, #0
 801c212:	dcb2      	bgt.n	801c17a <_dtoa_r+0xac2>
 801c214:	d102      	bne.n	801c21c <_dtoa_r+0xb64>
 801c216:	9b01      	ldr	r3, [sp, #4]
 801c218:	07db      	lsls	r3, r3, #31
 801c21a:	d4ae      	bmi.n	801c17a <_dtoa_r+0xac2>
 801c21c:	462b      	mov	r3, r5
 801c21e:	461d      	mov	r5, r3
 801c220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c224:	2a30      	cmp	r2, #48	; 0x30
 801c226:	d0fa      	beq.n	801c21e <_dtoa_r+0xb66>
 801c228:	e6f7      	b.n	801c01a <_dtoa_r+0x962>
 801c22a:	9a00      	ldr	r2, [sp, #0]
 801c22c:	429a      	cmp	r2, r3
 801c22e:	d1a5      	bne.n	801c17c <_dtoa_r+0xac4>
 801c230:	f10a 0a01 	add.w	sl, sl, #1
 801c234:	2331      	movs	r3, #49	; 0x31
 801c236:	e779      	b.n	801c12c <_dtoa_r+0xa74>
 801c238:	4b13      	ldr	r3, [pc, #76]	; (801c288 <_dtoa_r+0xbd0>)
 801c23a:	f7ff baaf 	b.w	801b79c <_dtoa_r+0xe4>
 801c23e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c240:	2b00      	cmp	r3, #0
 801c242:	f47f aa86 	bne.w	801b752 <_dtoa_r+0x9a>
 801c246:	4b11      	ldr	r3, [pc, #68]	; (801c28c <_dtoa_r+0xbd4>)
 801c248:	f7ff baa8 	b.w	801b79c <_dtoa_r+0xe4>
 801c24c:	f1b9 0f00 	cmp.w	r9, #0
 801c250:	dc03      	bgt.n	801c25a <_dtoa_r+0xba2>
 801c252:	9b05      	ldr	r3, [sp, #20]
 801c254:	2b02      	cmp	r3, #2
 801c256:	f73f aec9 	bgt.w	801bfec <_dtoa_r+0x934>
 801c25a:	9d00      	ldr	r5, [sp, #0]
 801c25c:	4631      	mov	r1, r6
 801c25e:	4658      	mov	r0, fp
 801c260:	f7ff f99c 	bl	801b59c <quorem>
 801c264:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c268:	f805 3b01 	strb.w	r3, [r5], #1
 801c26c:	9a00      	ldr	r2, [sp, #0]
 801c26e:	1aaa      	subs	r2, r5, r2
 801c270:	4591      	cmp	r9, r2
 801c272:	ddba      	ble.n	801c1ea <_dtoa_r+0xb32>
 801c274:	4659      	mov	r1, fp
 801c276:	2300      	movs	r3, #0
 801c278:	220a      	movs	r2, #10
 801c27a:	4620      	mov	r0, r4
 801c27c:	f000 fe40 	bl	801cf00 <__multadd>
 801c280:	4683      	mov	fp, r0
 801c282:	e7eb      	b.n	801c25c <_dtoa_r+0xba4>
 801c284:	08022758 	.word	0x08022758
 801c288:	080229c1 	.word	0x080229c1
 801c28c:	080226ec 	.word	0x080226ec

0801c290 <__errno>:
 801c290:	4b01      	ldr	r3, [pc, #4]	; (801c298 <__errno+0x8>)
 801c292:	6818      	ldr	r0, [r3, #0]
 801c294:	4770      	bx	lr
 801c296:	bf00      	nop
 801c298:	20000020 	.word	0x20000020

0801c29c <__sflush_r>:
 801c29c:	898a      	ldrh	r2, [r1, #12]
 801c29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2a2:	4605      	mov	r5, r0
 801c2a4:	0710      	lsls	r0, r2, #28
 801c2a6:	460c      	mov	r4, r1
 801c2a8:	d458      	bmi.n	801c35c <__sflush_r+0xc0>
 801c2aa:	684b      	ldr	r3, [r1, #4]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	dc05      	bgt.n	801c2bc <__sflush_r+0x20>
 801c2b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	dc02      	bgt.n	801c2bc <__sflush_r+0x20>
 801c2b6:	2000      	movs	r0, #0
 801c2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c2be:	2e00      	cmp	r6, #0
 801c2c0:	d0f9      	beq.n	801c2b6 <__sflush_r+0x1a>
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c2c8:	682f      	ldr	r7, [r5, #0]
 801c2ca:	602b      	str	r3, [r5, #0]
 801c2cc:	d032      	beq.n	801c334 <__sflush_r+0x98>
 801c2ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c2d0:	89a3      	ldrh	r3, [r4, #12]
 801c2d2:	075a      	lsls	r2, r3, #29
 801c2d4:	d505      	bpl.n	801c2e2 <__sflush_r+0x46>
 801c2d6:	6863      	ldr	r3, [r4, #4]
 801c2d8:	1ac0      	subs	r0, r0, r3
 801c2da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c2dc:	b10b      	cbz	r3, 801c2e2 <__sflush_r+0x46>
 801c2de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c2e0:	1ac0      	subs	r0, r0, r3
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	4602      	mov	r2, r0
 801c2e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c2e8:	6a21      	ldr	r1, [r4, #32]
 801c2ea:	4628      	mov	r0, r5
 801c2ec:	47b0      	blx	r6
 801c2ee:	1c43      	adds	r3, r0, #1
 801c2f0:	89a3      	ldrh	r3, [r4, #12]
 801c2f2:	d106      	bne.n	801c302 <__sflush_r+0x66>
 801c2f4:	6829      	ldr	r1, [r5, #0]
 801c2f6:	291d      	cmp	r1, #29
 801c2f8:	d82c      	bhi.n	801c354 <__sflush_r+0xb8>
 801c2fa:	4a2a      	ldr	r2, [pc, #168]	; (801c3a4 <__sflush_r+0x108>)
 801c2fc:	40ca      	lsrs	r2, r1
 801c2fe:	07d6      	lsls	r6, r2, #31
 801c300:	d528      	bpl.n	801c354 <__sflush_r+0xb8>
 801c302:	2200      	movs	r2, #0
 801c304:	6062      	str	r2, [r4, #4]
 801c306:	04d9      	lsls	r1, r3, #19
 801c308:	6922      	ldr	r2, [r4, #16]
 801c30a:	6022      	str	r2, [r4, #0]
 801c30c:	d504      	bpl.n	801c318 <__sflush_r+0x7c>
 801c30e:	1c42      	adds	r2, r0, #1
 801c310:	d101      	bne.n	801c316 <__sflush_r+0x7a>
 801c312:	682b      	ldr	r3, [r5, #0]
 801c314:	b903      	cbnz	r3, 801c318 <__sflush_r+0x7c>
 801c316:	6560      	str	r0, [r4, #84]	; 0x54
 801c318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c31a:	602f      	str	r7, [r5, #0]
 801c31c:	2900      	cmp	r1, #0
 801c31e:	d0ca      	beq.n	801c2b6 <__sflush_r+0x1a>
 801c320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c324:	4299      	cmp	r1, r3
 801c326:	d002      	beq.n	801c32e <__sflush_r+0x92>
 801c328:	4628      	mov	r0, r5
 801c32a:	f001 fa51 	bl	801d7d0 <_free_r>
 801c32e:	2000      	movs	r0, #0
 801c330:	6360      	str	r0, [r4, #52]	; 0x34
 801c332:	e7c1      	b.n	801c2b8 <__sflush_r+0x1c>
 801c334:	6a21      	ldr	r1, [r4, #32]
 801c336:	2301      	movs	r3, #1
 801c338:	4628      	mov	r0, r5
 801c33a:	47b0      	blx	r6
 801c33c:	1c41      	adds	r1, r0, #1
 801c33e:	d1c7      	bne.n	801c2d0 <__sflush_r+0x34>
 801c340:	682b      	ldr	r3, [r5, #0]
 801c342:	2b00      	cmp	r3, #0
 801c344:	d0c4      	beq.n	801c2d0 <__sflush_r+0x34>
 801c346:	2b1d      	cmp	r3, #29
 801c348:	d001      	beq.n	801c34e <__sflush_r+0xb2>
 801c34a:	2b16      	cmp	r3, #22
 801c34c:	d101      	bne.n	801c352 <__sflush_r+0xb6>
 801c34e:	602f      	str	r7, [r5, #0]
 801c350:	e7b1      	b.n	801c2b6 <__sflush_r+0x1a>
 801c352:	89a3      	ldrh	r3, [r4, #12]
 801c354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c358:	81a3      	strh	r3, [r4, #12]
 801c35a:	e7ad      	b.n	801c2b8 <__sflush_r+0x1c>
 801c35c:	690f      	ldr	r7, [r1, #16]
 801c35e:	2f00      	cmp	r7, #0
 801c360:	d0a9      	beq.n	801c2b6 <__sflush_r+0x1a>
 801c362:	0793      	lsls	r3, r2, #30
 801c364:	680e      	ldr	r6, [r1, #0]
 801c366:	bf08      	it	eq
 801c368:	694b      	ldreq	r3, [r1, #20]
 801c36a:	600f      	str	r7, [r1, #0]
 801c36c:	bf18      	it	ne
 801c36e:	2300      	movne	r3, #0
 801c370:	eba6 0807 	sub.w	r8, r6, r7
 801c374:	608b      	str	r3, [r1, #8]
 801c376:	f1b8 0f00 	cmp.w	r8, #0
 801c37a:	dd9c      	ble.n	801c2b6 <__sflush_r+0x1a>
 801c37c:	6a21      	ldr	r1, [r4, #32]
 801c37e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c380:	4643      	mov	r3, r8
 801c382:	463a      	mov	r2, r7
 801c384:	4628      	mov	r0, r5
 801c386:	47b0      	blx	r6
 801c388:	2800      	cmp	r0, #0
 801c38a:	dc06      	bgt.n	801c39a <__sflush_r+0xfe>
 801c38c:	89a3      	ldrh	r3, [r4, #12]
 801c38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c392:	81a3      	strh	r3, [r4, #12]
 801c394:	f04f 30ff 	mov.w	r0, #4294967295
 801c398:	e78e      	b.n	801c2b8 <__sflush_r+0x1c>
 801c39a:	4407      	add	r7, r0
 801c39c:	eba8 0800 	sub.w	r8, r8, r0
 801c3a0:	e7e9      	b.n	801c376 <__sflush_r+0xda>
 801c3a2:	bf00      	nop
 801c3a4:	20400001 	.word	0x20400001

0801c3a8 <_fflush_r>:
 801c3a8:	b538      	push	{r3, r4, r5, lr}
 801c3aa:	690b      	ldr	r3, [r1, #16]
 801c3ac:	4605      	mov	r5, r0
 801c3ae:	460c      	mov	r4, r1
 801c3b0:	b913      	cbnz	r3, 801c3b8 <_fflush_r+0x10>
 801c3b2:	2500      	movs	r5, #0
 801c3b4:	4628      	mov	r0, r5
 801c3b6:	bd38      	pop	{r3, r4, r5, pc}
 801c3b8:	b118      	cbz	r0, 801c3c2 <_fflush_r+0x1a>
 801c3ba:	6983      	ldr	r3, [r0, #24]
 801c3bc:	b90b      	cbnz	r3, 801c3c2 <_fflush_r+0x1a>
 801c3be:	f000 f887 	bl	801c4d0 <__sinit>
 801c3c2:	4b14      	ldr	r3, [pc, #80]	; (801c414 <_fflush_r+0x6c>)
 801c3c4:	429c      	cmp	r4, r3
 801c3c6:	d11b      	bne.n	801c400 <_fflush_r+0x58>
 801c3c8:	686c      	ldr	r4, [r5, #4]
 801c3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d0ef      	beq.n	801c3b2 <_fflush_r+0xa>
 801c3d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c3d4:	07d0      	lsls	r0, r2, #31
 801c3d6:	d404      	bmi.n	801c3e2 <_fflush_r+0x3a>
 801c3d8:	0599      	lsls	r1, r3, #22
 801c3da:	d402      	bmi.n	801c3e2 <_fflush_r+0x3a>
 801c3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c3de:	f000 fc9a 	bl	801cd16 <__retarget_lock_acquire_recursive>
 801c3e2:	4628      	mov	r0, r5
 801c3e4:	4621      	mov	r1, r4
 801c3e6:	f7ff ff59 	bl	801c29c <__sflush_r>
 801c3ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c3ec:	07da      	lsls	r2, r3, #31
 801c3ee:	4605      	mov	r5, r0
 801c3f0:	d4e0      	bmi.n	801c3b4 <_fflush_r+0xc>
 801c3f2:	89a3      	ldrh	r3, [r4, #12]
 801c3f4:	059b      	lsls	r3, r3, #22
 801c3f6:	d4dd      	bmi.n	801c3b4 <_fflush_r+0xc>
 801c3f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c3fa:	f000 fc8d 	bl	801cd18 <__retarget_lock_release_recursive>
 801c3fe:	e7d9      	b.n	801c3b4 <_fflush_r+0xc>
 801c400:	4b05      	ldr	r3, [pc, #20]	; (801c418 <_fflush_r+0x70>)
 801c402:	429c      	cmp	r4, r3
 801c404:	d101      	bne.n	801c40a <_fflush_r+0x62>
 801c406:	68ac      	ldr	r4, [r5, #8]
 801c408:	e7df      	b.n	801c3ca <_fflush_r+0x22>
 801c40a:	4b04      	ldr	r3, [pc, #16]	; (801c41c <_fflush_r+0x74>)
 801c40c:	429c      	cmp	r4, r3
 801c40e:	bf08      	it	eq
 801c410:	68ec      	ldreq	r4, [r5, #12]
 801c412:	e7da      	b.n	801c3ca <_fflush_r+0x22>
 801c414:	0802278c 	.word	0x0802278c
 801c418:	080227ac 	.word	0x080227ac
 801c41c:	0802276c 	.word	0x0802276c

0801c420 <std>:
 801c420:	2300      	movs	r3, #0
 801c422:	b510      	push	{r4, lr}
 801c424:	4604      	mov	r4, r0
 801c426:	e9c0 3300 	strd	r3, r3, [r0]
 801c42a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c42e:	6083      	str	r3, [r0, #8]
 801c430:	8181      	strh	r1, [r0, #12]
 801c432:	6643      	str	r3, [r0, #100]	; 0x64
 801c434:	81c2      	strh	r2, [r0, #14]
 801c436:	6183      	str	r3, [r0, #24]
 801c438:	4619      	mov	r1, r3
 801c43a:	2208      	movs	r2, #8
 801c43c:	305c      	adds	r0, #92	; 0x5c
 801c43e:	f7fd f8f5 	bl	801962c <memset>
 801c442:	4b05      	ldr	r3, [pc, #20]	; (801c458 <std+0x38>)
 801c444:	6263      	str	r3, [r4, #36]	; 0x24
 801c446:	4b05      	ldr	r3, [pc, #20]	; (801c45c <std+0x3c>)
 801c448:	62a3      	str	r3, [r4, #40]	; 0x28
 801c44a:	4b05      	ldr	r3, [pc, #20]	; (801c460 <std+0x40>)
 801c44c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c44e:	4b05      	ldr	r3, [pc, #20]	; (801c464 <std+0x44>)
 801c450:	6224      	str	r4, [r4, #32]
 801c452:	6323      	str	r3, [r4, #48]	; 0x30
 801c454:	bd10      	pop	{r4, pc}
 801c456:	bf00      	nop
 801c458:	0801a571 	.word	0x0801a571
 801c45c:	0801a597 	.word	0x0801a597
 801c460:	0801a5cf 	.word	0x0801a5cf
 801c464:	0801a5f3 	.word	0x0801a5f3

0801c468 <_cleanup_r>:
 801c468:	4901      	ldr	r1, [pc, #4]	; (801c470 <_cleanup_r+0x8>)
 801c46a:	f000 b8c1 	b.w	801c5f0 <_fwalk_reent>
 801c46e:	bf00      	nop
 801c470:	0801c3a9 	.word	0x0801c3a9

0801c474 <__sfmoreglue>:
 801c474:	b570      	push	{r4, r5, r6, lr}
 801c476:	1e4a      	subs	r2, r1, #1
 801c478:	2568      	movs	r5, #104	; 0x68
 801c47a:	4355      	muls	r5, r2
 801c47c:	460e      	mov	r6, r1
 801c47e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c482:	f001 f9f5 	bl	801d870 <_malloc_r>
 801c486:	4604      	mov	r4, r0
 801c488:	b140      	cbz	r0, 801c49c <__sfmoreglue+0x28>
 801c48a:	2100      	movs	r1, #0
 801c48c:	e9c0 1600 	strd	r1, r6, [r0]
 801c490:	300c      	adds	r0, #12
 801c492:	60a0      	str	r0, [r4, #8]
 801c494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c498:	f7fd f8c8 	bl	801962c <memset>
 801c49c:	4620      	mov	r0, r4
 801c49e:	bd70      	pop	{r4, r5, r6, pc}

0801c4a0 <__sfp_lock_acquire>:
 801c4a0:	4801      	ldr	r0, [pc, #4]	; (801c4a8 <__sfp_lock_acquire+0x8>)
 801c4a2:	f000 bc38 	b.w	801cd16 <__retarget_lock_acquire_recursive>
 801c4a6:	bf00      	nop
 801c4a8:	2002810c 	.word	0x2002810c

0801c4ac <__sfp_lock_release>:
 801c4ac:	4801      	ldr	r0, [pc, #4]	; (801c4b4 <__sfp_lock_release+0x8>)
 801c4ae:	f000 bc33 	b.w	801cd18 <__retarget_lock_release_recursive>
 801c4b2:	bf00      	nop
 801c4b4:	2002810c 	.word	0x2002810c

0801c4b8 <__sinit_lock_acquire>:
 801c4b8:	4801      	ldr	r0, [pc, #4]	; (801c4c0 <__sinit_lock_acquire+0x8>)
 801c4ba:	f000 bc2c 	b.w	801cd16 <__retarget_lock_acquire_recursive>
 801c4be:	bf00      	nop
 801c4c0:	20028107 	.word	0x20028107

0801c4c4 <__sinit_lock_release>:
 801c4c4:	4801      	ldr	r0, [pc, #4]	; (801c4cc <__sinit_lock_release+0x8>)
 801c4c6:	f000 bc27 	b.w	801cd18 <__retarget_lock_release_recursive>
 801c4ca:	bf00      	nop
 801c4cc:	20028107 	.word	0x20028107

0801c4d0 <__sinit>:
 801c4d0:	b510      	push	{r4, lr}
 801c4d2:	4604      	mov	r4, r0
 801c4d4:	f7ff fff0 	bl	801c4b8 <__sinit_lock_acquire>
 801c4d8:	69a3      	ldr	r3, [r4, #24]
 801c4da:	b11b      	cbz	r3, 801c4e4 <__sinit+0x14>
 801c4dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4e0:	f7ff bff0 	b.w	801c4c4 <__sinit_lock_release>
 801c4e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c4e8:	6523      	str	r3, [r4, #80]	; 0x50
 801c4ea:	4b13      	ldr	r3, [pc, #76]	; (801c538 <__sinit+0x68>)
 801c4ec:	4a13      	ldr	r2, [pc, #76]	; (801c53c <__sinit+0x6c>)
 801c4ee:	681b      	ldr	r3, [r3, #0]
 801c4f0:	62a2      	str	r2, [r4, #40]	; 0x28
 801c4f2:	42a3      	cmp	r3, r4
 801c4f4:	bf04      	itt	eq
 801c4f6:	2301      	moveq	r3, #1
 801c4f8:	61a3      	streq	r3, [r4, #24]
 801c4fa:	4620      	mov	r0, r4
 801c4fc:	f000 f820 	bl	801c540 <__sfp>
 801c500:	6060      	str	r0, [r4, #4]
 801c502:	4620      	mov	r0, r4
 801c504:	f000 f81c 	bl	801c540 <__sfp>
 801c508:	60a0      	str	r0, [r4, #8]
 801c50a:	4620      	mov	r0, r4
 801c50c:	f000 f818 	bl	801c540 <__sfp>
 801c510:	2200      	movs	r2, #0
 801c512:	60e0      	str	r0, [r4, #12]
 801c514:	2104      	movs	r1, #4
 801c516:	6860      	ldr	r0, [r4, #4]
 801c518:	f7ff ff82 	bl	801c420 <std>
 801c51c:	68a0      	ldr	r0, [r4, #8]
 801c51e:	2201      	movs	r2, #1
 801c520:	2109      	movs	r1, #9
 801c522:	f7ff ff7d 	bl	801c420 <std>
 801c526:	68e0      	ldr	r0, [r4, #12]
 801c528:	2202      	movs	r2, #2
 801c52a:	2112      	movs	r1, #18
 801c52c:	f7ff ff78 	bl	801c420 <std>
 801c530:	2301      	movs	r3, #1
 801c532:	61a3      	str	r3, [r4, #24]
 801c534:	e7d2      	b.n	801c4dc <__sinit+0xc>
 801c536:	bf00      	nop
 801c538:	080225ac 	.word	0x080225ac
 801c53c:	0801c469 	.word	0x0801c469

0801c540 <__sfp>:
 801c540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c542:	4607      	mov	r7, r0
 801c544:	f7ff ffac 	bl	801c4a0 <__sfp_lock_acquire>
 801c548:	4b1e      	ldr	r3, [pc, #120]	; (801c5c4 <__sfp+0x84>)
 801c54a:	681e      	ldr	r6, [r3, #0]
 801c54c:	69b3      	ldr	r3, [r6, #24]
 801c54e:	b913      	cbnz	r3, 801c556 <__sfp+0x16>
 801c550:	4630      	mov	r0, r6
 801c552:	f7ff ffbd 	bl	801c4d0 <__sinit>
 801c556:	3648      	adds	r6, #72	; 0x48
 801c558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c55c:	3b01      	subs	r3, #1
 801c55e:	d503      	bpl.n	801c568 <__sfp+0x28>
 801c560:	6833      	ldr	r3, [r6, #0]
 801c562:	b30b      	cbz	r3, 801c5a8 <__sfp+0x68>
 801c564:	6836      	ldr	r6, [r6, #0]
 801c566:	e7f7      	b.n	801c558 <__sfp+0x18>
 801c568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c56c:	b9d5      	cbnz	r5, 801c5a4 <__sfp+0x64>
 801c56e:	4b16      	ldr	r3, [pc, #88]	; (801c5c8 <__sfp+0x88>)
 801c570:	60e3      	str	r3, [r4, #12]
 801c572:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c576:	6665      	str	r5, [r4, #100]	; 0x64
 801c578:	f000 fbcc 	bl	801cd14 <__retarget_lock_init_recursive>
 801c57c:	f7ff ff96 	bl	801c4ac <__sfp_lock_release>
 801c580:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c584:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c588:	6025      	str	r5, [r4, #0]
 801c58a:	61a5      	str	r5, [r4, #24]
 801c58c:	2208      	movs	r2, #8
 801c58e:	4629      	mov	r1, r5
 801c590:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c594:	f7fd f84a 	bl	801962c <memset>
 801c598:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c59c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c5a0:	4620      	mov	r0, r4
 801c5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c5a4:	3468      	adds	r4, #104	; 0x68
 801c5a6:	e7d9      	b.n	801c55c <__sfp+0x1c>
 801c5a8:	2104      	movs	r1, #4
 801c5aa:	4638      	mov	r0, r7
 801c5ac:	f7ff ff62 	bl	801c474 <__sfmoreglue>
 801c5b0:	4604      	mov	r4, r0
 801c5b2:	6030      	str	r0, [r6, #0]
 801c5b4:	2800      	cmp	r0, #0
 801c5b6:	d1d5      	bne.n	801c564 <__sfp+0x24>
 801c5b8:	f7ff ff78 	bl	801c4ac <__sfp_lock_release>
 801c5bc:	230c      	movs	r3, #12
 801c5be:	603b      	str	r3, [r7, #0]
 801c5c0:	e7ee      	b.n	801c5a0 <__sfp+0x60>
 801c5c2:	bf00      	nop
 801c5c4:	080225ac 	.word	0x080225ac
 801c5c8:	ffff0001 	.word	0xffff0001

0801c5cc <fiprintf>:
 801c5cc:	b40e      	push	{r1, r2, r3}
 801c5ce:	b503      	push	{r0, r1, lr}
 801c5d0:	4601      	mov	r1, r0
 801c5d2:	ab03      	add	r3, sp, #12
 801c5d4:	4805      	ldr	r0, [pc, #20]	; (801c5ec <fiprintf+0x20>)
 801c5d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5da:	6800      	ldr	r0, [r0, #0]
 801c5dc:	9301      	str	r3, [sp, #4]
 801c5de:	f001 fcf9 	bl	801dfd4 <_vfiprintf_r>
 801c5e2:	b002      	add	sp, #8
 801c5e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801c5e8:	b003      	add	sp, #12
 801c5ea:	4770      	bx	lr
 801c5ec:	20000020 	.word	0x20000020

0801c5f0 <_fwalk_reent>:
 801c5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c5f4:	4606      	mov	r6, r0
 801c5f6:	4688      	mov	r8, r1
 801c5f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c5fc:	2700      	movs	r7, #0
 801c5fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c602:	f1b9 0901 	subs.w	r9, r9, #1
 801c606:	d505      	bpl.n	801c614 <_fwalk_reent+0x24>
 801c608:	6824      	ldr	r4, [r4, #0]
 801c60a:	2c00      	cmp	r4, #0
 801c60c:	d1f7      	bne.n	801c5fe <_fwalk_reent+0xe>
 801c60e:	4638      	mov	r0, r7
 801c610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c614:	89ab      	ldrh	r3, [r5, #12]
 801c616:	2b01      	cmp	r3, #1
 801c618:	d907      	bls.n	801c62a <_fwalk_reent+0x3a>
 801c61a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c61e:	3301      	adds	r3, #1
 801c620:	d003      	beq.n	801c62a <_fwalk_reent+0x3a>
 801c622:	4629      	mov	r1, r5
 801c624:	4630      	mov	r0, r6
 801c626:	47c0      	blx	r8
 801c628:	4307      	orrs	r7, r0
 801c62a:	3568      	adds	r5, #104	; 0x68
 801c62c:	e7e9      	b.n	801c602 <_fwalk_reent+0x12>

0801c62e <rshift>:
 801c62e:	6903      	ldr	r3, [r0, #16]
 801c630:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c638:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c63c:	f100 0414 	add.w	r4, r0, #20
 801c640:	dd45      	ble.n	801c6ce <rshift+0xa0>
 801c642:	f011 011f 	ands.w	r1, r1, #31
 801c646:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c64a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c64e:	d10c      	bne.n	801c66a <rshift+0x3c>
 801c650:	f100 0710 	add.w	r7, r0, #16
 801c654:	4629      	mov	r1, r5
 801c656:	42b1      	cmp	r1, r6
 801c658:	d334      	bcc.n	801c6c4 <rshift+0x96>
 801c65a:	1a9b      	subs	r3, r3, r2
 801c65c:	009b      	lsls	r3, r3, #2
 801c65e:	1eea      	subs	r2, r5, #3
 801c660:	4296      	cmp	r6, r2
 801c662:	bf38      	it	cc
 801c664:	2300      	movcc	r3, #0
 801c666:	4423      	add	r3, r4
 801c668:	e015      	b.n	801c696 <rshift+0x68>
 801c66a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c66e:	f1c1 0820 	rsb	r8, r1, #32
 801c672:	40cf      	lsrs	r7, r1
 801c674:	f105 0e04 	add.w	lr, r5, #4
 801c678:	46a1      	mov	r9, r4
 801c67a:	4576      	cmp	r6, lr
 801c67c:	46f4      	mov	ip, lr
 801c67e:	d815      	bhi.n	801c6ac <rshift+0x7e>
 801c680:	1a9b      	subs	r3, r3, r2
 801c682:	009a      	lsls	r2, r3, #2
 801c684:	3a04      	subs	r2, #4
 801c686:	3501      	adds	r5, #1
 801c688:	42ae      	cmp	r6, r5
 801c68a:	bf38      	it	cc
 801c68c:	2200      	movcc	r2, #0
 801c68e:	18a3      	adds	r3, r4, r2
 801c690:	50a7      	str	r7, [r4, r2]
 801c692:	b107      	cbz	r7, 801c696 <rshift+0x68>
 801c694:	3304      	adds	r3, #4
 801c696:	1b1a      	subs	r2, r3, r4
 801c698:	42a3      	cmp	r3, r4
 801c69a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c69e:	bf08      	it	eq
 801c6a0:	2300      	moveq	r3, #0
 801c6a2:	6102      	str	r2, [r0, #16]
 801c6a4:	bf08      	it	eq
 801c6a6:	6143      	streq	r3, [r0, #20]
 801c6a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c6ac:	f8dc c000 	ldr.w	ip, [ip]
 801c6b0:	fa0c fc08 	lsl.w	ip, ip, r8
 801c6b4:	ea4c 0707 	orr.w	r7, ip, r7
 801c6b8:	f849 7b04 	str.w	r7, [r9], #4
 801c6bc:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c6c0:	40cf      	lsrs	r7, r1
 801c6c2:	e7da      	b.n	801c67a <rshift+0x4c>
 801c6c4:	f851 cb04 	ldr.w	ip, [r1], #4
 801c6c8:	f847 cf04 	str.w	ip, [r7, #4]!
 801c6cc:	e7c3      	b.n	801c656 <rshift+0x28>
 801c6ce:	4623      	mov	r3, r4
 801c6d0:	e7e1      	b.n	801c696 <rshift+0x68>

0801c6d2 <__hexdig_fun>:
 801c6d2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c6d6:	2b09      	cmp	r3, #9
 801c6d8:	d802      	bhi.n	801c6e0 <__hexdig_fun+0xe>
 801c6da:	3820      	subs	r0, #32
 801c6dc:	b2c0      	uxtb	r0, r0
 801c6de:	4770      	bx	lr
 801c6e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c6e4:	2b05      	cmp	r3, #5
 801c6e6:	d801      	bhi.n	801c6ec <__hexdig_fun+0x1a>
 801c6e8:	3847      	subs	r0, #71	; 0x47
 801c6ea:	e7f7      	b.n	801c6dc <__hexdig_fun+0xa>
 801c6ec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c6f0:	2b05      	cmp	r3, #5
 801c6f2:	d801      	bhi.n	801c6f8 <__hexdig_fun+0x26>
 801c6f4:	3827      	subs	r0, #39	; 0x27
 801c6f6:	e7f1      	b.n	801c6dc <__hexdig_fun+0xa>
 801c6f8:	2000      	movs	r0, #0
 801c6fa:	4770      	bx	lr

0801c6fc <__gethex>:
 801c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c700:	ed2d 8b02 	vpush	{d8}
 801c704:	b089      	sub	sp, #36	; 0x24
 801c706:	ee08 0a10 	vmov	s16, r0
 801c70a:	9304      	str	r3, [sp, #16]
 801c70c:	4bbc      	ldr	r3, [pc, #752]	; (801ca00 <__gethex+0x304>)
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	9301      	str	r3, [sp, #4]
 801c712:	4618      	mov	r0, r3
 801c714:	468b      	mov	fp, r1
 801c716:	4690      	mov	r8, r2
 801c718:	f7e3 fd7a 	bl	8000210 <strlen>
 801c71c:	9b01      	ldr	r3, [sp, #4]
 801c71e:	f8db 2000 	ldr.w	r2, [fp]
 801c722:	4403      	add	r3, r0
 801c724:	4682      	mov	sl, r0
 801c726:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c72a:	9305      	str	r3, [sp, #20]
 801c72c:	1c93      	adds	r3, r2, #2
 801c72e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c732:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c736:	32fe      	adds	r2, #254	; 0xfe
 801c738:	18d1      	adds	r1, r2, r3
 801c73a:	461f      	mov	r7, r3
 801c73c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c740:	9100      	str	r1, [sp, #0]
 801c742:	2830      	cmp	r0, #48	; 0x30
 801c744:	d0f8      	beq.n	801c738 <__gethex+0x3c>
 801c746:	f7ff ffc4 	bl	801c6d2 <__hexdig_fun>
 801c74a:	4604      	mov	r4, r0
 801c74c:	2800      	cmp	r0, #0
 801c74e:	d13a      	bne.n	801c7c6 <__gethex+0xca>
 801c750:	9901      	ldr	r1, [sp, #4]
 801c752:	4652      	mov	r2, sl
 801c754:	4638      	mov	r0, r7
 801c756:	f7fd ff5d 	bl	801a614 <strncmp>
 801c75a:	4605      	mov	r5, r0
 801c75c:	2800      	cmp	r0, #0
 801c75e:	d168      	bne.n	801c832 <__gethex+0x136>
 801c760:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c764:	eb07 060a 	add.w	r6, r7, sl
 801c768:	f7ff ffb3 	bl	801c6d2 <__hexdig_fun>
 801c76c:	2800      	cmp	r0, #0
 801c76e:	d062      	beq.n	801c836 <__gethex+0x13a>
 801c770:	4633      	mov	r3, r6
 801c772:	7818      	ldrb	r0, [r3, #0]
 801c774:	2830      	cmp	r0, #48	; 0x30
 801c776:	461f      	mov	r7, r3
 801c778:	f103 0301 	add.w	r3, r3, #1
 801c77c:	d0f9      	beq.n	801c772 <__gethex+0x76>
 801c77e:	f7ff ffa8 	bl	801c6d2 <__hexdig_fun>
 801c782:	2301      	movs	r3, #1
 801c784:	fab0 f480 	clz	r4, r0
 801c788:	0964      	lsrs	r4, r4, #5
 801c78a:	4635      	mov	r5, r6
 801c78c:	9300      	str	r3, [sp, #0]
 801c78e:	463a      	mov	r2, r7
 801c790:	4616      	mov	r6, r2
 801c792:	3201      	adds	r2, #1
 801c794:	7830      	ldrb	r0, [r6, #0]
 801c796:	f7ff ff9c 	bl	801c6d2 <__hexdig_fun>
 801c79a:	2800      	cmp	r0, #0
 801c79c:	d1f8      	bne.n	801c790 <__gethex+0x94>
 801c79e:	9901      	ldr	r1, [sp, #4]
 801c7a0:	4652      	mov	r2, sl
 801c7a2:	4630      	mov	r0, r6
 801c7a4:	f7fd ff36 	bl	801a614 <strncmp>
 801c7a8:	b980      	cbnz	r0, 801c7cc <__gethex+0xd0>
 801c7aa:	b94d      	cbnz	r5, 801c7c0 <__gethex+0xc4>
 801c7ac:	eb06 050a 	add.w	r5, r6, sl
 801c7b0:	462a      	mov	r2, r5
 801c7b2:	4616      	mov	r6, r2
 801c7b4:	3201      	adds	r2, #1
 801c7b6:	7830      	ldrb	r0, [r6, #0]
 801c7b8:	f7ff ff8b 	bl	801c6d2 <__hexdig_fun>
 801c7bc:	2800      	cmp	r0, #0
 801c7be:	d1f8      	bne.n	801c7b2 <__gethex+0xb6>
 801c7c0:	1bad      	subs	r5, r5, r6
 801c7c2:	00ad      	lsls	r5, r5, #2
 801c7c4:	e004      	b.n	801c7d0 <__gethex+0xd4>
 801c7c6:	2400      	movs	r4, #0
 801c7c8:	4625      	mov	r5, r4
 801c7ca:	e7e0      	b.n	801c78e <__gethex+0x92>
 801c7cc:	2d00      	cmp	r5, #0
 801c7ce:	d1f7      	bne.n	801c7c0 <__gethex+0xc4>
 801c7d0:	7833      	ldrb	r3, [r6, #0]
 801c7d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c7d6:	2b50      	cmp	r3, #80	; 0x50
 801c7d8:	d13b      	bne.n	801c852 <__gethex+0x156>
 801c7da:	7873      	ldrb	r3, [r6, #1]
 801c7dc:	2b2b      	cmp	r3, #43	; 0x2b
 801c7de:	d02c      	beq.n	801c83a <__gethex+0x13e>
 801c7e0:	2b2d      	cmp	r3, #45	; 0x2d
 801c7e2:	d02e      	beq.n	801c842 <__gethex+0x146>
 801c7e4:	1c71      	adds	r1, r6, #1
 801c7e6:	f04f 0900 	mov.w	r9, #0
 801c7ea:	7808      	ldrb	r0, [r1, #0]
 801c7ec:	f7ff ff71 	bl	801c6d2 <__hexdig_fun>
 801c7f0:	1e43      	subs	r3, r0, #1
 801c7f2:	b2db      	uxtb	r3, r3
 801c7f4:	2b18      	cmp	r3, #24
 801c7f6:	d82c      	bhi.n	801c852 <__gethex+0x156>
 801c7f8:	f1a0 0210 	sub.w	r2, r0, #16
 801c7fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c800:	f7ff ff67 	bl	801c6d2 <__hexdig_fun>
 801c804:	1e43      	subs	r3, r0, #1
 801c806:	b2db      	uxtb	r3, r3
 801c808:	2b18      	cmp	r3, #24
 801c80a:	d91d      	bls.n	801c848 <__gethex+0x14c>
 801c80c:	f1b9 0f00 	cmp.w	r9, #0
 801c810:	d000      	beq.n	801c814 <__gethex+0x118>
 801c812:	4252      	negs	r2, r2
 801c814:	4415      	add	r5, r2
 801c816:	f8cb 1000 	str.w	r1, [fp]
 801c81a:	b1e4      	cbz	r4, 801c856 <__gethex+0x15a>
 801c81c:	9b00      	ldr	r3, [sp, #0]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	bf14      	ite	ne
 801c822:	2700      	movne	r7, #0
 801c824:	2706      	moveq	r7, #6
 801c826:	4638      	mov	r0, r7
 801c828:	b009      	add	sp, #36	; 0x24
 801c82a:	ecbd 8b02 	vpop	{d8}
 801c82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c832:	463e      	mov	r6, r7
 801c834:	4625      	mov	r5, r4
 801c836:	2401      	movs	r4, #1
 801c838:	e7ca      	b.n	801c7d0 <__gethex+0xd4>
 801c83a:	f04f 0900 	mov.w	r9, #0
 801c83e:	1cb1      	adds	r1, r6, #2
 801c840:	e7d3      	b.n	801c7ea <__gethex+0xee>
 801c842:	f04f 0901 	mov.w	r9, #1
 801c846:	e7fa      	b.n	801c83e <__gethex+0x142>
 801c848:	230a      	movs	r3, #10
 801c84a:	fb03 0202 	mla	r2, r3, r2, r0
 801c84e:	3a10      	subs	r2, #16
 801c850:	e7d4      	b.n	801c7fc <__gethex+0x100>
 801c852:	4631      	mov	r1, r6
 801c854:	e7df      	b.n	801c816 <__gethex+0x11a>
 801c856:	1bf3      	subs	r3, r6, r7
 801c858:	3b01      	subs	r3, #1
 801c85a:	4621      	mov	r1, r4
 801c85c:	2b07      	cmp	r3, #7
 801c85e:	dc0b      	bgt.n	801c878 <__gethex+0x17c>
 801c860:	ee18 0a10 	vmov	r0, s16
 801c864:	f000 faea 	bl	801ce3c <_Balloc>
 801c868:	4604      	mov	r4, r0
 801c86a:	b940      	cbnz	r0, 801c87e <__gethex+0x182>
 801c86c:	4b65      	ldr	r3, [pc, #404]	; (801ca04 <__gethex+0x308>)
 801c86e:	4602      	mov	r2, r0
 801c870:	21de      	movs	r1, #222	; 0xde
 801c872:	4865      	ldr	r0, [pc, #404]	; (801ca08 <__gethex+0x30c>)
 801c874:	f7fe fe64 	bl	801b540 <__assert_func>
 801c878:	3101      	adds	r1, #1
 801c87a:	105b      	asrs	r3, r3, #1
 801c87c:	e7ee      	b.n	801c85c <__gethex+0x160>
 801c87e:	f100 0914 	add.w	r9, r0, #20
 801c882:	f04f 0b00 	mov.w	fp, #0
 801c886:	f1ca 0301 	rsb	r3, sl, #1
 801c88a:	f8cd 9008 	str.w	r9, [sp, #8]
 801c88e:	f8cd b000 	str.w	fp, [sp]
 801c892:	9306      	str	r3, [sp, #24]
 801c894:	42b7      	cmp	r7, r6
 801c896:	d340      	bcc.n	801c91a <__gethex+0x21e>
 801c898:	9802      	ldr	r0, [sp, #8]
 801c89a:	9b00      	ldr	r3, [sp, #0]
 801c89c:	f840 3b04 	str.w	r3, [r0], #4
 801c8a0:	eba0 0009 	sub.w	r0, r0, r9
 801c8a4:	1080      	asrs	r0, r0, #2
 801c8a6:	0146      	lsls	r6, r0, #5
 801c8a8:	6120      	str	r0, [r4, #16]
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f000 fbbc 	bl	801d028 <__hi0bits>
 801c8b0:	1a30      	subs	r0, r6, r0
 801c8b2:	f8d8 6000 	ldr.w	r6, [r8]
 801c8b6:	42b0      	cmp	r0, r6
 801c8b8:	dd63      	ble.n	801c982 <__gethex+0x286>
 801c8ba:	1b87      	subs	r7, r0, r6
 801c8bc:	4639      	mov	r1, r7
 801c8be:	4620      	mov	r0, r4
 801c8c0:	f000 ff56 	bl	801d770 <__any_on>
 801c8c4:	4682      	mov	sl, r0
 801c8c6:	b1a8      	cbz	r0, 801c8f4 <__gethex+0x1f8>
 801c8c8:	1e7b      	subs	r3, r7, #1
 801c8ca:	1159      	asrs	r1, r3, #5
 801c8cc:	f003 021f 	and.w	r2, r3, #31
 801c8d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c8d4:	f04f 0a01 	mov.w	sl, #1
 801c8d8:	fa0a f202 	lsl.w	r2, sl, r2
 801c8dc:	420a      	tst	r2, r1
 801c8de:	d009      	beq.n	801c8f4 <__gethex+0x1f8>
 801c8e0:	4553      	cmp	r3, sl
 801c8e2:	dd05      	ble.n	801c8f0 <__gethex+0x1f4>
 801c8e4:	1eb9      	subs	r1, r7, #2
 801c8e6:	4620      	mov	r0, r4
 801c8e8:	f000 ff42 	bl	801d770 <__any_on>
 801c8ec:	2800      	cmp	r0, #0
 801c8ee:	d145      	bne.n	801c97c <__gethex+0x280>
 801c8f0:	f04f 0a02 	mov.w	sl, #2
 801c8f4:	4639      	mov	r1, r7
 801c8f6:	4620      	mov	r0, r4
 801c8f8:	f7ff fe99 	bl	801c62e <rshift>
 801c8fc:	443d      	add	r5, r7
 801c8fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c902:	42ab      	cmp	r3, r5
 801c904:	da4c      	bge.n	801c9a0 <__gethex+0x2a4>
 801c906:	ee18 0a10 	vmov	r0, s16
 801c90a:	4621      	mov	r1, r4
 801c90c:	f000 fad6 	bl	801cebc <_Bfree>
 801c910:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c912:	2300      	movs	r3, #0
 801c914:	6013      	str	r3, [r2, #0]
 801c916:	27a3      	movs	r7, #163	; 0xa3
 801c918:	e785      	b.n	801c826 <__gethex+0x12a>
 801c91a:	1e73      	subs	r3, r6, #1
 801c91c:	9a05      	ldr	r2, [sp, #20]
 801c91e:	9303      	str	r3, [sp, #12]
 801c920:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c924:	4293      	cmp	r3, r2
 801c926:	d019      	beq.n	801c95c <__gethex+0x260>
 801c928:	f1bb 0f20 	cmp.w	fp, #32
 801c92c:	d107      	bne.n	801c93e <__gethex+0x242>
 801c92e:	9b02      	ldr	r3, [sp, #8]
 801c930:	9a00      	ldr	r2, [sp, #0]
 801c932:	f843 2b04 	str.w	r2, [r3], #4
 801c936:	9302      	str	r3, [sp, #8]
 801c938:	2300      	movs	r3, #0
 801c93a:	9300      	str	r3, [sp, #0]
 801c93c:	469b      	mov	fp, r3
 801c93e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c942:	f7ff fec6 	bl	801c6d2 <__hexdig_fun>
 801c946:	9b00      	ldr	r3, [sp, #0]
 801c948:	f000 000f 	and.w	r0, r0, #15
 801c94c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c950:	4303      	orrs	r3, r0
 801c952:	9300      	str	r3, [sp, #0]
 801c954:	f10b 0b04 	add.w	fp, fp, #4
 801c958:	9b03      	ldr	r3, [sp, #12]
 801c95a:	e00d      	b.n	801c978 <__gethex+0x27c>
 801c95c:	9b03      	ldr	r3, [sp, #12]
 801c95e:	9a06      	ldr	r2, [sp, #24]
 801c960:	4413      	add	r3, r2
 801c962:	42bb      	cmp	r3, r7
 801c964:	d3e0      	bcc.n	801c928 <__gethex+0x22c>
 801c966:	4618      	mov	r0, r3
 801c968:	9901      	ldr	r1, [sp, #4]
 801c96a:	9307      	str	r3, [sp, #28]
 801c96c:	4652      	mov	r2, sl
 801c96e:	f7fd fe51 	bl	801a614 <strncmp>
 801c972:	9b07      	ldr	r3, [sp, #28]
 801c974:	2800      	cmp	r0, #0
 801c976:	d1d7      	bne.n	801c928 <__gethex+0x22c>
 801c978:	461e      	mov	r6, r3
 801c97a:	e78b      	b.n	801c894 <__gethex+0x198>
 801c97c:	f04f 0a03 	mov.w	sl, #3
 801c980:	e7b8      	b.n	801c8f4 <__gethex+0x1f8>
 801c982:	da0a      	bge.n	801c99a <__gethex+0x29e>
 801c984:	1a37      	subs	r7, r6, r0
 801c986:	4621      	mov	r1, r4
 801c988:	ee18 0a10 	vmov	r0, s16
 801c98c:	463a      	mov	r2, r7
 801c98e:	f000 fcb1 	bl	801d2f4 <__lshift>
 801c992:	1bed      	subs	r5, r5, r7
 801c994:	4604      	mov	r4, r0
 801c996:	f100 0914 	add.w	r9, r0, #20
 801c99a:	f04f 0a00 	mov.w	sl, #0
 801c99e:	e7ae      	b.n	801c8fe <__gethex+0x202>
 801c9a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c9a4:	42a8      	cmp	r0, r5
 801c9a6:	dd72      	ble.n	801ca8e <__gethex+0x392>
 801c9a8:	1b45      	subs	r5, r0, r5
 801c9aa:	42ae      	cmp	r6, r5
 801c9ac:	dc36      	bgt.n	801ca1c <__gethex+0x320>
 801c9ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c9b2:	2b02      	cmp	r3, #2
 801c9b4:	d02a      	beq.n	801ca0c <__gethex+0x310>
 801c9b6:	2b03      	cmp	r3, #3
 801c9b8:	d02c      	beq.n	801ca14 <__gethex+0x318>
 801c9ba:	2b01      	cmp	r3, #1
 801c9bc:	d115      	bne.n	801c9ea <__gethex+0x2ee>
 801c9be:	42ae      	cmp	r6, r5
 801c9c0:	d113      	bne.n	801c9ea <__gethex+0x2ee>
 801c9c2:	2e01      	cmp	r6, #1
 801c9c4:	d10b      	bne.n	801c9de <__gethex+0x2e2>
 801c9c6:	9a04      	ldr	r2, [sp, #16]
 801c9c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c9cc:	6013      	str	r3, [r2, #0]
 801c9ce:	2301      	movs	r3, #1
 801c9d0:	6123      	str	r3, [r4, #16]
 801c9d2:	f8c9 3000 	str.w	r3, [r9]
 801c9d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c9d8:	2762      	movs	r7, #98	; 0x62
 801c9da:	601c      	str	r4, [r3, #0]
 801c9dc:	e723      	b.n	801c826 <__gethex+0x12a>
 801c9de:	1e71      	subs	r1, r6, #1
 801c9e0:	4620      	mov	r0, r4
 801c9e2:	f000 fec5 	bl	801d770 <__any_on>
 801c9e6:	2800      	cmp	r0, #0
 801c9e8:	d1ed      	bne.n	801c9c6 <__gethex+0x2ca>
 801c9ea:	ee18 0a10 	vmov	r0, s16
 801c9ee:	4621      	mov	r1, r4
 801c9f0:	f000 fa64 	bl	801cebc <_Bfree>
 801c9f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	6013      	str	r3, [r2, #0]
 801c9fa:	2750      	movs	r7, #80	; 0x50
 801c9fc:	e713      	b.n	801c826 <__gethex+0x12a>
 801c9fe:	bf00      	nop
 801ca00:	08022838 	.word	0x08022838
 801ca04:	08022758 	.word	0x08022758
 801ca08:	080227cc 	.word	0x080227cc
 801ca0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d1eb      	bne.n	801c9ea <__gethex+0x2ee>
 801ca12:	e7d8      	b.n	801c9c6 <__gethex+0x2ca>
 801ca14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d1d5      	bne.n	801c9c6 <__gethex+0x2ca>
 801ca1a:	e7e6      	b.n	801c9ea <__gethex+0x2ee>
 801ca1c:	1e6f      	subs	r7, r5, #1
 801ca1e:	f1ba 0f00 	cmp.w	sl, #0
 801ca22:	d131      	bne.n	801ca88 <__gethex+0x38c>
 801ca24:	b127      	cbz	r7, 801ca30 <__gethex+0x334>
 801ca26:	4639      	mov	r1, r7
 801ca28:	4620      	mov	r0, r4
 801ca2a:	f000 fea1 	bl	801d770 <__any_on>
 801ca2e:	4682      	mov	sl, r0
 801ca30:	117b      	asrs	r3, r7, #5
 801ca32:	2101      	movs	r1, #1
 801ca34:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801ca38:	f007 071f 	and.w	r7, r7, #31
 801ca3c:	fa01 f707 	lsl.w	r7, r1, r7
 801ca40:	421f      	tst	r7, r3
 801ca42:	4629      	mov	r1, r5
 801ca44:	4620      	mov	r0, r4
 801ca46:	bf18      	it	ne
 801ca48:	f04a 0a02 	orrne.w	sl, sl, #2
 801ca4c:	1b76      	subs	r6, r6, r5
 801ca4e:	f7ff fdee 	bl	801c62e <rshift>
 801ca52:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ca56:	2702      	movs	r7, #2
 801ca58:	f1ba 0f00 	cmp.w	sl, #0
 801ca5c:	d048      	beq.n	801caf0 <__gethex+0x3f4>
 801ca5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ca62:	2b02      	cmp	r3, #2
 801ca64:	d015      	beq.n	801ca92 <__gethex+0x396>
 801ca66:	2b03      	cmp	r3, #3
 801ca68:	d017      	beq.n	801ca9a <__gethex+0x39e>
 801ca6a:	2b01      	cmp	r3, #1
 801ca6c:	d109      	bne.n	801ca82 <__gethex+0x386>
 801ca6e:	f01a 0f02 	tst.w	sl, #2
 801ca72:	d006      	beq.n	801ca82 <__gethex+0x386>
 801ca74:	f8d9 0000 	ldr.w	r0, [r9]
 801ca78:	ea4a 0a00 	orr.w	sl, sl, r0
 801ca7c:	f01a 0f01 	tst.w	sl, #1
 801ca80:	d10e      	bne.n	801caa0 <__gethex+0x3a4>
 801ca82:	f047 0710 	orr.w	r7, r7, #16
 801ca86:	e033      	b.n	801caf0 <__gethex+0x3f4>
 801ca88:	f04f 0a01 	mov.w	sl, #1
 801ca8c:	e7d0      	b.n	801ca30 <__gethex+0x334>
 801ca8e:	2701      	movs	r7, #1
 801ca90:	e7e2      	b.n	801ca58 <__gethex+0x35c>
 801ca92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca94:	f1c3 0301 	rsb	r3, r3, #1
 801ca98:	9315      	str	r3, [sp, #84]	; 0x54
 801ca9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d0f0      	beq.n	801ca82 <__gethex+0x386>
 801caa0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801caa4:	f104 0314 	add.w	r3, r4, #20
 801caa8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801caac:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cab0:	f04f 0c00 	mov.w	ip, #0
 801cab4:	4618      	mov	r0, r3
 801cab6:	f853 2b04 	ldr.w	r2, [r3], #4
 801caba:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cabe:	d01c      	beq.n	801cafa <__gethex+0x3fe>
 801cac0:	3201      	adds	r2, #1
 801cac2:	6002      	str	r2, [r0, #0]
 801cac4:	2f02      	cmp	r7, #2
 801cac6:	f104 0314 	add.w	r3, r4, #20
 801caca:	d13f      	bne.n	801cb4c <__gethex+0x450>
 801cacc:	f8d8 2000 	ldr.w	r2, [r8]
 801cad0:	3a01      	subs	r2, #1
 801cad2:	42b2      	cmp	r2, r6
 801cad4:	d10a      	bne.n	801caec <__gethex+0x3f0>
 801cad6:	1171      	asrs	r1, r6, #5
 801cad8:	2201      	movs	r2, #1
 801cada:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cade:	f006 061f 	and.w	r6, r6, #31
 801cae2:	fa02 f606 	lsl.w	r6, r2, r6
 801cae6:	421e      	tst	r6, r3
 801cae8:	bf18      	it	ne
 801caea:	4617      	movne	r7, r2
 801caec:	f047 0720 	orr.w	r7, r7, #32
 801caf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801caf2:	601c      	str	r4, [r3, #0]
 801caf4:	9b04      	ldr	r3, [sp, #16]
 801caf6:	601d      	str	r5, [r3, #0]
 801caf8:	e695      	b.n	801c826 <__gethex+0x12a>
 801cafa:	4299      	cmp	r1, r3
 801cafc:	f843 cc04 	str.w	ip, [r3, #-4]
 801cb00:	d8d8      	bhi.n	801cab4 <__gethex+0x3b8>
 801cb02:	68a3      	ldr	r3, [r4, #8]
 801cb04:	459b      	cmp	fp, r3
 801cb06:	db19      	blt.n	801cb3c <__gethex+0x440>
 801cb08:	6861      	ldr	r1, [r4, #4]
 801cb0a:	ee18 0a10 	vmov	r0, s16
 801cb0e:	3101      	adds	r1, #1
 801cb10:	f000 f994 	bl	801ce3c <_Balloc>
 801cb14:	4681      	mov	r9, r0
 801cb16:	b918      	cbnz	r0, 801cb20 <__gethex+0x424>
 801cb18:	4b1a      	ldr	r3, [pc, #104]	; (801cb84 <__gethex+0x488>)
 801cb1a:	4602      	mov	r2, r0
 801cb1c:	2184      	movs	r1, #132	; 0x84
 801cb1e:	e6a8      	b.n	801c872 <__gethex+0x176>
 801cb20:	6922      	ldr	r2, [r4, #16]
 801cb22:	3202      	adds	r2, #2
 801cb24:	f104 010c 	add.w	r1, r4, #12
 801cb28:	0092      	lsls	r2, r2, #2
 801cb2a:	300c      	adds	r0, #12
 801cb2c:	f7fc fd56 	bl	80195dc <memcpy>
 801cb30:	4621      	mov	r1, r4
 801cb32:	ee18 0a10 	vmov	r0, s16
 801cb36:	f000 f9c1 	bl	801cebc <_Bfree>
 801cb3a:	464c      	mov	r4, r9
 801cb3c:	6923      	ldr	r3, [r4, #16]
 801cb3e:	1c5a      	adds	r2, r3, #1
 801cb40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cb44:	6122      	str	r2, [r4, #16]
 801cb46:	2201      	movs	r2, #1
 801cb48:	615a      	str	r2, [r3, #20]
 801cb4a:	e7bb      	b.n	801cac4 <__gethex+0x3c8>
 801cb4c:	6922      	ldr	r2, [r4, #16]
 801cb4e:	455a      	cmp	r2, fp
 801cb50:	dd0b      	ble.n	801cb6a <__gethex+0x46e>
 801cb52:	2101      	movs	r1, #1
 801cb54:	4620      	mov	r0, r4
 801cb56:	f7ff fd6a 	bl	801c62e <rshift>
 801cb5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cb5e:	3501      	adds	r5, #1
 801cb60:	42ab      	cmp	r3, r5
 801cb62:	f6ff aed0 	blt.w	801c906 <__gethex+0x20a>
 801cb66:	2701      	movs	r7, #1
 801cb68:	e7c0      	b.n	801caec <__gethex+0x3f0>
 801cb6a:	f016 061f 	ands.w	r6, r6, #31
 801cb6e:	d0fa      	beq.n	801cb66 <__gethex+0x46a>
 801cb70:	449a      	add	sl, r3
 801cb72:	f1c6 0620 	rsb	r6, r6, #32
 801cb76:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801cb7a:	f000 fa55 	bl	801d028 <__hi0bits>
 801cb7e:	42b0      	cmp	r0, r6
 801cb80:	dbe7      	blt.n	801cb52 <__gethex+0x456>
 801cb82:	e7f0      	b.n	801cb66 <__gethex+0x46a>
 801cb84:	08022758 	.word	0x08022758

0801cb88 <L_shift>:
 801cb88:	f1c2 0208 	rsb	r2, r2, #8
 801cb8c:	0092      	lsls	r2, r2, #2
 801cb8e:	b570      	push	{r4, r5, r6, lr}
 801cb90:	f1c2 0620 	rsb	r6, r2, #32
 801cb94:	6843      	ldr	r3, [r0, #4]
 801cb96:	6804      	ldr	r4, [r0, #0]
 801cb98:	fa03 f506 	lsl.w	r5, r3, r6
 801cb9c:	432c      	orrs	r4, r5
 801cb9e:	40d3      	lsrs	r3, r2
 801cba0:	6004      	str	r4, [r0, #0]
 801cba2:	f840 3f04 	str.w	r3, [r0, #4]!
 801cba6:	4288      	cmp	r0, r1
 801cba8:	d3f4      	bcc.n	801cb94 <L_shift+0xc>
 801cbaa:	bd70      	pop	{r4, r5, r6, pc}

0801cbac <__match>:
 801cbac:	b530      	push	{r4, r5, lr}
 801cbae:	6803      	ldr	r3, [r0, #0]
 801cbb0:	3301      	adds	r3, #1
 801cbb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cbb6:	b914      	cbnz	r4, 801cbbe <__match+0x12>
 801cbb8:	6003      	str	r3, [r0, #0]
 801cbba:	2001      	movs	r0, #1
 801cbbc:	bd30      	pop	{r4, r5, pc}
 801cbbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbc2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cbc6:	2d19      	cmp	r5, #25
 801cbc8:	bf98      	it	ls
 801cbca:	3220      	addls	r2, #32
 801cbcc:	42a2      	cmp	r2, r4
 801cbce:	d0f0      	beq.n	801cbb2 <__match+0x6>
 801cbd0:	2000      	movs	r0, #0
 801cbd2:	e7f3      	b.n	801cbbc <__match+0x10>

0801cbd4 <__hexnan>:
 801cbd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbd8:	680b      	ldr	r3, [r1, #0]
 801cbda:	6801      	ldr	r1, [r0, #0]
 801cbdc:	115e      	asrs	r6, r3, #5
 801cbde:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cbe2:	f013 031f 	ands.w	r3, r3, #31
 801cbe6:	b087      	sub	sp, #28
 801cbe8:	bf18      	it	ne
 801cbea:	3604      	addne	r6, #4
 801cbec:	2500      	movs	r5, #0
 801cbee:	1f37      	subs	r7, r6, #4
 801cbf0:	4682      	mov	sl, r0
 801cbf2:	4690      	mov	r8, r2
 801cbf4:	9301      	str	r3, [sp, #4]
 801cbf6:	f846 5c04 	str.w	r5, [r6, #-4]
 801cbfa:	46b9      	mov	r9, r7
 801cbfc:	463c      	mov	r4, r7
 801cbfe:	9502      	str	r5, [sp, #8]
 801cc00:	46ab      	mov	fp, r5
 801cc02:	784a      	ldrb	r2, [r1, #1]
 801cc04:	1c4b      	adds	r3, r1, #1
 801cc06:	9303      	str	r3, [sp, #12]
 801cc08:	b342      	cbz	r2, 801cc5c <__hexnan+0x88>
 801cc0a:	4610      	mov	r0, r2
 801cc0c:	9105      	str	r1, [sp, #20]
 801cc0e:	9204      	str	r2, [sp, #16]
 801cc10:	f7ff fd5f 	bl	801c6d2 <__hexdig_fun>
 801cc14:	2800      	cmp	r0, #0
 801cc16:	d14f      	bne.n	801ccb8 <__hexnan+0xe4>
 801cc18:	9a04      	ldr	r2, [sp, #16]
 801cc1a:	9905      	ldr	r1, [sp, #20]
 801cc1c:	2a20      	cmp	r2, #32
 801cc1e:	d818      	bhi.n	801cc52 <__hexnan+0x7e>
 801cc20:	9b02      	ldr	r3, [sp, #8]
 801cc22:	459b      	cmp	fp, r3
 801cc24:	dd13      	ble.n	801cc4e <__hexnan+0x7a>
 801cc26:	454c      	cmp	r4, r9
 801cc28:	d206      	bcs.n	801cc38 <__hexnan+0x64>
 801cc2a:	2d07      	cmp	r5, #7
 801cc2c:	dc04      	bgt.n	801cc38 <__hexnan+0x64>
 801cc2e:	462a      	mov	r2, r5
 801cc30:	4649      	mov	r1, r9
 801cc32:	4620      	mov	r0, r4
 801cc34:	f7ff ffa8 	bl	801cb88 <L_shift>
 801cc38:	4544      	cmp	r4, r8
 801cc3a:	d950      	bls.n	801ccde <__hexnan+0x10a>
 801cc3c:	2300      	movs	r3, #0
 801cc3e:	f1a4 0904 	sub.w	r9, r4, #4
 801cc42:	f844 3c04 	str.w	r3, [r4, #-4]
 801cc46:	f8cd b008 	str.w	fp, [sp, #8]
 801cc4a:	464c      	mov	r4, r9
 801cc4c:	461d      	mov	r5, r3
 801cc4e:	9903      	ldr	r1, [sp, #12]
 801cc50:	e7d7      	b.n	801cc02 <__hexnan+0x2e>
 801cc52:	2a29      	cmp	r2, #41	; 0x29
 801cc54:	d156      	bne.n	801cd04 <__hexnan+0x130>
 801cc56:	3102      	adds	r1, #2
 801cc58:	f8ca 1000 	str.w	r1, [sl]
 801cc5c:	f1bb 0f00 	cmp.w	fp, #0
 801cc60:	d050      	beq.n	801cd04 <__hexnan+0x130>
 801cc62:	454c      	cmp	r4, r9
 801cc64:	d206      	bcs.n	801cc74 <__hexnan+0xa0>
 801cc66:	2d07      	cmp	r5, #7
 801cc68:	dc04      	bgt.n	801cc74 <__hexnan+0xa0>
 801cc6a:	462a      	mov	r2, r5
 801cc6c:	4649      	mov	r1, r9
 801cc6e:	4620      	mov	r0, r4
 801cc70:	f7ff ff8a 	bl	801cb88 <L_shift>
 801cc74:	4544      	cmp	r4, r8
 801cc76:	d934      	bls.n	801cce2 <__hexnan+0x10e>
 801cc78:	f1a8 0204 	sub.w	r2, r8, #4
 801cc7c:	4623      	mov	r3, r4
 801cc7e:	f853 1b04 	ldr.w	r1, [r3], #4
 801cc82:	f842 1f04 	str.w	r1, [r2, #4]!
 801cc86:	429f      	cmp	r7, r3
 801cc88:	d2f9      	bcs.n	801cc7e <__hexnan+0xaa>
 801cc8a:	1b3b      	subs	r3, r7, r4
 801cc8c:	f023 0303 	bic.w	r3, r3, #3
 801cc90:	3304      	adds	r3, #4
 801cc92:	3401      	adds	r4, #1
 801cc94:	3e03      	subs	r6, #3
 801cc96:	42b4      	cmp	r4, r6
 801cc98:	bf88      	it	hi
 801cc9a:	2304      	movhi	r3, #4
 801cc9c:	4443      	add	r3, r8
 801cc9e:	2200      	movs	r2, #0
 801cca0:	f843 2b04 	str.w	r2, [r3], #4
 801cca4:	429f      	cmp	r7, r3
 801cca6:	d2fb      	bcs.n	801cca0 <__hexnan+0xcc>
 801cca8:	683b      	ldr	r3, [r7, #0]
 801ccaa:	b91b      	cbnz	r3, 801ccb4 <__hexnan+0xe0>
 801ccac:	4547      	cmp	r7, r8
 801ccae:	d127      	bne.n	801cd00 <__hexnan+0x12c>
 801ccb0:	2301      	movs	r3, #1
 801ccb2:	603b      	str	r3, [r7, #0]
 801ccb4:	2005      	movs	r0, #5
 801ccb6:	e026      	b.n	801cd06 <__hexnan+0x132>
 801ccb8:	3501      	adds	r5, #1
 801ccba:	2d08      	cmp	r5, #8
 801ccbc:	f10b 0b01 	add.w	fp, fp, #1
 801ccc0:	dd06      	ble.n	801ccd0 <__hexnan+0xfc>
 801ccc2:	4544      	cmp	r4, r8
 801ccc4:	d9c3      	bls.n	801cc4e <__hexnan+0x7a>
 801ccc6:	2300      	movs	r3, #0
 801ccc8:	f844 3c04 	str.w	r3, [r4, #-4]
 801cccc:	2501      	movs	r5, #1
 801ccce:	3c04      	subs	r4, #4
 801ccd0:	6822      	ldr	r2, [r4, #0]
 801ccd2:	f000 000f 	and.w	r0, r0, #15
 801ccd6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ccda:	6022      	str	r2, [r4, #0]
 801ccdc:	e7b7      	b.n	801cc4e <__hexnan+0x7a>
 801ccde:	2508      	movs	r5, #8
 801cce0:	e7b5      	b.n	801cc4e <__hexnan+0x7a>
 801cce2:	9b01      	ldr	r3, [sp, #4]
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d0df      	beq.n	801cca8 <__hexnan+0xd4>
 801cce8:	f04f 32ff 	mov.w	r2, #4294967295
 801ccec:	f1c3 0320 	rsb	r3, r3, #32
 801ccf0:	fa22 f303 	lsr.w	r3, r2, r3
 801ccf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801ccf8:	401a      	ands	r2, r3
 801ccfa:	f846 2c04 	str.w	r2, [r6, #-4]
 801ccfe:	e7d3      	b.n	801cca8 <__hexnan+0xd4>
 801cd00:	3f04      	subs	r7, #4
 801cd02:	e7d1      	b.n	801cca8 <__hexnan+0xd4>
 801cd04:	2004      	movs	r0, #4
 801cd06:	b007      	add	sp, #28
 801cd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cd0c <_localeconv_r>:
 801cd0c:	4800      	ldr	r0, [pc, #0]	; (801cd10 <_localeconv_r+0x4>)
 801cd0e:	4770      	bx	lr
 801cd10:	20000178 	.word	0x20000178

0801cd14 <__retarget_lock_init_recursive>:
 801cd14:	4770      	bx	lr

0801cd16 <__retarget_lock_acquire_recursive>:
 801cd16:	4770      	bx	lr

0801cd18 <__retarget_lock_release_recursive>:
 801cd18:	4770      	bx	lr
	...

0801cd1c <_lseek_r>:
 801cd1c:	b538      	push	{r3, r4, r5, lr}
 801cd1e:	4d07      	ldr	r5, [pc, #28]	; (801cd3c <_lseek_r+0x20>)
 801cd20:	4604      	mov	r4, r0
 801cd22:	4608      	mov	r0, r1
 801cd24:	4611      	mov	r1, r2
 801cd26:	2200      	movs	r2, #0
 801cd28:	602a      	str	r2, [r5, #0]
 801cd2a:	461a      	mov	r2, r3
 801cd2c:	f7e4 fd6e 	bl	800180c <_lseek>
 801cd30:	1c43      	adds	r3, r0, #1
 801cd32:	d102      	bne.n	801cd3a <_lseek_r+0x1e>
 801cd34:	682b      	ldr	r3, [r5, #0]
 801cd36:	b103      	cbz	r3, 801cd3a <_lseek_r+0x1e>
 801cd38:	6023      	str	r3, [r4, #0]
 801cd3a:	bd38      	pop	{r3, r4, r5, pc}
 801cd3c:	200280fc 	.word	0x200280fc

0801cd40 <__swhatbuf_r>:
 801cd40:	b570      	push	{r4, r5, r6, lr}
 801cd42:	460e      	mov	r6, r1
 801cd44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd48:	2900      	cmp	r1, #0
 801cd4a:	b096      	sub	sp, #88	; 0x58
 801cd4c:	4614      	mov	r4, r2
 801cd4e:	461d      	mov	r5, r3
 801cd50:	da07      	bge.n	801cd62 <__swhatbuf_r+0x22>
 801cd52:	2300      	movs	r3, #0
 801cd54:	602b      	str	r3, [r5, #0]
 801cd56:	89b3      	ldrh	r3, [r6, #12]
 801cd58:	061a      	lsls	r2, r3, #24
 801cd5a:	d410      	bmi.n	801cd7e <__swhatbuf_r+0x3e>
 801cd5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cd60:	e00e      	b.n	801cd80 <__swhatbuf_r+0x40>
 801cd62:	466a      	mov	r2, sp
 801cd64:	f001 fce2 	bl	801e72c <_fstat_r>
 801cd68:	2800      	cmp	r0, #0
 801cd6a:	dbf2      	blt.n	801cd52 <__swhatbuf_r+0x12>
 801cd6c:	9a01      	ldr	r2, [sp, #4]
 801cd6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cd72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cd76:	425a      	negs	r2, r3
 801cd78:	415a      	adcs	r2, r3
 801cd7a:	602a      	str	r2, [r5, #0]
 801cd7c:	e7ee      	b.n	801cd5c <__swhatbuf_r+0x1c>
 801cd7e:	2340      	movs	r3, #64	; 0x40
 801cd80:	2000      	movs	r0, #0
 801cd82:	6023      	str	r3, [r4, #0]
 801cd84:	b016      	add	sp, #88	; 0x58
 801cd86:	bd70      	pop	{r4, r5, r6, pc}

0801cd88 <__smakebuf_r>:
 801cd88:	898b      	ldrh	r3, [r1, #12]
 801cd8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cd8c:	079d      	lsls	r5, r3, #30
 801cd8e:	4606      	mov	r6, r0
 801cd90:	460c      	mov	r4, r1
 801cd92:	d507      	bpl.n	801cda4 <__smakebuf_r+0x1c>
 801cd94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cd98:	6023      	str	r3, [r4, #0]
 801cd9a:	6123      	str	r3, [r4, #16]
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	6163      	str	r3, [r4, #20]
 801cda0:	b002      	add	sp, #8
 801cda2:	bd70      	pop	{r4, r5, r6, pc}
 801cda4:	ab01      	add	r3, sp, #4
 801cda6:	466a      	mov	r2, sp
 801cda8:	f7ff ffca 	bl	801cd40 <__swhatbuf_r>
 801cdac:	9900      	ldr	r1, [sp, #0]
 801cdae:	4605      	mov	r5, r0
 801cdb0:	4630      	mov	r0, r6
 801cdb2:	f000 fd5d 	bl	801d870 <_malloc_r>
 801cdb6:	b948      	cbnz	r0, 801cdcc <__smakebuf_r+0x44>
 801cdb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cdbc:	059a      	lsls	r2, r3, #22
 801cdbe:	d4ef      	bmi.n	801cda0 <__smakebuf_r+0x18>
 801cdc0:	f023 0303 	bic.w	r3, r3, #3
 801cdc4:	f043 0302 	orr.w	r3, r3, #2
 801cdc8:	81a3      	strh	r3, [r4, #12]
 801cdca:	e7e3      	b.n	801cd94 <__smakebuf_r+0xc>
 801cdcc:	4b0d      	ldr	r3, [pc, #52]	; (801ce04 <__smakebuf_r+0x7c>)
 801cdce:	62b3      	str	r3, [r6, #40]	; 0x28
 801cdd0:	89a3      	ldrh	r3, [r4, #12]
 801cdd2:	6020      	str	r0, [r4, #0]
 801cdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cdd8:	81a3      	strh	r3, [r4, #12]
 801cdda:	9b00      	ldr	r3, [sp, #0]
 801cddc:	6163      	str	r3, [r4, #20]
 801cdde:	9b01      	ldr	r3, [sp, #4]
 801cde0:	6120      	str	r0, [r4, #16]
 801cde2:	b15b      	cbz	r3, 801cdfc <__smakebuf_r+0x74>
 801cde4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cde8:	4630      	mov	r0, r6
 801cdea:	f001 fcb1 	bl	801e750 <_isatty_r>
 801cdee:	b128      	cbz	r0, 801cdfc <__smakebuf_r+0x74>
 801cdf0:	89a3      	ldrh	r3, [r4, #12]
 801cdf2:	f023 0303 	bic.w	r3, r3, #3
 801cdf6:	f043 0301 	orr.w	r3, r3, #1
 801cdfa:	81a3      	strh	r3, [r4, #12]
 801cdfc:	89a0      	ldrh	r0, [r4, #12]
 801cdfe:	4305      	orrs	r5, r0
 801ce00:	81a5      	strh	r5, [r4, #12]
 801ce02:	e7cd      	b.n	801cda0 <__smakebuf_r+0x18>
 801ce04:	0801c469 	.word	0x0801c469

0801ce08 <malloc>:
 801ce08:	4b02      	ldr	r3, [pc, #8]	; (801ce14 <malloc+0xc>)
 801ce0a:	4601      	mov	r1, r0
 801ce0c:	6818      	ldr	r0, [r3, #0]
 801ce0e:	f000 bd2f 	b.w	801d870 <_malloc_r>
 801ce12:	bf00      	nop
 801ce14:	20000020 	.word	0x20000020

0801ce18 <__ascii_mbtowc>:
 801ce18:	b082      	sub	sp, #8
 801ce1a:	b901      	cbnz	r1, 801ce1e <__ascii_mbtowc+0x6>
 801ce1c:	a901      	add	r1, sp, #4
 801ce1e:	b142      	cbz	r2, 801ce32 <__ascii_mbtowc+0x1a>
 801ce20:	b14b      	cbz	r3, 801ce36 <__ascii_mbtowc+0x1e>
 801ce22:	7813      	ldrb	r3, [r2, #0]
 801ce24:	600b      	str	r3, [r1, #0]
 801ce26:	7812      	ldrb	r2, [r2, #0]
 801ce28:	1e10      	subs	r0, r2, #0
 801ce2a:	bf18      	it	ne
 801ce2c:	2001      	movne	r0, #1
 801ce2e:	b002      	add	sp, #8
 801ce30:	4770      	bx	lr
 801ce32:	4610      	mov	r0, r2
 801ce34:	e7fb      	b.n	801ce2e <__ascii_mbtowc+0x16>
 801ce36:	f06f 0001 	mvn.w	r0, #1
 801ce3a:	e7f8      	b.n	801ce2e <__ascii_mbtowc+0x16>

0801ce3c <_Balloc>:
 801ce3c:	b570      	push	{r4, r5, r6, lr}
 801ce3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801ce40:	4604      	mov	r4, r0
 801ce42:	460d      	mov	r5, r1
 801ce44:	b976      	cbnz	r6, 801ce64 <_Balloc+0x28>
 801ce46:	2010      	movs	r0, #16
 801ce48:	f7ff ffde 	bl	801ce08 <malloc>
 801ce4c:	4602      	mov	r2, r0
 801ce4e:	6260      	str	r0, [r4, #36]	; 0x24
 801ce50:	b920      	cbnz	r0, 801ce5c <_Balloc+0x20>
 801ce52:	4b18      	ldr	r3, [pc, #96]	; (801ceb4 <_Balloc+0x78>)
 801ce54:	4818      	ldr	r0, [pc, #96]	; (801ceb8 <_Balloc+0x7c>)
 801ce56:	2166      	movs	r1, #102	; 0x66
 801ce58:	f7fe fb72 	bl	801b540 <__assert_func>
 801ce5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ce60:	6006      	str	r6, [r0, #0]
 801ce62:	60c6      	str	r6, [r0, #12]
 801ce64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801ce66:	68f3      	ldr	r3, [r6, #12]
 801ce68:	b183      	cbz	r3, 801ce8c <_Balloc+0x50>
 801ce6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ce6c:	68db      	ldr	r3, [r3, #12]
 801ce6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ce72:	b9b8      	cbnz	r0, 801cea4 <_Balloc+0x68>
 801ce74:	2101      	movs	r1, #1
 801ce76:	fa01 f605 	lsl.w	r6, r1, r5
 801ce7a:	1d72      	adds	r2, r6, #5
 801ce7c:	0092      	lsls	r2, r2, #2
 801ce7e:	4620      	mov	r0, r4
 801ce80:	f000 fc97 	bl	801d7b2 <_calloc_r>
 801ce84:	b160      	cbz	r0, 801cea0 <_Balloc+0x64>
 801ce86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ce8a:	e00e      	b.n	801ceaa <_Balloc+0x6e>
 801ce8c:	2221      	movs	r2, #33	; 0x21
 801ce8e:	2104      	movs	r1, #4
 801ce90:	4620      	mov	r0, r4
 801ce92:	f000 fc8e 	bl	801d7b2 <_calloc_r>
 801ce96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ce98:	60f0      	str	r0, [r6, #12]
 801ce9a:	68db      	ldr	r3, [r3, #12]
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d1e4      	bne.n	801ce6a <_Balloc+0x2e>
 801cea0:	2000      	movs	r0, #0
 801cea2:	bd70      	pop	{r4, r5, r6, pc}
 801cea4:	6802      	ldr	r2, [r0, #0]
 801cea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ceaa:	2300      	movs	r3, #0
 801ceac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ceb0:	e7f7      	b.n	801cea2 <_Balloc+0x66>
 801ceb2:	bf00      	nop
 801ceb4:	080225e7 	.word	0x080225e7
 801ceb8:	0802284c 	.word	0x0802284c

0801cebc <_Bfree>:
 801cebc:	b570      	push	{r4, r5, r6, lr}
 801cebe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cec0:	4605      	mov	r5, r0
 801cec2:	460c      	mov	r4, r1
 801cec4:	b976      	cbnz	r6, 801cee4 <_Bfree+0x28>
 801cec6:	2010      	movs	r0, #16
 801cec8:	f7ff ff9e 	bl	801ce08 <malloc>
 801cecc:	4602      	mov	r2, r0
 801cece:	6268      	str	r0, [r5, #36]	; 0x24
 801ced0:	b920      	cbnz	r0, 801cedc <_Bfree+0x20>
 801ced2:	4b09      	ldr	r3, [pc, #36]	; (801cef8 <_Bfree+0x3c>)
 801ced4:	4809      	ldr	r0, [pc, #36]	; (801cefc <_Bfree+0x40>)
 801ced6:	218a      	movs	r1, #138	; 0x8a
 801ced8:	f7fe fb32 	bl	801b540 <__assert_func>
 801cedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cee0:	6006      	str	r6, [r0, #0]
 801cee2:	60c6      	str	r6, [r0, #12]
 801cee4:	b13c      	cbz	r4, 801cef6 <_Bfree+0x3a>
 801cee6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cee8:	6862      	ldr	r2, [r4, #4]
 801ceea:	68db      	ldr	r3, [r3, #12]
 801ceec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cef0:	6021      	str	r1, [r4, #0]
 801cef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cef6:	bd70      	pop	{r4, r5, r6, pc}
 801cef8:	080225e7 	.word	0x080225e7
 801cefc:	0802284c 	.word	0x0802284c

0801cf00 <__multadd>:
 801cf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf04:	690e      	ldr	r6, [r1, #16]
 801cf06:	4607      	mov	r7, r0
 801cf08:	4698      	mov	r8, r3
 801cf0a:	460c      	mov	r4, r1
 801cf0c:	f101 0014 	add.w	r0, r1, #20
 801cf10:	2300      	movs	r3, #0
 801cf12:	6805      	ldr	r5, [r0, #0]
 801cf14:	b2a9      	uxth	r1, r5
 801cf16:	fb02 8101 	mla	r1, r2, r1, r8
 801cf1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801cf1e:	0c2d      	lsrs	r5, r5, #16
 801cf20:	fb02 c505 	mla	r5, r2, r5, ip
 801cf24:	b289      	uxth	r1, r1
 801cf26:	3301      	adds	r3, #1
 801cf28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801cf2c:	429e      	cmp	r6, r3
 801cf2e:	f840 1b04 	str.w	r1, [r0], #4
 801cf32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801cf36:	dcec      	bgt.n	801cf12 <__multadd+0x12>
 801cf38:	f1b8 0f00 	cmp.w	r8, #0
 801cf3c:	d022      	beq.n	801cf84 <__multadd+0x84>
 801cf3e:	68a3      	ldr	r3, [r4, #8]
 801cf40:	42b3      	cmp	r3, r6
 801cf42:	dc19      	bgt.n	801cf78 <__multadd+0x78>
 801cf44:	6861      	ldr	r1, [r4, #4]
 801cf46:	4638      	mov	r0, r7
 801cf48:	3101      	adds	r1, #1
 801cf4a:	f7ff ff77 	bl	801ce3c <_Balloc>
 801cf4e:	4605      	mov	r5, r0
 801cf50:	b928      	cbnz	r0, 801cf5e <__multadd+0x5e>
 801cf52:	4602      	mov	r2, r0
 801cf54:	4b0d      	ldr	r3, [pc, #52]	; (801cf8c <__multadd+0x8c>)
 801cf56:	480e      	ldr	r0, [pc, #56]	; (801cf90 <__multadd+0x90>)
 801cf58:	21b5      	movs	r1, #181	; 0xb5
 801cf5a:	f7fe faf1 	bl	801b540 <__assert_func>
 801cf5e:	6922      	ldr	r2, [r4, #16]
 801cf60:	3202      	adds	r2, #2
 801cf62:	f104 010c 	add.w	r1, r4, #12
 801cf66:	0092      	lsls	r2, r2, #2
 801cf68:	300c      	adds	r0, #12
 801cf6a:	f7fc fb37 	bl	80195dc <memcpy>
 801cf6e:	4621      	mov	r1, r4
 801cf70:	4638      	mov	r0, r7
 801cf72:	f7ff ffa3 	bl	801cebc <_Bfree>
 801cf76:	462c      	mov	r4, r5
 801cf78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801cf7c:	3601      	adds	r6, #1
 801cf7e:	f8c3 8014 	str.w	r8, [r3, #20]
 801cf82:	6126      	str	r6, [r4, #16]
 801cf84:	4620      	mov	r0, r4
 801cf86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf8a:	bf00      	nop
 801cf8c:	08022758 	.word	0x08022758
 801cf90:	0802284c 	.word	0x0802284c

0801cf94 <__s2b>:
 801cf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf98:	460c      	mov	r4, r1
 801cf9a:	4615      	mov	r5, r2
 801cf9c:	461f      	mov	r7, r3
 801cf9e:	2209      	movs	r2, #9
 801cfa0:	3308      	adds	r3, #8
 801cfa2:	4606      	mov	r6, r0
 801cfa4:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	2201      	movs	r2, #1
 801cfac:	429a      	cmp	r2, r3
 801cfae:	db09      	blt.n	801cfc4 <__s2b+0x30>
 801cfb0:	4630      	mov	r0, r6
 801cfb2:	f7ff ff43 	bl	801ce3c <_Balloc>
 801cfb6:	b940      	cbnz	r0, 801cfca <__s2b+0x36>
 801cfb8:	4602      	mov	r2, r0
 801cfba:	4b19      	ldr	r3, [pc, #100]	; (801d020 <__s2b+0x8c>)
 801cfbc:	4819      	ldr	r0, [pc, #100]	; (801d024 <__s2b+0x90>)
 801cfbe:	21ce      	movs	r1, #206	; 0xce
 801cfc0:	f7fe fabe 	bl	801b540 <__assert_func>
 801cfc4:	0052      	lsls	r2, r2, #1
 801cfc6:	3101      	adds	r1, #1
 801cfc8:	e7f0      	b.n	801cfac <__s2b+0x18>
 801cfca:	9b08      	ldr	r3, [sp, #32]
 801cfcc:	6143      	str	r3, [r0, #20]
 801cfce:	2d09      	cmp	r5, #9
 801cfd0:	f04f 0301 	mov.w	r3, #1
 801cfd4:	6103      	str	r3, [r0, #16]
 801cfd6:	dd16      	ble.n	801d006 <__s2b+0x72>
 801cfd8:	f104 0909 	add.w	r9, r4, #9
 801cfdc:	46c8      	mov	r8, r9
 801cfde:	442c      	add	r4, r5
 801cfe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cfe4:	4601      	mov	r1, r0
 801cfe6:	3b30      	subs	r3, #48	; 0x30
 801cfe8:	220a      	movs	r2, #10
 801cfea:	4630      	mov	r0, r6
 801cfec:	f7ff ff88 	bl	801cf00 <__multadd>
 801cff0:	45a0      	cmp	r8, r4
 801cff2:	d1f5      	bne.n	801cfe0 <__s2b+0x4c>
 801cff4:	f1a5 0408 	sub.w	r4, r5, #8
 801cff8:	444c      	add	r4, r9
 801cffa:	1b2d      	subs	r5, r5, r4
 801cffc:	1963      	adds	r3, r4, r5
 801cffe:	42bb      	cmp	r3, r7
 801d000:	db04      	blt.n	801d00c <__s2b+0x78>
 801d002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d006:	340a      	adds	r4, #10
 801d008:	2509      	movs	r5, #9
 801d00a:	e7f6      	b.n	801cffa <__s2b+0x66>
 801d00c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d010:	4601      	mov	r1, r0
 801d012:	3b30      	subs	r3, #48	; 0x30
 801d014:	220a      	movs	r2, #10
 801d016:	4630      	mov	r0, r6
 801d018:	f7ff ff72 	bl	801cf00 <__multadd>
 801d01c:	e7ee      	b.n	801cffc <__s2b+0x68>
 801d01e:	bf00      	nop
 801d020:	08022758 	.word	0x08022758
 801d024:	0802284c 	.word	0x0802284c

0801d028 <__hi0bits>:
 801d028:	0c03      	lsrs	r3, r0, #16
 801d02a:	041b      	lsls	r3, r3, #16
 801d02c:	b9d3      	cbnz	r3, 801d064 <__hi0bits+0x3c>
 801d02e:	0400      	lsls	r0, r0, #16
 801d030:	2310      	movs	r3, #16
 801d032:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d036:	bf04      	itt	eq
 801d038:	0200      	lsleq	r0, r0, #8
 801d03a:	3308      	addeq	r3, #8
 801d03c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d040:	bf04      	itt	eq
 801d042:	0100      	lsleq	r0, r0, #4
 801d044:	3304      	addeq	r3, #4
 801d046:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d04a:	bf04      	itt	eq
 801d04c:	0080      	lsleq	r0, r0, #2
 801d04e:	3302      	addeq	r3, #2
 801d050:	2800      	cmp	r0, #0
 801d052:	db05      	blt.n	801d060 <__hi0bits+0x38>
 801d054:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d058:	f103 0301 	add.w	r3, r3, #1
 801d05c:	bf08      	it	eq
 801d05e:	2320      	moveq	r3, #32
 801d060:	4618      	mov	r0, r3
 801d062:	4770      	bx	lr
 801d064:	2300      	movs	r3, #0
 801d066:	e7e4      	b.n	801d032 <__hi0bits+0xa>

0801d068 <__lo0bits>:
 801d068:	6803      	ldr	r3, [r0, #0]
 801d06a:	f013 0207 	ands.w	r2, r3, #7
 801d06e:	4601      	mov	r1, r0
 801d070:	d00b      	beq.n	801d08a <__lo0bits+0x22>
 801d072:	07da      	lsls	r2, r3, #31
 801d074:	d424      	bmi.n	801d0c0 <__lo0bits+0x58>
 801d076:	0798      	lsls	r0, r3, #30
 801d078:	bf49      	itett	mi
 801d07a:	085b      	lsrmi	r3, r3, #1
 801d07c:	089b      	lsrpl	r3, r3, #2
 801d07e:	2001      	movmi	r0, #1
 801d080:	600b      	strmi	r3, [r1, #0]
 801d082:	bf5c      	itt	pl
 801d084:	600b      	strpl	r3, [r1, #0]
 801d086:	2002      	movpl	r0, #2
 801d088:	4770      	bx	lr
 801d08a:	b298      	uxth	r0, r3
 801d08c:	b9b0      	cbnz	r0, 801d0bc <__lo0bits+0x54>
 801d08e:	0c1b      	lsrs	r3, r3, #16
 801d090:	2010      	movs	r0, #16
 801d092:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d096:	bf04      	itt	eq
 801d098:	0a1b      	lsreq	r3, r3, #8
 801d09a:	3008      	addeq	r0, #8
 801d09c:	071a      	lsls	r2, r3, #28
 801d09e:	bf04      	itt	eq
 801d0a0:	091b      	lsreq	r3, r3, #4
 801d0a2:	3004      	addeq	r0, #4
 801d0a4:	079a      	lsls	r2, r3, #30
 801d0a6:	bf04      	itt	eq
 801d0a8:	089b      	lsreq	r3, r3, #2
 801d0aa:	3002      	addeq	r0, #2
 801d0ac:	07da      	lsls	r2, r3, #31
 801d0ae:	d403      	bmi.n	801d0b8 <__lo0bits+0x50>
 801d0b0:	085b      	lsrs	r3, r3, #1
 801d0b2:	f100 0001 	add.w	r0, r0, #1
 801d0b6:	d005      	beq.n	801d0c4 <__lo0bits+0x5c>
 801d0b8:	600b      	str	r3, [r1, #0]
 801d0ba:	4770      	bx	lr
 801d0bc:	4610      	mov	r0, r2
 801d0be:	e7e8      	b.n	801d092 <__lo0bits+0x2a>
 801d0c0:	2000      	movs	r0, #0
 801d0c2:	4770      	bx	lr
 801d0c4:	2020      	movs	r0, #32
 801d0c6:	4770      	bx	lr

0801d0c8 <__i2b>:
 801d0c8:	b510      	push	{r4, lr}
 801d0ca:	460c      	mov	r4, r1
 801d0cc:	2101      	movs	r1, #1
 801d0ce:	f7ff feb5 	bl	801ce3c <_Balloc>
 801d0d2:	4602      	mov	r2, r0
 801d0d4:	b928      	cbnz	r0, 801d0e2 <__i2b+0x1a>
 801d0d6:	4b05      	ldr	r3, [pc, #20]	; (801d0ec <__i2b+0x24>)
 801d0d8:	4805      	ldr	r0, [pc, #20]	; (801d0f0 <__i2b+0x28>)
 801d0da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d0de:	f7fe fa2f 	bl	801b540 <__assert_func>
 801d0e2:	2301      	movs	r3, #1
 801d0e4:	6144      	str	r4, [r0, #20]
 801d0e6:	6103      	str	r3, [r0, #16]
 801d0e8:	bd10      	pop	{r4, pc}
 801d0ea:	bf00      	nop
 801d0ec:	08022758 	.word	0x08022758
 801d0f0:	0802284c 	.word	0x0802284c

0801d0f4 <__multiply>:
 801d0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0f8:	4614      	mov	r4, r2
 801d0fa:	690a      	ldr	r2, [r1, #16]
 801d0fc:	6923      	ldr	r3, [r4, #16]
 801d0fe:	429a      	cmp	r2, r3
 801d100:	bfb8      	it	lt
 801d102:	460b      	movlt	r3, r1
 801d104:	460d      	mov	r5, r1
 801d106:	bfbc      	itt	lt
 801d108:	4625      	movlt	r5, r4
 801d10a:	461c      	movlt	r4, r3
 801d10c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d110:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d114:	68ab      	ldr	r3, [r5, #8]
 801d116:	6869      	ldr	r1, [r5, #4]
 801d118:	eb0a 0709 	add.w	r7, sl, r9
 801d11c:	42bb      	cmp	r3, r7
 801d11e:	b085      	sub	sp, #20
 801d120:	bfb8      	it	lt
 801d122:	3101      	addlt	r1, #1
 801d124:	f7ff fe8a 	bl	801ce3c <_Balloc>
 801d128:	b930      	cbnz	r0, 801d138 <__multiply+0x44>
 801d12a:	4602      	mov	r2, r0
 801d12c:	4b42      	ldr	r3, [pc, #264]	; (801d238 <__multiply+0x144>)
 801d12e:	4843      	ldr	r0, [pc, #268]	; (801d23c <__multiply+0x148>)
 801d130:	f240 115d 	movw	r1, #349	; 0x15d
 801d134:	f7fe fa04 	bl	801b540 <__assert_func>
 801d138:	f100 0614 	add.w	r6, r0, #20
 801d13c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d140:	4633      	mov	r3, r6
 801d142:	2200      	movs	r2, #0
 801d144:	4543      	cmp	r3, r8
 801d146:	d31e      	bcc.n	801d186 <__multiply+0x92>
 801d148:	f105 0c14 	add.w	ip, r5, #20
 801d14c:	f104 0314 	add.w	r3, r4, #20
 801d150:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d154:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d158:	9202      	str	r2, [sp, #8]
 801d15a:	ebac 0205 	sub.w	r2, ip, r5
 801d15e:	3a15      	subs	r2, #21
 801d160:	f022 0203 	bic.w	r2, r2, #3
 801d164:	3204      	adds	r2, #4
 801d166:	f105 0115 	add.w	r1, r5, #21
 801d16a:	458c      	cmp	ip, r1
 801d16c:	bf38      	it	cc
 801d16e:	2204      	movcc	r2, #4
 801d170:	9201      	str	r2, [sp, #4]
 801d172:	9a02      	ldr	r2, [sp, #8]
 801d174:	9303      	str	r3, [sp, #12]
 801d176:	429a      	cmp	r2, r3
 801d178:	d808      	bhi.n	801d18c <__multiply+0x98>
 801d17a:	2f00      	cmp	r7, #0
 801d17c:	dc55      	bgt.n	801d22a <__multiply+0x136>
 801d17e:	6107      	str	r7, [r0, #16]
 801d180:	b005      	add	sp, #20
 801d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d186:	f843 2b04 	str.w	r2, [r3], #4
 801d18a:	e7db      	b.n	801d144 <__multiply+0x50>
 801d18c:	f8b3 a000 	ldrh.w	sl, [r3]
 801d190:	f1ba 0f00 	cmp.w	sl, #0
 801d194:	d020      	beq.n	801d1d8 <__multiply+0xe4>
 801d196:	f105 0e14 	add.w	lr, r5, #20
 801d19a:	46b1      	mov	r9, r6
 801d19c:	2200      	movs	r2, #0
 801d19e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d1a2:	f8d9 b000 	ldr.w	fp, [r9]
 801d1a6:	b2a1      	uxth	r1, r4
 801d1a8:	fa1f fb8b 	uxth.w	fp, fp
 801d1ac:	fb0a b101 	mla	r1, sl, r1, fp
 801d1b0:	4411      	add	r1, r2
 801d1b2:	f8d9 2000 	ldr.w	r2, [r9]
 801d1b6:	0c24      	lsrs	r4, r4, #16
 801d1b8:	0c12      	lsrs	r2, r2, #16
 801d1ba:	fb0a 2404 	mla	r4, sl, r4, r2
 801d1be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d1c2:	b289      	uxth	r1, r1
 801d1c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d1c8:	45f4      	cmp	ip, lr
 801d1ca:	f849 1b04 	str.w	r1, [r9], #4
 801d1ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d1d2:	d8e4      	bhi.n	801d19e <__multiply+0xaa>
 801d1d4:	9901      	ldr	r1, [sp, #4]
 801d1d6:	5072      	str	r2, [r6, r1]
 801d1d8:	9a03      	ldr	r2, [sp, #12]
 801d1da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d1de:	3304      	adds	r3, #4
 801d1e0:	f1b9 0f00 	cmp.w	r9, #0
 801d1e4:	d01f      	beq.n	801d226 <__multiply+0x132>
 801d1e6:	6834      	ldr	r4, [r6, #0]
 801d1e8:	f105 0114 	add.w	r1, r5, #20
 801d1ec:	46b6      	mov	lr, r6
 801d1ee:	f04f 0a00 	mov.w	sl, #0
 801d1f2:	880a      	ldrh	r2, [r1, #0]
 801d1f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d1f8:	fb09 b202 	mla	r2, r9, r2, fp
 801d1fc:	4492      	add	sl, r2
 801d1fe:	b2a4      	uxth	r4, r4
 801d200:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d204:	f84e 4b04 	str.w	r4, [lr], #4
 801d208:	f851 4b04 	ldr.w	r4, [r1], #4
 801d20c:	f8be 2000 	ldrh.w	r2, [lr]
 801d210:	0c24      	lsrs	r4, r4, #16
 801d212:	fb09 2404 	mla	r4, r9, r4, r2
 801d216:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d21a:	458c      	cmp	ip, r1
 801d21c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d220:	d8e7      	bhi.n	801d1f2 <__multiply+0xfe>
 801d222:	9a01      	ldr	r2, [sp, #4]
 801d224:	50b4      	str	r4, [r6, r2]
 801d226:	3604      	adds	r6, #4
 801d228:	e7a3      	b.n	801d172 <__multiply+0x7e>
 801d22a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d22e:	2b00      	cmp	r3, #0
 801d230:	d1a5      	bne.n	801d17e <__multiply+0x8a>
 801d232:	3f01      	subs	r7, #1
 801d234:	e7a1      	b.n	801d17a <__multiply+0x86>
 801d236:	bf00      	nop
 801d238:	08022758 	.word	0x08022758
 801d23c:	0802284c 	.word	0x0802284c

0801d240 <__pow5mult>:
 801d240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d244:	4615      	mov	r5, r2
 801d246:	f012 0203 	ands.w	r2, r2, #3
 801d24a:	4606      	mov	r6, r0
 801d24c:	460f      	mov	r7, r1
 801d24e:	d007      	beq.n	801d260 <__pow5mult+0x20>
 801d250:	4c25      	ldr	r4, [pc, #148]	; (801d2e8 <__pow5mult+0xa8>)
 801d252:	3a01      	subs	r2, #1
 801d254:	2300      	movs	r3, #0
 801d256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d25a:	f7ff fe51 	bl	801cf00 <__multadd>
 801d25e:	4607      	mov	r7, r0
 801d260:	10ad      	asrs	r5, r5, #2
 801d262:	d03d      	beq.n	801d2e0 <__pow5mult+0xa0>
 801d264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d266:	b97c      	cbnz	r4, 801d288 <__pow5mult+0x48>
 801d268:	2010      	movs	r0, #16
 801d26a:	f7ff fdcd 	bl	801ce08 <malloc>
 801d26e:	4602      	mov	r2, r0
 801d270:	6270      	str	r0, [r6, #36]	; 0x24
 801d272:	b928      	cbnz	r0, 801d280 <__pow5mult+0x40>
 801d274:	4b1d      	ldr	r3, [pc, #116]	; (801d2ec <__pow5mult+0xac>)
 801d276:	481e      	ldr	r0, [pc, #120]	; (801d2f0 <__pow5mult+0xb0>)
 801d278:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d27c:	f7fe f960 	bl	801b540 <__assert_func>
 801d280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d284:	6004      	str	r4, [r0, #0]
 801d286:	60c4      	str	r4, [r0, #12]
 801d288:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d290:	b94c      	cbnz	r4, 801d2a6 <__pow5mult+0x66>
 801d292:	f240 2171 	movw	r1, #625	; 0x271
 801d296:	4630      	mov	r0, r6
 801d298:	f7ff ff16 	bl	801d0c8 <__i2b>
 801d29c:	2300      	movs	r3, #0
 801d29e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d2a2:	4604      	mov	r4, r0
 801d2a4:	6003      	str	r3, [r0, #0]
 801d2a6:	f04f 0900 	mov.w	r9, #0
 801d2aa:	07eb      	lsls	r3, r5, #31
 801d2ac:	d50a      	bpl.n	801d2c4 <__pow5mult+0x84>
 801d2ae:	4639      	mov	r1, r7
 801d2b0:	4622      	mov	r2, r4
 801d2b2:	4630      	mov	r0, r6
 801d2b4:	f7ff ff1e 	bl	801d0f4 <__multiply>
 801d2b8:	4639      	mov	r1, r7
 801d2ba:	4680      	mov	r8, r0
 801d2bc:	4630      	mov	r0, r6
 801d2be:	f7ff fdfd 	bl	801cebc <_Bfree>
 801d2c2:	4647      	mov	r7, r8
 801d2c4:	106d      	asrs	r5, r5, #1
 801d2c6:	d00b      	beq.n	801d2e0 <__pow5mult+0xa0>
 801d2c8:	6820      	ldr	r0, [r4, #0]
 801d2ca:	b938      	cbnz	r0, 801d2dc <__pow5mult+0x9c>
 801d2cc:	4622      	mov	r2, r4
 801d2ce:	4621      	mov	r1, r4
 801d2d0:	4630      	mov	r0, r6
 801d2d2:	f7ff ff0f 	bl	801d0f4 <__multiply>
 801d2d6:	6020      	str	r0, [r4, #0]
 801d2d8:	f8c0 9000 	str.w	r9, [r0]
 801d2dc:	4604      	mov	r4, r0
 801d2de:	e7e4      	b.n	801d2aa <__pow5mult+0x6a>
 801d2e0:	4638      	mov	r0, r7
 801d2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2e6:	bf00      	nop
 801d2e8:	080229a0 	.word	0x080229a0
 801d2ec:	080225e7 	.word	0x080225e7
 801d2f0:	0802284c 	.word	0x0802284c

0801d2f4 <__lshift>:
 801d2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2f8:	460c      	mov	r4, r1
 801d2fa:	6849      	ldr	r1, [r1, #4]
 801d2fc:	6923      	ldr	r3, [r4, #16]
 801d2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d302:	68a3      	ldr	r3, [r4, #8]
 801d304:	4607      	mov	r7, r0
 801d306:	4691      	mov	r9, r2
 801d308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d30c:	f108 0601 	add.w	r6, r8, #1
 801d310:	42b3      	cmp	r3, r6
 801d312:	db0b      	blt.n	801d32c <__lshift+0x38>
 801d314:	4638      	mov	r0, r7
 801d316:	f7ff fd91 	bl	801ce3c <_Balloc>
 801d31a:	4605      	mov	r5, r0
 801d31c:	b948      	cbnz	r0, 801d332 <__lshift+0x3e>
 801d31e:	4602      	mov	r2, r0
 801d320:	4b28      	ldr	r3, [pc, #160]	; (801d3c4 <__lshift+0xd0>)
 801d322:	4829      	ldr	r0, [pc, #164]	; (801d3c8 <__lshift+0xd4>)
 801d324:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d328:	f7fe f90a 	bl	801b540 <__assert_func>
 801d32c:	3101      	adds	r1, #1
 801d32e:	005b      	lsls	r3, r3, #1
 801d330:	e7ee      	b.n	801d310 <__lshift+0x1c>
 801d332:	2300      	movs	r3, #0
 801d334:	f100 0114 	add.w	r1, r0, #20
 801d338:	f100 0210 	add.w	r2, r0, #16
 801d33c:	4618      	mov	r0, r3
 801d33e:	4553      	cmp	r3, sl
 801d340:	db33      	blt.n	801d3aa <__lshift+0xb6>
 801d342:	6920      	ldr	r0, [r4, #16]
 801d344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d348:	f104 0314 	add.w	r3, r4, #20
 801d34c:	f019 091f 	ands.w	r9, r9, #31
 801d350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d358:	d02b      	beq.n	801d3b2 <__lshift+0xbe>
 801d35a:	f1c9 0e20 	rsb	lr, r9, #32
 801d35e:	468a      	mov	sl, r1
 801d360:	2200      	movs	r2, #0
 801d362:	6818      	ldr	r0, [r3, #0]
 801d364:	fa00 f009 	lsl.w	r0, r0, r9
 801d368:	4302      	orrs	r2, r0
 801d36a:	f84a 2b04 	str.w	r2, [sl], #4
 801d36e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d372:	459c      	cmp	ip, r3
 801d374:	fa22 f20e 	lsr.w	r2, r2, lr
 801d378:	d8f3      	bhi.n	801d362 <__lshift+0x6e>
 801d37a:	ebac 0304 	sub.w	r3, ip, r4
 801d37e:	3b15      	subs	r3, #21
 801d380:	f023 0303 	bic.w	r3, r3, #3
 801d384:	3304      	adds	r3, #4
 801d386:	f104 0015 	add.w	r0, r4, #21
 801d38a:	4584      	cmp	ip, r0
 801d38c:	bf38      	it	cc
 801d38e:	2304      	movcc	r3, #4
 801d390:	50ca      	str	r2, [r1, r3]
 801d392:	b10a      	cbz	r2, 801d398 <__lshift+0xa4>
 801d394:	f108 0602 	add.w	r6, r8, #2
 801d398:	3e01      	subs	r6, #1
 801d39a:	4638      	mov	r0, r7
 801d39c:	612e      	str	r6, [r5, #16]
 801d39e:	4621      	mov	r1, r4
 801d3a0:	f7ff fd8c 	bl	801cebc <_Bfree>
 801d3a4:	4628      	mov	r0, r5
 801d3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3aa:	f842 0f04 	str.w	r0, [r2, #4]!
 801d3ae:	3301      	adds	r3, #1
 801d3b0:	e7c5      	b.n	801d33e <__lshift+0x4a>
 801d3b2:	3904      	subs	r1, #4
 801d3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3b8:	f841 2f04 	str.w	r2, [r1, #4]!
 801d3bc:	459c      	cmp	ip, r3
 801d3be:	d8f9      	bhi.n	801d3b4 <__lshift+0xc0>
 801d3c0:	e7ea      	b.n	801d398 <__lshift+0xa4>
 801d3c2:	bf00      	nop
 801d3c4:	08022758 	.word	0x08022758
 801d3c8:	0802284c 	.word	0x0802284c

0801d3cc <__mcmp>:
 801d3cc:	b530      	push	{r4, r5, lr}
 801d3ce:	6902      	ldr	r2, [r0, #16]
 801d3d0:	690c      	ldr	r4, [r1, #16]
 801d3d2:	1b12      	subs	r2, r2, r4
 801d3d4:	d10e      	bne.n	801d3f4 <__mcmp+0x28>
 801d3d6:	f100 0314 	add.w	r3, r0, #20
 801d3da:	3114      	adds	r1, #20
 801d3dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d3e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d3e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d3e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d3ec:	42a5      	cmp	r5, r4
 801d3ee:	d003      	beq.n	801d3f8 <__mcmp+0x2c>
 801d3f0:	d305      	bcc.n	801d3fe <__mcmp+0x32>
 801d3f2:	2201      	movs	r2, #1
 801d3f4:	4610      	mov	r0, r2
 801d3f6:	bd30      	pop	{r4, r5, pc}
 801d3f8:	4283      	cmp	r3, r0
 801d3fa:	d3f3      	bcc.n	801d3e4 <__mcmp+0x18>
 801d3fc:	e7fa      	b.n	801d3f4 <__mcmp+0x28>
 801d3fe:	f04f 32ff 	mov.w	r2, #4294967295
 801d402:	e7f7      	b.n	801d3f4 <__mcmp+0x28>

0801d404 <__mdiff>:
 801d404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d408:	460c      	mov	r4, r1
 801d40a:	4606      	mov	r6, r0
 801d40c:	4611      	mov	r1, r2
 801d40e:	4620      	mov	r0, r4
 801d410:	4617      	mov	r7, r2
 801d412:	f7ff ffdb 	bl	801d3cc <__mcmp>
 801d416:	1e05      	subs	r5, r0, #0
 801d418:	d110      	bne.n	801d43c <__mdiff+0x38>
 801d41a:	4629      	mov	r1, r5
 801d41c:	4630      	mov	r0, r6
 801d41e:	f7ff fd0d 	bl	801ce3c <_Balloc>
 801d422:	b930      	cbnz	r0, 801d432 <__mdiff+0x2e>
 801d424:	4b39      	ldr	r3, [pc, #228]	; (801d50c <__mdiff+0x108>)
 801d426:	4602      	mov	r2, r0
 801d428:	f240 2132 	movw	r1, #562	; 0x232
 801d42c:	4838      	ldr	r0, [pc, #224]	; (801d510 <__mdiff+0x10c>)
 801d42e:	f7fe f887 	bl	801b540 <__assert_func>
 801d432:	2301      	movs	r3, #1
 801d434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d43c:	bfa4      	itt	ge
 801d43e:	463b      	movge	r3, r7
 801d440:	4627      	movge	r7, r4
 801d442:	4630      	mov	r0, r6
 801d444:	6879      	ldr	r1, [r7, #4]
 801d446:	bfa6      	itte	ge
 801d448:	461c      	movge	r4, r3
 801d44a:	2500      	movge	r5, #0
 801d44c:	2501      	movlt	r5, #1
 801d44e:	f7ff fcf5 	bl	801ce3c <_Balloc>
 801d452:	b920      	cbnz	r0, 801d45e <__mdiff+0x5a>
 801d454:	4b2d      	ldr	r3, [pc, #180]	; (801d50c <__mdiff+0x108>)
 801d456:	4602      	mov	r2, r0
 801d458:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d45c:	e7e6      	b.n	801d42c <__mdiff+0x28>
 801d45e:	693e      	ldr	r6, [r7, #16]
 801d460:	60c5      	str	r5, [r0, #12]
 801d462:	6925      	ldr	r5, [r4, #16]
 801d464:	f107 0114 	add.w	r1, r7, #20
 801d468:	f104 0914 	add.w	r9, r4, #20
 801d46c:	f100 0e14 	add.w	lr, r0, #20
 801d470:	f107 0210 	add.w	r2, r7, #16
 801d474:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d478:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d47c:	46f2      	mov	sl, lr
 801d47e:	2700      	movs	r7, #0
 801d480:	f859 3b04 	ldr.w	r3, [r9], #4
 801d484:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d488:	fa1f f883 	uxth.w	r8, r3
 801d48c:	fa17 f78b 	uxtah	r7, r7, fp
 801d490:	0c1b      	lsrs	r3, r3, #16
 801d492:	eba7 0808 	sub.w	r8, r7, r8
 801d496:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d49a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d49e:	fa1f f888 	uxth.w	r8, r8
 801d4a2:	141f      	asrs	r7, r3, #16
 801d4a4:	454d      	cmp	r5, r9
 801d4a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d4aa:	f84a 3b04 	str.w	r3, [sl], #4
 801d4ae:	d8e7      	bhi.n	801d480 <__mdiff+0x7c>
 801d4b0:	1b2b      	subs	r3, r5, r4
 801d4b2:	3b15      	subs	r3, #21
 801d4b4:	f023 0303 	bic.w	r3, r3, #3
 801d4b8:	3304      	adds	r3, #4
 801d4ba:	3415      	adds	r4, #21
 801d4bc:	42a5      	cmp	r5, r4
 801d4be:	bf38      	it	cc
 801d4c0:	2304      	movcc	r3, #4
 801d4c2:	4419      	add	r1, r3
 801d4c4:	4473      	add	r3, lr
 801d4c6:	469e      	mov	lr, r3
 801d4c8:	460d      	mov	r5, r1
 801d4ca:	4565      	cmp	r5, ip
 801d4cc:	d30e      	bcc.n	801d4ec <__mdiff+0xe8>
 801d4ce:	f10c 0203 	add.w	r2, ip, #3
 801d4d2:	1a52      	subs	r2, r2, r1
 801d4d4:	f022 0203 	bic.w	r2, r2, #3
 801d4d8:	3903      	subs	r1, #3
 801d4da:	458c      	cmp	ip, r1
 801d4dc:	bf38      	it	cc
 801d4de:	2200      	movcc	r2, #0
 801d4e0:	441a      	add	r2, r3
 801d4e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d4e6:	b17b      	cbz	r3, 801d508 <__mdiff+0x104>
 801d4e8:	6106      	str	r6, [r0, #16]
 801d4ea:	e7a5      	b.n	801d438 <__mdiff+0x34>
 801d4ec:	f855 8b04 	ldr.w	r8, [r5], #4
 801d4f0:	fa17 f488 	uxtah	r4, r7, r8
 801d4f4:	1422      	asrs	r2, r4, #16
 801d4f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d4fa:	b2a4      	uxth	r4, r4
 801d4fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d500:	f84e 4b04 	str.w	r4, [lr], #4
 801d504:	1417      	asrs	r7, r2, #16
 801d506:	e7e0      	b.n	801d4ca <__mdiff+0xc6>
 801d508:	3e01      	subs	r6, #1
 801d50a:	e7ea      	b.n	801d4e2 <__mdiff+0xde>
 801d50c:	08022758 	.word	0x08022758
 801d510:	0802284c 	.word	0x0802284c

0801d514 <__ulp>:
 801d514:	b082      	sub	sp, #8
 801d516:	ed8d 0b00 	vstr	d0, [sp]
 801d51a:	9b01      	ldr	r3, [sp, #4]
 801d51c:	4912      	ldr	r1, [pc, #72]	; (801d568 <__ulp+0x54>)
 801d51e:	4019      	ands	r1, r3
 801d520:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d524:	2900      	cmp	r1, #0
 801d526:	dd05      	ble.n	801d534 <__ulp+0x20>
 801d528:	2200      	movs	r2, #0
 801d52a:	460b      	mov	r3, r1
 801d52c:	ec43 2b10 	vmov	d0, r2, r3
 801d530:	b002      	add	sp, #8
 801d532:	4770      	bx	lr
 801d534:	4249      	negs	r1, r1
 801d536:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d53a:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d53e:	f04f 0200 	mov.w	r2, #0
 801d542:	f04f 0300 	mov.w	r3, #0
 801d546:	da04      	bge.n	801d552 <__ulp+0x3e>
 801d548:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d54c:	fa41 f300 	asr.w	r3, r1, r0
 801d550:	e7ec      	b.n	801d52c <__ulp+0x18>
 801d552:	f1a0 0114 	sub.w	r1, r0, #20
 801d556:	291e      	cmp	r1, #30
 801d558:	bfda      	itte	le
 801d55a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d55e:	fa20 f101 	lsrle.w	r1, r0, r1
 801d562:	2101      	movgt	r1, #1
 801d564:	460a      	mov	r2, r1
 801d566:	e7e1      	b.n	801d52c <__ulp+0x18>
 801d568:	7ff00000 	.word	0x7ff00000

0801d56c <__b2d>:
 801d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d56e:	6905      	ldr	r5, [r0, #16]
 801d570:	f100 0714 	add.w	r7, r0, #20
 801d574:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d578:	1f2e      	subs	r6, r5, #4
 801d57a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d57e:	4620      	mov	r0, r4
 801d580:	f7ff fd52 	bl	801d028 <__hi0bits>
 801d584:	f1c0 0320 	rsb	r3, r0, #32
 801d588:	280a      	cmp	r0, #10
 801d58a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d608 <__b2d+0x9c>
 801d58e:	600b      	str	r3, [r1, #0]
 801d590:	dc14      	bgt.n	801d5bc <__b2d+0x50>
 801d592:	f1c0 0e0b 	rsb	lr, r0, #11
 801d596:	fa24 f10e 	lsr.w	r1, r4, lr
 801d59a:	42b7      	cmp	r7, r6
 801d59c:	ea41 030c 	orr.w	r3, r1, ip
 801d5a0:	bf34      	ite	cc
 801d5a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d5a6:	2100      	movcs	r1, #0
 801d5a8:	3015      	adds	r0, #21
 801d5aa:	fa04 f000 	lsl.w	r0, r4, r0
 801d5ae:	fa21 f10e 	lsr.w	r1, r1, lr
 801d5b2:	ea40 0201 	orr.w	r2, r0, r1
 801d5b6:	ec43 2b10 	vmov	d0, r2, r3
 801d5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d5bc:	42b7      	cmp	r7, r6
 801d5be:	bf3a      	itte	cc
 801d5c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d5c4:	f1a5 0608 	subcc.w	r6, r5, #8
 801d5c8:	2100      	movcs	r1, #0
 801d5ca:	380b      	subs	r0, #11
 801d5cc:	d017      	beq.n	801d5fe <__b2d+0x92>
 801d5ce:	f1c0 0c20 	rsb	ip, r0, #32
 801d5d2:	fa04 f500 	lsl.w	r5, r4, r0
 801d5d6:	42be      	cmp	r6, r7
 801d5d8:	fa21 f40c 	lsr.w	r4, r1, ip
 801d5dc:	ea45 0504 	orr.w	r5, r5, r4
 801d5e0:	bf8c      	ite	hi
 801d5e2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d5e6:	2400      	movls	r4, #0
 801d5e8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d5ec:	fa01 f000 	lsl.w	r0, r1, r0
 801d5f0:	fa24 f40c 	lsr.w	r4, r4, ip
 801d5f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d5f8:	ea40 0204 	orr.w	r2, r0, r4
 801d5fc:	e7db      	b.n	801d5b6 <__b2d+0x4a>
 801d5fe:	ea44 030c 	orr.w	r3, r4, ip
 801d602:	460a      	mov	r2, r1
 801d604:	e7d7      	b.n	801d5b6 <__b2d+0x4a>
 801d606:	bf00      	nop
 801d608:	3ff00000 	.word	0x3ff00000

0801d60c <__d2b>:
 801d60c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d610:	4689      	mov	r9, r1
 801d612:	2101      	movs	r1, #1
 801d614:	ec57 6b10 	vmov	r6, r7, d0
 801d618:	4690      	mov	r8, r2
 801d61a:	f7ff fc0f 	bl	801ce3c <_Balloc>
 801d61e:	4604      	mov	r4, r0
 801d620:	b930      	cbnz	r0, 801d630 <__d2b+0x24>
 801d622:	4602      	mov	r2, r0
 801d624:	4b25      	ldr	r3, [pc, #148]	; (801d6bc <__d2b+0xb0>)
 801d626:	4826      	ldr	r0, [pc, #152]	; (801d6c0 <__d2b+0xb4>)
 801d628:	f240 310a 	movw	r1, #778	; 0x30a
 801d62c:	f7fd ff88 	bl	801b540 <__assert_func>
 801d630:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d634:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d638:	bb35      	cbnz	r5, 801d688 <__d2b+0x7c>
 801d63a:	2e00      	cmp	r6, #0
 801d63c:	9301      	str	r3, [sp, #4]
 801d63e:	d028      	beq.n	801d692 <__d2b+0x86>
 801d640:	4668      	mov	r0, sp
 801d642:	9600      	str	r6, [sp, #0]
 801d644:	f7ff fd10 	bl	801d068 <__lo0bits>
 801d648:	9900      	ldr	r1, [sp, #0]
 801d64a:	b300      	cbz	r0, 801d68e <__d2b+0x82>
 801d64c:	9a01      	ldr	r2, [sp, #4]
 801d64e:	f1c0 0320 	rsb	r3, r0, #32
 801d652:	fa02 f303 	lsl.w	r3, r2, r3
 801d656:	430b      	orrs	r3, r1
 801d658:	40c2      	lsrs	r2, r0
 801d65a:	6163      	str	r3, [r4, #20]
 801d65c:	9201      	str	r2, [sp, #4]
 801d65e:	9b01      	ldr	r3, [sp, #4]
 801d660:	61a3      	str	r3, [r4, #24]
 801d662:	2b00      	cmp	r3, #0
 801d664:	bf14      	ite	ne
 801d666:	2202      	movne	r2, #2
 801d668:	2201      	moveq	r2, #1
 801d66a:	6122      	str	r2, [r4, #16]
 801d66c:	b1d5      	cbz	r5, 801d6a4 <__d2b+0x98>
 801d66e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d672:	4405      	add	r5, r0
 801d674:	f8c9 5000 	str.w	r5, [r9]
 801d678:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d67c:	f8c8 0000 	str.w	r0, [r8]
 801d680:	4620      	mov	r0, r4
 801d682:	b003      	add	sp, #12
 801d684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d68c:	e7d5      	b.n	801d63a <__d2b+0x2e>
 801d68e:	6161      	str	r1, [r4, #20]
 801d690:	e7e5      	b.n	801d65e <__d2b+0x52>
 801d692:	a801      	add	r0, sp, #4
 801d694:	f7ff fce8 	bl	801d068 <__lo0bits>
 801d698:	9b01      	ldr	r3, [sp, #4]
 801d69a:	6163      	str	r3, [r4, #20]
 801d69c:	2201      	movs	r2, #1
 801d69e:	6122      	str	r2, [r4, #16]
 801d6a0:	3020      	adds	r0, #32
 801d6a2:	e7e3      	b.n	801d66c <__d2b+0x60>
 801d6a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d6a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d6ac:	f8c9 0000 	str.w	r0, [r9]
 801d6b0:	6918      	ldr	r0, [r3, #16]
 801d6b2:	f7ff fcb9 	bl	801d028 <__hi0bits>
 801d6b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d6ba:	e7df      	b.n	801d67c <__d2b+0x70>
 801d6bc:	08022758 	.word	0x08022758
 801d6c0:	0802284c 	.word	0x0802284c

0801d6c4 <__ratio>:
 801d6c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c8:	4688      	mov	r8, r1
 801d6ca:	4669      	mov	r1, sp
 801d6cc:	4681      	mov	r9, r0
 801d6ce:	f7ff ff4d 	bl	801d56c <__b2d>
 801d6d2:	a901      	add	r1, sp, #4
 801d6d4:	4640      	mov	r0, r8
 801d6d6:	ec55 4b10 	vmov	r4, r5, d0
 801d6da:	f7ff ff47 	bl	801d56c <__b2d>
 801d6de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d6e2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d6e6:	eba3 0c02 	sub.w	ip, r3, r2
 801d6ea:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d6ee:	1a9b      	subs	r3, r3, r2
 801d6f0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d6f4:	ec51 0b10 	vmov	r0, r1, d0
 801d6f8:	2b00      	cmp	r3, #0
 801d6fa:	bfd6      	itet	le
 801d6fc:	460a      	movle	r2, r1
 801d6fe:	462a      	movgt	r2, r5
 801d700:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d704:	468b      	mov	fp, r1
 801d706:	462f      	mov	r7, r5
 801d708:	bfd4      	ite	le
 801d70a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d70e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d712:	4620      	mov	r0, r4
 801d714:	ee10 2a10 	vmov	r2, s0
 801d718:	465b      	mov	r3, fp
 801d71a:	4639      	mov	r1, r7
 801d71c:	f7e3 f8b6 	bl	800088c <__aeabi_ddiv>
 801d720:	ec41 0b10 	vmov	d0, r0, r1
 801d724:	b003      	add	sp, #12
 801d726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d72a <__copybits>:
 801d72a:	3901      	subs	r1, #1
 801d72c:	b570      	push	{r4, r5, r6, lr}
 801d72e:	1149      	asrs	r1, r1, #5
 801d730:	6914      	ldr	r4, [r2, #16]
 801d732:	3101      	adds	r1, #1
 801d734:	f102 0314 	add.w	r3, r2, #20
 801d738:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d73c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d740:	1f05      	subs	r5, r0, #4
 801d742:	42a3      	cmp	r3, r4
 801d744:	d30c      	bcc.n	801d760 <__copybits+0x36>
 801d746:	1aa3      	subs	r3, r4, r2
 801d748:	3b11      	subs	r3, #17
 801d74a:	f023 0303 	bic.w	r3, r3, #3
 801d74e:	3211      	adds	r2, #17
 801d750:	42a2      	cmp	r2, r4
 801d752:	bf88      	it	hi
 801d754:	2300      	movhi	r3, #0
 801d756:	4418      	add	r0, r3
 801d758:	2300      	movs	r3, #0
 801d75a:	4288      	cmp	r0, r1
 801d75c:	d305      	bcc.n	801d76a <__copybits+0x40>
 801d75e:	bd70      	pop	{r4, r5, r6, pc}
 801d760:	f853 6b04 	ldr.w	r6, [r3], #4
 801d764:	f845 6f04 	str.w	r6, [r5, #4]!
 801d768:	e7eb      	b.n	801d742 <__copybits+0x18>
 801d76a:	f840 3b04 	str.w	r3, [r0], #4
 801d76e:	e7f4      	b.n	801d75a <__copybits+0x30>

0801d770 <__any_on>:
 801d770:	f100 0214 	add.w	r2, r0, #20
 801d774:	6900      	ldr	r0, [r0, #16]
 801d776:	114b      	asrs	r3, r1, #5
 801d778:	4298      	cmp	r0, r3
 801d77a:	b510      	push	{r4, lr}
 801d77c:	db11      	blt.n	801d7a2 <__any_on+0x32>
 801d77e:	dd0a      	ble.n	801d796 <__any_on+0x26>
 801d780:	f011 011f 	ands.w	r1, r1, #31
 801d784:	d007      	beq.n	801d796 <__any_on+0x26>
 801d786:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d78a:	fa24 f001 	lsr.w	r0, r4, r1
 801d78e:	fa00 f101 	lsl.w	r1, r0, r1
 801d792:	428c      	cmp	r4, r1
 801d794:	d10b      	bne.n	801d7ae <__any_on+0x3e>
 801d796:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d79a:	4293      	cmp	r3, r2
 801d79c:	d803      	bhi.n	801d7a6 <__any_on+0x36>
 801d79e:	2000      	movs	r0, #0
 801d7a0:	bd10      	pop	{r4, pc}
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	e7f7      	b.n	801d796 <__any_on+0x26>
 801d7a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d7aa:	2900      	cmp	r1, #0
 801d7ac:	d0f5      	beq.n	801d79a <__any_on+0x2a>
 801d7ae:	2001      	movs	r0, #1
 801d7b0:	e7f6      	b.n	801d7a0 <__any_on+0x30>

0801d7b2 <_calloc_r>:
 801d7b2:	b513      	push	{r0, r1, r4, lr}
 801d7b4:	434a      	muls	r2, r1
 801d7b6:	4611      	mov	r1, r2
 801d7b8:	9201      	str	r2, [sp, #4]
 801d7ba:	f000 f859 	bl	801d870 <_malloc_r>
 801d7be:	4604      	mov	r4, r0
 801d7c0:	b118      	cbz	r0, 801d7ca <_calloc_r+0x18>
 801d7c2:	9a01      	ldr	r2, [sp, #4]
 801d7c4:	2100      	movs	r1, #0
 801d7c6:	f7fb ff31 	bl	801962c <memset>
 801d7ca:	4620      	mov	r0, r4
 801d7cc:	b002      	add	sp, #8
 801d7ce:	bd10      	pop	{r4, pc}

0801d7d0 <_free_r>:
 801d7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d7d2:	2900      	cmp	r1, #0
 801d7d4:	d048      	beq.n	801d868 <_free_r+0x98>
 801d7d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d7da:	9001      	str	r0, [sp, #4]
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	f1a1 0404 	sub.w	r4, r1, #4
 801d7e2:	bfb8      	it	lt
 801d7e4:	18e4      	addlt	r4, r4, r3
 801d7e6:	f000 ffc3 	bl	801e770 <__malloc_lock>
 801d7ea:	4a20      	ldr	r2, [pc, #128]	; (801d86c <_free_r+0x9c>)
 801d7ec:	9801      	ldr	r0, [sp, #4]
 801d7ee:	6813      	ldr	r3, [r2, #0]
 801d7f0:	4615      	mov	r5, r2
 801d7f2:	b933      	cbnz	r3, 801d802 <_free_r+0x32>
 801d7f4:	6063      	str	r3, [r4, #4]
 801d7f6:	6014      	str	r4, [r2, #0]
 801d7f8:	b003      	add	sp, #12
 801d7fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d7fe:	f000 bfbd 	b.w	801e77c <__malloc_unlock>
 801d802:	42a3      	cmp	r3, r4
 801d804:	d90b      	bls.n	801d81e <_free_r+0x4e>
 801d806:	6821      	ldr	r1, [r4, #0]
 801d808:	1862      	adds	r2, r4, r1
 801d80a:	4293      	cmp	r3, r2
 801d80c:	bf04      	itt	eq
 801d80e:	681a      	ldreq	r2, [r3, #0]
 801d810:	685b      	ldreq	r3, [r3, #4]
 801d812:	6063      	str	r3, [r4, #4]
 801d814:	bf04      	itt	eq
 801d816:	1852      	addeq	r2, r2, r1
 801d818:	6022      	streq	r2, [r4, #0]
 801d81a:	602c      	str	r4, [r5, #0]
 801d81c:	e7ec      	b.n	801d7f8 <_free_r+0x28>
 801d81e:	461a      	mov	r2, r3
 801d820:	685b      	ldr	r3, [r3, #4]
 801d822:	b10b      	cbz	r3, 801d828 <_free_r+0x58>
 801d824:	42a3      	cmp	r3, r4
 801d826:	d9fa      	bls.n	801d81e <_free_r+0x4e>
 801d828:	6811      	ldr	r1, [r2, #0]
 801d82a:	1855      	adds	r5, r2, r1
 801d82c:	42a5      	cmp	r5, r4
 801d82e:	d10b      	bne.n	801d848 <_free_r+0x78>
 801d830:	6824      	ldr	r4, [r4, #0]
 801d832:	4421      	add	r1, r4
 801d834:	1854      	adds	r4, r2, r1
 801d836:	42a3      	cmp	r3, r4
 801d838:	6011      	str	r1, [r2, #0]
 801d83a:	d1dd      	bne.n	801d7f8 <_free_r+0x28>
 801d83c:	681c      	ldr	r4, [r3, #0]
 801d83e:	685b      	ldr	r3, [r3, #4]
 801d840:	6053      	str	r3, [r2, #4]
 801d842:	4421      	add	r1, r4
 801d844:	6011      	str	r1, [r2, #0]
 801d846:	e7d7      	b.n	801d7f8 <_free_r+0x28>
 801d848:	d902      	bls.n	801d850 <_free_r+0x80>
 801d84a:	230c      	movs	r3, #12
 801d84c:	6003      	str	r3, [r0, #0]
 801d84e:	e7d3      	b.n	801d7f8 <_free_r+0x28>
 801d850:	6825      	ldr	r5, [r4, #0]
 801d852:	1961      	adds	r1, r4, r5
 801d854:	428b      	cmp	r3, r1
 801d856:	bf04      	itt	eq
 801d858:	6819      	ldreq	r1, [r3, #0]
 801d85a:	685b      	ldreq	r3, [r3, #4]
 801d85c:	6063      	str	r3, [r4, #4]
 801d85e:	bf04      	itt	eq
 801d860:	1949      	addeq	r1, r1, r5
 801d862:	6021      	streq	r1, [r4, #0]
 801d864:	6054      	str	r4, [r2, #4]
 801d866:	e7c7      	b.n	801d7f8 <_free_r+0x28>
 801d868:	b003      	add	sp, #12
 801d86a:	bd30      	pop	{r4, r5, pc}
 801d86c:	200215f8 	.word	0x200215f8

0801d870 <_malloc_r>:
 801d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d872:	1ccd      	adds	r5, r1, #3
 801d874:	f025 0503 	bic.w	r5, r5, #3
 801d878:	3508      	adds	r5, #8
 801d87a:	2d0c      	cmp	r5, #12
 801d87c:	bf38      	it	cc
 801d87e:	250c      	movcc	r5, #12
 801d880:	2d00      	cmp	r5, #0
 801d882:	4606      	mov	r6, r0
 801d884:	db01      	blt.n	801d88a <_malloc_r+0x1a>
 801d886:	42a9      	cmp	r1, r5
 801d888:	d903      	bls.n	801d892 <_malloc_r+0x22>
 801d88a:	230c      	movs	r3, #12
 801d88c:	6033      	str	r3, [r6, #0]
 801d88e:	2000      	movs	r0, #0
 801d890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d892:	f000 ff6d 	bl	801e770 <__malloc_lock>
 801d896:	4921      	ldr	r1, [pc, #132]	; (801d91c <_malloc_r+0xac>)
 801d898:	680a      	ldr	r2, [r1, #0]
 801d89a:	4614      	mov	r4, r2
 801d89c:	b99c      	cbnz	r4, 801d8c6 <_malloc_r+0x56>
 801d89e:	4f20      	ldr	r7, [pc, #128]	; (801d920 <_malloc_r+0xb0>)
 801d8a0:	683b      	ldr	r3, [r7, #0]
 801d8a2:	b923      	cbnz	r3, 801d8ae <_malloc_r+0x3e>
 801d8a4:	4621      	mov	r1, r4
 801d8a6:	4630      	mov	r0, r6
 801d8a8:	f000 fe2a 	bl	801e500 <_sbrk_r>
 801d8ac:	6038      	str	r0, [r7, #0]
 801d8ae:	4629      	mov	r1, r5
 801d8b0:	4630      	mov	r0, r6
 801d8b2:	f000 fe25 	bl	801e500 <_sbrk_r>
 801d8b6:	1c43      	adds	r3, r0, #1
 801d8b8:	d123      	bne.n	801d902 <_malloc_r+0x92>
 801d8ba:	230c      	movs	r3, #12
 801d8bc:	6033      	str	r3, [r6, #0]
 801d8be:	4630      	mov	r0, r6
 801d8c0:	f000 ff5c 	bl	801e77c <__malloc_unlock>
 801d8c4:	e7e3      	b.n	801d88e <_malloc_r+0x1e>
 801d8c6:	6823      	ldr	r3, [r4, #0]
 801d8c8:	1b5b      	subs	r3, r3, r5
 801d8ca:	d417      	bmi.n	801d8fc <_malloc_r+0x8c>
 801d8cc:	2b0b      	cmp	r3, #11
 801d8ce:	d903      	bls.n	801d8d8 <_malloc_r+0x68>
 801d8d0:	6023      	str	r3, [r4, #0]
 801d8d2:	441c      	add	r4, r3
 801d8d4:	6025      	str	r5, [r4, #0]
 801d8d6:	e004      	b.n	801d8e2 <_malloc_r+0x72>
 801d8d8:	6863      	ldr	r3, [r4, #4]
 801d8da:	42a2      	cmp	r2, r4
 801d8dc:	bf0c      	ite	eq
 801d8de:	600b      	streq	r3, [r1, #0]
 801d8e0:	6053      	strne	r3, [r2, #4]
 801d8e2:	4630      	mov	r0, r6
 801d8e4:	f000 ff4a 	bl	801e77c <__malloc_unlock>
 801d8e8:	f104 000b 	add.w	r0, r4, #11
 801d8ec:	1d23      	adds	r3, r4, #4
 801d8ee:	f020 0007 	bic.w	r0, r0, #7
 801d8f2:	1ac2      	subs	r2, r0, r3
 801d8f4:	d0cc      	beq.n	801d890 <_malloc_r+0x20>
 801d8f6:	1a1b      	subs	r3, r3, r0
 801d8f8:	50a3      	str	r3, [r4, r2]
 801d8fa:	e7c9      	b.n	801d890 <_malloc_r+0x20>
 801d8fc:	4622      	mov	r2, r4
 801d8fe:	6864      	ldr	r4, [r4, #4]
 801d900:	e7cc      	b.n	801d89c <_malloc_r+0x2c>
 801d902:	1cc4      	adds	r4, r0, #3
 801d904:	f024 0403 	bic.w	r4, r4, #3
 801d908:	42a0      	cmp	r0, r4
 801d90a:	d0e3      	beq.n	801d8d4 <_malloc_r+0x64>
 801d90c:	1a21      	subs	r1, r4, r0
 801d90e:	4630      	mov	r0, r6
 801d910:	f000 fdf6 	bl	801e500 <_sbrk_r>
 801d914:	3001      	adds	r0, #1
 801d916:	d1dd      	bne.n	801d8d4 <_malloc_r+0x64>
 801d918:	e7cf      	b.n	801d8ba <_malloc_r+0x4a>
 801d91a:	bf00      	nop
 801d91c:	200215f8 	.word	0x200215f8
 801d920:	200215fc 	.word	0x200215fc

0801d924 <__ssputs_r>:
 801d924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d928:	688e      	ldr	r6, [r1, #8]
 801d92a:	429e      	cmp	r6, r3
 801d92c:	4682      	mov	sl, r0
 801d92e:	460c      	mov	r4, r1
 801d930:	4690      	mov	r8, r2
 801d932:	461f      	mov	r7, r3
 801d934:	d838      	bhi.n	801d9a8 <__ssputs_r+0x84>
 801d936:	898a      	ldrh	r2, [r1, #12]
 801d938:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d93c:	d032      	beq.n	801d9a4 <__ssputs_r+0x80>
 801d93e:	6825      	ldr	r5, [r4, #0]
 801d940:	6909      	ldr	r1, [r1, #16]
 801d942:	eba5 0901 	sub.w	r9, r5, r1
 801d946:	6965      	ldr	r5, [r4, #20]
 801d948:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d94c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d950:	3301      	adds	r3, #1
 801d952:	444b      	add	r3, r9
 801d954:	106d      	asrs	r5, r5, #1
 801d956:	429d      	cmp	r5, r3
 801d958:	bf38      	it	cc
 801d95a:	461d      	movcc	r5, r3
 801d95c:	0553      	lsls	r3, r2, #21
 801d95e:	d531      	bpl.n	801d9c4 <__ssputs_r+0xa0>
 801d960:	4629      	mov	r1, r5
 801d962:	f7ff ff85 	bl	801d870 <_malloc_r>
 801d966:	4606      	mov	r6, r0
 801d968:	b950      	cbnz	r0, 801d980 <__ssputs_r+0x5c>
 801d96a:	230c      	movs	r3, #12
 801d96c:	f8ca 3000 	str.w	r3, [sl]
 801d970:	89a3      	ldrh	r3, [r4, #12]
 801d972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d976:	81a3      	strh	r3, [r4, #12]
 801d978:	f04f 30ff 	mov.w	r0, #4294967295
 801d97c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d980:	6921      	ldr	r1, [r4, #16]
 801d982:	464a      	mov	r2, r9
 801d984:	f7fb fe2a 	bl	80195dc <memcpy>
 801d988:	89a3      	ldrh	r3, [r4, #12]
 801d98a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d98e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d992:	81a3      	strh	r3, [r4, #12]
 801d994:	6126      	str	r6, [r4, #16]
 801d996:	6165      	str	r5, [r4, #20]
 801d998:	444e      	add	r6, r9
 801d99a:	eba5 0509 	sub.w	r5, r5, r9
 801d99e:	6026      	str	r6, [r4, #0]
 801d9a0:	60a5      	str	r5, [r4, #8]
 801d9a2:	463e      	mov	r6, r7
 801d9a4:	42be      	cmp	r6, r7
 801d9a6:	d900      	bls.n	801d9aa <__ssputs_r+0x86>
 801d9a8:	463e      	mov	r6, r7
 801d9aa:	4632      	mov	r2, r6
 801d9ac:	6820      	ldr	r0, [r4, #0]
 801d9ae:	4641      	mov	r1, r8
 801d9b0:	f7fb fe22 	bl	80195f8 <memmove>
 801d9b4:	68a3      	ldr	r3, [r4, #8]
 801d9b6:	6822      	ldr	r2, [r4, #0]
 801d9b8:	1b9b      	subs	r3, r3, r6
 801d9ba:	4432      	add	r2, r6
 801d9bc:	60a3      	str	r3, [r4, #8]
 801d9be:	6022      	str	r2, [r4, #0]
 801d9c0:	2000      	movs	r0, #0
 801d9c2:	e7db      	b.n	801d97c <__ssputs_r+0x58>
 801d9c4:	462a      	mov	r2, r5
 801d9c6:	f000 fedf 	bl	801e788 <_realloc_r>
 801d9ca:	4606      	mov	r6, r0
 801d9cc:	2800      	cmp	r0, #0
 801d9ce:	d1e1      	bne.n	801d994 <__ssputs_r+0x70>
 801d9d0:	6921      	ldr	r1, [r4, #16]
 801d9d2:	4650      	mov	r0, sl
 801d9d4:	f7ff fefc 	bl	801d7d0 <_free_r>
 801d9d8:	e7c7      	b.n	801d96a <__ssputs_r+0x46>
	...

0801d9dc <_svfiprintf_r>:
 801d9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9e0:	4698      	mov	r8, r3
 801d9e2:	898b      	ldrh	r3, [r1, #12]
 801d9e4:	061b      	lsls	r3, r3, #24
 801d9e6:	b09d      	sub	sp, #116	; 0x74
 801d9e8:	4607      	mov	r7, r0
 801d9ea:	460d      	mov	r5, r1
 801d9ec:	4614      	mov	r4, r2
 801d9ee:	d50e      	bpl.n	801da0e <_svfiprintf_r+0x32>
 801d9f0:	690b      	ldr	r3, [r1, #16]
 801d9f2:	b963      	cbnz	r3, 801da0e <_svfiprintf_r+0x32>
 801d9f4:	2140      	movs	r1, #64	; 0x40
 801d9f6:	f7ff ff3b 	bl	801d870 <_malloc_r>
 801d9fa:	6028      	str	r0, [r5, #0]
 801d9fc:	6128      	str	r0, [r5, #16]
 801d9fe:	b920      	cbnz	r0, 801da0a <_svfiprintf_r+0x2e>
 801da00:	230c      	movs	r3, #12
 801da02:	603b      	str	r3, [r7, #0]
 801da04:	f04f 30ff 	mov.w	r0, #4294967295
 801da08:	e0d1      	b.n	801dbae <_svfiprintf_r+0x1d2>
 801da0a:	2340      	movs	r3, #64	; 0x40
 801da0c:	616b      	str	r3, [r5, #20]
 801da0e:	2300      	movs	r3, #0
 801da10:	9309      	str	r3, [sp, #36]	; 0x24
 801da12:	2320      	movs	r3, #32
 801da14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801da18:	f8cd 800c 	str.w	r8, [sp, #12]
 801da1c:	2330      	movs	r3, #48	; 0x30
 801da1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801dbc8 <_svfiprintf_r+0x1ec>
 801da22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801da26:	f04f 0901 	mov.w	r9, #1
 801da2a:	4623      	mov	r3, r4
 801da2c:	469a      	mov	sl, r3
 801da2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da32:	b10a      	cbz	r2, 801da38 <_svfiprintf_r+0x5c>
 801da34:	2a25      	cmp	r2, #37	; 0x25
 801da36:	d1f9      	bne.n	801da2c <_svfiprintf_r+0x50>
 801da38:	ebba 0b04 	subs.w	fp, sl, r4
 801da3c:	d00b      	beq.n	801da56 <_svfiprintf_r+0x7a>
 801da3e:	465b      	mov	r3, fp
 801da40:	4622      	mov	r2, r4
 801da42:	4629      	mov	r1, r5
 801da44:	4638      	mov	r0, r7
 801da46:	f7ff ff6d 	bl	801d924 <__ssputs_r>
 801da4a:	3001      	adds	r0, #1
 801da4c:	f000 80aa 	beq.w	801dba4 <_svfiprintf_r+0x1c8>
 801da50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da52:	445a      	add	r2, fp
 801da54:	9209      	str	r2, [sp, #36]	; 0x24
 801da56:	f89a 3000 	ldrb.w	r3, [sl]
 801da5a:	2b00      	cmp	r3, #0
 801da5c:	f000 80a2 	beq.w	801dba4 <_svfiprintf_r+0x1c8>
 801da60:	2300      	movs	r3, #0
 801da62:	f04f 32ff 	mov.w	r2, #4294967295
 801da66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da6a:	f10a 0a01 	add.w	sl, sl, #1
 801da6e:	9304      	str	r3, [sp, #16]
 801da70:	9307      	str	r3, [sp, #28]
 801da72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801da76:	931a      	str	r3, [sp, #104]	; 0x68
 801da78:	4654      	mov	r4, sl
 801da7a:	2205      	movs	r2, #5
 801da7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da80:	4851      	ldr	r0, [pc, #324]	; (801dbc8 <_svfiprintf_r+0x1ec>)
 801da82:	f7e2 fbcd 	bl	8000220 <memchr>
 801da86:	9a04      	ldr	r2, [sp, #16]
 801da88:	b9d8      	cbnz	r0, 801dac2 <_svfiprintf_r+0xe6>
 801da8a:	06d0      	lsls	r0, r2, #27
 801da8c:	bf44      	itt	mi
 801da8e:	2320      	movmi	r3, #32
 801da90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da94:	0711      	lsls	r1, r2, #28
 801da96:	bf44      	itt	mi
 801da98:	232b      	movmi	r3, #43	; 0x2b
 801da9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da9e:	f89a 3000 	ldrb.w	r3, [sl]
 801daa2:	2b2a      	cmp	r3, #42	; 0x2a
 801daa4:	d015      	beq.n	801dad2 <_svfiprintf_r+0xf6>
 801daa6:	9a07      	ldr	r2, [sp, #28]
 801daa8:	4654      	mov	r4, sl
 801daaa:	2000      	movs	r0, #0
 801daac:	f04f 0c0a 	mov.w	ip, #10
 801dab0:	4621      	mov	r1, r4
 801dab2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dab6:	3b30      	subs	r3, #48	; 0x30
 801dab8:	2b09      	cmp	r3, #9
 801daba:	d94e      	bls.n	801db5a <_svfiprintf_r+0x17e>
 801dabc:	b1b0      	cbz	r0, 801daec <_svfiprintf_r+0x110>
 801dabe:	9207      	str	r2, [sp, #28]
 801dac0:	e014      	b.n	801daec <_svfiprintf_r+0x110>
 801dac2:	eba0 0308 	sub.w	r3, r0, r8
 801dac6:	fa09 f303 	lsl.w	r3, r9, r3
 801daca:	4313      	orrs	r3, r2
 801dacc:	9304      	str	r3, [sp, #16]
 801dace:	46a2      	mov	sl, r4
 801dad0:	e7d2      	b.n	801da78 <_svfiprintf_r+0x9c>
 801dad2:	9b03      	ldr	r3, [sp, #12]
 801dad4:	1d19      	adds	r1, r3, #4
 801dad6:	681b      	ldr	r3, [r3, #0]
 801dad8:	9103      	str	r1, [sp, #12]
 801dada:	2b00      	cmp	r3, #0
 801dadc:	bfbb      	ittet	lt
 801dade:	425b      	neglt	r3, r3
 801dae0:	f042 0202 	orrlt.w	r2, r2, #2
 801dae4:	9307      	strge	r3, [sp, #28]
 801dae6:	9307      	strlt	r3, [sp, #28]
 801dae8:	bfb8      	it	lt
 801daea:	9204      	strlt	r2, [sp, #16]
 801daec:	7823      	ldrb	r3, [r4, #0]
 801daee:	2b2e      	cmp	r3, #46	; 0x2e
 801daf0:	d10c      	bne.n	801db0c <_svfiprintf_r+0x130>
 801daf2:	7863      	ldrb	r3, [r4, #1]
 801daf4:	2b2a      	cmp	r3, #42	; 0x2a
 801daf6:	d135      	bne.n	801db64 <_svfiprintf_r+0x188>
 801daf8:	9b03      	ldr	r3, [sp, #12]
 801dafa:	1d1a      	adds	r2, r3, #4
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	9203      	str	r2, [sp, #12]
 801db00:	2b00      	cmp	r3, #0
 801db02:	bfb8      	it	lt
 801db04:	f04f 33ff 	movlt.w	r3, #4294967295
 801db08:	3402      	adds	r4, #2
 801db0a:	9305      	str	r3, [sp, #20]
 801db0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801dbd8 <_svfiprintf_r+0x1fc>
 801db10:	7821      	ldrb	r1, [r4, #0]
 801db12:	2203      	movs	r2, #3
 801db14:	4650      	mov	r0, sl
 801db16:	f7e2 fb83 	bl	8000220 <memchr>
 801db1a:	b140      	cbz	r0, 801db2e <_svfiprintf_r+0x152>
 801db1c:	2340      	movs	r3, #64	; 0x40
 801db1e:	eba0 000a 	sub.w	r0, r0, sl
 801db22:	fa03 f000 	lsl.w	r0, r3, r0
 801db26:	9b04      	ldr	r3, [sp, #16]
 801db28:	4303      	orrs	r3, r0
 801db2a:	3401      	adds	r4, #1
 801db2c:	9304      	str	r3, [sp, #16]
 801db2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db32:	4826      	ldr	r0, [pc, #152]	; (801dbcc <_svfiprintf_r+0x1f0>)
 801db34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801db38:	2206      	movs	r2, #6
 801db3a:	f7e2 fb71 	bl	8000220 <memchr>
 801db3e:	2800      	cmp	r0, #0
 801db40:	d038      	beq.n	801dbb4 <_svfiprintf_r+0x1d8>
 801db42:	4b23      	ldr	r3, [pc, #140]	; (801dbd0 <_svfiprintf_r+0x1f4>)
 801db44:	bb1b      	cbnz	r3, 801db8e <_svfiprintf_r+0x1b2>
 801db46:	9b03      	ldr	r3, [sp, #12]
 801db48:	3307      	adds	r3, #7
 801db4a:	f023 0307 	bic.w	r3, r3, #7
 801db4e:	3308      	adds	r3, #8
 801db50:	9303      	str	r3, [sp, #12]
 801db52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db54:	4433      	add	r3, r6
 801db56:	9309      	str	r3, [sp, #36]	; 0x24
 801db58:	e767      	b.n	801da2a <_svfiprintf_r+0x4e>
 801db5a:	fb0c 3202 	mla	r2, ip, r2, r3
 801db5e:	460c      	mov	r4, r1
 801db60:	2001      	movs	r0, #1
 801db62:	e7a5      	b.n	801dab0 <_svfiprintf_r+0xd4>
 801db64:	2300      	movs	r3, #0
 801db66:	3401      	adds	r4, #1
 801db68:	9305      	str	r3, [sp, #20]
 801db6a:	4619      	mov	r1, r3
 801db6c:	f04f 0c0a 	mov.w	ip, #10
 801db70:	4620      	mov	r0, r4
 801db72:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db76:	3a30      	subs	r2, #48	; 0x30
 801db78:	2a09      	cmp	r2, #9
 801db7a:	d903      	bls.n	801db84 <_svfiprintf_r+0x1a8>
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d0c5      	beq.n	801db0c <_svfiprintf_r+0x130>
 801db80:	9105      	str	r1, [sp, #20]
 801db82:	e7c3      	b.n	801db0c <_svfiprintf_r+0x130>
 801db84:	fb0c 2101 	mla	r1, ip, r1, r2
 801db88:	4604      	mov	r4, r0
 801db8a:	2301      	movs	r3, #1
 801db8c:	e7f0      	b.n	801db70 <_svfiprintf_r+0x194>
 801db8e:	ab03      	add	r3, sp, #12
 801db90:	9300      	str	r3, [sp, #0]
 801db92:	462a      	mov	r2, r5
 801db94:	4b0f      	ldr	r3, [pc, #60]	; (801dbd4 <_svfiprintf_r+0x1f8>)
 801db96:	a904      	add	r1, sp, #16
 801db98:	4638      	mov	r0, r7
 801db9a:	f7fb fdef 	bl	801977c <_printf_float>
 801db9e:	1c42      	adds	r2, r0, #1
 801dba0:	4606      	mov	r6, r0
 801dba2:	d1d6      	bne.n	801db52 <_svfiprintf_r+0x176>
 801dba4:	89ab      	ldrh	r3, [r5, #12]
 801dba6:	065b      	lsls	r3, r3, #25
 801dba8:	f53f af2c 	bmi.w	801da04 <_svfiprintf_r+0x28>
 801dbac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dbae:	b01d      	add	sp, #116	; 0x74
 801dbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbb4:	ab03      	add	r3, sp, #12
 801dbb6:	9300      	str	r3, [sp, #0]
 801dbb8:	462a      	mov	r2, r5
 801dbba:	4b06      	ldr	r3, [pc, #24]	; (801dbd4 <_svfiprintf_r+0x1f8>)
 801dbbc:	a904      	add	r1, sp, #16
 801dbbe:	4638      	mov	r0, r7
 801dbc0:	f7fc f880 	bl	8019cc4 <_printf_i>
 801dbc4:	e7eb      	b.n	801db9e <_svfiprintf_r+0x1c2>
 801dbc6:	bf00      	nop
 801dbc8:	080229ac 	.word	0x080229ac
 801dbcc:	080229b6 	.word	0x080229b6
 801dbd0:	0801977d 	.word	0x0801977d
 801dbd4:	0801d925 	.word	0x0801d925
 801dbd8:	080229b2 	.word	0x080229b2

0801dbdc <_sungetc_r>:
 801dbdc:	b538      	push	{r3, r4, r5, lr}
 801dbde:	1c4b      	adds	r3, r1, #1
 801dbe0:	4614      	mov	r4, r2
 801dbe2:	d103      	bne.n	801dbec <_sungetc_r+0x10>
 801dbe4:	f04f 35ff 	mov.w	r5, #4294967295
 801dbe8:	4628      	mov	r0, r5
 801dbea:	bd38      	pop	{r3, r4, r5, pc}
 801dbec:	8993      	ldrh	r3, [r2, #12]
 801dbee:	f023 0320 	bic.w	r3, r3, #32
 801dbf2:	8193      	strh	r3, [r2, #12]
 801dbf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dbf6:	6852      	ldr	r2, [r2, #4]
 801dbf8:	b2cd      	uxtb	r5, r1
 801dbfa:	b18b      	cbz	r3, 801dc20 <_sungetc_r+0x44>
 801dbfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801dbfe:	4293      	cmp	r3, r2
 801dc00:	dd08      	ble.n	801dc14 <_sungetc_r+0x38>
 801dc02:	6823      	ldr	r3, [r4, #0]
 801dc04:	1e5a      	subs	r2, r3, #1
 801dc06:	6022      	str	r2, [r4, #0]
 801dc08:	f803 5c01 	strb.w	r5, [r3, #-1]
 801dc0c:	6863      	ldr	r3, [r4, #4]
 801dc0e:	3301      	adds	r3, #1
 801dc10:	6063      	str	r3, [r4, #4]
 801dc12:	e7e9      	b.n	801dbe8 <_sungetc_r+0xc>
 801dc14:	4621      	mov	r1, r4
 801dc16:	f000 fd3b 	bl	801e690 <__submore>
 801dc1a:	2800      	cmp	r0, #0
 801dc1c:	d0f1      	beq.n	801dc02 <_sungetc_r+0x26>
 801dc1e:	e7e1      	b.n	801dbe4 <_sungetc_r+0x8>
 801dc20:	6921      	ldr	r1, [r4, #16]
 801dc22:	6823      	ldr	r3, [r4, #0]
 801dc24:	b151      	cbz	r1, 801dc3c <_sungetc_r+0x60>
 801dc26:	4299      	cmp	r1, r3
 801dc28:	d208      	bcs.n	801dc3c <_sungetc_r+0x60>
 801dc2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801dc2e:	42a9      	cmp	r1, r5
 801dc30:	d104      	bne.n	801dc3c <_sungetc_r+0x60>
 801dc32:	3b01      	subs	r3, #1
 801dc34:	3201      	adds	r2, #1
 801dc36:	6023      	str	r3, [r4, #0]
 801dc38:	6062      	str	r2, [r4, #4]
 801dc3a:	e7d5      	b.n	801dbe8 <_sungetc_r+0xc>
 801dc3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801dc40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc44:	6363      	str	r3, [r4, #52]	; 0x34
 801dc46:	2303      	movs	r3, #3
 801dc48:	63a3      	str	r3, [r4, #56]	; 0x38
 801dc4a:	4623      	mov	r3, r4
 801dc4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 801dc50:	6023      	str	r3, [r4, #0]
 801dc52:	2301      	movs	r3, #1
 801dc54:	e7dc      	b.n	801dc10 <_sungetc_r+0x34>

0801dc56 <__ssrefill_r>:
 801dc56:	b510      	push	{r4, lr}
 801dc58:	460c      	mov	r4, r1
 801dc5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801dc5c:	b169      	cbz	r1, 801dc7a <__ssrefill_r+0x24>
 801dc5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc62:	4299      	cmp	r1, r3
 801dc64:	d001      	beq.n	801dc6a <__ssrefill_r+0x14>
 801dc66:	f7ff fdb3 	bl	801d7d0 <_free_r>
 801dc6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dc6c:	6063      	str	r3, [r4, #4]
 801dc6e:	2000      	movs	r0, #0
 801dc70:	6360      	str	r0, [r4, #52]	; 0x34
 801dc72:	b113      	cbz	r3, 801dc7a <__ssrefill_r+0x24>
 801dc74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801dc76:	6023      	str	r3, [r4, #0]
 801dc78:	bd10      	pop	{r4, pc}
 801dc7a:	6923      	ldr	r3, [r4, #16]
 801dc7c:	6023      	str	r3, [r4, #0]
 801dc7e:	2300      	movs	r3, #0
 801dc80:	6063      	str	r3, [r4, #4]
 801dc82:	89a3      	ldrh	r3, [r4, #12]
 801dc84:	f043 0320 	orr.w	r3, r3, #32
 801dc88:	81a3      	strh	r3, [r4, #12]
 801dc8a:	f04f 30ff 	mov.w	r0, #4294967295
 801dc8e:	e7f3      	b.n	801dc78 <__ssrefill_r+0x22>

0801dc90 <__ssvfiscanf_r>:
 801dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc94:	460c      	mov	r4, r1
 801dc96:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801dc9a:	2100      	movs	r1, #0
 801dc9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801dca0:	49b2      	ldr	r1, [pc, #712]	; (801df6c <__ssvfiscanf_r+0x2dc>)
 801dca2:	91a0      	str	r1, [sp, #640]	; 0x280
 801dca4:	f10d 0804 	add.w	r8, sp, #4
 801dca8:	49b1      	ldr	r1, [pc, #708]	; (801df70 <__ssvfiscanf_r+0x2e0>)
 801dcaa:	4fb2      	ldr	r7, [pc, #712]	; (801df74 <__ssvfiscanf_r+0x2e4>)
 801dcac:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 801df78 <__ssvfiscanf_r+0x2e8>
 801dcb0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801dcb4:	4606      	mov	r6, r0
 801dcb6:	91a1      	str	r1, [sp, #644]	; 0x284
 801dcb8:	9300      	str	r3, [sp, #0]
 801dcba:	f892 a000 	ldrb.w	sl, [r2]
 801dcbe:	f1ba 0f00 	cmp.w	sl, #0
 801dcc2:	f000 8151 	beq.w	801df68 <__ssvfiscanf_r+0x2d8>
 801dcc6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 801dcca:	f013 0308 	ands.w	r3, r3, #8
 801dcce:	f102 0501 	add.w	r5, r2, #1
 801dcd2:	d019      	beq.n	801dd08 <__ssvfiscanf_r+0x78>
 801dcd4:	6863      	ldr	r3, [r4, #4]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	dd0f      	ble.n	801dcfa <__ssvfiscanf_r+0x6a>
 801dcda:	6823      	ldr	r3, [r4, #0]
 801dcdc:	781a      	ldrb	r2, [r3, #0]
 801dcde:	5cba      	ldrb	r2, [r7, r2]
 801dce0:	0712      	lsls	r2, r2, #28
 801dce2:	d401      	bmi.n	801dce8 <__ssvfiscanf_r+0x58>
 801dce4:	462a      	mov	r2, r5
 801dce6:	e7e8      	b.n	801dcba <__ssvfiscanf_r+0x2a>
 801dce8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801dcea:	3201      	adds	r2, #1
 801dcec:	9245      	str	r2, [sp, #276]	; 0x114
 801dcee:	6862      	ldr	r2, [r4, #4]
 801dcf0:	3301      	adds	r3, #1
 801dcf2:	3a01      	subs	r2, #1
 801dcf4:	6062      	str	r2, [r4, #4]
 801dcf6:	6023      	str	r3, [r4, #0]
 801dcf8:	e7ec      	b.n	801dcd4 <__ssvfiscanf_r+0x44>
 801dcfa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801dcfc:	4621      	mov	r1, r4
 801dcfe:	4630      	mov	r0, r6
 801dd00:	4798      	blx	r3
 801dd02:	2800      	cmp	r0, #0
 801dd04:	d0e9      	beq.n	801dcda <__ssvfiscanf_r+0x4a>
 801dd06:	e7ed      	b.n	801dce4 <__ssvfiscanf_r+0x54>
 801dd08:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 801dd0c:	f040 8083 	bne.w	801de16 <__ssvfiscanf_r+0x186>
 801dd10:	9341      	str	r3, [sp, #260]	; 0x104
 801dd12:	9343      	str	r3, [sp, #268]	; 0x10c
 801dd14:	7853      	ldrb	r3, [r2, #1]
 801dd16:	2b2a      	cmp	r3, #42	; 0x2a
 801dd18:	bf02      	ittt	eq
 801dd1a:	2310      	moveq	r3, #16
 801dd1c:	1c95      	addeq	r5, r2, #2
 801dd1e:	9341      	streq	r3, [sp, #260]	; 0x104
 801dd20:	220a      	movs	r2, #10
 801dd22:	46ab      	mov	fp, r5
 801dd24:	f81b 1b01 	ldrb.w	r1, [fp], #1
 801dd28:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801dd2c:	2b09      	cmp	r3, #9
 801dd2e:	d91d      	bls.n	801dd6c <__ssvfiscanf_r+0xdc>
 801dd30:	4891      	ldr	r0, [pc, #580]	; (801df78 <__ssvfiscanf_r+0x2e8>)
 801dd32:	2203      	movs	r2, #3
 801dd34:	f7e2 fa74 	bl	8000220 <memchr>
 801dd38:	b140      	cbz	r0, 801dd4c <__ssvfiscanf_r+0xbc>
 801dd3a:	2301      	movs	r3, #1
 801dd3c:	eba0 0009 	sub.w	r0, r0, r9
 801dd40:	fa03 f000 	lsl.w	r0, r3, r0
 801dd44:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801dd46:	4318      	orrs	r0, r3
 801dd48:	9041      	str	r0, [sp, #260]	; 0x104
 801dd4a:	465d      	mov	r5, fp
 801dd4c:	f815 3b01 	ldrb.w	r3, [r5], #1
 801dd50:	2b78      	cmp	r3, #120	; 0x78
 801dd52:	d806      	bhi.n	801dd62 <__ssvfiscanf_r+0xd2>
 801dd54:	2b57      	cmp	r3, #87	; 0x57
 801dd56:	d810      	bhi.n	801dd7a <__ssvfiscanf_r+0xea>
 801dd58:	2b25      	cmp	r3, #37	; 0x25
 801dd5a:	d05c      	beq.n	801de16 <__ssvfiscanf_r+0x186>
 801dd5c:	d856      	bhi.n	801de0c <__ssvfiscanf_r+0x17c>
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d074      	beq.n	801de4c <__ssvfiscanf_r+0x1bc>
 801dd62:	2303      	movs	r3, #3
 801dd64:	9347      	str	r3, [sp, #284]	; 0x11c
 801dd66:	230a      	movs	r3, #10
 801dd68:	9342      	str	r3, [sp, #264]	; 0x108
 801dd6a:	e081      	b.n	801de70 <__ssvfiscanf_r+0x1e0>
 801dd6c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801dd6e:	fb02 1303 	mla	r3, r2, r3, r1
 801dd72:	3b30      	subs	r3, #48	; 0x30
 801dd74:	9343      	str	r3, [sp, #268]	; 0x10c
 801dd76:	465d      	mov	r5, fp
 801dd78:	e7d3      	b.n	801dd22 <__ssvfiscanf_r+0x92>
 801dd7a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801dd7e:	2a20      	cmp	r2, #32
 801dd80:	d8ef      	bhi.n	801dd62 <__ssvfiscanf_r+0xd2>
 801dd82:	a101      	add	r1, pc, #4	; (adr r1, 801dd88 <__ssvfiscanf_r+0xf8>)
 801dd84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801dd88:	0801de5b 	.word	0x0801de5b
 801dd8c:	0801dd63 	.word	0x0801dd63
 801dd90:	0801dd63 	.word	0x0801dd63
 801dd94:	0801deb9 	.word	0x0801deb9
 801dd98:	0801dd63 	.word	0x0801dd63
 801dd9c:	0801dd63 	.word	0x0801dd63
 801dda0:	0801dd63 	.word	0x0801dd63
 801dda4:	0801dd63 	.word	0x0801dd63
 801dda8:	0801dd63 	.word	0x0801dd63
 801ddac:	0801dd63 	.word	0x0801dd63
 801ddb0:	0801dd63 	.word	0x0801dd63
 801ddb4:	0801decf 	.word	0x0801decf
 801ddb8:	0801dea5 	.word	0x0801dea5
 801ddbc:	0801de13 	.word	0x0801de13
 801ddc0:	0801de13 	.word	0x0801de13
 801ddc4:	0801de13 	.word	0x0801de13
 801ddc8:	0801dd63 	.word	0x0801dd63
 801ddcc:	0801dea9 	.word	0x0801dea9
 801ddd0:	0801dd63 	.word	0x0801dd63
 801ddd4:	0801dd63 	.word	0x0801dd63
 801ddd8:	0801dd63 	.word	0x0801dd63
 801dddc:	0801dd63 	.word	0x0801dd63
 801dde0:	0801dedf 	.word	0x0801dedf
 801dde4:	0801deb1 	.word	0x0801deb1
 801dde8:	0801de53 	.word	0x0801de53
 801ddec:	0801dd63 	.word	0x0801dd63
 801ddf0:	0801dd63 	.word	0x0801dd63
 801ddf4:	0801dedb 	.word	0x0801dedb
 801ddf8:	0801dd63 	.word	0x0801dd63
 801ddfc:	0801dea5 	.word	0x0801dea5
 801de00:	0801dd63 	.word	0x0801dd63
 801de04:	0801dd63 	.word	0x0801dd63
 801de08:	0801de5b 	.word	0x0801de5b
 801de0c:	3b45      	subs	r3, #69	; 0x45
 801de0e:	2b02      	cmp	r3, #2
 801de10:	d8a7      	bhi.n	801dd62 <__ssvfiscanf_r+0xd2>
 801de12:	2305      	movs	r3, #5
 801de14:	e02b      	b.n	801de6e <__ssvfiscanf_r+0x1de>
 801de16:	6863      	ldr	r3, [r4, #4]
 801de18:	2b00      	cmp	r3, #0
 801de1a:	dd0d      	ble.n	801de38 <__ssvfiscanf_r+0x1a8>
 801de1c:	6823      	ldr	r3, [r4, #0]
 801de1e:	781a      	ldrb	r2, [r3, #0]
 801de20:	4552      	cmp	r2, sl
 801de22:	f040 80a1 	bne.w	801df68 <__ssvfiscanf_r+0x2d8>
 801de26:	3301      	adds	r3, #1
 801de28:	6862      	ldr	r2, [r4, #4]
 801de2a:	6023      	str	r3, [r4, #0]
 801de2c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801de2e:	3a01      	subs	r2, #1
 801de30:	3301      	adds	r3, #1
 801de32:	6062      	str	r2, [r4, #4]
 801de34:	9345      	str	r3, [sp, #276]	; 0x114
 801de36:	e755      	b.n	801dce4 <__ssvfiscanf_r+0x54>
 801de38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801de3a:	4621      	mov	r1, r4
 801de3c:	4630      	mov	r0, r6
 801de3e:	4798      	blx	r3
 801de40:	2800      	cmp	r0, #0
 801de42:	d0eb      	beq.n	801de1c <__ssvfiscanf_r+0x18c>
 801de44:	9844      	ldr	r0, [sp, #272]	; 0x110
 801de46:	2800      	cmp	r0, #0
 801de48:	f040 8084 	bne.w	801df54 <__ssvfiscanf_r+0x2c4>
 801de4c:	f04f 30ff 	mov.w	r0, #4294967295
 801de50:	e086      	b.n	801df60 <__ssvfiscanf_r+0x2d0>
 801de52:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801de54:	f042 0220 	orr.w	r2, r2, #32
 801de58:	9241      	str	r2, [sp, #260]	; 0x104
 801de5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801de5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801de60:	9241      	str	r2, [sp, #260]	; 0x104
 801de62:	2210      	movs	r2, #16
 801de64:	2b6f      	cmp	r3, #111	; 0x6f
 801de66:	9242      	str	r2, [sp, #264]	; 0x108
 801de68:	bf34      	ite	cc
 801de6a:	2303      	movcc	r3, #3
 801de6c:	2304      	movcs	r3, #4
 801de6e:	9347      	str	r3, [sp, #284]	; 0x11c
 801de70:	6863      	ldr	r3, [r4, #4]
 801de72:	2b00      	cmp	r3, #0
 801de74:	dd41      	ble.n	801defa <__ssvfiscanf_r+0x26a>
 801de76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801de78:	0659      	lsls	r1, r3, #25
 801de7a:	d404      	bmi.n	801de86 <__ssvfiscanf_r+0x1f6>
 801de7c:	6823      	ldr	r3, [r4, #0]
 801de7e:	781a      	ldrb	r2, [r3, #0]
 801de80:	5cba      	ldrb	r2, [r7, r2]
 801de82:	0712      	lsls	r2, r2, #28
 801de84:	d440      	bmi.n	801df08 <__ssvfiscanf_r+0x278>
 801de86:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801de88:	2b02      	cmp	r3, #2
 801de8a:	dc4f      	bgt.n	801df2c <__ssvfiscanf_r+0x29c>
 801de8c:	466b      	mov	r3, sp
 801de8e:	4622      	mov	r2, r4
 801de90:	a941      	add	r1, sp, #260	; 0x104
 801de92:	4630      	mov	r0, r6
 801de94:	f000 f9ce 	bl	801e234 <_scanf_chars>
 801de98:	2801      	cmp	r0, #1
 801de9a:	d065      	beq.n	801df68 <__ssvfiscanf_r+0x2d8>
 801de9c:	2802      	cmp	r0, #2
 801de9e:	f47f af21 	bne.w	801dce4 <__ssvfiscanf_r+0x54>
 801dea2:	e7cf      	b.n	801de44 <__ssvfiscanf_r+0x1b4>
 801dea4:	220a      	movs	r2, #10
 801dea6:	e7dd      	b.n	801de64 <__ssvfiscanf_r+0x1d4>
 801dea8:	2300      	movs	r3, #0
 801deaa:	9342      	str	r3, [sp, #264]	; 0x108
 801deac:	2303      	movs	r3, #3
 801deae:	e7de      	b.n	801de6e <__ssvfiscanf_r+0x1de>
 801deb0:	2308      	movs	r3, #8
 801deb2:	9342      	str	r3, [sp, #264]	; 0x108
 801deb4:	2304      	movs	r3, #4
 801deb6:	e7da      	b.n	801de6e <__ssvfiscanf_r+0x1de>
 801deb8:	4629      	mov	r1, r5
 801deba:	4640      	mov	r0, r8
 801debc:	f000 fb30 	bl	801e520 <__sccl>
 801dec0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801dec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dec6:	9341      	str	r3, [sp, #260]	; 0x104
 801dec8:	4605      	mov	r5, r0
 801deca:	2301      	movs	r3, #1
 801decc:	e7cf      	b.n	801de6e <__ssvfiscanf_r+0x1de>
 801dece:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ded0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ded4:	9341      	str	r3, [sp, #260]	; 0x104
 801ded6:	2300      	movs	r3, #0
 801ded8:	e7c9      	b.n	801de6e <__ssvfiscanf_r+0x1de>
 801deda:	2302      	movs	r3, #2
 801dedc:	e7c7      	b.n	801de6e <__ssvfiscanf_r+0x1de>
 801dede:	9841      	ldr	r0, [sp, #260]	; 0x104
 801dee0:	06c3      	lsls	r3, r0, #27
 801dee2:	f53f aeff 	bmi.w	801dce4 <__ssvfiscanf_r+0x54>
 801dee6:	9b00      	ldr	r3, [sp, #0]
 801dee8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801deea:	1d19      	adds	r1, r3, #4
 801deec:	9100      	str	r1, [sp, #0]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	07c0      	lsls	r0, r0, #31
 801def2:	bf4c      	ite	mi
 801def4:	801a      	strhmi	r2, [r3, #0]
 801def6:	601a      	strpl	r2, [r3, #0]
 801def8:	e6f4      	b.n	801dce4 <__ssvfiscanf_r+0x54>
 801defa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801defc:	4621      	mov	r1, r4
 801defe:	4630      	mov	r0, r6
 801df00:	4798      	blx	r3
 801df02:	2800      	cmp	r0, #0
 801df04:	d0b7      	beq.n	801de76 <__ssvfiscanf_r+0x1e6>
 801df06:	e79d      	b.n	801de44 <__ssvfiscanf_r+0x1b4>
 801df08:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801df0a:	3201      	adds	r2, #1
 801df0c:	9245      	str	r2, [sp, #276]	; 0x114
 801df0e:	6862      	ldr	r2, [r4, #4]
 801df10:	3a01      	subs	r2, #1
 801df12:	2a00      	cmp	r2, #0
 801df14:	6062      	str	r2, [r4, #4]
 801df16:	dd02      	ble.n	801df1e <__ssvfiscanf_r+0x28e>
 801df18:	3301      	adds	r3, #1
 801df1a:	6023      	str	r3, [r4, #0]
 801df1c:	e7ae      	b.n	801de7c <__ssvfiscanf_r+0x1ec>
 801df1e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801df20:	4621      	mov	r1, r4
 801df22:	4630      	mov	r0, r6
 801df24:	4798      	blx	r3
 801df26:	2800      	cmp	r0, #0
 801df28:	d0a8      	beq.n	801de7c <__ssvfiscanf_r+0x1ec>
 801df2a:	e78b      	b.n	801de44 <__ssvfiscanf_r+0x1b4>
 801df2c:	2b04      	cmp	r3, #4
 801df2e:	dc06      	bgt.n	801df3e <__ssvfiscanf_r+0x2ae>
 801df30:	466b      	mov	r3, sp
 801df32:	4622      	mov	r2, r4
 801df34:	a941      	add	r1, sp, #260	; 0x104
 801df36:	4630      	mov	r0, r6
 801df38:	f000 f9d4 	bl	801e2e4 <_scanf_i>
 801df3c:	e7ac      	b.n	801de98 <__ssvfiscanf_r+0x208>
 801df3e:	4b0f      	ldr	r3, [pc, #60]	; (801df7c <__ssvfiscanf_r+0x2ec>)
 801df40:	2b00      	cmp	r3, #0
 801df42:	f43f aecf 	beq.w	801dce4 <__ssvfiscanf_r+0x54>
 801df46:	466b      	mov	r3, sp
 801df48:	4622      	mov	r2, r4
 801df4a:	a941      	add	r1, sp, #260	; 0x104
 801df4c:	4630      	mov	r0, r6
 801df4e:	f7fb ffdf 	bl	8019f10 <_scanf_float>
 801df52:	e7a1      	b.n	801de98 <__ssvfiscanf_r+0x208>
 801df54:	89a3      	ldrh	r3, [r4, #12]
 801df56:	f013 0f40 	tst.w	r3, #64	; 0x40
 801df5a:	bf18      	it	ne
 801df5c:	f04f 30ff 	movne.w	r0, #4294967295
 801df60:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801df64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df68:	9844      	ldr	r0, [sp, #272]	; 0x110
 801df6a:	e7f9      	b.n	801df60 <__ssvfiscanf_r+0x2d0>
 801df6c:	0801dbdd 	.word	0x0801dbdd
 801df70:	0801dc57 	.word	0x0801dc57
 801df74:	080224a9 	.word	0x080224a9
 801df78:	080229b2 	.word	0x080229b2
 801df7c:	08019f11 	.word	0x08019f11

0801df80 <__sfputc_r>:
 801df80:	6893      	ldr	r3, [r2, #8]
 801df82:	3b01      	subs	r3, #1
 801df84:	2b00      	cmp	r3, #0
 801df86:	b410      	push	{r4}
 801df88:	6093      	str	r3, [r2, #8]
 801df8a:	da08      	bge.n	801df9e <__sfputc_r+0x1e>
 801df8c:	6994      	ldr	r4, [r2, #24]
 801df8e:	42a3      	cmp	r3, r4
 801df90:	db01      	blt.n	801df96 <__sfputc_r+0x16>
 801df92:	290a      	cmp	r1, #10
 801df94:	d103      	bne.n	801df9e <__sfputc_r+0x1e>
 801df96:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df9a:	f7fd b9ff 	b.w	801b39c <__swbuf_r>
 801df9e:	6813      	ldr	r3, [r2, #0]
 801dfa0:	1c58      	adds	r0, r3, #1
 801dfa2:	6010      	str	r0, [r2, #0]
 801dfa4:	7019      	strb	r1, [r3, #0]
 801dfa6:	4608      	mov	r0, r1
 801dfa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfac:	4770      	bx	lr

0801dfae <__sfputs_r>:
 801dfae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfb0:	4606      	mov	r6, r0
 801dfb2:	460f      	mov	r7, r1
 801dfb4:	4614      	mov	r4, r2
 801dfb6:	18d5      	adds	r5, r2, r3
 801dfb8:	42ac      	cmp	r4, r5
 801dfba:	d101      	bne.n	801dfc0 <__sfputs_r+0x12>
 801dfbc:	2000      	movs	r0, #0
 801dfbe:	e007      	b.n	801dfd0 <__sfputs_r+0x22>
 801dfc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfc4:	463a      	mov	r2, r7
 801dfc6:	4630      	mov	r0, r6
 801dfc8:	f7ff ffda 	bl	801df80 <__sfputc_r>
 801dfcc:	1c43      	adds	r3, r0, #1
 801dfce:	d1f3      	bne.n	801dfb8 <__sfputs_r+0xa>
 801dfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dfd4 <_vfiprintf_r>:
 801dfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfd8:	460d      	mov	r5, r1
 801dfda:	b09d      	sub	sp, #116	; 0x74
 801dfdc:	4614      	mov	r4, r2
 801dfde:	4698      	mov	r8, r3
 801dfe0:	4606      	mov	r6, r0
 801dfe2:	b118      	cbz	r0, 801dfec <_vfiprintf_r+0x18>
 801dfe4:	6983      	ldr	r3, [r0, #24]
 801dfe6:	b90b      	cbnz	r3, 801dfec <_vfiprintf_r+0x18>
 801dfe8:	f7fe fa72 	bl	801c4d0 <__sinit>
 801dfec:	4b89      	ldr	r3, [pc, #548]	; (801e214 <_vfiprintf_r+0x240>)
 801dfee:	429d      	cmp	r5, r3
 801dff0:	d11b      	bne.n	801e02a <_vfiprintf_r+0x56>
 801dff2:	6875      	ldr	r5, [r6, #4]
 801dff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dff6:	07d9      	lsls	r1, r3, #31
 801dff8:	d405      	bmi.n	801e006 <_vfiprintf_r+0x32>
 801dffa:	89ab      	ldrh	r3, [r5, #12]
 801dffc:	059a      	lsls	r2, r3, #22
 801dffe:	d402      	bmi.n	801e006 <_vfiprintf_r+0x32>
 801e000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e002:	f7fe fe88 	bl	801cd16 <__retarget_lock_acquire_recursive>
 801e006:	89ab      	ldrh	r3, [r5, #12]
 801e008:	071b      	lsls	r3, r3, #28
 801e00a:	d501      	bpl.n	801e010 <_vfiprintf_r+0x3c>
 801e00c:	692b      	ldr	r3, [r5, #16]
 801e00e:	b9eb      	cbnz	r3, 801e04c <_vfiprintf_r+0x78>
 801e010:	4629      	mov	r1, r5
 801e012:	4630      	mov	r0, r6
 801e014:	f7fd fa26 	bl	801b464 <__swsetup_r>
 801e018:	b1c0      	cbz	r0, 801e04c <_vfiprintf_r+0x78>
 801e01a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e01c:	07dc      	lsls	r4, r3, #31
 801e01e:	d50e      	bpl.n	801e03e <_vfiprintf_r+0x6a>
 801e020:	f04f 30ff 	mov.w	r0, #4294967295
 801e024:	b01d      	add	sp, #116	; 0x74
 801e026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e02a:	4b7b      	ldr	r3, [pc, #492]	; (801e218 <_vfiprintf_r+0x244>)
 801e02c:	429d      	cmp	r5, r3
 801e02e:	d101      	bne.n	801e034 <_vfiprintf_r+0x60>
 801e030:	68b5      	ldr	r5, [r6, #8]
 801e032:	e7df      	b.n	801dff4 <_vfiprintf_r+0x20>
 801e034:	4b79      	ldr	r3, [pc, #484]	; (801e21c <_vfiprintf_r+0x248>)
 801e036:	429d      	cmp	r5, r3
 801e038:	bf08      	it	eq
 801e03a:	68f5      	ldreq	r5, [r6, #12]
 801e03c:	e7da      	b.n	801dff4 <_vfiprintf_r+0x20>
 801e03e:	89ab      	ldrh	r3, [r5, #12]
 801e040:	0598      	lsls	r0, r3, #22
 801e042:	d4ed      	bmi.n	801e020 <_vfiprintf_r+0x4c>
 801e044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e046:	f7fe fe67 	bl	801cd18 <__retarget_lock_release_recursive>
 801e04a:	e7e9      	b.n	801e020 <_vfiprintf_r+0x4c>
 801e04c:	2300      	movs	r3, #0
 801e04e:	9309      	str	r3, [sp, #36]	; 0x24
 801e050:	2320      	movs	r3, #32
 801e052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e056:	f8cd 800c 	str.w	r8, [sp, #12]
 801e05a:	2330      	movs	r3, #48	; 0x30
 801e05c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e220 <_vfiprintf_r+0x24c>
 801e060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e064:	f04f 0901 	mov.w	r9, #1
 801e068:	4623      	mov	r3, r4
 801e06a:	469a      	mov	sl, r3
 801e06c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e070:	b10a      	cbz	r2, 801e076 <_vfiprintf_r+0xa2>
 801e072:	2a25      	cmp	r2, #37	; 0x25
 801e074:	d1f9      	bne.n	801e06a <_vfiprintf_r+0x96>
 801e076:	ebba 0b04 	subs.w	fp, sl, r4
 801e07a:	d00b      	beq.n	801e094 <_vfiprintf_r+0xc0>
 801e07c:	465b      	mov	r3, fp
 801e07e:	4622      	mov	r2, r4
 801e080:	4629      	mov	r1, r5
 801e082:	4630      	mov	r0, r6
 801e084:	f7ff ff93 	bl	801dfae <__sfputs_r>
 801e088:	3001      	adds	r0, #1
 801e08a:	f000 80aa 	beq.w	801e1e2 <_vfiprintf_r+0x20e>
 801e08e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e090:	445a      	add	r2, fp
 801e092:	9209      	str	r2, [sp, #36]	; 0x24
 801e094:	f89a 3000 	ldrb.w	r3, [sl]
 801e098:	2b00      	cmp	r3, #0
 801e09a:	f000 80a2 	beq.w	801e1e2 <_vfiprintf_r+0x20e>
 801e09e:	2300      	movs	r3, #0
 801e0a0:	f04f 32ff 	mov.w	r2, #4294967295
 801e0a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0a8:	f10a 0a01 	add.w	sl, sl, #1
 801e0ac:	9304      	str	r3, [sp, #16]
 801e0ae:	9307      	str	r3, [sp, #28]
 801e0b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e0b4:	931a      	str	r3, [sp, #104]	; 0x68
 801e0b6:	4654      	mov	r4, sl
 801e0b8:	2205      	movs	r2, #5
 801e0ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0be:	4858      	ldr	r0, [pc, #352]	; (801e220 <_vfiprintf_r+0x24c>)
 801e0c0:	f7e2 f8ae 	bl	8000220 <memchr>
 801e0c4:	9a04      	ldr	r2, [sp, #16]
 801e0c6:	b9d8      	cbnz	r0, 801e100 <_vfiprintf_r+0x12c>
 801e0c8:	06d1      	lsls	r1, r2, #27
 801e0ca:	bf44      	itt	mi
 801e0cc:	2320      	movmi	r3, #32
 801e0ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0d2:	0713      	lsls	r3, r2, #28
 801e0d4:	bf44      	itt	mi
 801e0d6:	232b      	movmi	r3, #43	; 0x2b
 801e0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0dc:	f89a 3000 	ldrb.w	r3, [sl]
 801e0e0:	2b2a      	cmp	r3, #42	; 0x2a
 801e0e2:	d015      	beq.n	801e110 <_vfiprintf_r+0x13c>
 801e0e4:	9a07      	ldr	r2, [sp, #28]
 801e0e6:	4654      	mov	r4, sl
 801e0e8:	2000      	movs	r0, #0
 801e0ea:	f04f 0c0a 	mov.w	ip, #10
 801e0ee:	4621      	mov	r1, r4
 801e0f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e0f4:	3b30      	subs	r3, #48	; 0x30
 801e0f6:	2b09      	cmp	r3, #9
 801e0f8:	d94e      	bls.n	801e198 <_vfiprintf_r+0x1c4>
 801e0fa:	b1b0      	cbz	r0, 801e12a <_vfiprintf_r+0x156>
 801e0fc:	9207      	str	r2, [sp, #28]
 801e0fe:	e014      	b.n	801e12a <_vfiprintf_r+0x156>
 801e100:	eba0 0308 	sub.w	r3, r0, r8
 801e104:	fa09 f303 	lsl.w	r3, r9, r3
 801e108:	4313      	orrs	r3, r2
 801e10a:	9304      	str	r3, [sp, #16]
 801e10c:	46a2      	mov	sl, r4
 801e10e:	e7d2      	b.n	801e0b6 <_vfiprintf_r+0xe2>
 801e110:	9b03      	ldr	r3, [sp, #12]
 801e112:	1d19      	adds	r1, r3, #4
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	9103      	str	r1, [sp, #12]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	bfbb      	ittet	lt
 801e11c:	425b      	neglt	r3, r3
 801e11e:	f042 0202 	orrlt.w	r2, r2, #2
 801e122:	9307      	strge	r3, [sp, #28]
 801e124:	9307      	strlt	r3, [sp, #28]
 801e126:	bfb8      	it	lt
 801e128:	9204      	strlt	r2, [sp, #16]
 801e12a:	7823      	ldrb	r3, [r4, #0]
 801e12c:	2b2e      	cmp	r3, #46	; 0x2e
 801e12e:	d10c      	bne.n	801e14a <_vfiprintf_r+0x176>
 801e130:	7863      	ldrb	r3, [r4, #1]
 801e132:	2b2a      	cmp	r3, #42	; 0x2a
 801e134:	d135      	bne.n	801e1a2 <_vfiprintf_r+0x1ce>
 801e136:	9b03      	ldr	r3, [sp, #12]
 801e138:	1d1a      	adds	r2, r3, #4
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	9203      	str	r2, [sp, #12]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	bfb8      	it	lt
 801e142:	f04f 33ff 	movlt.w	r3, #4294967295
 801e146:	3402      	adds	r4, #2
 801e148:	9305      	str	r3, [sp, #20]
 801e14a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e230 <_vfiprintf_r+0x25c>
 801e14e:	7821      	ldrb	r1, [r4, #0]
 801e150:	2203      	movs	r2, #3
 801e152:	4650      	mov	r0, sl
 801e154:	f7e2 f864 	bl	8000220 <memchr>
 801e158:	b140      	cbz	r0, 801e16c <_vfiprintf_r+0x198>
 801e15a:	2340      	movs	r3, #64	; 0x40
 801e15c:	eba0 000a 	sub.w	r0, r0, sl
 801e160:	fa03 f000 	lsl.w	r0, r3, r0
 801e164:	9b04      	ldr	r3, [sp, #16]
 801e166:	4303      	orrs	r3, r0
 801e168:	3401      	adds	r4, #1
 801e16a:	9304      	str	r3, [sp, #16]
 801e16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e170:	482c      	ldr	r0, [pc, #176]	; (801e224 <_vfiprintf_r+0x250>)
 801e172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e176:	2206      	movs	r2, #6
 801e178:	f7e2 f852 	bl	8000220 <memchr>
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d03f      	beq.n	801e200 <_vfiprintf_r+0x22c>
 801e180:	4b29      	ldr	r3, [pc, #164]	; (801e228 <_vfiprintf_r+0x254>)
 801e182:	bb1b      	cbnz	r3, 801e1cc <_vfiprintf_r+0x1f8>
 801e184:	9b03      	ldr	r3, [sp, #12]
 801e186:	3307      	adds	r3, #7
 801e188:	f023 0307 	bic.w	r3, r3, #7
 801e18c:	3308      	adds	r3, #8
 801e18e:	9303      	str	r3, [sp, #12]
 801e190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e192:	443b      	add	r3, r7
 801e194:	9309      	str	r3, [sp, #36]	; 0x24
 801e196:	e767      	b.n	801e068 <_vfiprintf_r+0x94>
 801e198:	fb0c 3202 	mla	r2, ip, r2, r3
 801e19c:	460c      	mov	r4, r1
 801e19e:	2001      	movs	r0, #1
 801e1a0:	e7a5      	b.n	801e0ee <_vfiprintf_r+0x11a>
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	3401      	adds	r4, #1
 801e1a6:	9305      	str	r3, [sp, #20]
 801e1a8:	4619      	mov	r1, r3
 801e1aa:	f04f 0c0a 	mov.w	ip, #10
 801e1ae:	4620      	mov	r0, r4
 801e1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1b4:	3a30      	subs	r2, #48	; 0x30
 801e1b6:	2a09      	cmp	r2, #9
 801e1b8:	d903      	bls.n	801e1c2 <_vfiprintf_r+0x1ee>
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	d0c5      	beq.n	801e14a <_vfiprintf_r+0x176>
 801e1be:	9105      	str	r1, [sp, #20]
 801e1c0:	e7c3      	b.n	801e14a <_vfiprintf_r+0x176>
 801e1c2:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1c6:	4604      	mov	r4, r0
 801e1c8:	2301      	movs	r3, #1
 801e1ca:	e7f0      	b.n	801e1ae <_vfiprintf_r+0x1da>
 801e1cc:	ab03      	add	r3, sp, #12
 801e1ce:	9300      	str	r3, [sp, #0]
 801e1d0:	462a      	mov	r2, r5
 801e1d2:	4b16      	ldr	r3, [pc, #88]	; (801e22c <_vfiprintf_r+0x258>)
 801e1d4:	a904      	add	r1, sp, #16
 801e1d6:	4630      	mov	r0, r6
 801e1d8:	f7fb fad0 	bl	801977c <_printf_float>
 801e1dc:	4607      	mov	r7, r0
 801e1de:	1c78      	adds	r0, r7, #1
 801e1e0:	d1d6      	bne.n	801e190 <_vfiprintf_r+0x1bc>
 801e1e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e1e4:	07d9      	lsls	r1, r3, #31
 801e1e6:	d405      	bmi.n	801e1f4 <_vfiprintf_r+0x220>
 801e1e8:	89ab      	ldrh	r3, [r5, #12]
 801e1ea:	059a      	lsls	r2, r3, #22
 801e1ec:	d402      	bmi.n	801e1f4 <_vfiprintf_r+0x220>
 801e1ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e1f0:	f7fe fd92 	bl	801cd18 <__retarget_lock_release_recursive>
 801e1f4:	89ab      	ldrh	r3, [r5, #12]
 801e1f6:	065b      	lsls	r3, r3, #25
 801e1f8:	f53f af12 	bmi.w	801e020 <_vfiprintf_r+0x4c>
 801e1fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e1fe:	e711      	b.n	801e024 <_vfiprintf_r+0x50>
 801e200:	ab03      	add	r3, sp, #12
 801e202:	9300      	str	r3, [sp, #0]
 801e204:	462a      	mov	r2, r5
 801e206:	4b09      	ldr	r3, [pc, #36]	; (801e22c <_vfiprintf_r+0x258>)
 801e208:	a904      	add	r1, sp, #16
 801e20a:	4630      	mov	r0, r6
 801e20c:	f7fb fd5a 	bl	8019cc4 <_printf_i>
 801e210:	e7e4      	b.n	801e1dc <_vfiprintf_r+0x208>
 801e212:	bf00      	nop
 801e214:	0802278c 	.word	0x0802278c
 801e218:	080227ac 	.word	0x080227ac
 801e21c:	0802276c 	.word	0x0802276c
 801e220:	080229ac 	.word	0x080229ac
 801e224:	080229b6 	.word	0x080229b6
 801e228:	0801977d 	.word	0x0801977d
 801e22c:	0801dfaf 	.word	0x0801dfaf
 801e230:	080229b2 	.word	0x080229b2

0801e234 <_scanf_chars>:
 801e234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e238:	4615      	mov	r5, r2
 801e23a:	688a      	ldr	r2, [r1, #8]
 801e23c:	4680      	mov	r8, r0
 801e23e:	460c      	mov	r4, r1
 801e240:	b932      	cbnz	r2, 801e250 <_scanf_chars+0x1c>
 801e242:	698a      	ldr	r2, [r1, #24]
 801e244:	2a00      	cmp	r2, #0
 801e246:	bf0c      	ite	eq
 801e248:	2201      	moveq	r2, #1
 801e24a:	f04f 32ff 	movne.w	r2, #4294967295
 801e24e:	608a      	str	r2, [r1, #8]
 801e250:	6822      	ldr	r2, [r4, #0]
 801e252:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801e2e0 <_scanf_chars+0xac>
 801e256:	06d1      	lsls	r1, r2, #27
 801e258:	bf5f      	itttt	pl
 801e25a:	681a      	ldrpl	r2, [r3, #0]
 801e25c:	1d11      	addpl	r1, r2, #4
 801e25e:	6019      	strpl	r1, [r3, #0]
 801e260:	6816      	ldrpl	r6, [r2, #0]
 801e262:	2700      	movs	r7, #0
 801e264:	69a0      	ldr	r0, [r4, #24]
 801e266:	b188      	cbz	r0, 801e28c <_scanf_chars+0x58>
 801e268:	2801      	cmp	r0, #1
 801e26a:	d107      	bne.n	801e27c <_scanf_chars+0x48>
 801e26c:	682b      	ldr	r3, [r5, #0]
 801e26e:	781a      	ldrb	r2, [r3, #0]
 801e270:	6963      	ldr	r3, [r4, #20]
 801e272:	5c9b      	ldrb	r3, [r3, r2]
 801e274:	b953      	cbnz	r3, 801e28c <_scanf_chars+0x58>
 801e276:	bb27      	cbnz	r7, 801e2c2 <_scanf_chars+0x8e>
 801e278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e27c:	2802      	cmp	r0, #2
 801e27e:	d120      	bne.n	801e2c2 <_scanf_chars+0x8e>
 801e280:	682b      	ldr	r3, [r5, #0]
 801e282:	781b      	ldrb	r3, [r3, #0]
 801e284:	f813 3009 	ldrb.w	r3, [r3, r9]
 801e288:	071b      	lsls	r3, r3, #28
 801e28a:	d41a      	bmi.n	801e2c2 <_scanf_chars+0x8e>
 801e28c:	6823      	ldr	r3, [r4, #0]
 801e28e:	06da      	lsls	r2, r3, #27
 801e290:	bf5e      	ittt	pl
 801e292:	682b      	ldrpl	r3, [r5, #0]
 801e294:	781b      	ldrbpl	r3, [r3, #0]
 801e296:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e29a:	682a      	ldr	r2, [r5, #0]
 801e29c:	686b      	ldr	r3, [r5, #4]
 801e29e:	3201      	adds	r2, #1
 801e2a0:	602a      	str	r2, [r5, #0]
 801e2a2:	68a2      	ldr	r2, [r4, #8]
 801e2a4:	3b01      	subs	r3, #1
 801e2a6:	3a01      	subs	r2, #1
 801e2a8:	606b      	str	r3, [r5, #4]
 801e2aa:	3701      	adds	r7, #1
 801e2ac:	60a2      	str	r2, [r4, #8]
 801e2ae:	b142      	cbz	r2, 801e2c2 <_scanf_chars+0x8e>
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	dcd7      	bgt.n	801e264 <_scanf_chars+0x30>
 801e2b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e2b8:	4629      	mov	r1, r5
 801e2ba:	4640      	mov	r0, r8
 801e2bc:	4798      	blx	r3
 801e2be:	2800      	cmp	r0, #0
 801e2c0:	d0d0      	beq.n	801e264 <_scanf_chars+0x30>
 801e2c2:	6823      	ldr	r3, [r4, #0]
 801e2c4:	f013 0310 	ands.w	r3, r3, #16
 801e2c8:	d105      	bne.n	801e2d6 <_scanf_chars+0xa2>
 801e2ca:	68e2      	ldr	r2, [r4, #12]
 801e2cc:	3201      	adds	r2, #1
 801e2ce:	60e2      	str	r2, [r4, #12]
 801e2d0:	69a2      	ldr	r2, [r4, #24]
 801e2d2:	b102      	cbz	r2, 801e2d6 <_scanf_chars+0xa2>
 801e2d4:	7033      	strb	r3, [r6, #0]
 801e2d6:	6923      	ldr	r3, [r4, #16]
 801e2d8:	441f      	add	r7, r3
 801e2da:	6127      	str	r7, [r4, #16]
 801e2dc:	2000      	movs	r0, #0
 801e2de:	e7cb      	b.n	801e278 <_scanf_chars+0x44>
 801e2e0:	080224a9 	.word	0x080224a9

0801e2e4 <_scanf_i>:
 801e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2e8:	4698      	mov	r8, r3
 801e2ea:	4b74      	ldr	r3, [pc, #464]	; (801e4bc <_scanf_i+0x1d8>)
 801e2ec:	460c      	mov	r4, r1
 801e2ee:	4682      	mov	sl, r0
 801e2f0:	4616      	mov	r6, r2
 801e2f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e2f6:	b087      	sub	sp, #28
 801e2f8:	ab03      	add	r3, sp, #12
 801e2fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e2fe:	4b70      	ldr	r3, [pc, #448]	; (801e4c0 <_scanf_i+0x1dc>)
 801e300:	69a1      	ldr	r1, [r4, #24]
 801e302:	4a70      	ldr	r2, [pc, #448]	; (801e4c4 <_scanf_i+0x1e0>)
 801e304:	2903      	cmp	r1, #3
 801e306:	bf18      	it	ne
 801e308:	461a      	movne	r2, r3
 801e30a:	68a3      	ldr	r3, [r4, #8]
 801e30c:	9201      	str	r2, [sp, #4]
 801e30e:	1e5a      	subs	r2, r3, #1
 801e310:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801e314:	bf88      	it	hi
 801e316:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801e31a:	4627      	mov	r7, r4
 801e31c:	bf82      	ittt	hi
 801e31e:	eb03 0905 	addhi.w	r9, r3, r5
 801e322:	f240 135d 	movwhi	r3, #349	; 0x15d
 801e326:	60a3      	strhi	r3, [r4, #8]
 801e328:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e32c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801e330:	bf98      	it	ls
 801e332:	f04f 0900 	movls.w	r9, #0
 801e336:	6023      	str	r3, [r4, #0]
 801e338:	463d      	mov	r5, r7
 801e33a:	f04f 0b00 	mov.w	fp, #0
 801e33e:	6831      	ldr	r1, [r6, #0]
 801e340:	ab03      	add	r3, sp, #12
 801e342:	7809      	ldrb	r1, [r1, #0]
 801e344:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e348:	2202      	movs	r2, #2
 801e34a:	f7e1 ff69 	bl	8000220 <memchr>
 801e34e:	b328      	cbz	r0, 801e39c <_scanf_i+0xb8>
 801e350:	f1bb 0f01 	cmp.w	fp, #1
 801e354:	d159      	bne.n	801e40a <_scanf_i+0x126>
 801e356:	6862      	ldr	r2, [r4, #4]
 801e358:	b92a      	cbnz	r2, 801e366 <_scanf_i+0x82>
 801e35a:	6822      	ldr	r2, [r4, #0]
 801e35c:	2308      	movs	r3, #8
 801e35e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801e362:	6063      	str	r3, [r4, #4]
 801e364:	6022      	str	r2, [r4, #0]
 801e366:	6822      	ldr	r2, [r4, #0]
 801e368:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801e36c:	6022      	str	r2, [r4, #0]
 801e36e:	68a2      	ldr	r2, [r4, #8]
 801e370:	1e51      	subs	r1, r2, #1
 801e372:	60a1      	str	r1, [r4, #8]
 801e374:	b192      	cbz	r2, 801e39c <_scanf_i+0xb8>
 801e376:	6832      	ldr	r2, [r6, #0]
 801e378:	1c51      	adds	r1, r2, #1
 801e37a:	6031      	str	r1, [r6, #0]
 801e37c:	7812      	ldrb	r2, [r2, #0]
 801e37e:	f805 2b01 	strb.w	r2, [r5], #1
 801e382:	6872      	ldr	r2, [r6, #4]
 801e384:	3a01      	subs	r2, #1
 801e386:	2a00      	cmp	r2, #0
 801e388:	6072      	str	r2, [r6, #4]
 801e38a:	dc07      	bgt.n	801e39c <_scanf_i+0xb8>
 801e38c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801e390:	4631      	mov	r1, r6
 801e392:	4650      	mov	r0, sl
 801e394:	4790      	blx	r2
 801e396:	2800      	cmp	r0, #0
 801e398:	f040 8085 	bne.w	801e4a6 <_scanf_i+0x1c2>
 801e39c:	f10b 0b01 	add.w	fp, fp, #1
 801e3a0:	f1bb 0f03 	cmp.w	fp, #3
 801e3a4:	d1cb      	bne.n	801e33e <_scanf_i+0x5a>
 801e3a6:	6863      	ldr	r3, [r4, #4]
 801e3a8:	b90b      	cbnz	r3, 801e3ae <_scanf_i+0xca>
 801e3aa:	230a      	movs	r3, #10
 801e3ac:	6063      	str	r3, [r4, #4]
 801e3ae:	6863      	ldr	r3, [r4, #4]
 801e3b0:	4945      	ldr	r1, [pc, #276]	; (801e4c8 <_scanf_i+0x1e4>)
 801e3b2:	6960      	ldr	r0, [r4, #20]
 801e3b4:	1ac9      	subs	r1, r1, r3
 801e3b6:	f000 f8b3 	bl	801e520 <__sccl>
 801e3ba:	f04f 0b00 	mov.w	fp, #0
 801e3be:	68a3      	ldr	r3, [r4, #8]
 801e3c0:	6822      	ldr	r2, [r4, #0]
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d03d      	beq.n	801e442 <_scanf_i+0x15e>
 801e3c6:	6831      	ldr	r1, [r6, #0]
 801e3c8:	6960      	ldr	r0, [r4, #20]
 801e3ca:	f891 c000 	ldrb.w	ip, [r1]
 801e3ce:	f810 000c 	ldrb.w	r0, [r0, ip]
 801e3d2:	2800      	cmp	r0, #0
 801e3d4:	d035      	beq.n	801e442 <_scanf_i+0x15e>
 801e3d6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801e3da:	d124      	bne.n	801e426 <_scanf_i+0x142>
 801e3dc:	0510      	lsls	r0, r2, #20
 801e3de:	d522      	bpl.n	801e426 <_scanf_i+0x142>
 801e3e0:	f10b 0b01 	add.w	fp, fp, #1
 801e3e4:	f1b9 0f00 	cmp.w	r9, #0
 801e3e8:	d003      	beq.n	801e3f2 <_scanf_i+0x10e>
 801e3ea:	3301      	adds	r3, #1
 801e3ec:	f109 39ff 	add.w	r9, r9, #4294967295
 801e3f0:	60a3      	str	r3, [r4, #8]
 801e3f2:	6873      	ldr	r3, [r6, #4]
 801e3f4:	3b01      	subs	r3, #1
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	6073      	str	r3, [r6, #4]
 801e3fa:	dd1b      	ble.n	801e434 <_scanf_i+0x150>
 801e3fc:	6833      	ldr	r3, [r6, #0]
 801e3fe:	3301      	adds	r3, #1
 801e400:	6033      	str	r3, [r6, #0]
 801e402:	68a3      	ldr	r3, [r4, #8]
 801e404:	3b01      	subs	r3, #1
 801e406:	60a3      	str	r3, [r4, #8]
 801e408:	e7d9      	b.n	801e3be <_scanf_i+0xda>
 801e40a:	f1bb 0f02 	cmp.w	fp, #2
 801e40e:	d1ae      	bne.n	801e36e <_scanf_i+0x8a>
 801e410:	6822      	ldr	r2, [r4, #0]
 801e412:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801e416:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801e41a:	d1bf      	bne.n	801e39c <_scanf_i+0xb8>
 801e41c:	2310      	movs	r3, #16
 801e41e:	6063      	str	r3, [r4, #4]
 801e420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801e424:	e7a2      	b.n	801e36c <_scanf_i+0x88>
 801e426:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801e42a:	6022      	str	r2, [r4, #0]
 801e42c:	780b      	ldrb	r3, [r1, #0]
 801e42e:	f805 3b01 	strb.w	r3, [r5], #1
 801e432:	e7de      	b.n	801e3f2 <_scanf_i+0x10e>
 801e434:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801e438:	4631      	mov	r1, r6
 801e43a:	4650      	mov	r0, sl
 801e43c:	4798      	blx	r3
 801e43e:	2800      	cmp	r0, #0
 801e440:	d0df      	beq.n	801e402 <_scanf_i+0x11e>
 801e442:	6823      	ldr	r3, [r4, #0]
 801e444:	05d9      	lsls	r1, r3, #23
 801e446:	d50d      	bpl.n	801e464 <_scanf_i+0x180>
 801e448:	42bd      	cmp	r5, r7
 801e44a:	d909      	bls.n	801e460 <_scanf_i+0x17c>
 801e44c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801e454:	4632      	mov	r2, r6
 801e456:	4650      	mov	r0, sl
 801e458:	4798      	blx	r3
 801e45a:	f105 39ff 	add.w	r9, r5, #4294967295
 801e45e:	464d      	mov	r5, r9
 801e460:	42bd      	cmp	r5, r7
 801e462:	d028      	beq.n	801e4b6 <_scanf_i+0x1d2>
 801e464:	6822      	ldr	r2, [r4, #0]
 801e466:	f012 0210 	ands.w	r2, r2, #16
 801e46a:	d113      	bne.n	801e494 <_scanf_i+0x1b0>
 801e46c:	702a      	strb	r2, [r5, #0]
 801e46e:	6863      	ldr	r3, [r4, #4]
 801e470:	9e01      	ldr	r6, [sp, #4]
 801e472:	4639      	mov	r1, r7
 801e474:	4650      	mov	r0, sl
 801e476:	47b0      	blx	r6
 801e478:	f8d8 3000 	ldr.w	r3, [r8]
 801e47c:	6821      	ldr	r1, [r4, #0]
 801e47e:	1d1a      	adds	r2, r3, #4
 801e480:	f8c8 2000 	str.w	r2, [r8]
 801e484:	f011 0f20 	tst.w	r1, #32
 801e488:	681b      	ldr	r3, [r3, #0]
 801e48a:	d00f      	beq.n	801e4ac <_scanf_i+0x1c8>
 801e48c:	6018      	str	r0, [r3, #0]
 801e48e:	68e3      	ldr	r3, [r4, #12]
 801e490:	3301      	adds	r3, #1
 801e492:	60e3      	str	r3, [r4, #12]
 801e494:	1bed      	subs	r5, r5, r7
 801e496:	44ab      	add	fp, r5
 801e498:	6925      	ldr	r5, [r4, #16]
 801e49a:	445d      	add	r5, fp
 801e49c:	6125      	str	r5, [r4, #16]
 801e49e:	2000      	movs	r0, #0
 801e4a0:	b007      	add	sp, #28
 801e4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4a6:	f04f 0b00 	mov.w	fp, #0
 801e4aa:	e7ca      	b.n	801e442 <_scanf_i+0x15e>
 801e4ac:	07ca      	lsls	r2, r1, #31
 801e4ae:	bf4c      	ite	mi
 801e4b0:	8018      	strhmi	r0, [r3, #0]
 801e4b2:	6018      	strpl	r0, [r3, #0]
 801e4b4:	e7eb      	b.n	801e48e <_scanf_i+0x1aa>
 801e4b6:	2001      	movs	r0, #1
 801e4b8:	e7f2      	b.n	801e4a0 <_scanf_i+0x1bc>
 801e4ba:	bf00      	nop
 801e4bc:	08022328 	.word	0x08022328
 801e4c0:	0801e68d 	.word	0x0801e68d
 801e4c4:	0801b399 	.word	0x0801b399
 801e4c8:	080229d6 	.word	0x080229d6

0801e4cc <_read_r>:
 801e4cc:	b538      	push	{r3, r4, r5, lr}
 801e4ce:	4d07      	ldr	r5, [pc, #28]	; (801e4ec <_read_r+0x20>)
 801e4d0:	4604      	mov	r4, r0
 801e4d2:	4608      	mov	r0, r1
 801e4d4:	4611      	mov	r1, r2
 801e4d6:	2200      	movs	r2, #0
 801e4d8:	602a      	str	r2, [r5, #0]
 801e4da:	461a      	mov	r2, r3
 801e4dc:	f7e3 f952 	bl	8001784 <_read>
 801e4e0:	1c43      	adds	r3, r0, #1
 801e4e2:	d102      	bne.n	801e4ea <_read_r+0x1e>
 801e4e4:	682b      	ldr	r3, [r5, #0]
 801e4e6:	b103      	cbz	r3, 801e4ea <_read_r+0x1e>
 801e4e8:	6023      	str	r3, [r4, #0]
 801e4ea:	bd38      	pop	{r3, r4, r5, pc}
 801e4ec:	200280fc 	.word	0x200280fc

0801e4f0 <nan>:
 801e4f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e4f8 <nan+0x8>
 801e4f4:	4770      	bx	lr
 801e4f6:	bf00      	nop
 801e4f8:	00000000 	.word	0x00000000
 801e4fc:	7ff80000 	.word	0x7ff80000

0801e500 <_sbrk_r>:
 801e500:	b538      	push	{r3, r4, r5, lr}
 801e502:	4d06      	ldr	r5, [pc, #24]	; (801e51c <_sbrk_r+0x1c>)
 801e504:	2300      	movs	r3, #0
 801e506:	4604      	mov	r4, r0
 801e508:	4608      	mov	r0, r1
 801e50a:	602b      	str	r3, [r5, #0]
 801e50c:	f7e3 f98c 	bl	8001828 <_sbrk>
 801e510:	1c43      	adds	r3, r0, #1
 801e512:	d102      	bne.n	801e51a <_sbrk_r+0x1a>
 801e514:	682b      	ldr	r3, [r5, #0]
 801e516:	b103      	cbz	r3, 801e51a <_sbrk_r+0x1a>
 801e518:	6023      	str	r3, [r4, #0]
 801e51a:	bd38      	pop	{r3, r4, r5, pc}
 801e51c:	200280fc 	.word	0x200280fc

0801e520 <__sccl>:
 801e520:	b570      	push	{r4, r5, r6, lr}
 801e522:	780b      	ldrb	r3, [r1, #0]
 801e524:	4604      	mov	r4, r0
 801e526:	2b5e      	cmp	r3, #94	; 0x5e
 801e528:	bf0b      	itete	eq
 801e52a:	784b      	ldrbeq	r3, [r1, #1]
 801e52c:	1c48      	addne	r0, r1, #1
 801e52e:	1c88      	addeq	r0, r1, #2
 801e530:	2200      	movne	r2, #0
 801e532:	bf08      	it	eq
 801e534:	2201      	moveq	r2, #1
 801e536:	1e61      	subs	r1, r4, #1
 801e538:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801e53c:	f801 2f01 	strb.w	r2, [r1, #1]!
 801e540:	42a9      	cmp	r1, r5
 801e542:	d1fb      	bne.n	801e53c <__sccl+0x1c>
 801e544:	b90b      	cbnz	r3, 801e54a <__sccl+0x2a>
 801e546:	3801      	subs	r0, #1
 801e548:	bd70      	pop	{r4, r5, r6, pc}
 801e54a:	f082 0101 	eor.w	r1, r2, #1
 801e54e:	54e1      	strb	r1, [r4, r3]
 801e550:	1c42      	adds	r2, r0, #1
 801e552:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801e556:	2d2d      	cmp	r5, #45	; 0x2d
 801e558:	f102 36ff 	add.w	r6, r2, #4294967295
 801e55c:	4610      	mov	r0, r2
 801e55e:	d006      	beq.n	801e56e <__sccl+0x4e>
 801e560:	2d5d      	cmp	r5, #93	; 0x5d
 801e562:	d0f1      	beq.n	801e548 <__sccl+0x28>
 801e564:	b90d      	cbnz	r5, 801e56a <__sccl+0x4a>
 801e566:	4630      	mov	r0, r6
 801e568:	e7ee      	b.n	801e548 <__sccl+0x28>
 801e56a:	462b      	mov	r3, r5
 801e56c:	e7ef      	b.n	801e54e <__sccl+0x2e>
 801e56e:	7816      	ldrb	r6, [r2, #0]
 801e570:	2e5d      	cmp	r6, #93	; 0x5d
 801e572:	d0fa      	beq.n	801e56a <__sccl+0x4a>
 801e574:	42b3      	cmp	r3, r6
 801e576:	dcf8      	bgt.n	801e56a <__sccl+0x4a>
 801e578:	4618      	mov	r0, r3
 801e57a:	3001      	adds	r0, #1
 801e57c:	4286      	cmp	r6, r0
 801e57e:	5421      	strb	r1, [r4, r0]
 801e580:	dcfb      	bgt.n	801e57a <__sccl+0x5a>
 801e582:	43d8      	mvns	r0, r3
 801e584:	4430      	add	r0, r6
 801e586:	1c5d      	adds	r5, r3, #1
 801e588:	42b3      	cmp	r3, r6
 801e58a:	bfa8      	it	ge
 801e58c:	2000      	movge	r0, #0
 801e58e:	182b      	adds	r3, r5, r0
 801e590:	3202      	adds	r2, #2
 801e592:	e7de      	b.n	801e552 <__sccl+0x32>

0801e594 <_strtoul_l.isra.0>:
 801e594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e598:	4e3b      	ldr	r6, [pc, #236]	; (801e688 <_strtoul_l.isra.0+0xf4>)
 801e59a:	4686      	mov	lr, r0
 801e59c:	468c      	mov	ip, r1
 801e59e:	4660      	mov	r0, ip
 801e5a0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e5a4:	5da5      	ldrb	r5, [r4, r6]
 801e5a6:	f015 0508 	ands.w	r5, r5, #8
 801e5aa:	d1f8      	bne.n	801e59e <_strtoul_l.isra.0+0xa>
 801e5ac:	2c2d      	cmp	r4, #45	; 0x2d
 801e5ae:	d134      	bne.n	801e61a <_strtoul_l.isra.0+0x86>
 801e5b0:	f89c 4000 	ldrb.w	r4, [ip]
 801e5b4:	f04f 0801 	mov.w	r8, #1
 801e5b8:	f100 0c02 	add.w	ip, r0, #2
 801e5bc:	2b00      	cmp	r3, #0
 801e5be:	d05e      	beq.n	801e67e <_strtoul_l.isra.0+0xea>
 801e5c0:	2b10      	cmp	r3, #16
 801e5c2:	d10c      	bne.n	801e5de <_strtoul_l.isra.0+0x4a>
 801e5c4:	2c30      	cmp	r4, #48	; 0x30
 801e5c6:	d10a      	bne.n	801e5de <_strtoul_l.isra.0+0x4a>
 801e5c8:	f89c 0000 	ldrb.w	r0, [ip]
 801e5cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801e5d0:	2858      	cmp	r0, #88	; 0x58
 801e5d2:	d14f      	bne.n	801e674 <_strtoul_l.isra.0+0xe0>
 801e5d4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801e5d8:	2310      	movs	r3, #16
 801e5da:	f10c 0c02 	add.w	ip, ip, #2
 801e5de:	f04f 37ff 	mov.w	r7, #4294967295
 801e5e2:	2500      	movs	r5, #0
 801e5e4:	fbb7 f7f3 	udiv	r7, r7, r3
 801e5e8:	fb03 f907 	mul.w	r9, r3, r7
 801e5ec:	ea6f 0909 	mvn.w	r9, r9
 801e5f0:	4628      	mov	r0, r5
 801e5f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801e5f6:	2e09      	cmp	r6, #9
 801e5f8:	d818      	bhi.n	801e62c <_strtoul_l.isra.0+0x98>
 801e5fa:	4634      	mov	r4, r6
 801e5fc:	42a3      	cmp	r3, r4
 801e5fe:	dd24      	ble.n	801e64a <_strtoul_l.isra.0+0xb6>
 801e600:	2d00      	cmp	r5, #0
 801e602:	db1f      	blt.n	801e644 <_strtoul_l.isra.0+0xb0>
 801e604:	4287      	cmp	r7, r0
 801e606:	d31d      	bcc.n	801e644 <_strtoul_l.isra.0+0xb0>
 801e608:	d101      	bne.n	801e60e <_strtoul_l.isra.0+0x7a>
 801e60a:	45a1      	cmp	r9, r4
 801e60c:	db1a      	blt.n	801e644 <_strtoul_l.isra.0+0xb0>
 801e60e:	fb00 4003 	mla	r0, r0, r3, r4
 801e612:	2501      	movs	r5, #1
 801e614:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801e618:	e7eb      	b.n	801e5f2 <_strtoul_l.isra.0+0x5e>
 801e61a:	2c2b      	cmp	r4, #43	; 0x2b
 801e61c:	bf08      	it	eq
 801e61e:	f89c 4000 	ldrbeq.w	r4, [ip]
 801e622:	46a8      	mov	r8, r5
 801e624:	bf08      	it	eq
 801e626:	f100 0c02 	addeq.w	ip, r0, #2
 801e62a:	e7c7      	b.n	801e5bc <_strtoul_l.isra.0+0x28>
 801e62c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801e630:	2e19      	cmp	r6, #25
 801e632:	d801      	bhi.n	801e638 <_strtoul_l.isra.0+0xa4>
 801e634:	3c37      	subs	r4, #55	; 0x37
 801e636:	e7e1      	b.n	801e5fc <_strtoul_l.isra.0+0x68>
 801e638:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801e63c:	2e19      	cmp	r6, #25
 801e63e:	d804      	bhi.n	801e64a <_strtoul_l.isra.0+0xb6>
 801e640:	3c57      	subs	r4, #87	; 0x57
 801e642:	e7db      	b.n	801e5fc <_strtoul_l.isra.0+0x68>
 801e644:	f04f 35ff 	mov.w	r5, #4294967295
 801e648:	e7e4      	b.n	801e614 <_strtoul_l.isra.0+0x80>
 801e64a:	2d00      	cmp	r5, #0
 801e64c:	da07      	bge.n	801e65e <_strtoul_l.isra.0+0xca>
 801e64e:	2322      	movs	r3, #34	; 0x22
 801e650:	f8ce 3000 	str.w	r3, [lr]
 801e654:	f04f 30ff 	mov.w	r0, #4294967295
 801e658:	b942      	cbnz	r2, 801e66c <_strtoul_l.isra.0+0xd8>
 801e65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e65e:	f1b8 0f00 	cmp.w	r8, #0
 801e662:	d000      	beq.n	801e666 <_strtoul_l.isra.0+0xd2>
 801e664:	4240      	negs	r0, r0
 801e666:	2a00      	cmp	r2, #0
 801e668:	d0f7      	beq.n	801e65a <_strtoul_l.isra.0+0xc6>
 801e66a:	b10d      	cbz	r5, 801e670 <_strtoul_l.isra.0+0xdc>
 801e66c:	f10c 31ff 	add.w	r1, ip, #4294967295
 801e670:	6011      	str	r1, [r2, #0]
 801e672:	e7f2      	b.n	801e65a <_strtoul_l.isra.0+0xc6>
 801e674:	2430      	movs	r4, #48	; 0x30
 801e676:	2b00      	cmp	r3, #0
 801e678:	d1b1      	bne.n	801e5de <_strtoul_l.isra.0+0x4a>
 801e67a:	2308      	movs	r3, #8
 801e67c:	e7af      	b.n	801e5de <_strtoul_l.isra.0+0x4a>
 801e67e:	2c30      	cmp	r4, #48	; 0x30
 801e680:	d0a2      	beq.n	801e5c8 <_strtoul_l.isra.0+0x34>
 801e682:	230a      	movs	r3, #10
 801e684:	e7ab      	b.n	801e5de <_strtoul_l.isra.0+0x4a>
 801e686:	bf00      	nop
 801e688:	080224a9 	.word	0x080224a9

0801e68c <_strtoul_r>:
 801e68c:	f7ff bf82 	b.w	801e594 <_strtoul_l.isra.0>

0801e690 <__submore>:
 801e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e694:	460c      	mov	r4, r1
 801e696:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801e698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e69c:	4299      	cmp	r1, r3
 801e69e:	d11d      	bne.n	801e6dc <__submore+0x4c>
 801e6a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e6a4:	f7ff f8e4 	bl	801d870 <_malloc_r>
 801e6a8:	b918      	cbnz	r0, 801e6b2 <__submore+0x22>
 801e6aa:	f04f 30ff 	mov.w	r0, #4294967295
 801e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e6b6:	63a3      	str	r3, [r4, #56]	; 0x38
 801e6b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801e6bc:	6360      	str	r0, [r4, #52]	; 0x34
 801e6be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801e6c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801e6c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801e6ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801e6ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801e6d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801e6d6:	6020      	str	r0, [r4, #0]
 801e6d8:	2000      	movs	r0, #0
 801e6da:	e7e8      	b.n	801e6ae <__submore+0x1e>
 801e6dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801e6de:	0077      	lsls	r7, r6, #1
 801e6e0:	463a      	mov	r2, r7
 801e6e2:	f000 f851 	bl	801e788 <_realloc_r>
 801e6e6:	4605      	mov	r5, r0
 801e6e8:	2800      	cmp	r0, #0
 801e6ea:	d0de      	beq.n	801e6aa <__submore+0x1a>
 801e6ec:	eb00 0806 	add.w	r8, r0, r6
 801e6f0:	4601      	mov	r1, r0
 801e6f2:	4632      	mov	r2, r6
 801e6f4:	4640      	mov	r0, r8
 801e6f6:	f7fa ff71 	bl	80195dc <memcpy>
 801e6fa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801e6fe:	f8c4 8000 	str.w	r8, [r4]
 801e702:	e7e9      	b.n	801e6d8 <__submore+0x48>

0801e704 <__ascii_wctomb>:
 801e704:	b149      	cbz	r1, 801e71a <__ascii_wctomb+0x16>
 801e706:	2aff      	cmp	r2, #255	; 0xff
 801e708:	bf85      	ittet	hi
 801e70a:	238a      	movhi	r3, #138	; 0x8a
 801e70c:	6003      	strhi	r3, [r0, #0]
 801e70e:	700a      	strbls	r2, [r1, #0]
 801e710:	f04f 30ff 	movhi.w	r0, #4294967295
 801e714:	bf98      	it	ls
 801e716:	2001      	movls	r0, #1
 801e718:	4770      	bx	lr
 801e71a:	4608      	mov	r0, r1
 801e71c:	4770      	bx	lr

0801e71e <abort>:
 801e71e:	b508      	push	{r3, lr}
 801e720:	2006      	movs	r0, #6
 801e722:	f000 f87f 	bl	801e824 <raise>
 801e726:	2001      	movs	r0, #1
 801e728:	f7e3 f822 	bl	8001770 <_exit>

0801e72c <_fstat_r>:
 801e72c:	b538      	push	{r3, r4, r5, lr}
 801e72e:	4d07      	ldr	r5, [pc, #28]	; (801e74c <_fstat_r+0x20>)
 801e730:	2300      	movs	r3, #0
 801e732:	4604      	mov	r4, r0
 801e734:	4608      	mov	r0, r1
 801e736:	4611      	mov	r1, r2
 801e738:	602b      	str	r3, [r5, #0]
 801e73a:	f7e3 f84c 	bl	80017d6 <_fstat>
 801e73e:	1c43      	adds	r3, r0, #1
 801e740:	d102      	bne.n	801e748 <_fstat_r+0x1c>
 801e742:	682b      	ldr	r3, [r5, #0]
 801e744:	b103      	cbz	r3, 801e748 <_fstat_r+0x1c>
 801e746:	6023      	str	r3, [r4, #0]
 801e748:	bd38      	pop	{r3, r4, r5, pc}
 801e74a:	bf00      	nop
 801e74c:	200280fc 	.word	0x200280fc

0801e750 <_isatty_r>:
 801e750:	b538      	push	{r3, r4, r5, lr}
 801e752:	4d06      	ldr	r5, [pc, #24]	; (801e76c <_isatty_r+0x1c>)
 801e754:	2300      	movs	r3, #0
 801e756:	4604      	mov	r4, r0
 801e758:	4608      	mov	r0, r1
 801e75a:	602b      	str	r3, [r5, #0]
 801e75c:	f7e3 f84b 	bl	80017f6 <_isatty>
 801e760:	1c43      	adds	r3, r0, #1
 801e762:	d102      	bne.n	801e76a <_isatty_r+0x1a>
 801e764:	682b      	ldr	r3, [r5, #0]
 801e766:	b103      	cbz	r3, 801e76a <_isatty_r+0x1a>
 801e768:	6023      	str	r3, [r4, #0]
 801e76a:	bd38      	pop	{r3, r4, r5, pc}
 801e76c:	200280fc 	.word	0x200280fc

0801e770 <__malloc_lock>:
 801e770:	4801      	ldr	r0, [pc, #4]	; (801e778 <__malloc_lock+0x8>)
 801e772:	f7fe bad0 	b.w	801cd16 <__retarget_lock_acquire_recursive>
 801e776:	bf00      	nop
 801e778:	20028108 	.word	0x20028108

0801e77c <__malloc_unlock>:
 801e77c:	4801      	ldr	r0, [pc, #4]	; (801e784 <__malloc_unlock+0x8>)
 801e77e:	f7fe bacb 	b.w	801cd18 <__retarget_lock_release_recursive>
 801e782:	bf00      	nop
 801e784:	20028108 	.word	0x20028108

0801e788 <_realloc_r>:
 801e788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e78a:	4607      	mov	r7, r0
 801e78c:	4614      	mov	r4, r2
 801e78e:	460e      	mov	r6, r1
 801e790:	b921      	cbnz	r1, 801e79c <_realloc_r+0x14>
 801e792:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801e796:	4611      	mov	r1, r2
 801e798:	f7ff b86a 	b.w	801d870 <_malloc_r>
 801e79c:	b922      	cbnz	r2, 801e7a8 <_realloc_r+0x20>
 801e79e:	f7ff f817 	bl	801d7d0 <_free_r>
 801e7a2:	4625      	mov	r5, r4
 801e7a4:	4628      	mov	r0, r5
 801e7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e7a8:	f000 f858 	bl	801e85c <_malloc_usable_size_r>
 801e7ac:	42a0      	cmp	r0, r4
 801e7ae:	d20f      	bcs.n	801e7d0 <_realloc_r+0x48>
 801e7b0:	4621      	mov	r1, r4
 801e7b2:	4638      	mov	r0, r7
 801e7b4:	f7ff f85c 	bl	801d870 <_malloc_r>
 801e7b8:	4605      	mov	r5, r0
 801e7ba:	2800      	cmp	r0, #0
 801e7bc:	d0f2      	beq.n	801e7a4 <_realloc_r+0x1c>
 801e7be:	4631      	mov	r1, r6
 801e7c0:	4622      	mov	r2, r4
 801e7c2:	f7fa ff0b 	bl	80195dc <memcpy>
 801e7c6:	4631      	mov	r1, r6
 801e7c8:	4638      	mov	r0, r7
 801e7ca:	f7ff f801 	bl	801d7d0 <_free_r>
 801e7ce:	e7e9      	b.n	801e7a4 <_realloc_r+0x1c>
 801e7d0:	4635      	mov	r5, r6
 801e7d2:	e7e7      	b.n	801e7a4 <_realloc_r+0x1c>

0801e7d4 <_raise_r>:
 801e7d4:	291f      	cmp	r1, #31
 801e7d6:	b538      	push	{r3, r4, r5, lr}
 801e7d8:	4604      	mov	r4, r0
 801e7da:	460d      	mov	r5, r1
 801e7dc:	d904      	bls.n	801e7e8 <_raise_r+0x14>
 801e7de:	2316      	movs	r3, #22
 801e7e0:	6003      	str	r3, [r0, #0]
 801e7e2:	f04f 30ff 	mov.w	r0, #4294967295
 801e7e6:	bd38      	pop	{r3, r4, r5, pc}
 801e7e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e7ea:	b112      	cbz	r2, 801e7f2 <_raise_r+0x1e>
 801e7ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e7f0:	b94b      	cbnz	r3, 801e806 <_raise_r+0x32>
 801e7f2:	4620      	mov	r0, r4
 801e7f4:	f000 f830 	bl	801e858 <_getpid_r>
 801e7f8:	462a      	mov	r2, r5
 801e7fa:	4601      	mov	r1, r0
 801e7fc:	4620      	mov	r0, r4
 801e7fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e802:	f000 b817 	b.w	801e834 <_kill_r>
 801e806:	2b01      	cmp	r3, #1
 801e808:	d00a      	beq.n	801e820 <_raise_r+0x4c>
 801e80a:	1c59      	adds	r1, r3, #1
 801e80c:	d103      	bne.n	801e816 <_raise_r+0x42>
 801e80e:	2316      	movs	r3, #22
 801e810:	6003      	str	r3, [r0, #0]
 801e812:	2001      	movs	r0, #1
 801e814:	e7e7      	b.n	801e7e6 <_raise_r+0x12>
 801e816:	2400      	movs	r4, #0
 801e818:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e81c:	4628      	mov	r0, r5
 801e81e:	4798      	blx	r3
 801e820:	2000      	movs	r0, #0
 801e822:	e7e0      	b.n	801e7e6 <_raise_r+0x12>

0801e824 <raise>:
 801e824:	4b02      	ldr	r3, [pc, #8]	; (801e830 <raise+0xc>)
 801e826:	4601      	mov	r1, r0
 801e828:	6818      	ldr	r0, [r3, #0]
 801e82a:	f7ff bfd3 	b.w	801e7d4 <_raise_r>
 801e82e:	bf00      	nop
 801e830:	20000020 	.word	0x20000020

0801e834 <_kill_r>:
 801e834:	b538      	push	{r3, r4, r5, lr}
 801e836:	4d07      	ldr	r5, [pc, #28]	; (801e854 <_kill_r+0x20>)
 801e838:	2300      	movs	r3, #0
 801e83a:	4604      	mov	r4, r0
 801e83c:	4608      	mov	r0, r1
 801e83e:	4611      	mov	r1, r2
 801e840:	602b      	str	r3, [r5, #0]
 801e842:	f7e2 ff83 	bl	800174c <_kill>
 801e846:	1c43      	adds	r3, r0, #1
 801e848:	d102      	bne.n	801e850 <_kill_r+0x1c>
 801e84a:	682b      	ldr	r3, [r5, #0]
 801e84c:	b103      	cbz	r3, 801e850 <_kill_r+0x1c>
 801e84e:	6023      	str	r3, [r4, #0]
 801e850:	bd38      	pop	{r3, r4, r5, pc}
 801e852:	bf00      	nop
 801e854:	200280fc 	.word	0x200280fc

0801e858 <_getpid_r>:
 801e858:	f7e2 bf70 	b.w	800173c <_getpid>

0801e85c <_malloc_usable_size_r>:
 801e85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e860:	1f18      	subs	r0, r3, #4
 801e862:	2b00      	cmp	r3, #0
 801e864:	bfbc      	itt	lt
 801e866:	580b      	ldrlt	r3, [r1, r0]
 801e868:	18c0      	addlt	r0, r0, r3
 801e86a:	4770      	bx	lr

0801e86c <_init>:
 801e86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e86e:	bf00      	nop
 801e870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e872:	bc08      	pop	{r3}
 801e874:	469e      	mov	lr, r3
 801e876:	4770      	bx	lr

0801e878 <_fini>:
 801e878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e87a:	bf00      	nop
 801e87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e87e:	bc08      	pop	{r3}
 801e880:	469e      	mov	lr, r3
 801e882:	4770      	bx	lr
