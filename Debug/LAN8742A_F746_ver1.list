
LAN8742A_F746_ver1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ddc0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f50  0801df90  0801df90  0002df90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021ee0  08021ee0  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08021ee0  08021ee0  00031ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021ee8  08021ee8  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021ee8  08021ee8  00031ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021eec  08021eec  00031eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08021ef0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00027ef8  200001f0  080220e0  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200280e8  080220e0  000480e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004593b  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007d1e  00000000  00000000  00085b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002190  00000000  00000000  0008d880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002020  00000000  00000000  0008fa10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000375d2  00000000  00000000  00091a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bece  00000000  00000000  000c9002  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c80  00000000  00000000  000f4ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00205b50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c58  00000000  00000000  00205bcc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801df78 	.word	0x0801df78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0801df78 	.word	0x0801df78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4a07      	ldr	r2, [pc, #28]	; (8000ff4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <vApplicationGetIdleTaskMemory+0x30>)
 8000fde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fe6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20000a0c 	.word	0x20000a0c
 8000ff8:	20000a60 	.word	0x20000a60

08000ffc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ffc:	b5b0      	push	{r4, r5, r7, lr}
 8000ffe:	b090      	sub	sp, #64	; 0x40
 8001000:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinarySem */
  osSemaphoreDef(BinarySem);
 8001002:	2300      	movs	r3, #0
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
 8001006:	2300      	movs	r3, #0
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinarySemHandle = osSemaphoreCreate(osSemaphore(BinarySem), 1);
 800100a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800100e:	2101      	movs	r1, #1
 8001010:	4618      	mov	r0, r3
 8001012:	f004 fa7d 	bl	8005510 <osSemaphoreCreate>
 8001016:	4602      	mov	r2, r0
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_FREERTOS_Init+0x70>)
 800101a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_FREERTOS_Init+0x74>)
 800101e:	f107 041c 	add.w	r4, r7, #28
 8001022:	461d      	mov	r5, r3
 8001024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001028:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800102c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f004 f96d 	bl	8005316 <osThreadCreate>
 800103c:	4602      	mov	r2, r0
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <MX_FREERTOS_Init+0x78>)
 8001040:	601a      	str	r2, [r3, #0]

  /* definition and creation of pwmTask */
  osThreadDef(pwmTask, StartPwmTask, osPriorityAboveNormal, 0, 256);
 8001042:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <MX_FREERTOS_Init+0x7c>)
 8001044:	463c      	mov	r4, r7
 8001046:	461d      	mov	r5, r3
 8001048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001050:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pwmTaskHandle = osThreadCreate(osThread(pwmTask), NULL);
 8001054:	463b      	mov	r3, r7
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f004 f95c 	bl	8005316 <osThreadCreate>
 800105e:	4602      	mov	r2, r0
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_FREERTOS_Init+0x80>)
 8001062:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001064:	bf00      	nop
 8001066:	3740      	adds	r7, #64	; 0x40
 8001068:	46bd      	mov	sp, r7
 800106a:	bdb0      	pop	{r4, r5, r7, pc}
 800106c:	20021600 	.word	0x20021600
 8001070:	0801df9c 	.word	0x0801df9c
 8001074:	200215fc 	.word	0x200215fc
 8001078:	0801dfc0 	.word	0x0801dfc0
 800107c:	20021604 	.word	0x20021604

08001080 <StartDefaultTask>:
  */

extern struct netif gnetif;
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af02      	add	r7, sp, #8
 8001086:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001088:	f003 fc90 	bl	80049ac <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */

  char * write_buf = pvPortMalloc(64);
 800108c:	2040      	movs	r0, #64	; 0x40
 800108e:	f006 ff15 	bl	8007ebc <pvPortMalloc>
 8001092:	6278      	str	r0, [r7, #36]	; 0x24
  struct netbuf * nb;
  volatile err_t res;
  ip_addr_t local_ip;
  ip_addr_t remote_ip;

  while(gnetif.ip_addr.addr == 0) osDelay(1);
 8001094:	e002      	b.n	800109c <StartDefaultTask+0x1c>
 8001096:	2001      	movs	r0, #1
 8001098:	f004 f989 	bl	80053ae <osDelay>
 800109c:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <StartDefaultTask+0x198>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0f8      	beq.n	8001096 <StartDefaultTask+0x16>
  local_ip = gnetif.ip_addr;
 80010a4:	4b5c      	ldr	r3, [pc, #368]	; (8001218 <StartDefaultTask+0x198>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
  printf("Client IP: %s\r\n", ip4addr_ntoa(&gnetif.ip_addr));
 80010aa:	485c      	ldr	r0, [pc, #368]	; (800121c <StartDefaultTask+0x19c>)
 80010ac:	f016 fef6 	bl	8017e9c <ip4addr_ntoa>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4619      	mov	r1, r3
 80010b4:	485a      	ldr	r0, [pc, #360]	; (8001220 <StartDefaultTask+0x1a0>)
 80010b6:	f018 ff31 	bl	8019f1c <iprintf>

  netconn_gethostbyname(DOMAIN_NAME, &remote_ip);
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	4619      	mov	r1, r3
 80010c0:	4858      	ldr	r0, [pc, #352]	; (8001224 <StartDefaultTask+0x1a4>)
 80010c2:	f007 fd55 	bl	8008b70 <netconn_gethostbyname>
  printf("Server IP: %s\r\n\r\n", ip4addr_ntoa(&remote_ip));
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	4618      	mov	r0, r3
 80010cc:	f016 fee6 	bl	8017e9c <ip4addr_ntoa>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4854      	ldr	r0, [pc, #336]	; (8001228 <StartDefaultTask+0x1a8>)
 80010d6:	f018 ff21 	bl	8019f1c <iprintf>

  sprintf(write_buf, "GET / HTTP/1.1\r\nHost: %s\r\n\r\n", DOMAIN_NAME);
 80010da:	4a52      	ldr	r2, [pc, #328]	; (8001224 <StartDefaultTask+0x1a4>)
 80010dc:	4953      	ldr	r1, [pc, #332]	; (800122c <StartDefaultTask+0x1ac>)
 80010de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010e0:	f018 ffd2 	bl	801a088 <siprintf>

  /* Infinite loop */
  for(;;){

	  nc = netconn_new(NETCONN_TCP);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2010      	movs	r0, #16
 80010ea:	f007 f8e5 	bl	80082b8 <netconn_new_with_proto_and_callback>
 80010ee:	6238      	str	r0, [r7, #32]
	  if(nc != NULL){
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f000 8088 	beq.w	8001208 <StartDefaultTask+0x188>

		  netconn_set_recvtimeout(nc, TIMEOUT);
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010fe:	61da      	str	r2, [r3, #28]
		  res = netconn_bind(nc, &local_ip, 0);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	4619      	mov	r1, r3
 8001108:	6a38      	ldr	r0, [r7, #32]
 800110a:	f007 f98f 	bl	800842c <netconn_bind>
 800110e:	4603      	mov	r3, r0
 8001110:	75fb      	strb	r3, [r7, #23]
		  if(res == ERR_OK){
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d166      	bne.n	80011e8 <StartDefaultTask+0x168>

			  res = netconn_connect(nc, &remote_ip, PORT);
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2250      	movs	r2, #80	; 0x50
 8001120:	4619      	mov	r1, r3
 8001122:	6a38      	ldr	r0, [r7, #32]
 8001124:	f007 f9ba 	bl	800849c <netconn_connect>
 8001128:	4603      	mov	r3, r0
 800112a:	75fb      	strb	r3, [r7, #23]
			  if(res == ERR_OK){
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	b25b      	sxtb	r3, r3
 8001130:	2b00      	cmp	r3, #0
 8001132:	d152      	bne.n	80011da <StartDefaultTask+0x15a>

				  for(;;){

					  res = netconn_write(nc, write_buf, strlen(write_buf), NETCONN_COPY);
 8001134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001136:	f7ff f86b 	bl	8000210 <strlen>
 800113a:	4602      	mov	r2, r0
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	f007 fbe9 	bl	800891c <netconn_write_partly>
 800114a:	4603      	mov	r3, r0
 800114c:	75fb      	strb	r3, [r7, #23]
					  printf("send:\r\n%s", write_buf);
 800114e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001150:	4837      	ldr	r0, [pc, #220]	; (8001230 <StartDefaultTask+0x1b0>)
 8001152:	f018 fee3 	bl	8019f1c <iprintf>
					  if(res != ERR_OK){
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <StartDefaultTask+0xec>

						  printf("\r\n\r\nnetconn_write error: %d\r\n\r\n", res);
 800115e:	7dfb      	ldrb	r3, [r7, #23]
 8001160:	b25b      	sxtb	r3, r3
 8001162:	4619      	mov	r1, r3
 8001164:	4833      	ldr	r0, [pc, #204]	; (8001234 <StartDefaultTask+0x1b4>)
 8001166:	f018 fed9 	bl	8019f1c <iprintf>
						  break;
 800116a:	e043      	b.n	80011f4 <StartDefaultTask+0x174>
					  }
					  res = netconn_recv(nc, &nb);
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4619      	mov	r1, r3
 8001172:	6a38      	ldr	r0, [r7, #32]
 8001174:	f007 fb58 	bl	8008828 <netconn_recv>
 8001178:	4603      	mov	r3, r0
 800117a:	75fb      	strb	r3, [r7, #23]
					  if(res == ERR_OK){
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d117      	bne.n	80011b4 <StartDefaultTask+0x134>

						  uint16_t len = netbuf_len(nb);
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	891b      	ldrh	r3, [r3, #8]
 800118a:	83fb      	strh	r3, [r7, #30]
						  netbuf_copy(nb, recv_buf, len);
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	8bfa      	ldrh	r2, [r7, #30]
 8001192:	2300      	movs	r3, #0
 8001194:	4928      	ldr	r1, [pc, #160]	; (8001238 <StartDefaultTask+0x1b8>)
 8001196:	f00c f8f9 	bl	800d38c <pbuf_copy_partial>
						  netbuf_delete(nb);
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4618      	mov	r0, r3
 800119e:	f009 f993 	bl	800a4c8 <netbuf_delete>
						  recv_buf[len] = 0;
 80011a2:	8bfb      	ldrh	r3, [r7, #30]
 80011a4:	4a24      	ldr	r2, [pc, #144]	; (8001238 <StartDefaultTask+0x1b8>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	54d1      	strb	r1, [r2, r3]
						  printf("recv:\r\n%s", recv_buf);
 80011aa:	4923      	ldr	r1, [pc, #140]	; (8001238 <StartDefaultTask+0x1b8>)
 80011ac:	4823      	ldr	r0, [pc, #140]	; (800123c <StartDefaultTask+0x1bc>)
 80011ae:	f018 feb5 	bl	8019f1c <iprintf>
 80011b2:	e006      	b.n	80011c2 <StartDefaultTask+0x142>

					  } else {

						  printf("\r\n\r\nnetconn_recv error: %d\r\n\r\n", res);
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	4821      	ldr	r0, [pc, #132]	; (8001240 <StartDefaultTask+0x1c0>)
 80011bc:	f018 feae 	bl	8019f1c <iprintf>
						  break;
 80011c0:	e018      	b.n	80011f4 <StartDefaultTask+0x174>
					  }
					  xSemaphoreGive(BinarySemHandle);
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <StartDefaultTask+0x1c4>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	2300      	movs	r3, #0
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	f004 fdba 	bl	8005d44 <xQueueGenericSend>
					  osDelay(TIMEOUT);
 80011d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011d4:	f004 f8eb 	bl	80053ae <osDelay>
					  res = netconn_write(nc, write_buf, strlen(write_buf), NETCONN_COPY);
 80011d8:	e7ac      	b.n	8001134 <StartDefaultTask+0xb4>
				  }
			  } else printf("netconn_connect error: %d\r\n", res);
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	4819      	ldr	r0, [pc, #100]	; (8001248 <StartDefaultTask+0x1c8>)
 80011e2:	f018 fe9b 	bl	8019f1c <iprintf>
 80011e6:	e005      	b.n	80011f4 <StartDefaultTask+0x174>
		  }	else printf("netconn_bind error: %d\r\n", res);
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	4817      	ldr	r0, [pc, #92]	; (800124c <StartDefaultTask+0x1cc>)
 80011f0:	f018 fe94 	bl	8019f1c <iprintf>
		  netconn_close(nc);
 80011f4:	6a38      	ldr	r0, [r7, #32]
 80011f6:	f007 fc93 	bl	8008b20 <netconn_close>
		  netconn_delete(nc);
 80011fa:	6a38      	ldr	r0, [r7, #32]
 80011fc:	f007 f8fa 	bl	80083f4 <netconn_delete>
		  printf("connection closed and deleted\r\n");
 8001200:	4813      	ldr	r0, [pc, #76]	; (8001250 <StartDefaultTask+0x1d0>)
 8001202:	f018 feff 	bl	801a004 <puts>
 8001206:	e002      	b.n	800120e <StartDefaultTask+0x18e>
	  } else printf("netconn_new error\r\n");
 8001208:	4812      	ldr	r0, [pc, #72]	; (8001254 <StartDefaultTask+0x1d4>)
 800120a:	f018 fefb 	bl	801a004 <puts>
	  osDelay(TIMEOUT);
 800120e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001212:	f004 f8cc 	bl	80053ae <osDelay>
	  nc = netconn_new(NETCONN_TCP);
 8001216:	e765      	b.n	80010e4 <StartDefaultTask+0x64>
 8001218:	20021694 	.word	0x20021694
 800121c:	20021698 	.word	0x20021698
 8001220:	0801dfdc 	.word	0x0801dfdc
 8001224:	0801dfec 	.word	0x0801dfec
 8001228:	0801dff8 	.word	0x0801dff8
 800122c:	0801e00c 	.word	0x0801e00c
 8001230:	0801e02c 	.word	0x0801e02c
 8001234:	0801e038 	.word	0x0801e038
 8001238:	2000020c 	.word	0x2000020c
 800123c:	0801e058 	.word	0x0801e058
 8001240:	0801e064 	.word	0x0801e064
 8001244:	20021600 	.word	0x20021600
 8001248:	0801e084 	.word	0x0801e084
 800124c:	0801e0a0 	.word	0x0801e0a0
 8001250:	0801e0bc 	.word	0x0801e0bc
 8001254:	0801e0dc 	.word	0x0801e0dc

08001258 <StartPwmTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPwmTask */
void StartPwmTask(void const * argument)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPwmTask */
	xSemaphoreTake(BinarySemHandle, (TickType_t) 10);
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <StartPwmTask+0x70>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	210a      	movs	r1, #10
 8001266:	4618      	mov	r0, r3
 8001268:	f005 f87e 	bl	8006368 <xQueueSemaphoreTake>
  /* Infinite loop */
  for(;;){

	  if(xSemaphoreTake(BinarySemHandle, (TickType_t) 10) == pdTRUE){
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <StartPwmTask+0x70>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	210a      	movs	r1, #10
 8001272:	4618      	mov	r0, r3
 8001274:	f005 f878 	bl	8006368 <xQueueSemaphoreTake>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d1f6      	bne.n	800126c <StartPwmTask+0x14>

		  char * ptr = strchr(recv_buf, '$');
 800127e:	2124      	movs	r1, #36	; 0x24
 8001280:	4812      	ldr	r0, [pc, #72]	; (80012cc <StartPwmTask+0x74>)
 8001282:	f018 ff90 	bl	801a1a6 <strchr>
 8001286:	60f8      	str	r0, [r7, #12]
		  if(ptr != NULL){
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d018      	beq.n	80012c0 <StartPwmTask+0x68>

			  uint16_t brightness = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	817b      	strh	r3, [r7, #10]
			  sscanf(ptr + 1, "%hu", &brightness);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3301      	adds	r3, #1
 8001296:	f107 020a 	add.w	r2, r7, #10
 800129a:	490d      	ldr	r1, [pc, #52]	; (80012d0 <StartPwmTask+0x78>)
 800129c:	4618      	mov	r0, r3
 800129e:	f018 ff13 	bl	801a0c8 <siscanf>
			  TIM12->CCR1 = brightness;	//	0 - min 100 - max
 80012a2:	897a      	ldrh	r2, [r7, #10]
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <StartPwmTask+0x7c>)
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
			  printf("brightness = %d\r\n", brightness);
 80012a8:	897b      	ldrh	r3, [r7, #10]
 80012aa:	4619      	mov	r1, r3
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <StartPwmTask+0x80>)
 80012ae:	f018 fe35 	bl	8019f1c <iprintf>
		  	  memset(recv_buf, 0, BUF_LENGTH);
 80012b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012b6:	2100      	movs	r1, #0
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <StartPwmTask+0x74>)
 80012ba:	f017 ffe8 	bl	801928e <memset>
 80012be:	e7d5      	b.n	800126c <StartPwmTask+0x14>
		  } else printf("\r\n$ not found\r\n");
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <StartPwmTask+0x84>)
 80012c2:	f018 fe9f 	bl	801a004 <puts>
	  if(xSemaphoreTake(BinarySemHandle, (TickType_t) 10) == pdTRUE){
 80012c6:	e7d1      	b.n	800126c <StartPwmTask+0x14>
 80012c8:	20021600 	.word	0x20021600
 80012cc:	2000020c 	.word	0x2000020c
 80012d0:	0801e0f0 	.word	0x0801e0f0
 80012d4:	40001800 	.word	0x40001800
 80012d8:	0801e0f4 	.word	0x0801e0f4
 80012dc:	0801e108 	.word	0x0801e108

080012e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <MX_GPIO_Init+0x8c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a20      	ldr	r2, [pc, #128]	; (800136c <MX_GPIO_Init+0x8c>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_GPIO_Init+0x8c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_GPIO_Init+0x8c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	4a1a      	ldr	r2, [pc, #104]	; (800136c <MX_GPIO_Init+0x8c>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	; 0x30
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_GPIO_Init+0x8c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_GPIO_Init+0x8c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a14      	ldr	r2, [pc, #80]	; (800136c <MX_GPIO_Init+0x8c>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_GPIO_Init+0x8c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_GPIO_Init+0x8c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <MX_GPIO_Init+0x8c>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_GPIO_Init+0x8c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_GPIO_Init+0x8c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <MX_GPIO_Init+0x8c>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_GPIO_Init+0x8c>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

}
 800135e:	bf00      	nop
 8001360:	371c      	adds	r7, #28
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800

08001370 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001374:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001378:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <SCB_EnableICache+0x3c>)
 800137e:	2200      	movs	r2, #0
 8001380:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001384:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001388:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <SCB_EnableICache+0x3c>)
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <SCB_EnableICache+0x3c>)
 8001392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001396:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001398:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800139c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80013c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80013d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00b      	beq.n	80013f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013d8:	e000      	b.n	80013dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80013da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f9      	beq.n	80013da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013f0:	687b      	ldr	r3, [r7, #4]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e009      	b.n	8001428 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ffc7 	bl	80013b0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf1      	blt.n	8001414 <_write+0x16>
  return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001440:	f7ff ff96 	bl	8001370 <SCB_EnableICache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 faa6 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f810 	bl	800146c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f7ff ff48 	bl	80012e0 <MX_GPIO_Init>
  MX_TIM12_Init();
 8001450:	f000 f9da 	bl	8001808 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim12, TIM_CHANNEL_1);
 8001454:	2100      	movs	r1, #0
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <main+0x2c>)
 8001458:	f002 fc7c 	bl	8003d54 <HAL_TIM_PWM_Start_IT>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800145c:	f7ff fdce 	bl	8000ffc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001460:	f003 ff42 	bl	80052e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001464:	e7fe      	b.n	8001464 <main+0x28>
 8001466:	bf00      	nop
 8001468:	20021648 	.word	0x20021648

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b094      	sub	sp, #80	; 0x50
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0320 	add.w	r3, r7, #32
 8001476:	2230      	movs	r2, #48	; 0x30
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f017 ff07 	bl	801928e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <SystemClock_Config+0xd4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a2a      	ldr	r2, [pc, #168]	; (8001540 <SystemClock_Config+0xd4>)
 8001496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <SystemClock_Config+0xd4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <SystemClock_Config+0xd8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a25      	ldr	r2, [pc, #148]	; (8001544 <SystemClock_Config+0xd8>)
 80014ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <SystemClock_Config+0xd8>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c0:	2301      	movs	r3, #1
 80014c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2302      	movs	r3, #2
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80014d4:	2319      	movs	r3, #25
 80014d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80014d8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80014dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014de:	2302      	movs	r3, #2
 80014e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014e2:	2302      	movs	r3, #2
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 ff12 	bl	8003314 <HAL_RCC_OscConfig>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014f6:	f000 f839 	bl	800156c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014fa:	f001 febb 	bl	8003274 <HAL_PWREx_EnableOverDrive>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001504:	f000 f832 	bl	800156c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001508:	230f      	movs	r3, #15
 800150a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001514:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800151a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2107      	movs	r1, #7
 8001526:	4618      	mov	r0, r3
 8001528:	f002 f998 	bl	800385c <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001532:	f000 f81b 	bl	800156c <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3750      	adds	r7, #80	; 0x50
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000

08001548 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d101      	bne.n	800155e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800155a:	f000 fa37 	bl	80019cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40010000 	.word	0x40010000

0800156c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001570:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001572:	e7fe      	b.n	8001572 <Error_Handler+0x6>

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	210f      	movs	r1, #15
 80015ae:	f06f 0001 	mvn.w	r0, #1
 80015b2:	f000 fb05 	bl	8001bc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	; 0x30
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	2019      	movs	r0, #25
 80015da:	f000 faf1 	bl	8001bc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015de:	2019      	movs	r0, #25
 80015e0:	f000 fb0a 	bl	8001bf8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <HAL_InitTick+0xa0>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_InitTick+0xa0>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6453      	str	r3, [r2, #68]	; 0x44
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_InitTick+0xa0>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015fc:	f107 0210 	add.w	r2, r7, #16
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f002 fae6 	bl	8003bd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800160c:	f002 fad0 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 8001610:	4603      	mov	r3, r0
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001618:	4a13      	ldr	r2, [pc, #76]	; (8001668 <HAL_InitTick+0xa4>)
 800161a:	fba2 2303 	umull	r2, r3, r2, r3
 800161e:	0c9b      	lsrs	r3, r3, #18
 8001620:	3b01      	subs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <HAL_InitTick+0xa8>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <HAL_InitTick+0xac>)
 8001628:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_InitTick+0xa8>)
 800162c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001630:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <HAL_InitTick+0xa8>)
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_InitTick+0xa8>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_InitTick+0xa8>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <HAL_InitTick+0xa8>)
 8001646:	f002 faf9 	bl	8003c3c <HAL_TIM_Base_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d104      	bne.n	800165a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <HAL_InitTick+0xa8>)
 8001652:	f002 fb29 	bl	8003ca8 <HAL_TIM_Base_Start_IT>
 8001656:	4603      	mov	r3, r0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3730      	adds	r7, #48	; 0x30
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	431bde83 	.word	0x431bde83
 800166c:	20021608 	.word	0x20021608
 8001670:	40010000 	.word	0x40010000

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016a6:	f002 fbdf 	bl	8003e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20021608 	.word	0x20021608

080016b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <ETH_IRQHandler+0x10>)
 80016ba:	f000 fe8f 	bl	80023dc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20022fa8 	.word	0x20022fa8

080016c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e00a      	b.n	80016f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016da:	f3af 8000 	nop.w
 80016de:	4601      	mov	r1, r0
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	1c5a      	adds	r2, r3, #1
 80016e4:	60ba      	str	r2, [r7, #8]
 80016e6:	b2ca      	uxtb	r2, r1
 80016e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	dbf0      	blt.n	80016da <_read+0x12>
	}

return len;
 80016f8:	687b      	ldr	r3, [r7, #4]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return -1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800172a:	605a      	str	r2, [r3, #4]
	return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_isatty>:

int _isatty(int file)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	return 1;
 8001742:	2301      	movs	r3, #1
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
	return 0;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001774:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_sbrk+0x5c>)
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <_sbrk+0x60>)
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <_sbrk+0x64>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <_sbrk+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <_sbrk+0x64>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	429a      	cmp	r2, r3
 800179a:	d205      	bcs.n	80017a8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <_sbrk+0x6c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	20050000 	.word	0x20050000
 80017cc:	00004000 	.word	0x00004000
 80017d0:	20000e60 	.word	0x20000e60
 80017d4:	200280e8 	.word	0x200280e8
 80017d8:	200280e0 	.word	0x200280e0

080017dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <SystemInit+0x28>)
 80017e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <SystemInit+0x28>)
 80017e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SystemInit+0x28>)
 80017f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f6:	609a      	str	r2, [r3, #8]
#endif
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <MX_TIM12_Init>:

TIM_HandleTypeDef htim12;

/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]

  htim12.Instance = TIM12;
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <MX_TIM12_Init+0x80>)
 8001822:	4a1a      	ldr	r2, [pc, #104]	; (800188c <MX_TIM12_Init+0x84>)
 8001824:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_TIM12_Init+0x80>)
 8001828:	2200      	movs	r2, #0
 800182a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_TIM12_Init+0x80>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 99;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_TIM12_Init+0x80>)
 8001834:	2263      	movs	r2, #99	; 0x63
 8001836:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_TIM12_Init+0x80>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <MX_TIM12_Init+0x80>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001844:	4810      	ldr	r0, [pc, #64]	; (8001888 <MX_TIM12_Init+0x80>)
 8001846:	f002 fa59 	bl	8003cfc <HAL_TIM_PWM_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM12_Init+0x4c>
  {
    Error_Handler();
 8001850:	f7ff fe8c 	bl	800156c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001854:	2360      	movs	r3, #96	; 0x60
 8001856:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2200      	movs	r2, #0
 8001868:	4619      	mov	r1, r3
 800186a:	4807      	ldr	r0, [pc, #28]	; (8001888 <MX_TIM12_Init+0x80>)
 800186c:	f002 fc1c 	bl	80040a8 <HAL_TIM_PWM_ConfigChannel>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 8001876:	f7ff fe79 	bl	800156c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim12);
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <MX_TIM12_Init+0x80>)
 800187c:	f000 f828 	bl	80018d0 <HAL_TIM_MspPostInit>

}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20021648 	.word	0x20021648
 800188c:	40001800 	.word	0x40001800

08001890 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM12)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_TIM_PWM_MspInit+0x38>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10b      	bne.n	80018ba <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* TIM12 clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a09      	ldr	r2, [pc, #36]	; (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40001800 	.word	0x40001800
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM12)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_TIM_MspPostInit+0x64>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d11b      	bne.n	800192a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM12_MspPostInit 0 */

  /* USER CODE END TIM12_MspPostInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_TIM_MspPostInit+0x68>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_TIM_MspPostInit+0x68>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_TIM_MspPostInit+0x68>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
    /**TIM12 GPIO Configuration
    PH6     ------> TIM12_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800190a:	2340      	movs	r3, #64	; 0x40
 800190c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800191a:	2309      	movs	r3, #9
 800191c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800191e:	f107 030c 	add.w	r3, r7, #12
 8001922:	4619      	mov	r1, r3
 8001924:	4805      	ldr	r0, [pc, #20]	; (800193c <HAL_TIM_MspPostInit+0x6c>)
 8001926:	f001 fafb 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800192a:	bf00      	nop
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40001800 	.word	0x40001800
 8001938:	40023800 	.word	0x40023800
 800193c:	40021c00 	.word	0x40021c00

08001940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001940:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001978 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001944:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001946:	e003      	b.n	8001950 <LoopCopyDataInit>

08001948 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800194a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800194c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800194e:	3104      	adds	r1, #4

08001950 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001950:	480b      	ldr	r0, [pc, #44]	; (8001980 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001954:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001956:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001958:	d3f6      	bcc.n	8001948 <CopyDataInit>
  ldr  r2, =_sbss
 800195a:	4a0b      	ldr	r2, [pc, #44]	; (8001988 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800195c:	e002      	b.n	8001964 <LoopFillZerobss>

0800195e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800195e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001960:	f842 3b04 	str.w	r3, [r2], #4

08001964 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001966:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001968:	d3f9      	bcc.n	800195e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800196a:	f7ff ff37 	bl	80017dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800196e:	f017 fc13 	bl	8019198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001972:	f7ff fd63 	bl	800143c <main>
  bx  lr    
 8001976:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001978:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800197c:	08021ef0 	.word	0x08021ef0
  ldr  r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001984:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001988:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800198c:	200280e8 	.word	0x200280e8

08001990 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_Init+0x34>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_Init+0x34>)
 800199e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x34>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 f8fa 	bl	8001baa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fe04 	bl	80015c4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff fdda 	bl	8001574 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20021688 	.word	0x20021688

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20021688 	.word	0x20021688

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <HAL_Delay+0x40>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000008 	.word	0x20000008

08001a50 <__NVIC_SetPriorityGrouping>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <__NVIC_SetPriorityGrouping+0x40>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x40>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00
 8001a94:	05fa0000 	.word	0x05fa0000

08001a98 <__NVIC_GetPriorityGrouping>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff4c 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bb8:	bf00      	nop
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd2:	f7ff ff61 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68b9      	ldr	r1, [r7, #8]
 8001bdc:	6978      	ldr	r0, [r7, #20]
 8001bde:	f7ff ffb1 	bl	8001b44 <NVIC_EncodePriority>
 8001be2:	4602      	mov	r2, r0
 8001be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be8:	4611      	mov	r1, r2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff80 	bl	8001af0 <__NVIC_SetPriority>
}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff54 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	2300      	movs	r3, #0
 8001c22:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001c24:	4ba9      	ldr	r3, [pc, #676]	; (8001ecc <HAL_ETH_Init+0x2b8>)
 8001c26:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e183      	b.n	8001f42 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f002 ff1c 	bl	8004a8c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <HAL_ETH_Init+0x2bc>)
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	4a9d      	ldr	r2, [pc, #628]	; (8001ed0 <HAL_ETH_Init+0x2bc>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c60:	4b9b      	ldr	r3, [pc, #620]	; (8001ed0 <HAL_ETH_Init+0x2bc>)
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c6c:	4b99      	ldr	r3, [pc, #612]	; (8001ed4 <HAL_ETH_Init+0x2c0>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4a98      	ldr	r2, [pc, #608]	; (8001ed4 <HAL_ETH_Init+0x2c0>)
 8001c72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c76:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c78:	4b96      	ldr	r3, [pc, #600]	; (8001ed4 <HAL_ETH_Init+0x2c0>)
 8001c7a:	685a      	ldr	r2, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4994      	ldr	r1, [pc, #592]	; (8001ed4 <HAL_ETH_Init+0x2c0>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0201 	orr.w	r2, r2, #1
 8001c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c9c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c9e:	f7ff fea9 	bl	80019f4 <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ca4:	e011      	b.n	8001cca <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001ca6:	f7ff fea5 	bl	80019f4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cb4:	d909      	bls.n	8001cca <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e13b      	b.n	8001f42 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e4      	bne.n	8001ca6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f023 031c 	bic.w	r3, r3, #28
 8001cea:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001cec:	f001 ff54 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8001cf0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	4a78      	ldr	r2, [pc, #480]	; (8001ed8 <HAL_ETH_Init+0x2c4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d908      	bls.n	8001d0c <HAL_ETH_Init+0xf8>
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4a77      	ldr	r2, [pc, #476]	; (8001edc <HAL_ETH_Init+0x2c8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d804      	bhi.n	8001d0c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e027      	b.n	8001d5c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	4a73      	ldr	r2, [pc, #460]	; (8001edc <HAL_ETH_Init+0x2c8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d908      	bls.n	8001d26 <HAL_ETH_Init+0x112>
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	4a72      	ldr	r2, [pc, #456]	; (8001ee0 <HAL_ETH_Init+0x2cc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d804      	bhi.n	8001d26 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f043 030c 	orr.w	r3, r3, #12
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	e01a      	b.n	8001d5c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	4a6d      	ldr	r2, [pc, #436]	; (8001ee0 <HAL_ETH_Init+0x2cc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d903      	bls.n	8001d36 <HAL_ETH_Init+0x122>
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4a6c      	ldr	r2, [pc, #432]	; (8001ee4 <HAL_ETH_Init+0x2d0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d911      	bls.n	8001d5a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	4a6a      	ldr	r2, [pc, #424]	; (8001ee4 <HAL_ETH_Init+0x2d0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d908      	bls.n	8001d50 <HAL_ETH_Init+0x13c>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4a69      	ldr	r2, [pc, #420]	; (8001ee8 <HAL_ETH_Init+0x2d4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d804      	bhi.n	8001d50 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e005      	b.n	8001d5c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f043 0310 	orr.w	r3, r3, #16
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	e000      	b.n	8001d5c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001d5a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001d64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d68:	2100      	movs	r1, #0
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 fc19 	bl	80025a2 <HAL_ETH_WritePHYRegister>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001d7a:	6939      	ldr	r1, [r7, #16]
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fdcf 	bl	8002920 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0d9      	b.n	8001f42 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001d8e:	20ff      	movs	r0, #255	; 0xff
 8001d90:	f7ff fe3c 	bl	8001a0c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80a7 	beq.w	8001eec <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001d9e:	f7ff fe29 	bl	80019f4 <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	461a      	mov	r2, r3
 8001daa:	2101      	movs	r1, #1
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fb90 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001db2:	f7ff fe1f 	bl	80019f4 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d90f      	bls.n	8001de4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001dc8:	6939      	ldr	r1, [r7, #16]
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 fda8 	bl	8002920 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e0ae      	b.n	8001f42 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0da      	beq.n	8001da4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001df2:	2100      	movs	r1, #0
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fbd4 	bl	80025a2 <HAL_ETH_WritePHYRegister>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00b      	beq.n	8001e18 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e04:	6939      	ldr	r1, [r7, #16]
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 fd8a 	bl	8002920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e14:	2301      	movs	r3, #1
 8001e16:	e094      	b.n	8001f42 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fdec 	bl	80019f4 <HAL_GetTick>
 8001e1c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	461a      	mov	r2, r3
 8001e24:	2101      	movs	r1, #1
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 fb53 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001e2c:	f7ff fde2 	bl	80019f4 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d90f      	bls.n	8001e5e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fd6b 	bl	8002920 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e071      	b.n	8001f42 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0da      	beq.n	8001e1e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	211f      	movs	r1, #31
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fb2e 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001e80:	6939      	ldr	r1, [r7, #16]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fd4c 	bl	8002920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001e90:	2301      	movs	r3, #1
 8001e92:	e056      	b.n	8001f42 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	e002      	b.n	8001eae <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	e037      	b.n	8001f30 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e032      	b.n	8001f30 <HAL_ETH_Init+0x31c>
 8001eca:	bf00      	nop
 8001ecc:	03938700 	.word	0x03938700
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	01312cff 	.word	0x01312cff
 8001edc:	02160ebf 	.word	0x02160ebf
 8001ee0:	039386ff 	.word	0x039386ff
 8001ee4:	05f5e0ff 	.word	0x05f5e0ff
 8001ee8:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	08db      	lsrs	r3, r3, #3
 8001ef2:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	085b      	lsrs	r3, r3, #1
 8001efa:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	2100      	movs	r1, #0
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fb4c 	bl	80025a2 <HAL_ETH_WritePHYRegister>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00b      	beq.n	8001f28 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f14:	6939      	ldr	r1, [r7, #16]
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fd02 	bl	8002920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e00c      	b.n	8001f42 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001f28:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001f2c:	f7ff fd6e 	bl	8001a0c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001f30:	6939      	ldr	r1, [r7, #16]
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fcf4 	bl	8002920 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop

08001f4c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_ETH_DMATxDescListInit+0x20>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e052      	b.n	8002012 <HAL_ETH_DMATxDescListInit+0xc6>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	e030      	b.n	8001fea <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	015b      	lsls	r3, r3, #5
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	4413      	add	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f98:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001fa0:	fb02 f303 	mul.w	r3, r2, r3
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d105      	bne.n	8001fc2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d208      	bcs.n	8001fde <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	60da      	str	r2, [r3, #12]
 8001fdc:	e002      	b.n	8001fe4 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d3ca      	bcc.n	8001f88 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	f241 0310 	movw	r3, #4112	; 0x1010
 8001ffc:	440b      	add	r3, r1
 8001ffe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800201e:	b480      	push	{r7}
 8002020:	b087      	sub	sp, #28
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
 800202a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ETH_DMARxDescListInit+0x20>
 800203a:	2302      	movs	r3, #2
 800203c:	e056      	b.n	80020ec <HAL_ETH_DMARxDescListInit+0xce>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2202      	movs	r2, #2
 800204a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e034      	b.n	80020c4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	015b      	lsls	r3, r3, #5
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800206a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002072:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800207a:	fb02 f303 	mul.w	r3, r2, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	461a      	mov	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	3b01      	subs	r3, #1
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d208      	bcs.n	80020b8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	e002      	b.n	80020be <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d3c6      	bcc.n	800205a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	f241 030c 	movw	r3, #4108	; 0x100c
 80020d6:	440b      	add	r3, r1
 80020d8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_ETH_TransmitFrame+0x24>
 8002118:	2302      	movs	r3, #2
 800211a:	e0cd      	b.n	80022b8 <HAL_ETH_TransmitFrame+0x1c0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2202      	movs	r2, #2
 8002128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8002142:	2301      	movs	r3, #1
 8002144:	e0b8      	b.n	80022b8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	da09      	bge.n	8002164 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2212      	movs	r2, #18
 8002154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0a9      	b.n	80022b8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800216a:	4293      	cmp	r3, r2
 800216c:	d915      	bls.n	800219a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	4a54      	ldr	r2, [pc, #336]	; (80022c4 <HAL_ETH_TransmitFrame+0x1cc>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0a9b      	lsrs	r3, r3, #10
 8002178:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4b51      	ldr	r3, [pc, #324]	; (80022c4 <HAL_ETH_TransmitFrame+0x1cc>)
 800217e:	fba3 1302 	umull	r1, r3, r3, r2
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8002188:	fb01 f303 	mul.w	r3, r1, r3
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e001      	b.n	800219e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d11c      	bne.n	80021de <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80021b2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80021be:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80021ce:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	62da      	str	r2, [r3, #44]	; 0x2c
 80021dc:	e04b      	b.n	8002276 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e044      	b.n	800226e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021f2:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d107      	bne.n	800220a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002208:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002212:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3b01      	subs	r3, #1
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d116      	bne.n	800224c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800222c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4a25      	ldr	r2, [pc, #148]	; (80022c8 <HAL_ETH_TransmitFrame+0x1d0>)
 8002232:	fb02 f203 	mul.w	r2, r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4413      	add	r3, r2
 800223a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800223e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800224a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800225a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	461a      	mov	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	3301      	adds	r3, #1
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3b6      	bcc.n	80021e4 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f241 0314 	movw	r3, #4116	; 0x1014
 800227e:	4413      	add	r3, r2
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002292:	4413      	add	r3, r2
 8002294:	2204      	movs	r2, #4
 8002296:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	f241 0304 	movw	r3, #4100	; 0x1004
 80022a0:	4413      	add	r3, r2
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	ac02b00b 	.word	0xac02b00b
 80022c8:	fffffa0c 	.word	0xfffffa0c

080022cc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e074      	b.n	80023d0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2202      	movs	r2, #2
 80022f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80022f6:	e05a      	b.n	80023ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d10d      	bne.n	800232a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	629a      	str	r2, [r3, #40]	; 0x28
 8002328:	e041      	b.n	80023ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	461a      	mov	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	629a      	str	r2, [r3, #40]	; 0x28
 800234e:	e02e      	b.n	80023ae <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	2b01      	cmp	r3, #1
 8002368:	d103      	bne.n	8002372 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0c1b      	lsrs	r3, r3, #16
 800237a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800237e:	1f1a      	subs	r2, r3, #4
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	461a      	mov	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e010      	b.n	80023d0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db02      	blt.n	80023be <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d99c      	bls.n	80022f8 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d112      	bne.n	800241e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f002 fbe9 	bl	8004bd0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f241 0314 	movw	r3, #4116	; 0x1014
 8002406:	4413      	add	r3, r2
 8002408:	2240      	movs	r2, #64	; 0x40
 800240a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800241c:	e01b      	b.n	8002456 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	f241 0314 	movw	r3, #4116	; 0x1014
 8002426:	4413      	add	r3, r2
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d111      	bne.n	8002456 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f839 	bl	80024aa <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	f241 0314 	movw	r3, #4116	; 0x1014
 8002440:	4413      	add	r3, r2
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	f241 0314 	movw	r3, #4116	; 0x1014
 800245e:	4413      	add	r3, r2
 8002460:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002464:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	f241 0314 	movw	r3, #4116	; 0x1014
 800246e:	4413      	add	r3, r2
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247a:	d112      	bne.n	80024a2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f81e 	bl	80024be <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	f241 0314 	movw	r3, #4116	; 0x1014
 800248a:	4413      	add	r3, r2
 800248c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002490:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b086      	sub	sp, #24
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	460b      	mov	r3, r1
 80024dc:	607a      	str	r2, [r7, #4]
 80024de:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b82      	cmp	r3, #130	; 0x82
 80024f2:	d101      	bne.n	80024f8 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
 80024f6:	e050      	b.n	800259a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2282      	movs	r2, #130	; 0x82
 80024fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 031c 	and.w	r3, r3, #28
 800250e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8a1b      	ldrh	r3, [r3, #16]
 8002514:	02db      	lsls	r3, r3, #11
 8002516:	b29b      	uxth	r3, r3
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800251e:	897b      	ldrh	r3, [r7, #10]
 8002520:	019b      	lsls	r3, r3, #6
 8002522:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f023 0302 	bic.w	r3, r3, #2
 8002532:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002544:	f7ff fa56 	bl	80019f4 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800254a:	e015      	b.n	8002578 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800254c:	f7ff fa52 	bl	80019f4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800255a:	d309      	bcc.n	8002570 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e014      	b.n	800259a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e4      	bne.n	800254c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	460b      	mov	r3, r1
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b42      	cmp	r3, #66	; 0x42
 80025c2:	d101      	bne.n	80025c8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80025c4:	2302      	movs	r3, #2
 80025c6:	e04e      	b.n	8002666 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2242      	movs	r2, #66	; 0x42
 80025cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f003 031c 	and.w	r3, r3, #28
 80025de:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8a1b      	ldrh	r3, [r3, #16]
 80025e4:	02db      	lsls	r3, r3, #11
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	019b      	lsls	r3, r3, #6
 80025f2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800261e:	f7ff f9e9 	bl	80019f4 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002624:	e015      	b.n	8002652 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002626:	f7ff f9e5 	bl	80019f4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002634:	d309      	bcc.n	800264a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e00d      	b.n	8002666 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e4      	bne.n	8002626 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800266e:	b580      	push	{r7, lr}
 8002670:	b082      	sub	sp, #8
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ETH_Start+0x16>
 8002680:	2302      	movs	r3, #2
 8002682:	e01f      	b.n	80026c4 <HAL_ETH_Start+0x56>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 fb45 	bl	8002d24 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fb7c 	bl	8002d98 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fc13 	bl	8002ecc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fbb0 	bl	8002e0c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fbdd 	bl	8002e6c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d101      	bne.n	80026e2 <HAL_ETH_Stop+0x16>
 80026de:	2302      	movs	r3, #2
 80026e0:	e01f      	b.n	8002722 <HAL_ETH_Stop+0x56>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fba2 	bl	8002e3c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fbcf 	bl	8002e9c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 fb67 	bl	8002dd2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fbe1 	bl	8002ecc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fb27 	bl	8002d5e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_ETH_ConfigMAC+0x1c>
 8002744:	2302      	movs	r3, #2
 8002746:	e0e4      	b.n	8002912 <HAL_ETH_ConfigMAC+0x1e6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80b1 	beq.w	80028c2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4b6c      	ldr	r3, [pc, #432]	; (800291c <HAL_ETH_ConfigMAC+0x1f0>)
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8002778:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800277e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002784:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800278a:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002790:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002796:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800279c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80027a2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80027a8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80027ae:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80027b4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80027ba:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f7ff f91a 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80027e8:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80027ee:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80027f4:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80027fa:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002800:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002806:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002812:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002814:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800281e:	2001      	movs	r0, #1
 8002820:	f7ff f8f4 	bl	8001a0c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002834:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800283e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800284e:	4013      	ands	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800285c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002862:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002868:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800286e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002874:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800288c:	2001      	movs	r0, #1
 800288e:	f7ff f8bd 	bl	8001a0c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7ff f8aa 	bl	8001a0c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	61da      	str	r2, [r3, #28]
 80028c0:	e01e      	b.n	8002900 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80028d0:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7ff f88a 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	ff20810f 	.word	0xff20810f

08002920 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0b0      	sub	sp, #192	; 0xc0
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800293c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002944:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800294e:	2300      	movs	r3, #0
 8002950:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296a:	663b      	str	r3, [r7, #96]	; 0x60
 800296c:	e001      	b.n	8002972 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002976:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800297c:	2300      	movs	r3, #0
 800297e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80029f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f8:	4bab      	ldr	r3, [pc, #684]	; (8002ca8 <ETH_MACDMAConfig+0x388>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a04:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002a08:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002a0c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002a12:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002a16:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002a1a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002a20:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002a24:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002a28:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002a2c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002a30:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002a34:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002a36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a48:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7fe ffd9 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a62:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a68:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002a6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002a6c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002a72:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002a78:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002a7e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002a84:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002a88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002a90:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a92:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7fe ffb4 	bl	8001a0c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aac:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ab6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ac0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ad0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ade:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002ae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002ae4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002ae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002aea:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002af0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002af6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002afc:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b10:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7fe ff75 	bl	8001a0c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b2a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002b30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7fe ff60 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b54:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b5e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002b64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b68:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	f241 0318 	movw	r3, #4120	; 0x1018
 8002baa:	4413      	add	r3, r2
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <ETH_MACDMAConfig+0x38c>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bbe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bc2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002bc4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002bc6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002bc8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002bca:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002bcc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002bce:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002bd0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002bd2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002bd6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002bda:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002bde:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	f241 0318 	movw	r3, #4120	; 0x1018
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bf8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c02:	4413      	add	r3, r2
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7fe fefe 	bl	8001a0c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	f241 0318 	movw	r3, #4120	; 0x1018
 8002c18:	4413      	add	r3, r2
 8002c1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c1e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c24:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002c28:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c2c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002c30:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c34:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002c36:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002c3a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c48:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7fe fed7 	bl	8001a0c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c6a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10d      	bne.n	8002c90 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	f241 031c 	movw	r3, #4124	; 0x101c
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6811      	ldr	r1, [r2, #0]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <ETH_MACDMAConfig+0x390>)
 8002c86:	431a      	orrs	r2, r3
 8002c88:	f241 031c 	movw	r3, #4124	; 0x101c
 8002c8c:	440b      	add	r3, r1
 8002c8e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	461a      	mov	r2, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f80b 	bl	8002cb4 <ETH_MACAddressConfig>
}
 8002c9e:	bf00      	nop
 8002ca0:	37c0      	adds	r7, #192	; 0xc0
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	ff20810f 	.word	0xff20810f
 8002cac:	f8de3f23 	.word	0xf8de3f23
 8002cb0:	00010040 	.word	0x00010040

08002cb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3305      	adds	r3, #5
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	3204      	adds	r2, #4
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <ETH_MACAddressConfig+0x68>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	061a      	lsls	r2, r3, #24
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3302      	adds	r3, #2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	7812      	ldrb	r2, [r2, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <ETH_MACAddressConfig+0x6c>)
 8002d06:	4413      	add	r3, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6013      	str	r3, [r2, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40028040 	.word	0x40028040
 8002d20:	40028044 	.word	0x40028044

08002d24 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f7fe fe5f 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0208 	bic.w	r2, r2, #8
 8002d78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f7fe fe42 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0204 	orr.w	r2, r2, #4
 8002db2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dbc:	2001      	movs	r0, #1
 8002dbe:	f7fe fe25 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	601a      	str	r2, [r3, #0]
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0204 	bic.w	r2, r2, #4
 8002dec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002df6:	2001      	movs	r0, #1
 8002df8:	f7fe fe08 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e1c:	4413      	add	r3, r2
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6811      	ldr	r1, [r2, #0]
 8002e24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002e28:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e2c:	440b      	add	r3, r1
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e4c:	4413      	add	r3, r2
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6811      	ldr	r1, [r2, #0]
 8002e54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e58:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e5c:	440b      	add	r3, r1
 8002e5e:	601a      	str	r2, [r3, #0]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e7c:	4413      	add	r3, r2
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6811      	ldr	r1, [r2, #0]
 8002e84:	f043 0202 	orr.w	r2, r3, #2
 8002e88:	f241 0318 	movw	r3, #4120	; 0x1018
 8002e8c:	440b      	add	r3, r1
 8002e8e:	601a      	str	r2, [r3, #0]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002eac:	4413      	add	r3, r2
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6811      	ldr	r1, [r2, #0]
 8002eb4:	f023 0202 	bic.w	r2, r3, #2
 8002eb8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ebc:	440b      	add	r3, r1
 8002ebe:	601a      	str	r2, [r3, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ee0:	4413      	add	r3, r2
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6811      	ldr	r1, [r2, #0]
 8002ee8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002eec:	f241 0318 	movw	r3, #4120	; 0x1018
 8002ef0:	440b      	add	r3, r1
 8002ef2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	f241 0318 	movw	r3, #4120	; 0x1018
 8002efc:	4413      	add	r3, r2
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fe fd82 	bl	8001a0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6819      	ldr	r1, [r3, #0]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002f12:	440b      	add	r3, r1
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b089      	sub	sp, #36	; 0x24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61fb      	str	r3, [r7, #28]
 8002f3e:	e175      	b.n	800322c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002f40:	2201      	movs	r2, #1
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4013      	ands	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	f040 8164 	bne.w	8003226 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d00b      	beq.n	8002f7e <HAL_GPIO_Init+0x5e>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d007      	beq.n	8002f7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f72:	2b11      	cmp	r3, #17
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x100>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b12      	cmp	r3, #18
 800301e:	d123      	bne.n	8003068 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	220f      	movs	r2, #15
 8003038:	fa02 f303 	lsl.w	r3, r2, r3
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4313      	orrs	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	08da      	lsrs	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3208      	adds	r2, #8
 8003062:	69b9      	ldr	r1, [r7, #24]
 8003064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0203 	and.w	r2, r3, #3
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80be 	beq.w	8003226 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030aa:	4b65      	ldr	r3, [pc, #404]	; (8003240 <HAL_GPIO_Init+0x320>)
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	4a64      	ldr	r2, [pc, #400]	; (8003240 <HAL_GPIO_Init+0x320>)
 80030b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b4:	6453      	str	r3, [r2, #68]	; 0x44
 80030b6:	4b62      	ldr	r3, [pc, #392]	; (8003240 <HAL_GPIO_Init+0x320>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80030c2:	4a60      	ldr	r2, [pc, #384]	; (8003244 <HAL_GPIO_Init+0x324>)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	089b      	lsrs	r3, r3, #2
 80030c8:	3302      	adds	r3, #2
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0303 	and.w	r3, r3, #3
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a57      	ldr	r2, [pc, #348]	; (8003248 <HAL_GPIO_Init+0x328>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d037      	beq.n	800315e <HAL_GPIO_Init+0x23e>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a56      	ldr	r2, [pc, #344]	; (800324c <HAL_GPIO_Init+0x32c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_GPIO_Init+0x23a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a55      	ldr	r2, [pc, #340]	; (8003250 <HAL_GPIO_Init+0x330>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d02b      	beq.n	8003156 <HAL_GPIO_Init+0x236>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a54      	ldr	r2, [pc, #336]	; (8003254 <HAL_GPIO_Init+0x334>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d025      	beq.n	8003152 <HAL_GPIO_Init+0x232>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a53      	ldr	r2, [pc, #332]	; (8003258 <HAL_GPIO_Init+0x338>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <HAL_GPIO_Init+0x22e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a52      	ldr	r2, [pc, #328]	; (800325c <HAL_GPIO_Init+0x33c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d019      	beq.n	800314a <HAL_GPIO_Init+0x22a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a51      	ldr	r2, [pc, #324]	; (8003260 <HAL_GPIO_Init+0x340>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x226>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a50      	ldr	r2, [pc, #320]	; (8003264 <HAL_GPIO_Init+0x344>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x222>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a4f      	ldr	r2, [pc, #316]	; (8003268 <HAL_GPIO_Init+0x348>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x21e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a4e      	ldr	r2, [pc, #312]	; (800326c <HAL_GPIO_Init+0x34c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x21a>
 8003136:	2309      	movs	r3, #9
 8003138:	e012      	b.n	8003160 <HAL_GPIO_Init+0x240>
 800313a:	230a      	movs	r3, #10
 800313c:	e010      	b.n	8003160 <HAL_GPIO_Init+0x240>
 800313e:	2308      	movs	r3, #8
 8003140:	e00e      	b.n	8003160 <HAL_GPIO_Init+0x240>
 8003142:	2307      	movs	r3, #7
 8003144:	e00c      	b.n	8003160 <HAL_GPIO_Init+0x240>
 8003146:	2306      	movs	r3, #6
 8003148:	e00a      	b.n	8003160 <HAL_GPIO_Init+0x240>
 800314a:	2305      	movs	r3, #5
 800314c:	e008      	b.n	8003160 <HAL_GPIO_Init+0x240>
 800314e:	2304      	movs	r3, #4
 8003150:	e006      	b.n	8003160 <HAL_GPIO_Init+0x240>
 8003152:	2303      	movs	r3, #3
 8003154:	e004      	b.n	8003160 <HAL_GPIO_Init+0x240>
 8003156:	2302      	movs	r3, #2
 8003158:	e002      	b.n	8003160 <HAL_GPIO_Init+0x240>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_GPIO_Init+0x240>
 800315e:	2300      	movs	r3, #0
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	f002 0203 	and.w	r2, r2, #3
 8003166:	0092      	lsls	r2, r2, #2
 8003168:	4093      	lsls	r3, r2
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003170:	4934      	ldr	r1, [pc, #208]	; (8003244 <HAL_GPIO_Init+0x324>)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	089b      	lsrs	r3, r3, #2
 8003176:	3302      	adds	r3, #2
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317e:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <HAL_GPIO_Init+0x350>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a2:	4a33      	ldr	r2, [pc, #204]	; (8003270 <HAL_GPIO_Init+0x350>)
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031a8:	4b31      	ldr	r3, [pc, #196]	; (8003270 <HAL_GPIO_Init+0x350>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031cc:	4a28      	ldr	r2, [pc, #160]	; (8003270 <HAL_GPIO_Init+0x350>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <HAL_GPIO_Init+0x350>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	43db      	mvns	r3, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4013      	ands	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031f6:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <HAL_GPIO_Init+0x350>)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <HAL_GPIO_Init+0x350>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003220:	4a13      	ldr	r2, [pc, #76]	; (8003270 <HAL_GPIO_Init+0x350>)
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3301      	adds	r3, #1
 800322a:	61fb      	str	r3, [r7, #28]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b0f      	cmp	r3, #15
 8003230:	f67f ae86 	bls.w	8002f40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003234:	bf00      	nop
 8003236:	3724      	adds	r7, #36	; 0x24
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40023800 	.word	0x40023800
 8003244:	40013800 	.word	0x40013800
 8003248:	40020000 	.word	0x40020000
 800324c:	40020400 	.word	0x40020400
 8003250:	40020800 	.word	0x40020800
 8003254:	40020c00 	.word	0x40020c00
 8003258:	40021000 	.word	0x40021000
 800325c:	40021400 	.word	0x40021400
 8003260:	40021800 	.word	0x40021800
 8003264:	40021c00 	.word	0x40021c00
 8003268:	40022000 	.word	0x40022000
 800326c:	40022400 	.word	0x40022400
 8003270:	40013c00 	.word	0x40013c00

08003274 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800327e:	4b23      	ldr	r3, [pc, #140]	; (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 8003280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003282:	4a22      	ldr	r2, [pc, #136]	; (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	6413      	str	r3, [r2, #64]	; 0x40
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_PWREx_EnableOverDrive+0x98>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a2:	f7fe fba7 	bl	80019f4 <HAL_GetTick>
 80032a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a8:	e009      	b.n	80032be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032aa:	f7fe fba3 	bl	80019f4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b8:	d901      	bls.n	80032be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e022      	b.n	8003304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032be:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ca:	d1ee      	bne.n	80032aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	; (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d8:	f7fe fb8c 	bl	80019f4 <HAL_GetTick>
 80032dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032de:	e009      	b.n	80032f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032e0:	f7fe fb88 	bl	80019f4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ee:	d901      	bls.n	80032f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e007      	b.n	8003304 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003300:	d1ee      	bne.n	80032e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40023800 	.word	0x40023800
 8003310:	40007000 	.word	0x40007000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e291      	b.n	800384e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003338:	4b96      	ldr	r3, [pc, #600]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003344:	4b93      	ldr	r3, [pc, #588]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d112      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
 8003350:	4b90      	ldr	r3, [pc, #576]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003358:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x130>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e26b      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x7a>
 8003380:	4b84      	ldr	r3, [pc, #528]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a83      	ldr	r2, [pc, #524]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x9c>
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7e      	ldr	r2, [pc, #504]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b7c      	ldr	r3, [pc, #496]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7b      	ldr	r2, [pc, #492]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033ba:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b73      	ldr	r3, [pc, #460]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a72      	ldr	r2, [pc, #456]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd8>
 80033d4:	4b6f      	ldr	r3, [pc, #444]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6e      	ldr	r2, [pc, #440]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6b      	ldr	r2, [pc, #428]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fafe 	bl	80019f4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fafa 	bl	80019f4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e21f      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b61      	ldr	r3, [pc, #388]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe faea 	bl	80019f4 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe fae6 	bl	80019f4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e20b      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b57      	ldr	r3, [pc, #348]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x110>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d069      	beq.n	8003526 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b50      	ldr	r3, [pc, #320]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800345e:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
 800346a:	4b4a      	ldr	r3, [pc, #296]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b47      	ldr	r3, [pc, #284]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1df      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b41      	ldr	r3, [pc, #260]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	493d      	ldr	r1, [pc, #244]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e040      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d023      	beq.n	80034f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a38      	ldr	r2, [pc, #224]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fe fa9c 	bl	80019f4 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c0:	f7fe fa98 	bl	80019f4 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e1bd      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b30      	ldr	r3, [pc, #192]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4929      	ldr	r1, [pc, #164]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
 80034f2:	e018      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a26      	ldr	r2, [pc, #152]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fe fa78 	bl	80019f4 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fe fa74 	bl	80019f4 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e199      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f0      	bne.n	8003508 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d038      	beq.n	80035a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d019      	beq.n	800356e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	4b16      	ldr	r3, [pc, #88]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	4a15      	ldr	r2, [pc, #84]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fe fa55 	bl	80019f4 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fe fa51 	bl	80019f4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e176      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003560:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x23a>
 800356c:	e01a      	b.n	80035a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800356e:	4b09      	ldr	r3, [pc, #36]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003572:	4a08      	ldr	r2, [pc, #32]	; (8003594 <HAL_RCC_OscConfig+0x280>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357a:	f7fe fa3b 	bl	80019f4 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003582:	f7fe fa37 	bl	80019f4 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d903      	bls.n	8003598 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e15c      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
 8003594:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b91      	ldr	r3, [pc, #580]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800359a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1ee      	bne.n	8003582 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80a4 	beq.w	80036fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035b2:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10d      	bne.n	80035da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a87      	ldr	r2, [pc, #540]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035da:	4b82      	ldr	r3, [pc, #520]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035e6:	4b7f      	ldr	r3, [pc, #508]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a7e      	ldr	r2, [pc, #504]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fe f9ff 	bl	80019f4 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fe f9fb 	bl	80019f4 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b64      	cmp	r3, #100	; 0x64
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e120      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800360c:	4b75      	ldr	r3, [pc, #468]	; (80037e4 <HAL_RCC_OscConfig+0x4d0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x31a>
 8003620:	4b6f      	ldr	r3, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a6e      	ldr	r2, [pc, #440]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
 800362c:	e02d      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x33c>
 8003636:	4b6a      	ldr	r3, [pc, #424]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	4a69      	ldr	r2, [pc, #420]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	6713      	str	r3, [r2, #112]	; 0x70
 8003642:	4b67      	ldr	r3, [pc, #412]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	4a66      	ldr	r2, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003648:	f023 0304 	bic.w	r3, r3, #4
 800364c:	6713      	str	r3, [r2, #112]	; 0x70
 800364e:	e01c      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b05      	cmp	r3, #5
 8003656:	d10c      	bne.n	8003672 <HAL_RCC_OscConfig+0x35e>
 8003658:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a60      	ldr	r2, [pc, #384]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800365e:	f043 0304 	orr.w	r3, r3, #4
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a5d      	ldr	r2, [pc, #372]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	; 0x70
 8003670:	e00b      	b.n	800368a <HAL_RCC_OscConfig+0x376>
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	4a5a      	ldr	r2, [pc, #360]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	f023 0301 	bic.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	; 0x70
 800367e:	4b58      	ldr	r3, [pc, #352]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	4a57      	ldr	r2, [pc, #348]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003684:	f023 0304 	bic.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d015      	beq.n	80036be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003692:	f7fe f9af 	bl	80019f4 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe f9ab 	bl	80019f4 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0ce      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036b0:	4b4b      	ldr	r3, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0ee      	beq.n	800369a <HAL_RCC_OscConfig+0x386>
 80036bc:	e014      	b.n	80036e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036be:	f7fe f999 	bl	80019f4 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe f995 	bl	80019f4 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0b8      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036dc:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1ee      	bne.n	80036c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d105      	bne.n	80036fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ee:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	4a3b      	ldr	r2, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 80a4 	beq.w	800384c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 030c 	and.w	r3, r3, #12
 800370c:	2b08      	cmp	r3, #8
 800370e:	d06b      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d149      	bne.n	80037ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a30      	ldr	r2, [pc, #192]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe f966 	bl	80019f4 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe f962 	bl	80019f4 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e087      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69da      	ldr	r2, [r3, #28]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	019b      	lsls	r3, r3, #6
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	085b      	lsrs	r3, r3, #1
 8003762:	3b01      	subs	r3, #1
 8003764:	041b      	lsls	r3, r3, #16
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376c:	061b      	lsls	r3, r3, #24
 800376e:	4313      	orrs	r3, r2
 8003770:	4a1b      	ldr	r2, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 8003772:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003776:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003778:	4b19      	ldr	r3, [pc, #100]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a18      	ldr	r2, [pc, #96]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 800377e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe f936 	bl	80019f4 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe f932 	bl	80019f4 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e057      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCC_OscConfig+0x478>
 80037aa:	e04f      	b.n	800384c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0b      	ldr	r2, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b8:	f7fe f91c 	bl	80019f4 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe f918 	bl	80019f4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e03d      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4ac>
 80037de:	e035      	b.n	800384c <HAL_RCC_OscConfig+0x538>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037e8:	4b1b      	ldr	r3, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x544>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d028      	beq.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003800:	429a      	cmp	r2, r3
 8003802:	d121      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380e:	429a      	cmp	r2, r3
 8003810:	d11a      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003818:	4013      	ands	r3, r2
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003820:	4293      	cmp	r3, r2
 8003822:	d111      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	3b01      	subs	r3, #1
 8003832:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0d0      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003874:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 030f 	and.w	r3, r3, #15
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d910      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003882:	4b67      	ldr	r3, [pc, #412]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 020f 	bic.w	r2, r3, #15
 800388a:	4965      	ldr	r1, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d040      	beq.n	8003980 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d115      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391e:	4b41      	ldr	r3, [pc, #260]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d109      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e073      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e06b      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800393e:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f023 0203 	bic.w	r2, r3, #3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4936      	ldr	r1, [pc, #216]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	4313      	orrs	r3, r2
 800394e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003950:	f7fe f850 	bl	80019f4 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	e00a      	b.n	800396e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003958:	f7fe f84c 	bl	80019f4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e053      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 020c 	and.w	r2, r3, #12
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	429a      	cmp	r2, r3
 800397e:	d1eb      	bne.n	8003958 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003980:	4b27      	ldr	r3, [pc, #156]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d210      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f023 020f 	bic.w	r2, r3, #15
 8003996:	4922      	ldr	r1, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	4313      	orrs	r3, r2
 800399c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1c4>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4601      	mov	r1, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a0a      	ldr	r2, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	5cd3      	ldrb	r3, [r2, r3]
 8003a02:	fa21 f303 	lsr.w	r3, r1, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1d0>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1d4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fdd8 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	08021a3c 	.word	0x08021a3c
 8003a2c:	20000000 	.word	0x20000000
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	2300      	movs	r3, #0
 8003a44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4a:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d007      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x32>
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d008      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x38>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 808d 	bne.w	8003b7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a62:	60bb      	str	r3, [r7, #8]
      break;
 8003a64:	e08c      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a66:	4b4b      	ldr	r3, [pc, #300]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a68:	60bb      	str	r3, [r7, #8]
      break;
 8003a6a:	e089      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a6c:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a74:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a76:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d023      	beq.n	8003aca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a82:	4b42      	ldr	r3, [pc, #264]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	f04f 0400 	mov.w	r4, #0
 8003a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	ea03 0501 	and.w	r5, r3, r1
 8003a98:	ea04 0602 	and.w	r6, r4, r2
 8003a9c:	4a3d      	ldr	r2, [pc, #244]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a9e:	fb02 f106 	mul.w	r1, r2, r6
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	fb02 f205 	mul.w	r2, r2, r5
 8003aa8:	440a      	add	r2, r1
 8003aaa:	493a      	ldr	r1, [pc, #232]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aac:	fba5 0101 	umull	r0, r1, r5, r1
 8003ab0:	1853      	adds	r3, r2, r1
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f04f 0400 	mov.w	r4, #0
 8003aba:	461a      	mov	r2, r3
 8003abc:	4623      	mov	r3, r4
 8003abe:	f7fd f903 	bl	8000cc8 <__aeabi_uldivmod>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e049      	b.n	8003b5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	ea03 0501 	and.w	r5, r3, r1
 8003ae0:	ea04 0602 	and.w	r6, r4, r2
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	4632      	mov	r2, r6
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	f04f 0400 	mov.w	r4, #0
 8003af0:	0154      	lsls	r4, r2, #5
 8003af2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003af6:	014b      	lsls	r3, r1, #5
 8003af8:	4619      	mov	r1, r3
 8003afa:	4622      	mov	r2, r4
 8003afc:	1b49      	subs	r1, r1, r5
 8003afe:	eb62 0206 	sbc.w	r2, r2, r6
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	0194      	lsls	r4, r2, #6
 8003b0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b10:	018b      	lsls	r3, r1, #6
 8003b12:	1a5b      	subs	r3, r3, r1
 8003b14:	eb64 0402 	sbc.w	r4, r4, r2
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	00e2      	lsls	r2, r4, #3
 8003b22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b26:	00d9      	lsls	r1, r3, #3
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	195b      	adds	r3, r3, r5
 8003b2e:	eb44 0406 	adc.w	r4, r4, r6
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	02a2      	lsls	r2, r4, #10
 8003b3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b40:	0299      	lsls	r1, r3, #10
 8003b42:	460b      	mov	r3, r1
 8003b44:	4614      	mov	r4, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	4621      	mov	r1, r4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	461a      	mov	r2, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	f7fd f8b8 	bl	8000cc8 <__aeabi_uldivmod>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b5e:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0c1b      	lsrs	r3, r3, #16
 8003b64:	f003 0303 	and.w	r3, r3, #3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	60bb      	str	r3, [r7, #8]
      break;
 8003b78:	e002      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b7c:	60bb      	str	r3, [r7, #8]
      break;
 8003b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b80:	68bb      	ldr	r3, [r7, #8]
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	017d7840 	.word	0x017d7840

08003b98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_GetHCLKFreq+0x14>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	20000000 	.word	0x20000000

08003bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bb4:	f7ff fff0 	bl	8003b98 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0b5b      	lsrs	r3, r3, #13
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08021a4c 	.word	0x08021a4c

08003bd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	220f      	movs	r2, #15
 8003be6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCC_GetClockConfig+0x5c>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 0203 	and.w	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCC_GetClockConfig+0x5c>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_RCC_GetClockConfig+0x5c>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_GetClockConfig+0x5c>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	08db      	lsrs	r3, r3, #3
 8003c12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <HAL_RCC_GetClockConfig+0x60>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	601a      	str	r2, [r3, #0]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40023c00 	.word	0x40023c00

08003c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e01d      	b.n	8003c8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f815 	bl	8003c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 fb54 	bl	8004328 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
	...

08003ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689a      	ldr	r2, [r3, #8]
 8003cc6:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <HAL_TIM_Base_Start_IT+0x50>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b06      	cmp	r3, #6
 8003cd0:	d00b      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x42>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d007      	beq.n	8003cea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f042 0201 	orr.w	r2, r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	00010007 	.word	0x00010007

08003cfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e01d      	b.n	8003d4a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fdb4 	bl	8001890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f000 faf4 	bl	8004328 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d841      	bhi.n	8003de8 <HAL_TIM_PWM_Start_IT+0x94>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_TIM_PWM_Start_IT+0x18>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003de9 	.word	0x08003de9
 8003d74:	08003de9 	.word	0x08003de9
 8003d78:	08003de9 	.word	0x08003de9
 8003d7c:	08003db3 	.word	0x08003db3
 8003d80:	08003de9 	.word	0x08003de9
 8003d84:	08003de9 	.word	0x08003de9
 8003d88:	08003de9 	.word	0x08003de9
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003de9 	.word	0x08003de9
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003dd7 	.word	0x08003dd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0202 	orr.w	r2, r2, #2
 8003dae:	60da      	str	r2, [r3, #12]
      break;
 8003db0:	e01b      	b.n	8003dea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0204 	orr.w	r2, r2, #4
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e012      	b.n	8003dea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	60da      	str	r2, [r3, #12]
      break;
 8003dd4:	e009      	b.n	8003dea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0210 	orr.w	r2, r2, #16
 8003de4:	60da      	str	r2, [r3, #12]
      break;
 8003de6:	e000      	b.n	8003dea <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8003de8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fd96 	bl	8004924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <HAL_TIM_PWM_Start_IT+0x108>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d004      	beq.n	8003e0c <HAL_TIM_PWM_Start_IT+0xb8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a16      	ldr	r2, [pc, #88]	; (8003e60 <HAL_TIM_PWM_Start_IT+0x10c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIM_PWM_Start_IT+0xbc>
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_TIM_PWM_Start_IT+0xbe>
 8003e10:	2300      	movs	r3, #0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d007      	beq.n	8003e26 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <HAL_TIM_PWM_Start_IT+0x110>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2b06      	cmp	r3, #6
 8003e36:	d00b      	beq.n	8003e50 <HAL_TIM_PWM_Start_IT+0xfc>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3e:	d007      	beq.n	8003e50 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40010400 	.word	0x40010400
 8003e64:	00010007 	.word	0x00010007

08003e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d122      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f06f 0202 	mvn.w	r2, #2
 8003e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fa1e 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003eb0:	e005      	b.n	8003ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 fa10 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa21 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b04      	cmp	r3, #4
 8003ed0:	d122      	bne.n	8003f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f06f 0204 	mvn.w	r2, #4
 8003ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2202      	movs	r2, #2
 8003eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9f4 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003f04:	e005      	b.n	8003f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f9e6 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f9f7 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d122      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f003 0308 	and.w	r3, r3, #8
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d11b      	bne.n	8003f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0208 	mvn.w	r2, #8
 8003f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2204      	movs	r2, #4
 8003f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f9ca 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003f58:	e005      	b.n	8003f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 f9bc 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f9cd 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	f003 0310 	and.w	r3, r3, #16
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d122      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b10      	cmp	r3, #16
 8003f86:	d11b      	bne.n	8003fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f06f 0210 	mvn.w	r2, #16
 8003f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2208      	movs	r2, #8
 8003f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	69db      	ldr	r3, [r3, #28]
 8003f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f9a0 	bl	80042ec <HAL_TIM_IC_CaptureCallback>
 8003fac:	e005      	b.n	8003fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f992 	bl	80042d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f9a3 	bl	8004300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d10e      	bne.n	8003fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d107      	bne.n	8003fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0201 	mvn.w	r2, #1
 8003fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fd faae 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d10e      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d107      	bne.n	8004018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fcb5 	bl	8004982 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d10e      	bne.n	8004046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004032:	2b80      	cmp	r3, #128	; 0x80
 8004034:	d107      	bne.n	8004046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800403e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fca8 	bl	8004996 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004050:	2b40      	cmp	r3, #64	; 0x40
 8004052:	d10e      	bne.n	8004072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d107      	bne.n	8004072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800406a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f951 	bl	8004314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b20      	cmp	r3, #32
 800407e:	d10e      	bne.n	800409e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0320 	and.w	r3, r3, #32
 800408a:	2b20      	cmp	r3, #32
 800408c:	d107      	bne.n	800409e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f06f 0220 	mvn.w	r2, #32
 8004096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fc68 	bl	800496e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040be:	2302      	movs	r3, #2
 80040c0:	e105      	b.n	80042ce <HAL_TIM_PWM_ConfigChannel+0x226>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b14      	cmp	r3, #20
 80040d6:	f200 80f0 	bhi.w	80042ba <HAL_TIM_PWM_ConfigChannel+0x212>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004135 	.word	0x08004135
 80040e4:	080042bb 	.word	0x080042bb
 80040e8:	080042bb 	.word	0x080042bb
 80040ec:	080042bb 	.word	0x080042bb
 80040f0:	08004175 	.word	0x08004175
 80040f4:	080042bb 	.word	0x080042bb
 80040f8:	080042bb 	.word	0x080042bb
 80040fc:	080042bb 	.word	0x080042bb
 8004100:	080041b7 	.word	0x080041b7
 8004104:	080042bb 	.word	0x080042bb
 8004108:	080042bb 	.word	0x080042bb
 800410c:	080042bb 	.word	0x080042bb
 8004110:	080041f7 	.word	0x080041f7
 8004114:	080042bb 	.word	0x080042bb
 8004118:	080042bb 	.word	0x080042bb
 800411c:	080042bb 	.word	0x080042bb
 8004120:	08004239 	.word	0x08004239
 8004124:	080042bb 	.word	0x080042bb
 8004128:	080042bb 	.word	0x080042bb
 800412c:	080042bb 	.word	0x080042bb
 8004130:	08004279 	.word	0x08004279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68b9      	ldr	r1, [r7, #8]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f994 	bl	8004468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 0204 	bic.w	r2, r2, #4
 800415e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6999      	ldr	r1, [r3, #24]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	619a      	str	r2, [r3, #24]
      break;
 8004172:	e0a3      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f9e6 	bl	800454c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6999      	ldr	r1, [r3, #24]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	021a      	lsls	r2, r3, #8
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	619a      	str	r2, [r3, #24]
      break;
 80041b4:	e082      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fa3d 	bl	800463c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0208 	orr.w	r2, r2, #8
 80041d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0204 	bic.w	r2, r2, #4
 80041e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69d9      	ldr	r1, [r3, #28]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	61da      	str	r2, [r3, #28]
      break;
 80041f4:	e062      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fa93 	bl	8004728 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	021a      	lsls	r2, r3, #8
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	61da      	str	r2, [r3, #28]
      break;
 8004236:	e041      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 faca 	bl	80047d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0208 	orr.w	r2, r2, #8
 8004252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0204 	bic.w	r2, r2, #4
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004276:	e021      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fafc 	bl	800487c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	021a      	lsls	r2, r3, #8
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042b8:	e000      	b.n	80042bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80042ba:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop

080042d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a40      	ldr	r2, [pc, #256]	; (800443c <TIM_Base_SetConfig+0x114>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004346:	d00f      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3d      	ldr	r2, [pc, #244]	; (8004440 <TIM_Base_SetConfig+0x118>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00b      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a3c      	ldr	r2, [pc, #240]	; (8004444 <TIM_Base_SetConfig+0x11c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d007      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a3b      	ldr	r2, [pc, #236]	; (8004448 <TIM_Base_SetConfig+0x120>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d003      	beq.n	8004368 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a3a      	ldr	r2, [pc, #232]	; (800444c <TIM_Base_SetConfig+0x124>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d108      	bne.n	800437a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a2f      	ldr	r2, [pc, #188]	; (800443c <TIM_Base_SetConfig+0x114>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d02b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004388:	d027      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a2c      	ldr	r2, [pc, #176]	; (8004440 <TIM_Base_SetConfig+0x118>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d023      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a2b      	ldr	r2, [pc, #172]	; (8004444 <TIM_Base_SetConfig+0x11c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d01f      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2a      	ldr	r2, [pc, #168]	; (8004448 <TIM_Base_SetConfig+0x120>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d01b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a29      	ldr	r2, [pc, #164]	; (800444c <TIM_Base_SetConfig+0x124>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d017      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a28      	ldr	r2, [pc, #160]	; (8004450 <TIM_Base_SetConfig+0x128>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d013      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a27      	ldr	r2, [pc, #156]	; (8004454 <TIM_Base_SetConfig+0x12c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00f      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a26      	ldr	r2, [pc, #152]	; (8004458 <TIM_Base_SetConfig+0x130>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a25      	ldr	r2, [pc, #148]	; (800445c <TIM_Base_SetConfig+0x134>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a24      	ldr	r2, [pc, #144]	; (8004460 <TIM_Base_SetConfig+0x138>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a23      	ldr	r2, [pc, #140]	; (8004464 <TIM_Base_SetConfig+0x13c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <TIM_Base_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0xf8>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a0c      	ldr	r2, [pc, #48]	; (800444c <TIM_Base_SetConfig+0x124>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d103      	bne.n	8004428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	615a      	str	r2, [r3, #20]
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40010400 	.word	0x40010400
 8004450:	40014000 	.word	0x40014000
 8004454:	40014400 	.word	0x40014400
 8004458:	40014800 	.word	0x40014800
 800445c:	40001800 	.word	0x40001800
 8004460:	40001c00 	.word	0x40001c00
 8004464:	40002000 	.word	0x40002000

08004468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <TIM_OC1_SetConfig+0xd8>)
 8004494:	4013      	ands	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f023 0303 	bic.w	r3, r3, #3
 800449e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0302 	bic.w	r3, r3, #2
 80044b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <TIM_OC1_SetConfig+0xdc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_OC1_SetConfig+0x64>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a20      	ldr	r2, [pc, #128]	; (8004548 <TIM_OC1_SetConfig+0xe0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10c      	bne.n	80044e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f023 0308 	bic.w	r3, r3, #8
 80044d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f023 0304 	bic.w	r3, r3, #4
 80044e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <TIM_OC1_SetConfig+0xdc>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d003      	beq.n	80044f6 <TIM_OC1_SetConfig+0x8e>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a15      	ldr	r2, [pc, #84]	; (8004548 <TIM_OC1_SetConfig+0xe0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d111      	bne.n	800451a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004504:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	621a      	str	r2, [r3, #32]
}
 8004534:	bf00      	nop
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	fffeff8f 	.word	0xfffeff8f
 8004544:	40010000 	.word	0x40010000
 8004548:	40010400 	.word	0x40010400

0800454c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f023 0210 	bic.w	r2, r3, #16
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <TIM_OC2_SetConfig+0xe4>)
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	021b      	lsls	r3, r3, #8
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0320 	bic.w	r3, r3, #32
 8004596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a23      	ldr	r2, [pc, #140]	; (8004634 <TIM_OC2_SetConfig+0xe8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_OC2_SetConfig+0x68>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a22      	ldr	r2, [pc, #136]	; (8004638 <TIM_OC2_SetConfig+0xec>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d10d      	bne.n	80045d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a18      	ldr	r2, [pc, #96]	; (8004634 <TIM_OC2_SetConfig+0xe8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_OC2_SetConfig+0x94>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a17      	ldr	r2, [pc, #92]	; (8004638 <TIM_OC2_SetConfig+0xec>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d113      	bne.n	8004608 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	697a      	ldr	r2, [r7, #20]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	feff8fff 	.word	0xfeff8fff
 8004634:	40010000 	.word	0x40010000
 8004638:	40010400 	.word	0x40010400

0800463c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4b2d      	ldr	r3, [pc, #180]	; (800471c <TIM_OC3_SetConfig+0xe0>)
 8004668:	4013      	ands	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0303 	bic.w	r3, r3, #3
 8004672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a22      	ldr	r2, [pc, #136]	; (8004720 <TIM_OC3_SetConfig+0xe4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <TIM_OC3_SetConfig+0x66>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a21      	ldr	r2, [pc, #132]	; (8004724 <TIM_OC3_SetConfig+0xe8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10d      	bne.n	80046be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <TIM_OC3_SetConfig+0xe4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_OC3_SetConfig+0x92>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a16      	ldr	r2, [pc, #88]	; (8004724 <TIM_OC3_SetConfig+0xe8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d113      	bne.n	80046f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	011b      	lsls	r3, r3, #4
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	bf00      	nop
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr
 800471c:	fffeff8f 	.word	0xfffeff8f
 8004720:	40010000 	.word	0x40010000
 8004724:	40010400 	.word	0x40010400

08004728 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <TIM_OC4_SetConfig+0xa4>)
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	031b      	lsls	r3, r3, #12
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a13      	ldr	r2, [pc, #76]	; (80047d0 <TIM_OC4_SetConfig+0xa8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d003      	beq.n	8004790 <TIM_OC4_SetConfig+0x68>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <TIM_OC4_SetConfig+0xac>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d109      	bne.n	80047a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004796:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	019b      	lsls	r3, r3, #6
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	feff8fff 	.word	0xfeff8fff
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40010400 	.word	0x40010400

080047d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <TIM_OC5_SetConfig+0x98>)
 8004804:	4013      	ands	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	041b      	lsls	r3, r3, #16
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a12      	ldr	r2, [pc, #72]	; (8004874 <TIM_OC5_SetConfig+0x9c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d003      	beq.n	8004836 <TIM_OC5_SetConfig+0x5e>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a11      	ldr	r2, [pc, #68]	; (8004878 <TIM_OC5_SetConfig+0xa0>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d109      	bne.n	800484a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800483c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	4313      	orrs	r3, r2
 8004848:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	621a      	str	r2, [r3, #32]
}
 8004864:	bf00      	nop
 8004866:	371c      	adds	r7, #28
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr
 8004870:	fffeff8f 	.word	0xfffeff8f
 8004874:	40010000 	.word	0x40010000
 8004878:	40010400 	.word	0x40010400

0800487c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4b1c      	ldr	r3, [pc, #112]	; (8004918 <TIM_OC6_SetConfig+0x9c>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	021b      	lsls	r3, r3, #8
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	051b      	lsls	r3, r3, #20
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <TIM_OC6_SetConfig+0xa0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d003      	beq.n	80048dc <TIM_OC6_SetConfig+0x60>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a12      	ldr	r2, [pc, #72]	; (8004920 <TIM_OC6_SetConfig+0xa4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d109      	bne.n	80048f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	029b      	lsls	r3, r3, #10
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	feff8fff 	.word	0xfeff8fff
 800491c:	40010000 	.word	0x40010000
 8004920:	40010400 	.word	0x40010400

08004924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2201      	movs	r2, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1a      	ldr	r2, [r3, #32]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	43db      	mvns	r3, r3
 8004946:	401a      	ands	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1a      	ldr	r2, [r3, #32]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
	...

080049ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80049ac:	b5b0      	push	{r4, r5, r7, lr}
 80049ae:	b08e      	sub	sp, #56	; 0x38
 80049b0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80049b2:	2100      	movs	r1, #0
 80049b4:	2000      	movs	r0, #0
 80049b6:	f005 ff11 	bl	800a7dc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80049ba:	4b2a      	ldr	r3, [pc, #168]	; (8004a64 <MX_LWIP_Init+0xb8>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80049c0:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <MX_LWIP_Init+0xbc>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80049c6:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <MX_LWIP_Init+0xc0>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80049cc:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <MX_LWIP_Init+0xc4>)
 80049ce:	9302      	str	r3, [sp, #8]
 80049d0:	4b28      	ldr	r3, [pc, #160]	; (8004a74 <MX_LWIP_Init+0xc8>)
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <MX_LWIP_Init+0xc0>)
 80049da:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <MX_LWIP_Init+0xbc>)
 80049dc:	4921      	ldr	r1, [pc, #132]	; (8004a64 <MX_LWIP_Init+0xb8>)
 80049de:	4826      	ldr	r0, [pc, #152]	; (8004a78 <MX_LWIP_Init+0xcc>)
 80049e0:	f007 fc54 	bl	800c28c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80049e4:	4824      	ldr	r0, [pc, #144]	; (8004a78 <MX_LWIP_Init+0xcc>)
 80049e6:	f007 fe0b 	bl	800c600 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80049ea:	4b23      	ldr	r3, [pc, #140]	; (8004a78 <MX_LWIP_Init+0xcc>)
 80049ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80049fc:	481e      	ldr	r0, [pc, #120]	; (8004a78 <MX_LWIP_Init+0xcc>)
 80049fe:	f007 fe0f 	bl	800c620 <netif_set_up>
 8004a02:	e002      	b.n	8004a0a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004a04:	481c      	ldr	r0, [pc, #112]	; (8004a78 <MX_LWIP_Init+0xcc>)
 8004a06:	f007 fe77 	bl	800c6f8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004a0a:	491c      	ldr	r1, [pc, #112]	; (8004a7c <MX_LWIP_Init+0xd0>)
 8004a0c:	481a      	ldr	r0, [pc, #104]	; (8004a78 <MX_LWIP_Init+0xcc>)
 8004a0e:	f007 ff0d 	bl	800c82c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004a12:	2300      	movs	r3, #0
 8004a14:	623b      	str	r3, [r7, #32]
 8004a16:	2300      	movs	r3, #0
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004a1a:	f107 0320 	add.w	r3, r7, #32
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fd75 	bl	8005510 <osSemaphoreCreate>
 8004a26:	4602      	mov	r2, r0
 8004a28:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <MX_LWIP_Init+0xd4>)
 8004a2a:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8004a2c:	4b15      	ldr	r3, [pc, #84]	; (8004a84 <MX_LWIP_Init+0xd8>)
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <MX_LWIP_Init+0xcc>)
 8004a30:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004a32:	4b13      	ldr	r3, [pc, #76]	; (8004a80 <MX_LWIP_Init+0xd4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a13      	ldr	r2, [pc, #76]	; (8004a84 <MX_LWIP_Init+0xd8>)
 8004a38:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004a3a:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <MX_LWIP_Init+0xdc>)
 8004a3c:	1d3c      	adds	r4, r7, #4
 8004a3e:	461d      	mov	r5, r3
 8004a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004a4c:	1d3b      	adds	r3, r7, #4
 8004a4e:	490d      	ldr	r1, [pc, #52]	; (8004a84 <MX_LWIP_Init+0xd8>)
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fc60 	bl	8005316 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004a56:	4808      	ldr	r0, [pc, #32]	; (8004a78 <MX_LWIP_Init+0xcc>)
 8004a58:	f010 f9c6 	bl	8014de8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004a5c:	bf00      	nop
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bdb0      	pop	{r4, r5, r7, pc}
 8004a64:	200216cc 	.word	0x200216cc
 8004a68:	200216d0 	.word	0x200216d0
 8004a6c:	200216d4 	.word	0x200216d4
 8004a70:	0800a6ed 	.word	0x0800a6ed
 8004a74:	080050a5 	.word	0x080050a5
 8004a78:	20021694 	.word	0x20021694
 8004a7c:	08005189 	.word	0x08005189
 8004a80:	20000e64 	.word	0x20000e64
 8004a84:	2002168c 	.word	0x2002168c
 8004a88:	0801e120 	.word	0x0801e120

08004a8c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08e      	sub	sp, #56	; 0x38
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a44      	ldr	r2, [pc, #272]	; (8004bbc <HAL_ETH_MspInit+0x130>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	f040 8081 	bne.w	8004bb2 <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004ab0:	4b43      	ldr	r3, [pc, #268]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	4a42      	ldr	r2, [pc, #264]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aba:	6313      	str	r3, [r2, #48]	; 0x30
 8004abc:	4b40      	ldr	r3, [pc, #256]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	4b3d      	ldr	r3, [pc, #244]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	4a3c      	ldr	r2, [pc, #240]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad4:	4b3a      	ldr	r3, [pc, #232]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4b37      	ldr	r3, [pc, #220]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004ae6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aea:	6313      	str	r3, [r2, #48]	; 0x30
 8004aec:	4b34      	ldr	r3, [pc, #208]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af4:	61bb      	str	r3, [r7, #24]
 8004af6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004af8:	4b31      	ldr	r3, [pc, #196]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	4a30      	ldr	r2, [pc, #192]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b02:	6313      	str	r3, [r2, #48]	; 0x30
 8004b04:	4b2e      	ldr	r3, [pc, #184]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	617b      	str	r3, [r7, #20]
 8004b0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b10:	4b2b      	ldr	r3, [pc, #172]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004b16:	f043 0304 	orr.w	r3, r3, #4
 8004b1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b28:	4b25      	ldr	r3, [pc, #148]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2c:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6313      	str	r3, [r2, #48]	; 0x30
 8004b34:	4b22      	ldr	r3, [pc, #136]	; (8004bc0 <HAL_ETH_MspInit+0x134>)
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8004b40:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8004b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b46:	2302      	movs	r3, #2
 8004b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b52:	230b      	movs	r3, #11
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4819      	ldr	r0, [pc, #100]	; (8004bc4 <HAL_ETH_MspInit+0x138>)
 8004b5e:	f7fe f9df 	bl	8002f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004b62:	2332      	movs	r3, #50	; 0x32
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b66:	2302      	movs	r3, #2
 8004b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b72:	230b      	movs	r3, #11
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4812      	ldr	r0, [pc, #72]	; (8004bc8 <HAL_ETH_MspInit+0x13c>)
 8004b7e:	f7fe f9cf 	bl	8002f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004b82:	2386      	movs	r3, #134	; 0x86
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004b92:	230b      	movs	r3, #11
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	480b      	ldr	r0, [pc, #44]	; (8004bcc <HAL_ETH_MspInit+0x140>)
 8004b9e:	f7fe f9bf 	bl	8002f20 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2105      	movs	r1, #5
 8004ba6:	203d      	movs	r0, #61	; 0x3d
 8004ba8:	f7fd f80a 	bl	8001bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004bac:	203d      	movs	r0, #61	; 0x3d
 8004bae:	f7fd f823 	bl	8001bf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3738      	adds	r7, #56	; 0x38
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40028000 	.word	0x40028000
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40021800 	.word	0x40021800
 8004bc8:	40020800 	.word	0x40020800
 8004bcc:	40020000 	.word	0x40020000

08004bd0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_ETH_RxCpltCallback+0x1c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fd19 	bl	8005614 <osSemaphoreRelease>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000e68 	.word	0x20000e68

08004bf0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004bf0:	b5b0      	push	{r4, r5, r7, lr}
 8004bf2:	b090      	sub	sp, #64	; 0x40
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004bfc:	4b60      	ldr	r3, [pc, #384]	; (8004d80 <low_level_init+0x190>)
 8004bfe:	4a61      	ldr	r2, [pc, #388]	; (8004d84 <low_level_init+0x194>)
 8004c00:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004c02:	4b5f      	ldr	r3, [pc, #380]	; (8004d80 <low_level_init+0x190>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004c08:	4b5d      	ldr	r3, [pc, #372]	; (8004d80 <low_level_init+0x190>)
 8004c0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c0e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004c10:	4b5b      	ldr	r3, [pc, #364]	; (8004d80 <low_level_init+0x190>)
 8004c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c16:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004c18:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <low_level_init+0x190>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x44;
 8004c1e:	2344      	movs	r3, #68	; 0x44
 8004c20:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x88;
 8004c24:	2388      	movs	r3, #136	; 0x88
 8004c26:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0x44;
 8004c2a:	2344      	movs	r3, #68	; 0x44
 8004c2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x88;
 8004c30:	2388      	movs	r3, #136	; 0x88
 8004c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x44;
 8004c36:	2344      	movs	r3, #68	; 0x44
 8004c38:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x88;
 8004c3c:	2388      	movs	r3, #136	; 0x88
 8004c3e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8004c42:	4a4f      	ldr	r2, [pc, #316]	; (8004d80 <low_level_init+0x190>)
 8004c44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c48:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004c4a:	4b4d      	ldr	r3, [pc, #308]	; (8004d80 <low_level_init+0x190>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004c50:	4b4b      	ldr	r3, [pc, #300]	; (8004d80 <low_level_init+0x190>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004c56:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <low_level_init+0x190>)
 8004c58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004c5c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004c5e:	4848      	ldr	r0, [pc, #288]	; (8004d80 <low_level_init+0x190>)
 8004c60:	f7fc ffd8 	bl	8001c14 <HAL_ETH_Init>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004c6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004c84:	2304      	movs	r3, #4
 8004c86:	4a40      	ldr	r2, [pc, #256]	; (8004d88 <low_level_init+0x198>)
 8004c88:	4940      	ldr	r1, [pc, #256]	; (8004d8c <low_level_init+0x19c>)
 8004c8a:	483d      	ldr	r0, [pc, #244]	; (8004d80 <low_level_init+0x190>)
 8004c8c:	f7fd f95e 	bl	8001f4c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004c90:	2304      	movs	r3, #4
 8004c92:	4a3f      	ldr	r2, [pc, #252]	; (8004d90 <low_level_init+0x1a0>)
 8004c94:	493f      	ldr	r1, [pc, #252]	; (8004d94 <low_level_init+0x1a4>)
 8004c96:	483a      	ldr	r0, [pc, #232]	; (8004d80 <low_level_init+0x190>)
 8004c98:	f7fd f9c1 	bl	800201e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2206      	movs	r2, #6
 8004ca0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004ca4:	4b36      	ldr	r3, [pc, #216]	; (8004d80 <low_level_init+0x190>)
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004cb0:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <low_level_init+0x190>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	785a      	ldrb	r2, [r3, #1]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004cbc:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <low_level_init+0x190>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	789a      	ldrb	r2, [r3, #2]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004cc8:	4b2d      	ldr	r3, [pc, #180]	; (8004d80 <low_level_init+0x190>)
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	78da      	ldrb	r2, [r3, #3]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004cd4:	4b2a      	ldr	r3, [pc, #168]	; (8004d80 <low_level_init+0x190>)
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	791a      	ldrb	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <low_level_init+0x190>)
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	795a      	ldrb	r2, [r3, #5]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004cfa:	f043 030a 	orr.w	r3, r3, #10
 8004cfe:	b2da      	uxtb	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8004d06:	2300      	movs	r3, #0
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004d0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d12:	2101      	movs	r1, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fbfb 	bl	8005510 <osSemaphoreCreate>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <low_level_init+0x1a8>)
 8004d1e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004d20:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <low_level_init+0x1ac>)
 8004d22:	f107 040c 	add.w	r4, r7, #12
 8004d26:	461d      	mov	r5, r3
 8004d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004d34:	f107 030c 	add.w	r3, r7, #12
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 faeb 	bl	8005316 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004d40:	480f      	ldr	r0, [pc, #60]	; (8004d80 <low_level_init+0x190>)
 8004d42:	f7fd fc94 	bl	800266e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004d46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	211d      	movs	r1, #29
 8004d4e:	480c      	ldr	r0, [pc, #48]	; (8004d80 <low_level_init+0x190>)
 8004d50:	f7fd fbbf 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d56:	f043 030b 	orr.w	r3, r3, #11
 8004d5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	461a      	mov	r2, r3
 8004d60:	211d      	movs	r1, #29
 8004d62:	4807      	ldr	r0, [pc, #28]	; (8004d80 <low_level_init+0x190>)
 8004d64:	f7fd fc1d 	bl	80025a2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004d68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	211d      	movs	r1, #29
 8004d70:	4803      	ldr	r0, [pc, #12]	; (8004d80 <low_level_init+0x190>)
 8004d72:	f7fd fbae 	bl	80024d2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004d76:	bf00      	nop
 8004d78:	3740      	adds	r7, #64	; 0x40
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20022fa8 	.word	0x20022fa8
 8004d84:	40028000 	.word	0x40028000
 8004d88:	20022ff0 	.word	0x20022ff0
 8004d8c:	200216d8 	.word	0x200216d8
 8004d90:	20021758 	.word	0x20021758
 8004d94:	20022f28 	.word	0x20022f28
 8004d98:	20000e68 	.word	0x20000e68
 8004d9c:	0801e144 	.word	0x0801e144

08004da0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08a      	sub	sp, #40	; 0x28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004daa:	4b4b      	ldr	r3, [pc, #300]	; (8004ed8 <low_level_output+0x138>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004db6:	2300      	movs	r3, #0
 8004db8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004dc2:	4b45      	ldr	r3, [pc, #276]	; (8004ed8 <low_level_output+0x138>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	623b      	str	r3, [r7, #32]
 8004dd0:	e05a      	b.n	8004e88 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	da03      	bge.n	8004de2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004dda:	23f8      	movs	r3, #248	; 0xf8
 8004ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004de0:	e05c      	b.n	8004e9c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	895b      	ldrh	r3, [r3, #10]
 8004de6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004dec:	e02f      	b.n	8004e4e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	18d0      	adds	r0, r2, r3
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	18d1      	adds	r1, r2, r3
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004e02:	1a9b      	subs	r3, r3, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	f014 fa1e 	bl	8019246 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	da03      	bge.n	8004e20 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004e18:	23f8      	movs	r3, #248	; 0xf8
 8004e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004e1e:	e03d      	b.n	8004e9c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004e30:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004e3c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004e48:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4413      	add	r3, r2
 8004e54:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d8c8      	bhi.n	8004dee <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	18d0      	adds	r0, r2, r3
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	4413      	add	r3, r2
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f014 f9ea 	bl	8019246 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1a1      	bne.n	8004dd2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004e8e:	6979      	ldr	r1, [r7, #20]
 8004e90:	4811      	ldr	r0, [pc, #68]	; (8004ed8 <low_level_output+0x138>)
 8004e92:	f7fd f931 	bl	80020f8 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004e9c:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <low_level_output+0x138>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	f241 0314 	movw	r3, #4116	; 0x1014
 8004ea4:	4413      	add	r3, r2
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00d      	beq.n	8004ecc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <low_level_output+0x138>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	f241 0314 	movw	r3, #4116	; 0x1014
 8004eb8:	4413      	add	r3, r2
 8004eba:	2220      	movs	r2, #32
 8004ebc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <low_level_output+0x138>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	f241 0304 	movw	r3, #4100	; 0x1004
 8004ec6:	4413      	add	r3, r2
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004ecc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3728      	adds	r7, #40	; 0x28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20022fa8 	.word	0x20022fa8

08004edc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08c      	sub	sp, #48	; 0x30
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004f00:	484f      	ldr	r0, [pc, #316]	; (8005040 <low_level_input+0x164>)
 8004f02:	f7fd f9e3 	bl	80022cc <HAL_ETH_GetReceivedFrame_IT>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <low_level_input+0x34>

    return NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e092      	b.n	8005036 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004f10:	4b4b      	ldr	r3, [pc, #300]	; (8005040 <low_level_input+0x164>)
 8004f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f14:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004f16:	4b4a      	ldr	r3, [pc, #296]	; (8005040 <low_level_input+0x164>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004f1c:	89fb      	ldrh	r3, [r7, #14]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004f22:	89fb      	ldrh	r3, [r7, #14]
 8004f24:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004f28:	4619      	mov	r1, r3
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f007 fd48 	bl	800c9c0 <pbuf_alloc>
 8004f30:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d04b      	beq.n	8004fd0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004f38:	4b41      	ldr	r3, [pc, #260]	; (8005040 <low_level_input+0x164>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f46:	e040      	b.n	8004fca <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	895b      	ldrh	r3, [r3, #10]
 8004f4c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004f52:	e021      	b.n	8004f98 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	18d0      	adds	r0, r2, r3
 8004f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	18d1      	adds	r1, r2, r3
 8004f62:	69fa      	ldr	r2, [r7, #28]
 8004f64:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8004f68:	1a9b      	subs	r3, r3, r2
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f014 f96b 	bl	8019246 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	4413      	add	r3, r2
 8004f82:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004f86:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f92:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d8d6      	bhi.n	8004f54 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	18d0      	adds	r0, r2, r3
 8004fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	f014 f945 	bl	8019246 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1bb      	bne.n	8004f48 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <low_level_input+0x164>)
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e00b      	b.n	8004ff4 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004fe8:	6a3b      	ldr	r3, [r7, #32]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	4b12      	ldr	r3, [pc, #72]	; (8005040 <low_level_input+0x164>)
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d3ee      	bcc.n	8004fdc <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004ffe:	4b10      	ldr	r3, [pc, #64]	; (8005040 <low_level_input+0x164>)
 8005000:	2200      	movs	r2, #0
 8005002:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005004:	4b0e      	ldr	r3, [pc, #56]	; (8005040 <low_level_input+0x164>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	f241 0314 	movw	r3, #4116	; 0x1014
 800500c:	4413      	add	r3, r2
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00d      	beq.n	8005034 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005018:	4b09      	ldr	r3, [pc, #36]	; (8005040 <low_level_input+0x164>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005020:	4413      	add	r3, r2
 8005022:	2280      	movs	r2, #128	; 0x80
 8005024:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <low_level_input+0x164>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	f241 0308 	movw	r3, #4104	; 0x1008
 800502e:	4413      	add	r3, r2
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005036:	4618      	mov	r0, r3
 8005038:	3730      	adds	r7, #48	; 0x30
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20022fa8 	.word	0x20022fa8

08005044 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005050:	4b12      	ldr	r3, [pc, #72]	; (800509c <ethernetif_input+0x58>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f04f 31ff 	mov.w	r1, #4294967295
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fa8d 	bl	8005578 <osSemaphoreWait>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f5      	bne.n	8005050 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005064:	480e      	ldr	r0, [pc, #56]	; (80050a0 <ethernetif_input+0x5c>)
 8005066:	f014 f837 	bl	80190d8 <sys_mutex_lock>
        p = low_level_input( netif );
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff ff36 	bl	8004edc <low_level_input>
 8005070:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	68f9      	ldr	r1, [r7, #12]
 800507e:	68b8      	ldr	r0, [r7, #8]
 8005080:	4798      	blx	r3
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005088:	68b8      	ldr	r0, [r7, #8]
 800508a:	f007 ff79 	bl	800cf80 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800508e:	4804      	ldr	r0, [pc, #16]	; (80050a0 <ethernetif_input+0x5c>)
 8005090:	f014 f831 	bl	80190f6 <sys_mutex_unlock>
      } while(p!=NULL);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e4      	bne.n	8005064 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800509a:	e7d9      	b.n	8005050 <ethernetif_input+0xc>
 800509c:	20000e68 	.word	0x20000e68
 80050a0:	20024800 	.word	0x20024800

080050a4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <ethernetif_init+0x1c>
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <ethernetif_init+0x48>)
 80050b4:	f240 222b 	movw	r2, #555	; 0x22b
 80050b8:	490d      	ldr	r1, [pc, #52]	; (80050f0 <ethernetif_init+0x4c>)
 80050ba:	480e      	ldr	r0, [pc, #56]	; (80050f4 <ethernetif_init+0x50>)
 80050bc:	f014 ff2e 	bl	8019f1c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2273      	movs	r2, #115	; 0x73
 80050c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2274      	movs	r2, #116	; 0x74
 80050cc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a09      	ldr	r2, [pc, #36]	; (80050f8 <ethernetif_init+0x54>)
 80050d4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <ethernetif_init+0x58>)
 80050da:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7ff fd87 	bl	8004bf0 <low_level_init>

  return ERR_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	0801e160 	.word	0x0801e160
 80050f0:	0801e17c 	.word	0x0801e17c
 80050f4:	0801e18c 	.word	0x0801e18c
 80050f8:	08016d35 	.word	0x08016d35
 80050fc:	08004da1 	.word	0x08004da1

08005100 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005104:	f7fc fc76 	bl	80019f4 <HAL_GetTick>
 8005108:	4603      	mov	r3, r0
}
 800510a:	4618      	mov	r0, r3
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005120:	f107 0308 	add.w	r3, r7, #8
 8005124:	461a      	mov	r2, r3
 8005126:	2101      	movs	r1, #1
 8005128:	4816      	ldr	r0, [pc, #88]	; (8005184 <ethernetif_set_link+0x74>)
 800512a:	f7fd f9d2 	bl	80024d2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d108      	bne.n	8005158 <ethernetif_set_link+0x48>
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d005      	beq.n	8005158 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4618      	mov	r0, r3
 8005152:	f007 fb03 	bl	800c75c <netif_set_link_up>
 8005156:	e011      	b.n	800517c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005160:	089b      	lsrs	r3, r3, #2
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d007      	beq.n	800517c <ethernetif_set_link+0x6c>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d104      	bne.n	800517c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f007 fb28 	bl	800c7cc <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800517c:	20c8      	movs	r0, #200	; 0xc8
 800517e:	f000 f916 	bl	80053ae <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005182:	e7cd      	b.n	8005120 <ethernetif_set_link+0x10>
 8005184:	20022fa8 	.word	0x20022fa8

08005188 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800519e:	089b      	lsrs	r3, r3, #2
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d05d      	beq.n	8005266 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <ethernetif_update_config+0xf4>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03f      	beq.n	8005232 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80051b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051b6:	2100      	movs	r1, #0
 80051b8:	4830      	ldr	r0, [pc, #192]	; (800527c <ethernetif_update_config+0xf4>)
 80051ba:	f7fd f9f2 	bl	80025a2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80051be:	f7fc fc19 	bl	80019f4 <HAL_GetTick>
 80051c2:	4603      	mov	r3, r0
 80051c4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80051c6:	f107 0308 	add.w	r3, r7, #8
 80051ca:	461a      	mov	r2, r3
 80051cc:	2101      	movs	r1, #1
 80051ce:	482b      	ldr	r0, [pc, #172]	; (800527c <ethernetif_update_config+0xf4>)
 80051d0:	f7fd f97f 	bl	80024d2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80051d4:	f7fc fc0e 	bl	80019f4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e2:	d828      	bhi.n	8005236 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0eb      	beq.n	80051c6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80051ee:	f107 0308 	add.w	r3, r7, #8
 80051f2:	461a      	mov	r2, r3
 80051f4:	211f      	movs	r1, #31
 80051f6:	4821      	ldr	r0, [pc, #132]	; (800527c <ethernetif_update_config+0xf4>)
 80051f8:	f7fd f96b 	bl	80024d2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <ethernetif_update_config+0xf4>)
 8005208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800520c:	60da      	str	r2, [r3, #12]
 800520e:	e002      	b.n	8005216 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005210:	4b1a      	ldr	r3, [pc, #104]	; (800527c <ethernetif_update_config+0xf4>)
 8005212:	2200      	movs	r2, #0
 8005214:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005220:	4b16      	ldr	r3, [pc, #88]	; (800527c <ethernetif_update_config+0xf4>)
 8005222:	2200      	movs	r2, #0
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	e016      	b.n	8005256 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005228:	4b14      	ldr	r3, [pc, #80]	; (800527c <ethernetif_update_config+0xf4>)
 800522a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800522e:	609a      	str	r2, [r3, #8]
 8005230:	e011      	b.n	8005256 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005232:	bf00      	nop
 8005234:	e000      	b.n	8005238 <ethernetif_update_config+0xb0>
          goto error;
 8005236:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <ethernetif_update_config+0xf4>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <ethernetif_update_config+0xf4>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005248:	4313      	orrs	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	2100      	movs	r1, #0
 8005250:	480a      	ldr	r0, [pc, #40]	; (800527c <ethernetif_update_config+0xf4>)
 8005252:	f7fd f9a6 	bl	80025a2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005256:	2100      	movs	r1, #0
 8005258:	4808      	ldr	r0, [pc, #32]	; (800527c <ethernetif_update_config+0xf4>)
 800525a:	f7fd fa67 	bl	800272c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800525e:	4807      	ldr	r0, [pc, #28]	; (800527c <ethernetif_update_config+0xf4>)
 8005260:	f7fd fa05 	bl	800266e <HAL_ETH_Start>
 8005264:	e002      	b.n	800526c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005266:	4805      	ldr	r0, [pc, #20]	; (800527c <ethernetif_update_config+0xf4>)
 8005268:	f7fd fa30 	bl	80026cc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f807 	bl	8005280 <ethernetif_notify_conn_changed>
}
 8005272:	bf00      	nop
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20022fa8 	.word	0x20022fa8

08005280 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	4603      	mov	r3, r0
 800529c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80052a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a6:	2b84      	cmp	r3, #132	; 0x84
 80052a8:	d005      	beq.n	80052b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80052aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	3303      	adds	r3, #3
 80052b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052b6:	68fb      	ldr	r3, [r7, #12]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ca:	f3ef 8305 	mrs	r3, IPSR
 80052ce:	607b      	str	r3, [r7, #4]
  return(result);
 80052d0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bf14      	ite	ne
 80052d6:	2301      	movne	r3, #1
 80052d8:	2300      	moveq	r3, #0
 80052da:	b2db      	uxtb	r3, r3
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052ec:	f001 fd52 	bl	8006d94 <vTaskStartScheduler>
  
  return osOK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80052fa:	f7ff ffe3 	bl	80052c4 <inHandlerMode>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005304:	f001 fe64 	bl	8006fd0 <xTaskGetTickCountFromISR>
 8005308:	4603      	mov	r3, r0
 800530a:	e002      	b.n	8005312 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800530c:	f001 fe50 	bl	8006fb0 <xTaskGetTickCount>
 8005310:	4603      	mov	r3, r0
  }
}
 8005312:	4618      	mov	r0, r3
 8005314:	bd80      	pop	{r7, pc}

08005316 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005318:	b089      	sub	sp, #36	; 0x24
 800531a:	af04      	add	r7, sp, #16
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d020      	beq.n	800536a <osThreadCreate+0x54>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01c      	beq.n	800536a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685c      	ldr	r4, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681d      	ldr	r5, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691e      	ldr	r6, [r3, #16]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff ffa6 	bl	8005294 <makeFreeRtosPriority>
 8005348:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005352:	9202      	str	r2, [sp, #8]
 8005354:	9301      	str	r3, [sp, #4]
 8005356:	9100      	str	r1, [sp, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	4632      	mov	r2, r6
 800535c:	4629      	mov	r1, r5
 800535e:	4620      	mov	r0, r4
 8005360:	f001 fb4a 	bl	80069f8 <xTaskCreateStatic>
 8005364:	4603      	mov	r3, r0
 8005366:	60fb      	str	r3, [r7, #12]
 8005368:	e01c      	b.n	80053a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685c      	ldr	r4, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005376:	b29e      	uxth	r6, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff ff88 	bl	8005294 <makeFreeRtosPriority>
 8005384:	4602      	mov	r2, r0
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	9200      	str	r2, [sp, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	4632      	mov	r2, r6
 8005392:	4629      	mov	r1, r5
 8005394:	4620      	mov	r0, r4
 8005396:	f001 fb8f 	bl	8006ab8 <xTaskCreate>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d001      	beq.n	80053a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80053a4:	68fb      	ldr	r3, [r7, #12]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <osDelay+0x16>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	e000      	b.n	80053c6 <osDelay+0x18>
 80053c4:	2301      	movs	r3, #1
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fcae 	bl	8006d28 <vTaskDelay>
  
  return osOK;
 80053cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4619      	mov	r1, r3
 80053ec:	2001      	movs	r0, #1
 80053ee:	f000 fc8e 	bl	8005d0e <xQueueCreateMutexStatic>
 80053f2:	4603      	mov	r3, r0
 80053f4:	e003      	b.n	80053fe <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80053f6:	2001      	movs	r0, #1
 80053f8:	f000 fc71 	bl	8005cde <xQueueCreateMutex>
 80053fc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <osMutexWait+0x18>
    return osErrorParameter;
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	e03a      	b.n	8005496 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d103      	bne.n	8005434 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e009      	b.n	8005448 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d006      	beq.n	8005448 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <osMutexWait+0x40>
      ticks = 1;
 8005444:	2301      	movs	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005448:	f7ff ff3c 	bl	80052c4 <inHandlerMode>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d017      	beq.n	8005482 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005452:	f107 0308 	add.w	r3, r7, #8
 8005456:	461a      	mov	r2, r3
 8005458:	2100      	movs	r1, #0
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f001 f894 	bl	8006588 <xQueueReceiveFromISR>
 8005460:	4603      	mov	r3, r0
 8005462:	2b01      	cmp	r3, #1
 8005464:	d001      	beq.n	800546a <osMutexWait+0x62>
      return osErrorOS;
 8005466:	23ff      	movs	r3, #255	; 0xff
 8005468:	e015      	b.n	8005496 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d011      	beq.n	8005494 <osMutexWait+0x8c>
 8005470:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <osMutexWait+0x98>)
 8005472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	f3bf 8f6f 	isb	sy
 8005480:	e008      	b.n	8005494 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005482:	68f9      	ldr	r1, [r7, #12]
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 ff6f 	bl	8006368 <xQueueSemaphoreTake>
 800548a:	4603      	mov	r3, r0
 800548c:	2b01      	cmp	r3, #1
 800548e:	d001      	beq.n	8005494 <osMutexWait+0x8c>
    return osErrorOS;
 8005490:	23ff      	movs	r3, #255	; 0xff
 8005492:	e000      	b.n	8005496 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	e000ed04 	.word	0xe000ed04

080054a4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80054b4:	f7ff ff06 	bl	80052c4 <inHandlerMode>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	4619      	mov	r1, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fddb 	bl	8006080 <xQueueGiveFromISR>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d001      	beq.n	80054d4 <osMutexRelease+0x30>
      return osErrorOS;
 80054d0:	23ff      	movs	r3, #255	; 0xff
 80054d2:	e017      	b.n	8005504 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d013      	beq.n	8005502 <osMutexRelease+0x5e>
 80054da:	4b0c      	ldr	r3, [pc, #48]	; (800550c <osMutexRelease+0x68>)
 80054dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	e00a      	b.n	8005502 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80054ec:	2300      	movs	r3, #0
 80054ee:	2200      	movs	r2, #0
 80054f0:	2100      	movs	r1, #0
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fc26 	bl	8005d44 <xQueueGenericSend>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d001      	beq.n	8005502 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80054fe:	23ff      	movs	r3, #255	; 0xff
 8005500:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005502:	68fb      	ldr	r3, [r7, #12]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af02      	add	r7, sp, #8
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d10b      	bne.n	8005540 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	2303      	movs	r3, #3
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	2200      	movs	r2, #0
 8005534:	2100      	movs	r1, #0
 8005536:	2001      	movs	r0, #1
 8005538:	f000 fada 	bl	8005af0 <xQueueGenericCreateStatic>
 800553c:	4603      	mov	r3, r0
 800553e:	e016      	b.n	800556e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005540:	2300      	movs	r3, #0
 8005542:	e014      	b.n	800556e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d110      	bne.n	800556c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800554a:	2203      	movs	r2, #3
 800554c:	2100      	movs	r1, #0
 800554e:	2001      	movs	r0, #1
 8005550:	f000 fb4b 	bl	8005bea <xQueueGenericCreate>
 8005554:	60f8      	str	r0, [r7, #12]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <osSemaphoreCreate+0x58>
 800555c:	2300      	movs	r3, #0
 800555e:	2200      	movs	r2, #0
 8005560:	2100      	movs	r1, #0
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 fbee 	bl	8005d44 <xQueueGenericSend>
      return sema;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	e000      	b.n	800556e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800556c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	e03a      	b.n	8005606 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d103      	bne.n	80055a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800559c:	f04f 33ff 	mov.w	r3, #4294967295
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e009      	b.n	80055b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d006      	beq.n	80055b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80055b4:	2301      	movs	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80055b8:	f7ff fe84 	bl	80052c4 <inHandlerMode>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d017      	beq.n	80055f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80055c2:	f107 0308 	add.w	r3, r7, #8
 80055c6:	461a      	mov	r2, r3
 80055c8:	2100      	movs	r1, #0
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 ffdc 	bl	8006588 <xQueueReceiveFromISR>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d001      	beq.n	80055da <osSemaphoreWait+0x62>
      return osErrorOS;
 80055d6:	23ff      	movs	r3, #255	; 0xff
 80055d8:	e015      	b.n	8005606 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <osSemaphoreWait+0x8c>
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <osSemaphoreWait+0x98>)
 80055e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	e008      	b.n	8005604 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 feb7 	bl	8006368 <xQueueSemaphoreTake>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d001      	beq.n	8005604 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005600:	23ff      	movs	r3, #255	; 0xff
 8005602:	e000      	b.n	8005606 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b084      	sub	sp, #16
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800561c:	2300      	movs	r3, #0
 800561e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005624:	f7ff fe4e 	bl	80052c4 <inHandlerMode>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800562e:	f107 0308 	add.w	r3, r7, #8
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fd23 	bl	8006080 <xQueueGiveFromISR>
 800563a:	4603      	mov	r3, r0
 800563c:	2b01      	cmp	r3, #1
 800563e:	d001      	beq.n	8005644 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005640:	23ff      	movs	r3, #255	; 0xff
 8005642:	e017      	b.n	8005674 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d013      	beq.n	8005672 <osSemaphoreRelease+0x5e>
 800564a:	4b0c      	ldr	r3, [pc, #48]	; (800567c <osSemaphoreRelease+0x68>)
 800564c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	e00a      	b.n	8005672 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800565c:	2300      	movs	r3, #0
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 fb6e 	bl	8005d44 <xQueueGenericSend>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800566e:	23ff      	movs	r3, #255	; 0xff
 8005670:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005672:	68fb      	ldr	r3, [r7, #12]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	e000ed04 	.word	0xe000ed04

08005680 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005688:	f7ff fe1c 	bl	80052c4 <inHandlerMode>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d001      	beq.n	8005696 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8005692:	2382      	movs	r3, #130	; 0x82
 8005694:	e003      	b.n	800569e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 f837 	bl	800670a <vQueueDelete>

  return osOK; 
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80056a6:	b590      	push	{r4, r7, lr}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d012      	beq.n	80056de <osMessageCreate+0x38>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6818      	ldr	r0, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6859      	ldr	r1, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68dc      	ldr	r4, [r3, #12]
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	4623      	mov	r3, r4
 80056d6:	f000 fa0b 	bl	8005af0 <xQueueGenericCreateStatic>
 80056da:	4603      	mov	r3, r0
 80056dc:	e008      	b.n	80056f0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	4619      	mov	r1, r3
 80056ea:	f000 fa7e 	bl	8005bea <xQueueGenericCreate>
 80056ee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd90      	pop	{r4, r7, pc}

080056f8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <osMessagePut+0x1e>
    ticks = 1;
 8005712:	2301      	movs	r3, #1
 8005714:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005716:	f7ff fdd5 	bl	80052c4 <inHandlerMode>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d018      	beq.n	8005752 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005720:	f107 0210 	add.w	r2, r7, #16
 8005724:	f107 0108 	add.w	r1, r7, #8
 8005728:	2300      	movs	r3, #0
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 fc0c 	bl	8005f48 <xQueueGenericSendFromISR>
 8005730:	4603      	mov	r3, r0
 8005732:	2b01      	cmp	r3, #1
 8005734:	d001      	beq.n	800573a <osMessagePut+0x42>
      return osErrorOS;
 8005736:	23ff      	movs	r3, #255	; 0xff
 8005738:	e018      	b.n	800576c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d014      	beq.n	800576a <osMessagePut+0x72>
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <osMessagePut+0x7c>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	e00b      	b.n	800576a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005752:	f107 0108 	add.w	r1, r7, #8
 8005756:	2300      	movs	r3, #0
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 faf2 	bl	8005d44 <xQueueGenericSend>
 8005760:	4603      	mov	r3, r0
 8005762:	2b01      	cmp	r3, #1
 8005764:	d001      	beq.n	800576a <osMessagePut+0x72>
      return osErrorOS;
 8005766:	23ff      	movs	r3, #255	; 0xff
 8005768:	e000      	b.n	800576c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3718      	adds	r7, #24
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b08b      	sub	sp, #44	; 0x2c
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	617b      	str	r3, [r7, #20]
    return event;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	461c      	mov	r4, r3
 800579a:	f107 0314 	add.w	r3, r7, #20
 800579e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80057a6:	e054      	b.n	8005852 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80057a8:	2300      	movs	r3, #0
 80057aa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d103      	bne.n	80057c0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80057b8:	f04f 33ff 	mov.w	r3, #4294967295
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	e009      	b.n	80057d4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d006      	beq.n	80057d4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <osMessageGet+0x5c>
      ticks = 1;
 80057d0:	2301      	movs	r3, #1
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80057d4:	f7ff fd76 	bl	80052c4 <inHandlerMode>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d01c      	beq.n	8005818 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80057de:	f107 0220 	add.w	r2, r7, #32
 80057e2:	f107 0314 	add.w	r3, r7, #20
 80057e6:	3304      	adds	r3, #4
 80057e8:	4619      	mov	r1, r3
 80057ea:	68b8      	ldr	r0, [r7, #8]
 80057ec:	f000 fecc 	bl	8006588 <xQueueReceiveFromISR>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d102      	bne.n	80057fc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80057f6:	2310      	movs	r3, #16
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e001      	b.n	8005800 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01d      	beq.n	8005842 <osMessageGet+0xca>
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <osMessageGet+0xe4>)
 8005808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	e014      	b.n	8005842 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005818:	f107 0314 	add.w	r3, r7, #20
 800581c:	3304      	adds	r3, #4
 800581e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005820:	4619      	mov	r1, r3
 8005822:	68b8      	ldr	r0, [r7, #8]
 8005824:	f000 fcbe 	bl	80061a4 <xQueueReceive>
 8005828:	4603      	mov	r3, r0
 800582a:	2b01      	cmp	r3, #1
 800582c:	d102      	bne.n	8005834 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800582e:	2310      	movs	r3, #16
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e006      	b.n	8005842 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <osMessageGet+0xc6>
 800583a:	2300      	movs	r3, #0
 800583c:	e000      	b.n	8005840 <osMessageGet+0xc8>
 800583e:	2340      	movs	r3, #64	; 0x40
 8005840:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	461c      	mov	r4, r3
 8005846:	f107 0314 	add.w	r3, r7, #20
 800584a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800584e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	372c      	adds	r7, #44	; 0x2c
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}
 800585a:	bf00      	nop
 800585c:	e000ed04 	.word	0xe000ed04

08005860 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005868:	f7ff fd2c 	bl	80052c4 <inHandlerMode>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 ff2a 	bl	80066cc <uxQueueMessagesWaitingFromISR>
 8005878:	4603      	mov	r3, r0
 800587a:	e003      	b.n	8005884 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 ff06 	bl	800668e <uxQueueMessagesWaiting>
 8005882:	4603      	mov	r3, r0
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8005894:	f7ff fd16 	bl	80052c4 <inHandlerMode>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <osMessageDelete+0x16>
    return osErrorISR;
 800589e:	2382      	movs	r3, #130	; 0x82
 80058a0:	e003      	b.n	80058aa <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 ff31 	bl	800670a <vQueueDelete>

  return osOK; 
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f103 0208 	add.w	r2, r3, #8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f103 0208 	add.w	r2, r3, #8
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f103 0208 	add.w	r2, r3, #8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	601a      	str	r2, [r3, #0]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596a:	d103      	bne.n	8005974 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e00c      	b.n	800598e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	3308      	adds	r3, #8
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	e002      	b.n	8005982 <vListInsert+0x2e>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	429a      	cmp	r2, r3
 800598c:	d2f6      	bcs.n	800597c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	601a      	str	r2, [r3, #0]
}
 80059ba:	bf00      	nop
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	6892      	ldr	r2, [r2, #8]
 80059dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6852      	ldr	r2, [r2, #4]
 80059e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d103      	bne.n	80059fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	1e5a      	subs	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	b672      	cpsid	i
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	b662      	cpsie	i
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	e7fe      	b.n	8005a46 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005a48:	f002 f916 	bl	8007c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	68f9      	ldr	r1, [r7, #12]
 8005a56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	441a      	add	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a7e:	fb01 f303 	mul.w	r3, r1, r3
 8005a82:	441a      	add	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	22ff      	movs	r2, #255	; 0xff
 8005a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	22ff      	movs	r2, #255	; 0xff
 8005a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d114      	bne.n	8005ac8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d01a      	beq.n	8005adc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3310      	adds	r3, #16
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 fbde 	bl	800726c <xTaskRemoveFromEventList>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d012      	beq.n	8005adc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <xQueueGenericReset+0xd0>)
 8005ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	e009      	b.n	8005adc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3310      	adds	r3, #16
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fef0 	bl	80058b2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3324      	adds	r3, #36	; 0x24
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff feeb 	bl	80058b2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005adc:	f002 f8fe 	bl	8007cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005ae0:	2301      	movs	r3, #1
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3710      	adds	r7, #16
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08e      	sub	sp, #56	; 0x38
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xQueueGenericCreateStatic+0x2c>
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	b672      	cpsid	i
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	b662      	cpsie	i
 8005b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b1a:	e7fe      	b.n	8005b1a <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10b      	bne.n	8005b3a <xQueueGenericCreateStatic+0x4a>
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	b672      	cpsid	i
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	b662      	cpsie	i
 8005b36:	627b      	str	r3, [r7, #36]	; 0x24
 8005b38:	e7fe      	b.n	8005b38 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <xQueueGenericCreateStatic+0x56>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <xQueueGenericCreateStatic+0x5a>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericCreateStatic+0x5c>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xQueueGenericCreateStatic+0x78>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	b672      	cpsid	i
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	b662      	cpsie	i
 8005b64:	623b      	str	r3, [r7, #32]
 8005b66:	e7fe      	b.n	8005b66 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <xQueueGenericCreateStatic+0x84>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <xQueueGenericCreateStatic+0x88>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <xQueueGenericCreateStatic+0x8a>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10b      	bne.n	8005b96 <xQueueGenericCreateStatic+0xa6>
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	b672      	cpsid	i
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	b662      	cpsie	i
 8005b92:	61fb      	str	r3, [r7, #28]
 8005b94:	e7fe      	b.n	8005b94 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b96:	2348      	movs	r3, #72	; 0x48
 8005b98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b48      	cmp	r3, #72	; 0x48
 8005b9e:	d00b      	beq.n	8005bb8 <xQueueGenericCreateStatic+0xc8>
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	b672      	cpsid	i
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	b662      	cpsie	i
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	e7fe      	b.n	8005bb6 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005bb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00d      	beq.n	8005be0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bcc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f846 	bl	8005c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3730      	adds	r7, #48	; 0x30
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b08a      	sub	sp, #40	; 0x28
 8005bee:	af02      	add	r7, sp, #8
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	60b9      	str	r1, [r7, #8]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <xQueueGenericCreate+0x2c>
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	b672      	cpsid	i
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	b662      	cpsie	i
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	e7fe      	b.n	8005c14 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e004      	b.n	8005c2c <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	3348      	adds	r3, #72	; 0x48
 8005c30:	4618      	mov	r0, r3
 8005c32:	f002 f943 	bl	8007ebc <pvPortMalloc>
 8005c36:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d011      	beq.n	8005c62 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	3348      	adds	r3, #72	; 0x48
 8005c46:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c50:	79fa      	ldrb	r2, [r7, #7]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	9300      	str	r3, [sp, #0]
 8005c56:	4613      	mov	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	68b9      	ldr	r1, [r7, #8]
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f000 f805 	bl	8005c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c62:	69bb      	ldr	r3, [r7, #24]
	}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d103      	bne.n	8005c88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	601a      	str	r2, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	69b8      	ldr	r0, [r7, #24]
 8005c9e:	f7ff febd 	bl	8005a1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00e      	beq.n	8005cd6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005cca:	2300      	movs	r3, #0
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f837 	bl	8005d44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005cf0:	79fb      	ldrb	r3, [r7, #7]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6939      	ldr	r1, [r7, #16]
 8005cf6:	6978      	ldr	r0, [r7, #20]
 8005cf8:	f7ff ff77 	bl	8005bea <xQueueGenericCreate>
 8005cfc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff ffd3 	bl	8005caa <prvInitialiseMutex>

		return xNewQueue;
 8005d04:	68fb      	ldr	r3, [r7, #12]
	}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b088      	sub	sp, #32
 8005d12:	af02      	add	r7, sp, #8
 8005d14:	4603      	mov	r3, r0
 8005d16:	6039      	str	r1, [r7, #0]
 8005d18:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	6939      	ldr	r1, [r7, #16]
 8005d2c:	6978      	ldr	r0, [r7, #20]
 8005d2e:	f7ff fedf 	bl	8005af0 <xQueueGenericCreateStatic>
 8005d32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f7ff ffb8 	bl	8005caa <prvInitialiseMutex>

		return xNewQueue;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	; 0x38
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
 8005d50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10b      	bne.n	8005d78 <xQueueGenericSend+0x34>
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	b672      	cpsid	i
 8005d66:	f383 8811 	msr	BASEPRI, r3
 8005d6a:	f3bf 8f6f 	isb	sy
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	b662      	cpsie	i
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d76:	e7fe      	b.n	8005d76 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <xQueueGenericSend+0x42>
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <xQueueGenericSend+0x46>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <xQueueGenericSend+0x48>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10b      	bne.n	8005da8 <xQueueGenericSend+0x64>
 8005d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d94:	b672      	cpsid	i
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	b662      	cpsie	i
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
 8005da6:	e7fe      	b.n	8005da6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d103      	bne.n	8005db6 <xQueueGenericSend+0x72>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <xQueueGenericSend+0x76>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <xQueueGenericSend+0x78>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <xQueueGenericSend+0x94>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	b672      	cpsid	i
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	b662      	cpsie	i
 8005dd4:	623b      	str	r3, [r7, #32]
 8005dd6:	e7fe      	b.n	8005dd6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dd8:	f001 fc06 	bl	80075e8 <xTaskGetSchedulerState>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d102      	bne.n	8005de8 <xQueueGenericSend+0xa4>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <xQueueGenericSend+0xa8>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e000      	b.n	8005dee <xQueueGenericSend+0xaa>
 8005dec:	2300      	movs	r3, #0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10b      	bne.n	8005e0a <xQueueGenericSend+0xc6>
 8005df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df6:	b672      	cpsid	i
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	b662      	cpsie	i
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	e7fe      	b.n	8005e08 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e0a:	f001 ff35 	bl	8007c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d302      	bcc.n	8005e20 <xQueueGenericSend+0xdc>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d129      	bne.n	8005e74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e26:	f000 fcac 	bl	8006782 <prvCopyDataToQueue>
 8005e2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	3324      	adds	r3, #36	; 0x24
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f001 fa17 	bl	800726c <xTaskRemoveFromEventList>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d013      	beq.n	8005e6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e44:	4b3f      	ldr	r3, [pc, #252]	; (8005f44 <xQueueGenericSend+0x200>)
 8005e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	e00a      	b.n	8005e6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d007      	beq.n	8005e6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e5c:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <xQueueGenericSend+0x200>)
 8005e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e62:	601a      	str	r2, [r3, #0]
 8005e64:	f3bf 8f4f 	dsb	sy
 8005e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e6c:	f001 ff36 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e063      	b.n	8005f3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d103      	bne.n	8005e82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e7a:	f001 ff2f 	bl	8007cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e05c      	b.n	8005f3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d106      	bne.n	8005e96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e88:	f107 0314 	add.w	r3, r7, #20
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f001 fa51 	bl	8007334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e96:	f001 ff21 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e9a:	f000 ffdd 	bl	8006e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e9e:	f001 feeb 	bl	8007c78 <vPortEnterCritical>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ea8:	b25b      	sxtb	r3, r3
 8005eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eae:	d103      	bne.n	8005eb8 <xQueueGenericSend+0x174>
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ebe:	b25b      	sxtb	r3, r3
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d103      	bne.n	8005ece <xQueueGenericSend+0x18a>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ece:	f001 ff05 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ed2:	1d3a      	adds	r2, r7, #4
 8005ed4:	f107 0314 	add.w	r3, r7, #20
 8005ed8:	4611      	mov	r1, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fa40 	bl	8007360 <xTaskCheckForTimeOut>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d124      	bne.n	8005f30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee8:	f000 fd43 	bl	8006972 <prvIsQueueFull>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d018      	beq.n	8005f24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	3310      	adds	r3, #16
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 f990 	bl	8007220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f02:	f000 fcce 	bl	80068a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f06:	f000 ffb5 	bl	8006e74 <xTaskResumeAll>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f47f af7c 	bne.w	8005e0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005f12:	4b0c      	ldr	r3, [pc, #48]	; (8005f44 <xQueueGenericSend+0x200>)
 8005f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	e772      	b.n	8005e0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f26:	f000 fcbc 	bl	80068a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f2a:	f000 ffa3 	bl	8006e74 <xTaskResumeAll>
 8005f2e:	e76c      	b.n	8005e0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f32:	f000 fcb6 	bl	80068a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f36:	f000 ff9d 	bl	8006e74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3738      	adds	r7, #56	; 0x38
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08e      	sub	sp, #56	; 0x38
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <xQueueGenericSendFromISR+0x30>
 8005f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f64:	b672      	cpsid	i
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	b662      	cpsie	i
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
 8005f76:	e7fe      	b.n	8005f76 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d103      	bne.n	8005f86 <xQueueGenericSendFromISR+0x3e>
 8005f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d101      	bne.n	8005f8a <xQueueGenericSendFromISR+0x42>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <xQueueGenericSendFromISR+0x44>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10b      	bne.n	8005fa8 <xQueueGenericSendFromISR+0x60>
 8005f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f94:	b672      	cpsid	i
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	b662      	cpsie	i
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	e7fe      	b.n	8005fa6 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d103      	bne.n	8005fb6 <xQueueGenericSendFromISR+0x6e>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <xQueueGenericSendFromISR+0x72>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <xQueueGenericSendFromISR+0x74>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10b      	bne.n	8005fd8 <xQueueGenericSendFromISR+0x90>
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	b672      	cpsid	i
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	b662      	cpsie	i
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	e7fe      	b.n	8005fd6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fd8:	f001 ff2e 	bl	8007e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fdc:	f3ef 8211 	mrs	r2, BASEPRI
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	b672      	cpsid	i
 8005fe6:	f383 8811 	msr	BASEPRI, r3
 8005fea:	f3bf 8f6f 	isb	sy
 8005fee:	f3bf 8f4f 	dsb	sy
 8005ff2:	b662      	cpsie	i
 8005ff4:	61ba      	str	r2, [r7, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ff8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006004:	429a      	cmp	r2, r3
 8006006:	d302      	bcc.n	800600e <xQueueGenericSendFromISR+0xc6>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d12c      	bne.n	8006068 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800601e:	f000 fbb0 	bl	8006782 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006022:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d112      	bne.n	8006052 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	3324      	adds	r3, #36	; 0x24
 8006038:	4618      	mov	r0, r3
 800603a:	f001 f917 	bl	800726c <xTaskRemoveFromEventList>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00e      	beq.n	8006062 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
 8006050:	e007      	b.n	8006062 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006056:	3301      	adds	r3, #1
 8006058:	b2db      	uxtb	r3, r3
 800605a:	b25a      	sxtb	r2, r3
 800605c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006062:	2301      	movs	r3, #1
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006066:	e001      	b.n	800606c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006068:	2300      	movs	r3, #0
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006078:	4618      	mov	r0, r3
 800607a:	3738      	adds	r7, #56	; 0x38
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08e      	sub	sp, #56	; 0x38
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10b      	bne.n	80060ac <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006098:	b672      	cpsid	i
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	b662      	cpsie	i
 80060a8:	623b      	str	r3, [r7, #32]
 80060aa:	e7fe      	b.n	80060aa <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00b      	beq.n	80060cc <xQueueGiveFromISR+0x4c>
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	b672      	cpsid	i
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	b662      	cpsie	i
 80060c8:	61fb      	str	r3, [r7, #28]
 80060ca:	e7fe      	b.n	80060ca <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <xQueueGiveFromISR+0x5c>
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <xQueueGiveFromISR+0x60>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <xQueueGiveFromISR+0x62>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10b      	bne.n	80060fe <xQueueGiveFromISR+0x7e>
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	b672      	cpsid	i
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	b662      	cpsie	i
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	e7fe      	b.n	80060fc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060fe:	f001 fe9b 	bl	8007e38 <vPortValidateInterruptPriority>
	__asm volatile
 8006102:	f3ef 8211 	mrs	r2, BASEPRI
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	617a      	str	r2, [r7, #20]
 800611c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800611e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006120:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800612e:	429a      	cmp	r2, r3
 8006130:	d22b      	bcs.n	800618a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006138:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006142:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614c:	d112      	bne.n	8006174 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	2b00      	cmp	r3, #0
 8006154:	d016      	beq.n	8006184 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	3324      	adds	r3, #36	; 0x24
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f886 	bl	800726c <xTaskRemoveFromEventList>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00e      	beq.n	8006184 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00b      	beq.n	8006184 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e007      	b.n	8006184 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006178:	3301      	adds	r3, #1
 800617a:	b2db      	uxtb	r3, r3
 800617c:	b25a      	sxtb	r2, r3
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006184:	2301      	movs	r3, #1
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
 8006188:	e001      	b.n	800618e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800618a:	2300      	movs	r3, #0
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800619a:	4618      	mov	r0, r3
 800619c:	3738      	adds	r7, #56	; 0x38
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08c      	sub	sp, #48	; 0x30
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061b0:	2300      	movs	r3, #0
 80061b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <xQueueReceive+0x32>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c2:	b672      	cpsid	i
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	b662      	cpsie	i
 80061d2:	623b      	str	r3, [r7, #32]
 80061d4:	e7fe      	b.n	80061d4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d103      	bne.n	80061e4 <xQueueReceive+0x40>
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d101      	bne.n	80061e8 <xQueueReceive+0x44>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <xQueueReceive+0x46>
 80061e8:	2300      	movs	r3, #0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10b      	bne.n	8006206 <xQueueReceive+0x62>
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	b672      	cpsid	i
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	b662      	cpsie	i
 8006202:	61fb      	str	r3, [r7, #28]
 8006204:	e7fe      	b.n	8006204 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006206:	f001 f9ef 	bl	80075e8 <xTaskGetSchedulerState>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <xQueueReceive+0x72>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <xQueueReceive+0x76>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <xQueueReceive+0x78>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10b      	bne.n	8006238 <xQueueReceive+0x94>
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	b672      	cpsid	i
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	b662      	cpsie	i
 8006234:	61bb      	str	r3, [r7, #24]
 8006236:	e7fe      	b.n	8006236 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006238:	f001 fd1e 	bl	8007c78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800623c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01f      	beq.n	8006288 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800624c:	f000 fb03 	bl	8006856 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006256:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00f      	beq.n	8006280 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	3310      	adds	r3, #16
 8006264:	4618      	mov	r0, r3
 8006266:	f001 f801 	bl	800726c <xTaskRemoveFromEventList>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006270:	4b3c      	ldr	r3, [pc, #240]	; (8006364 <xQueueReceive+0x1c0>)
 8006272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006280:	f001 fd2c 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 8006284:	2301      	movs	r3, #1
 8006286:	e069      	b.n	800635c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800628e:	f001 fd25 	bl	8007cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006292:	2300      	movs	r3, #0
 8006294:	e062      	b.n	800635c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	2b00      	cmp	r3, #0
 800629a:	d106      	bne.n	80062aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800629c:	f107 0310 	add.w	r3, r7, #16
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 f847 	bl	8007334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062a6:	2301      	movs	r3, #1
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062aa:	f001 fd17 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062ae:	f000 fdd3 	bl	8006e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062b2:	f001 fce1 	bl	8007c78 <vPortEnterCritical>
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062bc:	b25b      	sxtb	r3, r3
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d103      	bne.n	80062cc <xQueueReceive+0x128>
 80062c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062d2:	b25b      	sxtb	r3, r3
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d8:	d103      	bne.n	80062e2 <xQueueReceive+0x13e>
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062e2:	f001 fcfb 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062e6:	1d3a      	adds	r2, r7, #4
 80062e8:	f107 0310 	add.w	r3, r7, #16
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f001 f836 	bl	8007360 <xTaskCheckForTimeOut>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d123      	bne.n	8006342 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fc:	f000 fb23 	bl	8006946 <prvIsQueueEmpty>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d017      	beq.n	8006336 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	3324      	adds	r3, #36	; 0x24
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f000 ff86 	bl	8007220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006316:	f000 fac4 	bl	80068a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800631a:	f000 fdab 	bl	8006e74 <xTaskResumeAll>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d189      	bne.n	8006238 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006324:	4b0f      	ldr	r3, [pc, #60]	; (8006364 <xQueueReceive+0x1c0>)
 8006326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	e780      	b.n	8006238 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006336:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006338:	f000 fab3 	bl	80068a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800633c:	f000 fd9a 	bl	8006e74 <xTaskResumeAll>
 8006340:	e77a      	b.n	8006238 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006344:	f000 faad 	bl	80068a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006348:	f000 fd94 	bl	8006e74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800634c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800634e:	f000 fafa 	bl	8006946 <prvIsQueueEmpty>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	f43f af6f 	beq.w	8006238 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800635a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800635c:	4618      	mov	r0, r3
 800635e:	3730      	adds	r7, #48	; 0x30
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	e000ed04 	.word	0xe000ed04

08006368 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08e      	sub	sp, #56	; 0x38
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800637a:	2300      	movs	r3, #0
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10b      	bne.n	800639c <xQueueSemaphoreTake+0x34>
 8006384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006388:	b672      	cpsid	i
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	b662      	cpsie	i
 8006398:	623b      	str	r3, [r7, #32]
 800639a:	e7fe      	b.n	800639a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <xQueueSemaphoreTake+0x54>
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	b672      	cpsid	i
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	b662      	cpsie	i
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	e7fe      	b.n	80063ba <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063bc:	f001 f914 	bl	80075e8 <xTaskGetSchedulerState>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <xQueueSemaphoreTake+0x64>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <xQueueSemaphoreTake+0x68>
 80063cc:	2301      	movs	r3, #1
 80063ce:	e000      	b.n	80063d2 <xQueueSemaphoreTake+0x6a>
 80063d0:	2300      	movs	r3, #0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <xQueueSemaphoreTake+0x86>
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	b672      	cpsid	i
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	b662      	cpsie	i
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	e7fe      	b.n	80063ec <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ee:	f001 fc43 	bl	8007c78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d024      	beq.n	8006448 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006400:	1e5a      	subs	r2, r3, #1
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d104      	bne.n	8006418 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800640e:	f001 faad 	bl	800796c <pvTaskIncrementMutexHeldCount>
 8006412:	4602      	mov	r2, r0
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00f      	beq.n	8006440 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006422:	3310      	adds	r3, #16
 8006424:	4618      	mov	r0, r3
 8006426:	f000 ff21 	bl	800726c <xTaskRemoveFromEventList>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006430:	4b54      	ldr	r3, [pc, #336]	; (8006584 <xQueueSemaphoreTake+0x21c>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006440:	f001 fc4c 	bl	8007cdc <vPortExitCritical>
				return pdPASS;
 8006444:	2301      	movs	r3, #1
 8006446:	e098      	b.n	800657a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d112      	bne.n	8006474 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800644e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00b      	beq.n	800646c <xQueueSemaphoreTake+0x104>
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	617b      	str	r3, [r7, #20]
 800646a:	e7fe      	b.n	800646a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800646c:	f001 fc36 	bl	8007cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006470:	2300      	movs	r3, #0
 8006472:	e082      	b.n	800657a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800647a:	f107 030c 	add.w	r3, r7, #12
 800647e:	4618      	mov	r0, r3
 8006480:	f000 ff58 	bl	8007334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006488:	f001 fc28 	bl	8007cdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800648c:	f000 fce4 	bl	8006e58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006490:	f001 fbf2 	bl	8007c78 <vPortEnterCritical>
 8006494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800649a:	b25b      	sxtb	r3, r3
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a0:	d103      	bne.n	80064aa <xQueueSemaphoreTake+0x142>
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064b0:	b25b      	sxtb	r3, r3
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d103      	bne.n	80064c0 <xQueueSemaphoreTake+0x158>
 80064b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064c0:	f001 fc0c 	bl	8007cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064c4:	463a      	mov	r2, r7
 80064c6:	f107 030c 	add.w	r3, r7, #12
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 ff47 	bl	8007360 <xTaskCheckForTimeOut>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d132      	bne.n	800653e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064da:	f000 fa34 	bl	8006946 <prvIsQueueEmpty>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d026      	beq.n	8006532 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80064ec:	f001 fbc4 	bl	8007c78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f895 	bl	8007624 <xTaskPriorityInherit>
 80064fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064fc:	f001 fbee 	bl	8007cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006502:	3324      	adds	r3, #36	; 0x24
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fe89 	bl	8007220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800650e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006510:	f000 f9c7 	bl	80068a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006514:	f000 fcae 	bl	8006e74 <xTaskResumeAll>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	f47f af67 	bne.w	80063ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006520:	4b18      	ldr	r3, [pc, #96]	; (8006584 <xQueueSemaphoreTake+0x21c>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	e75d      	b.n	80063ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006534:	f000 f9b5 	bl	80068a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006538:	f000 fc9c 	bl	8006e74 <xTaskResumeAll>
 800653c:	e757      	b.n	80063ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800653e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006540:	f000 f9af 	bl	80068a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006544:	f000 fc96 	bl	8006e74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800654a:	f000 f9fc 	bl	8006946 <prvIsQueueEmpty>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	f43f af4c 	beq.w	80063ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800655c:	f001 fb8c 	bl	8007c78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006562:	f000 f8f6 	bl	8006752 <prvGetDisinheritPriorityAfterTimeout>
 8006566:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800656e:	4618      	mov	r0, r3
 8006570:	f001 f960 	bl	8007834 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006574:	f001 fbb2 	bl	8007cdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800657a:	4618      	mov	r0, r3
 800657c:	3738      	adds	r7, #56	; 0x38
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	e000ed04 	.word	0xe000ed04

08006588 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08e      	sub	sp, #56	; 0x38
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10b      	bne.n	80065b6 <xQueueReceiveFromISR+0x2e>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	b672      	cpsid	i
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	b662      	cpsie	i
 80065b2:	623b      	str	r3, [r7, #32]
 80065b4:	e7fe      	b.n	80065b4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <xQueueReceiveFromISR+0x3c>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <xQueueReceiveFromISR+0x40>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <xQueueReceiveFromISR+0x42>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10b      	bne.n	80065e6 <xQueueReceiveFromISR+0x5e>
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	b672      	cpsid	i
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	b662      	cpsie	i
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	e7fe      	b.n	80065e4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065e6:	f001 fc27 	bl	8007e38 <vPortValidateInterruptPriority>
	__asm volatile
 80065ea:	f3ef 8211 	mrs	r2, BASEPRI
 80065ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f2:	b672      	cpsid	i
 80065f4:	f383 8811 	msr	BASEPRI, r3
 80065f8:	f3bf 8f6f 	isb	sy
 80065fc:	f3bf 8f4f 	dsb	sy
 8006600:	b662      	cpsie	i
 8006602:	61ba      	str	r2, [r7, #24]
 8006604:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006606:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	2b00      	cmp	r3, #0
 8006614:	d02f      	beq.n	8006676 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800661c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006624:	f000 f917 	bl	8006856 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	1e5a      	subs	r2, r3, #1
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006638:	d112      	bne.n	8006660 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	3310      	adds	r3, #16
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fe10 	bl	800726c <xTaskRemoveFromEventList>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e007      	b.n	8006670 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006664:	3301      	adds	r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	b25a      	sxtb	r2, r3
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
 8006674:	e001      	b.n	800667a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8006676:	2300      	movs	r3, #0
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006686:	4618      	mov	r0, r3
 8006688:	3738      	adds	r7, #56	; 0x38
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b084      	sub	sp, #16
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10b      	bne.n	80066b4 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	b672      	cpsid	i
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	b662      	cpsie	i
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	e7fe      	b.n	80066b2 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80066b4:	f001 fae0 	bl	8007c78 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066bc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80066be:	f001 fb0d 	bl	8007cdc <vPortExitCritical>

	return uxReturn;
 80066c2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <uxQueueMessagesWaitingFromISR+0x2a>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	b672      	cpsid	i
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	b662      	cpsie	i
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e7fe      	b.n	80066f4 <uxQueueMessagesWaitingFromISR+0x28>
	uxReturn = pxQueue->uxMessagesWaiting;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80066fc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10b      	bne.n	8006734 <vQueueDelete+0x2a>
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	b672      	cpsid	i
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	b662      	cpsie	i
 8006730:	60bb      	str	r3, [r7, #8]
 8006732:	e7fe      	b.n	8006732 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f935 	bl	80069a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f001 fc81 	bl	800804c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d006      	beq.n	8006770 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f1c3 0307 	rsb	r3, r3, #7
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e001      	b.n	8006774 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006774:	68fb      	ldr	r3, [r7, #12]
	}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10d      	bne.n	80067bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d14d      	bne.n	8006844 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 ffb9 	bl	8007724 <xTaskPriorityDisinherit>
 80067b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
 80067ba:	e043      	b.n	8006844 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d119      	bne.n	80067f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6858      	ldr	r0, [r3, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	461a      	mov	r2, r3
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	f012 fd3a 	bl	8019246 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	441a      	add	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d32b      	bcc.n	8006844 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	605a      	str	r2, [r3, #4]
 80067f4:	e026      	b.n	8006844 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	68d8      	ldr	r0, [r3, #12]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	461a      	mov	r2, r3
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	f012 fd20 	bl	8019246 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	68da      	ldr	r2, [r3, #12]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	425b      	negs	r3, r3
 8006810:	441a      	add	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d207      	bcs.n	8006832 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	425b      	negs	r3, r3
 800682c:	441a      	add	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d105      	bne.n	8006844 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	3b01      	subs	r3, #1
 8006842:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800684c:	697b      	ldr	r3, [r7, #20]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d018      	beq.n	800689a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006870:	441a      	add	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68da      	ldr	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	429a      	cmp	r2, r3
 8006880:	d303      	bcc.n	800688a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68d9      	ldr	r1, [r3, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	461a      	mov	r2, r3
 8006894:	6838      	ldr	r0, [r7, #0]
 8006896:	f012 fcd6 	bl	8019246 <memcpy>
	}
}
 800689a:	bf00      	nop
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068aa:	f001 f9e5 	bl	8007c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068b6:	e011      	b.n	80068dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d012      	beq.n	80068e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3324      	adds	r3, #36	; 0x24
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fcd1 	bl	800726c <xTaskRemoveFromEventList>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d001      	beq.n	80068d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068d0:	f000 fdaa 	bl	8007428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dce9      	bgt.n	80068b8 <prvUnlockQueue+0x16>
 80068e4:	e000      	b.n	80068e8 <prvUnlockQueue+0x46>
					break;
 80068e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	22ff      	movs	r2, #255	; 0xff
 80068ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068f0:	f001 f9f4 	bl	8007cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068f4:	f001 f9c0 	bl	8007c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006900:	e011      	b.n	8006926 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d012      	beq.n	8006930 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	3310      	adds	r3, #16
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fcac 	bl	800726c <xTaskRemoveFromEventList>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800691a:	f000 fd85 	bl	8007428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	3b01      	subs	r3, #1
 8006922:	b2db      	uxtb	r3, r3
 8006924:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006926:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800692a:	2b00      	cmp	r3, #0
 800692c:	dce9      	bgt.n	8006902 <prvUnlockQueue+0x60>
 800692e:	e000      	b.n	8006932 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006930:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	22ff      	movs	r2, #255	; 0xff
 8006936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800693a:	f001 f9cf 	bl	8007cdc <vPortExitCritical>
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800694e:	f001 f993 	bl	8007c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800695a:	2301      	movs	r3, #1
 800695c:	60fb      	str	r3, [r7, #12]
 800695e:	e001      	b.n	8006964 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006964:	f001 f9ba 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 8006968:	68fb      	ldr	r3, [r7, #12]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b084      	sub	sp, #16
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800697a:	f001 f97d 	bl	8007c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006986:	429a      	cmp	r2, r3
 8006988:	d102      	bne.n	8006990 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800698a:	2301      	movs	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	e001      	b.n	8006994 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006994:	f001 f9a2 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 8006998:	68fb      	ldr	r3, [r7, #12]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	e016      	b.n	80069e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069b2:	4a10      	ldr	r2, [pc, #64]	; (80069f4 <vQueueUnregisterQueue+0x50>)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	4413      	add	r3, r2
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d10b      	bne.n	80069da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80069c2:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <vQueueUnregisterQueue+0x50>)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2100      	movs	r1, #0
 80069c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069cc:	4a09      	ldr	r2, [pc, #36]	; (80069f4 <vQueueUnregisterQueue+0x50>)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	2200      	movs	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]
				break;
 80069d8:	e005      	b.n	80069e6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3301      	adds	r3, #1
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b07      	cmp	r3, #7
 80069e4:	d9e5      	bls.n	80069b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200247c0 	.word	0x200247c0

080069f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08e      	sub	sp, #56	; 0x38
 80069fc:	af04      	add	r7, sp, #16
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d10b      	bne.n	8006a24 <xTaskCreateStatic+0x2c>
 8006a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a10:	b672      	cpsid	i
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	b662      	cpsie	i
 8006a20:	623b      	str	r3, [r7, #32]
 8006a22:	e7fe      	b.n	8006a22 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <xTaskCreateStatic+0x4a>
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	b672      	cpsid	i
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	b662      	cpsie	i
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e7fe      	b.n	8006a40 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a42:	2354      	movs	r3, #84	; 0x54
 8006a44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b54      	cmp	r3, #84	; 0x54
 8006a4a:	d00b      	beq.n	8006a64 <xTaskCreateStatic+0x6c>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	b672      	cpsid	i
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	b662      	cpsie	i
 8006a60:	61bb      	str	r3, [r7, #24]
 8006a62:	e7fe      	b.n	8006a62 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01e      	beq.n	8006aaa <xTaskCreateStatic+0xb2>
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a84:	2300      	movs	r3, #0
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	9302      	str	r3, [sp, #8]
 8006a8c:	f107 0314 	add.w	r3, r7, #20
 8006a90:	9301      	str	r3, [sp, #4]
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 f850 	bl	8006b42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aa4:	f000 f8d6 	bl	8006c54 <prvAddNewTaskToReadyList>
 8006aa8:	e001      	b.n	8006aae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006aae:	697b      	ldr	r3, [r7, #20]
	}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08c      	sub	sp, #48	; 0x30
 8006abc:	af04      	add	r7, sp, #16
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f9f5 	bl	8007ebc <pvPortMalloc>
 8006ad2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00e      	beq.n	8006af8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ada:	2054      	movs	r0, #84	; 0x54
 8006adc:	f001 f9ee 	bl	8007ebc <pvPortMalloc>
 8006ae0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
 8006aee:	e005      	b.n	8006afc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006af0:	6978      	ldr	r0, [r7, #20]
 8006af2:	f001 faab 	bl	800804c <vPortFree>
 8006af6:	e001      	b.n	8006afc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d017      	beq.n	8006b32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b0a:	88fa      	ldrh	r2, [r7, #6]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	9303      	str	r3, [sp, #12]
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	9302      	str	r3, [sp, #8]
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	9301      	str	r3, [sp, #4]
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	68b9      	ldr	r1, [r7, #8]
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 f80e 	bl	8006b42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b26:	69f8      	ldr	r0, [r7, #28]
 8006b28:	f000 f894 	bl	8006c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	e002      	b.n	8006b38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b38:	69bb      	ldr	r3, [r7, #24]
	}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3720      	adds	r7, #32
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b088      	sub	sp, #32
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	60f8      	str	r0, [r7, #12]
 8006b4a:	60b9      	str	r1, [r7, #8]
 8006b4c:	607a      	str	r2, [r7, #4]
 8006b4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006b5a:	440b      	add	r3, r1
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	f023 0307 	bic.w	r3, r3, #7
 8006b68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	f003 0307 	and.w	r3, r3, #7
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <prvInitialiseNewTask+0x4a>
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	b672      	cpsid	i
 8006b7a:	f383 8811 	msr	BASEPRI, r3
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f3bf 8f4f 	dsb	sy
 8006b86:	b662      	cpsie	i
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	e7fe      	b.n	8006b8a <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d01f      	beq.n	8006bd2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b92:	2300      	movs	r3, #0
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	e012      	b.n	8006bbe <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	7819      	ldrb	r1, [r3, #0]
 8006ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	3334      	adds	r3, #52	; 0x34
 8006ba8:	460a      	mov	r2, r1
 8006baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d006      	beq.n	8006bc6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	2b0f      	cmp	r3, #15
 8006bc2:	d9e9      	bls.n	8006b98 <prvInitialiseNewTask+0x56>
 8006bc4:	e000      	b.n	8006bc8 <prvInitialiseNewTask+0x86>
			{
				break;
 8006bc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd0:	e003      	b.n	8006bda <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bdc:	2b06      	cmp	r3, #6
 8006bde:	d901      	bls.n	8006be4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006be0:	2306      	movs	r3, #6
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7fe fe79 	bl	80058f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	3318      	adds	r3, #24
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fe fe74 	bl	80058f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	f1c3 0207 	rsb	r2, r3, #7
 8006c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	2200      	movs	r2, #0
 8006c24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	68f9      	ldr	r1, [r7, #12]
 8006c32:	69b8      	ldr	r0, [r7, #24]
 8006c34:	f000 ff14 	bl	8007a60 <pxPortInitialiseStack>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4a:	bf00      	nop
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c5c:	f001 f80c 	bl	8007c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c60:	4b2a      	ldr	r3, [pc, #168]	; (8006d0c <prvAddNewTaskToReadyList+0xb8>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3301      	adds	r3, #1
 8006c66:	4a29      	ldr	r2, [pc, #164]	; (8006d0c <prvAddNewTaskToReadyList+0xb8>)
 8006c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c6a:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <prvAddNewTaskToReadyList+0xbc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c72:	4a27      	ldr	r2, [pc, #156]	; (8006d10 <prvAddNewTaskToReadyList+0xbc>)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c78:	4b24      	ldr	r3, [pc, #144]	; (8006d0c <prvAddNewTaskToReadyList+0xb8>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d110      	bne.n	8006ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c80:	f000 fbf6 	bl	8007470 <prvInitialiseTaskLists>
 8006c84:	e00d      	b.n	8006ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c86:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <prvAddNewTaskToReadyList+0xc0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c8e:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <prvAddNewTaskToReadyList+0xbc>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d802      	bhi.n	8006ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c9c:	4a1c      	ldr	r2, [pc, #112]	; (8006d10 <prvAddNewTaskToReadyList+0xbc>)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ca2:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <prvAddNewTaskToReadyList+0xc4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	4a1b      	ldr	r2, [pc, #108]	; (8006d18 <prvAddNewTaskToReadyList+0xc4>)
 8006caa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	409a      	lsls	r2, r3
 8006cb4:	4b19      	ldr	r3, [pc, #100]	; (8006d1c <prvAddNewTaskToReadyList+0xc8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <prvAddNewTaskToReadyList+0xc8>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <prvAddNewTaskToReadyList+0xcc>)
 8006ccc:	441a      	add	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	f7fe fe19 	bl	800590c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cda:	f000 ffff 	bl	8007cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cde:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <prvAddNewTaskToReadyList+0xc0>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00e      	beq.n	8006d04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ce6:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <prvAddNewTaskToReadyList+0xbc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d207      	bcs.n	8006d04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <prvAddNewTaskToReadyList+0xd0>)
 8006cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20000f6c 	.word	0x20000f6c
 8006d10:	20000e6c 	.word	0x20000e6c
 8006d14:	20000f78 	.word	0x20000f78
 8006d18:	20000f88 	.word	0x20000f88
 8006d1c:	20000f74 	.word	0x20000f74
 8006d20:	20000e70 	.word	0x20000e70
 8006d24:	e000ed04 	.word	0xe000ed04

08006d28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d018      	beq.n	8006d6c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d3a:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <vTaskDelay+0x64>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00b      	beq.n	8006d5a <vTaskDelay+0x32>
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	b672      	cpsid	i
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	b662      	cpsie	i
 8006d56:	60bb      	str	r3, [r7, #8]
 8006d58:	e7fe      	b.n	8006d58 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006d5a:	f000 f87d 	bl	8006e58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fe17 	bl	8007994 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d66:	f000 f885 	bl	8006e74 <xTaskResumeAll>
 8006d6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <vTaskDelay+0x68>)
 8006d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000f94 	.word	0x20000f94
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006da2:	463a      	mov	r2, r7
 8006da4:	1d39      	adds	r1, r7, #4
 8006da6:	f107 0308 	add.w	r3, r7, #8
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fa f90c 	bl	8000fc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	9202      	str	r2, [sp, #8]
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	460a      	mov	r2, r1
 8006dc2:	491f      	ldr	r1, [pc, #124]	; (8006e40 <vTaskStartScheduler+0xac>)
 8006dc4:	481f      	ldr	r0, [pc, #124]	; (8006e44 <vTaskStartScheduler+0xb0>)
 8006dc6:	f7ff fe17 	bl	80069f8 <xTaskCreateStatic>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b1e      	ldr	r3, [pc, #120]	; (8006e48 <vTaskStartScheduler+0xb4>)
 8006dce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dd0:	4b1d      	ldr	r3, [pc, #116]	; (8006e48 <vTaskStartScheduler+0xb4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e001      	b.n	8006de2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d117      	bne.n	8006e18 <vTaskStartScheduler+0x84>
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	b672      	cpsid	i
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	b662      	cpsie	i
 8006dfc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <vTaskStartScheduler+0xb8>)
 8006e00:	f04f 32ff 	mov.w	r2, #4294967295
 8006e04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e06:	4b12      	ldr	r3, [pc, #72]	; (8006e50 <vTaskStartScheduler+0xbc>)
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e0c:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <vTaskStartScheduler+0xc0>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e12:	f000 feb5 	bl	8007b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e16:	e00f      	b.n	8006e38 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1e:	d10b      	bne.n	8006e38 <vTaskStartScheduler+0xa4>
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	b672      	cpsid	i
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	b662      	cpsie	i
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e7fe      	b.n	8006e36 <vTaskStartScheduler+0xa2>
}
 8006e38:	bf00      	nop
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	0801e1b4 	.word	0x0801e1b4
 8006e44:	08007441 	.word	0x08007441
 8006e48:	20000f90 	.word	0x20000f90
 8006e4c:	20000f8c 	.word	0x20000f8c
 8006e50:	20000f78 	.word	0x20000f78
 8006e54:	20000f70 	.word	0x20000f70

08006e58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e5c:	4b04      	ldr	r3, [pc, #16]	; (8006e70 <vTaskSuspendAll+0x18>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	4a03      	ldr	r2, [pc, #12]	; (8006e70 <vTaskSuspendAll+0x18>)
 8006e64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e66:	bf00      	nop
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr
 8006e70:	20000f94 	.word	0x20000f94

08006e74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e82:	4b42      	ldr	r3, [pc, #264]	; (8006f8c <xTaskResumeAll+0x118>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10b      	bne.n	8006ea2 <xTaskResumeAll+0x2e>
 8006e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8e:	b672      	cpsid	i
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	b662      	cpsie	i
 8006e9e:	603b      	str	r3, [r7, #0]
 8006ea0:	e7fe      	b.n	8006ea0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ea2:	f000 fee9 	bl	8007c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ea6:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <xTaskResumeAll+0x118>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	4a37      	ldr	r2, [pc, #220]	; (8006f8c <xTaskResumeAll+0x118>)
 8006eae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006eb0:	4b36      	ldr	r3, [pc, #216]	; (8006f8c <xTaskResumeAll+0x118>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d161      	bne.n	8006f7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eb8:	4b35      	ldr	r3, [pc, #212]	; (8006f90 <xTaskResumeAll+0x11c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d05d      	beq.n	8006f7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ec0:	e02e      	b.n	8006f20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ec2:	4b34      	ldr	r3, [pc, #208]	; (8006f94 <xTaskResumeAll+0x120>)
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3318      	adds	r3, #24
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe fd79 	bl	80059c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fd74 	bl	80059c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	409a      	lsls	r2, r3
 8006ee6:	4b2c      	ldr	r3, [pc, #176]	; (8006f98 <xTaskResumeAll+0x124>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	4a2a      	ldr	r2, [pc, #168]	; (8006f98 <xTaskResumeAll+0x124>)
 8006eee:	6013      	str	r3, [r2, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <xTaskResumeAll+0x128>)
 8006efe:	441a      	add	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3304      	adds	r3, #4
 8006f04:	4619      	mov	r1, r3
 8006f06:	4610      	mov	r0, r2
 8006f08:	f7fe fd00 	bl	800590c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <xTaskResumeAll+0x12c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d302      	bcc.n	8006f20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <xTaskResumeAll+0x130>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f20:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <xTaskResumeAll+0x120>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d1cc      	bne.n	8006ec2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f2e:	f000 fb3b 	bl	80075a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f32:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <xTaskResumeAll+0x134>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d010      	beq.n	8006f60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f3e:	f000 f859 	bl	8006ff4 <xTaskIncrementTick>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f48:	4b16      	ldr	r3, [pc, #88]	; (8006fa4 <xTaskResumeAll+0x130>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f1      	bne.n	8006f3e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006f5a:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <xTaskResumeAll+0x134>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f60:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <xTaskResumeAll+0x130>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d009      	beq.n	8006f7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f6c:	4b0f      	ldr	r3, [pc, #60]	; (8006fac <xTaskResumeAll+0x138>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f7c:	f000 feae 	bl	8007cdc <vPortExitCritical>

	return xAlreadyYielded;
 8006f80:	68bb      	ldr	r3, [r7, #8]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3710      	adds	r7, #16
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	20000f94 	.word	0x20000f94
 8006f90:	20000f6c 	.word	0x20000f6c
 8006f94:	20000f2c 	.word	0x20000f2c
 8006f98:	20000f74 	.word	0x20000f74
 8006f9c:	20000e70 	.word	0x20000e70
 8006fa0:	20000e6c 	.word	0x20000e6c
 8006fa4:	20000f80 	.word	0x20000f80
 8006fa8:	20000f7c 	.word	0x20000f7c
 8006fac:	e000ed04 	.word	0xe000ed04

08006fb0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <xTaskGetTickCount+0x1c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fbc:	687b      	ldr	r3, [r7, #4]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000f70 	.word	0x20000f70

08006fd0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fd6:	f000 ff2f 	bl	8007e38 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fda:	2300      	movs	r3, #0
 8006fdc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fde:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <xTaskGetTickCountFromISR+0x20>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fe4:	683b      	ldr	r3, [r7, #0]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	20000f70 	.word	0x20000f70

08006ff4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ffe:	4b4f      	ldr	r3, [pc, #316]	; (800713c <xTaskIncrementTick+0x148>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	f040 8089 	bne.w	800711a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007008:	4b4d      	ldr	r3, [pc, #308]	; (8007140 <xTaskIncrementTick+0x14c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3301      	adds	r3, #1
 800700e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007010:	4a4b      	ldr	r2, [pc, #300]	; (8007140 <xTaskIncrementTick+0x14c>)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d121      	bne.n	8007060 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800701c:	4b49      	ldr	r3, [pc, #292]	; (8007144 <xTaskIncrementTick+0x150>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00b      	beq.n	800703e <xTaskIncrementTick+0x4a>
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	b672      	cpsid	i
 800702c:	f383 8811 	msr	BASEPRI, r3
 8007030:	f3bf 8f6f 	isb	sy
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	b662      	cpsie	i
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	e7fe      	b.n	800703c <xTaskIncrementTick+0x48>
 800703e:	4b41      	ldr	r3, [pc, #260]	; (8007144 <xTaskIncrementTick+0x150>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	4b40      	ldr	r3, [pc, #256]	; (8007148 <xTaskIncrementTick+0x154>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a3e      	ldr	r2, [pc, #248]	; (8007144 <xTaskIncrementTick+0x150>)
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	4a3e      	ldr	r2, [pc, #248]	; (8007148 <xTaskIncrementTick+0x154>)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6013      	str	r3, [r2, #0]
 8007052:	4b3e      	ldr	r3, [pc, #248]	; (800714c <xTaskIncrementTick+0x158>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	3301      	adds	r3, #1
 8007058:	4a3c      	ldr	r2, [pc, #240]	; (800714c <xTaskIncrementTick+0x158>)
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	f000 faa4 	bl	80075a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007060:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <xTaskIncrementTick+0x15c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	429a      	cmp	r2, r3
 8007068:	d348      	bcc.n	80070fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800706a:	4b36      	ldr	r3, [pc, #216]	; (8007144 <xTaskIncrementTick+0x150>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007074:	4b36      	ldr	r3, [pc, #216]	; (8007150 <xTaskIncrementTick+0x15c>)
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	601a      	str	r2, [r3, #0]
					break;
 800707c:	e03e      	b.n	80070fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <xTaskIncrementTick+0x150>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d203      	bcs.n	800709e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007096:	4a2e      	ldr	r2, [pc, #184]	; (8007150 <xTaskIncrementTick+0x15c>)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800709c:	e02e      	b.n	80070fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fe fc8f 	bl	80059c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	3318      	adds	r3, #24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fc86 	bl	80059c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	2201      	movs	r2, #1
 80070c0:	409a      	lsls	r2, r3
 80070c2:	4b24      	ldr	r3, [pc, #144]	; (8007154 <xTaskIncrementTick+0x160>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	4a22      	ldr	r2, [pc, #136]	; (8007154 <xTaskIncrementTick+0x160>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <xTaskIncrementTick+0x164>)
 80070da:	441a      	add	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7fe fc12 	bl	800590c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ec:	4b1b      	ldr	r3, [pc, #108]	; (800715c <xTaskIncrementTick+0x168>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d3b9      	bcc.n	800706a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80070f6:	2301      	movs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070fa:	e7b6      	b.n	800706a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070fc:	4b17      	ldr	r3, [pc, #92]	; (800715c <xTaskIncrementTick+0x168>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	4915      	ldr	r1, [pc, #84]	; (8007158 <xTaskIncrementTick+0x164>)
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d907      	bls.n	8007124 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e004      	b.n	8007124 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800711a:	4b11      	ldr	r3, [pc, #68]	; (8007160 <xTaskIncrementTick+0x16c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3301      	adds	r3, #1
 8007120:	4a0f      	ldr	r2, [pc, #60]	; (8007160 <xTaskIncrementTick+0x16c>)
 8007122:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007124:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <xTaskIncrementTick+0x170>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007130:	697b      	ldr	r3, [r7, #20]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	20000f94 	.word	0x20000f94
 8007140:	20000f70 	.word	0x20000f70
 8007144:	20000f24 	.word	0x20000f24
 8007148:	20000f28 	.word	0x20000f28
 800714c:	20000f84 	.word	0x20000f84
 8007150:	20000f8c 	.word	0x20000f8c
 8007154:	20000f74 	.word	0x20000f74
 8007158:	20000e70 	.word	0x20000e70
 800715c:	20000e6c 	.word	0x20000e6c
 8007160:	20000f7c 	.word	0x20000f7c
 8007164:	20000f80 	.word	0x20000f80

08007168 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800716e:	4b27      	ldr	r3, [pc, #156]	; (800720c <vTaskSwitchContext+0xa4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d003      	beq.n	800717e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007176:	4b26      	ldr	r3, [pc, #152]	; (8007210 <vTaskSwitchContext+0xa8>)
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800717c:	e040      	b.n	8007200 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800717e:	4b24      	ldr	r3, [pc, #144]	; (8007210 <vTaskSwitchContext+0xa8>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007184:	4b23      	ldr	r3, [pc, #140]	; (8007214 <vTaskSwitchContext+0xac>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	fab3 f383 	clz	r3, r3
 8007190:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007192:	7afb      	ldrb	r3, [r7, #11]
 8007194:	f1c3 031f 	rsb	r3, r3, #31
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	491f      	ldr	r1, [pc, #124]	; (8007218 <vTaskSwitchContext+0xb0>)
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10b      	bne.n	80071c6 <vTaskSwitchContext+0x5e>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	b672      	cpsid	i
 80071b4:	f383 8811 	msr	BASEPRI, r3
 80071b8:	f3bf 8f6f 	isb	sy
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	b662      	cpsie	i
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	e7fe      	b.n	80071c4 <vTaskSwitchContext+0x5c>
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4a11      	ldr	r2, [pc, #68]	; (8007218 <vTaskSwitchContext+0xb0>)
 80071d2:	4413      	add	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	605a      	str	r2, [r3, #4]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	3308      	adds	r3, #8
 80071e8:	429a      	cmp	r2, r3
 80071ea:	d104      	bne.n	80071f6 <vTaskSwitchContext+0x8e>
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	605a      	str	r2, [r3, #4]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4a07      	ldr	r2, [pc, #28]	; (800721c <vTaskSwitchContext+0xb4>)
 80071fe:	6013      	str	r3, [r2, #0]
}
 8007200:	bf00      	nop
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	20000f94 	.word	0x20000f94
 8007210:	20000f80 	.word	0x20000f80
 8007214:	20000f74 	.word	0x20000f74
 8007218:	20000e70 	.word	0x20000e70
 800721c:	20000e6c 	.word	0x20000e6c

08007220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10b      	bne.n	8007248 <vTaskPlaceOnEventList+0x28>
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	b672      	cpsid	i
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	b662      	cpsie	i
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e7fe      	b.n	8007246 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <vTaskPlaceOnEventList+0x48>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3318      	adds	r3, #24
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7fe fb7f 	bl	8005954 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007256:	2101      	movs	r1, #1
 8007258:	6838      	ldr	r0, [r7, #0]
 800725a:	f000 fb9b 	bl	8007994 <prvAddCurrentTaskToDelayedList>
}
 800725e:	bf00      	nop
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000e6c 	.word	0x20000e6c

0800726c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10b      	bne.n	800729a <xTaskRemoveFromEventList+0x2e>
 8007282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007286:	b672      	cpsid	i
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	b662      	cpsie	i
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	e7fe      	b.n	8007298 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	3318      	adds	r3, #24
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe fb91 	bl	80059c6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a4:	4b1d      	ldr	r3, [pc, #116]	; (800731c <xTaskRemoveFromEventList+0xb0>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d11c      	bne.n	80072e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	3304      	adds	r3, #4
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fb88 	bl	80059c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	2201      	movs	r2, #1
 80072bc:	409a      	lsls	r2, r3
 80072be:	4b18      	ldr	r3, [pc, #96]	; (8007320 <xTaskRemoveFromEventList+0xb4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <xTaskRemoveFromEventList+0xb4>)
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4a13      	ldr	r2, [pc, #76]	; (8007324 <xTaskRemoveFromEventList+0xb8>)
 80072d6:	441a      	add	r2, r3
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	3304      	adds	r3, #4
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f7fe fb14 	bl	800590c <vListInsertEnd>
 80072e4:	e005      	b.n	80072f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3318      	adds	r3, #24
 80072ea:	4619      	mov	r1, r3
 80072ec:	480e      	ldr	r0, [pc, #56]	; (8007328 <xTaskRemoveFromEventList+0xbc>)
 80072ee:	f7fe fb0d 	bl	800590c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072f6:	4b0d      	ldr	r3, [pc, #52]	; (800732c <xTaskRemoveFromEventList+0xc0>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d905      	bls.n	800730c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007300:	2301      	movs	r3, #1
 8007302:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007304:	4b0a      	ldr	r3, [pc, #40]	; (8007330 <xTaskRemoveFromEventList+0xc4>)
 8007306:	2201      	movs	r2, #1
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	e001      	b.n	8007310 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007310:	697b      	ldr	r3, [r7, #20]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	20000f94 	.word	0x20000f94
 8007320:	20000f74 	.word	0x20000f74
 8007324:	20000e70 	.word	0x20000e70
 8007328:	20000f2c 	.word	0x20000f2c
 800732c:	20000e6c 	.word	0x20000e6c
 8007330:	20000f80 	.word	0x20000f80

08007334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <vTaskInternalSetTimeOutState+0x24>)
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <vTaskInternalSetTimeOutState+0x28>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	605a      	str	r2, [r3, #4]
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	20000f84 	.word	0x20000f84
 800735c:	20000f70 	.word	0x20000f70

08007360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10b      	bne.n	8007388 <xTaskCheckForTimeOut+0x28>
 8007370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007374:	b672      	cpsid	i
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	b662      	cpsie	i
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	e7fe      	b.n	8007386 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10b      	bne.n	80073a6 <xTaskCheckForTimeOut+0x46>
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	b672      	cpsid	i
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	b662      	cpsie	i
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e7fe      	b.n	80073a4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80073a6:	f000 fc67 	bl	8007c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073aa:	4b1d      	ldr	r3, [pc, #116]	; (8007420 <xTaskCheckForTimeOut+0xc0>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d102      	bne.n	80073ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80073c4:	2300      	movs	r3, #0
 80073c6:	61fb      	str	r3, [r7, #28]
 80073c8:	e023      	b.n	8007412 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <xTaskCheckForTimeOut+0xc4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d007      	beq.n	80073e6 <xTaskCheckForTimeOut+0x86>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d302      	bcc.n	80073e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073e0:	2301      	movs	r3, #1
 80073e2:	61fb      	str	r3, [r7, #28]
 80073e4:	e015      	b.n	8007412 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d20b      	bcs.n	8007408 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	1ad2      	subs	r2, r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff ff99 	bl	8007334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
 8007406:	e004      	b.n	8007412 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800740e:	2301      	movs	r3, #1
 8007410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007412:	f000 fc63 	bl	8007cdc <vPortExitCritical>

	return xReturn;
 8007416:	69fb      	ldr	r3, [r7, #28]
}
 8007418:	4618      	mov	r0, r3
 800741a:	3720      	adds	r7, #32
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000f70 	.word	0x20000f70
 8007424:	20000f84 	.word	0x20000f84

08007428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800742c:	4b03      	ldr	r3, [pc, #12]	; (800743c <vTaskMissedYield+0x14>)
 800742e:	2201      	movs	r2, #1
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000f80 	.word	0x20000f80

08007440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007448:	f000 f852 	bl	80074f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800744c:	4b06      	ldr	r3, [pc, #24]	; (8007468 <prvIdleTask+0x28>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d9f9      	bls.n	8007448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <prvIdleTask+0x2c>)
 8007456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007464:	e7f0      	b.n	8007448 <prvIdleTask+0x8>
 8007466:	bf00      	nop
 8007468:	20000e70 	.word	0x20000e70
 800746c:	e000ed04 	.word	0xe000ed04

08007470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007476:	2300      	movs	r3, #0
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	e00c      	b.n	8007496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	4613      	mov	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4a12      	ldr	r2, [pc, #72]	; (80074d0 <prvInitialiseTaskLists+0x60>)
 8007488:	4413      	add	r3, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f7fe fa11 	bl	80058b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3301      	adds	r3, #1
 8007494:	607b      	str	r3, [r7, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b06      	cmp	r3, #6
 800749a:	d9ef      	bls.n	800747c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800749c:	480d      	ldr	r0, [pc, #52]	; (80074d4 <prvInitialiseTaskLists+0x64>)
 800749e:	f7fe fa08 	bl	80058b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074a2:	480d      	ldr	r0, [pc, #52]	; (80074d8 <prvInitialiseTaskLists+0x68>)
 80074a4:	f7fe fa05 	bl	80058b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074a8:	480c      	ldr	r0, [pc, #48]	; (80074dc <prvInitialiseTaskLists+0x6c>)
 80074aa:	f7fe fa02 	bl	80058b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074ae:	480c      	ldr	r0, [pc, #48]	; (80074e0 <prvInitialiseTaskLists+0x70>)
 80074b0:	f7fe f9ff 	bl	80058b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074b4:	480b      	ldr	r0, [pc, #44]	; (80074e4 <prvInitialiseTaskLists+0x74>)
 80074b6:	f7fe f9fc 	bl	80058b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <prvInitialiseTaskLists+0x78>)
 80074bc:	4a05      	ldr	r2, [pc, #20]	; (80074d4 <prvInitialiseTaskLists+0x64>)
 80074be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80074c0:	4b0a      	ldr	r3, [pc, #40]	; (80074ec <prvInitialiseTaskLists+0x7c>)
 80074c2:	4a05      	ldr	r2, [pc, #20]	; (80074d8 <prvInitialiseTaskLists+0x68>)
 80074c4:	601a      	str	r2, [r3, #0]
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000e70 	.word	0x20000e70
 80074d4:	20000efc 	.word	0x20000efc
 80074d8:	20000f10 	.word	0x20000f10
 80074dc:	20000f2c 	.word	0x20000f2c
 80074e0:	20000f40 	.word	0x20000f40
 80074e4:	20000f58 	.word	0x20000f58
 80074e8:	20000f24 	.word	0x20000f24
 80074ec:	20000f28 	.word	0x20000f28

080074f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074f6:	e019      	b.n	800752c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074f8:	f000 fbbe 	bl	8007c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fc:	4b0f      	ldr	r3, [pc, #60]	; (800753c <prvCheckTasksWaitingTermination+0x4c>)
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3304      	adds	r3, #4
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fa5c 	bl	80059c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800750e:	4b0c      	ldr	r3, [pc, #48]	; (8007540 <prvCheckTasksWaitingTermination+0x50>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3b01      	subs	r3, #1
 8007514:	4a0a      	ldr	r2, [pc, #40]	; (8007540 <prvCheckTasksWaitingTermination+0x50>)
 8007516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007518:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <prvCheckTasksWaitingTermination+0x54>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3b01      	subs	r3, #1
 800751e:	4a09      	ldr	r2, [pc, #36]	; (8007544 <prvCheckTasksWaitingTermination+0x54>)
 8007520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007522:	f000 fbdb 	bl	8007cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f80e 	bl	8007548 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800752c:	4b05      	ldr	r3, [pc, #20]	; (8007544 <prvCheckTasksWaitingTermination+0x54>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d1e1      	bne.n	80074f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20000f40 	.word	0x20000f40
 8007540:	20000f6c 	.word	0x20000f6c
 8007544:	20000f54 	.word	0x20000f54

08007548 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007556:	2b00      	cmp	r3, #0
 8007558:	d108      	bne.n	800756c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fd74 	bl	800804c <vPortFree>
				vPortFree( pxTCB );
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fd71 	bl	800804c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800756a:	e019      	b.n	80075a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007572:	2b01      	cmp	r3, #1
 8007574:	d103      	bne.n	800757e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fd68 	bl	800804c <vPortFree>
	}
 800757c:	e010      	b.n	80075a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007584:	2b02      	cmp	r3, #2
 8007586:	d00b      	beq.n	80075a0 <prvDeleteTCB+0x58>
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	b672      	cpsid	i
 800758e:	f383 8811 	msr	BASEPRI, r3
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	f3bf 8f4f 	dsb	sy
 800759a:	b662      	cpsie	i
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	e7fe      	b.n	800759e <prvDeleteTCB+0x56>
	}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <prvResetNextTaskUnblockTime+0x38>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80075b8:	4b0a      	ldr	r3, [pc, #40]	; (80075e4 <prvResetNextTaskUnblockTime+0x3c>)
 80075ba:	f04f 32ff 	mov.w	r2, #4294967295
 80075be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80075c0:	e008      	b.n	80075d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c2:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <prvResetNextTaskUnblockTime+0x38>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	4a04      	ldr	r2, [pc, #16]	; (80075e4 <prvResetNextTaskUnblockTime+0x3c>)
 80075d2:	6013      	str	r3, [r2, #0]
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr
 80075e0:	20000f24 	.word	0x20000f24
 80075e4:	20000f8c 	.word	0x20000f8c

080075e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ee:	4b0b      	ldr	r3, [pc, #44]	; (800761c <xTaskGetSchedulerState+0x34>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075f6:	2301      	movs	r3, #1
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	e008      	b.n	800760e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075fc:	4b08      	ldr	r3, [pc, #32]	; (8007620 <xTaskGetSchedulerState+0x38>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d102      	bne.n	800760a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007604:	2302      	movs	r3, #2
 8007606:	607b      	str	r3, [r7, #4]
 8007608:	e001      	b.n	800760e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800760a:	2300      	movs	r3, #0
 800760c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800760e:	687b      	ldr	r3, [r7, #4]
	}
 8007610:	4618      	mov	r0, r3
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	20000f78 	.word	0x20000f78
 8007620:	20000f94 	.word	0x20000f94

08007624 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d069      	beq.n	800770e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800763e:	4b36      	ldr	r3, [pc, #216]	; (8007718 <xTaskPriorityInherit+0xf4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	429a      	cmp	r2, r3
 8007646:	d259      	bcs.n	80076fc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	db06      	blt.n	800765e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	4b31      	ldr	r3, [pc, #196]	; (8007718 <xTaskPriorityInherit+0xf4>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	f1c3 0207 	rsb	r2, r3, #7
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6959      	ldr	r1, [r3, #20]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4a2b      	ldr	r2, [pc, #172]	; (800771c <xTaskPriorityInherit+0xf8>)
 8007670:	4413      	add	r3, r2
 8007672:	4299      	cmp	r1, r3
 8007674:	d13a      	bne.n	80076ec <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	3304      	adds	r3, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe f9a3 	bl	80059c6 <uxListRemove>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d115      	bne.n	80076b2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768a:	4924      	ldr	r1, [pc, #144]	; (800771c <xTaskPriorityInherit+0xf8>)
 800768c:	4613      	mov	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	4413      	add	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	440b      	add	r3, r1
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10a      	bne.n	80076b2 <xTaskPriorityInherit+0x8e>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	2201      	movs	r2, #1
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43da      	mvns	r2, r3
 80076a8:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <xTaskPriorityInherit+0xfc>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <xTaskPriorityInherit+0xfc>)
 80076b0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076b2:	4b19      	ldr	r3, [pc, #100]	; (8007718 <xTaskPriorityInherit+0xf4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	2201      	movs	r2, #1
 80076c2:	409a      	lsls	r2, r3
 80076c4:	4b16      	ldr	r3, [pc, #88]	; (8007720 <xTaskPriorityInherit+0xfc>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	4a15      	ldr	r2, [pc, #84]	; (8007720 <xTaskPriorityInherit+0xfc>)
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4a10      	ldr	r2, [pc, #64]	; (800771c <xTaskPriorityInherit+0xf8>)
 80076dc:	441a      	add	r2, r3
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	3304      	adds	r3, #4
 80076e2:	4619      	mov	r1, r3
 80076e4:	4610      	mov	r0, r2
 80076e6:	f7fe f911 	bl	800590c <vListInsertEnd>
 80076ea:	e004      	b.n	80076f6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <xTaskPriorityInherit+0xf4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80076f6:	2301      	movs	r3, #1
 80076f8:	60fb      	str	r3, [r7, #12]
 80076fa:	e008      	b.n	800770e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007700:	4b05      	ldr	r3, [pc, #20]	; (8007718 <xTaskPriorityInherit+0xf4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007706:	429a      	cmp	r2, r3
 8007708:	d201      	bcs.n	800770e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800770e:	68fb      	ldr	r3, [r7, #12]
	}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20000e6c 	.word	0x20000e6c
 800771c:	20000e70 	.word	0x20000e70
 8007720:	20000f74 	.word	0x20000f74

08007724 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007724:	b580      	push	{r7, lr}
 8007726:	b086      	sub	sp, #24
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007730:	2300      	movs	r3, #0
 8007732:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d070      	beq.n	800781c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800773a:	4b3b      	ldr	r3, [pc, #236]	; (8007828 <xTaskPriorityDisinherit+0x104>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d00b      	beq.n	800775c <xTaskPriorityDisinherit+0x38>
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	b672      	cpsid	i
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	b662      	cpsie	i
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	e7fe      	b.n	800775a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10b      	bne.n	800777c <xTaskPriorityDisinherit+0x58>
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	b672      	cpsid	i
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	b662      	cpsie	i
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	e7fe      	b.n	800777a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007780:	1e5a      	subs	r2, r3, #1
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800778e:	429a      	cmp	r2, r3
 8007790:	d044      	beq.n	800781c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007796:	2b00      	cmp	r3, #0
 8007798:	d140      	bne.n	800781c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3304      	adds	r3, #4
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe f911 	bl	80059c6 <uxListRemove>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d115      	bne.n	80077d6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ae:	491f      	ldr	r1, [pc, #124]	; (800782c <xTaskPriorityDisinherit+0x108>)
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	440b      	add	r3, r1
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10a      	bne.n	80077d6 <xTaskPriorityDisinherit+0xb2>
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	2201      	movs	r2, #1
 80077c6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ca:	43da      	mvns	r2, r3
 80077cc:	4b18      	ldr	r3, [pc, #96]	; (8007830 <xTaskPriorityDisinherit+0x10c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4013      	ands	r3, r2
 80077d2:	4a17      	ldr	r2, [pc, #92]	; (8007830 <xTaskPriorityDisinherit+0x10c>)
 80077d4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	f1c3 0207 	rsb	r2, r3, #7
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ee:	2201      	movs	r2, #1
 80077f0:	409a      	lsls	r2, r3
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <xTaskPriorityDisinherit+0x10c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	4a0d      	ldr	r2, [pc, #52]	; (8007830 <xTaskPriorityDisinherit+0x10c>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4a08      	ldr	r2, [pc, #32]	; (800782c <xTaskPriorityDisinherit+0x108>)
 800780a:	441a      	add	r2, r3
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	3304      	adds	r3, #4
 8007810:	4619      	mov	r1, r3
 8007812:	4610      	mov	r0, r2
 8007814:	f7fe f87a 	bl	800590c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007818:	2301      	movs	r3, #1
 800781a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800781c:	697b      	ldr	r3, [r7, #20]
	}
 800781e:	4618      	mov	r0, r3
 8007820:	3718      	adds	r7, #24
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000e6c 	.word	0x20000e6c
 800782c:	20000e70 	.word	0x20000e70
 8007830:	20000f74 	.word	0x20000f74

08007834 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007842:	2301      	movs	r3, #1
 8007844:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 8085 	beq.w	8007958 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	60fb      	str	r3, [r7, #12]
 800786c:	e7fe      	b.n	800786c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	429a      	cmp	r2, r3
 8007876:	d902      	bls.n	800787e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	e002      	b.n	8007884 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007882:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	69fa      	ldr	r2, [r7, #28]
 800788a:	429a      	cmp	r2, r3
 800788c:	d064      	beq.n	8007958 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	429a      	cmp	r2, r3
 8007896:	d15f      	bne.n	8007958 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007898:	4b31      	ldr	r3, [pc, #196]	; (8007960 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d10b      	bne.n	80078ba <vTaskPriorityDisinheritAfterTimeout+0x86>
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	b672      	cpsid	i
 80078a8:	f383 8811 	msr	BASEPRI, r3
 80078ac:	f3bf 8f6f 	isb	sy
 80078b0:	f3bf 8f4f 	dsb	sy
 80078b4:	b662      	cpsie	i
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	e7fe      	b.n	80078b8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078be:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	db04      	blt.n	80078d8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f1c3 0207 	rsb	r2, r3, #7
 80078d4:	69bb      	ldr	r3, [r7, #24]
 80078d6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	6959      	ldr	r1, [r3, #20]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4613      	mov	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	4413      	add	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4a1f      	ldr	r2, [pc, #124]	; (8007964 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80078e8:	4413      	add	r3, r2
 80078ea:	4299      	cmp	r1, r3
 80078ec:	d134      	bne.n	8007958 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	3304      	adds	r3, #4
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fe f867 	bl	80059c6 <uxListRemove>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d115      	bne.n	800792a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4918      	ldr	r1, [pc, #96]	; (8007964 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	2201      	movs	r2, #1
 800791a:	fa02 f303 	lsl.w	r3, r2, r3
 800791e:	43da      	mvns	r2, r3
 8007920:	4b11      	ldr	r3, [pc, #68]	; (8007968 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4013      	ands	r3, r2
 8007926:	4a10      	ldr	r2, [pc, #64]	; (8007968 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007928:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	2201      	movs	r2, #1
 8007930:	409a      	lsls	r2, r3
 8007932:	4b0d      	ldr	r3, [pc, #52]	; (8007968 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4313      	orrs	r3, r2
 8007938:	4a0b      	ldr	r2, [pc, #44]	; (8007968 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800793a:	6013      	str	r3, [r2, #0]
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4613      	mov	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	4413      	add	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4a06      	ldr	r2, [pc, #24]	; (8007964 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800794a:	441a      	add	r2, r3
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fd ffda 	bl	800590c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007958:	bf00      	nop
 800795a:	3720      	adds	r7, #32
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	20000e6c 	.word	0x20000e6c
 8007964:	20000e70 	.word	0x20000e70
 8007968:	20000f74 	.word	0x20000f74

0800796c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <pvTaskIncrementMutexHeldCount+0x24>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <pvTaskIncrementMutexHeldCount+0x24>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800797e:	3201      	adds	r2, #1
 8007980:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007982:	4b03      	ldr	r3, [pc, #12]	; (8007990 <pvTaskIncrementMutexHeldCount+0x24>)
 8007984:	681b      	ldr	r3, [r3, #0]
	}
 8007986:	4618      	mov	r0, r3
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	20000e6c 	.word	0x20000e6c

08007994 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800799e:	4b29      	ldr	r3, [pc, #164]	; (8007a44 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a4:	4b28      	ldr	r3, [pc, #160]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3304      	adds	r3, #4
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fe f80b 	bl	80059c6 <uxListRemove>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10b      	bne.n	80079ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079bc:	2201      	movs	r2, #1
 80079be:	fa02 f303 	lsl.w	r3, r2, r3
 80079c2:	43da      	mvns	r2, r3
 80079c4:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <prvAddCurrentTaskToDelayedList+0xb8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4013      	ands	r3, r2
 80079ca:	4a20      	ldr	r2, [pc, #128]	; (8007a4c <prvAddCurrentTaskToDelayedList+0xb8>)
 80079cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d10a      	bne.n	80079ec <prvAddCurrentTaskToDelayedList+0x58>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079dc:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3304      	adds	r3, #4
 80079e2:	4619      	mov	r1, r3
 80079e4:	481a      	ldr	r0, [pc, #104]	; (8007a50 <prvAddCurrentTaskToDelayedList+0xbc>)
 80079e6:	f7fd ff91 	bl	800590c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079ea:	e026      	b.n	8007a3a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4413      	add	r3, r2
 80079f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079f4:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d209      	bcs.n	8007a18 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a04:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fd ff9f 	bl	8005954 <vListInsert>
}
 8007a16:	e010      	b.n	8007a3a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a18:	4b0f      	ldr	r3, [pc, #60]	; (8007a58 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3304      	adds	r3, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fd ff95 	bl	8005954 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	; (8007a5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d202      	bcs.n	8007a3a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a34:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	6013      	str	r3, [r2, #0]
}
 8007a3a:	bf00      	nop
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000f70 	.word	0x20000f70
 8007a48:	20000e6c 	.word	0x20000e6c
 8007a4c:	20000f74 	.word	0x20000f74
 8007a50:	20000f58 	.word	0x20000f58
 8007a54:	20000f28 	.word	0x20000f28
 8007a58:	20000f24 	.word	0x20000f24
 8007a5c:	20000f8c 	.word	0x20000f8c

08007a60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3b04      	subs	r3, #4
 8007a70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f023 0201 	bic.w	r2, r3, #1
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	3b04      	subs	r3, #4
 8007a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a90:	4a0c      	ldr	r2, [pc, #48]	; (8007ac4 <pxPortInitialiseStack+0x64>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3b14      	subs	r3, #20
 8007a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3b04      	subs	r3, #4
 8007aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f06f 0202 	mvn.w	r2, #2
 8007aae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3b20      	subs	r3, #32
 8007ab4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr
 8007ac4:	08007ac9 	.word	0x08007ac9

08007ac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ad2:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <prvTaskExitError+0x58>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ada:	d00b      	beq.n	8007af4 <prvTaskExitError+0x2c>
 8007adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae0:	b672      	cpsid	i
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	b662      	cpsie	i
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e7fe      	b.n	8007af2 <prvTaskExitError+0x2a>
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	b672      	cpsid	i
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	b662      	cpsie	i
 8007b08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b0a:	bf00      	nop
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0fc      	beq.n	8007b0c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b12:	bf00      	nop
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	2000000c 	.word	0x2000000c
	...

08007b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b30:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <pxCurrentTCBConst2>)
 8007b32:	6819      	ldr	r1, [r3, #0]
 8007b34:	6808      	ldr	r0, [r1, #0]
 8007b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3a:	f380 8809 	msr	PSP, r0
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f380 8811 	msr	BASEPRI, r0
 8007b4a:	4770      	bx	lr
 8007b4c:	f3af 8000 	nop.w

08007b50 <pxCurrentTCBConst2>:
 8007b50:	20000e6c 	.word	0x20000e6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b54:	bf00      	nop
 8007b56:	bf00      	nop

08007b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b58:	4808      	ldr	r0, [pc, #32]	; (8007b7c <prvPortStartFirstTask+0x24>)
 8007b5a:	6800      	ldr	r0, [r0, #0]
 8007b5c:	6800      	ldr	r0, [r0, #0]
 8007b5e:	f380 8808 	msr	MSP, r0
 8007b62:	f04f 0000 	mov.w	r0, #0
 8007b66:	f380 8814 	msr	CONTROL, r0
 8007b6a:	b662      	cpsie	i
 8007b6c:	b661      	cpsie	f
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	df00      	svc	0
 8007b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b7a:	bf00      	nop
 8007b7c:	e000ed08 	.word	0xe000ed08

08007b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007b86:	4b36      	ldr	r3, [pc, #216]	; (8007c60 <xPortStartScheduler+0xe0>)
 8007b88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	22ff      	movs	r2, #255	; 0xff
 8007b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ba0:	78fb      	ldrb	r3, [r7, #3]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	4b2e      	ldr	r3, [pc, #184]	; (8007c64 <xPortStartScheduler+0xe4>)
 8007bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bae:	4b2e      	ldr	r3, [pc, #184]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bb4:	e009      	b.n	8007bca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007bb6:	4b2c      	ldr	r3, [pc, #176]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bca:	78fb      	ldrb	r3, [r7, #3]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	2b80      	cmp	r3, #128	; 0x80
 8007bd4:	d0ef      	beq.n	8007bb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bd6:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1c3 0307 	rsb	r3, r3, #7
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d00b      	beq.n	8007bfa <xPortStartScheduler+0x7a>
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	b672      	cpsid	i
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	b662      	cpsie	i
 8007bf6:	60bb      	str	r3, [r7, #8]
 8007bf8:	e7fe      	b.n	8007bf8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007bfa:	4b1b      	ldr	r3, [pc, #108]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	021b      	lsls	r3, r3, #8
 8007c00:	4a19      	ldr	r2, [pc, #100]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007c02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c04:	4b18      	ldr	r3, [pc, #96]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c0c:	4a16      	ldr	r2, [pc, #88]	; (8007c68 <xPortStartScheduler+0xe8>)
 8007c0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c18:	4b14      	ldr	r3, [pc, #80]	; (8007c6c <xPortStartScheduler+0xec>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <xPortStartScheduler+0xec>)
 8007c1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c24:	4b11      	ldr	r3, [pc, #68]	; (8007c6c <xPortStartScheduler+0xec>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a10      	ldr	r2, [pc, #64]	; (8007c6c <xPortStartScheduler+0xec>)
 8007c2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c30:	f000 f8d4 	bl	8007ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c34:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <xPortStartScheduler+0xf0>)
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c3a:	f000 f8f3 	bl	8007e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c3e:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <xPortStartScheduler+0xf4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a0c      	ldr	r2, [pc, #48]	; (8007c74 <xPortStartScheduler+0xf4>)
 8007c44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c4a:	f7ff ff85 	bl	8007b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c4e:	f7ff fa8b 	bl	8007168 <vTaskSwitchContext>
	prvTaskExitError();
 8007c52:	f7ff ff39 	bl	8007ac8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	e000e400 	.word	0xe000e400
 8007c64:	20000f98 	.word	0x20000f98
 8007c68:	20000f9c 	.word	0x20000f9c
 8007c6c:	e000ed20 	.word	0xe000ed20
 8007c70:	2000000c 	.word	0x2000000c
 8007c74:	e000ef34 	.word	0xe000ef34

08007c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	b672      	cpsid	i
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	b662      	cpsie	i
 8007c92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007c94:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <vPortEnterCritical+0x5c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	4a0e      	ldr	r2, [pc, #56]	; (8007cd4 <vPortEnterCritical+0x5c>)
 8007c9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	; (8007cd4 <vPortEnterCritical+0x5c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d110      	bne.n	8007cc8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	; (8007cd8 <vPortEnterCritical+0x60>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00b      	beq.n	8007cc8 <vPortEnterCritical+0x50>
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	b672      	cpsid	i
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	b662      	cpsie	i
 8007cc4:	603b      	str	r3, [r7, #0]
 8007cc6:	e7fe      	b.n	8007cc6 <vPortEnterCritical+0x4e>
	}
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	2000000c 	.word	0x2000000c
 8007cd8:	e000ed04 	.word	0xe000ed04

08007cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <vPortExitCritical+0x50>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <vPortExitCritical+0x26>
 8007cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cee:	b672      	cpsid	i
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	b662      	cpsie	i
 8007cfe:	607b      	str	r3, [r7, #4]
 8007d00:	e7fe      	b.n	8007d00 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <vPortExitCritical+0x50>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3b01      	subs	r3, #1
 8007d08:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <vPortExitCritical+0x50>)
 8007d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d0c:	4b07      	ldr	r3, [pc, #28]	; (8007d2c <vPortExitCritical+0x50>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <vPortExitCritical+0x42>
 8007d14:	2300      	movs	r3, #0
 8007d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	2000000c 	.word	0x2000000c

08007d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d30:	f3ef 8009 	mrs	r0, PSP
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	4b15      	ldr	r3, [pc, #84]	; (8007d90 <pxCurrentTCBConst>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	f01e 0f10 	tst.w	lr, #16
 8007d40:	bf08      	it	eq
 8007d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4a:	6010      	str	r0, [r2, #0]
 8007d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d54:	b672      	cpsid	i
 8007d56:	f380 8811 	msr	BASEPRI, r0
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	b662      	cpsie	i
 8007d64:	f7ff fa00 	bl	8007168 <vTaskSwitchContext>
 8007d68:	f04f 0000 	mov.w	r0, #0
 8007d6c:	f380 8811 	msr	BASEPRI, r0
 8007d70:	bc09      	pop	{r0, r3}
 8007d72:	6819      	ldr	r1, [r3, #0]
 8007d74:	6808      	ldr	r0, [r1, #0]
 8007d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	f01e 0f10 	tst.w	lr, #16
 8007d7e:	bf08      	it	eq
 8007d80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007d84:	f380 8809 	msr	PSP, r0
 8007d88:	f3bf 8f6f 	isb	sy
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop

08007d90 <pxCurrentTCBConst>:
 8007d90:	20000e6c 	.word	0x20000e6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop

08007d98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	b672      	cpsid	i
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	b662      	cpsie	i
 8007db2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007db4:	f7ff f91e 	bl	8006ff4 <xTaskIncrementTick>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dbe:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <SysTick_Handler+0x40>)
 8007dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	e000ed04 	.word	0xe000ed04

08007ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007de0:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <vPortSetupTimerInterrupt+0x34>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007de6:	4b0b      	ldr	r3, [pc, #44]	; (8007e14 <vPortSetupTimerInterrupt+0x38>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <vPortSetupTimerInterrupt+0x3c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <vPortSetupTimerInterrupt+0x40>)
 8007df2:	fba2 2303 	umull	r2, r3, r2, r3
 8007df6:	099b      	lsrs	r3, r3, #6
 8007df8:	4a09      	ldr	r2, [pc, #36]	; (8007e20 <vPortSetupTimerInterrupt+0x44>)
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007dfe:	4b04      	ldr	r3, [pc, #16]	; (8007e10 <vPortSetupTimerInterrupt+0x34>)
 8007e00:	2207      	movs	r2, #7
 8007e02:	601a      	str	r2, [r3, #0]
}
 8007e04:	bf00      	nop
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	e000e010 	.word	0xe000e010
 8007e14:	e000e018 	.word	0xe000e018
 8007e18:	20000000 	.word	0x20000000
 8007e1c:	10624dd3 	.word	0x10624dd3
 8007e20:	e000e014 	.word	0xe000e014

08007e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e34 <vPortEnableVFP+0x10>
 8007e28:	6801      	ldr	r1, [r0, #0]
 8007e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e2e:	6001      	str	r1, [r0, #0]
 8007e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e32:	bf00      	nop
 8007e34:	e000ed88 	.word	0xe000ed88

08007e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e3e:	f3ef 8305 	mrs	r3, IPSR
 8007e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d915      	bls.n	8007e76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e4a:	4a18      	ldr	r2, [pc, #96]	; (8007eac <vPortValidateInterruptPriority+0x74>)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4413      	add	r3, r2
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e54:	4b16      	ldr	r3, [pc, #88]	; (8007eb0 <vPortValidateInterruptPriority+0x78>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	7afa      	ldrb	r2, [r7, #11]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d20b      	bcs.n	8007e76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	b672      	cpsid	i
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	b662      	cpsie	i
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	e7fe      	b.n	8007e74 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007e76:	4b0f      	ldr	r3, [pc, #60]	; (8007eb4 <vPortValidateInterruptPriority+0x7c>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e7e:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <vPortValidateInterruptPriority+0x80>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d90b      	bls.n	8007e9e <vPortValidateInterruptPriority+0x66>
 8007e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8a:	b672      	cpsid	i
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	b662      	cpsie	i
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	e7fe      	b.n	8007e9c <vPortValidateInterruptPriority+0x64>
	}
 8007e9e:	bf00      	nop
 8007ea0:	3714      	adds	r7, #20
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	e000e3f0 	.word	0xe000e3f0
 8007eb0:	20000f98 	.word	0x20000f98
 8007eb4:	e000ed0c 	.word	0xe000ed0c
 8007eb8:	20000f9c 	.word	0x20000f9c

08007ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	; 0x28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ec8:	f7fe ffc6 	bl	8006e58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ecc:	4b5a      	ldr	r3, [pc, #360]	; (8008038 <pvPortMalloc+0x17c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ed4:	f000 f916 	bl	8008104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ed8:	4b58      	ldr	r3, [pc, #352]	; (800803c <pvPortMalloc+0x180>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 8090 	bne.w	8008006 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d01e      	beq.n	8007f2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007eec:	2208      	movs	r2, #8
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f003 0307 	and.w	r3, r3, #7
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d015      	beq.n	8007f2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f023 0307 	bic.w	r3, r3, #7
 8007f04:	3308      	adds	r3, #8
 8007f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00b      	beq.n	8007f2a <pvPortMalloc+0x6e>
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	b672      	cpsid	i
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	b662      	cpsie	i
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e7fe      	b.n	8007f28 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d06a      	beq.n	8008006 <pvPortMalloc+0x14a>
 8007f30:	4b43      	ldr	r3, [pc, #268]	; (8008040 <pvPortMalloc+0x184>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d865      	bhi.n	8008006 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f3a:	4b42      	ldr	r3, [pc, #264]	; (8008044 <pvPortMalloc+0x188>)
 8007f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f3e:	4b41      	ldr	r3, [pc, #260]	; (8008044 <pvPortMalloc+0x188>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f44:	e004      	b.n	8007f50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d903      	bls.n	8007f62 <pvPortMalloc+0xa6>
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d1f1      	bne.n	8007f46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f62:	4b35      	ldr	r3, [pc, #212]	; (8008038 <pvPortMalloc+0x17c>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d04c      	beq.n	8008006 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2208      	movs	r2, #8
 8007f72:	4413      	add	r3, r2
 8007f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	1ad2      	subs	r2, r2, r3
 8007f86:	2308      	movs	r3, #8
 8007f88:	005b      	lsls	r3, r3, #1
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d920      	bls.n	8007fd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4413      	add	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <pvPortMalloc+0xfc>
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	b672      	cpsid	i
 8007fa6:	f383 8811 	msr	BASEPRI, r3
 8007faa:	f3bf 8f6f 	isb	sy
 8007fae:	f3bf 8f4f 	dsb	sy
 8007fb2:	b662      	cpsie	i
 8007fb4:	613b      	str	r3, [r7, #16]
 8007fb6:	e7fe      	b.n	8007fb6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	1ad2      	subs	r2, r2, r3
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007fca:	69b8      	ldr	r0, [r7, #24]
 8007fcc:	f000 f8fc 	bl	80081c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007fd0:	4b1b      	ldr	r3, [pc, #108]	; (8008040 <pvPortMalloc+0x184>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	4a19      	ldr	r2, [pc, #100]	; (8008040 <pvPortMalloc+0x184>)
 8007fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007fde:	4b18      	ldr	r3, [pc, #96]	; (8008040 <pvPortMalloc+0x184>)
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b19      	ldr	r3, [pc, #100]	; (8008048 <pvPortMalloc+0x18c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d203      	bcs.n	8007ff2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007fea:	4b15      	ldr	r3, [pc, #84]	; (8008040 <pvPortMalloc+0x184>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a16      	ldr	r2, [pc, #88]	; (8008048 <pvPortMalloc+0x18c>)
 8007ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4b11      	ldr	r3, [pc, #68]	; (800803c <pvPortMalloc+0x180>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	431a      	orrs	r2, r3
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008006:	f7fe ff35 	bl	8006e74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	f003 0307 	and.w	r3, r3, #7
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <pvPortMalloc+0x170>
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	b672      	cpsid	i
 800801a:	f383 8811 	msr	BASEPRI, r3
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	f3bf 8f4f 	dsb	sy
 8008026:	b662      	cpsie	i
 8008028:	60fb      	str	r3, [r7, #12]
 800802a:	e7fe      	b.n	800802a <pvPortMalloc+0x16e>
	return pvReturn;
 800802c:	69fb      	ldr	r3, [r7, #28]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3728      	adds	r7, #40	; 0x28
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop
 8008038:	20020fa8 	.word	0x20020fa8
 800803c:	20020fb4 	.word	0x20020fb4
 8008040:	20020fac 	.word	0x20020fac
 8008044:	20020fa0 	.word	0x20020fa0
 8008048:	20020fb0 	.word	0x20020fb0

0800804c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d04a      	beq.n	80080f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800805e:	2308      	movs	r3, #8
 8008060:	425b      	negs	r3, r3
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4413      	add	r3, r2
 8008066:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	4b22      	ldr	r3, [pc, #136]	; (80080fc <vPortFree+0xb0>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4013      	ands	r3, r2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <vPortFree+0x46>
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	b672      	cpsid	i
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	b662      	cpsie	i
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	e7fe      	b.n	8008090 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <vPortFree+0x66>
 800809a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800809e:	b672      	cpsid	i
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	b662      	cpsie	i
 80080ae:	60bb      	str	r3, [r7, #8]
 80080b0:	e7fe      	b.n	80080b0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	4b11      	ldr	r3, [pc, #68]	; (80080fc <vPortFree+0xb0>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d019      	beq.n	80080f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d115      	bne.n	80080f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <vPortFree+0xb0>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	43db      	mvns	r3, r3
 80080d2:	401a      	ands	r2, r3
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80080d8:	f7fe febe 	bl	8006e58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	4b07      	ldr	r3, [pc, #28]	; (8008100 <vPortFree+0xb4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	4a06      	ldr	r2, [pc, #24]	; (8008100 <vPortFree+0xb4>)
 80080e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80080ea:	6938      	ldr	r0, [r7, #16]
 80080ec:	f000 f86c 	bl	80081c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80080f0:	f7fe fec0 	bl	8006e74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80080f4:	bf00      	nop
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	20020fb4 	.word	0x20020fb4
 8008100:	20020fac 	.word	0x20020fac

08008104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800810a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800810e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008110:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <prvHeapInit+0xac>)
 8008112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00c      	beq.n	8008138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3307      	adds	r3, #7
 8008122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 0307 	bic.w	r3, r3, #7
 800812a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	4a1f      	ldr	r2, [pc, #124]	; (80081b0 <prvHeapInit+0xac>)
 8008134:	4413      	add	r3, r2
 8008136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <prvHeapInit+0xb0>)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008142:	4b1c      	ldr	r3, [pc, #112]	; (80081b4 <prvHeapInit+0xb0>)
 8008144:	2200      	movs	r2, #0
 8008146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	4413      	add	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008150:	2208      	movs	r2, #8
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	1a9b      	subs	r3, r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f023 0307 	bic.w	r3, r3, #7
 800815e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <prvHeapInit+0xb4>)
 8008164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008166:	4b14      	ldr	r3, [pc, #80]	; (80081b8 <prvHeapInit+0xb4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	2200      	movs	r2, #0
 800816c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <prvHeapInit+0xb4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <prvHeapInit+0xb4>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	4a0a      	ldr	r2, [pc, #40]	; (80081bc <prvHeapInit+0xb8>)
 8008192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	4a09      	ldr	r2, [pc, #36]	; (80081c0 <prvHeapInit+0xbc>)
 800819a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800819c:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <prvHeapInit+0xc0>)
 800819e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	20000fa0 	.word	0x20000fa0
 80081b4:	20020fa0 	.word	0x20020fa0
 80081b8:	20020fa8 	.word	0x20020fa8
 80081bc:	20020fb0 	.word	0x20020fb0
 80081c0:	20020fac 	.word	0x20020fac
 80081c4:	20020fb4 	.word	0x20020fb4

080081c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80081d0:	4b28      	ldr	r3, [pc, #160]	; (8008274 <prvInsertBlockIntoFreeList+0xac>)
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e002      	b.n	80081dc <prvInsertBlockIntoFreeList+0x14>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	60fb      	str	r3, [r7, #12]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d8f7      	bhi.n	80081d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d108      	bne.n	800820a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	685a      	ldr	r2, [r3, #4]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	441a      	add	r2, r3
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	441a      	add	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	429a      	cmp	r2, r3
 800821c:	d118      	bne.n	8008250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	4b15      	ldr	r3, [pc, #84]	; (8008278 <prvInsertBlockIntoFreeList+0xb0>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d00d      	beq.n	8008246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	441a      	add	r2, r3
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e008      	b.n	8008258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008246:	4b0c      	ldr	r3, [pc, #48]	; (8008278 <prvInsertBlockIntoFreeList+0xb0>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	601a      	str	r2, [r3, #0]
 800824e:	e003      	b.n	8008258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	d002      	beq.n	8008266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	20020fa0 	.word	0x20020fa0
 8008278:	20020fa8 	.word	0x20020fa8

0800827c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	461a      	mov	r2, r3
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f002 fa8d 	bl	800a7b0 <tcpip_send_msg_wait_sem>
 8008296:	4603      	mov	r3, r0
 8008298:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800829a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <netconn_apimsg+0x2e>
    return apimsg->err;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80082a8:	e001      	b.n	80082ae <netconn_apimsg+0x32>
  }
  return err;
 80082aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08c      	sub	sp, #48	; 0x30
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	603a      	str	r2, [r7, #0]
 80082c2:	71fb      	strb	r3, [r7, #7]
 80082c4:	460b      	mov	r3, r1
 80082c6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	6839      	ldr	r1, [r7, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 f85b 	bl	8009388 <netconn_alloc>
 80082d2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80082d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d054      	beq.n	8008384 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80082da:	79bb      	ldrb	r3, [r7, #6]
 80082dc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	4619      	mov	r1, r3
 80082e8:	4829      	ldr	r0, [pc, #164]	; (8008390 <netconn_new_with_proto_and_callback+0xd8>)
 80082ea:	f7ff ffc7 	bl	800827c <netconn_apimsg>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80082f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d043      	beq.n	8008384 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80082fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d005      	beq.n	8008310 <netconn_new_with_proto_and_callback+0x58>
 8008304:	4b23      	ldr	r3, [pc, #140]	; (8008394 <netconn_new_with_proto_and_callback+0xdc>)
 8008306:	22a3      	movs	r2, #163	; 0xa3
 8008308:	4923      	ldr	r1, [pc, #140]	; (8008398 <netconn_new_with_proto_and_callback+0xe0>)
 800830a:	4824      	ldr	r0, [pc, #144]	; (800839c <netconn_new_with_proto_and_callback+0xe4>)
 800830c:	f011 fe06 	bl	8019f1c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008312:	3310      	adds	r3, #16
 8008314:	4618      	mov	r0, r3
 8008316:	f010 fe06 	bl	8018f26 <sys_mbox_valid>
 800831a:	4603      	mov	r3, r0
 800831c:	2b00      	cmp	r3, #0
 800831e:	d105      	bne.n	800832c <netconn_new_with_proto_and_callback+0x74>
 8008320:	4b1c      	ldr	r3, [pc, #112]	; (8008394 <netconn_new_with_proto_and_callback+0xdc>)
 8008322:	22a4      	movs	r2, #164	; 0xa4
 8008324:	491e      	ldr	r1, [pc, #120]	; (80083a0 <netconn_new_with_proto_and_callback+0xe8>)
 8008326:	481d      	ldr	r0, [pc, #116]	; (800839c <netconn_new_with_proto_and_callback+0xe4>)
 8008328:	f011 fdf8 	bl	8019f1c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	3314      	adds	r3, #20
 8008330:	4618      	mov	r0, r3
 8008332:	f010 fdf8 	bl	8018f26 <sys_mbox_valid>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d005      	beq.n	8008348 <netconn_new_with_proto_and_callback+0x90>
 800833c:	4b15      	ldr	r3, [pc, #84]	; (8008394 <netconn_new_with_proto_and_callback+0xdc>)
 800833e:	22a6      	movs	r2, #166	; 0xa6
 8008340:	4918      	ldr	r1, [pc, #96]	; (80083a4 <netconn_new_with_proto_and_callback+0xec>)
 8008342:	4816      	ldr	r0, [pc, #88]	; (800839c <netconn_new_with_proto_and_callback+0xe4>)
 8008344:	f011 fdea 	bl	8019f1c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834a:	330c      	adds	r3, #12
 800834c:	4618      	mov	r0, r3
 800834e:	f010 fe7b 	bl	8019048 <sys_sem_valid>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d105      	bne.n	8008364 <netconn_new_with_proto_and_callback+0xac>
 8008358:	4b0e      	ldr	r3, [pc, #56]	; (8008394 <netconn_new_with_proto_and_callback+0xdc>)
 800835a:	22a9      	movs	r2, #169	; 0xa9
 800835c:	4912      	ldr	r1, [pc, #72]	; (80083a8 <netconn_new_with_proto_and_callback+0xf0>)
 800835e:	480f      	ldr	r0, [pc, #60]	; (800839c <netconn_new_with_proto_and_callback+0xe4>)
 8008360:	f011 fddc 	bl	8019f1c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	330c      	adds	r3, #12
 8008368:	4618      	mov	r0, r3
 800836a:	f010 fe60 	bl	801902e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	3310      	adds	r3, #16
 8008372:	4618      	mov	r0, r3
 8008374:	f010 fd50 	bl	8018e18 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800837a:	2007      	movs	r0, #7
 800837c:	f003 ff54 	bl	800c228 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008380:	2300      	movs	r3, #0
 8008382:	e000      	b.n	8008386 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008386:	4618      	mov	r0, r3
 8008388:	3730      	adds	r7, #48	; 0x30
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	0800935d 	.word	0x0800935d
 8008394:	0801e1bc 	.word	0x0801e1bc
 8008398:	0801e1f0 	.word	0x0801e1f0
 800839c:	0801e214 	.word	0x0801e214
 80083a0:	0801e23c 	.word	0x0801e23c
 80083a4:	0801e254 	.word	0x0801e254
 80083a8:	0801e278 	.word	0x0801e278

080083ac <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	; 0x30
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <netconn_prepare_delete+0x12>
    return ERR_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	e014      	b.n	80083e8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80083c2:	2329      	movs	r3, #41	; 0x29
 80083c4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80083c6:	f107 030c 	add.w	r3, r7, #12
 80083ca:	4619      	mov	r1, r3
 80083cc:	4808      	ldr	r0, [pc, #32]	; (80083f0 <netconn_prepare_delete+0x44>)
 80083ce:	f7ff ff55 	bl	800827c <netconn_apimsg>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80083d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <netconn_prepare_delete+0x3a>
    return err;
 80083e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80083e4:	e000      	b.n	80083e8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3730      	adds	r7, #48	; 0x30
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	080098c9 	.word	0x080098c9

080083f4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <netconn_delete+0x12>
    return ERR_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	e00d      	b.n	8008422 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7ff ffd0 	bl	80083ac <netconn_prepare_delete>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d102      	bne.n	800841e <netconn_delete+0x2a>
    netconn_free(conn);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f827 	bl	800946c <netconn_free>
  }
  return err;
 800841e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08e      	sub	sp, #56	; 0x38
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d109      	bne.n	8008454 <netconn_bind+0x28>
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <netconn_bind+0x5c>)
 8008442:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008446:	4911      	ldr	r1, [pc, #68]	; (800848c <netconn_bind+0x60>)
 8008448:	4811      	ldr	r0, [pc, #68]	; (8008490 <netconn_bind+0x64>)
 800844a:	f011 fd67 	bl	8019f1c <iprintf>
 800844e:	f06f 030f 	mvn.w	r3, #15
 8008452:	e015      	b.n	8008480 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800845a:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <netconn_bind+0x68>)
 800845c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	4619      	mov	r1, r3
 8008470:	4809      	ldr	r0, [pc, #36]	; (8008498 <netconn_bind+0x6c>)
 8008472:	f7ff ff03 	bl	800827c <netconn_apimsg>
 8008476:	4603      	mov	r3, r0
 8008478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800847c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008480:	4618      	mov	r0, r3
 8008482:	3738      	adds	r7, #56	; 0x38
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	0801e1bc 	.word	0x0801e1bc
 800848c:	0801e2f4 	.word	0x0801e2f4
 8008490:	0801e214 	.word	0x0801e214
 8008494:	08021b90 	.word	0x08021b90
 8008498:	08009a95 	.word	0x08009a95

0800849c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08e      	sub	sp, #56	; 0x38
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d109      	bne.n	80084c4 <netconn_connect+0x28>
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <netconn_connect+0x5c>)
 80084b2:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80084b6:	4911      	ldr	r1, [pc, #68]	; (80084fc <netconn_connect+0x60>)
 80084b8:	4811      	ldr	r0, [pc, #68]	; (8008500 <netconn_connect+0x64>)
 80084ba:	f011 fd2f 	bl	8019f1c <iprintf>
 80084be:	f06f 030f 	mvn.w	r3, #15
 80084c2:	e015      	b.n	80084f0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 80084ca:	4b0e      	ldr	r3, [pc, #56]	; (8008504 <netconn_connect+0x68>)
 80084cc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 80084da:	f107 0314 	add.w	r3, r7, #20
 80084de:	4619      	mov	r1, r3
 80084e0:	4809      	ldr	r0, [pc, #36]	; (8008508 <netconn_connect+0x6c>)
 80084e2:	f7ff fecb 	bl	800827c <netconn_apimsg>
 80084e6:	4603      	mov	r3, r0
 80084e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80084ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3738      	adds	r7, #56	; 0x38
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	0801e1bc 	.word	0x0801e1bc
 80084fc:	0801e330 	.word	0x0801e330
 8008500:	0801e214 	.word	0x0801e214
 8008504:	08021b90 	.word	0x08021b90
 8008508:	08009c35 	.word	0x08009c35

0800850c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	4613      	mov	r3, r2
 8008518:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d109      	bne.n	8008538 <netconn_recv_data+0x2c>
 8008524:	4b5e      	ldr	r3, [pc, #376]	; (80086a0 <netconn_recv_data+0x194>)
 8008526:	f44f 7212 	mov.w	r2, #584	; 0x248
 800852a:	495e      	ldr	r1, [pc, #376]	; (80086a4 <netconn_recv_data+0x198>)
 800852c:	485e      	ldr	r0, [pc, #376]	; (80086a8 <netconn_recv_data+0x19c>)
 800852e:	f011 fcf5 	bl	8019f1c <iprintf>
 8008532:	f06f 030f 	mvn.w	r3, #15
 8008536:	e0ae      	b.n	8008696 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d109      	bne.n	8008558 <netconn_recv_data+0x4c>
 8008544:	4b56      	ldr	r3, [pc, #344]	; (80086a0 <netconn_recv_data+0x194>)
 8008546:	f240 224a 	movw	r2, #586	; 0x24a
 800854a:	4958      	ldr	r1, [pc, #352]	; (80086ac <netconn_recv_data+0x1a0>)
 800854c:	4856      	ldr	r0, [pc, #344]	; (80086a8 <netconn_recv_data+0x19c>)
 800854e:	f011 fce5 	bl	8019f1c <iprintf>
 8008552:	f06f 030f 	mvn.w	r3, #15
 8008556:	e09e      	b.n	8008696 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3310      	adds	r3, #16
 800855c:	4618      	mov	r0, r3
 800855e:	f010 fce2 	bl	8018f26 <sys_mbox_valid>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10e      	bne.n	8008586 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f000 fae6 	bl	8008b3a <netconn_err>
 800856e:	4603      	mov	r3, r0
 8008570:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008572:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d002      	beq.n	8008580 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800857a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800857e:	e08a      	b.n	8008696 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 8008580:	f06f 030a 	mvn.w	r3, #10
 8008584:	e087      	b.n	8008696 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800858c:	f003 0302 	and.w	r3, r3, #2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d110      	bne.n	80085b6 <netconn_recv_data+0xaa>
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	d10b      	bne.n	80085b6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085a4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d104      	bne.n	80085b6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d024      	beq.n	8008600 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	3310      	adds	r3, #16
 80085ba:	f107 0218 	add.w	r2, r7, #24
 80085be:	4611      	mov	r1, r2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f010 fc94 	bl	8018eee <sys_arch_mbox_tryfetch>
 80085c6:	4603      	mov	r3, r0
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d129      	bne.n	8008622 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fab3 	bl	8008b3a <netconn_err>
 80085d4:	4603      	mov	r3, r0
 80085d6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80085d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 80085e0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80085e4:	e057      	b.n	8008696 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <netconn_recv_data+0xee>
        return ERR_CONN;
 80085f4:	f06f 030a 	mvn.w	r3, #10
 80085f8:	e04d      	b.n	8008696 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 80085fa:	f06f 0306 	mvn.w	r3, #6
 80085fe:	e04a      	b.n	8008696 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f103 0010 	add.w	r0, r3, #16
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	69da      	ldr	r2, [r3, #28]
 800860a:	f107 0318 	add.w	r3, r7, #24
 800860e:	4619      	mov	r1, r3
 8008610:	f010 fc2e 	bl	8018e70 <sys_arch_mbox_fetch>
 8008614:	4603      	mov	r3, r0
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d102      	bne.n	8008622 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800861c:	f06f 0302 	mvn.w	r3, #2
 8008620:	e039      	b.n	8008696 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800862a:	2b10      	cmp	r3, #16
 800862c:	d117      	bne.n	800865e <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	f107 0217 	add.w	r2, r7, #23
 8008634:	4611      	mov	r1, r2
 8008636:	4618      	mov	r0, r3
 8008638:	f000 fb28 	bl	8008c8c <lwip_netconn_is_err_msg>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d009      	beq.n	8008656 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008642:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008646:	f113 0f0f 	cmn.w	r3, #15
 800864a:	d101      	bne.n	8008650 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800864c:	2300      	movs	r3, #0
 800864e:	e022      	b.n	8008696 <netconn_recv_data+0x18a>
      }
      return err;
 8008650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008654:	e01f      	b.n	8008696 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	891b      	ldrh	r3, [r3, #8]
 800865a:	83fb      	strh	r3, [r7, #30]
 800865c:	e00d      	b.n	800867a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d106      	bne.n	8008672 <netconn_recv_data+0x166>
 8008664:	4b0e      	ldr	r3, [pc, #56]	; (80086a0 <netconn_recv_data+0x194>)
 8008666:	f240 2291 	movw	r2, #657	; 0x291
 800866a:	4911      	ldr	r1, [pc, #68]	; (80086b0 <netconn_recv_data+0x1a4>)
 800866c:	480e      	ldr	r0, [pc, #56]	; (80086a8 <netconn_recv_data+0x19c>)
 800866e:	f011 fc55 	bl	8019f1c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	891b      	ldrh	r3, [r3, #8]
 8008678:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <netconn_recv_data+0x182>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	8bfa      	ldrh	r2, [r7, #30]
 8008688:	2101      	movs	r1, #1
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	0801e1bc 	.word	0x0801e1bc
 80086a4:	0801e3d4 	.word	0x0801e3d4
 80086a8:	0801e214 	.word	0x0801e214
 80086ac:	0801e3f4 	.word	0x0801e3f4
 80086b0:	0801e410 	.word	0x0801e410

080086b4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d005      	beq.n	80086d2 <netconn_tcp_recvd_msg+0x1e>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086ce:	2b10      	cmp	r3, #16
 80086d0:	d009      	beq.n	80086e6 <netconn_tcp_recvd_msg+0x32>
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <netconn_tcp_recvd_msg+0x50>)
 80086d4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80086d8:	490b      	ldr	r1, [pc, #44]	; (8008708 <netconn_tcp_recvd_msg+0x54>)
 80086da:	480c      	ldr	r0, [pc, #48]	; (800870c <netconn_tcp_recvd_msg+0x58>)
 80086dc:	f011 fc1e 	bl	8019f1c <iprintf>
 80086e0:	f06f 030f 	mvn.w	r3, #15
 80086e4:	e00a      	b.n	80086fc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	4806      	ldr	r0, [pc, #24]	; (8008710 <netconn_tcp_recvd_msg+0x5c>)
 80086f6:	f7ff fdc1 	bl	800827c <netconn_apimsg>
 80086fa:	4603      	mov	r3, r0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	0801e1bc 	.word	0x0801e1bc
 8008708:	0801e41c 	.word	0x0801e41c
 800870c:	0801e214 	.word	0x0801e214
 8008710:	08009dbd 	.word	0x08009dbd

08008714 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b090      	sub	sp, #64	; 0x40
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3310      	adds	r3, #16
 8008726:	4618      	mov	r0, r3
 8008728:	f010 fbfd 	bl	8018f26 <sys_mbox_valid>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d102      	bne.n	8008738 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008732:	f06f 030a 	mvn.w	r3, #10
 8008736:	e072      	b.n	800881e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800873e:	b25b      	sxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	da09      	bge.n	8008758 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f893 3020 	ldrb.w	r3, [r3, #32]
 800874a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800874e:	b2da      	uxtb	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8008756:	e03b      	b.n	80087d0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	461a      	mov	r2, r3
 800875c:	68b9      	ldr	r1, [r7, #8]
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff fed4 	bl	800850c <netconn_recv_data>
 8008764:	4603      	mov	r3, r0
 8008766:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800876a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800876e:	2b00      	cmp	r3, #0
 8008770:	d002      	beq.n	8008778 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008772:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008776:	e052      	b.n	800881e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10e      	bne.n	80087a6 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <netconn_recv_data_tcp+0x80>
 800878e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008790:	891b      	ldrh	r3, [r3, #8]
 8008792:	e000      	b.n	8008796 <netconn_recv_data_tcp+0x82>
 8008794:	2301      	movs	r3, #1
 8008796:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800879a:	f107 0214 	add.w	r2, r7, #20
 800879e:	4619      	mov	r1, r3
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff ff87 	bl	80086b4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d136      	bne.n	800881a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	f003 0310 	and.w	r3, r3, #16
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00b      	beq.n	80087ce <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 80087c8:	f06f 0306 	mvn.w	r3, #6
 80087cc:	e027      	b.n	800881e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80087ce:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d005      	beq.n	80087e4 <netconn_recv_data_tcp+0xd0>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	2200      	movs	r2, #0
 80087de:	2101      	movs	r1, #1
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10f      	bne.n	800880c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f9a4 	bl	8008b3a <netconn_err>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80087f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d002      	beq.n	8008806 <netconn_recv_data_tcp+0xf2>
          return err;
 8008800:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008804:	e00b      	b.n	800881e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8008806:	f06f 030d 	mvn.w	r3, #13
 800880a:	e008      	b.n	800881e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800880c:	2101      	movs	r1, #1
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f000 f956 	bl	8008ac0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008814:	f06f 030e 	mvn.w	r3, #14
 8008818:	e001      	b.n	800881e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800881a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800881e:	4618      	mov	r0, r3
 8008820:	3740      	adds	r7, #64	; 0x40
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <netconn_recv+0x28>
 800883c:	4b32      	ldr	r3, [pc, #200]	; (8008908 <netconn_recv+0xe0>)
 800883e:	f240 3263 	movw	r2, #867	; 0x363
 8008842:	4932      	ldr	r1, [pc, #200]	; (800890c <netconn_recv+0xe4>)
 8008844:	4832      	ldr	r0, [pc, #200]	; (8008910 <netconn_recv+0xe8>)
 8008846:	f011 fb69 	bl	8019f1c <iprintf>
 800884a:	f06f 030f 	mvn.w	r3, #15
 800884e:	e056      	b.n	80088fe <netconn_recv+0xd6>
  *new_buf = NULL;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d109      	bne.n	8008870 <netconn_recv+0x48>
 800885c:	4b2a      	ldr	r3, [pc, #168]	; (8008908 <netconn_recv+0xe0>)
 800885e:	f240 3265 	movw	r2, #869	; 0x365
 8008862:	492c      	ldr	r1, [pc, #176]	; (8008914 <netconn_recv+0xec>)
 8008864:	482a      	ldr	r0, [pc, #168]	; (8008910 <netconn_recv+0xe8>)
 8008866:	f011 fb59 	bl	8019f1c <iprintf>
 800886a:	f06f 030f 	mvn.w	r3, #15
 800886e:	e046      	b.n	80088fe <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008878:	2b10      	cmp	r3, #16
 800887a:	d13a      	bne.n	80088f2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008880:	2006      	movs	r0, #6
 8008882:	f003 fc7f 	bl	800c184 <memp_malloc>
 8008886:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d102      	bne.n	8008894 <netconn_recv+0x6c>
      return ERR_MEM;
 800888e:	f04f 33ff 	mov.w	r3, #4294967295
 8008892:	e034      	b.n	80088fe <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008894:	f107 030c 	add.w	r3, r7, #12
 8008898:	2200      	movs	r2, #0
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7ff ff39 	bl	8008714 <netconn_recv_data_tcp>
 80088a2:	4603      	mov	r3, r0
 80088a4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80088a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d006      	beq.n	80088bc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80088ae:	6979      	ldr	r1, [r7, #20]
 80088b0:	2006      	movs	r0, #6
 80088b2:	f003 fcb9 	bl	800c228 <memp_free>
      return err;
 80088b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80088ba:	e020      	b.n	80088fe <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <netconn_recv+0xa8>
 80088c2:	4b11      	ldr	r3, [pc, #68]	; (8008908 <netconn_recv+0xe0>)
 80088c4:	f240 3279 	movw	r2, #889	; 0x379
 80088c8:	4913      	ldr	r1, [pc, #76]	; (8008918 <netconn_recv+0xf0>)
 80088ca:	4811      	ldr	r0, [pc, #68]	; (8008910 <netconn_recv+0xe8>)
 80088cc:	f011 fb26 	bl	8019f1c <iprintf>

    buf->p = p;
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	2200      	movs	r2, #0
 80088e0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	2200      	movs	r2, #0
 80088e6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	697a      	ldr	r2, [r7, #20]
 80088ec:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e005      	b.n	80088fe <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80088f2:	2200      	movs	r2, #0
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff fe08 	bl	800850c <netconn_recv_data>
 80088fc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3718      	adds	r7, #24
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	0801e1bc 	.word	0x0801e1bc
 800890c:	0801e3d4 	.word	0x0801e3d4
 8008910:	0801e214 	.word	0x0801e214
 8008914:	0801e3f4 	.word	0x0801e3f4
 8008918:	0801e46c 	.word	0x0801e46c

0800891c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b088      	sub	sp, #32
 8008920:	af02      	add	r7, sp, #8
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	f107 0110 	add.w	r1, r7, #16
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	4613      	mov	r3, r2
 800893e:	2201      	movs	r2, #1
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f805 	bl	8008950 <netconn_write_vectors_partly>
 8008946:	4603      	mov	r3, r0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b092      	sub	sp, #72	; 0x48
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	4611      	mov	r1, r2
 800895c:	461a      	mov	r2, r3
 800895e:	460b      	mov	r3, r1
 8008960:	80fb      	strh	r3, [r7, #6]
 8008962:	4613      	mov	r3, r2
 8008964:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d109      	bne.n	8008980 <netconn_write_vectors_partly+0x30>
 800896c:	4b4e      	ldr	r3, [pc, #312]	; (8008aa8 <netconn_write_vectors_partly+0x158>)
 800896e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008972:	494e      	ldr	r1, [pc, #312]	; (8008aac <netconn_write_vectors_partly+0x15c>)
 8008974:	484e      	ldr	r0, [pc, #312]	; (8008ab0 <netconn_write_vectors_partly+0x160>)
 8008976:	f011 fad1 	bl	8019f1c <iprintf>
 800897a:	f06f 030f 	mvn.w	r3, #15
 800897e:	e08f      	b.n	8008aa0 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008988:	2b10      	cmp	r3, #16
 800898a:	d009      	beq.n	80089a0 <netconn_write_vectors_partly+0x50>
 800898c:	4b46      	ldr	r3, [pc, #280]	; (8008aa8 <netconn_write_vectors_partly+0x158>)
 800898e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8008992:	4948      	ldr	r1, [pc, #288]	; (8008ab4 <netconn_write_vectors_partly+0x164>)
 8008994:	4846      	ldr	r0, [pc, #280]	; (8008ab0 <netconn_write_vectors_partly+0x160>)
 8008996:	f011 fac1 	bl	8019f1c <iprintf>
 800899a:	f06f 0305 	mvn.w	r3, #5
 800899e:	e07f      	b.n	8008aa0 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d104      	bne.n	80089b8 <netconn_write_vectors_partly+0x68>
 80089ae:	797b      	ldrb	r3, [r7, #5]
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <netconn_write_vectors_partly+0x6c>
 80089b8:	2301      	movs	r3, #1
 80089ba:	e000      	b.n	80089be <netconn_write_vectors_partly+0x6e>
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80089c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d005      	beq.n	80089d6 <netconn_write_vectors_partly+0x86>
 80089ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d102      	bne.n	80089d6 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80089d0:	f06f 0305 	mvn.w	r3, #5
 80089d4:	e064      	b.n	8008aa0 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80089da:	2300      	movs	r3, #0
 80089dc:	643b      	str	r3, [r7, #64]	; 0x40
 80089de:	e015      	b.n	8008a0c <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 80089e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	4413      	add	r3, r2
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089ec:	4413      	add	r3, r2
 80089ee:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80089f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f2:	00db      	lsls	r3, r3, #3
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	4413      	add	r3, r2
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d202      	bcs.n	8008a06 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8008a00:	f06f 0305 	mvn.w	r3, #5
 8008a04:	e04c      	b.n	8008aa0 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8008a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a08:	3301      	adds	r3, #1
 8008a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a0c:	88fb      	ldrh	r3, [r7, #6]
 8008a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a10:	429a      	cmp	r2, r3
 8008a12:	dbe5      	blt.n	80089e0 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8008a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d101      	bne.n	8008a1e <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e040      	b.n	8008aa0 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8008a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	da0a      	bge.n	8008a3a <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008a24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d102      	bne.n	8008a30 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8008a2a:	f06f 0305 	mvn.w	r3, #5
 8008a2e:	e037      	b.n	8008aa0 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008a30:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008a34:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008a42:	88fb      	ldrh	r3, [r7, #6]
 8008a44:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008a46:	2300      	movs	r3, #0
 8008a48:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008a4a:	797b      	ldrb	r3, [r7, #5]
 8008a4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008a54:	2300      	movs	r3, #0
 8008a56:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008a58:	f107 0314 	add.w	r3, r7, #20
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4816      	ldr	r0, [pc, #88]	; (8008ab8 <netconn_write_vectors_partly+0x168>)
 8008a60:	f7ff fc0c 	bl	800827c <netconn_apimsg>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8008a6a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d114      	bne.n	8008a9c <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8008a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a7c:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008a7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10a      	bne.n	8008a9c <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d006      	beq.n	8008a9c <netconn_write_vectors_partly+0x14c>
 8008a8e:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <netconn_write_vectors_partly+0x158>)
 8008a90:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008a94:	4909      	ldr	r1, [pc, #36]	; (8008abc <netconn_write_vectors_partly+0x16c>)
 8008a96:	4806      	ldr	r0, [pc, #24]	; (8008ab0 <netconn_write_vectors_partly+0x160>)
 8008a98:	f011 fa40 	bl	8019f1c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008a9c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3748      	adds	r7, #72	; 0x48
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	0801e1bc 	.word	0x0801e1bc
 8008aac:	0801e494 	.word	0x0801e494
 8008ab0:	0801e214 	.word	0x0801e214
 8008ab4:	0801e4b0 	.word	0x0801e4b0
 8008ab8:	0800a1c9 	.word	0x0800a1c9
 8008abc:	0801e4d4 	.word	0x0801e4d4

08008ac0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b08c      	sub	sp, #48	; 0x30
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <netconn_close_shutdown+0x26>
 8008ad2:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <netconn_close_shutdown+0x50>)
 8008ad4:	f240 4247 	movw	r2, #1095	; 0x447
 8008ad8:	490e      	ldr	r1, [pc, #56]	; (8008b14 <netconn_close_shutdown+0x54>)
 8008ada:	480f      	ldr	r0, [pc, #60]	; (8008b18 <netconn_close_shutdown+0x58>)
 8008adc:	f011 fa1e 	bl	8019f1c <iprintf>
 8008ae0:	f06f 030f 	mvn.w	r3, #15
 8008ae4:	e010      	b.n	8008b08 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008aee:	2329      	movs	r3, #41	; 0x29
 8008af0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008af2:	f107 030c 	add.w	r3, r7, #12
 8008af6:	4619      	mov	r1, r3
 8008af8:	4808      	ldr	r0, [pc, #32]	; (8008b1c <netconn_close_shutdown+0x5c>)
 8008afa:	f7ff fbbf 	bl	800827c <netconn_apimsg>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008b04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3730      	adds	r7, #48	; 0x30
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	0801e1bc 	.word	0x0801e1bc
 8008b14:	0801e4f8 	.word	0x0801e4f8
 8008b18:	0801e214 	.word	0x0801e214
 8008b1c:	0800a2e1 	.word	0x0800a2e1

08008b20 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008b28:	2103      	movs	r1, #3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7ff ffc8 	bl	8008ac0 <netconn_close_shutdown>
 8008b30:	4603      	mov	r3, r0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d101      	bne.n	8008b4c <netconn_err+0x12>
    return ERR_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e00d      	b.n	8008b68 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008b4c:	f010 fb06 	bl	801915c <sys_arch_protect>
 8008b50:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	7a1b      	ldrb	r3, [r3, #8]
 8008b56:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f010 fb0a 	bl	8019178 <sys_arch_unprotect>
  return err;
 8008b64:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b08a      	sub	sp, #40	; 0x28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d109      	bne.n	8008b94 <netconn_gethostbyname+0x24>
 8008b80:	4b24      	ldr	r3, [pc, #144]	; (8008c14 <netconn_gethostbyname+0xa4>)
 8008b82:	f240 5204 	movw	r2, #1284	; 0x504
 8008b86:	4924      	ldr	r1, [pc, #144]	; (8008c18 <netconn_gethostbyname+0xa8>)
 8008b88:	4824      	ldr	r0, [pc, #144]	; (8008c1c <netconn_gethostbyname+0xac>)
 8008b8a:	f011 f9c7 	bl	8019f1c <iprintf>
 8008b8e:	f06f 030f 	mvn.w	r3, #15
 8008b92:	e03b      	b.n	8008c0c <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d109      	bne.n	8008bae <netconn_gethostbyname+0x3e>
 8008b9a:	4b1e      	ldr	r3, [pc, #120]	; (8008c14 <netconn_gethostbyname+0xa4>)
 8008b9c:	f240 5205 	movw	r2, #1285	; 0x505
 8008ba0:	491f      	ldr	r1, [pc, #124]	; (8008c20 <netconn_gethostbyname+0xb0>)
 8008ba2:	481e      	ldr	r0, [pc, #120]	; (8008c1c <netconn_gethostbyname+0xac>)
 8008ba4:	f011 f9ba 	bl	8019f1c <iprintf>
 8008ba8:	f06f 030f 	mvn.w	r3, #15
 8008bac:	e02e      	b.n	8008c0c <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 8008bae:	f107 030f 	add.w	r3, r7, #15
 8008bb2:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 8008bb4:	f107 0310 	add.w	r3, r7, #16
 8008bb8:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f010 f9cb 	bl	8018f62 <sys_sem_new>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8008bd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 8008bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bdc:	e016      	b.n	8008c0c <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	f107 0314 	add.w	r3, r7, #20
 8008be4:	4619      	mov	r1, r3
 8008be6:	480f      	ldr	r0, [pc, #60]	; (8008c24 <netconn_gethostbyname+0xb4>)
 8008be8:	f001 fde2 	bl	800a7b0 <tcpip_send_msg_wait_sem>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f010 fa1a 	bl	801902e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 8008bfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 8008c02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c06:	e001      	b.n	8008c0c <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 8008c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3728      	adds	r7, #40	; 0x28
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	0801e1bc 	.word	0x0801e1bc
 8008c18:	0801e514 	.word	0x0801e514
 8008c1c:	0801e214 	.word	0x0801e214
 8008c20:	0801e538 	.word	0x0801e538
 8008c24:	0800a43d 	.word	0x0800a43d

08008c28 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	4603      	mov	r3, r0
 8008c30:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c36:	f113 0f0e 	cmn.w	r3, #14
 8008c3a:	d008      	beq.n	8008c4e <lwip_netconn_err_to_msg+0x26>
 8008c3c:	f113 0f0d 	cmn.w	r3, #13
 8008c40:	d003      	beq.n	8008c4a <lwip_netconn_err_to_msg+0x22>
 8008c42:	f113 0f0f 	cmn.w	r3, #15
 8008c46:	d004      	beq.n	8008c52 <lwip_netconn_err_to_msg+0x2a>
 8008c48:	e005      	b.n	8008c56 <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <lwip_netconn_err_to_msg+0x4c>)
 8008c4c:	e00e      	b.n	8008c6c <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <lwip_netconn_err_to_msg+0x50>)
 8008c50:	e00c      	b.n	8008c6c <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008c52:	4b0a      	ldr	r3, [pc, #40]	; (8008c7c <lwip_netconn_err_to_msg+0x54>)
 8008c54:	e00a      	b.n	8008c6c <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d005      	beq.n	8008c6a <lwip_netconn_err_to_msg+0x42>
 8008c5e:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <lwip_netconn_err_to_msg+0x58>)
 8008c60:	227d      	movs	r2, #125	; 0x7d
 8008c62:	4908      	ldr	r1, [pc, #32]	; (8008c84 <lwip_netconn_err_to_msg+0x5c>)
 8008c64:	4808      	ldr	r0, [pc, #32]	; (8008c88 <lwip_netconn_err_to_msg+0x60>)
 8008c66:	f011 f959 	bl	8019f1c <iprintf>
      return NULL;
 8008c6a:	2300      	movs	r3, #0
  }
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	08021a54 	.word	0x08021a54
 8008c78:	08021a55 	.word	0x08021a55
 8008c7c:	08021a56 	.word	0x08021a56
 8008c80:	0801e55c 	.word	0x0801e55c
 8008c84:	0801e590 	.word	0x0801e590
 8008c88:	0801e5a0 	.word	0x0801e5a0

08008c8c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d105      	bne.n	8008ca8 <lwip_netconn_is_err_msg+0x1c>
 8008c9c:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <lwip_netconn_is_err_msg+0x5c>)
 8008c9e:	2285      	movs	r2, #133	; 0x85
 8008ca0:	4912      	ldr	r1, [pc, #72]	; (8008cec <lwip_netconn_is_err_msg+0x60>)
 8008ca2:	4813      	ldr	r0, [pc, #76]	; (8008cf0 <lwip_netconn_is_err_msg+0x64>)
 8008ca4:	f011 f93a 	bl	8019f1c <iprintf>

  if (msg == &netconn_aborted) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a12      	ldr	r2, [pc, #72]	; (8008cf4 <lwip_netconn_is_err_msg+0x68>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d104      	bne.n	8008cba <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	22f3      	movs	r2, #243	; 0xf3
 8008cb4:	701a      	strb	r2, [r3, #0]
    return 1;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e012      	b.n	8008ce0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a0e      	ldr	r2, [pc, #56]	; (8008cf8 <lwip_netconn_is_err_msg+0x6c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d104      	bne.n	8008ccc <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	22f2      	movs	r2, #242	; 0xf2
 8008cc6:	701a      	strb	r2, [r3, #0]
    return 1;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e009      	b.n	8008ce0 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a0b      	ldr	r2, [pc, #44]	; (8008cfc <lwip_netconn_is_err_msg+0x70>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d104      	bne.n	8008cde <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	22f1      	movs	r2, #241	; 0xf1
 8008cd8:	701a      	strb	r2, [r3, #0]
    return 1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e000      	b.n	8008ce0 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	0801e55c 	.word	0x0801e55c
 8008cec:	0801e5c8 	.word	0x0801e5c8
 8008cf0:	0801e5a0 	.word	0x0801e5a0
 8008cf4:	08021a54 	.word	0x08021a54
 8008cf8:	08021a55 	.word	0x08021a55
 8008cfc:	08021a56 	.word	0x08021a56

08008d00 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b088      	sub	sp, #32
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	607a      	str	r2, [r7, #4]
 8008d0c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d105      	bne.n	8008d20 <recv_udp+0x20>
 8008d14:	4b34      	ldr	r3, [pc, #208]	; (8008de8 <recv_udp+0xe8>)
 8008d16:	22e5      	movs	r2, #229	; 0xe5
 8008d18:	4934      	ldr	r1, [pc, #208]	; (8008dec <recv_udp+0xec>)
 8008d1a:	4835      	ldr	r0, [pc, #212]	; (8008df0 <recv_udp+0xf0>)
 8008d1c:	f011 f8fe 	bl	8019f1c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d105      	bne.n	8008d32 <recv_udp+0x32>
 8008d26:	4b30      	ldr	r3, [pc, #192]	; (8008de8 <recv_udp+0xe8>)
 8008d28:	22e6      	movs	r2, #230	; 0xe6
 8008d2a:	4932      	ldr	r1, [pc, #200]	; (8008df4 <recv_udp+0xf4>)
 8008d2c:	4830      	ldr	r0, [pc, #192]	; (8008df0 <recv_udp+0xf0>)
 8008d2e:	f011 f8f5 	bl	8019f1c <iprintf>
  conn = (struct netconn *)arg;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d103      	bne.n	8008d44 <recv_udp+0x44>
    pbuf_free(p);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f004 f91f 	bl	800cf80 <pbuf_free>
    return;
 8008d42:	e04d      	b.n	8008de0 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	68ba      	ldr	r2, [r7, #8]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d005      	beq.n	8008d5a <recv_udp+0x5a>
 8008d4e:	4b26      	ldr	r3, [pc, #152]	; (8008de8 <recv_udp+0xe8>)
 8008d50:	22ee      	movs	r2, #238	; 0xee
 8008d52:	4929      	ldr	r1, [pc, #164]	; (8008df8 <recv_udp+0xf8>)
 8008d54:	4826      	ldr	r0, [pc, #152]	; (8008df0 <recv_udp+0xf0>)
 8008d56:	f011 f8e1 	bl	8019f1c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	3310      	adds	r3, #16
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f010 f8e1 	bl	8018f26 <sys_mbox_valid>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d103      	bne.n	8008d72 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f004 f908 	bl	800cf80 <pbuf_free>
    return;
 8008d70:	e036      	b.n	8008de0 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008d72:	2006      	movs	r0, #6
 8008d74:	f003 fa06 	bl	800c184 <memp_malloc>
 8008d78:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d103      	bne.n	8008d88 <recv_udp+0x88>
    pbuf_free(p);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f004 f8fd 	bl	800cf80 <pbuf_free>
    return;
 8008d86:	e02b      	b.n	8008de0 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <recv_udp+0xa0>
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	e000      	b.n	8008da2 <recv_udp+0xa2>
 8008da0:	2300      	movs	r3, #0
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008daa:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	891b      	ldrh	r3, [r3, #8]
 8008db0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	3310      	adds	r3, #16
 8008db6:	69b9      	ldr	r1, [r7, #24]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f010 f83f 	bl	8018e3c <sys_mbox_trypost>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <recv_udp+0xcc>
    netbuf_delete(buf);
 8008dc4:	69b8      	ldr	r0, [r7, #24]
 8008dc6:	f001 fb7f 	bl	800a4c8 <netbuf_delete>
    return;
 8008dca:	e009      	b.n	8008de0 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <recv_udp+0xe0>
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd8:	8afa      	ldrh	r2, [r7, #22]
 8008dda:	2100      	movs	r1, #0
 8008ddc:	69f8      	ldr	r0, [r7, #28]
 8008dde:	4798      	blx	r3
  }
}
 8008de0:	3720      	adds	r7, #32
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	0801e55c 	.word	0x0801e55c
 8008dec:	0801e5d4 	.word	0x0801e5d4
 8008df0:	0801e5a0 	.word	0x0801e5a0
 8008df4:	0801e5f8 	.word	0x0801e5f8
 8008df8:	0801e618 	.word	0x0801e618

08008dfc <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b088      	sub	sp, #32
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
 8008e08:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d106      	bne.n	8008e1e <recv_tcp+0x22>
 8008e10:	4b36      	ldr	r3, [pc, #216]	; (8008eec <recv_tcp+0xf0>)
 8008e12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e16:	4936      	ldr	r1, [pc, #216]	; (8008ef0 <recv_tcp+0xf4>)
 8008e18:	4836      	ldr	r0, [pc, #216]	; (8008ef4 <recv_tcp+0xf8>)
 8008e1a:	f011 f87f 	bl	8019f1c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <recv_tcp+0x36>
 8008e24:	4b31      	ldr	r3, [pc, #196]	; (8008eec <recv_tcp+0xf0>)
 8008e26:	f240 122d 	movw	r2, #301	; 0x12d
 8008e2a:	4933      	ldr	r1, [pc, #204]	; (8008ef8 <recv_tcp+0xfc>)
 8008e2c:	4831      	ldr	r0, [pc, #196]	; (8008ef4 <recv_tcp+0xf8>)
 8008e2e:	f011 f875 	bl	8019f1c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8008e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d006      	beq.n	8008e48 <recv_tcp+0x4c>
 8008e3a:	4b2c      	ldr	r3, [pc, #176]	; (8008eec <recv_tcp+0xf0>)
 8008e3c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8008e40:	492e      	ldr	r1, [pc, #184]	; (8008efc <recv_tcp+0x100>)
 8008e42:	482c      	ldr	r0, [pc, #176]	; (8008ef4 <recv_tcp+0xf8>)
 8008e44:	f011 f86a 	bl	8019f1c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d102      	bne.n	8008e58 <recv_tcp+0x5c>
    return ERR_VAL;
 8008e52:	f06f 0305 	mvn.w	r3, #5
 8008e56:	e045      	b.n	8008ee4 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d006      	beq.n	8008e70 <recv_tcp+0x74>
 8008e62:	4b22      	ldr	r3, [pc, #136]	; (8008eec <recv_tcp+0xf0>)
 8008e64:	f240 1235 	movw	r2, #309	; 0x135
 8008e68:	4925      	ldr	r1, [pc, #148]	; (8008f00 <recv_tcp+0x104>)
 8008e6a:	4822      	ldr	r0, [pc, #136]	; (8008ef4 <recv_tcp+0xf8>)
 8008e6c:	f011 f856 	bl	8019f1c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	3310      	adds	r3, #16
 8008e74:	4618      	mov	r0, r3
 8008e76:	f010 f856 	bl	8018f26 <sys_mbox_valid>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10d      	bne.n	8008e9c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d008      	beq.n	8008e98 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	891b      	ldrh	r3, [r3, #8]
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	68b8      	ldr	r0, [r7, #8]
 8008e8e:	f005 f8e7 	bl	800e060 <tcp_recved>
      pbuf_free(p);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f004 f874 	bl	800cf80 <pbuf_free>
    }
    return ERR_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e023      	b.n	8008ee4 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <recv_tcp+0xb2>
    msg = p;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	891b      	ldrh	r3, [r3, #8]
 8008eaa:	83fb      	strh	r3, [r7, #30]
 8008eac:	e003      	b.n	8008eb6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8008eae:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <recv_tcp+0x108>)
 8008eb0:	61bb      	str	r3, [r7, #24]
    len = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	3310      	adds	r3, #16
 8008eba:	69b9      	ldr	r1, [r7, #24]
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f00f ffbd 	bl	8018e3c <sys_mbox_trypost>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ecc:	e00a      	b.n	8008ee4 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d005      	beq.n	8008ee2 <recv_tcp+0xe6>
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eda:	8bfa      	ldrh	r2, [r7, #30]
 8008edc:	2100      	movs	r1, #0
 8008ede:	6978      	ldr	r0, [r7, #20]
 8008ee0:	4798      	blx	r3
  }

  return ERR_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3720      	adds	r7, #32
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	0801e55c 	.word	0x0801e55c
 8008ef0:	0801e638 	.word	0x0801e638
 8008ef4:	0801e5a0 	.word	0x0801e5a0
 8008ef8:	0801e65c 	.word	0x0801e65c
 8008efc:	0801e67c 	.word	0x0801e67c
 8008f00:	0801e694 	.word	0x0801e694
 8008f04:	08021a56 	.word	0x08021a56

08008f08 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <poll_tcp+0x22>
 8008f1c:	4b2b      	ldr	r3, [pc, #172]	; (8008fcc <poll_tcp+0xc4>)
 8008f1e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8008f22:	492b      	ldr	r1, [pc, #172]	; (8008fd0 <poll_tcp+0xc8>)
 8008f24:	482b      	ldr	r0, [pc, #172]	; (8008fd4 <poll_tcp+0xcc>)
 8008f26:	f010 fff9 	bl	8019f1c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d104      	bne.n	8008f3c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008f32:	2101      	movs	r1, #1
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 ff77 	bl	8009e28 <lwip_netconn_do_writemore>
 8008f3a:	e016      	b.n	8008f6a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	785b      	ldrb	r3, [r3, #1]
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d112      	bne.n	8008f6a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <poll_tcp+0x5a>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	7a5b      	ldrb	r3, [r3, #9]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d005      	beq.n	8008f62 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	7a5a      	ldrb	r2, [r3, #9]
 8008f5c:	3a01      	subs	r2, #1
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008f62:	2101      	movs	r1, #1
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f000 fb49 	bl	80095fc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d023      	beq.n	8008fc0 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01f      	beq.n	8008fc0 <poll_tcp+0xb8>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008f88:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008f8c:	d318      	bcc.n	8008fc0 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d812      	bhi.n	8008fc0 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fa0:	f023 0310 	bic.w	r3, r3, #16
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d005      	beq.n	8008fc0 <poll_tcp+0xb8>
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2102      	movs	r1, #2
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	0801e55c 	.word	0x0801e55c
 8008fd0:	0801e6b4 	.word	0x0801e6b4
 8008fd4:	0801e5a0 	.word	0x0801e5a0

08008fd8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d106      	bne.n	8008ffe <sent_tcp+0x26>
 8008ff0:	4b21      	ldr	r3, [pc, #132]	; (8009078 <sent_tcp+0xa0>)
 8008ff2:	f240 1293 	movw	r2, #403	; 0x193
 8008ff6:	4921      	ldr	r1, [pc, #132]	; (800907c <sent_tcp+0xa4>)
 8008ff8:	4821      	ldr	r0, [pc, #132]	; (8009080 <sent_tcp+0xa8>)
 8008ffa:	f010 ff8f 	bl	8019f1c <iprintf>

  if (conn) {
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d034      	beq.n	800906e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d104      	bne.n	8009016 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800900c:	2101      	movs	r1, #1
 800900e:	6978      	ldr	r0, [r7, #20]
 8009010:	f000 ff0a 	bl	8009e28 <lwip_netconn_do_writemore>
 8009014:	e007      	b.n	8009026 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	785b      	ldrb	r3, [r3, #1]
 800901a:	2b04      	cmp	r3, #4
 800901c:	d103      	bne.n	8009026 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800901e:	2101      	movs	r1, #1
 8009020:	6978      	ldr	r0, [r7, #20]
 8009022:	f000 faeb 	bl	80095fc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d01f      	beq.n	800906e <sent_tcp+0x96>
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	685b      	ldr	r3, [r3, #4]
 8009032:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009036:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800903a:	d318      	bcc.n	800906e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009044:	2b04      	cmp	r3, #4
 8009046:	d812      	bhi.n	800906e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800904e:	f023 0310 	bic.w	r3, r3, #16
 8009052:	b2da      	uxtb	r2, r3
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905e:	2b00      	cmp	r3, #0
 8009060:	d005      	beq.n	800906e <sent_tcp+0x96>
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	2102      	movs	r1, #2
 800906a:	6978      	ldr	r0, [r7, #20]
 800906c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3718      	adds	r7, #24
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	0801e55c 	.word	0x0801e55c
 800907c:	0801e6b4 	.word	0x0801e6b4
 8009080:	0801e5a0 	.word	0x0801e5a0

08009084 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	460b      	mov	r3, r1
 800908e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d106      	bne.n	80090a8 <err_tcp+0x24>
 800909a:	4b61      	ldr	r3, [pc, #388]	; (8009220 <err_tcp+0x19c>)
 800909c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80090a0:	4960      	ldr	r1, [pc, #384]	; (8009224 <err_tcp+0x1a0>)
 80090a2:	4861      	ldr	r0, [pc, #388]	; (8009228 <err_tcp+0x1a4>)
 80090a4:	f010 ff3a 	bl	8019f1c <iprintf>

  SYS_ARCH_PROTECT(lev);
 80090a8:	f010 f858 	bl	801915c <sys_arch_protect>
 80090ac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	2200      	movs	r2, #0
 80090b2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090c0:	f043 0301 	orr.w	r3, r3, #1
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	785b      	ldrb	r3, [r3, #1]
 80090d0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	2200      	movs	r2, #0
 80090d6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80090d8:	69b8      	ldr	r0, [r7, #24]
 80090da:	f010 f84d 	bl	8019178 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d005      	beq.n	80090f2 <err_tcp+0x6e>
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ea:	2200      	movs	r2, #0
 80090ec:	2104      	movs	r1, #4
 80090ee:	69f8      	ldr	r0, [r7, #28]
 80090f0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <err_tcp+0x82>
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fe:	2200      	movs	r2, #0
 8009100:	2100      	movs	r1, #0
 8009102:	69f8      	ldr	r0, [r7, #28]
 8009104:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <err_tcp+0x96>
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009112:	2200      	movs	r2, #0
 8009114:	2102      	movs	r1, #2
 8009116:	69f8      	ldr	r0, [r7, #28]
 8009118:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800911a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800911e:	4618      	mov	r0, r3
 8009120:	f7ff fd82 	bl	8008c28 <lwip_netconn_err_to_msg>
 8009124:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	3310      	adds	r3, #16
 800912a:	4618      	mov	r0, r3
 800912c:	f00f fefb 	bl	8018f26 <sys_mbox_valid>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	3310      	adds	r3, #16
 800913a:	6939      	ldr	r1, [r7, #16]
 800913c:	4618      	mov	r0, r3
 800913e:	f00f fe7d 	bl	8018e3c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	3314      	adds	r3, #20
 8009146:	4618      	mov	r0, r3
 8009148:	f00f feed 	bl	8018f26 <sys_mbox_valid>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	3314      	adds	r3, #20
 8009156:	6939      	ldr	r1, [r7, #16]
 8009158:	4618      	mov	r0, r3
 800915a:	f00f fe6f 	bl	8018e3c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d005      	beq.n	8009170 <err_tcp+0xec>
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	2b04      	cmp	r3, #4
 8009168:	d002      	beq.n	8009170 <err_tcp+0xec>
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	2b03      	cmp	r3, #3
 800916e:	d146      	bne.n	80091fe <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009176:	f003 0304 	and.w	r3, r3, #4
 800917a:	2b00      	cmp	r3, #0
 800917c:	bf14      	ite	ne
 800917e:	2301      	movne	r3, #1
 8009180:	2300      	moveq	r3, #0
 8009182:	b2db      	uxtb	r3, r3
 8009184:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800918c:	f023 0304 	bic.w	r3, r3, #4
 8009190:	b2da      	uxtb	r2, r3
 8009192:	69fb      	ldr	r3, [r7, #28]
 8009194:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d13b      	bne.n	8009216 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d106      	bne.n	80091b4 <err_tcp+0x130>
 80091a6:	4b1e      	ldr	r3, [pc, #120]	; (8009220 <err_tcp+0x19c>)
 80091a8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80091ac:	491f      	ldr	r1, [pc, #124]	; (800922c <err_tcp+0x1a8>)
 80091ae:	481e      	ldr	r0, [pc, #120]	; (8009228 <err_tcp+0x1a4>)
 80091b0:	f010 feb4 	bl	8019f1c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b04      	cmp	r3, #4
 80091b8:	d104      	bne.n	80091c4 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091be:	2200      	movs	r2, #0
 80091c0:	711a      	strb	r2, [r3, #4]
 80091c2:	e003      	b.n	80091cc <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	78fa      	ldrb	r2, [r7, #3]
 80091ca:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	330c      	adds	r3, #12
 80091d4:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80091d6:	68b8      	ldr	r0, [r7, #8]
 80091d8:	f00f ff36 	bl	8019048 <sys_sem_valid>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <err_tcp+0x16c>
 80091e2:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <err_tcp+0x19c>)
 80091e4:	f240 12ef 	movw	r2, #495	; 0x1ef
 80091e8:	4911      	ldr	r1, [pc, #68]	; (8009230 <err_tcp+0x1ac>)
 80091ea:	480f      	ldr	r0, [pc, #60]	; (8009228 <err_tcp+0x1a4>)
 80091ec:	f010 fe96 	bl	8019f1c <iprintf>
      conn->current_msg = NULL;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	2200      	movs	r2, #0
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80091f6:	68b8      	ldr	r0, [r7, #8]
 80091f8:	f00f ff0c 	bl	8019014 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80091fc:	e00b      	b.n	8009216 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	2b00      	cmp	r3, #0
 8009204:	d008      	beq.n	8009218 <err_tcp+0x194>
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <err_tcp+0x19c>)
 8009208:	f240 12f7 	movw	r2, #503	; 0x1f7
 800920c:	4909      	ldr	r1, [pc, #36]	; (8009234 <err_tcp+0x1b0>)
 800920e:	4806      	ldr	r0, [pc, #24]	; (8009228 <err_tcp+0x1a4>)
 8009210:	f010 fe84 	bl	8019f1c <iprintf>
  }
}
 8009214:	e000      	b.n	8009218 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8009216:	bf00      	nop
}
 8009218:	bf00      	nop
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	0801e55c 	.word	0x0801e55c
 8009224:	0801e6b4 	.word	0x0801e6b4
 8009228:	0801e5a0 	.word	0x0801e5a0
 800922c:	0801e6c4 	.word	0x0801e6c4
 8009230:	0801e6e0 	.word	0x0801e6e0
 8009234:	0801e6fc 	.word	0x0801e6fc

08009238 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009246:	6879      	ldr	r1, [r7, #4]
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f005 fee3 	bl	800f014 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800924e:	490a      	ldr	r1, [pc, #40]	; (8009278 <setup_tcp+0x40>)
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f005 fef1 	bl	800f038 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009256:	4909      	ldr	r1, [pc, #36]	; (800927c <setup_tcp+0x44>)
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f005 ff0f 	bl	800f07c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800925e:	2202      	movs	r2, #2
 8009260:	4907      	ldr	r1, [pc, #28]	; (8009280 <setup_tcp+0x48>)
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f005 ff66 	bl	800f134 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009268:	4906      	ldr	r1, [pc, #24]	; (8009284 <setup_tcp+0x4c>)
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f005 ff28 	bl	800f0c0 <tcp_err>
}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}
 8009278:	08008dfd 	.word	0x08008dfd
 800927c:	08008fd9 	.word	0x08008fd9
 8009280:	08008f09 	.word	0x08008f09
 8009284:	08009085 	.word	0x08009085

08009288 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009288:	b590      	push	{r4, r7, lr}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009290:	2300      	movs	r3, #0
 8009292:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d006      	beq.n	80092ac <pcb_new+0x24>
 800929e:	4b2b      	ldr	r3, [pc, #172]	; (800934c <pcb_new+0xc4>)
 80092a0:	f240 2265 	movw	r2, #613	; 0x265
 80092a4:	492a      	ldr	r1, [pc, #168]	; (8009350 <pcb_new+0xc8>)
 80092a6:	482b      	ldr	r0, [pc, #172]	; (8009354 <pcb_new+0xcc>)
 80092a8:	f010 fe38 	bl	8019f1c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092b6:	2b10      	cmp	r3, #16
 80092b8:	d022      	beq.n	8009300 <pcb_new+0x78>
 80092ba:	2b20      	cmp	r3, #32
 80092bc:	d133      	bne.n	8009326 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681c      	ldr	r4, [r3, #0]
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f00b f9b4 	bl	8014632 <udp_new_ip_type>
 80092ca:	4603      	mov	r3, r0
 80092cc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d02a      	beq.n	800932e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	2b22      	cmp	r3, #34	; 0x22
 80092e0:	d104      	bne.n	80092ec <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	6858      	ldr	r0, [r3, #4]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	4917      	ldr	r1, [pc, #92]	; (8009358 <pcb_new+0xd0>)
 80092fa:	f00b f921 	bl	8014540 <udp_recv>
      }
      break;
 80092fe:	e016      	b.n	800932e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681c      	ldr	r4, [r3, #0]
 8009304:	7bfb      	ldrb	r3, [r7, #15]
 8009306:	4618      	mov	r0, r3
 8009308:	f005 fe76 	bl	800eff8 <tcp_new_ip_type>
 800930c:	4603      	mov	r3, r0
 800930e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00b      	beq.n	8009332 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff ff8a 	bl	8009238 <setup_tcp>
      }
      break;
 8009324:	e005      	b.n	8009332 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	22fa      	movs	r2, #250	; 0xfa
 800932a:	711a      	strb	r2, [r3, #4]
      return;
 800932c:	e00a      	b.n	8009344 <pcb_new+0xbc>
      break;
 800932e:	bf00      	nop
 8009330:	e000      	b.n	8009334 <pcb_new+0xac>
      break;
 8009332:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d102      	bne.n	8009344 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	711a      	strb	r2, [r3, #4]
  }
}
 8009344:	3714      	adds	r7, #20
 8009346:	46bd      	mov	sp, r7
 8009348:	bd90      	pop	{r4, r7, pc}
 800934a:	bf00      	nop
 800934c:	0801e55c 	.word	0x0801e55c
 8009350:	0801e740 	.word	0x0801e740
 8009354:	0801e5a0 	.word	0x0801e5a0
 8009358:	08008d01 	.word	0x08008d01

0800935c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009378:	68f8      	ldr	r0, [r7, #12]
 800937a:	f7ff ff85 	bl	8009288 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009398:	2007      	movs	r0, #7
 800939a:	f002 fef3 	bl	800c184 <memp_malloc>
 800939e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d101      	bne.n	80093aa <netconn_alloc+0x22>
    return NULL;
 80093a6:	2300      	movs	r3, #0
 80093a8:	e056      	b.n	8009458 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	79fa      	ldrb	r2, [r7, #7]
 80093b4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093c2:	2b10      	cmp	r3, #16
 80093c4:	d004      	beq.n	80093d0 <netconn_alloc+0x48>
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	d105      	bne.n	80093d6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80093ca:	2306      	movs	r3, #6
 80093cc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80093ce:	e00a      	b.n	80093e6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80093d0:	2306      	movs	r3, #6
 80093d2:	617b      	str	r3, [r7, #20]
      break;
 80093d4:	e007      	b.n	80093e6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80093d6:	4b22      	ldr	r3, [pc, #136]	; (8009460 <netconn_alloc+0xd8>)
 80093d8:	f240 22e5 	movw	r2, #741	; 0x2e5
 80093dc:	4921      	ldr	r1, [pc, #132]	; (8009464 <netconn_alloc+0xdc>)
 80093de:	4822      	ldr	r0, [pc, #136]	; (8009468 <netconn_alloc+0xe0>)
 80093e0:	f010 fd9c 	bl	8019f1c <iprintf>
      goto free_and_return;
 80093e4:	e033      	b.n	800944e <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3310      	adds	r3, #16
 80093ea:	6979      	ldr	r1, [r7, #20]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f00f fcf1 	bl	8018dd4 <sys_mbox_new>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d129      	bne.n	800944c <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	330c      	adds	r3, #12
 80093fc:	2100      	movs	r1, #0
 80093fe:	4618      	mov	r0, r3
 8009400:	f00f fdaf 	bl	8018f62 <sys_sem_new>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d005      	beq.n	8009416 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	3310      	adds	r3, #16
 800940e:	4618      	mov	r0, r3
 8009410:	f00f fd02 	bl	8018e18 <sys_mbox_free>
    goto free_and_return;
 8009414:	e01b      	b.n	800944e <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	3314      	adds	r3, #20
 800941a:	4618      	mov	r0, r3
 800941c:	f00f fd94 	bl	8018f48 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f04f 32ff 	mov.w	r2, #4294967295
 800942c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	7cfa      	ldrb	r2, [r7, #19]
 8009444:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	e005      	b.n	8009458 <netconn_alloc+0xd0>
    goto free_and_return;
 800944c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	2007      	movs	r0, #7
 8009452:	f002 fee9 	bl	800c228 <memp_free>
  return NULL;
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	0801e55c 	.word	0x0801e55c
 8009464:	0801e760 	.word	0x0801e760
 8009468:	0801e5a0 	.word	0x0801e5a0

0800946c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d006      	beq.n	800948a <netconn_free+0x1e>
 800947c:	4b1b      	ldr	r3, [pc, #108]	; (80094ec <netconn_free+0x80>)
 800947e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009482:	491b      	ldr	r1, [pc, #108]	; (80094f0 <netconn_free+0x84>)
 8009484:	481b      	ldr	r0, [pc, #108]	; (80094f4 <netconn_free+0x88>)
 8009486:	f010 fd49 	bl	8019f1c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	3310      	adds	r3, #16
 800948e:	4618      	mov	r0, r3
 8009490:	f00f fd49 	bl	8018f26 <sys_mbox_valid>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d006      	beq.n	80094a8 <netconn_free+0x3c>
 800949a:	4b14      	ldr	r3, [pc, #80]	; (80094ec <netconn_free+0x80>)
 800949c:	f44f 7249 	mov.w	r2, #804	; 0x324
 80094a0:	4915      	ldr	r1, [pc, #84]	; (80094f8 <netconn_free+0x8c>)
 80094a2:	4814      	ldr	r0, [pc, #80]	; (80094f4 <netconn_free+0x88>)
 80094a4:	f010 fd3a 	bl	8019f1c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3314      	adds	r3, #20
 80094ac:	4618      	mov	r0, r3
 80094ae:	f00f fd3a 	bl	8018f26 <sys_mbox_valid>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d006      	beq.n	80094c6 <netconn_free+0x5a>
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <netconn_free+0x80>)
 80094ba:	f240 3227 	movw	r2, #807	; 0x327
 80094be:	490f      	ldr	r1, [pc, #60]	; (80094fc <netconn_free+0x90>)
 80094c0:	480c      	ldr	r0, [pc, #48]	; (80094f4 <netconn_free+0x88>)
 80094c2:	f010 fd2b 	bl	8019f1c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	330c      	adds	r3, #12
 80094ca:	4618      	mov	r0, r3
 80094cc:	f00f fdaf 	bl	801902e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	330c      	adds	r3, #12
 80094d4:	4618      	mov	r0, r3
 80094d6:	f00f fdc8 	bl	801906a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	2007      	movs	r0, #7
 80094de:	f002 fea3 	bl	800c228 <memp_free>
}
 80094e2:	bf00      	nop
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	0801e55c 	.word	0x0801e55c
 80094f0:	0801e788 	.word	0x0801e788
 80094f4:	0801e5a0 	.word	0x0801e5a0
 80094f8:	0801e7b8 	.word	0x0801e7b8
 80094fc:	0801e7f4 	.word	0x0801e7f4

08009500 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3310      	adds	r3, #16
 800950c:	4618      	mov	r0, r3
 800950e:	f00f fd0a 	bl	8018f26 <sys_mbox_valid>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d02f      	beq.n	8009578 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009518:	e018      	b.n	800954c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009522:	2b10      	cmp	r3, #16
 8009524:	d10e      	bne.n	8009544 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f107 020f 	add.w	r2, r7, #15
 800952c:	4611      	mov	r1, r2
 800952e:	4618      	mov	r0, r3
 8009530:	f7ff fbac 	bl	8008c8c <lwip_netconn_is_err_msg>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d108      	bne.n	800954c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	4618      	mov	r0, r3
 800953e:	f003 fd1f 	bl	800cf80 <pbuf_free>
 8009542:	e003      	b.n	800954c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	4618      	mov	r0, r3
 8009548:	f000 ffbe 	bl	800a4c8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	3310      	adds	r3, #16
 8009550:	f107 0210 	add.w	r2, r7, #16
 8009554:	4611      	mov	r1, r2
 8009556:	4618      	mov	r0, r3
 8009558:	f00f fcc9 	bl	8018eee <sys_arch_mbox_tryfetch>
 800955c:	4603      	mov	r3, r0
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009562:	d1da      	bne.n	800951a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3310      	adds	r3, #16
 8009568:	4618      	mov	r0, r3
 800956a:	f00f fc55 	bl	8018e18 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	3310      	adds	r3, #16
 8009572:	4618      	mov	r0, r3
 8009574:	f00f fce8 	bl	8018f48 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3314      	adds	r3, #20
 800957c:	4618      	mov	r0, r3
 800957e:	f00f fcd2 	bl	8018f26 <sys_mbox_valid>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d034      	beq.n	80095f2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009588:	e01d      	b.n	80095c6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f107 020e 	add.w	r2, r7, #14
 8009590:	4611      	mov	r1, r2
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff fb7a 	bl	8008c8c <lwip_netconn_is_err_msg>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d113      	bne.n	80095c6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80095a2:	6978      	ldr	r0, [r7, #20]
 80095a4:	f7ff ffac 	bl	8009500 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f004 fc55 	bl	800de64 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2200      	movs	r2, #0
 80095be:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80095c0:	6978      	ldr	r0, [r7, #20]
 80095c2:	f7ff ff53 	bl	800946c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3314      	adds	r3, #20
 80095ca:	f107 0210 	add.w	r2, r7, #16
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f00f fc8c 	bl	8018eee <sys_arch_mbox_tryfetch>
 80095d6:	4603      	mov	r3, r0
 80095d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095dc:	d1d5      	bne.n	800958a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3314      	adds	r3, #20
 80095e2:	4618      	mov	r0, r3
 80095e4:	f00f fc18 	bl	8018e18 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3314      	adds	r3, #20
 80095ec:	4618      	mov	r0, r3
 80095ee:	f00f fcab 	bl	8018f48 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80095f2:	bf00      	nop
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
	...

080095fc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009608:	2300      	movs	r3, #0
 800960a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <lwip_netconn_do_close_internal+0x24>
 8009612:	4ba1      	ldr	r3, [pc, #644]	; (8009898 <lwip_netconn_do_close_internal+0x29c>)
 8009614:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009618:	49a0      	ldr	r1, [pc, #640]	; (800989c <lwip_netconn_do_close_internal+0x2a0>)
 800961a:	48a1      	ldr	r0, [pc, #644]	; (80098a0 <lwip_netconn_do_close_internal+0x2a4>)
 800961c:	f010 fc7e 	bl	8019f1c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009628:	2b10      	cmp	r3, #16
 800962a:	d006      	beq.n	800963a <lwip_netconn_do_close_internal+0x3e>
 800962c:	4b9a      	ldr	r3, [pc, #616]	; (8009898 <lwip_netconn_do_close_internal+0x29c>)
 800962e:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009632:	499c      	ldr	r1, [pc, #624]	; (80098a4 <lwip_netconn_do_close_internal+0x2a8>)
 8009634:	489a      	ldr	r0, [pc, #616]	; (80098a0 <lwip_netconn_do_close_internal+0x2a4>)
 8009636:	f010 fc71 	bl	8019f1c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2b04      	cmp	r3, #4
 8009640:	d006      	beq.n	8009650 <lwip_netconn_do_close_internal+0x54>
 8009642:	4b95      	ldr	r3, [pc, #596]	; (8009898 <lwip_netconn_do_close_internal+0x29c>)
 8009644:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009648:	4997      	ldr	r1, [pc, #604]	; (80098a8 <lwip_netconn_do_close_internal+0x2ac>)
 800964a:	4895      	ldr	r0, [pc, #596]	; (80098a0 <lwip_netconn_do_close_internal+0x2a4>)
 800964c:	f010 fc66 	bl	8019f1c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d106      	bne.n	8009666 <lwip_netconn_do_close_internal+0x6a>
 8009658:	4b8f      	ldr	r3, [pc, #572]	; (8009898 <lwip_netconn_do_close_internal+0x29c>)
 800965a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800965e:	4993      	ldr	r1, [pc, #588]	; (80098ac <lwip_netconn_do_close_internal+0x2b0>)
 8009660:	488f      	ldr	r0, [pc, #572]	; (80098a0 <lwip_netconn_do_close_internal+0x2a4>)
 8009662:	f010 fc5b 	bl	8019f1c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	d106      	bne.n	800967c <lwip_netconn_do_close_internal+0x80>
 800966e:	4b8a      	ldr	r3, [pc, #552]	; (8009898 <lwip_netconn_do_close_internal+0x29c>)
 8009670:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009674:	498e      	ldr	r1, [pc, #568]	; (80098b0 <lwip_netconn_do_close_internal+0x2b4>)
 8009676:	488a      	ldr	r0, [pc, #552]	; (80098a0 <lwip_netconn_do_close_internal+0x2a4>)
 8009678:	f010 fc50 	bl	8019f1c <iprintf>

  tpcb = conn->pcb.tcp;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	7a1b      	ldrb	r3, [r3, #8]
 8009688:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	2b03      	cmp	r3, #3
 800969e:	d102      	bne.n	80096a6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80096a0:	2301      	movs	r3, #1
 80096a2:	75bb      	strb	r3, [r7, #22]
 80096a4:	e01f      	b.n	80096e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00e      	beq.n	80096ca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80096b0:	2b05      	cmp	r3, #5
 80096b2:	d007      	beq.n	80096c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80096b8:	2b06      	cmp	r3, #6
 80096ba:	d003      	beq.n	80096c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80096c0:	2b08      	cmp	r3, #8
 80096c2:	d102      	bne.n	80096ca <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80096c4:	2301      	movs	r3, #1
 80096c6:	75bb      	strb	r3, [r7, #22]
 80096c8:	e00d      	b.n	80096e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80096ca:	7b7b      	ldrb	r3, [r7, #13]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d008      	beq.n	80096e2 <lwip_netconn_do_close_internal+0xe6>
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	8b5b      	ldrh	r3, [r3, #26]
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80096dc:	2301      	movs	r3, #1
 80096de:	75bb      	strb	r3, [r7, #22]
 80096e0:	e001      	b.n	80096e6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80096e6:	7dbb      	ldrb	r3, [r7, #22]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d003      	beq.n	80096f4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80096ec:	2100      	movs	r1, #0
 80096ee:	6938      	ldr	r0, [r7, #16]
 80096f0:	f005 fc90 	bl	800f014 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	7d1b      	ldrb	r3, [r3, #20]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d104      	bne.n	8009706 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80096fc:	2100      	movs	r1, #0
 80096fe:	6938      	ldr	r0, [r7, #16]
 8009700:	f005 fd00 	bl	800f104 <tcp_accept>
 8009704:	e01d      	b.n	8009742 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009706:	7bbb      	ldrb	r3, [r7, #14]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d007      	beq.n	800971c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800970c:	2100      	movs	r1, #0
 800970e:	6938      	ldr	r0, [r7, #16]
 8009710:	f005 fc92 	bl	800f038 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009714:	2100      	movs	r1, #0
 8009716:	6938      	ldr	r0, [r7, #16]
 8009718:	f005 fcf4 	bl	800f104 <tcp_accept>
    }
    if (shut_tx) {
 800971c:	7b7b      	ldrb	r3, [r7, #13]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009722:	2100      	movs	r1, #0
 8009724:	6938      	ldr	r0, [r7, #16]
 8009726:	f005 fca9 	bl	800f07c <tcp_sent>
    }
    if (shut_close) {
 800972a:	7dbb      	ldrb	r3, [r7, #22]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009730:	2200      	movs	r2, #0
 8009732:	2100      	movs	r1, #0
 8009734:	6938      	ldr	r0, [r7, #16]
 8009736:	f005 fcfd 	bl	800f134 <tcp_poll>
      tcp_err(tpcb, NULL);
 800973a:	2100      	movs	r1, #0
 800973c:	6938      	ldr	r0, [r7, #16]
 800973e:	f005 fcbf 	bl	800f0c0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009742:	7dbb      	ldrb	r3, [r7, #22]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d005      	beq.n	8009754 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009748:	6938      	ldr	r0, [r7, #16]
 800974a:	f004 fa47 	bl	800dbdc <tcp_close>
 800974e:	4603      	mov	r3, r0
 8009750:	75fb      	strb	r3, [r7, #23]
 8009752:	e007      	b.n	8009764 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009754:	7bbb      	ldrb	r3, [r7, #14]
 8009756:	7b7a      	ldrb	r2, [r7, #13]
 8009758:	4619      	mov	r1, r3
 800975a:	6938      	ldr	r0, [r7, #16]
 800975c:	f004 fa6a 	bl	800dc34 <tcp_shutdown>
 8009760:	4603      	mov	r3, r0
 8009762:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d102      	bne.n	8009772 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800976c:	2301      	movs	r3, #1
 800976e:	757b      	strb	r3, [r7, #21]
 8009770:	e016      	b.n	80097a0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d10f      	bne.n	800979c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	7a5b      	ldrb	r3, [r3, #9]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10c      	bne.n	80097a0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009786:	2301      	movs	r3, #1
 8009788:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800978a:	7dbb      	ldrb	r3, [r7, #22]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d007      	beq.n	80097a0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009790:	6938      	ldr	r0, [r7, #16]
 8009792:	f004 fb67 	bl	800de64 <tcp_abort>
          err = ERR_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	75fb      	strb	r3, [r7, #23]
 800979a:	e001      	b.n	80097a0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800979c:	2301      	movs	r3, #1
 800979e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80097a0:	7d7b      	ldrb	r3, [r7, #21]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d044      	beq.n	8009830 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	330c      	adds	r3, #12
 80097ae:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	7dfa      	ldrb	r2, [r7, #23]
 80097b6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80097c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d129      	bne.n	8009820 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80097cc:	7dbb      	ldrb	r3, [r7, #22]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00c      	beq.n	80097ec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <lwip_netconn_do_close_internal+0x1f0>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e4:	2200      	movs	r2, #0
 80097e6:	2104      	movs	r1, #4
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	4798      	blx	r3
      }
      if (shut_rx) {
 80097ec:	7bbb      	ldrb	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d005      	beq.n	8009806 <lwip_netconn_do_close_internal+0x20a>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	2200      	movs	r2, #0
 8009800:	2100      	movs	r1, #0
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
      }
      if (shut_tx) {
 8009806:	7b7b      	ldrb	r3, [r7, #13]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d009      	beq.n	8009820 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009810:	2b00      	cmp	r3, #0
 8009812:	d005      	beq.n	8009820 <lwip_netconn_do_close_internal+0x224>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009818:	2200      	movs	r2, #0
 800981a:	2102      	movs	r1, #2
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009820:	78fb      	ldrb	r3, [r7, #3]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009826:	68b8      	ldr	r0, [r7, #8]
 8009828:	f00f fbf4 	bl	8019014 <sys_sem_signal>
    }
    return ERR_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	e02e      	b.n	800988e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8009830:	7d7b      	ldrb	r3, [r7, #21]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d11e      	bne.n	8009874 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	7d1b      	ldrb	r3, [r3, #20]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d106      	bne.n	800984c <lwip_netconn_do_close_internal+0x250>
 800983e:	4b16      	ldr	r3, [pc, #88]	; (8009898 <lwip_netconn_do_close_internal+0x29c>)
 8009840:	f240 4241 	movw	r2, #1089	; 0x441
 8009844:	491b      	ldr	r1, [pc, #108]	; (80098b4 <lwip_netconn_do_close_internal+0x2b8>)
 8009846:	4816      	ldr	r0, [pc, #88]	; (80098a0 <lwip_netconn_do_close_internal+0x2a4>)
 8009848:	f010 fb68 	bl	8019f1c <iprintf>
    if (shut_tx) {
 800984c:	7b7b      	ldrb	r3, [r7, #13]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8009852:	4919      	ldr	r1, [pc, #100]	; (80098b8 <lwip_netconn_do_close_internal+0x2bc>)
 8009854:	6938      	ldr	r0, [r7, #16]
 8009856:	f005 fc11 	bl	800f07c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800985a:	2201      	movs	r2, #1
 800985c:	4917      	ldr	r1, [pc, #92]	; (80098bc <lwip_netconn_do_close_internal+0x2c0>)
 800985e:	6938      	ldr	r0, [r7, #16]
 8009860:	f005 fc68 	bl	800f134 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009864:	4916      	ldr	r1, [pc, #88]	; (80098c0 <lwip_netconn_do_close_internal+0x2c4>)
 8009866:	6938      	ldr	r0, [r7, #16]
 8009868:	f005 fc2a 	bl	800f0c0 <tcp_err>
    tcp_arg(tpcb, conn);
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	6938      	ldr	r0, [r7, #16]
 8009870:	f005 fbd0 	bl	800f014 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d106      	bne.n	800988a <lwip_netconn_do_close_internal+0x28e>
 800987c:	4b06      	ldr	r3, [pc, #24]	; (8009898 <lwip_netconn_do_close_internal+0x29c>)
 800987e:	f240 424d 	movw	r2, #1101	; 0x44d
 8009882:	4910      	ldr	r1, [pc, #64]	; (80098c4 <lwip_netconn_do_close_internal+0x2c8>)
 8009884:	4806      	ldr	r0, [pc, #24]	; (80098a0 <lwip_netconn_do_close_internal+0x2a4>)
 8009886:	f010 fb49 	bl	8019f1c <iprintf>
  return err;
 800988a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	0801e55c 	.word	0x0801e55c
 800989c:	0801e830 	.word	0x0801e830
 80098a0:	0801e5a0 	.word	0x0801e5a0
 80098a4:	0801e840 	.word	0x0801e840
 80098a8:	0801e860 	.word	0x0801e860
 80098ac:	0801e884 	.word	0x0801e884
 80098b0:	0801e6c4 	.word	0x0801e6c4
 80098b4:	0801e898 	.word	0x0801e898
 80098b8:	08008fd9 	.word	0x08008fd9
 80098bc:	08008f09 	.word	0x08008f09
 80098c0:	08009085 	.word	0x08009085
 80098c4:	0801e8bc 	.word	0x0801e8bc

080098c8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <lwip_netconn_do_delconn+0x36>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098ec:	2b10      	cmp	r3, #16
 80098ee:	d006      	beq.n	80098fe <lwip_netconn_do_delconn+0x36>
 80098f0:	4b61      	ldr	r3, [pc, #388]	; (8009a78 <lwip_netconn_do_delconn+0x1b0>)
 80098f2:	f240 425f 	movw	r2, #1119	; 0x45f
 80098f6:	4961      	ldr	r1, [pc, #388]	; (8009a7c <lwip_netconn_do_delconn+0x1b4>)
 80098f8:	4861      	ldr	r0, [pc, #388]	; (8009a80 <lwip_netconn_do_delconn+0x1b8>)
 80098fa:	f010 fb0f 	bl	8019f1c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80098fe:	7afb      	ldrb	r3, [r7, #11]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <lwip_netconn_do_delconn+0x48>
 8009904:	7afb      	ldrb	r3, [r7, #11]
 8009906:	2b02      	cmp	r3, #2
 8009908:	d002      	beq.n	8009910 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	2b03      	cmp	r3, #3
 800990e:	d10a      	bne.n	8009926 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8009910:	7afb      	ldrb	r3, [r7, #11]
 8009912:	2b03      	cmp	r3, #3
 8009914:	d10b      	bne.n	800992e <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800991e:	f003 0304 	and.w	r3, r3, #4
 8009922:	2b00      	cmp	r3, #0
 8009924:	d103      	bne.n	800992e <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	22fb      	movs	r2, #251	; 0xfb
 800992a:	711a      	strb	r2, [r3, #4]
 800992c:	e098      	b.n	8009a60 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800992e:	7afb      	ldrb	r3, [r7, #11]
 8009930:	2b03      	cmp	r3, #3
 8009932:	d10e      	bne.n	8009952 <lwip_netconn_do_delconn+0x8a>
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d106      	bne.n	8009952 <lwip_netconn_do_delconn+0x8a>
 8009944:	4b4c      	ldr	r3, [pc, #304]	; (8009a78 <lwip_netconn_do_delconn+0x1b0>)
 8009946:	f240 427b 	movw	r2, #1147	; 0x47b
 800994a:	494e      	ldr	r1, [pc, #312]	; (8009a84 <lwip_netconn_do_delconn+0x1bc>)
 800994c:	484c      	ldr	r0, [pc, #304]	; (8009a80 <lwip_netconn_do_delconn+0x1b8>)
 800994e:	f010 fae5 	bl	8019f1c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fdcf 	bl	8009500 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d05f      	beq.n	8009a2c <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009976:	2b10      	cmp	r3, #16
 8009978:	d00e      	beq.n	8009998 <lwip_netconn_do_delconn+0xd0>
 800997a:	2b20      	cmp	r3, #32
 800997c:	d000      	beq.n	8009980 <lwip_netconn_do_delconn+0xb8>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800997e:	e051      	b.n	8009a24 <lwip_netconn_do_delconn+0x15c>
          msg->conn->pcb.udp->recv_arg = NULL;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	4618      	mov	r0, r3
 8009992:	f00a fdf5 	bl	8014580 <udp_remove>
          break;
 8009996:	e045      	b.n	8009a24 <lwip_netconn_do_delconn+0x15c>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d006      	beq.n	80099b0 <lwip_netconn_do_delconn+0xe8>
 80099a2:	4b35      	ldr	r3, [pc, #212]	; (8009a78 <lwip_netconn_do_delconn+0x1b0>)
 80099a4:	f240 4294 	movw	r2, #1172	; 0x494
 80099a8:	4937      	ldr	r1, [pc, #220]	; (8009a88 <lwip_netconn_do_delconn+0x1c0>)
 80099aa:	4835      	ldr	r0, [pc, #212]	; (8009a80 <lwip_netconn_do_delconn+0x1b8>)
 80099ac:	f010 fab6 	bl	8019f1c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2204      	movs	r2, #4
 80099b6:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2203      	movs	r2, #3
 80099bc:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	625a      	str	r2, [r3, #36]	; 0x24
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fe15 	bl	80095fc <lwip_netconn_do_close_internal>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d04a      	beq.n	8009a6e <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d006      	beq.n	80099f0 <lwip_netconn_do_delconn+0x128>
 80099e2:	4b25      	ldr	r3, [pc, #148]	; (8009a78 <lwip_netconn_do_delconn+0x1b0>)
 80099e4:	f240 429a 	movw	r2, #1178	; 0x49a
 80099e8:	4928      	ldr	r1, [pc, #160]	; (8009a8c <lwip_netconn_do_delconn+0x1c4>)
 80099ea:	4825      	ldr	r0, [pc, #148]	; (8009a80 <lwip_netconn_do_delconn+0x1b8>)
 80099ec:	f010 fa96 	bl	8019f1c <iprintf>
            UNLOCK_TCPIP_CORE();
 80099f0:	4827      	ldr	r0, [pc, #156]	; (8009a90 <lwip_netconn_do_delconn+0x1c8>)
 80099f2:	f00f fb80 	bl	80190f6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	330c      	adds	r3, #12
 80099fc:	2100      	movs	r1, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f00f fad7 	bl	8018fb2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009a04:	4822      	ldr	r0, [pc, #136]	; (8009a90 <lwip_netconn_do_delconn+0x1c8>)
 8009a06:	f00f fb67 	bl	80190d8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	785b      	ldrb	r3, [r3, #1]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d02c      	beq.n	8009a6e <lwip_netconn_do_delconn+0x1a6>
 8009a14:	4b18      	ldr	r3, [pc, #96]	; (8009a78 <lwip_netconn_do_delconn+0x1b0>)
 8009a16:	f240 429e 	movw	r2, #1182	; 0x49e
 8009a1a:	491c      	ldr	r1, [pc, #112]	; (8009a8c <lwip_netconn_do_delconn+0x1c4>)
 8009a1c:	4818      	ldr	r0, [pc, #96]	; (8009a80 <lwip_netconn_do_delconn+0x1b8>)
 8009a1e:	f010 fa7d 	bl	8019f1c <iprintf>
          return;
 8009a22:	e024      	b.n	8009a6e <lwip_netconn_do_delconn+0x1a6>
      }
      msg->conn->pcb.tcp = NULL;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d007      	beq.n	8009a46 <lwip_netconn_do_delconn+0x17e>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	6810      	ldr	r0, [r2, #0]
 8009a40:	2200      	movs	r2, #0
 8009a42:	2100      	movs	r1, #0
 8009a44:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d007      	beq.n	8009a60 <lwip_netconn_do_delconn+0x198>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	6810      	ldr	r0, [r2, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2102      	movs	r1, #2
 8009a5e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	330c      	adds	r3, #12
 8009a66:	4618      	mov	r0, r3
 8009a68:	f00f faee 	bl	8019048 <sys_sem_valid>
 8009a6c:	e000      	b.n	8009a70 <lwip_netconn_do_delconn+0x1a8>
          return;
 8009a6e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009a70:	3710      	adds	r7, #16
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	0801e55c 	.word	0x0801e55c
 8009a7c:	0801e8cc 	.word	0x0801e8cc
 8009a80:	0801e5a0 	.word	0x0801e5a0
 8009a84:	0801e8e0 	.word	0x0801e8e0
 8009a88:	0801e900 	.word	0x0801e900
 8009a8c:	0801e91c 	.word	0x0801e91c
 8009a90:	20024800 	.word	0x20024800

08009a94 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d026      	beq.n	8009af8 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ab4:	2b10      	cmp	r3, #16
 8009ab6:	d00e      	beq.n	8009ad6 <lwip_netconn_do_bind+0x42>
 8009ab8:	2b20      	cmp	r3, #32
 8009aba:	d119      	bne.n	8009af0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	6858      	ldr	r0, [r3, #4]
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	6899      	ldr	r1, [r3, #8]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	899b      	ldrh	r3, [r3, #12]
 8009aca:	461a      	mov	r2, r3
 8009acc:	f00a fc42 	bl	8014354 <udp_bind>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]
        break;
 8009ad4:	e012      	b.n	8009afc <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	6858      	ldr	r0, [r3, #4]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	6899      	ldr	r1, [r3, #8]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	899b      	ldrh	r3, [r3, #12]
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	f004 f9c9 	bl	800de7c <tcp_bind>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]
        break;
 8009aee:	e005      	b.n	8009afc <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009af0:	23fa      	movs	r3, #250	; 0xfa
 8009af2:	73fb      	strb	r3, [r7, #15]
        break;
 8009af4:	bf00      	nop
 8009af6:	e001      	b.n	8009afc <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 8009af8:	23fa      	movs	r3, #250	; 0xfa
 8009afa:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	7bfa      	ldrb	r2, [r7, #15]
 8009b00:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009b02:	bf00      	nop
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009b28:	f06f 0305 	mvn.w	r3, #5
 8009b2c:	e074      	b.n	8009c18 <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	2b03      	cmp	r3, #3
 8009b34:	d006      	beq.n	8009b44 <lwip_netconn_do_connected+0x38>
 8009b36:	4b3a      	ldr	r3, [pc, #232]	; (8009c20 <lwip_netconn_do_connected+0x114>)
 8009b38:	f240 5223 	movw	r2, #1315	; 0x523
 8009b3c:	4939      	ldr	r1, [pc, #228]	; (8009c24 <lwip_netconn_do_connected+0x118>)
 8009b3e:	483a      	ldr	r0, [pc, #232]	; (8009c28 <lwip_netconn_do_connected+0x11c>)
 8009b40:	f010 f9ec 	bl	8019f1c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10d      	bne.n	8009b68 <lwip_netconn_do_connected+0x5c>
 8009b4c:	69bb      	ldr	r3, [r7, #24]
 8009b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b52:	f003 0304 	and.w	r3, r3, #4
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <lwip_netconn_do_connected+0x5c>
 8009b5a:	4b31      	ldr	r3, [pc, #196]	; (8009c20 <lwip_netconn_do_connected+0x114>)
 8009b5c:	f240 5225 	movw	r2, #1317	; 0x525
 8009b60:	4932      	ldr	r1, [pc, #200]	; (8009c2c <lwip_netconn_do_connected+0x120>)
 8009b62:	4831      	ldr	r0, [pc, #196]	; (8009c28 <lwip_netconn_do_connected+0x11c>)
 8009b64:	f010 f9da 	bl	8019f1c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d008      	beq.n	8009b82 <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	79fa      	ldrb	r2, [r7, #7]
 8009b76:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	330c      	adds	r3, #12
 8009b80:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d106      	bne.n	8009b9c <lwip_netconn_do_connected+0x90>
 8009b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d102      	bne.n	8009b9c <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 8009b96:	69b8      	ldr	r0, [r7, #24]
 8009b98:	f7ff fb4e 	bl	8009238 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8009b9c:	69bb      	ldr	r3, [r7, #24]
 8009b9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	bf0c      	ite	eq
 8009baa:	2301      	moveq	r3, #1
 8009bac:	2300      	movne	r3, #0
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009bb8:	f023 0304 	bic.w	r3, r3, #4
 8009bbc:	b2da      	uxtb	r2, r3
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	f883 2020 	strb.w	r2, [r3, #32]
  LWIP_ASSERT("blocking connect state error",
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <lwip_netconn_do_connected+0xc4>
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10c      	bne.n	8009bea <lwip_netconn_do_connected+0xde>
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d102      	bne.n	8009bdc <lwip_netconn_do_connected+0xd0>
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d006      	beq.n	8009bea <lwip_netconn_do_connected+0xde>
 8009bdc:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <lwip_netconn_do_connected+0x114>)
 8009bde:	f240 5232 	movw	r2, #1330	; 0x532
 8009be2:	4913      	ldr	r1, [pc, #76]	; (8009c30 <lwip_netconn_do_connected+0x124>)
 8009be4:	4810      	ldr	r0, [pc, #64]	; (8009c28 <lwip_netconn_do_connected+0x11c>)
 8009be6:	f010 f999 	bl	8019f1c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	2200      	movs	r2, #0
 8009bee:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <lwip_netconn_do_connected+0xfe>
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c02:	2200      	movs	r2, #0
 8009c04:	2102      	movs	r1, #2
 8009c06:	69b8      	ldr	r0, [r7, #24]
 8009c08:	4798      	blx	r3

  if (was_blocking) {
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 8009c10:	69f8      	ldr	r0, [r7, #28]
 8009c12:	f00f f9ff 	bl	8019014 <sys_sem_signal>
  }
  return ERR_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3720      	adds	r7, #32
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	0801e55c 	.word	0x0801e55c
 8009c24:	0801e924 	.word	0x0801e924
 8009c28:	0801e5a0 	.word	0x0801e5a0
 8009c2c:	0801e944 	.word	0x0801e944
 8009c30:	0801e984 	.word	0x0801e984

08009c34 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b086      	sub	sp, #24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8009c4a:	23f1      	movs	r3, #241	; 0xf1
 8009c4c:	75fb      	strb	r3, [r7, #23]
 8009c4e:	e0a0      	b.n	8009d92 <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c5a:	2b10      	cmp	r3, #16
 8009c5c:	d00f      	beq.n	8009c7e <lwip_netconn_do_connect+0x4a>
 8009c5e:	2b20      	cmp	r3, #32
 8009c60:	f040 808c 	bne.w	8009d7c <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	6858      	ldr	r0, [r3, #4]
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	6899      	ldr	r1, [r3, #8]
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	899b      	ldrh	r3, [r3, #12]
 8009c72:	461a      	mov	r2, r3
 8009c74:	f00a fbf6 	bl	8014464 <udp_connect>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	75fb      	strb	r3, [r7, #23]
        break;
 8009c7c:	e089      	b.n	8009d92 <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	785b      	ldrb	r3, [r3, #1]
 8009c84:	2b03      	cmp	r3, #3
 8009c86:	d102      	bne.n	8009c8e <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8009c88:	23f7      	movs	r3, #247	; 0xf7
 8009c8a:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8009c8c:	e080      	b.n	8009d90 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d002      	beq.n	8009c9e <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8009c98:	23f6      	movs	r3, #246	; 0xf6
 8009c9a:	75fb      	strb	r3, [r7, #23]
        break;
 8009c9c:	e078      	b.n	8009d90 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff fac8 	bl	8009238 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6858      	ldr	r0, [r3, #4]
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	6899      	ldr	r1, [r3, #8]
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	899a      	ldrh	r2, [r3, #12]
 8009cb6:	4b3b      	ldr	r3, [pc, #236]	; (8009da4 <lwip_netconn_do_connect+0x170>)
 8009cb8:	f004 fa68 	bl	800e18c <tcp_connect>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8009cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d163      	bne.n	8009d90 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	bf14      	ite	ne
 8009cd8:	2301      	movne	r3, #1
 8009cda:	2300      	moveq	r3, #0
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2203      	movs	r2, #3
 8009ce6:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8009ce8:	7bfb      	ldrb	r3, [r7, #15]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00b      	beq.n	8009d06 <lwip_netconn_do_connect+0xd2>
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f042 0204 	orr.w	r2, r2, #4
 8009cfe:	b2d2      	uxtb	r2, r2
 8009d00:	f883 2020 	strb.w	r2, [r3, #32]
 8009d04:	e00a      	b.n	8009d1c <lwip_netconn_do_connect+0xe8>
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0204 	bic.w	r2, r2, #4
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	f883 2020 	strb.w	r2, [r3, #32]
            if (non_blocking) {
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 8009d22:	23fb      	movs	r3, #251	; 0xfb
 8009d24:	75fb      	strb	r3, [r7, #23]
        break;
 8009d26:	e033      	b.n	8009d90 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	625a      	str	r2, [r3, #36]	; 0x24
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	785b      	ldrb	r3, [r3, #1]
 8009d36:	2b03      	cmp	r3, #3
 8009d38:	d006      	beq.n	8009d48 <lwip_netconn_do_connect+0x114>
 8009d3a:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <lwip_netconn_do_connect+0x174>)
 8009d3c:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8009d40:	491a      	ldr	r1, [pc, #104]	; (8009dac <lwip_netconn_do_connect+0x178>)
 8009d42:	481b      	ldr	r0, [pc, #108]	; (8009db0 <lwip_netconn_do_connect+0x17c>)
 8009d44:	f010 f8ea 	bl	8019f1c <iprintf>
              UNLOCK_TCPIP_CORE();
 8009d48:	481a      	ldr	r0, [pc, #104]	; (8009db4 <lwip_netconn_do_connect+0x180>)
 8009d4a:	f00f f9d4 	bl	80190f6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	330c      	adds	r3, #12
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f00f f92b 	bl	8018fb2 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8009d5c:	4815      	ldr	r0, [pc, #84]	; (8009db4 <lwip_netconn_do_connect+0x180>)
 8009d5e:	f00f f9bb 	bl	80190d8 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	785b      	ldrb	r3, [r3, #1]
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d116      	bne.n	8009d9a <lwip_netconn_do_connect+0x166>
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <lwip_netconn_do_connect+0x174>)
 8009d6e:	f240 5274 	movw	r2, #1396	; 0x574
 8009d72:	490e      	ldr	r1, [pc, #56]	; (8009dac <lwip_netconn_do_connect+0x178>)
 8009d74:	480e      	ldr	r0, [pc, #56]	; (8009db0 <lwip_netconn_do_connect+0x17c>)
 8009d76:	f010 f8d1 	bl	8019f1c <iprintf>
              return;
 8009d7a:	e00e      	b.n	8009d9a <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	; (8009da8 <lwip_netconn_do_connect+0x174>)
 8009d7e:	f240 527f 	movw	r2, #1407	; 0x57f
 8009d82:	490d      	ldr	r1, [pc, #52]	; (8009db8 <lwip_netconn_do_connect+0x184>)
 8009d84:	480a      	ldr	r0, [pc, #40]	; (8009db0 <lwip_netconn_do_connect+0x17c>)
 8009d86:	f010 f8c9 	bl	8019f1c <iprintf>
 8009d8a:	23fa      	movs	r3, #250	; 0xfa
 8009d8c:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8009d8e:	e000      	b.n	8009d92 <lwip_netconn_do_connect+0x15e>
        break;
 8009d90:	bf00      	nop
    }
  }
  msg->err = err;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	7dfa      	ldrb	r2, [r7, #23]
 8009d96:	711a      	strb	r2, [r3, #4]
 8009d98:	e000      	b.n	8009d9c <lwip_netconn_do_connect+0x168>
              return;
 8009d9a:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	08009b0d 	.word	0x08009b0d
 8009da8:	0801e55c 	.word	0x0801e55c
 8009dac:	0801e91c 	.word	0x0801e91c
 8009db0:	0801e5a0 	.word	0x0801e5a0
 8009db4:	20024800 	.word	0x20024800
 8009db8:	0801e9a4 	.word	0x0801e9a4

08009dbc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d022      	beq.n	8009e1e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009de2:	2b10      	cmp	r3, #16
 8009de4:	d11b      	bne.n	8009e1e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df2:	d202      	bcs.n	8009dfa <lwip_netconn_do_recv+0x3e>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	e001      	b.n	8009dfe <lwip_netconn_do_recv+0x42>
 8009dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dfe:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	89fa      	ldrh	r2, [r7, #14]
 8009e08:	4611      	mov	r1, r2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f004 f928 	bl	800e060 <tcp_recved>
        remaining -= recved;
 8009e10:	89fb      	ldrh	r3, [r7, #14]
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e6      	bne.n	8009dec <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8009e1e:	bf00      	nop
 8009e20:	3718      	adds	r7, #24
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <lwip_netconn_do_writemore+0x24>
 8009e3e:	4b98      	ldr	r3, [pc, #608]	; (800a0a0 <lwip_netconn_do_writemore+0x278>)
 8009e40:	f240 6273 	movw	r2, #1651	; 0x673
 8009e44:	4997      	ldr	r1, [pc, #604]	; (800a0a4 <lwip_netconn_do_writemore+0x27c>)
 8009e46:	4898      	ldr	r0, [pc, #608]	; (800a0a8 <lwip_netconn_do_writemore+0x280>)
 8009e48:	f010 f868 	bl	8019f1c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d006      	beq.n	8009e62 <lwip_netconn_do_writemore+0x3a>
 8009e54:	4b92      	ldr	r3, [pc, #584]	; (800a0a0 <lwip_netconn_do_writemore+0x278>)
 8009e56:	f240 6274 	movw	r2, #1652	; 0x674
 8009e5a:	4994      	ldr	r1, [pc, #592]	; (800a0ac <lwip_netconn_do_writemore+0x284>)
 8009e5c:	4892      	ldr	r0, [pc, #584]	; (800a0a8 <lwip_netconn_do_writemore+0x280>)
 8009e5e:	f010 f85d 	bl	8019f1c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d106      	bne.n	8009e78 <lwip_netconn_do_writemore+0x50>
 8009e6a:	4b8d      	ldr	r3, [pc, #564]	; (800a0a0 <lwip_netconn_do_writemore+0x278>)
 8009e6c:	f240 6275 	movw	r2, #1653	; 0x675
 8009e70:	498f      	ldr	r1, [pc, #572]	; (800a0b0 <lwip_netconn_do_writemore+0x288>)
 8009e72:	488d      	ldr	r0, [pc, #564]	; (800a0a8 <lwip_netconn_do_writemore+0x280>)
 8009e74:	f010 f852 	bl	8019f1c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <lwip_netconn_do_writemore+0x66>
 8009e80:	4b87      	ldr	r3, [pc, #540]	; (800a0a0 <lwip_netconn_do_writemore+0x278>)
 8009e82:	f240 6276 	movw	r2, #1654	; 0x676
 8009e86:	498b      	ldr	r1, [pc, #556]	; (800a0b4 <lwip_netconn_do_writemore+0x28c>)
 8009e88:	4887      	ldr	r0, [pc, #540]	; (800a0a8 <lwip_netconn_do_writemore+0x280>)
 8009e8a:	f010 f847 	bl	8019f1c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e92:	699a      	ldr	r2, [r3, #24]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	695b      	ldr	r3, [r3, #20]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d306      	bcc.n	8009eac <lwip_netconn_do_writemore+0x84>
 8009e9e:	4b80      	ldr	r3, [pc, #512]	; (800a0a0 <lwip_netconn_do_writemore+0x278>)
 8009ea0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8009ea4:	4984      	ldr	r1, [pc, #528]	; (800a0b8 <lwip_netconn_do_writemore+0x290>)
 8009ea6:	4880      	ldr	r0, [pc, #512]	; (800a0a8 <lwip_netconn_do_writemore+0x280>)
 8009ea8:	f010 f838 	bl	8019f1c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	899b      	ldrh	r3, [r3, #12]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d106      	bne.n	8009ec4 <lwip_netconn_do_writemore+0x9c>
 8009eb6:	4b7a      	ldr	r3, [pc, #488]	; (800a0a0 <lwip_netconn_do_writemore+0x278>)
 8009eb8:	f240 6279 	movw	r2, #1657	; 0x679
 8009ebc:	497f      	ldr	r1, [pc, #508]	; (800a0bc <lwip_netconn_do_writemore+0x294>)
 8009ebe:	487a      	ldr	r0, [pc, #488]	; (800a0a8 <lwip_netconn_do_writemore+0x280>)
 8009ec0:	f010 f82c 	bl	8019f1c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	7f1b      	ldrb	r3, [r3, #28]
 8009eca:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ed2:	f003 0302 	and.w	r3, r3, #2
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d104      	bne.n	8009ee4 <lwip_netconn_do_writemore+0xbc>
 8009eda:	7ebb      	ldrb	r3, [r7, #26]
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <lwip_netconn_do_writemore+0xc0>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e000      	b.n	8009eea <lwip_netconn_do_writemore+0xc2>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	4413      	add	r3, r2
 8009efc:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f16:	d307      	bcc.n	8009f28 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8009f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f1c:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009f1e:	7ebb      	ldrb	r3, [r7, #26]
 8009f20:	f043 0302 	orr.w	r3, r3, #2
 8009f24:	76bb      	strb	r3, [r7, #26]
 8009f26:	e001      	b.n	8009f2c <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f34:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009f36:	89fa      	ldrh	r2, [r7, #14]
 8009f38:	8bbb      	ldrh	r3, [r7, #28]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d216      	bcs.n	8009f6c <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8009f3e:	89fb      	ldrh	r3, [r7, #14]
 8009f40:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009f42:	7e3b      	ldrb	r3, [r7, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00d      	beq.n	8009f64 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8009f48:	8bbb      	ldrh	r3, [r7, #28]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10e      	bne.n	8009f6c <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d102      	bne.n	8009f5e <lwip_netconn_do_writemore+0x136>
 8009f58:	f06f 0306 	mvn.w	r3, #6
 8009f5c:	e000      	b.n	8009f60 <lwip_netconn_do_writemore+0x138>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009f62:	e07d      	b.n	800a060 <lwip_netconn_do_writemore+0x238>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009f64:	7ebb      	ldrb	r3, [r7, #26]
 8009f66:	f043 0302 	orr.w	r3, r3, #2
 8009f6a:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	691a      	ldr	r2, [r3, #16]
 8009f72:	8bbb      	ldrh	r3, [r7, #28]
 8009f74:	441a      	add	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d906      	bls.n	8009f90 <lwip_netconn_do_writemore+0x168>
 8009f82:	4b47      	ldr	r3, [pc, #284]	; (800a0a0 <lwip_netconn_do_writemore+0x278>)
 8009f84:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8009f88:	494d      	ldr	r1, [pc, #308]	; (800a0c0 <lwip_netconn_do_writemore+0x298>)
 8009f8a:	4847      	ldr	r0, [pc, #284]	; (800a0a8 <lwip_netconn_do_writemore+0x280>)
 8009f8c:	f00f ffc6 	bl	8019f1c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009f90:	8bbb      	ldrh	r3, [r7, #28]
 8009f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d103      	bne.n	8009fa2 <lwip_netconn_do_writemore+0x17a>
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa0:	d209      	bcs.n	8009fb6 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8009fa6:	8bba      	ldrh	r2, [r7, #28]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d10b      	bne.n	8009fc4 <lwip_netconn_do_writemore+0x19c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb0:	899b      	ldrh	r3, [r3, #12]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d906      	bls.n	8009fc4 <lwip_netconn_do_writemore+0x19c>
        write_more = 1;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009fba:	7ebb      	ldrb	r3, [r7, #26]
 8009fbc:	f043 0302 	orr.w	r3, r3, #2
 8009fc0:	76bb      	strb	r3, [r7, #26]
 8009fc2:	e001      	b.n	8009fc8 <lwip_netconn_do_writemore+0x1a0>
      } else {
        write_more = 0;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6858      	ldr	r0, [r3, #4]
 8009fcc:	7ebb      	ldrb	r3, [r7, #26]
 8009fce:	8bba      	ldrh	r2, [r7, #28]
 8009fd0:	6979      	ldr	r1, [r7, #20]
 8009fd2:	f007 ff5b 	bl	8011e8c <tcp_write>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8009fda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d12c      	bne.n	800a03c <lwip_netconn_do_writemore+0x214>
        conn->current_msg->msg.w.offset += len;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	6999      	ldr	r1, [r3, #24]
 8009fe8:	8bba      	ldrh	r2, [r7, #28]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	440a      	add	r2, r1
 8009ff0:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff6:	6919      	ldr	r1, [r3, #16]
 8009ff8:	8bba      	ldrh	r2, [r7, #28]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	440a      	add	r2, r1
 800a000:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a006:	691a      	ldr	r2, [r3, #16]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d113      	bne.n	800a03c <lwip_netconn_do_writemore+0x214>
          conn->current_msg->msg.w.vector_cnt--;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	899a      	ldrh	r2, [r3, #12]
 800a01a:	3a01      	subs	r2, #1
 800a01c:	b292      	uxth	r2, r2
 800a01e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	899b      	ldrh	r3, [r3, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d008      	beq.n	800a03c <lwip_netconn_do_writemore+0x214>
            conn->current_msg->msg.w.vector++;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	3208      	adds	r2, #8
 800a032:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	2200      	movs	r2, #0
 800a03a:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a03c:	7e7b      	ldrb	r3, [r7, #25]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <lwip_netconn_do_writemore+0x224>
 800a042:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f43f af50 	beq.w	8009eec <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a04c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d004      	beq.n	800a05e <lwip_netconn_do_writemore+0x236>
 800a054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a05c:	d149      	bne.n	800a0f2 <lwip_netconn_do_writemore+0x2ca>
err_mem:
 800a05e:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a060:	7e3b      	ldrb	r3, [r7, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d02e      	beq.n	800a0c4 <lwip_netconn_do_writemore+0x29c>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	699a      	ldr	r2, [r3, #24]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	695b      	ldr	r3, [r3, #20]
 800a072:	429a      	cmp	r2, r3
 800a074:	d226      	bcs.n	800a0c4 <lwip_netconn_do_writemore+0x29c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <lwip_netconn_do_writemore+0x262>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	2200      	movs	r2, #0
 800a084:	2103      	movs	r1, #3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a090:	f043 0310 	orr.w	r3, r3, #16
 800a094:	b2da      	uxtb	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f883 2020 	strb.w	r2, [r3, #32]
 800a09c:	e029      	b.n	800a0f2 <lwip_netconn_do_writemore+0x2ca>
 800a09e:	bf00      	nop
 800a0a0:	0801e55c 	.word	0x0801e55c
 800a0a4:	0801e6b4 	.word	0x0801e6b4
 800a0a8:	0801e5a0 	.word	0x0801e5a0
 800a0ac:	0801e9bc 	.word	0x0801e9bc
 800a0b0:	0801e6c4 	.word	0x0801e6c4
 800a0b4:	0801e9dc 	.word	0x0801e9dc
 800a0b8:	0801e9f4 	.word	0x0801e9f4
 800a0bc:	0801ea34 	.word	0x0801ea34
 800a0c0:	0801ea5c 	.word	0x0801ea5c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a0cc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a0d0:	d305      	bcc.n	800a0de <lwip_netconn_do_writemore+0x2b6>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d909      	bls.n	800a0f2 <lwip_netconn_do_writemore+0x2ca>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d005      	beq.n	800a0f2 <lwip_netconn_do_writemore+0x2ca>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	2103      	movs	r1, #3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a0f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d11d      	bne.n	800a136 <lwip_netconn_do_writemore+0x30e>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	699a      	ldr	r2, [r3, #24]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	429a      	cmp	r2, r3
 800a108:	d002      	beq.n	800a110 <lwip_netconn_do_writemore+0x2e8>
 800a10a:	7e3b      	ldrb	r3, [r7, #24]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <lwip_netconn_do_writemore+0x2ec>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a110:	2301      	movs	r3, #1
 800a112:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	4618      	mov	r0, r3
 800a11a:	f008 fca3 	bl	8012a64 <tcp_output>
 800a11e:	4603      	mov	r3, r0
 800a120:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a122:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a126:	f113 0f04 	cmn.w	r3, #4
 800a12a:	d12c      	bne.n	800a186 <lwip_netconn_do_writemore+0x35e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a12c:	7b3b      	ldrb	r3, [r7, #12]
 800a12e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a130:	2301      	movs	r3, #1
 800a132:	76fb      	strb	r3, [r7, #27]
 800a134:	e027      	b.n	800a186 <lwip_netconn_do_writemore+0x35e>
      }
    } else if (err == ERR_MEM) {
 800a136:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a13e:	d120      	bne.n	800a182 <lwip_netconn_do_writemore+0x35a>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	4618      	mov	r0, r3
 800a146:	f008 fc8d 	bl	8012a64 <tcp_output>
 800a14a:	4603      	mov	r3, r0
 800a14c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a14e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a152:	f113 0f04 	cmn.w	r3, #4
 800a156:	d104      	bne.n	800a162 <lwip_netconn_do_writemore+0x33a>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a158:	7b7b      	ldrb	r3, [r7, #13]
 800a15a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a15c:	2301      	movs	r3, #1
 800a15e:	76fb      	strb	r3, [r7, #27]
 800a160:	e011      	b.n	800a186 <lwip_netconn_do_writemore+0x35e>
      } else if (dontblock) {
 800a162:	7e3b      	ldrb	r3, [r7, #24]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00e      	beq.n	800a186 <lwip_netconn_do_writemore+0x35e>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d102      	bne.n	800a178 <lwip_netconn_do_writemore+0x350>
 800a172:	f06f 0306 	mvn.w	r3, #6
 800a176:	e000      	b.n	800a17a <lwip_netconn_do_writemore+0x352>
 800a178:	2300      	movs	r3, #0
 800a17a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a17c:	2301      	movs	r3, #1
 800a17e:	76fb      	strb	r3, [r7, #27]
 800a180:	e001      	b.n	800a186 <lwip_netconn_do_writemore+0x35e>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a182:	2301      	movs	r3, #1
 800a184:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a186:	7efb      	ldrb	r3, [r7, #27]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d015      	beq.n	800a1b8 <lwip_netconn_do_writemore+0x390>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	330c      	adds	r3, #12
 800a194:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a19a:	7ffa      	ldrb	r2, [r7, #31]
 800a19c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d006      	beq.n	800a1be <lwip_netconn_do_writemore+0x396>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a1b0:	68b8      	ldr	r0, [r7, #8]
 800a1b2:	f00e ff2f 	bl	8019014 <sys_sem_signal>
 800a1b6:	e002      	b.n	800a1be <lwip_netconn_do_writemore+0x396>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1bc:	e000      	b.n	800a1c0 <lwip_netconn_do_writemore+0x398>
  }
#endif
  return ERR_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3720      	adds	r7, #32
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fe fcae 	bl	8008b3a <netconn_err>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d166      	bne.n	800a2b8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1f4:	2b10      	cmp	r3, #16
 800a1f6:	d15d      	bne.n	800a2b4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	785b      	ldrb	r3, [r3, #1]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d002      	beq.n	800a208 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a202:	23fb      	movs	r3, #251	; 0xfb
 800a204:	73fb      	strb	r3, [r7, #15]
 800a206:	e057      	b.n	800a2b8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d04d      	beq.n	800a2ae <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2201      	movs	r2, #1
 800a218:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a220:	2b00      	cmp	r3, #0
 800a222:	d006      	beq.n	800a232 <lwip_netconn_do_write+0x6a>
 800a224:	4b28      	ldr	r3, [pc, #160]	; (800a2c8 <lwip_netconn_do_write+0x100>)
 800a226:	f240 7223 	movw	r2, #1827	; 0x723
 800a22a:	4928      	ldr	r1, [pc, #160]	; (800a2cc <lwip_netconn_do_write+0x104>)
 800a22c:	4828      	ldr	r0, [pc, #160]	; (800a2d0 <lwip_netconn_do_write+0x108>)
 800a22e:	f00f fe75 	bl	8019f1c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	695b      	ldr	r3, [r3, #20]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d106      	bne.n	800a248 <lwip_netconn_do_write+0x80>
 800a23a:	4b23      	ldr	r3, [pc, #140]	; (800a2c8 <lwip_netconn_do_write+0x100>)
 800a23c:	f240 7224 	movw	r2, #1828	; 0x724
 800a240:	4924      	ldr	r1, [pc, #144]	; (800a2d4 <lwip_netconn_do_write+0x10c>)
 800a242:	4823      	ldr	r0, [pc, #140]	; (800a2d0 <lwip_netconn_do_write+0x108>)
 800a244:	f00f fe6a 	bl	8019f1c <iprintf>
        msg->conn->current_msg = msg;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2100      	movs	r1, #0
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff fde6 	bl	8009e28 <lwip_netconn_do_writemore>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d02e      	beq.n	800a2c0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	785b      	ldrb	r3, [r3, #1]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d006      	beq.n	800a27a <lwip_netconn_do_write+0xb2>
 800a26c:	4b16      	ldr	r3, [pc, #88]	; (800a2c8 <lwip_netconn_do_write+0x100>)
 800a26e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800a272:	4919      	ldr	r1, [pc, #100]	; (800a2d8 <lwip_netconn_do_write+0x110>)
 800a274:	4816      	ldr	r0, [pc, #88]	; (800a2d0 <lwip_netconn_do_write+0x108>)
 800a276:	f00f fe51 	bl	8019f1c <iprintf>
          UNLOCK_TCPIP_CORE();
 800a27a:	4818      	ldr	r0, [pc, #96]	; (800a2dc <lwip_netconn_do_write+0x114>)
 800a27c:	f00e ff3b 	bl	80190f6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	330c      	adds	r3, #12
 800a286:	2100      	movs	r1, #0
 800a288:	4618      	mov	r0, r3
 800a28a:	f00e fe92 	bl	8018fb2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a28e:	4813      	ldr	r0, [pc, #76]	; (800a2dc <lwip_netconn_do_write+0x114>)
 800a290:	f00e ff22 	bl	80190d8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	785b      	ldrb	r3, [r3, #1]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d110      	bne.n	800a2c0 <lwip_netconn_do_write+0xf8>
 800a29e:	4b0a      	ldr	r3, [pc, #40]	; (800a2c8 <lwip_netconn_do_write+0x100>)
 800a2a0:	f240 722c 	movw	r2, #1836	; 0x72c
 800a2a4:	490c      	ldr	r1, [pc, #48]	; (800a2d8 <lwip_netconn_do_write+0x110>)
 800a2a6:	480a      	ldr	r0, [pc, #40]	; (800a2d0 <lwip_netconn_do_write+0x108>)
 800a2a8:	f00f fe38 	bl	8019f1c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a2ac:	e008      	b.n	800a2c0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800a2ae:	23f5      	movs	r3, #245	; 0xf5
 800a2b0:	73fb      	strb	r3, [r7, #15]
 800a2b2:	e001      	b.n	800a2b8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a2b4:	23fa      	movs	r3, #250	; 0xfa
 800a2b6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	7bfa      	ldrb	r2, [r7, #15]
 800a2bc:	711a      	strb	r2, [r3, #4]
 800a2be:	e000      	b.n	800a2c2 <lwip_netconn_do_write+0xfa>
        return;
 800a2c0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a2c2:	3710      	adds	r7, #16
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	0801e55c 	.word	0x0801e55c
 800a2cc:	0801e900 	.word	0x0801e900
 800a2d0:	0801e5a0 	.word	0x0801e5a0
 800a2d4:	0801ea88 	.word	0x0801ea88
 800a2d8:	0801e91c 	.word	0x0801e91c
 800a2dc:	20024800 	.word	0x20024800

0800a2e0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	785b      	ldrb	r3, [r3, #1]
 800a2f2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d069      	beq.n	800a3d2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a308:	2b10      	cmp	r3, #16
 800a30a:	d162      	bne.n	800a3d2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a310:	2b03      	cmp	r3, #3
 800a312:	d002      	beq.n	800a31a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a314:	7afb      	ldrb	r3, [r7, #11]
 800a316:	2b02      	cmp	r3, #2
 800a318:	d05b      	beq.n	800a3d2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a31a:	7afb      	ldrb	r3, [r7, #11]
 800a31c:	2b03      	cmp	r3, #3
 800a31e:	d103      	bne.n	800a328 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	22f5      	movs	r2, #245	; 0xf5
 800a324:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a326:	e059      	b.n	800a3dc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800a328:	7afb      	ldrb	r3, [r7, #11]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d103      	bne.n	800a336 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	22fb      	movs	r2, #251	; 0xfb
 800a332:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a334:	e052      	b.n	800a3dc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	7a1b      	ldrb	r3, [r3, #8]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff f8da 	bl	8009500 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a352:	2b00      	cmp	r3, #0
 800a354:	d006      	beq.n	800a364 <lwip_netconn_do_close+0x84>
 800a356:	4b23      	ldr	r3, [pc, #140]	; (800a3e4 <lwip_netconn_do_close+0x104>)
 800a358:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800a35c:	4922      	ldr	r1, [pc, #136]	; (800a3e8 <lwip_netconn_do_close+0x108>)
 800a35e:	4823      	ldr	r0, [pc, #140]	; (800a3ec <lwip_netconn_do_close+0x10c>)
 800a360:	f00f fddc 	bl	8019f1c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2204      	movs	r2, #4
 800a36a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2100      	movs	r1, #0
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff f93e 	bl	80095fc <lwip_netconn_do_close_internal>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d029      	beq.n	800a3da <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	785b      	ldrb	r3, [r3, #1]
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	d006      	beq.n	800a39e <lwip_netconn_do_close+0xbe>
 800a390:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <lwip_netconn_do_close+0x104>)
 800a392:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800a396:	4916      	ldr	r1, [pc, #88]	; (800a3f0 <lwip_netconn_do_close+0x110>)
 800a398:	4814      	ldr	r0, [pc, #80]	; (800a3ec <lwip_netconn_do_close+0x10c>)
 800a39a:	f00f fdbf 	bl	8019f1c <iprintf>
        UNLOCK_TCPIP_CORE();
 800a39e:	4815      	ldr	r0, [pc, #84]	; (800a3f4 <lwip_netconn_do_close+0x114>)
 800a3a0:	f00e fea9 	bl	80190f6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	330c      	adds	r3, #12
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f00e fe00 	bl	8018fb2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a3b2:	4810      	ldr	r0, [pc, #64]	; (800a3f4 <lwip_netconn_do_close+0x114>)
 800a3b4:	f00e fe90 	bl	80190d8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00b      	beq.n	800a3da <lwip_netconn_do_close+0xfa>
 800a3c2:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <lwip_netconn_do_close+0x104>)
 800a3c4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800a3c8:	4909      	ldr	r1, [pc, #36]	; (800a3f0 <lwip_netconn_do_close+0x110>)
 800a3ca:	4808      	ldr	r0, [pc, #32]	; (800a3ec <lwip_netconn_do_close+0x10c>)
 800a3cc:	f00f fda6 	bl	8019f1c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a3d0:	e003      	b.n	800a3da <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	22f5      	movs	r2, #245	; 0xf5
 800a3d6:	711a      	strb	r2, [r3, #4]
 800a3d8:	e000      	b.n	800a3dc <lwip_netconn_do_close+0xfc>
      return;
 800a3da:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0801e55c 	.word	0x0801e55c
 800a3e8:	0801e900 	.word	0x0801e900
 800a3ec:	0801e5a0 	.word	0x0801e5a0
 800a3f0:	0801e91c 	.word	0x0801e91c
 800a3f4:	20024800 	.word	0x20024800

0800a3f8 <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b086      	sub	sp, #24
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	22fa      	movs	r2, #250	; 0xfa
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	e008      	b.n	800a42a <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	6812      	ldr	r2, [r2, #0]
 800a428:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	4618      	mov	r0, r3
 800a430:	f00e fdf0 	bl	8019014 <sys_sem_signal>
}
 800a434:	bf00      	nop
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 800a43c:	b590      	push	{r4, r7, lr}
 800a43e:	b087      	sub	sp, #28
 800a440:	af02      	add	r7, sp, #8
 800a442:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 800a448:	2300      	movs	r3, #0
 800a44a:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6818      	ldr	r0, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6859      	ldr	r1, [r3, #4]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	68dc      	ldr	r4, [r3, #12]
 800a458:	7afb      	ldrb	r3, [r7, #11]
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	4a15      	ldr	r2, [pc, #84]	; (800a4b4 <lwip_netconn_do_gethostbyname+0x78>)
 800a460:	f001 f9c2 	bl	800b7e8 <dns_gethostbyname_addrtype>
 800a464:	4603      	mov	r3, r0
 800a466:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f993 3000 	ldrsb.w	r3, [r3]
 800a470:	f113 0f05 	cmn.w	r3, #5
 800a474:	d119      	bne.n	800a4aa <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 800a476:	4810      	ldr	r0, [pc, #64]	; (800a4b8 <lwip_netconn_do_gethostbyname+0x7c>)
 800a478:	f00e fe3d 	bl	80190f6 <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	2100      	movs	r1, #0
 800a482:	4618      	mov	r0, r3
 800a484:	f00e fd95 	bl	8018fb2 <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 800a488:	480b      	ldr	r0, [pc, #44]	; (800a4b8 <lwip_netconn_do_gethostbyname+0x7c>)
 800a48a:	f00e fe25 	bl	80190d8 <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f993 3000 	ldrsb.w	r3, [r3]
 800a496:	f113 0f05 	cmn.w	r3, #5
 800a49a:	d106      	bne.n	800a4aa <lwip_netconn_do_gethostbyname+0x6e>
 800a49c:	4b07      	ldr	r3, [pc, #28]	; (800a4bc <lwip_netconn_do_gethostbyname+0x80>)
 800a49e:	f640 0271 	movw	r2, #2161	; 0x871
 800a4a2:	4907      	ldr	r1, [pc, #28]	; (800a4c0 <lwip_netconn_do_gethostbyname+0x84>)
 800a4a4:	4807      	ldr	r0, [pc, #28]	; (800a4c4 <lwip_netconn_do_gethostbyname+0x88>)
 800a4a6:	f00f fd39 	bl	8019f1c <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a4aa:	bf00      	nop
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd90      	pop	{r4, r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	0800a3f9 	.word	0x0800a3f9
 800a4b8:	20024800 	.word	0x20024800
 800a4bc:	0801e55c 	.word	0x0801e55c
 800a4c0:	0801eab4 	.word	0x0801eab4
 800a4c4:	0801e5a0 	.word	0x0801e5a0

0800a4c8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d013      	beq.n	800a4fe <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00b      	beq.n	800a4f6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f002 fd4c 	bl	800cf80 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	605a      	str	r2, [r3, #4]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	2006      	movs	r0, #6
 800a4fa:	f001 fe95 	bl	800c228 <memp_free>
  }
}
 800a4fe:	bf00      	nop
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a512:	f009 fb6f 	bl	8013bf4 <sys_timeouts_sleeptime>
 800a516:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d10b      	bne.n	800a538 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a520:	4813      	ldr	r0, [pc, #76]	; (800a570 <tcpip_timeouts_mbox_fetch+0x68>)
 800a522:	f00e fde8 	bl	80190f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a526:	2200      	movs	r2, #0
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f00e fca0 	bl	8018e70 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a530:	480f      	ldr	r0, [pc, #60]	; (800a570 <tcpip_timeouts_mbox_fetch+0x68>)
 800a532:	f00e fdd1 	bl	80190d8 <sys_mutex_lock>
    return;
 800a536:	e018      	b.n	800a56a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d102      	bne.n	800a544 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a53e:	f009 fb1f 	bl	8013b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a542:	e7e6      	b.n	800a512 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a544:	480a      	ldr	r0, [pc, #40]	; (800a570 <tcpip_timeouts_mbox_fetch+0x68>)
 800a546:	f00e fdd6 	bl	80190f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	6839      	ldr	r1, [r7, #0]
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f00e fc8e 	bl	8018e70 <sys_arch_mbox_fetch>
 800a554:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a556:	4806      	ldr	r0, [pc, #24]	; (800a570 <tcpip_timeouts_mbox_fetch+0x68>)
 800a558:	f00e fdbe 	bl	80190d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a562:	d102      	bne.n	800a56a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a564:	f009 fb0c 	bl	8013b80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a568:	e7d3      	b.n	800a512 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	20024800 	.word	0x20024800

0800a574 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a57c:	4810      	ldr	r0, [pc, #64]	; (800a5c0 <tcpip_thread+0x4c>)
 800a57e:	f00e fdab 	bl	80190d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a582:	4b10      	ldr	r3, [pc, #64]	; (800a5c4 <tcpip_thread+0x50>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d005      	beq.n	800a596 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a58a:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <tcpip_thread+0x50>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a0e      	ldr	r2, [pc, #56]	; (800a5c8 <tcpip_thread+0x54>)
 800a590:	6812      	ldr	r2, [r2, #0]
 800a592:	4610      	mov	r0, r2
 800a594:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a596:	f107 030c 	add.w	r3, r7, #12
 800a59a:	4619      	mov	r1, r3
 800a59c:	480b      	ldr	r0, [pc, #44]	; (800a5cc <tcpip_thread+0x58>)
 800a59e:	f7ff ffb3 	bl	800a508 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d106      	bne.n	800a5b6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a5a8:	4b09      	ldr	r3, [pc, #36]	; (800a5d0 <tcpip_thread+0x5c>)
 800a5aa:	2291      	movs	r2, #145	; 0x91
 800a5ac:	4909      	ldr	r1, [pc, #36]	; (800a5d4 <tcpip_thread+0x60>)
 800a5ae:	480a      	ldr	r0, [pc, #40]	; (800a5d8 <tcpip_thread+0x64>)
 800a5b0:	f00f fcb4 	bl	8019f1c <iprintf>
      continue;
 800a5b4:	e003      	b.n	800a5be <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 f80f 	bl	800a5dc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a5be:	e7ea      	b.n	800a596 <tcpip_thread+0x22>
 800a5c0:	20024800 	.word	0x20024800
 800a5c4:	20020fb8 	.word	0x20020fb8
 800a5c8:	20020fbc 	.word	0x20020fbc
 800a5cc:	20020fc0 	.word	0x20020fc0
 800a5d0:	0801eadc 	.word	0x0801eadc
 800a5d4:	0801eb0c 	.word	0x0801eb0c
 800a5d8:	0801eb2c 	.word	0x0801eb2c

0800a5dc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d018      	beq.n	800a61e <tcpip_thread_handle_msg+0x42>
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d021      	beq.n	800a634 <tcpip_thread_handle_msg+0x58>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d126      	bne.n	800a642 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	6850      	ldr	r0, [r2, #4]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	6892      	ldr	r2, [r2, #8]
 800a600:	4611      	mov	r1, r2
 800a602:	4798      	blx	r3
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	4618      	mov	r0, r3
 800a610:	f002 fcb6 	bl	800cf80 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a614:	6879      	ldr	r1, [r7, #4]
 800a616:	2009      	movs	r0, #9
 800a618:	f001 fe06 	bl	800c228 <memp_free>
      break;
 800a61c:	e018      	b.n	800a650 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	6892      	ldr	r2, [r2, #8]
 800a626:	4610      	mov	r0, r2
 800a628:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	2008      	movs	r0, #8
 800a62e:	f001 fdfb 	bl	800c228 <memp_free>
      break;
 800a632:	e00d      	b.n	800a650 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6892      	ldr	r2, [r2, #8]
 800a63c:	4610      	mov	r0, r2
 800a63e:	4798      	blx	r3
      break;
 800a640:	e006      	b.n	800a650 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a642:	4b05      	ldr	r3, [pc, #20]	; (800a658 <tcpip_thread_handle_msg+0x7c>)
 800a644:	22cf      	movs	r2, #207	; 0xcf
 800a646:	4905      	ldr	r1, [pc, #20]	; (800a65c <tcpip_thread_handle_msg+0x80>)
 800a648:	4805      	ldr	r0, [pc, #20]	; (800a660 <tcpip_thread_handle_msg+0x84>)
 800a64a:	f00f fc67 	bl	8019f1c <iprintf>
      break;
 800a64e:	bf00      	nop
  }
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	0801eadc 	.word	0x0801eadc
 800a65c:	0801eb0c 	.word	0x0801eb0c
 800a660:	0801eb2c 	.word	0x0801eb2c

0800a664 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a670:	481a      	ldr	r0, [pc, #104]	; (800a6dc <tcpip_inpkt+0x78>)
 800a672:	f00e fc58 	bl	8018f26 <sys_mbox_valid>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d105      	bne.n	800a688 <tcpip_inpkt+0x24>
 800a67c:	4b18      	ldr	r3, [pc, #96]	; (800a6e0 <tcpip_inpkt+0x7c>)
 800a67e:	22fc      	movs	r2, #252	; 0xfc
 800a680:	4918      	ldr	r1, [pc, #96]	; (800a6e4 <tcpip_inpkt+0x80>)
 800a682:	4819      	ldr	r0, [pc, #100]	; (800a6e8 <tcpip_inpkt+0x84>)
 800a684:	f00f fc4a 	bl	8019f1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a688:	2009      	movs	r0, #9
 800a68a:	f001 fd7b 	bl	800c184 <memp_malloc>
 800a68e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a696:	f04f 33ff 	mov.w	r3, #4294967295
 800a69a:	e01a      	b.n	800a6d2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a6b4:	6979      	ldr	r1, [r7, #20]
 800a6b6:	4809      	ldr	r0, [pc, #36]	; (800a6dc <tcpip_inpkt+0x78>)
 800a6b8:	f00e fbc0 	bl	8018e3c <sys_mbox_trypost>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d006      	beq.n	800a6d0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a6c2:	6979      	ldr	r1, [r7, #20]
 800a6c4:	2009      	movs	r0, #9
 800a6c6:	f001 fdaf 	bl	800c228 <memp_free>
    return ERR_MEM;
 800a6ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ce:	e000      	b.n	800a6d2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a6d0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3718      	adds	r7, #24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	20020fc0 	.word	0x20020fc0
 800a6e0:	0801eadc 	.word	0x0801eadc
 800a6e4:	0801eb54 	.word	0x0801eb54
 800a6e8:	0801eb2c 	.word	0x0801eb2c

0800a6ec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a6fc:	f003 0318 	and.w	r3, r3, #24
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <tcpip_input+0x3c>)
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff ffab 	bl	800a664 <tcpip_inpkt>
 800a70e:	4603      	mov	r3, r0
 800a710:	e005      	b.n	800a71e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a712:	4a06      	ldr	r2, [pc, #24]	; (800a72c <tcpip_input+0x40>)
 800a714:	6839      	ldr	r1, [r7, #0]
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f7ff ffa4 	bl	800a664 <tcpip_inpkt>
 800a71c:	4603      	mov	r3, r0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	08018c29 	.word	0x08018c29
 800a72c:	08017785 	.word	0x08017785

0800a730 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a73a:	4819      	ldr	r0, [pc, #100]	; (800a7a0 <tcpip_try_callback+0x70>)
 800a73c:	f00e fbf3 	bl	8018f26 <sys_mbox_valid>
 800a740:	4603      	mov	r3, r0
 800a742:	2b00      	cmp	r3, #0
 800a744:	d106      	bne.n	800a754 <tcpip_try_callback+0x24>
 800a746:	4b17      	ldr	r3, [pc, #92]	; (800a7a4 <tcpip_try_callback+0x74>)
 800a748:	f240 125d 	movw	r2, #349	; 0x15d
 800a74c:	4916      	ldr	r1, [pc, #88]	; (800a7a8 <tcpip_try_callback+0x78>)
 800a74e:	4817      	ldr	r0, [pc, #92]	; (800a7ac <tcpip_try_callback+0x7c>)
 800a750:	f00f fbe4 	bl	8019f1c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a754:	2008      	movs	r0, #8
 800a756:	f001 fd15 	bl	800c184 <memp_malloc>
 800a75a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a762:	f04f 33ff 	mov.w	r3, #4294967295
 800a766:	e017      	b.n	800a798 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2201      	movs	r2, #1
 800a76c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a77a:	68f9      	ldr	r1, [r7, #12]
 800a77c:	4808      	ldr	r0, [pc, #32]	; (800a7a0 <tcpip_try_callback+0x70>)
 800a77e:	f00e fb5d 	bl	8018e3c <sys_mbox_trypost>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a788:	68f9      	ldr	r1, [r7, #12]
 800a78a:	2008      	movs	r0, #8
 800a78c:	f001 fd4c 	bl	800c228 <memp_free>
    return ERR_MEM;
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	e000      	b.n	800a798 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20020fc0 	.word	0x20020fc0
 800a7a4:	0801eadc 	.word	0x0801eadc
 800a7a8:	0801eb54 	.word	0x0801eb54
 800a7ac:	0801eb2c 	.word	0x0801eb2c

0800a7b0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a7bc:	4806      	ldr	r0, [pc, #24]	; (800a7d8 <tcpip_send_msg_wait_sem+0x28>)
 800a7be:	f00e fc8b 	bl	80190d8 <sys_mutex_lock>
  fn(apimsg);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68b8      	ldr	r0, [r7, #8]
 800a7c6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a7c8:	4803      	ldr	r0, [pc, #12]	; (800a7d8 <tcpip_send_msg_wait_sem+0x28>)
 800a7ca:	f00e fc94 	bl	80190f6 <sys_mutex_unlock>
  return ERR_OK;
 800a7ce:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20024800 	.word	0x20024800

0800a7dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af02      	add	r7, sp, #8
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a7e6:	f001 f843 	bl	800b870 <lwip_init>

  tcpip_init_done = initfunc;
 800a7ea:	4a17      	ldr	r2, [pc, #92]	; (800a848 <tcpip_init+0x6c>)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a7f0:	4a16      	ldr	r2, [pc, #88]	; (800a84c <tcpip_init+0x70>)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a7f6:	2106      	movs	r1, #6
 800a7f8:	4815      	ldr	r0, [pc, #84]	; (800a850 <tcpip_init+0x74>)
 800a7fa:	f00e faeb 	bl	8018dd4 <sys_mbox_new>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a804:	4b13      	ldr	r3, [pc, #76]	; (800a854 <tcpip_init+0x78>)
 800a806:	f240 2261 	movw	r2, #609	; 0x261
 800a80a:	4913      	ldr	r1, [pc, #76]	; (800a858 <tcpip_init+0x7c>)
 800a80c:	4813      	ldr	r0, [pc, #76]	; (800a85c <tcpip_init+0x80>)
 800a80e:	f00f fb85 	bl	8019f1c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a812:	4813      	ldr	r0, [pc, #76]	; (800a860 <tcpip_init+0x84>)
 800a814:	f00e fc44 	bl	80190a0 <sys_mutex_new>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d006      	beq.n	800a82c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a81e:	4b0d      	ldr	r3, [pc, #52]	; (800a854 <tcpip_init+0x78>)
 800a820:	f240 2265 	movw	r2, #613	; 0x265
 800a824:	490f      	ldr	r1, [pc, #60]	; (800a864 <tcpip_init+0x88>)
 800a826:	480d      	ldr	r0, [pc, #52]	; (800a85c <tcpip_init+0x80>)
 800a828:	f00f fb78 	bl	8019f1c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a82c:	2300      	movs	r3, #0
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a834:	2200      	movs	r2, #0
 800a836:	490c      	ldr	r1, [pc, #48]	; (800a868 <tcpip_init+0x8c>)
 800a838:	480c      	ldr	r0, [pc, #48]	; (800a86c <tcpip_init+0x90>)
 800a83a:	f00e fc69 	bl	8019110 <sys_thread_new>
}
 800a83e:	bf00      	nop
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	20020fb8 	.word	0x20020fb8
 800a84c:	20020fbc 	.word	0x20020fbc
 800a850:	20020fc0 	.word	0x20020fc0
 800a854:	0801eadc 	.word	0x0801eadc
 800a858:	0801eb64 	.word	0x0801eb64
 800a85c:	0801eb2c 	.word	0x0801eb2c
 800a860:	20024800 	.word	0x20024800
 800a864:	0801eb88 	.word	0x0801eb88
 800a868:	0800a575 	.word	0x0800a575
 800a86c:	0801ebac 	.word	0x0801ebac

0800a870 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a87a:	88fb      	ldrh	r3, [r7, #6]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	b21a      	sxth	r2, r3
 800a880:	88fb      	ldrh	r3, [r7, #6]
 800a882:	0a1b      	lsrs	r3, r3, #8
 800a884:	b29b      	uxth	r3, r3
 800a886:	b21b      	sxth	r3, r3
 800a888:	4313      	orrs	r3, r2
 800a88a:	b21b      	sxth	r3, r3
 800a88c:	b29b      	uxth	r3, r3
}
 800a88e:	4618      	mov	r0, r3
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a89a:	b480      	push	{r7}
 800a89c:	b083      	sub	sp, #12
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	061a      	lsls	r2, r3, #24
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	021b      	lsls	r3, r3, #8
 800a8aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	0e1b      	lsrs	r3, r3, #24
 800a8be:	4313      	orrs	r3, r2
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	60fa      	str	r2, [r7, #12]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	1c5a      	adds	r2, r3, #1
 800a8e6:	60ba      	str	r2, [r7, #8]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 800a8ec:	7dfa      	ldrb	r2, [r7, #23]
 800a8ee:	7dbb      	ldrb	r3, [r7, #22]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d016      	beq.n	800a922 <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 800a8f4:	7dfb      	ldrb	r3, [r7, #23]
 800a8f6:	f043 0320 	orr.w	r3, r3, #32
 800a8fa:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a8fc:	7d7b      	ldrb	r3, [r7, #21]
 800a8fe:	2b60      	cmp	r3, #96	; 0x60
 800a900:	d90c      	bls.n	800a91c <lwip_strnicmp+0x50>
 800a902:	7d7b      	ldrb	r3, [r7, #21]
 800a904:	2b7a      	cmp	r3, #122	; 0x7a
 800a906:	d809      	bhi.n	800a91c <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800a908:	7dbb      	ldrb	r3, [r7, #22]
 800a90a:	f043 0320 	orr.w	r3, r3, #32
 800a90e:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 800a910:	7d7a      	ldrb	r2, [r7, #21]
 800a912:	7d3b      	ldrb	r3, [r7, #20]
 800a914:	429a      	cmp	r2, r3
 800a916:	d003      	beq.n	800a920 <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800a918:	2301      	movs	r3, #1
 800a91a:	e00c      	b.n	800a936 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e00a      	b.n	800a936 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800a920:	bf00      	nop
      }
    }
    len--;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3b01      	subs	r3, #1
 800a926:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <lwip_strnicmp+0x68>
 800a92e:	7dfb      	ldrb	r3, [r7, #23]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1d1      	bne.n	800a8d8 <lwip_strnicmp+0xc>
  return 0;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	371c      	adds	r7, #28
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800a942:	b480      	push	{r7}
 800a944:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800a946:	bf00      	nop
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800a95c:	79fb      	ldrb	r3, [r7, #7]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d80f      	bhi.n	800a982 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d006      	beq.n	800a976 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800a968:	79fb      	ldrb	r3, [r7, #7]
 800a96a:	4909      	ldr	r1, [pc, #36]	; (800a990 <dns_setserver+0x40>)
 800a96c:	683a      	ldr	r2, [r7, #0]
 800a96e:	6812      	ldr	r2, [r2, #0]
 800a970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800a974:	e005      	b.n	800a982 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	4905      	ldr	r1, [pc, #20]	; (800a990 <dns_setserver+0x40>)
 800a97a:	4a06      	ldr	r2, [pc, #24]	; (800a994 <dns_setserver+0x44>)
 800a97c:	6812      	ldr	r2, [r2, #0]
 800a97e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	20021448 	.word	0x20021448
 800a994:	08021b90 	.word	0x08021b90

0800a998 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800a99c:	f000 fc56 	bl	800b24c <dns_check_entries>
}
 800a9a0:	bf00      	nop
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	73fb      	strb	r3, [r7, #15]
 800a9b2:	e02e      	b.n	800aa12 <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800a9b4:	7bfa      	ldrb	r2, [r7, #15]
 800a9b6:	491b      	ldr	r1, [pc, #108]	; (800aa24 <dns_lookup+0x80>)
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	4413      	add	r3, r2
 800a9be:	011b      	lsls	r3, r3, #4
 800a9c0:	440b      	add	r3, r1
 800a9c2:	330a      	adds	r3, #10
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d120      	bne.n	800aa0c <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800a9ca:	7bfa      	ldrb	r2, [r7, #15]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	4413      	add	r3, r2
 800a9d2:	011b      	lsls	r3, r3, #4
 800a9d4:	3310      	adds	r3, #16
 800a9d6:	4a13      	ldr	r2, [pc, #76]	; (800aa24 <dns_lookup+0x80>)
 800a9d8:	4413      	add	r3, r2
 800a9da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff ff73 	bl	800a8cc <lwip_strnicmp>
 800a9e6:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10f      	bne.n	800aa0c <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d00a      	beq.n	800aa08 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800a9f2:	7bfa      	ldrb	r2, [r7, #15]
 800a9f4:	490b      	ldr	r1, [pc, #44]	; (800aa24 <dns_lookup+0x80>)
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	011b      	lsls	r3, r3, #4
 800a9fa:	4413      	add	r3, r2
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	440b      	add	r3, r1
 800aa00:	3304      	adds	r3, #4
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e007      	b.n	800aa1c <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	73fb      	strb	r3, [r7, #15]
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	2b03      	cmp	r3, #3
 800aa16:	d9cd      	bls.n	800a9b4 <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 800aa18:	f06f 030f 	mvn.w	r3, #15
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	20020fd8 	.word	0x20020fd8

0800aa28 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 800aa28:	b590      	push	{r4, r7, lr}
 800aa2a:	b089      	sub	sp, #36	; 0x24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	4613      	mov	r3, r2
 800aa34:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 800aa36:	88fb      	ldrh	r3, [r7, #6]
 800aa38:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 800aa3a:	8b7b      	ldrh	r3, [r7, #26]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	68b8      	ldr	r0, [r7, #8]
 800aa40:	f002 fe80 	bl	800d744 <pbuf_try_get_at>
 800aa44:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	db04      	blt.n	800aa56 <dns_compare_name+0x2e>
 800aa4c:	8b7b      	ldrh	r3, [r7, #26]
 800aa4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d102      	bne.n	800aa5c <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 800aa56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa5a:	e070      	b.n	800ab3e <dns_compare_name+0x116>
    }
    response_offset++;
 800aa5c:	8b7b      	ldrh	r3, [r7, #26]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa68:	2bc0      	cmp	r3, #192	; 0xc0
 800aa6a:	d148      	bne.n	800aafe <dns_compare_name+0xd6>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 800aa6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa70:	e065      	b.n	800ab3e <dns_compare_name+0x116>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 800aa72:	8b7b      	ldrh	r3, [r7, #26]
 800aa74:	4619      	mov	r1, r3
 800aa76:	68b8      	ldr	r0, [r7, #8]
 800aa78:	f002 fe64 	bl	800d744 <pbuf_try_get_at>
 800aa7c:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	da02      	bge.n	800aa8a <dns_compare_name+0x62>
          return 0xFFFF;
 800aa84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa88:	e059      	b.n	800ab3e <dns_compare_name+0x116>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	74fb      	strb	r3, [r7, #19]
 800aa90:	f00e fbaa 	bl	80191e8 <__locale_ctype_ptr>
 800aa94:	4602      	mov	r2, r0
 800aa96:	7cfb      	ldrb	r3, [r7, #19]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	4413      	add	r3, r2
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d103      	bne.n	800aaae <dns_compare_name+0x86>
 800aaa6:	7cfb      	ldrb	r3, [r7, #19]
 800aaa8:	f103 0420 	add.w	r4, r3, #32
 800aaac:	e000      	b.n	800aab0 <dns_compare_name+0x88>
 800aaae:	7cfc      	ldrb	r4, [r7, #19]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	74bb      	strb	r3, [r7, #18]
 800aab4:	f00e fb98 	bl	80191e8 <__locale_ctype_ptr>
 800aab8:	4602      	mov	r2, r0
 800aaba:	7cbb      	ldrb	r3, [r7, #18]
 800aabc:	3301      	adds	r3, #1
 800aabe:	4413      	add	r3, r2
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	f003 0303 	and.w	r3, r3, #3
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d102      	bne.n	800aad0 <dns_compare_name+0xa8>
 800aaca:	7cbb      	ldrb	r3, [r7, #18]
 800aacc:	3320      	adds	r3, #32
 800aace:	e000      	b.n	800aad2 <dns_compare_name+0xaa>
 800aad0:	7cbb      	ldrb	r3, [r7, #18]
 800aad2:	429c      	cmp	r4, r3
 800aad4:	d002      	beq.n	800aadc <dns_compare_name+0xb4>
          return 0xFFFF;
 800aad6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aada:	e030      	b.n	800ab3e <dns_compare_name+0x116>
        }
        if (response_offset == 0xFFFF) {
 800aadc:	8b7b      	ldrh	r3, [r7, #26]
 800aade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d102      	bne.n	800aaec <dns_compare_name+0xc4>
          /* would overflow */
          return 0xFFFF;
 800aae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aaea:	e028      	b.n	800ab3e <dns_compare_name+0x116>
        }
        response_offset++;
 800aaec:	8b7b      	ldrh	r3, [r7, #26]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	837b      	strh	r3, [r7, #26]
        ++query;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	60fb      	str	r3, [r7, #12]
        --n;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	3b01      	subs	r3, #1
 800aafc:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	dcb6      	bgt.n	800aa72 <dns_compare_name+0x4a>
      }
      ++query;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3301      	adds	r3, #1
 800ab08:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 800ab0a:	8b7b      	ldrh	r3, [r7, #26]
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	68b8      	ldr	r0, [r7, #8]
 800ab10:	f002 fe18 	bl	800d744 <pbuf_try_get_at>
 800ab14:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	da02      	bge.n	800ab22 <dns_compare_name+0xfa>
      return 0xFFFF;
 800ab1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab20:	e00d      	b.n	800ab3e <dns_compare_name+0x116>
    }
  } while (n != 0);
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d188      	bne.n	800aa3a <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 800ab28:	8b7b      	ldrh	r3, [r7, #26]
 800ab2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d102      	bne.n	800ab38 <dns_compare_name+0x110>
    /* would overflow */
    return 0xFFFF;
 800ab32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab36:	e002      	b.n	800ab3e <dns_compare_name+0x116>
  }
  return (u16_t)(response_offset + 1);
 800ab38:	8b7b      	ldrh	r3, [r7, #26]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	b29b      	uxth	r3, r3
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3724      	adds	r7, #36	; 0x24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd90      	pop	{r4, r7, pc}

0800ab46 <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 800ab52:	887b      	ldrh	r3, [r7, #2]
 800ab54:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 800ab56:	89fb      	ldrh	r3, [r7, #14]
 800ab58:	1c5a      	adds	r2, r3, #1
 800ab5a:	81fa      	strh	r2, [r7, #14]
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f002 fdf0 	bl	800d744 <pbuf_try_get_at>
 800ab64:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	db02      	blt.n	800ab72 <dns_skip_name+0x2c>
 800ab6c:	89fb      	ldrh	r3, [r7, #14]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d102      	bne.n	800ab78 <dns_skip_name+0x32>
      return 0xFFFF;
 800ab72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab76:	e02f      	b.n	800abd8 <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ab7e:	2bc0      	cmp	r3, #192	; 0xc0
 800ab80:	d01e      	beq.n	800abc0 <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 800ab82:	89fa      	ldrh	r2, [r7, #14]
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	4413      	add	r3, r2
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	8912      	ldrh	r2, [r2, #8]
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	db02      	blt.n	800ab96 <dns_skip_name+0x50>
        return 0xFFFF;
 800ab90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab94:	e020      	b.n	800abd8 <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	89fb      	ldrh	r3, [r7, #14]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 800aba0:	89fb      	ldrh	r3, [r7, #14]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f002 fdcd 	bl	800d744 <pbuf_try_get_at>
 800abaa:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	da02      	bge.n	800abb8 <dns_skip_name+0x72>
      return 0xFFFF;
 800abb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abb6:	e00f      	b.n	800abd8 <dns_skip_name+0x92>
    }
  } while (n != 0);
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1cb      	bne.n	800ab56 <dns_skip_name+0x10>
 800abbe:	e000      	b.n	800abc2 <dns_skip_name+0x7c>
      break;
 800abc0:	bf00      	nop

  if (offset == 0xFFFF) {
 800abc2:	89fb      	ldrh	r3, [r7, #14]
 800abc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abc8:	4293      	cmp	r3, r2
 800abca:	d102      	bne.n	800abd2 <dns_skip_name+0x8c>
    return 0xFFFF;
 800abcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abd0:	e002      	b.n	800abd8 <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 800abd2:	89fb      	ldrh	r3, [r7, #14]
 800abd4:	3301      	adds	r3, #1
 800abd6:	b29b      	uxth	r3, r3
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b090      	sub	sp, #64	; 0x40
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	4603      	mov	r3, r0
 800abe8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800abea:	79fa      	ldrb	r2, [r7, #7]
 800abec:	4613      	mov	r3, r2
 800abee:	011b      	lsls	r3, r3, #4
 800abf0:	4413      	add	r3, r2
 800abf2:	011b      	lsls	r3, r3, #4
 800abf4:	4a6c      	ldr	r2, [pc, #432]	; (800ada8 <dns_send+0x1c8>)
 800abf6:	4413      	add	r3, r2
 800abf8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800abfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfc:	7adb      	ldrb	r3, [r3, #11]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d906      	bls.n	800ac10 <dns_send+0x30>
 800ac02:	4b6a      	ldr	r3, [pc, #424]	; (800adac <dns_send+0x1cc>)
 800ac04:	f240 22fa 	movw	r2, #762	; 0x2fa
 800ac08:	4969      	ldr	r1, [pc, #420]	; (800adb0 <dns_send+0x1d0>)
 800ac0a:	486a      	ldr	r0, [pc, #424]	; (800adb4 <dns_send+0x1d4>)
 800ac0c:	f00f f986 	bl	8019f1c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800ac10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac12:	7adb      	ldrb	r3, [r3, #11]
 800ac14:	461a      	mov	r2, r3
 800ac16:	4b68      	ldr	r3, [pc, #416]	; (800adb8 <dns_send+0x1d8>)
 800ac18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d109      	bne.n	800ac34 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800ac20:	79fb      	ldrb	r3, [r7, #7]
 800ac22:	2100      	movs	r1, #0
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f959 	bl	800aedc <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800ac2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	e0b4      	b.n	800ad9e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	3310      	adds	r3, #16
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7f5 fae9 	bl	8000210 <strlen>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	3312      	adds	r3, #18
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	2036      	movs	r0, #54	; 0x36
 800ac4e:	f001 feb7 	bl	800c9c0 <pbuf_alloc>
 800ac52:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 8095 	beq.w	800ad86 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800ac5c:	f107 0310 	add.w	r3, r7, #16
 800ac60:	220c      	movs	r2, #12
 800ac62:	2100      	movs	r1, #0
 800ac64:	4618      	mov	r0, r3
 800ac66:	f00e fb12 	bl	801928e <memset>
    hdr.id = lwip_htons(entry->txid);
 800ac6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6c:	891b      	ldrh	r3, [r3, #8]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff fdfe 	bl	800a870 <lwip_htons>
 800ac74:	4603      	mov	r3, r0
 800ac76:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800ac7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac80:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800ac82:	f107 0310 	add.w	r3, r7, #16
 800ac86:	220c      	movs	r2, #12
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac8c:	f002 fc2c 	bl	800d4e8 <pbuf_take>
    hostname = entry->name;
 800ac90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac92:	3310      	adds	r3, #16
 800ac94:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800ac96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800ac9c:	230c      	movs	r3, #12
 800ac9e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	3301      	adds	r3, #1
 800aca4:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800acaa:	2300      	movs	r3, #0
 800acac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800acb0:	e007      	b.n	800acc2 <dns_send+0xe2>
        ++n;
 800acb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800acb6:	3301      	adds	r3, #1
 800acb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800acbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbe:	3301      	adds	r3, #1
 800acc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	781b      	ldrb	r3, [r3, #0]
 800acc6:	2b2e      	cmp	r3, #46	; 0x2e
 800acc8:	d003      	beq.n	800acd2 <dns_send+0xf2>
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1ef      	bne.n	800acb2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800acd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	1ad3      	subs	r3, r2, r3
 800acd8:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800acda:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800acdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ace0:	4413      	add	r3, r2
 800ace2:	3301      	adds	r3, #1
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace8:	da53      	bge.n	800ad92 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800acea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800acee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800acf0:	4619      	mov	r1, r3
 800acf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acf4:	f002 fd48 	bl	800d788 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800acf8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800acfa:	3301      	adds	r3, #1
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ad00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad04:	f002 fc82 	bl	800d60c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800ad08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad10:	4413      	add	r3, r2
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	3301      	adds	r3, #1
 800ad16:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1bf      	bne.n	800aca0 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800ad20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad22:	2200      	movs	r2, #0
 800ad24:	4619      	mov	r1, r3
 800ad26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad28:	f002 fd2e 	bl	800d788 <pbuf_put_at>
    query_idx++;
 800ad2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad2e:	3301      	adds	r3, #1
 800ad30:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800ad32:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad36:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800ad38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad3c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800ad3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ad40:	f107 010c 	add.w	r1, r7, #12
 800ad44:	2204      	movs	r2, #4
 800ad46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad48:	f002 fc60 	bl	800d60c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800ad4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4e:	7bdb      	ldrb	r3, [r3, #15]
 800ad50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800ad54:	2335      	movs	r3, #53	; 0x35
 800ad56:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	7adb      	ldrb	r3, [r3, #11]
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4a16      	ldr	r2, [pc, #88]	; (800adb8 <dns_send+0x1d8>)
 800ad60:	4413      	add	r3, r2
 800ad62:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800ad64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ad68:	4a14      	ldr	r2, [pc, #80]	; (800adbc <dns_send+0x1dc>)
 800ad6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ad6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ad70:	69fa      	ldr	r2, [r7, #28]
 800ad72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ad74:	f009 f938 	bl	8013fe8 <udp_sendto>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800ad7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad80:	f002 f8fe 	bl	800cf80 <pbuf_free>
 800ad84:	e002      	b.n	800ad8c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800ad86:	23ff      	movs	r3, #255	; 0xff
 800ad88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800ad8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad90:	e005      	b.n	800ad9e <dns_send+0x1be>
        goto overflow_return;
 800ad92:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800ad94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad96:	f002 f8f3 	bl	800cf80 <pbuf_free>
  return ERR_VAL;
 800ad9a:	f06f 0305 	mvn.w	r3, #5
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3740      	adds	r7, #64	; 0x40
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	20020fd8 	.word	0x20020fd8
 800adac:	0801ebbc 	.word	0x0801ebbc
 800adb0:	0801ebec 	.word	0x0801ebec
 800adb4:	0801ec04 	.word	0x0801ec04
 800adb8:	20021448 	.word	0x20021448
 800adbc:	20020fc4 	.word	0x20020fc4

0800adc0 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800adc6:	202e      	movs	r0, #46	; 0x2e
 800adc8:	f009 fc33 	bl	8014632 <udp_new_ip_type>
 800adcc:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d101      	bne.n	800add8 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 800add4:	2300      	movs	r3, #0
 800add6:	e026      	b.n	800ae26 <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 800add8:	f00f f91c 	bl	801a014 <rand>
 800addc:	4603      	mov	r3, r0
 800adde:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 800ade0:	88fb      	ldrh	r3, [r7, #6]
 800ade2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade6:	d308      	bcc.n	800adfa <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	461a      	mov	r2, r3
 800adec:	4910      	ldr	r1, [pc, #64]	; (800ae30 <dns_alloc_random_port+0x70>)
 800adee:	68b8      	ldr	r0, [r7, #8]
 800adf0:	f009 fab0 	bl	8014354 <udp_bind>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]
 800adf8:	e001      	b.n	800adfe <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 800adfa:	23f8      	movs	r3, #248	; 0xf8
 800adfc:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 800adfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae02:	f113 0f08 	cmn.w	r3, #8
 800ae06:	d0e7      	beq.n	800add8 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 800ae08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d004      	beq.n	800ae1a <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 800ae10:	68b8      	ldr	r0, [r7, #8]
 800ae12:	f009 fbb5 	bl	8014580 <udp_remove>
    return NULL;
 800ae16:	2300      	movs	r3, #0
 800ae18:	e005      	b.n	800ae26 <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4905      	ldr	r1, [pc, #20]	; (800ae34 <dns_alloc_random_port+0x74>)
 800ae1e:	68b8      	ldr	r0, [r7, #8]
 800ae20:	f009 fb8e 	bl	8014540 <udp_recv>
  return pcb;
 800ae24:	68bb      	ldr	r3, [r7, #8]
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3710      	adds	r7, #16
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	08021b90 	.word	0x08021b90
 800ae34:	0800b2e1 	.word	0x0800b2e1

0800ae38 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 800ae38:	b590      	push	{r4, r7, lr}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800ae3e:	2300      	movs	r3, #0
 800ae40:	71fb      	strb	r3, [r7, #7]
 800ae42:	e008      	b.n	800ae56 <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 800ae44:	79fb      	ldrb	r3, [r7, #7]
 800ae46:	4a23      	ldr	r2, [pc, #140]	; (800aed4 <dns_alloc_pcb+0x9c>)
 800ae48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d006      	beq.n	800ae5e <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800ae50:	79fb      	ldrb	r3, [r7, #7]
 800ae52:	3301      	adds	r3, #1
 800ae54:	71fb      	strb	r3, [r7, #7]
 800ae56:	79fb      	ldrb	r3, [r7, #7]
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d9f3      	bls.n	800ae44 <dns_alloc_pcb+0xc>
 800ae5c:	e000      	b.n	800ae60 <dns_alloc_pcb+0x28>
      break;
 800ae5e:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 800ae60:	79fb      	ldrb	r3, [r7, #7]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d811      	bhi.n	800ae8a <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 800ae66:	79fc      	ldrb	r4, [r7, #7]
 800ae68:	f7ff ffaa 	bl	800adc0 <dns_alloc_random_port>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	4b19      	ldr	r3, [pc, #100]	; (800aed4 <dns_alloc_pcb+0x9c>)
 800ae70:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 800ae74:	79fb      	ldrb	r3, [r7, #7]
 800ae76:	4a17      	ldr	r2, [pc, #92]	; (800aed4 <dns_alloc_pcb+0x9c>)
 800ae78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d004      	beq.n	800ae8a <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 800ae80:	4a15      	ldr	r2, [pc, #84]	; (800aed8 <dns_alloc_pcb+0xa0>)
 800ae82:	79fb      	ldrb	r3, [r7, #7]
 800ae84:	7013      	strb	r3, [r2, #0]
      return i;
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	e020      	b.n	800aecc <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	71fb      	strb	r3, [r7, #7]
 800ae8e:	4b12      	ldr	r3, [pc, #72]	; (800aed8 <dns_alloc_pcb+0xa0>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	3301      	adds	r3, #1
 800ae94:	71bb      	strb	r3, [r7, #6]
 800ae96:	e015      	b.n	800aec4 <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 800ae98:	79bb      	ldrb	r3, [r7, #6]
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d901      	bls.n	800aea2 <dns_alloc_pcb+0x6a>
      idx = 0;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 800aea2:	79bb      	ldrb	r3, [r7, #6]
 800aea4:	4a0b      	ldr	r2, [pc, #44]	; (800aed4 <dns_alloc_pcb+0x9c>)
 800aea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d004      	beq.n	800aeb8 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 800aeae:	4a0a      	ldr	r2, [pc, #40]	; (800aed8 <dns_alloc_pcb+0xa0>)
 800aeb0:	79bb      	ldrb	r3, [r7, #6]
 800aeb2:	7013      	strb	r3, [r2, #0]
      return idx;
 800aeb4:	79bb      	ldrb	r3, [r7, #6]
 800aeb6:	e009      	b.n	800aecc <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800aeb8:	79fb      	ldrb	r3, [r7, #7]
 800aeba:	3301      	adds	r3, #1
 800aebc:	71fb      	strb	r3, [r7, #7]
 800aebe:	79bb      	ldrb	r3, [r7, #6]
 800aec0:	3301      	adds	r3, #1
 800aec2:	71bb      	strb	r3, [r7, #6]
 800aec4:	79fb      	ldrb	r3, [r7, #7]
 800aec6:	2b03      	cmp	r3, #3
 800aec8:	d9e6      	bls.n	800ae98 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 800aeca:	2304      	movs	r3, #4
}
 800aecc:	4618      	mov	r0, r3
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd90      	pop	{r4, r7, pc}
 800aed4:	20020fc4 	.word	0x20020fc4
 800aed8:	20020fd4 	.word	0x20020fd4

0800aedc <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800aedc:	b590      	push	{r4, r7, lr}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800aee8:	2300      	movs	r3, #0
 800aeea:	73fb      	strb	r3, [r7, #15]
 800aeec:	e03d      	b.n	800af6a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800aeee:	7bfa      	ldrb	r2, [r7, #15]
 800aef0:	4957      	ldr	r1, [pc, #348]	; (800b050 <dns_call_found+0x174>)
 800aef2:	4613      	mov	r3, r2
 800aef4:	005b      	lsls	r3, r3, #1
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d030      	beq.n	800af64 <dns_call_found+0x88>
 800af02:	7bfa      	ldrb	r2, [r7, #15]
 800af04:	4952      	ldr	r1, [pc, #328]	; (800b050 <dns_call_found+0x174>)
 800af06:	4613      	mov	r3, r2
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	4413      	add	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	440b      	add	r3, r1
 800af10:	3308      	adds	r3, #8
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	79fa      	ldrb	r2, [r7, #7]
 800af16:	429a      	cmp	r2, r3
 800af18:	d124      	bne.n	800af64 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800af1a:	7bfa      	ldrb	r2, [r7, #15]
 800af1c:	494c      	ldr	r1, [pc, #304]	; (800b050 <dns_call_found+0x174>)
 800af1e:	4613      	mov	r3, r2
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	4413      	add	r3, r2
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	440b      	add	r3, r1
 800af28:	681c      	ldr	r4, [r3, #0]
 800af2a:	79fa      	ldrb	r2, [r7, #7]
 800af2c:	4613      	mov	r3, r2
 800af2e:	011b      	lsls	r3, r3, #4
 800af30:	4413      	add	r3, r2
 800af32:	011b      	lsls	r3, r3, #4
 800af34:	3310      	adds	r3, #16
 800af36:	4a47      	ldr	r2, [pc, #284]	; (800b054 <dns_call_found+0x178>)
 800af38:	1898      	adds	r0, r3, r2
 800af3a:	7bfa      	ldrb	r2, [r7, #15]
 800af3c:	4944      	ldr	r1, [pc, #272]	; (800b050 <dns_call_found+0x174>)
 800af3e:	4613      	mov	r3, r2
 800af40:	005b      	lsls	r3, r3, #1
 800af42:	4413      	add	r3, r2
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	440b      	add	r3, r1
 800af48:	3304      	adds	r3, #4
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	461a      	mov	r2, r3
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800af52:	7bfa      	ldrb	r2, [r7, #15]
 800af54:	493e      	ldr	r1, [pc, #248]	; (800b050 <dns_call_found+0x174>)
 800af56:	4613      	mov	r3, r2
 800af58:	005b      	lsls	r3, r3, #1
 800af5a:	4413      	add	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	440b      	add	r3, r1
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	3301      	adds	r3, #1
 800af68:	73fb      	strb	r3, [r7, #15]
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	2b03      	cmp	r3, #3
 800af6e:	d9be      	bls.n	800aeee <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
 800af74:	e031      	b.n	800afda <dns_call_found+0xfe>
    if (i == idx) {
 800af76:	7bfa      	ldrb	r2, [r7, #15]
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d029      	beq.n	800afd2 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800af7e:	7bfa      	ldrb	r2, [r7, #15]
 800af80:	4934      	ldr	r1, [pc, #208]	; (800b054 <dns_call_found+0x178>)
 800af82:	4613      	mov	r3, r2
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	4413      	add	r3, r2
 800af88:	011b      	lsls	r3, r3, #4
 800af8a:	440b      	add	r3, r1
 800af8c:	330a      	adds	r3, #10
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d11f      	bne.n	800afd4 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800af94:	7bfa      	ldrb	r2, [r7, #15]
 800af96:	492f      	ldr	r1, [pc, #188]	; (800b054 <dns_call_found+0x178>)
 800af98:	4613      	mov	r3, r2
 800af9a:	011b      	lsls	r3, r3, #4
 800af9c:	4413      	add	r3, r2
 800af9e:	011b      	lsls	r3, r3, #4
 800afa0:	440b      	add	r3, r1
 800afa2:	330f      	adds	r3, #15
 800afa4:	7819      	ldrb	r1, [r3, #0]
 800afa6:	79fa      	ldrb	r2, [r7, #7]
 800afa8:	482a      	ldr	r0, [pc, #168]	; (800b054 <dns_call_found+0x178>)
 800afaa:	4613      	mov	r3, r2
 800afac:	011b      	lsls	r3, r3, #4
 800afae:	4413      	add	r3, r2
 800afb0:	011b      	lsls	r3, r3, #4
 800afb2:	4403      	add	r3, r0
 800afb4:	330f      	adds	r3, #15
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	4299      	cmp	r1, r3
 800afba:	d10b      	bne.n	800afd4 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800afbc:	79fa      	ldrb	r2, [r7, #7]
 800afbe:	4925      	ldr	r1, [pc, #148]	; (800b054 <dns_call_found+0x178>)
 800afc0:	4613      	mov	r3, r2
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	4413      	add	r3, r2
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	440b      	add	r3, r1
 800afca:	330f      	adds	r3, #15
 800afcc:	2204      	movs	r2, #4
 800afce:	701a      	strb	r2, [r3, #0]
        break;
 800afd0:	e006      	b.n	800afe0 <dns_call_found+0x104>
      continue; /* only check other requests */
 800afd2:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
 800afd6:	3301      	adds	r3, #1
 800afd8:	73fb      	strb	r3, [r7, #15]
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d9ca      	bls.n	800af76 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800afe0:	79fa      	ldrb	r2, [r7, #7]
 800afe2:	491c      	ldr	r1, [pc, #112]	; (800b054 <dns_call_found+0x178>)
 800afe4:	4613      	mov	r3, r2
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	4413      	add	r3, r2
 800afea:	011b      	lsls	r3, r3, #4
 800afec:	440b      	add	r3, r1
 800afee:	330f      	adds	r3, #15
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d827      	bhi.n	800b046 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800aff6:	79fa      	ldrb	r2, [r7, #7]
 800aff8:	4916      	ldr	r1, [pc, #88]	; (800b054 <dns_call_found+0x178>)
 800affa:	4613      	mov	r3, r2
 800affc:	011b      	lsls	r3, r3, #4
 800affe:	4413      	add	r3, r2
 800b000:	011b      	lsls	r3, r3, #4
 800b002:	440b      	add	r3, r1
 800b004:	330f      	adds	r3, #15
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	461a      	mov	r2, r3
 800b00a:	4b13      	ldr	r3, [pc, #76]	; (800b058 <dns_call_found+0x17c>)
 800b00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b010:	4618      	mov	r0, r3
 800b012:	f009 fab5 	bl	8014580 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800b016:	79fa      	ldrb	r2, [r7, #7]
 800b018:	490e      	ldr	r1, [pc, #56]	; (800b054 <dns_call_found+0x178>)
 800b01a:	4613      	mov	r3, r2
 800b01c:	011b      	lsls	r3, r3, #4
 800b01e:	4413      	add	r3, r2
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	440b      	add	r3, r1
 800b024:	330f      	adds	r3, #15
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	4619      	mov	r1, r3
 800b02a:	4b0b      	ldr	r3, [pc, #44]	; (800b058 <dns_call_found+0x17c>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800b032:	79fa      	ldrb	r2, [r7, #7]
 800b034:	4907      	ldr	r1, [pc, #28]	; (800b054 <dns_call_found+0x178>)
 800b036:	4613      	mov	r3, r2
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	4413      	add	r3, r2
 800b03c:	011b      	lsls	r3, r3, #4
 800b03e:	440b      	add	r3, r1
 800b040:	330f      	adds	r3, #15
 800b042:	2204      	movs	r2, #4
 800b044:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800b046:	bf00      	nop
 800b048:	3714      	adds	r7, #20
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd90      	pop	{r4, r7, pc}
 800b04e:	bf00      	nop
 800b050:	20021418 	.word	0x20021418
 800b054:	20020fd8 	.word	0x20020fd8
 800b058:	20020fc4 	.word	0x20020fc4

0800b05c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800b062:	f00e ffd7 	bl	801a014 <rand>
 800b066:	4603      	mov	r3, r0
 800b068:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b06a:	2300      	movs	r3, #0
 800b06c:	71fb      	strb	r3, [r7, #7]
 800b06e:	e01a      	b.n	800b0a6 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b070:	79fa      	ldrb	r2, [r7, #7]
 800b072:	4911      	ldr	r1, [pc, #68]	; (800b0b8 <dns_create_txid+0x5c>)
 800b074:	4613      	mov	r3, r2
 800b076:	011b      	lsls	r3, r3, #4
 800b078:	4413      	add	r3, r2
 800b07a:	011b      	lsls	r3, r3, #4
 800b07c:	440b      	add	r3, r1
 800b07e:	330a      	adds	r3, #10
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	2b02      	cmp	r3, #2
 800b084:	d10c      	bne.n	800b0a0 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800b086:	79fa      	ldrb	r2, [r7, #7]
 800b088:	490b      	ldr	r1, [pc, #44]	; (800b0b8 <dns_create_txid+0x5c>)
 800b08a:	4613      	mov	r3, r2
 800b08c:	011b      	lsls	r3, r3, #4
 800b08e:	4413      	add	r3, r2
 800b090:	011b      	lsls	r3, r3, #4
 800b092:	440b      	add	r3, r1
 800b094:	3308      	adds	r3, #8
 800b096:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b098:	88ba      	ldrh	r2, [r7, #4]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d100      	bne.n	800b0a0 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800b09e:	e7e0      	b.n	800b062 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b0a0:	79fb      	ldrb	r3, [r7, #7]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	71fb      	strb	r3, [r7, #7]
 800b0a6:	79fb      	ldrb	r3, [r7, #7]
 800b0a8:	2b03      	cmp	r3, #3
 800b0aa:	d9e1      	bls.n	800b070 <dns_create_txid+0x14>
    }
  }

  return txid;
 800b0ac:	88bb      	ldrh	r3, [r7, #4]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20020fd8 	.word	0x20020fd8

0800b0bc <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00e      	beq.n	800b0ec <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	7adb      	ldrb	r3, [r3, #11]
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	dc09      	bgt.n	800b0ec <dns_backupserver_available+0x30>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7adb      	ldrb	r3, [r3, #11]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	4a07      	ldr	r2, [pc, #28]	; (800b0fc <dns_backupserver_available+0x40>)
 800b0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <dns_backupserver_available+0x30>
      ret = 1;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3714      	adds	r7, #20
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	20021448 	.word	0x20021448

0800b100 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b084      	sub	sp, #16
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800b10a:	79fa      	ldrb	r2, [r7, #7]
 800b10c:	4613      	mov	r3, r2
 800b10e:	011b      	lsls	r3, r3, #4
 800b110:	4413      	add	r3, r2
 800b112:	011b      	lsls	r3, r3, #4
 800b114:	4a48      	ldr	r2, [pc, #288]	; (800b238 <dns_check_entry+0x138>)
 800b116:	4413      	add	r3, r2
 800b118:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800b11a:	79fb      	ldrb	r3, [r7, #7]
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d906      	bls.n	800b12e <dns_check_entry+0x2e>
 800b120:	4b46      	ldr	r3, [pc, #280]	; (800b23c <dns_check_entry+0x13c>)
 800b122:	f240 421c 	movw	r2, #1052	; 0x41c
 800b126:	4946      	ldr	r1, [pc, #280]	; (800b240 <dns_check_entry+0x140>)
 800b128:	4846      	ldr	r0, [pc, #280]	; (800b244 <dns_check_entry+0x144>)
 800b12a:	f00e fef7 	bl	8019f1c <iprintf>

  switch (entry->state) {
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	7a9b      	ldrb	r3, [r3, #10]
 800b132:	2b03      	cmp	r3, #3
 800b134:	d86f      	bhi.n	800b216 <dns_check_entry+0x116>
 800b136:	a201      	add	r2, pc, #4	; (adr r2, 800b13c <dns_check_entry+0x3c>)
 800b138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b13c:	0800b227 	.word	0x0800b227
 800b140:	0800b14d 	.word	0x0800b14d
 800b144:	0800b17f 	.word	0x0800b17f
 800b148:	0800b1f5 	.word	0x0800b1f5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800b14c:	f7ff ff86 	bl	800b05c <dns_create_txid>
 800b150:	4603      	mov	r3, r0
 800b152:	461a      	mov	r2, r3
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2202      	movs	r2, #2
 800b15c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2201      	movs	r2, #1
 800b168:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff fd34 	bl	800abe0 <dns_send>
 800b178:	4603      	mov	r3, r0
 800b17a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800b17c:	e058      	b.n	800b230 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	7b1b      	ldrb	r3, [r3, #12]
 800b182:	3b01      	subs	r3, #1
 800b184:	b2da      	uxtb	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	731a      	strb	r2, [r3, #12]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	7b1b      	ldrb	r3, [r3, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d14b      	bne.n	800b22a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	7b5b      	ldrb	r3, [r3, #13]
 800b196:	3301      	adds	r3, #1
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	735a      	strb	r2, [r3, #13]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	7b5b      	ldrb	r3, [r3, #13]
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d11b      	bne.n	800b1de <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f7ff ff88 	bl	800b0bc <dns_backupserver_available>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00c      	beq.n	800b1cc <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	7adb      	ldrb	r3, [r3, #11]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	735a      	strb	r2, [r3, #13]
 800b1ca:	e00c      	b.n	800b1e6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff fe83 	bl	800aedc <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	729a      	strb	r2, [r3, #10]
            break;
 800b1dc:	e028      	b.n	800b230 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	7b5a      	ldrb	r2, [r3, #13]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800b1e6:	79fb      	ldrb	r3, [r7, #7]
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fcf9 	bl	800abe0 <dns_send>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800b1f2:	e01a      	b.n	800b22a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d008      	beq.n	800b20e <dns_check_entry+0x10e>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	1e5a      	subs	r2, r3, #1
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10f      	bne.n	800b22e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	729a      	strb	r2, [r3, #10]
      }
      break;
 800b214:	e00b      	b.n	800b22e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800b216:	4b09      	ldr	r3, [pc, #36]	; (800b23c <dns_check_entry+0x13c>)
 800b218:	f240 425b 	movw	r2, #1115	; 0x45b
 800b21c:	490a      	ldr	r1, [pc, #40]	; (800b248 <dns_check_entry+0x148>)
 800b21e:	4809      	ldr	r0, [pc, #36]	; (800b244 <dns_check_entry+0x144>)
 800b220:	f00e fe7c 	bl	8019f1c <iprintf>
      break;
 800b224:	e004      	b.n	800b230 <dns_check_entry+0x130>
      break;
 800b226:	bf00      	nop
 800b228:	e002      	b.n	800b230 <dns_check_entry+0x130>
      break;
 800b22a:	bf00      	nop
 800b22c:	e000      	b.n	800b230 <dns_check_entry+0x130>
      break;
 800b22e:	bf00      	nop
  }
}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	20020fd8 	.word	0x20020fd8
 800b23c:	0801ebbc 	.word	0x0801ebbc
 800b240:	0801ec2c 	.word	0x0801ec2c
 800b244:	0801ec04 	.word	0x0801ec04
 800b248:	0801ec48 	.word	0x0801ec48

0800b24c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b252:	2300      	movs	r3, #0
 800b254:	71fb      	strb	r3, [r7, #7]
 800b256:	e006      	b.n	800b266 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800b258:	79fb      	ldrb	r3, [r7, #7]
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7ff ff50 	bl	800b100 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b260:	79fb      	ldrb	r3, [r7, #7]
 800b262:	3301      	adds	r3, #1
 800b264:	71fb      	strb	r3, [r7, #7]
 800b266:	79fb      	ldrb	r3, [r7, #7]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	d9f5      	bls.n	800b258 <dns_check_entries+0xc>
  }
}
 800b26c:	bf00      	nop
 800b26e:	3708      	adds	r7, #8
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b084      	sub	sp, #16
 800b278:	af00      	add	r7, sp, #0
 800b27a:	4603      	mov	r3, r0
 800b27c:	6039      	str	r1, [r7, #0]
 800b27e:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800b280:	79fa      	ldrb	r2, [r7, #7]
 800b282:	4613      	mov	r3, r2
 800b284:	011b      	lsls	r3, r3, #4
 800b286:	4413      	add	r3, r2
 800b288:	011b      	lsls	r3, r3, #4
 800b28a:	4a13      	ldr	r2, [pc, #76]	; (800b2d8 <dns_correct_response+0x64>)
 800b28c:	4413      	add	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2203      	movs	r2, #3
 800b294:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	683a      	ldr	r2, [r7, #0]
 800b29a:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a0e      	ldr	r2, [pc, #56]	; (800b2dc <dns_correct_response+0x68>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d902      	bls.n	800b2ac <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4a0c      	ldr	r2, [pc, #48]	; (800b2dc <dns_correct_response+0x68>)
 800b2aa:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	1d1a      	adds	r2, r3, #4
 800b2b0:	79fb      	ldrb	r3, [r7, #7]
 800b2b2:	4611      	mov	r1, r2
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7ff fe11 	bl	800aedc <dns_call_found>

  if (entry->ttl == 0) {
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d106      	bne.n	800b2d0 <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	7a9b      	ldrb	r3, [r3, #10]
 800b2c6:	2b03      	cmp	r3, #3
 800b2c8:	d102      	bne.n	800b2d0 <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800b2d0:	bf00      	nop
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}
 800b2d8:	20020fd8 	.word	0x20020fd8
 800b2dc:	00093a80 	.word	0x00093a80

0800b2e0 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800b2e0:	b590      	push	{r4, r7, lr}
 800b2e2:	b091      	sub	sp, #68	; 0x44
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
 800b2ec:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	891b      	ldrh	r3, [r3, #8]
 800b2f2:	2b0f      	cmp	r3, #15
 800b2f4:	f240 811e 	bls.w	800b534 <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800b2f8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	220c      	movs	r2, #12
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f002 f843 	bl	800d38c <pbuf_copy_partial>
 800b306:	4603      	mov	r3, r0
 800b308:	2b0c      	cmp	r3, #12
 800b30a:	f040 8115 	bne.w	800b538 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800b30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff faad 	bl	800a870 <lwip_htons>
 800b316:	4603      	mov	r3, r0
 800b318:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b31a:	2300      	movs	r3, #0
 800b31c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b320:	e102      	b.n	800b528 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 800b322:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b326:	4613      	mov	r3, r2
 800b328:	011b      	lsls	r3, r3, #4
 800b32a:	4413      	add	r3, r2
 800b32c:	011b      	lsls	r3, r3, #4
 800b32e:	4a91      	ldr	r2, [pc, #580]	; (800b574 <dns_recv+0x294>)
 800b330:	4413      	add	r3, r2
 800b332:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 800b334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b336:	7a9b      	ldrb	r3, [r3, #10]
 800b338:	2b02      	cmp	r3, #2
 800b33a:	f040 80f0 	bne.w	800b51e <dns_recv+0x23e>
          (entry->txid == txid)) {
 800b33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b340:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 800b342:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b344:	429a      	cmp	r2, r3
 800b346:	f040 80ea 	bne.w	800b51e <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800b34a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff fa8f 	bl	800a870 <lwip_htons>
 800b352:	4603      	mov	r3, r0
 800b354:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 800b356:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b358:	4618      	mov	r0, r3
 800b35a:	f7ff fa89 	bl	800a870 <lwip_htons>
 800b35e:	4603      	mov	r3, r0
 800b360:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800b362:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b366:	b25b      	sxtb	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f280 80e7 	bge.w	800b53c <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800b36e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b370:	2b01      	cmp	r3, #1
 800b372:	f040 80e5 	bne.w	800b540 <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b37c:	7adb      	ldrb	r3, [r3, #11]
 800b37e:	4619      	mov	r1, r3
 800b380:	4b7d      	ldr	r3, [pc, #500]	; (800b578 <dns_recv+0x298>)
 800b382:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b386:	429a      	cmp	r2, r3
 800b388:	f040 80dc 	bne.w	800b544 <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800b38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38e:	3310      	adds	r3, #16
 800b390:	220c      	movs	r2, #12
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff fb47 	bl	800aa28 <dns_compare_name>
 800b39a:	4603      	mov	r3, r0
 800b39c:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800b39e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	f000 80cf 	beq.w	800b548 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800b3aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3ac:	f107 0114 	add.w	r1, r7, #20
 800b3b0:	2204      	movs	r2, #4
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f001 ffea 	bl	800d38c <pbuf_copy_partial>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b04      	cmp	r3, #4
 800b3bc:	f040 80c6 	bne.w	800b54c <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800b3c0:	8afb      	ldrh	r3, [r7, #22]
 800b3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c6:	f040 80b7 	bne.w	800b538 <dns_recv+0x258>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 800b3ca:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800b3cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d0:	f040 80b2 	bne.w	800b538 <dns_recv+0x258>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800b3d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3dc:	f280 80b8 	bge.w	800b550 <dns_recv+0x270>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800b3e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800b3e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3ea:	f003 030f 	and.w	r3, r3, #15
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d078      	beq.n	800b4e4 <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800b3f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b3f4:	f7ff fe62 	bl	800b0bc <dns_backupserver_available>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d07a      	beq.n	800b4f4 <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 800b3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b400:	2203      	movs	r2, #3
 800b402:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 800b404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b406:	2201      	movs	r2, #1
 800b408:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 800b40a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b40e:	4618      	mov	r0, r3
 800b410:	f7ff fe76 	bl	800b100 <dns_check_entry>

            goto ignore_packet;
 800b414:	e0a7      	b.n	800b566 <dns_recv+0x286>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 800b416:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff fb93 	bl	800ab46 <dns_skip_name>
 800b420:	4603      	mov	r3, r0
 800b422:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 800b424:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b42a:	4293      	cmp	r3, r2
 800b42c:	f000 8092 	beq.w	800b554 <dns_recv+0x274>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800b430:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b432:	f107 0118 	add.w	r1, r7, #24
 800b436:	220a      	movs	r2, #10
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f001 ffa7 	bl	800d38c <pbuf_copy_partial>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b0a      	cmp	r3, #10
 800b442:	f040 8089 	bne.w	800b558 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 800b446:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b448:	330a      	adds	r3, #10
 800b44a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b44e:	f280 8085 	bge.w	800b55c <dns_recv+0x27c>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800b452:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b454:	330a      	adds	r3, #10
 800b456:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800b458:	8b7b      	ldrh	r3, [r7, #26]
 800b45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b45e:	d12b      	bne.n	800b4b8 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800b460:	8b3b      	ldrh	r3, [r7, #24]
 800b462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b466:	d127      	bne.n	800b4b8 <dns_recv+0x1d8>
 800b468:	8c3b      	ldrh	r3, [r7, #32]
 800b46a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b46e:	d123      	bne.n	800b4b8 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800b470:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b472:	f107 0110 	add.w	r1, r7, #16
 800b476:	2204      	movs	r2, #4
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f001 ff87 	bl	800d38c <pbuf_copy_partial>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b04      	cmp	r3, #4
 800b482:	d16d      	bne.n	800b560 <dns_recv+0x280>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800b484:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b488:	6939      	ldr	r1, [r7, #16]
 800b48a:	483a      	ldr	r0, [pc, #232]	; (800b574 <dns_recv+0x294>)
 800b48c:	4613      	mov	r3, r2
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	4413      	add	r3, r2
 800b492:	011b      	lsls	r3, r3, #4
 800b494:	4403      	add	r3, r0
 800b496:	3304      	adds	r3, #4
 800b498:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 fd70 	bl	800cf80 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7ff f9f9 	bl	800a89a <lwip_htonl>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff fedf 	bl	800b274 <dns_correct_response>
 800b4b6:	e05a      	b.n	800b56e <dns_recv+0x28e>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800b4b8:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800b4ba:	8c3b      	ldrh	r3, [r7, #32]
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7ff f9d7 	bl	800a870 <lwip_htons>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4423      	add	r3, r4
 800b4c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4ca:	da4b      	bge.n	800b564 <dns_recv+0x284>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800b4cc:	8c3b      	ldrh	r3, [r7, #32]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff f9ce 	bl	800a870 <lwip_htons>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b4da:	4413      	add	r3, r2
 800b4dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800b4de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800b4e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d004      	beq.n	800b4f4 <dns_recv+0x214>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	891b      	ldrh	r3, [r3, #8]
 800b4ee:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	d390      	bcc.n	800b416 <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f001 fd43 	bl	800cf80 <pbuf_free>
        dns_call_found(i, NULL);
 800b4fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b4fe:	2100      	movs	r1, #0
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff fceb 	bl	800aedc <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800b506:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b50a:	491a      	ldr	r1, [pc, #104]	; (800b574 <dns_recv+0x294>)
 800b50c:	4613      	mov	r3, r2
 800b50e:	011b      	lsls	r3, r3, #4
 800b510:	4413      	add	r3, r2
 800b512:	011b      	lsls	r3, r3, #4
 800b514:	440b      	add	r3, r1
 800b516:	330a      	adds	r3, #10
 800b518:	2200      	movs	r2, #0
 800b51a:	701a      	strb	r2, [r3, #0]
        return;
 800b51c:	e027      	b.n	800b56e <dns_recv+0x28e>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b51e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b522:	3301      	adds	r3, #1
 800b524:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b528:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	f67f aef8 	bls.w	800b322 <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 800b532:	e001      	b.n	800b538 <dns_recv+0x258>
    goto ignore_packet;
 800b534:	bf00      	nop
 800b536:	e016      	b.n	800b566 <dns_recv+0x286>
ignore_packet:
 800b538:	bf00      	nop
 800b53a:	e014      	b.n	800b566 <dns_recv+0x286>
          goto ignore_packet; /* ignore this packet */
 800b53c:	bf00      	nop
 800b53e:	e012      	b.n	800b566 <dns_recv+0x286>
          goto ignore_packet; /* ignore this packet */
 800b540:	bf00      	nop
 800b542:	e010      	b.n	800b566 <dns_recv+0x286>
            goto ignore_packet; /* ignore this packet */
 800b544:	bf00      	nop
 800b546:	e00e      	b.n	800b566 <dns_recv+0x286>
          goto ignore_packet; /* ignore this packet */
 800b548:	bf00      	nop
 800b54a:	e00c      	b.n	800b566 <dns_recv+0x286>
          goto ignore_packet; /* ignore this packet */
 800b54c:	bf00      	nop
 800b54e:	e00a      	b.n	800b566 <dns_recv+0x286>
          goto ignore_packet;
 800b550:	bf00      	nop
 800b552:	e008      	b.n	800b566 <dns_recv+0x286>
              goto ignore_packet; /* ignore this packet */
 800b554:	bf00      	nop
 800b556:	e006      	b.n	800b566 <dns_recv+0x286>
              goto ignore_packet; /* ignore this packet */
 800b558:	bf00      	nop
 800b55a:	e004      	b.n	800b566 <dns_recv+0x286>
              goto ignore_packet;
 800b55c:	bf00      	nop
 800b55e:	e002      	b.n	800b566 <dns_recv+0x286>
                    goto ignore_packet; /* ignore this packet */
 800b560:	bf00      	nop
 800b562:	e000      	b.n	800b566 <dns_recv+0x286>
              goto ignore_packet; /* ignore this packet */
 800b564:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f001 fd0a 	bl	800cf80 <pbuf_free>
  return;
 800b56c:	bf00      	nop
}
 800b56e:	3744      	adds	r7, #68	; 0x44
 800b570:	46bd      	mov	sp, r7
 800b572:	bd90      	pop	{r4, r7, pc}
 800b574:	20020fd8 	.word	0x20020fd8
 800b578:	20021448 	.word	0x20021448

0800b57c <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	; 0x28
 800b580:	af00      	add	r7, sp, #0
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	607a      	str	r2, [r7, #4]
 800b588:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 800b58a:	2300      	movs	r3, #0
 800b58c:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b58e:	2300      	movs	r3, #0
 800b590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b594:	e056      	b.n	800b644 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b596:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b59a:	4990      	ldr	r1, [pc, #576]	; (800b7dc <dns_enqueue+0x260>)
 800b59c:	4613      	mov	r3, r2
 800b59e:	011b      	lsls	r3, r3, #4
 800b5a0:	4413      	add	r3, r2
 800b5a2:	011b      	lsls	r3, r3, #4
 800b5a4:	440b      	add	r3, r1
 800b5a6:	330a      	adds	r3, #10
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	2b02      	cmp	r3, #2
 800b5ac:	d145      	bne.n	800b63a <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800b5ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b5b2:	4613      	mov	r3, r2
 800b5b4:	011b      	lsls	r3, r3, #4
 800b5b6:	4413      	add	r3, r2
 800b5b8:	011b      	lsls	r3, r3, #4
 800b5ba:	3310      	adds	r3, #16
 800b5bc:	4a87      	ldr	r2, [pc, #540]	; (800b7dc <dns_enqueue+0x260>)
 800b5be:	4413      	add	r3, r2
 800b5c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7ff f980 	bl	800a8cc <lwip_strnicmp>
 800b5cc:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d133      	bne.n	800b63a <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	76fb      	strb	r3, [r7, #27]
 800b5d6:	e02d      	b.n	800b634 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 800b5d8:	7efa      	ldrb	r2, [r7, #27]
 800b5da:	4981      	ldr	r1, [pc, #516]	; (800b7e0 <dns_enqueue+0x264>)
 800b5dc:	4613      	mov	r3, r2
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d120      	bne.n	800b62e <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 800b5ec:	7efa      	ldrb	r2, [r7, #27]
 800b5ee:	497c      	ldr	r1, [pc, #496]	; (800b7e0 <dns_enqueue+0x264>)
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	005b      	lsls	r3, r3, #1
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	440b      	add	r3, r1
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 800b5fe:	7efa      	ldrb	r2, [r7, #27]
 800b600:	4977      	ldr	r1, [pc, #476]	; (800b7e0 <dns_enqueue+0x264>)
 800b602:	4613      	mov	r3, r2
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	4413      	add	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	440b      	add	r3, r1
 800b60c:	3304      	adds	r3, #4
 800b60e:	683a      	ldr	r2, [r7, #0]
 800b610:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 800b612:	7efa      	ldrb	r2, [r7, #27]
 800b614:	4972      	ldr	r1, [pc, #456]	; (800b7e0 <dns_enqueue+0x264>)
 800b616:	4613      	mov	r3, r2
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	4413      	add	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	440b      	add	r3, r1
 800b620:	3308      	adds	r3, #8
 800b622:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b626:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 800b628:	f06f 0304 	mvn.w	r3, #4
 800b62c:	e0d1      	b.n	800b7d2 <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800b62e:	7efb      	ldrb	r3, [r7, #27]
 800b630:	3301      	adds	r3, #1
 800b632:	76fb      	strb	r3, [r7, #27]
 800b634:	7efb      	ldrb	r3, [r7, #27]
 800b636:	2b03      	cmp	r3, #3
 800b638:	d9ce      	bls.n	800b5d8 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800b63a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b63e:	3301      	adds	r3, #1
 800b640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b648:	2b03      	cmp	r3, #3
 800b64a:	d9a4      	bls.n	800b596 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 800b652:	2304      	movs	r3, #4
 800b654:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b658:	2300      	movs	r3, #0
 800b65a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b65e:	e027      	b.n	800b6b0 <dns_enqueue+0x134>
    entry = &dns_table[i];
 800b660:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b664:	4613      	mov	r3, r2
 800b666:	011b      	lsls	r3, r3, #4
 800b668:	4413      	add	r3, r2
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	4a5b      	ldr	r2, [pc, #364]	; (800b7dc <dns_enqueue+0x260>)
 800b66e:	4413      	add	r3, r2
 800b670:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 800b672:	6a3b      	ldr	r3, [r7, #32]
 800b674:	7a9b      	ldrb	r3, [r3, #10]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d01f      	beq.n	800b6ba <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	7a9b      	ldrb	r3, [r3, #10]
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d111      	bne.n	800b6a6 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 800b682:	4b58      	ldr	r3, [pc, #352]	; (800b7e4 <dns_enqueue+0x268>)
 800b684:	781a      	ldrb	r2, [r3, #0]
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	7b9b      	ldrb	r3, [r3, #14]
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 800b68e:	7eba      	ldrb	r2, [r7, #26]
 800b690:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b694:	429a      	cmp	r2, r3
 800b696:	d906      	bls.n	800b6a6 <dns_enqueue+0x12a>
        lseq = age;
 800b698:	7ebb      	ldrb	r3, [r7, #26]
 800b69a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 800b69e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800b6a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6b4:	2b03      	cmp	r3, #3
 800b6b6:	d9d3      	bls.n	800b660 <dns_enqueue+0xe4>
 800b6b8:	e000      	b.n	800b6bc <dns_enqueue+0x140>
      break;
 800b6ba:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 800b6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6c0:	2b04      	cmp	r3, #4
 800b6c2:	d11f      	bne.n	800b704 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 800b6c4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d80b      	bhi.n	800b6e4 <dns_enqueue+0x168>
 800b6cc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800b6d0:	4942      	ldr	r1, [pc, #264]	; (800b7dc <dns_enqueue+0x260>)
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	011b      	lsls	r3, r3, #4
 800b6d6:	4413      	add	r3, r2
 800b6d8:	011b      	lsls	r3, r3, #4
 800b6da:	440b      	add	r3, r1
 800b6dc:	330a      	adds	r3, #10
 800b6de:	781b      	ldrb	r3, [r3, #0]
 800b6e0:	2b03      	cmp	r3, #3
 800b6e2:	d002      	beq.n	800b6ea <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 800b6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6e8:	e073      	b.n	800b7d2 <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 800b6ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 800b6f2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	011b      	lsls	r3, r3, #4
 800b6fa:	4413      	add	r3, r2
 800b6fc:	011b      	lsls	r3, r3, #4
 800b6fe:	4a37      	ldr	r2, [pc, #220]	; (800b7dc <dns_enqueue+0x260>)
 800b700:	4413      	add	r3, r2
 800b702:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 800b704:	2300      	movs	r3, #0
 800b706:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800b708:	2300      	movs	r3, #0
 800b70a:	76fb      	strb	r3, [r7, #27]
 800b70c:	e015      	b.n	800b73a <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 800b70e:	7efa      	ldrb	r2, [r7, #27]
 800b710:	4933      	ldr	r1, [pc, #204]	; (800b7e0 <dns_enqueue+0x264>)
 800b712:	4613      	mov	r3, r2
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	4413      	add	r3, r2
 800b718:	009b      	lsls	r3, r3, #2
 800b71a:	440b      	add	r3, r1
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d108      	bne.n	800b734 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 800b722:	7efa      	ldrb	r2, [r7, #27]
 800b724:	4613      	mov	r3, r2
 800b726:	005b      	lsls	r3, r3, #1
 800b728:	4413      	add	r3, r2
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4a2c      	ldr	r2, [pc, #176]	; (800b7e0 <dns_enqueue+0x264>)
 800b72e:	4413      	add	r3, r2
 800b730:	61fb      	str	r3, [r7, #28]
      break;
 800b732:	e005      	b.n	800b740 <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800b734:	7efb      	ldrb	r3, [r7, #27]
 800b736:	3301      	adds	r3, #1
 800b738:	76fb      	strb	r3, [r7, #27]
 800b73a:	7efb      	ldrb	r3, [r7, #27]
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d9e6      	bls.n	800b70e <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d102      	bne.n	800b74c <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	e042      	b.n	800b7d2 <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 800b74c:	69fb      	ldr	r3, [r7, #28]
 800b74e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b752:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	2201      	movs	r2, #1
 800b758:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 800b75a:	4b22      	ldr	r3, [pc, #136]	; (800b7e4 <dns_enqueue+0x268>)
 800b75c:	781a      	ldrb	r2, [r3, #0]
 800b75e:	6a3b      	ldr	r3, [r7, #32]
 800b760:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	2bff      	cmp	r3, #255	; 0xff
 800b772:	bf28      	it	cs
 800b774:	23ff      	movcs	r3, #255	; 0xff
 800b776:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	3310      	adds	r3, #16
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	68f9      	ldr	r1, [r7, #12]
 800b780:	4618      	mov	r0, r3
 800b782:	f00d fd60 	bl	8019246 <memcpy>
  entry->name[namelen] = 0;
 800b786:	6a3a      	ldr	r2, [r7, #32]
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	4413      	add	r3, r2
 800b78c:	3310      	adds	r3, #16
 800b78e:	2200      	movs	r2, #0
 800b790:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 800b792:	f7ff fb51 	bl	800ae38 <dns_alloc_pcb>
 800b796:	4603      	mov	r3, r0
 800b798:	461a      	mov	r2, r3
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 800b79e:	6a3b      	ldr	r3, [r7, #32]
 800b7a0:	7bdb      	ldrb	r3, [r3, #15]
 800b7a2:	2b03      	cmp	r3, #3
 800b7a4:	d908      	bls.n	800b7b8 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 800b7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b7b6:	e00c      	b.n	800b7d2 <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	; (800b7e4 <dns_enqueue+0x268>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	4b08      	ldr	r3, [pc, #32]	; (800b7e4 <dns_enqueue+0x268>)
 800b7c2:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 800b7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fc99 	bl	800b100 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 800b7ce:	f06f 0304 	mvn.w	r3, #4
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3728      	adds	r7, #40	; 0x28
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	20020fd8 	.word	0x20020fd8
 800b7e0:	20021418 	.word	0x20021418
 800b7e4:	20020fd5 	.word	0x20020fd5

0800b7e8 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
 800b7f4:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d006      	beq.n	800b80a <dns_gethostbyname_addrtype+0x22>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 800b80a:	f06f 030f 	mvn.w	r3, #15
 800b80e:	e029      	b.n	800b864 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f7f4 fcfd 	bl	8000210 <strlen>
 800b816:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	2bff      	cmp	r3, #255	; 0xff
 800b81c:	d902      	bls.n	800b824 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 800b81e:	f06f 030f 	mvn.w	r3, #15
 800b822:	e01f      	b.n	800b864 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 800b824:	68b9      	ldr	r1, [r7, #8]
 800b826:	68f8      	ldr	r0, [r7, #12]
 800b828:	f00c fa06 	bl	8017c38 <ip4addr_aton>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d001      	beq.n	800b836 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 800b832:	2300      	movs	r3, #0
 800b834:	e016      	b.n	800b864 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 800b836:	68b9      	ldr	r1, [r7, #8]
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff f8b3 	bl	800a9a4 <dns_lookup>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	e00d      	b.n	800b864 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 800b848:	4b08      	ldr	r3, [pc, #32]	; (800b86c <dns_gethostbyname_addrtype+0x84>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d102      	bne.n	800b856 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 800b850:	f06f 0305 	mvn.w	r3, #5
 800b854:	e006      	b.n	800b864 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	6979      	ldr	r1, [r7, #20]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f7ff fe8d 	bl	800b57c <dns_enqueue>
 800b862:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	20021448 	.word	0x20021448

0800b870 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b876:	2300      	movs	r3, #0
 800b878:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b87a:	f00d fc03 	bl	8019084 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b87e:	f000 f8d7 	bl	800ba30 <mem_init>
  memp_init();
 800b882:	f000 fc33 	bl	800c0ec <memp_init>
  pbuf_init();
  netif_init();
 800b886:	f000 fcf9 	bl	800c27c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b88a:	f008 f9eb 	bl	8013c64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b88e:	f001 ff9d 	bl	800d7cc <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800b892:	f7ff f856 	bl	800a942 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b896:	f008 f92d 	bl	8013af4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b89a:	bf00      	nop
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <ptr_to_mem+0x20>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	88fb      	ldrh	r3, [r7, #6]
 800b8b4:	4413      	add	r3, r2
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	370c      	adds	r7, #12
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	20021450 	.word	0x20021450

0800b8c8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b083      	sub	sp, #12
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	4a05      	ldr	r2, [pc, #20]	; (800b8e8 <mem_to_ptr+0x20>)
 800b8d4:	6812      	ldr	r2, [r2, #0]
 800b8d6:	1a9b      	subs	r3, r3, r2
 800b8d8:	b29b      	uxth	r3, r3
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	370c      	adds	r7, #12
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20021450 	.word	0x20021450

0800b8ec <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b8f4:	4b45      	ldr	r3, [pc, #276]	; (800ba0c <plug_holes+0x120>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d206      	bcs.n	800b90c <plug_holes+0x20>
 800b8fe:	4b44      	ldr	r3, [pc, #272]	; (800ba10 <plug_holes+0x124>)
 800b900:	f240 12df 	movw	r2, #479	; 0x1df
 800b904:	4943      	ldr	r1, [pc, #268]	; (800ba14 <plug_holes+0x128>)
 800b906:	4844      	ldr	r0, [pc, #272]	; (800ba18 <plug_holes+0x12c>)
 800b908:	f00e fb08 	bl	8019f1c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b90c:	4b43      	ldr	r3, [pc, #268]	; (800ba1c <plug_holes+0x130>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	429a      	cmp	r2, r3
 800b914:	d306      	bcc.n	800b924 <plug_holes+0x38>
 800b916:	4b3e      	ldr	r3, [pc, #248]	; (800ba10 <plug_holes+0x124>)
 800b918:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b91c:	4940      	ldr	r1, [pc, #256]	; (800ba20 <plug_holes+0x134>)
 800b91e:	483e      	ldr	r0, [pc, #248]	; (800ba18 <plug_holes+0x12c>)
 800b920:	f00e fafc 	bl	8019f1c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	791b      	ldrb	r3, [r3, #4]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d006      	beq.n	800b93a <plug_holes+0x4e>
 800b92c:	4b38      	ldr	r3, [pc, #224]	; (800ba10 <plug_holes+0x124>)
 800b92e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b932:	493c      	ldr	r1, [pc, #240]	; (800ba24 <plug_holes+0x138>)
 800b934:	4838      	ldr	r0, [pc, #224]	; (800ba18 <plug_holes+0x12c>)
 800b936:	f00e faf1 	bl	8019f1c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	881b      	ldrh	r3, [r3, #0]
 800b93e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b942:	d906      	bls.n	800b952 <plug_holes+0x66>
 800b944:	4b32      	ldr	r3, [pc, #200]	; (800ba10 <plug_holes+0x124>)
 800b946:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b94a:	4937      	ldr	r1, [pc, #220]	; (800ba28 <plug_holes+0x13c>)
 800b94c:	4832      	ldr	r0, [pc, #200]	; (800ba18 <plug_holes+0x12c>)
 800b94e:	f00e fae5 	bl	8019f1c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	881b      	ldrh	r3, [r3, #0]
 800b956:	4618      	mov	r0, r3
 800b958:	f7ff ffa4 	bl	800b8a4 <ptr_to_mem>
 800b95c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	429a      	cmp	r2, r3
 800b964:	d024      	beq.n	800b9b0 <plug_holes+0xc4>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	791b      	ldrb	r3, [r3, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d120      	bne.n	800b9b0 <plug_holes+0xc4>
 800b96e:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <plug_holes+0x130>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	429a      	cmp	r2, r3
 800b976:	d01b      	beq.n	800b9b0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b978:	4b2c      	ldr	r3, [pc, #176]	; (800ba2c <plug_holes+0x140>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d102      	bne.n	800b988 <plug_holes+0x9c>
      lfree = mem;
 800b982:	4a2a      	ldr	r2, [pc, #168]	; (800ba2c <plug_holes+0x140>)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	881a      	ldrh	r2, [r3, #0]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b998:	d00a      	beq.n	800b9b0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff ff80 	bl	800b8a4 <ptr_to_mem>
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7ff ff8e 	bl	800b8c8 <mem_to_ptr>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	885b      	ldrh	r3, [r3, #2]
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7ff ff75 	bl	800b8a4 <ptr_to_mem>
 800b9ba:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d01f      	beq.n	800ba04 <plug_holes+0x118>
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	791b      	ldrb	r3, [r3, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d11b      	bne.n	800ba04 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b9cc:	4b17      	ldr	r3, [pc, #92]	; (800ba2c <plug_holes+0x140>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d102      	bne.n	800b9dc <plug_holes+0xf0>
      lfree = pmem;
 800b9d6:	4a15      	ldr	r2, [pc, #84]	; (800ba2c <plug_holes+0x140>)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	881a      	ldrh	r2, [r3, #0]
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	881b      	ldrh	r3, [r3, #0]
 800b9e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9ec:	d00a      	beq.n	800ba04 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	881b      	ldrh	r3, [r3, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7ff ff56 	bl	800b8a4 <ptr_to_mem>
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	68b8      	ldr	r0, [r7, #8]
 800b9fc:	f7ff ff64 	bl	800b8c8 <mem_to_ptr>
 800ba00:	4603      	mov	r3, r0
 800ba02:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ba04:	bf00      	nop
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd90      	pop	{r4, r7, pc}
 800ba0c:	20021450 	.word	0x20021450
 800ba10:	0801ec68 	.word	0x0801ec68
 800ba14:	0801ec98 	.word	0x0801ec98
 800ba18:	0801ecb0 	.word	0x0801ecb0
 800ba1c:	20021454 	.word	0x20021454
 800ba20:	0801ecd8 	.word	0x0801ecd8
 800ba24:	0801ecf4 	.word	0x0801ecf4
 800ba28:	0801ed10 	.word	0x0801ed10
 800ba2c:	2002145c 	.word	0x2002145c

0800ba30 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ba36:	4b1f      	ldr	r3, [pc, #124]	; (800bab4 <mem_init+0x84>)
 800ba38:	3303      	adds	r3, #3
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	461a      	mov	r2, r3
 800ba40:	4b1d      	ldr	r3, [pc, #116]	; (800bab8 <mem_init+0x88>)
 800ba42:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ba44:	4b1c      	ldr	r3, [pc, #112]	; (800bab8 <mem_init+0x88>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba50:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ba5e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ba62:	f7ff ff1f 	bl	800b8a4 <ptr_to_mem>
 800ba66:	4602      	mov	r2, r0
 800ba68:	4b14      	ldr	r3, [pc, #80]	; (800babc <mem_init+0x8c>)
 800ba6a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ba6c:	4b13      	ldr	r3, [pc, #76]	; (800babc <mem_init+0x8c>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2201      	movs	r2, #1
 800ba72:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ba74:	4b11      	ldr	r3, [pc, #68]	; (800babc <mem_init+0x8c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba7c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ba7e:	4b0f      	ldr	r3, [pc, #60]	; (800babc <mem_init+0x8c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba86:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba88:	4b0b      	ldr	r3, [pc, #44]	; (800bab8 <mem_init+0x88>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a0c      	ldr	r2, [pc, #48]	; (800bac0 <mem_init+0x90>)
 800ba8e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ba90:	480c      	ldr	r0, [pc, #48]	; (800bac4 <mem_init+0x94>)
 800ba92:	f00d fb05 	bl	80190a0 <sys_mutex_new>
 800ba96:	4603      	mov	r3, r0
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d006      	beq.n	800baaa <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ba9c:	4b0a      	ldr	r3, [pc, #40]	; (800bac8 <mem_init+0x98>)
 800ba9e:	f240 221f 	movw	r2, #543	; 0x21f
 800baa2:	490a      	ldr	r1, [pc, #40]	; (800bacc <mem_init+0x9c>)
 800baa4:	480a      	ldr	r0, [pc, #40]	; (800bad0 <mem_init+0xa0>)
 800baa6:	f00e fa39 	bl	8019f1c <iprintf>
  }
}
 800baaa:	bf00      	nop
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	2002481c 	.word	0x2002481c
 800bab8:	20021450 	.word	0x20021450
 800babc:	20021454 	.word	0x20021454
 800bac0:	2002145c 	.word	0x2002145c
 800bac4:	20021458 	.word	0x20021458
 800bac8:	0801ec68 	.word	0x0801ec68
 800bacc:	0801ed3c 	.word	0x0801ed3c
 800bad0:	0801ecb0 	.word	0x0801ecb0

0800bad4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f7ff fef3 	bl	800b8c8 <mem_to_ptr>
 800bae2:	4603      	mov	r3, r0
 800bae4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	881b      	ldrh	r3, [r3, #0]
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff feda 	bl	800b8a4 <ptr_to_mem>
 800baf0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	885b      	ldrh	r3, [r3, #2]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fed4 	bl	800b8a4 <ptr_to_mem>
 800bafc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	881b      	ldrh	r3, [r3, #0]
 800bb02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb06:	d818      	bhi.n	800bb3a <mem_link_valid+0x66>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	885b      	ldrh	r3, [r3, #2]
 800bb0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb10:	d813      	bhi.n	800bb3a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bb16:	8afa      	ldrh	r2, [r7, #22]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d004      	beq.n	800bb26 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	8afa      	ldrh	r2, [r7, #22]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d109      	bne.n	800bb3a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb26:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <mem_link_valid+0x74>)
 800bb28:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d006      	beq.n	800bb3e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	885b      	ldrh	r3, [r3, #2]
 800bb34:	8afa      	ldrh	r2, [r7, #22]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d001      	beq.n	800bb3e <mem_link_valid+0x6a>
    return 0;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	e000      	b.n	800bb40 <mem_link_valid+0x6c>
  }
  return 1;
 800bb3e:	2301      	movs	r3, #1
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	20021454 	.word	0x20021454

0800bb4c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b088      	sub	sp, #32
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d070      	beq.n	800bc3c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f003 0303 	and.w	r3, r3, #3
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00d      	beq.n	800bb80 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bb64:	4b37      	ldr	r3, [pc, #220]	; (800bc44 <mem_free+0xf8>)
 800bb66:	f240 2273 	movw	r2, #627	; 0x273
 800bb6a:	4937      	ldr	r1, [pc, #220]	; (800bc48 <mem_free+0xfc>)
 800bb6c:	4837      	ldr	r0, [pc, #220]	; (800bc4c <mem_free+0x100>)
 800bb6e:	f00e f9d5 	bl	8019f1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb72:	f00d faf3 	bl	801915c <sys_arch_protect>
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f00d fafd 	bl	8019178 <sys_arch_unprotect>
    return;
 800bb7e:	e05e      	b.n	800bc3e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3b08      	subs	r3, #8
 800bb84:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bb86:	4b32      	ldr	r3, [pc, #200]	; (800bc50 <mem_free+0x104>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69fa      	ldr	r2, [r7, #28]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d306      	bcc.n	800bb9e <mem_free+0x52>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f103 020c 	add.w	r2, r3, #12
 800bb96:	4b2f      	ldr	r3, [pc, #188]	; (800bc54 <mem_free+0x108>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d90d      	bls.n	800bbba <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bb9e:	4b29      	ldr	r3, [pc, #164]	; (800bc44 <mem_free+0xf8>)
 800bba0:	f240 227f 	movw	r2, #639	; 0x27f
 800bba4:	492c      	ldr	r1, [pc, #176]	; (800bc58 <mem_free+0x10c>)
 800bba6:	4829      	ldr	r0, [pc, #164]	; (800bc4c <mem_free+0x100>)
 800bba8:	f00e f9b8 	bl	8019f1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbac:	f00d fad6 	bl	801915c <sys_arch_protect>
 800bbb0:	6138      	str	r0, [r7, #16]
 800bbb2:	6938      	ldr	r0, [r7, #16]
 800bbb4:	f00d fae0 	bl	8019178 <sys_arch_unprotect>
    return;
 800bbb8:	e041      	b.n	800bc3e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bbba:	4828      	ldr	r0, [pc, #160]	; (800bc5c <mem_free+0x110>)
 800bbbc:	f00d fa8c 	bl	80190d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	791b      	ldrb	r3, [r3, #4]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d110      	bne.n	800bbea <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bbc8:	4b1e      	ldr	r3, [pc, #120]	; (800bc44 <mem_free+0xf8>)
 800bbca:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bbce:	4924      	ldr	r1, [pc, #144]	; (800bc60 <mem_free+0x114>)
 800bbd0:	481e      	ldr	r0, [pc, #120]	; (800bc4c <mem_free+0x100>)
 800bbd2:	f00e f9a3 	bl	8019f1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bbd6:	4821      	ldr	r0, [pc, #132]	; (800bc5c <mem_free+0x110>)
 800bbd8:	f00d fa8d 	bl	80190f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbdc:	f00d fabe 	bl	801915c <sys_arch_protect>
 800bbe0:	6178      	str	r0, [r7, #20]
 800bbe2:	6978      	ldr	r0, [r7, #20]
 800bbe4:	f00d fac8 	bl	8019178 <sys_arch_unprotect>
    return;
 800bbe8:	e029      	b.n	800bc3e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bbea:	69f8      	ldr	r0, [r7, #28]
 800bbec:	f7ff ff72 	bl	800bad4 <mem_link_valid>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d110      	bne.n	800bc18 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bbf6:	4b13      	ldr	r3, [pc, #76]	; (800bc44 <mem_free+0xf8>)
 800bbf8:	f240 2295 	movw	r2, #661	; 0x295
 800bbfc:	4919      	ldr	r1, [pc, #100]	; (800bc64 <mem_free+0x118>)
 800bbfe:	4813      	ldr	r0, [pc, #76]	; (800bc4c <mem_free+0x100>)
 800bc00:	f00e f98c 	bl	8019f1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bc04:	4815      	ldr	r0, [pc, #84]	; (800bc5c <mem_free+0x110>)
 800bc06:	f00d fa76 	bl	80190f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc0a:	f00d faa7 	bl	801915c <sys_arch_protect>
 800bc0e:	61b8      	str	r0, [r7, #24]
 800bc10:	69b8      	ldr	r0, [r7, #24]
 800bc12:	f00d fab1 	bl	8019178 <sys_arch_unprotect>
    return;
 800bc16:	e012      	b.n	800bc3e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bc1e:	4b12      	ldr	r3, [pc, #72]	; (800bc68 <mem_free+0x11c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	69fa      	ldr	r2, [r7, #28]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d202      	bcs.n	800bc2e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bc28:	4a0f      	ldr	r2, [pc, #60]	; (800bc68 <mem_free+0x11c>)
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bc2e:	69f8      	ldr	r0, [r7, #28]
 800bc30:	f7ff fe5c 	bl	800b8ec <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc34:	4809      	ldr	r0, [pc, #36]	; (800bc5c <mem_free+0x110>)
 800bc36:	f00d fa5e 	bl	80190f6 <sys_mutex_unlock>
 800bc3a:	e000      	b.n	800bc3e <mem_free+0xf2>
    return;
 800bc3c:	bf00      	nop
}
 800bc3e:	3720      	adds	r7, #32
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	0801ec68 	.word	0x0801ec68
 800bc48:	0801ed58 	.word	0x0801ed58
 800bc4c:	0801ecb0 	.word	0x0801ecb0
 800bc50:	20021450 	.word	0x20021450
 800bc54:	20021454 	.word	0x20021454
 800bc58:	0801ed7c 	.word	0x0801ed7c
 800bc5c:	20021458 	.word	0x20021458
 800bc60:	0801ed98 	.word	0x0801ed98
 800bc64:	0801edc0 	.word	0x0801edc0
 800bc68:	2002145c 	.word	0x2002145c

0800bc6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b088      	sub	sp, #32
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bc78:	887b      	ldrh	r3, [r7, #2]
 800bc7a:	3303      	adds	r3, #3
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	f023 0303 	bic.w	r3, r3, #3
 800bc82:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bc84:	8bfb      	ldrh	r3, [r7, #30]
 800bc86:	2b0b      	cmp	r3, #11
 800bc88:	d801      	bhi.n	800bc8e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bc8a:	230c      	movs	r3, #12
 800bc8c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bc8e:	8bfb      	ldrh	r3, [r7, #30]
 800bc90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc94:	d803      	bhi.n	800bc9e <mem_trim+0x32>
 800bc96:	8bfa      	ldrh	r2, [r7, #30]
 800bc98:	887b      	ldrh	r3, [r7, #2]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d201      	bcs.n	800bca2 <mem_trim+0x36>
    return NULL;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e0d8      	b.n	800be54 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bca2:	4b6e      	ldr	r3, [pc, #440]	; (800be5c <mem_trim+0x1f0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d304      	bcc.n	800bcb6 <mem_trim+0x4a>
 800bcac:	4b6c      	ldr	r3, [pc, #432]	; (800be60 <mem_trim+0x1f4>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d306      	bcc.n	800bcc4 <mem_trim+0x58>
 800bcb6:	4b6b      	ldr	r3, [pc, #428]	; (800be64 <mem_trim+0x1f8>)
 800bcb8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800bcbc:	496a      	ldr	r1, [pc, #424]	; (800be68 <mem_trim+0x1fc>)
 800bcbe:	486b      	ldr	r0, [pc, #428]	; (800be6c <mem_trim+0x200>)
 800bcc0:	f00e f92c 	bl	8019f1c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bcc4:	4b65      	ldr	r3, [pc, #404]	; (800be5c <mem_trim+0x1f0>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d304      	bcc.n	800bcd8 <mem_trim+0x6c>
 800bcce:	4b64      	ldr	r3, [pc, #400]	; (800be60 <mem_trim+0x1f4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d307      	bcc.n	800bce8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bcd8:	f00d fa40 	bl	801915c <sys_arch_protect>
 800bcdc:	60b8      	str	r0, [r7, #8]
 800bcde:	68b8      	ldr	r0, [r7, #8]
 800bce0:	f00d fa4a 	bl	8019178 <sys_arch_unprotect>
    return rmem;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	e0b5      	b.n	800be54 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3b08      	subs	r3, #8
 800bcec:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bcee:	69b8      	ldr	r0, [r7, #24]
 800bcf0:	f7ff fdea 	bl	800b8c8 <mem_to_ptr>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	881a      	ldrh	r2, [r3, #0]
 800bcfc:	8afb      	ldrh	r3, [r7, #22]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	3b08      	subs	r3, #8
 800bd04:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bd06:	8bfa      	ldrh	r2, [r7, #30]
 800bd08:	8abb      	ldrh	r3, [r7, #20]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d906      	bls.n	800bd1c <mem_trim+0xb0>
 800bd0e:	4b55      	ldr	r3, [pc, #340]	; (800be64 <mem_trim+0x1f8>)
 800bd10:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bd14:	4956      	ldr	r1, [pc, #344]	; (800be70 <mem_trim+0x204>)
 800bd16:	4855      	ldr	r0, [pc, #340]	; (800be6c <mem_trim+0x200>)
 800bd18:	f00e f900 	bl	8019f1c <iprintf>
  if (newsize > size) {
 800bd1c:	8bfa      	ldrh	r2, [r7, #30]
 800bd1e:	8abb      	ldrh	r3, [r7, #20]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d901      	bls.n	800bd28 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bd24:	2300      	movs	r3, #0
 800bd26:	e095      	b.n	800be54 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bd28:	8bfa      	ldrh	r2, [r7, #30]
 800bd2a:	8abb      	ldrh	r3, [r7, #20]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d101      	bne.n	800bd34 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	e08f      	b.n	800be54 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd34:	484f      	ldr	r0, [pc, #316]	; (800be74 <mem_trim+0x208>)
 800bd36:	f00d f9cf 	bl	80190d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	881b      	ldrh	r3, [r3, #0]
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f7ff fdb0 	bl	800b8a4 <ptr_to_mem>
 800bd44:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	791b      	ldrb	r3, [r3, #4]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d13f      	bne.n	800bdce <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	881b      	ldrh	r3, [r3, #0]
 800bd52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd56:	d106      	bne.n	800bd66 <mem_trim+0xfa>
 800bd58:	4b42      	ldr	r3, [pc, #264]	; (800be64 <mem_trim+0x1f8>)
 800bd5a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bd5e:	4946      	ldr	r1, [pc, #280]	; (800be78 <mem_trim+0x20c>)
 800bd60:	4842      	ldr	r0, [pc, #264]	; (800be6c <mem_trim+0x200>)
 800bd62:	f00e f8db 	bl	8019f1c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd6c:	8afa      	ldrh	r2, [r7, #22]
 800bd6e:	8bfb      	ldrh	r3, [r7, #30]
 800bd70:	4413      	add	r3, r2
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	3308      	adds	r3, #8
 800bd76:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bd78:	4b40      	ldr	r3, [pc, #256]	; (800be7c <mem_trim+0x210>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d106      	bne.n	800bd90 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bd82:	89fb      	ldrh	r3, [r7, #14]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7ff fd8d 	bl	800b8a4 <ptr_to_mem>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	4b3b      	ldr	r3, [pc, #236]	; (800be7c <mem_trim+0x210>)
 800bd8e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bd90:	89fb      	ldrh	r3, [r7, #14]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7ff fd86 	bl	800b8a4 <ptr_to_mem>
 800bd98:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	89ba      	ldrh	r2, [r7, #12]
 800bda4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	8afa      	ldrh	r2, [r7, #22]
 800bdaa:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	89fa      	ldrh	r2, [r7, #14]
 800bdb0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdba:	d047      	beq.n	800be4c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fd6f 	bl	800b8a4 <ptr_to_mem>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
 800bdca:	8053      	strh	r3, [r2, #2]
 800bdcc:	e03e      	b.n	800be4c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bdce:	8bfb      	ldrh	r3, [r7, #30]
 800bdd0:	f103 0214 	add.w	r2, r3, #20
 800bdd4:	8abb      	ldrh	r3, [r7, #20]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d838      	bhi.n	800be4c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdda:	8afa      	ldrh	r2, [r7, #22]
 800bddc:	8bfb      	ldrh	r3, [r7, #30]
 800bdde:	4413      	add	r3, r2
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	3308      	adds	r3, #8
 800bde4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdee:	d106      	bne.n	800bdfe <mem_trim+0x192>
 800bdf0:	4b1c      	ldr	r3, [pc, #112]	; (800be64 <mem_trim+0x1f8>)
 800bdf2:	f240 3216 	movw	r2, #790	; 0x316
 800bdf6:	4920      	ldr	r1, [pc, #128]	; (800be78 <mem_trim+0x20c>)
 800bdf8:	481c      	ldr	r0, [pc, #112]	; (800be6c <mem_trim+0x200>)
 800bdfa:	f00e f88f 	bl	8019f1c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bdfe:	89fb      	ldrh	r3, [r7, #14]
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fd4f 	bl	800b8a4 <ptr_to_mem>
 800be06:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800be08:	4b1c      	ldr	r3, [pc, #112]	; (800be7c <mem_trim+0x210>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	693a      	ldr	r2, [r7, #16]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d202      	bcs.n	800be18 <mem_trim+0x1ac>
      lfree = mem2;
 800be12:	4a1a      	ldr	r2, [pc, #104]	; (800be7c <mem_trim+0x210>)
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	2200      	movs	r2, #0
 800be1c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800be1e:	69bb      	ldr	r3, [r7, #24]
 800be20:	881a      	ldrh	r2, [r3, #0]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	8afa      	ldrh	r2, [r7, #22]
 800be2a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	89fa      	ldrh	r2, [r7, #14]
 800be30:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	881b      	ldrh	r3, [r3, #0]
 800be36:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be3a:	d007      	beq.n	800be4c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	881b      	ldrh	r3, [r3, #0]
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff fd2f 	bl	800b8a4 <ptr_to_mem>
 800be46:	4602      	mov	r2, r0
 800be48:	89fb      	ldrh	r3, [r7, #14]
 800be4a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be4c:	4809      	ldr	r0, [pc, #36]	; (800be74 <mem_trim+0x208>)
 800be4e:	f00d f952 	bl	80190f6 <sys_mutex_unlock>
  return rmem;
 800be52:	687b      	ldr	r3, [r7, #4]
}
 800be54:	4618      	mov	r0, r3
 800be56:	3720      	adds	r7, #32
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	20021450 	.word	0x20021450
 800be60:	20021454 	.word	0x20021454
 800be64:	0801ec68 	.word	0x0801ec68
 800be68:	0801edf4 	.word	0x0801edf4
 800be6c:	0801ecb0 	.word	0x0801ecb0
 800be70:	0801ee0c 	.word	0x0801ee0c
 800be74:	20021458 	.word	0x20021458
 800be78:	0801ee2c 	.word	0x0801ee2c
 800be7c:	2002145c 	.word	0x2002145c

0800be80 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af00      	add	r7, sp, #0
 800be86:	4603      	mov	r3, r0
 800be88:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800be8a:	88fb      	ldrh	r3, [r7, #6]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <mem_malloc+0x14>
    return NULL;
 800be90:	2300      	movs	r3, #0
 800be92:	e0e2      	b.n	800c05a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800be94:	88fb      	ldrh	r3, [r7, #6]
 800be96:	3303      	adds	r3, #3
 800be98:	b29b      	uxth	r3, r3
 800be9a:	f023 0303 	bic.w	r3, r3, #3
 800be9e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bea0:	8bbb      	ldrh	r3, [r7, #28]
 800bea2:	2b0b      	cmp	r3, #11
 800bea4:	d801      	bhi.n	800beaa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bea6:	230c      	movs	r3, #12
 800bea8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800beaa:	8bbb      	ldrh	r3, [r7, #28]
 800beac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800beb0:	d803      	bhi.n	800beba <mem_malloc+0x3a>
 800beb2:	8bba      	ldrh	r2, [r7, #28]
 800beb4:	88fb      	ldrh	r3, [r7, #6]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d201      	bcs.n	800bebe <mem_malloc+0x3e>
    return NULL;
 800beba:	2300      	movs	r3, #0
 800bebc:	e0cd      	b.n	800c05a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bebe:	4869      	ldr	r0, [pc, #420]	; (800c064 <mem_malloc+0x1e4>)
 800bec0:	f00d f90a 	bl	80190d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bec4:	4b68      	ldr	r3, [pc, #416]	; (800c068 <mem_malloc+0x1e8>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff fcfd 	bl	800b8c8 <mem_to_ptr>
 800bece:	4603      	mov	r3, r0
 800bed0:	83fb      	strh	r3, [r7, #30]
 800bed2:	e0b7      	b.n	800c044 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bed4:	8bfb      	ldrh	r3, [r7, #30]
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7ff fce4 	bl	800b8a4 <ptr_to_mem>
 800bedc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	791b      	ldrb	r3, [r3, #4]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f040 80a7 	bne.w	800c036 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	461a      	mov	r2, r3
 800beee:	8bfb      	ldrh	r3, [r7, #30]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	f1a3 0208 	sub.w	r2, r3, #8
 800bef6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bef8:	429a      	cmp	r2, r3
 800befa:	f0c0 809c 	bcc.w	800c036 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	881b      	ldrh	r3, [r3, #0]
 800bf02:	461a      	mov	r2, r3
 800bf04:	8bfb      	ldrh	r3, [r7, #30]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	f1a3 0208 	sub.w	r2, r3, #8
 800bf0c:	8bbb      	ldrh	r3, [r7, #28]
 800bf0e:	3314      	adds	r3, #20
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d333      	bcc.n	800bf7c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bf14:	8bfa      	ldrh	r2, [r7, #30]
 800bf16:	8bbb      	ldrh	r3, [r7, #28]
 800bf18:	4413      	add	r3, r2
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	3308      	adds	r3, #8
 800bf1e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bf20:	8a7b      	ldrh	r3, [r7, #18]
 800bf22:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf26:	d106      	bne.n	800bf36 <mem_malloc+0xb6>
 800bf28:	4b50      	ldr	r3, [pc, #320]	; (800c06c <mem_malloc+0x1ec>)
 800bf2a:	f240 3287 	movw	r2, #903	; 0x387
 800bf2e:	4950      	ldr	r1, [pc, #320]	; (800c070 <mem_malloc+0x1f0>)
 800bf30:	4850      	ldr	r0, [pc, #320]	; (800c074 <mem_malloc+0x1f4>)
 800bf32:	f00d fff3 	bl	8019f1c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bf36:	8a7b      	ldrh	r3, [r7, #18]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7ff fcb3 	bl	800b8a4 <ptr_to_mem>
 800bf3e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	881a      	ldrh	r2, [r3, #0]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	8bfa      	ldrh	r2, [r7, #30]
 800bf52:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	8a7a      	ldrh	r2, [r7, #18]
 800bf58:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	881b      	ldrh	r3, [r3, #0]
 800bf64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf68:	d00b      	beq.n	800bf82 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	881b      	ldrh	r3, [r3, #0]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f7ff fc98 	bl	800b8a4 <ptr_to_mem>
 800bf74:	4602      	mov	r2, r0
 800bf76:	8a7b      	ldrh	r3, [r7, #18]
 800bf78:	8053      	strh	r3, [r2, #2]
 800bf7a:	e002      	b.n	800bf82 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bf82:	4b39      	ldr	r3, [pc, #228]	; (800c068 <mem_malloc+0x1e8>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d127      	bne.n	800bfdc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bf8c:	4b36      	ldr	r3, [pc, #216]	; (800c068 <mem_malloc+0x1e8>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bf92:	e005      	b.n	800bfa0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	881b      	ldrh	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff fc83 	bl	800b8a4 <ptr_to_mem>
 800bf9e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d004      	beq.n	800bfb2 <mem_malloc+0x132>
 800bfa8:	4b33      	ldr	r3, [pc, #204]	; (800c078 <mem_malloc+0x1f8>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d1f0      	bne.n	800bf94 <mem_malloc+0x114>
          }
          lfree = cur;
 800bfb2:	4a2d      	ldr	r2, [pc, #180]	; (800c068 <mem_malloc+0x1e8>)
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bfb8:	4b2b      	ldr	r3, [pc, #172]	; (800c068 <mem_malloc+0x1e8>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	4b2e      	ldr	r3, [pc, #184]	; (800c078 <mem_malloc+0x1f8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d00b      	beq.n	800bfdc <mem_malloc+0x15c>
 800bfc4:	4b28      	ldr	r3, [pc, #160]	; (800c068 <mem_malloc+0x1e8>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	791b      	ldrb	r3, [r3, #4]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d006      	beq.n	800bfdc <mem_malloc+0x15c>
 800bfce:	4b27      	ldr	r3, [pc, #156]	; (800c06c <mem_malloc+0x1ec>)
 800bfd0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bfd4:	4929      	ldr	r1, [pc, #164]	; (800c07c <mem_malloc+0x1fc>)
 800bfd6:	4827      	ldr	r0, [pc, #156]	; (800c074 <mem_malloc+0x1f4>)
 800bfd8:	f00d ffa0 	bl	8019f1c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bfdc:	4821      	ldr	r0, [pc, #132]	; (800c064 <mem_malloc+0x1e4>)
 800bfde:	f00d f88a 	bl	80190f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bfe2:	8bba      	ldrh	r2, [r7, #28]
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	4413      	add	r3, r2
 800bfe8:	3308      	adds	r3, #8
 800bfea:	4a23      	ldr	r2, [pc, #140]	; (800c078 <mem_malloc+0x1f8>)
 800bfec:	6812      	ldr	r2, [r2, #0]
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d906      	bls.n	800c000 <mem_malloc+0x180>
 800bff2:	4b1e      	ldr	r3, [pc, #120]	; (800c06c <mem_malloc+0x1ec>)
 800bff4:	f240 32ba 	movw	r2, #954	; 0x3ba
 800bff8:	4921      	ldr	r1, [pc, #132]	; (800c080 <mem_malloc+0x200>)
 800bffa:	481e      	ldr	r0, [pc, #120]	; (800c074 <mem_malloc+0x1f4>)
 800bffc:	f00d ff8e 	bl	8019f1c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	f003 0303 	and.w	r3, r3, #3
 800c006:	2b00      	cmp	r3, #0
 800c008:	d006      	beq.n	800c018 <mem_malloc+0x198>
 800c00a:	4b18      	ldr	r3, [pc, #96]	; (800c06c <mem_malloc+0x1ec>)
 800c00c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800c010:	491c      	ldr	r1, [pc, #112]	; (800c084 <mem_malloc+0x204>)
 800c012:	4818      	ldr	r0, [pc, #96]	; (800c074 <mem_malloc+0x1f4>)
 800c014:	f00d ff82 	bl	8019f1c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	f003 0303 	and.w	r3, r3, #3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d006      	beq.n	800c030 <mem_malloc+0x1b0>
 800c022:	4b12      	ldr	r3, [pc, #72]	; (800c06c <mem_malloc+0x1ec>)
 800c024:	f240 32be 	movw	r2, #958	; 0x3be
 800c028:	4917      	ldr	r1, [pc, #92]	; (800c088 <mem_malloc+0x208>)
 800c02a:	4812      	ldr	r0, [pc, #72]	; (800c074 <mem_malloc+0x1f4>)
 800c02c:	f00d ff76 	bl	8019f1c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	3308      	adds	r3, #8
 800c034:	e011      	b.n	800c05a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c036:	8bfb      	ldrh	r3, [r7, #30]
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff fc33 	bl	800b8a4 <ptr_to_mem>
 800c03e:	4603      	mov	r3, r0
 800c040:	881b      	ldrh	r3, [r3, #0]
 800c042:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c044:	8bfa      	ldrh	r2, [r7, #30]
 800c046:	8bbb      	ldrh	r3, [r7, #28]
 800c048:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c04c:	429a      	cmp	r2, r3
 800c04e:	f4ff af41 	bcc.w	800bed4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c052:	4804      	ldr	r0, [pc, #16]	; (800c064 <mem_malloc+0x1e4>)
 800c054:	f00d f84f 	bl	80190f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3720      	adds	r7, #32
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}
 800c062:	bf00      	nop
 800c064:	20021458 	.word	0x20021458
 800c068:	2002145c 	.word	0x2002145c
 800c06c:	0801ec68 	.word	0x0801ec68
 800c070:	0801ee2c 	.word	0x0801ee2c
 800c074:	0801ecb0 	.word	0x0801ecb0
 800c078:	20021454 	.word	0x20021454
 800c07c:	0801ee40 	.word	0x0801ee40
 800c080:	0801ee5c 	.word	0x0801ee5c
 800c084:	0801ee8c 	.word	0x0801ee8c
 800c088:	0801eebc 	.word	0x0801eebc

0800c08c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b085      	sub	sp, #20
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	2200      	movs	r2, #0
 800c09a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	3303      	adds	r3, #3
 800c0a2:	f023 0303 	bic.w	r3, r3, #3
 800c0a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	e011      	b.n	800c0d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	881b      	ldrh	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	60fb      	str	r3, [r7, #12]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	885b      	ldrh	r3, [r3, #2]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	dbe7      	blt.n	800c0ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c0de:	bf00      	nop
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
	...

0800c0ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	80fb      	strh	r3, [r7, #6]
 800c0f6:	e009      	b.n	800c10c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c0f8:	88fb      	ldrh	r3, [r7, #6]
 800c0fa:	4a08      	ldr	r2, [pc, #32]	; (800c11c <memp_init+0x30>)
 800c0fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c100:	4618      	mov	r0, r3
 800c102:	f7ff ffc3 	bl	800c08c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c106:	88fb      	ldrh	r3, [r7, #6]
 800c108:	3301      	adds	r3, #1
 800c10a:	80fb      	strh	r3, [r7, #6]
 800c10c:	88fb      	ldrh	r3, [r7, #6]
 800c10e:	2b0d      	cmp	r3, #13
 800c110:	d9f2      	bls.n	800c0f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c112:	bf00      	nop
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
 800c11a:	bf00      	nop
 800c11c:	08021b00 	.word	0x08021b00

0800c120 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c128:	f00d f818 	bl	801915c <sys_arch_protect>
 800c12c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d015      	beq.n	800c168 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	6812      	ldr	r2, [r2, #0]
 800c144:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d006      	beq.n	800c15e <do_memp_malloc_pool+0x3e>
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <do_memp_malloc_pool+0x58>)
 800c152:	f240 1219 	movw	r2, #281	; 0x119
 800c156:	4909      	ldr	r1, [pc, #36]	; (800c17c <do_memp_malloc_pool+0x5c>)
 800c158:	4809      	ldr	r0, [pc, #36]	; (800c180 <do_memp_malloc_pool+0x60>)
 800c15a:	f00d fedf 	bl	8019f1c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f00d f80a 	bl	8019178 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	e003      	b.n	800c170 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f00d f805 	bl	8019178 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	0801eee0 	.word	0x0801eee0
 800c17c:	0801ef10 	.word	0x0801ef10
 800c180:	0801ef34 	.word	0x0801ef34

0800c184 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	4603      	mov	r3, r0
 800c18c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c18e:	79fb      	ldrb	r3, [r7, #7]
 800c190:	2b0d      	cmp	r3, #13
 800c192:	d908      	bls.n	800c1a6 <memp_malloc+0x22>
 800c194:	4b0a      	ldr	r3, [pc, #40]	; (800c1c0 <memp_malloc+0x3c>)
 800c196:	f240 1257 	movw	r2, #343	; 0x157
 800c19a:	490a      	ldr	r1, [pc, #40]	; (800c1c4 <memp_malloc+0x40>)
 800c19c:	480a      	ldr	r0, [pc, #40]	; (800c1c8 <memp_malloc+0x44>)
 800c19e:	f00d febd 	bl	8019f1c <iprintf>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	e008      	b.n	800c1b8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c1a6:	79fb      	ldrb	r3, [r7, #7]
 800c1a8:	4a08      	ldr	r2, [pc, #32]	; (800c1cc <memp_malloc+0x48>)
 800c1aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f7ff ffb6 	bl	800c120 <do_memp_malloc_pool>
 800c1b4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}
 800c1c0:	0801eee0 	.word	0x0801eee0
 800c1c4:	0801ef70 	.word	0x0801ef70
 800c1c8:	0801ef34 	.word	0x0801ef34
 800c1cc:	08021b00 	.word	0x08021b00

0800c1d0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	f003 0303 	and.w	r3, r3, #3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d006      	beq.n	800c1f2 <do_memp_free_pool+0x22>
 800c1e4:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <do_memp_free_pool+0x4c>)
 800c1e6:	f240 126d 	movw	r2, #365	; 0x16d
 800c1ea:	490d      	ldr	r1, [pc, #52]	; (800c220 <do_memp_free_pool+0x50>)
 800c1ec:	480d      	ldr	r0, [pc, #52]	; (800c224 <do_memp_free_pool+0x54>)
 800c1ee:	f00d fe95 	bl	8019f1c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c1f6:	f00c ffb1 	bl	801915c <sys_arch_protect>
 800c1fa:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c20e:	68b8      	ldr	r0, [r7, #8]
 800c210:	f00c ffb2 	bl	8019178 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c214:	bf00      	nop
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	0801eee0 	.word	0x0801eee0
 800c220:	0801ef90 	.word	0x0801ef90
 800c224:	0801ef34 	.word	0x0801ef34

0800c228 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	4603      	mov	r3, r0
 800c230:	6039      	str	r1, [r7, #0]
 800c232:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c234:	79fb      	ldrb	r3, [r7, #7]
 800c236:	2b0d      	cmp	r3, #13
 800c238:	d907      	bls.n	800c24a <memp_free+0x22>
 800c23a:	4b0c      	ldr	r3, [pc, #48]	; (800c26c <memp_free+0x44>)
 800c23c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c240:	490b      	ldr	r1, [pc, #44]	; (800c270 <memp_free+0x48>)
 800c242:	480c      	ldr	r0, [pc, #48]	; (800c274 <memp_free+0x4c>)
 800c244:	f00d fe6a 	bl	8019f1c <iprintf>
 800c248:	e00c      	b.n	800c264 <memp_free+0x3c>

  if (mem == NULL) {
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d008      	beq.n	800c262 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	4a09      	ldr	r2, [pc, #36]	; (800c278 <memp_free+0x50>)
 800c254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c258:	6839      	ldr	r1, [r7, #0]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff ffb8 	bl	800c1d0 <do_memp_free_pool>
 800c260:	e000      	b.n	800c264 <memp_free+0x3c>
    return;
 800c262:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	0801eee0 	.word	0x0801eee0
 800c270:	0801efb0 	.word	0x0801efb0
 800c274:	0801ef34 	.word	0x0801ef34
 800c278:	08021b00 	.word	0x08021b00

0800c27c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c280:	bf00      	nop
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
	...

0800c28c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b086      	sub	sp, #24
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
 800c298:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d108      	bne.n	800c2b2 <netif_add+0x26>
 800c2a0:	4b5b      	ldr	r3, [pc, #364]	; (800c410 <netif_add+0x184>)
 800c2a2:	f240 1227 	movw	r2, #295	; 0x127
 800c2a6:	495b      	ldr	r1, [pc, #364]	; (800c414 <netif_add+0x188>)
 800c2a8:	485b      	ldr	r0, [pc, #364]	; (800c418 <netif_add+0x18c>)
 800c2aa:	f00d fe37 	bl	8019f1c <iprintf>
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e0a9      	b.n	800c406 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d108      	bne.n	800c2ca <netif_add+0x3e>
 800c2b8:	4b55      	ldr	r3, [pc, #340]	; (800c410 <netif_add+0x184>)
 800c2ba:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c2be:	4957      	ldr	r1, [pc, #348]	; (800c41c <netif_add+0x190>)
 800c2c0:	4855      	ldr	r0, [pc, #340]	; (800c418 <netif_add+0x18c>)
 800c2c2:	f00d fe2b 	bl	8019f1c <iprintf>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e09d      	b.n	800c406 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c2d0:	4b53      	ldr	r3, [pc, #332]	; (800c420 <netif_add+0x194>)
 800c2d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c2da:	4b51      	ldr	r3, [pc, #324]	; (800c420 <netif_add+0x194>)
 800c2dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c2e4:	4b4e      	ldr	r3, [pc, #312]	; (800c420 <netif_add+0x194>)
 800c2e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	4a49      	ldr	r2, [pc, #292]	; (800c424 <netif_add+0x198>)
 800c2fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3324      	adds	r3, #36	; 0x24
 800c312:	2204      	movs	r2, #4
 800c314:	2100      	movs	r1, #0
 800c316:	4618      	mov	r0, r3
 800c318:	f00c ffb9 	bl	801928e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	2200      	movs	r2, #0
 800c320:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	6a3a      	ldr	r2, [r7, #32]
 800c326:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c328:	4b3f      	ldr	r3, [pc, #252]	; (800c428 <netif_add+0x19c>)
 800c32a:	781a      	ldrb	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c336:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	68b9      	ldr	r1, [r7, #8]
 800c33e:	68f8      	ldr	r0, [r7, #12]
 800c340:	f000 f914 	bl	800c56c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	4798      	blx	r3
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <netif_add+0xc8>
    return NULL;
 800c350:	2300      	movs	r3, #0
 800c352:	e058      	b.n	800c406 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c35a:	2bff      	cmp	r3, #255	; 0xff
 800c35c:	d103      	bne.n	800c366 <netif_add+0xda>
        netif->num = 0;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c36a:	4b30      	ldr	r3, [pc, #192]	; (800c42c <netif_add+0x1a0>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	617b      	str	r3, [r7, #20]
 800c370:	e02b      	b.n	800c3ca <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	429a      	cmp	r2, r3
 800c378:	d106      	bne.n	800c388 <netif_add+0xfc>
 800c37a:	4b25      	ldr	r3, [pc, #148]	; (800c410 <netif_add+0x184>)
 800c37c:	f240 128b 	movw	r2, #395	; 0x18b
 800c380:	492b      	ldr	r1, [pc, #172]	; (800c430 <netif_add+0x1a4>)
 800c382:	4825      	ldr	r0, [pc, #148]	; (800c418 <netif_add+0x18c>)
 800c384:	f00d fdca 	bl	8019f1c <iprintf>
        num_netifs++;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	3301      	adds	r3, #1
 800c38c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	2bff      	cmp	r3, #255	; 0xff
 800c392:	dd06      	ble.n	800c3a2 <netif_add+0x116>
 800c394:	4b1e      	ldr	r3, [pc, #120]	; (800c410 <netif_add+0x184>)
 800c396:	f240 128d 	movw	r2, #397	; 0x18d
 800c39a:	4926      	ldr	r1, [pc, #152]	; (800c434 <netif_add+0x1a8>)
 800c39c:	481e      	ldr	r0, [pc, #120]	; (800c418 <netif_add+0x18c>)
 800c39e:	f00d fdbd 	bl	8019f1c <iprintf>
        if (netif2->num == netif->num) {
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3ae:	429a      	cmp	r2, r3
 800c3b0:	d108      	bne.n	800c3c4 <netif_add+0x138>
          netif->num++;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3b8:	3301      	adds	r3, #1
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c3c2:	e005      	b.n	800c3d0 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c3c4:	697b      	ldr	r3, [r7, #20]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	617b      	str	r3, [r7, #20]
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1d0      	bne.n	800c372 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1be      	bne.n	800c354 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3dc:	2bfe      	cmp	r3, #254	; 0xfe
 800c3de:	d103      	bne.n	800c3e8 <netif_add+0x15c>
    netif_num = 0;
 800c3e0:	4b11      	ldr	r3, [pc, #68]	; (800c428 <netif_add+0x19c>)
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	701a      	strb	r2, [r3, #0]
 800c3e6:	e006      	b.n	800c3f6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	4b0d      	ldr	r3, [pc, #52]	; (800c428 <netif_add+0x19c>)
 800c3f4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c3f6:	4b0d      	ldr	r3, [pc, #52]	; (800c42c <netif_add+0x1a0>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c3fe:	4a0b      	ldr	r2, [pc, #44]	; (800c42c <netif_add+0x1a0>)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c404:	68fb      	ldr	r3, [r7, #12]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	0801efcc 	.word	0x0801efcc
 800c414:	0801f060 	.word	0x0801f060
 800c418:	0801f01c 	.word	0x0801f01c
 800c41c:	0801f07c 	.word	0x0801f07c
 800c420:	08021b90 	.word	0x08021b90
 800c424:	0800c84f 	.word	0x0800c84f
 800c428:	20021498 	.word	0x20021498
 800c42c:	20028080 	.word	0x20028080
 800c430:	0801f0a0 	.word	0x0801f0a0
 800c434:	0801f0b4 	.word	0x0801f0b4

0800c438 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c442:	6839      	ldr	r1, [r7, #0]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f003 f81b 	bl	800f480 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c44a:	6839      	ldr	r1, [r7, #0]
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f008 f8fd 	bl	801464c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c452:	bf00      	nop
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d106      	bne.n	800c47c <netif_do_set_ipaddr+0x20>
 800c46e:	4b1d      	ldr	r3, [pc, #116]	; (800c4e4 <netif_do_set_ipaddr+0x88>)
 800c470:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c474:	491c      	ldr	r1, [pc, #112]	; (800c4e8 <netif_do_set_ipaddr+0x8c>)
 800c476:	481d      	ldr	r0, [pc, #116]	; (800c4ec <netif_do_set_ipaddr+0x90>)
 800c478:	f00d fd50 	bl	8019f1c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d106      	bne.n	800c490 <netif_do_set_ipaddr+0x34>
 800c482:	4b18      	ldr	r3, [pc, #96]	; (800c4e4 <netif_do_set_ipaddr+0x88>)
 800c484:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c488:	4917      	ldr	r1, [pc, #92]	; (800c4e8 <netif_do_set_ipaddr+0x8c>)
 800c48a:	4818      	ldr	r0, [pc, #96]	; (800c4ec <netif_do_set_ipaddr+0x90>)
 800c48c:	f00d fd46 	bl	8019f1c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	3304      	adds	r3, #4
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d01c      	beq.n	800c4d8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	3304      	adds	r3, #4
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c4ae:	f107 0314 	add.w	r3, r7, #20
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff ffbf 	bl	800c438 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d002      	beq.n	800c4c6 <netif_do_set_ipaddr+0x6a>
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	e000      	b.n	800c4c8 <netif_do_set_ipaddr+0x6c>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f000 f8d2 	bl	800c678 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e000      	b.n	800c4da <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3718      	adds	r7, #24
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
 800c4e2:	bf00      	nop
 800c4e4:	0801efcc 	.word	0x0801efcc
 800c4e8:	0801f0e4 	.word	0x0801f0e4
 800c4ec:	0801f01c 	.word	0x0801f01c

0800c4f0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	3308      	adds	r3, #8
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	429a      	cmp	r2, r3
 800c508:	d00a      	beq.n	800c520 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <netif_do_set_netmask+0x26>
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	e000      	b.n	800c518 <netif_do_set_netmask+0x28>
 800c516:	2300      	movs	r3, #0
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c51c:	2301      	movs	r3, #1
 800c51e:	e000      	b.n	800c522 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr

0800c52e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c52e:	b480      	push	{r7}
 800c530:	b085      	sub	sp, #20
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	330c      	adds	r3, #12
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d00a      	beq.n	800c55e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d002      	beq.n	800c554 <netif_do_set_gw+0x26>
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	e000      	b.n	800c556 <netif_do_set_gw+0x28>
 800c554:	2300      	movs	r3, #0
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c55a:	2301      	movs	r3, #1
 800c55c:	e000      	b.n	800c560 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
 800c578:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c57e:	2300      	movs	r3, #0
 800c580:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c588:	4b1c      	ldr	r3, [pc, #112]	; (800c5fc <netif_set_addr+0x90>)
 800c58a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c592:	4b1a      	ldr	r3, [pc, #104]	; (800c5fc <netif_set_addr+0x90>)
 800c594:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d101      	bne.n	800c5a0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c59c:	4b17      	ldr	r3, [pc, #92]	; (800c5fc <netif_set_addr+0x90>)
 800c59e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c5a0:	68bb      	ldr	r3, [r7, #8]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <netif_set_addr+0x42>
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d101      	bne.n	800c5b2 <netif_set_addr+0x46>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e000      	b.n	800c5b4 <netif_set_addr+0x48>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d006      	beq.n	800c5ca <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c5bc:	f107 0310 	add.w	r3, r7, #16
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	68f8      	ldr	r0, [r7, #12]
 800c5c6:	f7ff ff49 	bl	800c45c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c5ca:	69fa      	ldr	r2, [r7, #28]
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	68f8      	ldr	r0, [r7, #12]
 800c5d0:	f7ff ff8e 	bl	800c4f0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	6839      	ldr	r1, [r7, #0]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff ffa8 	bl	800c52e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c5de:	697b      	ldr	r3, [r7, #20]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d106      	bne.n	800c5f2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c5e4:	f107 0310 	add.w	r3, r7, #16
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	68b9      	ldr	r1, [r7, #8]
 800c5ec:	68f8      	ldr	r0, [r7, #12]
 800c5ee:	f7ff ff35 	bl	800c45c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c5f2:	bf00      	nop
 800c5f4:	3720      	adds	r7, #32
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	08021b90 	.word	0x08021b90

0800c600 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c608:	4a04      	ldr	r2, [pc, #16]	; (800c61c <netif_set_default+0x1c>)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c60e:	bf00      	nop
 800c610:	370c      	adds	r7, #12
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	20028084 	.word	0x20028084

0800c620 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d107      	bne.n	800c63e <netif_set_up+0x1e>
 800c62e:	4b0f      	ldr	r3, [pc, #60]	; (800c66c <netif_set_up+0x4c>)
 800c630:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c634:	490e      	ldr	r1, [pc, #56]	; (800c670 <netif_set_up+0x50>)
 800c636:	480f      	ldr	r0, [pc, #60]	; (800c674 <netif_set_up+0x54>)
 800c638:	f00d fc70 	bl	8019f1c <iprintf>
 800c63c:	e013      	b.n	800c666 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10c      	bne.n	800c666 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c652:	f043 0301 	orr.w	r3, r3, #1
 800c656:	b2da      	uxtb	r2, r3
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c65e:	2103      	movs	r1, #3
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f000 f809 	bl	800c678 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c666:	3708      	adds	r7, #8
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	0801efcc 	.word	0x0801efcc
 800c670:	0801f154 	.word	0x0801f154
 800c674:	0801f01c 	.word	0x0801f01c

0800c678 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	460b      	mov	r3, r1
 800c682:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d106      	bne.n	800c698 <netif_issue_reports+0x20>
 800c68a:	4b18      	ldr	r3, [pc, #96]	; (800c6ec <netif_issue_reports+0x74>)
 800c68c:	f240 326d 	movw	r2, #877	; 0x36d
 800c690:	4917      	ldr	r1, [pc, #92]	; (800c6f0 <netif_issue_reports+0x78>)
 800c692:	4818      	ldr	r0, [pc, #96]	; (800c6f4 <netif_issue_reports+0x7c>)
 800c694:	f00d fc42 	bl	8019f1c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c69e:	f003 0304 	and.w	r3, r3, #4
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d01e      	beq.n	800c6e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d017      	beq.n	800c6e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c6b4:	78fb      	ldrb	r3, [r7, #3]
 800c6b6:	f003 0301 	and.w	r3, r3, #1
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d013      	beq.n	800c6e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	3304      	adds	r3, #4
 800c6c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00e      	beq.n	800c6e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6ce:	f003 0308 	and.w	r3, r3, #8
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d007      	beq.n	800c6e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	3304      	adds	r3, #4
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f00a fe17 	bl	8017310 <etharp_request>
 800c6e2:	e000      	b.n	800c6e6 <netif_issue_reports+0x6e>
    return;
 800c6e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	0801efcc 	.word	0x0801efcc
 800c6f0:	0801f170 	.word	0x0801f170
 800c6f4:	0801f01c 	.word	0x0801f01c

0800c6f8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d107      	bne.n	800c716 <netif_set_down+0x1e>
 800c706:	4b12      	ldr	r3, [pc, #72]	; (800c750 <netif_set_down+0x58>)
 800c708:	f240 329b 	movw	r2, #923	; 0x39b
 800c70c:	4911      	ldr	r1, [pc, #68]	; (800c754 <netif_set_down+0x5c>)
 800c70e:	4812      	ldr	r0, [pc, #72]	; (800c758 <netif_set_down+0x60>)
 800c710:	f00d fc04 	bl	8019f1c <iprintf>
 800c714:	e019      	b.n	800c74a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d012      	beq.n	800c74a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c72a:	f023 0301 	bic.w	r3, r3, #1
 800c72e:	b2da      	uxtb	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c73c:	f003 0308 	and.w	r3, r3, #8
 800c740:	2b00      	cmp	r3, #0
 800c742:	d002      	beq.n	800c74a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f00a f99d 	bl	8016a84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	0801efcc 	.word	0x0801efcc
 800c754:	0801f194 	.word	0x0801f194
 800c758:	0801f01c 	.word	0x0801f01c

0800c75c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d107      	bne.n	800c77a <netif_set_link_up+0x1e>
 800c76a:	4b15      	ldr	r3, [pc, #84]	; (800c7c0 <netif_set_link_up+0x64>)
 800c76c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c770:	4914      	ldr	r1, [pc, #80]	; (800c7c4 <netif_set_link_up+0x68>)
 800c772:	4815      	ldr	r0, [pc, #84]	; (800c7c8 <netif_set_link_up+0x6c>)
 800c774:	f00d fbd2 	bl	8019f1c <iprintf>
 800c778:	e01e      	b.n	800c7b8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c780:	f003 0304 	and.w	r3, r3, #4
 800c784:	2b00      	cmp	r3, #0
 800c786:	d117      	bne.n	800c7b8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c78e:	f043 0304 	orr.w	r3, r3, #4
 800c792:	b2da      	uxtb	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f008 fba2 	bl	8014ee4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c7a0:	2103      	movs	r1, #3
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7ff ff68 	bl	800c678 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	69db      	ldr	r3, [r3, #28]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d003      	beq.n	800c7b8 <netif_set_link_up+0x5c>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	69db      	ldr	r3, [r3, #28]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	0801efcc 	.word	0x0801efcc
 800c7c4:	0801f1b4 	.word	0x0801f1b4
 800c7c8:	0801f01c 	.word	0x0801f01c

0800c7cc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d107      	bne.n	800c7ea <netif_set_link_down+0x1e>
 800c7da:	4b11      	ldr	r3, [pc, #68]	; (800c820 <netif_set_link_down+0x54>)
 800c7dc:	f240 4206 	movw	r2, #1030	; 0x406
 800c7e0:	4910      	ldr	r1, [pc, #64]	; (800c824 <netif_set_link_down+0x58>)
 800c7e2:	4811      	ldr	r0, [pc, #68]	; (800c828 <netif_set_link_down+0x5c>)
 800c7e4:	f00d fb9a 	bl	8019f1c <iprintf>
 800c7e8:	e017      	b.n	800c81a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d010      	beq.n	800c81a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7fe:	f023 0304 	bic.w	r3, r3, #4
 800c802:	b2da      	uxtb	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d003      	beq.n	800c81a <netif_set_link_down+0x4e>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	69db      	ldr	r3, [r3, #28]
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c81a:	3708      	adds	r7, #8
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	0801efcc 	.word	0x0801efcc
 800c824:	0801f1d8 	.word	0x0801f1d8
 800c828:	0801f01c 	.word	0x0801f01c

0800c82c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	61da      	str	r2, [r3, #28]
  }
}
 800c842:	bf00      	nop
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c84e:	b480      	push	{r7}
 800c850:	b085      	sub	sp, #20
 800c852:	af00      	add	r7, sp, #0
 800c854:	60f8      	str	r0, [r7, #12]
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c85a:	f06f 030b 	mvn.w	r3, #11
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3714      	adds	r7, #20
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
	...

0800c86c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	4603      	mov	r3, r0
 800c874:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c876:	79fb      	ldrb	r3, [r7, #7]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d013      	beq.n	800c8a4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c87c:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <netif_get_by_index+0x48>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	60fb      	str	r3, [r7, #12]
 800c882:	e00c      	b.n	800c89e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c88a:	3301      	adds	r3, #1
 800c88c:	b2db      	uxtb	r3, r3
 800c88e:	79fa      	ldrb	r2, [r7, #7]
 800c890:	429a      	cmp	r2, r3
 800c892:	d101      	bne.n	800c898 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	e006      	b.n	800c8a6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	60fb      	str	r3, [r7, #12]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d1ef      	bne.n	800c884 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c8a4:	2300      	movs	r3, #0
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	20028080 	.word	0x20028080

0800c8b8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c8be:	f00c fc4d 	bl	801915c <sys_arch_protect>
 800c8c2:	6038      	str	r0, [r7, #0]
 800c8c4:	4b0d      	ldr	r3, [pc, #52]	; (800c8fc <pbuf_free_ooseq+0x44>)
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	701a      	strb	r2, [r3, #0]
 800c8ca:	6838      	ldr	r0, [r7, #0]
 800c8cc:	f00c fc54 	bl	8019178 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8d0:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <pbuf_free_ooseq+0x48>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	607b      	str	r3, [r7, #4]
 800c8d6:	e00a      	b.n	800c8ee <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f002 fe0b 	bl	800f4fc <tcp_free_ooseq>
      return;
 800c8e6:	e005      	b.n	800c8f4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	607b      	str	r3, [r7, #4]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1f1      	bne.n	800c8d8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20028088 	.word	0x20028088
 800c900:	20028090 	.word	0x20028090

0800c904 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c90c:	f7ff ffd4 	bl	800c8b8 <pbuf_free_ooseq>
}
 800c910:	bf00      	nop
 800c912:	3708      	adds	r7, #8
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}

0800c918 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c91e:	f00c fc1d 	bl	801915c <sys_arch_protect>
 800c922:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c924:	4b0f      	ldr	r3, [pc, #60]	; (800c964 <pbuf_pool_is_empty+0x4c>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c92a:	4b0e      	ldr	r3, [pc, #56]	; (800c964 <pbuf_pool_is_empty+0x4c>)
 800c92c:	2201      	movs	r2, #1
 800c92e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f00c fc21 	bl	8019178 <sys_arch_unprotect>

  if (!queued) {
 800c936:	78fb      	ldrb	r3, [r7, #3]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10f      	bne.n	800c95c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c93c:	2100      	movs	r1, #0
 800c93e:	480a      	ldr	r0, [pc, #40]	; (800c968 <pbuf_pool_is_empty+0x50>)
 800c940:	f7fd fef6 	bl	800a730 <tcpip_try_callback>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d008      	beq.n	800c95c <pbuf_pool_is_empty+0x44>
 800c94a:	f00c fc07 	bl	801915c <sys_arch_protect>
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	4b04      	ldr	r3, [pc, #16]	; (800c964 <pbuf_pool_is_empty+0x4c>)
 800c952:	2200      	movs	r2, #0
 800c954:	701a      	strb	r2, [r3, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f00c fc0e 	bl	8019178 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20028088 	.word	0x20028088
 800c968:	0800c905 	.word	0x0800c905

0800c96c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4611      	mov	r1, r2
 800c978:	461a      	mov	r2, r3
 800c97a:	460b      	mov	r3, r1
 800c97c:	80fb      	strh	r3, [r7, #6]
 800c97e:	4613      	mov	r3, r2
 800c980:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	88fa      	ldrh	r2, [r7, #6]
 800c992:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	88ba      	ldrh	r2, [r7, #4]
 800c998:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c99a:	8b3b      	ldrh	r3, [r7, #24]
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	7f3a      	ldrb	r2, [r7, #28]
 800c9a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	73da      	strb	r2, [r3, #15]
}
 800c9b4:	bf00      	nop
 800c9b6:	3714      	adds	r7, #20
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9be:	4770      	bx	lr

0800c9c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08c      	sub	sp, #48	; 0x30
 800c9c4:	af02      	add	r7, sp, #8
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	71fb      	strb	r3, [r7, #7]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	80bb      	strh	r3, [r7, #4]
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
 800c9d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c9d6:	887b      	ldrh	r3, [r7, #2]
 800c9d8:	2b41      	cmp	r3, #65	; 0x41
 800c9da:	d00b      	beq.n	800c9f4 <pbuf_alloc+0x34>
 800c9dc:	2b41      	cmp	r3, #65	; 0x41
 800c9de:	dc02      	bgt.n	800c9e6 <pbuf_alloc+0x26>
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d007      	beq.n	800c9f4 <pbuf_alloc+0x34>
 800c9e4:	e0c2      	b.n	800cb6c <pbuf_alloc+0x1ac>
 800c9e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c9ea:	d00b      	beq.n	800ca04 <pbuf_alloc+0x44>
 800c9ec:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c9f0:	d070      	beq.n	800cad4 <pbuf_alloc+0x114>
 800c9f2:	e0bb      	b.n	800cb6c <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c9f4:	887a      	ldrh	r2, [r7, #2]
 800c9f6:	88bb      	ldrh	r3, [r7, #4]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f000 f8d2 	bl	800cba4 <pbuf_alloc_reference>
 800ca00:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ca02:	e0bd      	b.n	800cb80 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ca04:	2300      	movs	r3, #0
 800ca06:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ca0c:	88bb      	ldrh	r3, [r7, #4]
 800ca0e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ca10:	200d      	movs	r0, #13
 800ca12:	f7ff fbb7 	bl	800c184 <memp_malloc>
 800ca16:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d109      	bne.n	800ca32 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800ca1e:	f7ff ff7b 	bl	800c918 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d002      	beq.n	800ca2e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800ca28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca2a:	f000 faa9 	bl	800cf80 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e0a7      	b.n	800cb82 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ca32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca34:	3303      	adds	r3, #3
 800ca36:	b29b      	uxth	r3, r3
 800ca38:	f023 0303 	bic.w	r3, r3, #3
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	8b7a      	ldrh	r2, [r7, #26]
 800ca46:	4293      	cmp	r3, r2
 800ca48:	bf28      	it	cs
 800ca4a:	4613      	movcs	r3, r2
 800ca4c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ca4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca50:	3310      	adds	r3, #16
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	4413      	add	r3, r2
 800ca56:	3303      	adds	r3, #3
 800ca58:	f023 0303 	bic.w	r3, r3, #3
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	89f9      	ldrh	r1, [r7, #14]
 800ca60:	8b7a      	ldrh	r2, [r7, #26]
 800ca62:	2300      	movs	r3, #0
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	887b      	ldrh	r3, [r7, #2]
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4601      	mov	r1, r0
 800ca6e:	6938      	ldr	r0, [r7, #16]
 800ca70:	f7ff ff7c 	bl	800c96c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca74:	693b      	ldr	r3, [r7, #16]
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	f003 0303 	and.w	r3, r3, #3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d006      	beq.n	800ca8e <pbuf_alloc+0xce>
 800ca80:	4b42      	ldr	r3, [pc, #264]	; (800cb8c <pbuf_alloc+0x1cc>)
 800ca82:	f240 1201 	movw	r2, #257	; 0x101
 800ca86:	4942      	ldr	r1, [pc, #264]	; (800cb90 <pbuf_alloc+0x1d0>)
 800ca88:	4842      	ldr	r0, [pc, #264]	; (800cb94 <pbuf_alloc+0x1d4>)
 800ca8a:	f00d fa47 	bl	8019f1c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ca8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca90:	3303      	adds	r3, #3
 800ca92:	f023 0303 	bic.w	r3, r3, #3
 800ca96:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ca9a:	d106      	bne.n	800caaa <pbuf_alloc+0xea>
 800ca9c:	4b3b      	ldr	r3, [pc, #236]	; (800cb8c <pbuf_alloc+0x1cc>)
 800ca9e:	f240 1203 	movw	r2, #259	; 0x103
 800caa2:	493d      	ldr	r1, [pc, #244]	; (800cb98 <pbuf_alloc+0x1d8>)
 800caa4:	483b      	ldr	r0, [pc, #236]	; (800cb94 <pbuf_alloc+0x1d4>)
 800caa6:	f00d fa39 	bl	8019f1c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	2b00      	cmp	r3, #0
 800caae:	d102      	bne.n	800cab6 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
 800cab4:	e002      	b.n	800cabc <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	693a      	ldr	r2, [r7, #16]
 800caba:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cac0:	8b7a      	ldrh	r2, [r7, #26]
 800cac2:	89fb      	ldrh	r3, [r7, #14]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cac8:	2300      	movs	r3, #0
 800caca:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cacc:	8b7b      	ldrh	r3, [r7, #26]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d19e      	bne.n	800ca10 <pbuf_alloc+0x50>
      break;
 800cad2:	e055      	b.n	800cb80 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cad4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cad6:	3303      	adds	r3, #3
 800cad8:	b29b      	uxth	r3, r3
 800cada:	f023 0303 	bic.w	r3, r3, #3
 800cade:	b29a      	uxth	r2, r3
 800cae0:	88bb      	ldrh	r3, [r7, #4]
 800cae2:	3303      	adds	r3, #3
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	f023 0303 	bic.w	r3, r3, #3
 800caea:	b29b      	uxth	r3, r3
 800caec:	4413      	add	r3, r2
 800caee:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800caf0:	8b3b      	ldrh	r3, [r7, #24]
 800caf2:	3310      	adds	r3, #16
 800caf4:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800caf6:	8b3a      	ldrh	r2, [r7, #24]
 800caf8:	88bb      	ldrh	r3, [r7, #4]
 800cafa:	3303      	adds	r3, #3
 800cafc:	f023 0303 	bic.w	r3, r3, #3
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d306      	bcc.n	800cb12 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cb04:	8afa      	ldrh	r2, [r7, #22]
 800cb06:	88bb      	ldrh	r3, [r7, #4]
 800cb08:	3303      	adds	r3, #3
 800cb0a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d201      	bcs.n	800cb16 <pbuf_alloc+0x156>
        return NULL;
 800cb12:	2300      	movs	r3, #0
 800cb14:	e035      	b.n	800cb82 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cb16:	8afb      	ldrh	r3, [r7, #22]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff f9b1 	bl	800be80 <mem_malloc>
 800cb1e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <pbuf_alloc+0x16a>
        return NULL;
 800cb26:	2300      	movs	r3, #0
 800cb28:	e02b      	b.n	800cb82 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cb2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb2c:	3310      	adds	r3, #16
 800cb2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb30:	4413      	add	r3, r2
 800cb32:	3303      	adds	r3, #3
 800cb34:	f023 0303 	bic.w	r3, r3, #3
 800cb38:	4618      	mov	r0, r3
 800cb3a:	88b9      	ldrh	r1, [r7, #4]
 800cb3c:	88ba      	ldrh	r2, [r7, #4]
 800cb3e:	2300      	movs	r3, #0
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	887b      	ldrh	r3, [r7, #2]
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	460b      	mov	r3, r1
 800cb48:	4601      	mov	r1, r0
 800cb4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb4c:	f7ff ff0e 	bl	800c96c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	f003 0303 	and.w	r3, r3, #3
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d010      	beq.n	800cb7e <pbuf_alloc+0x1be>
 800cb5c:	4b0b      	ldr	r3, [pc, #44]	; (800cb8c <pbuf_alloc+0x1cc>)
 800cb5e:	f240 1223 	movw	r2, #291	; 0x123
 800cb62:	490e      	ldr	r1, [pc, #56]	; (800cb9c <pbuf_alloc+0x1dc>)
 800cb64:	480b      	ldr	r0, [pc, #44]	; (800cb94 <pbuf_alloc+0x1d4>)
 800cb66:	f00d f9d9 	bl	8019f1c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb6a:	e008      	b.n	800cb7e <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb6c:	4b07      	ldr	r3, [pc, #28]	; (800cb8c <pbuf_alloc+0x1cc>)
 800cb6e:	f240 1227 	movw	r2, #295	; 0x127
 800cb72:	490b      	ldr	r1, [pc, #44]	; (800cba0 <pbuf_alloc+0x1e0>)
 800cb74:	4807      	ldr	r0, [pc, #28]	; (800cb94 <pbuf_alloc+0x1d4>)
 800cb76:	f00d f9d1 	bl	8019f1c <iprintf>
      return NULL;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e001      	b.n	800cb82 <pbuf_alloc+0x1c2>
      break;
 800cb7e:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3728      	adds	r7, #40	; 0x28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	0801f1fc 	.word	0x0801f1fc
 800cb90:	0801f22c 	.word	0x0801f22c
 800cb94:	0801f25c 	.word	0x0801f25c
 800cb98:	0801f284 	.word	0x0801f284
 800cb9c:	0801f2b8 	.word	0x0801f2b8
 800cba0:	0801f2e4 	.word	0x0801f2e4

0800cba4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b086      	sub	sp, #24
 800cba8:	af02      	add	r7, sp, #8
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	460b      	mov	r3, r1
 800cbae:	807b      	strh	r3, [r7, #2]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cbb4:	883b      	ldrh	r3, [r7, #0]
 800cbb6:	2b41      	cmp	r3, #65	; 0x41
 800cbb8:	d009      	beq.n	800cbce <pbuf_alloc_reference+0x2a>
 800cbba:	883b      	ldrh	r3, [r7, #0]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d006      	beq.n	800cbce <pbuf_alloc_reference+0x2a>
 800cbc0:	4b0f      	ldr	r3, [pc, #60]	; (800cc00 <pbuf_alloc_reference+0x5c>)
 800cbc2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cbc6:	490f      	ldr	r1, [pc, #60]	; (800cc04 <pbuf_alloc_reference+0x60>)
 800cbc8:	480f      	ldr	r0, [pc, #60]	; (800cc08 <pbuf_alloc_reference+0x64>)
 800cbca:	f00d f9a7 	bl	8019f1c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cbce:	200c      	movs	r0, #12
 800cbd0:	f7ff fad8 	bl	800c184 <memp_malloc>
 800cbd4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d101      	bne.n	800cbe0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	e00b      	b.n	800cbf8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cbe0:	8879      	ldrh	r1, [r7, #2]
 800cbe2:	887a      	ldrh	r2, [r7, #2]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	9301      	str	r3, [sp, #4]
 800cbe8:	883b      	ldrh	r3, [r7, #0]
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	460b      	mov	r3, r1
 800cbee:	6879      	ldr	r1, [r7, #4]
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff febb 	bl	800c96c <pbuf_init_alloced_pbuf>
  return p;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	3710      	adds	r7, #16
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}
 800cc00:	0801f1fc 	.word	0x0801f1fc
 800cc04:	0801f300 	.word	0x0801f300
 800cc08:	0801f25c 	.word	0x0801f25c

0800cc0c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	607b      	str	r3, [r7, #4]
 800cc14:	4603      	mov	r3, r0
 800cc16:	73fb      	strb	r3, [r7, #15]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	81bb      	strh	r3, [r7, #12]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
 800cc22:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cc24:	8a7b      	ldrh	r3, [r7, #18]
 800cc26:	3303      	adds	r3, #3
 800cc28:	f023 0203 	bic.w	r2, r3, #3
 800cc2c:	89bb      	ldrh	r3, [r7, #12]
 800cc2e:	441a      	add	r2, r3
 800cc30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d901      	bls.n	800cc3a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cc36:	2300      	movs	r3, #0
 800cc38:	e018      	b.n	800cc6c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cc3a:	6a3b      	ldr	r3, [r7, #32]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d007      	beq.n	800cc50 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cc40:	8a7b      	ldrh	r3, [r7, #18]
 800cc42:	3303      	adds	r3, #3
 800cc44:	f023 0303 	bic.w	r3, r3, #3
 800cc48:	6a3a      	ldr	r2, [r7, #32]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	617b      	str	r3, [r7, #20]
 800cc4e:	e001      	b.n	800cc54 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cc50:	2300      	movs	r3, #0
 800cc52:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	89b9      	ldrh	r1, [r7, #12]
 800cc58:	89ba      	ldrh	r2, [r7, #12]
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	9301      	str	r3, [sp, #4]
 800cc5e:	897b      	ldrh	r3, [r7, #10]
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	460b      	mov	r3, r1
 800cc64:	6979      	ldr	r1, [r7, #20]
 800cc66:	f7ff fe81 	bl	800c96c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc6a:	687b      	ldr	r3, [r7, #4]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d106      	bne.n	800cc94 <pbuf_realloc+0x20>
 800cc86:	4b3a      	ldr	r3, [pc, #232]	; (800cd70 <pbuf_realloc+0xfc>)
 800cc88:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cc8c:	4939      	ldr	r1, [pc, #228]	; (800cd74 <pbuf_realloc+0x100>)
 800cc8e:	483a      	ldr	r0, [pc, #232]	; (800cd78 <pbuf_realloc+0x104>)
 800cc90:	f00d f944 	bl	8019f1c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	891b      	ldrh	r3, [r3, #8]
 800cc98:	887a      	ldrh	r2, [r7, #2]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d264      	bcs.n	800cd68 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	891a      	ldrh	r2, [r3, #8]
 800cca2:	887b      	ldrh	r3, [r7, #2]
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cca8:	887b      	ldrh	r3, [r7, #2]
 800ccaa:	817b      	strh	r3, [r7, #10]
  q = p;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ccb0:	e018      	b.n	800cce4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	895b      	ldrh	r3, [r3, #10]
 800ccb6:	897a      	ldrh	r2, [r7, #10]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	891a      	ldrh	r2, [r3, #8]
 800ccc0:	893b      	ldrh	r3, [r7, #8]
 800ccc2:	1ad3      	subs	r3, r2, r3
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d106      	bne.n	800cce4 <pbuf_realloc+0x70>
 800ccd6:	4b26      	ldr	r3, [pc, #152]	; (800cd70 <pbuf_realloc+0xfc>)
 800ccd8:	f240 12af 	movw	r2, #431	; 0x1af
 800ccdc:	4927      	ldr	r1, [pc, #156]	; (800cd7c <pbuf_realloc+0x108>)
 800ccde:	4826      	ldr	r0, [pc, #152]	; (800cd78 <pbuf_realloc+0x104>)
 800cce0:	f00d f91c 	bl	8019f1c <iprintf>
  while (rem_len > q->len) {
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	895b      	ldrh	r3, [r3, #10]
 800cce8:	897a      	ldrh	r2, [r7, #10]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d8e1      	bhi.n	800ccb2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	7b1b      	ldrb	r3, [r3, #12]
 800ccf2:	f003 030f 	and.w	r3, r3, #15
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d122      	bne.n	800cd40 <pbuf_realloc+0xcc>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	895b      	ldrh	r3, [r3, #10]
 800ccfe:	897a      	ldrh	r2, [r7, #10]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d01d      	beq.n	800cd40 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	7b5b      	ldrb	r3, [r3, #13]
 800cd08:	f003 0302 	and.w	r3, r3, #2
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d117      	bne.n	800cd40 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	461a      	mov	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	897b      	ldrh	r3, [r7, #10]
 800cd1e:	4413      	add	r3, r2
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	4619      	mov	r1, r3
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f7fe ffa1 	bl	800bc6c <mem_trim>
 800cd2a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d106      	bne.n	800cd40 <pbuf_realloc+0xcc>
 800cd32:	4b0f      	ldr	r3, [pc, #60]	; (800cd70 <pbuf_realloc+0xfc>)
 800cd34:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cd38:	4911      	ldr	r1, [pc, #68]	; (800cd80 <pbuf_realloc+0x10c>)
 800cd3a:	480f      	ldr	r0, [pc, #60]	; (800cd78 <pbuf_realloc+0x104>)
 800cd3c:	f00d f8ee 	bl	8019f1c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	897a      	ldrh	r2, [r7, #10]
 800cd44:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	895a      	ldrh	r2, [r3, #10]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d004      	beq.n	800cd60 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f000 f910 	bl	800cf80 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
 800cd66:	e000      	b.n	800cd6a <pbuf_realloc+0xf6>
    return;
 800cd68:	bf00      	nop

}
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	0801f1fc 	.word	0x0801f1fc
 800cd74:	0801f314 	.word	0x0801f314
 800cd78:	0801f25c 	.word	0x0801f25c
 800cd7c:	0801f32c 	.word	0x0801f32c
 800cd80:	0801f344 	.word	0x0801f344

0800cd84 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b086      	sub	sp, #24
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	4613      	mov	r3, r2
 800cd90:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d106      	bne.n	800cda6 <pbuf_add_header_impl+0x22>
 800cd98:	4b2b      	ldr	r3, [pc, #172]	; (800ce48 <pbuf_add_header_impl+0xc4>)
 800cd9a:	f240 12df 	movw	r2, #479	; 0x1df
 800cd9e:	492b      	ldr	r1, [pc, #172]	; (800ce4c <pbuf_add_header_impl+0xc8>)
 800cda0:	482b      	ldr	r0, [pc, #172]	; (800ce50 <pbuf_add_header_impl+0xcc>)
 800cda2:	f00d f8bb 	bl	8019f1c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <pbuf_add_header_impl+0x30>
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdb2:	d301      	bcc.n	800cdb8 <pbuf_add_header_impl+0x34>
    return 1;
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	e043      	b.n	800ce40 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d101      	bne.n	800cdc2 <pbuf_add_header_impl+0x3e>
    return 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	e03e      	b.n	800ce40 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	891a      	ldrh	r2, [r3, #8]
 800cdca:	8a7b      	ldrh	r3, [r7, #18]
 800cdcc:	4413      	add	r3, r2
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	8a7a      	ldrh	r2, [r7, #18]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d901      	bls.n	800cdda <pbuf_add_header_impl+0x56>
    return 1;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	e032      	b.n	800ce40 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	7b1b      	ldrb	r3, [r3, #12]
 800cdde:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cde0:	8a3b      	ldrh	r3, [r7, #16]
 800cde2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00c      	beq.n	800ce04 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	685a      	ldr	r2, [r3, #4]
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	425b      	negs	r3, r3
 800cdf2:	4413      	add	r3, r2
 800cdf4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3310      	adds	r3, #16
 800cdfa:	697a      	ldr	r2, [r7, #20]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d20d      	bcs.n	800ce1c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ce00:	2301      	movs	r3, #1
 800ce02:	e01d      	b.n	800ce40 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ce04:	79fb      	ldrb	r3, [r7, #7]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d006      	beq.n	800ce18 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	685a      	ldr	r2, [r3, #4]
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	425b      	negs	r3, r3
 800ce12:	4413      	add	r3, r2
 800ce14:	617b      	str	r3, [r7, #20]
 800ce16:	e001      	b.n	800ce1c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e011      	b.n	800ce40 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	895a      	ldrh	r2, [r3, #10]
 800ce26:	8a7b      	ldrh	r3, [r7, #18]
 800ce28:	4413      	add	r3, r2
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	891a      	ldrh	r2, [r3, #8]
 800ce34:	8a7b      	ldrh	r3, [r7, #18]
 800ce36:	4413      	add	r3, r2
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	811a      	strh	r2, [r3, #8]


  return 0;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	0801f1fc 	.word	0x0801f1fc
 800ce4c:	0801f360 	.word	0x0801f360
 800ce50:	0801f25c 	.word	0x0801f25c

0800ce54 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce5e:	2200      	movs	r2, #0
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff ff8e 	bl	800cd84 <pbuf_add_header_impl>
 800ce68:	4603      	mov	r3, r0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
	...

0800ce74 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d106      	bne.n	800ce92 <pbuf_remove_header+0x1e>
 800ce84:	4b20      	ldr	r3, [pc, #128]	; (800cf08 <pbuf_remove_header+0x94>)
 800ce86:	f240 224b 	movw	r2, #587	; 0x24b
 800ce8a:	4920      	ldr	r1, [pc, #128]	; (800cf0c <pbuf_remove_header+0x98>)
 800ce8c:	4820      	ldr	r0, [pc, #128]	; (800cf10 <pbuf_remove_header+0x9c>)
 800ce8e:	f00d f845 	bl	8019f1c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d003      	beq.n	800cea0 <pbuf_remove_header+0x2c>
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce9e:	d301      	bcc.n	800cea4 <pbuf_remove_header+0x30>
    return 1;
 800cea0:	2301      	movs	r3, #1
 800cea2:	e02c      	b.n	800cefe <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <pbuf_remove_header+0x3a>
    return 0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e027      	b.n	800cefe <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	895b      	ldrh	r3, [r3, #10]
 800ceb6:	89fa      	ldrh	r2, [r7, #14]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d908      	bls.n	800cece <pbuf_remove_header+0x5a>
 800cebc:	4b12      	ldr	r3, [pc, #72]	; (800cf08 <pbuf_remove_header+0x94>)
 800cebe:	f240 2255 	movw	r2, #597	; 0x255
 800cec2:	4914      	ldr	r1, [pc, #80]	; (800cf14 <pbuf_remove_header+0xa0>)
 800cec4:	4812      	ldr	r0, [pc, #72]	; (800cf10 <pbuf_remove_header+0x9c>)
 800cec6:	f00d f829 	bl	8019f1c <iprintf>
 800ceca:	2301      	movs	r3, #1
 800cecc:	e017      	b.n	800cefe <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	441a      	add	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	895a      	ldrh	r2, [r3, #10]
 800cee4:	89fb      	ldrh	r3, [r7, #14]
 800cee6:	1ad3      	subs	r3, r2, r3
 800cee8:	b29a      	uxth	r2, r3
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	891a      	ldrh	r2, [r3, #8]
 800cef2:	89fb      	ldrh	r3, [r7, #14]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	b29a      	uxth	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	0801f1fc 	.word	0x0801f1fc
 800cf0c:	0801f360 	.word	0x0801f360
 800cf10:	0801f25c 	.word	0x0801f25c
 800cf14:	0801f36c 	.word	0x0801f36c

0800cf18 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	807b      	strh	r3, [r7, #2]
 800cf24:	4613      	mov	r3, r2
 800cf26:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cf28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	da08      	bge.n	800cf42 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cf30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf34:	425b      	negs	r3, r3
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f7ff ff9b 	bl	800ce74 <pbuf_remove_header>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	e007      	b.n	800cf52 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cf42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf46:	787a      	ldrb	r2, [r7, #1]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7ff ff1a 	bl	800cd84 <pbuf_add_header_impl>
 800cf50:	4603      	mov	r3, r0
  }
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
 800cf62:	460b      	mov	r3, r1
 800cf64:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f7ff ffd2 	bl	800cf18 <pbuf_header_impl>
 800cf74:	4603      	mov	r3, r0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3708      	adds	r7, #8
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
	...

0800cf80 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d10b      	bne.n	800cfa6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d106      	bne.n	800cfa2 <pbuf_free+0x22>
 800cf94:	4b3b      	ldr	r3, [pc, #236]	; (800d084 <pbuf_free+0x104>)
 800cf96:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800cf9a:	493b      	ldr	r1, [pc, #236]	; (800d088 <pbuf_free+0x108>)
 800cf9c:	483b      	ldr	r0, [pc, #236]	; (800d08c <pbuf_free+0x10c>)
 800cf9e:	f00c ffbd 	bl	8019f1c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	e069      	b.n	800d07a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cfaa:	e062      	b.n	800d072 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cfac:	f00c f8d6 	bl	801915c <sys_arch_protect>
 800cfb0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7b9b      	ldrb	r3, [r3, #14]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d106      	bne.n	800cfc8 <pbuf_free+0x48>
 800cfba:	4b32      	ldr	r3, [pc, #200]	; (800d084 <pbuf_free+0x104>)
 800cfbc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800cfc0:	4933      	ldr	r1, [pc, #204]	; (800d090 <pbuf_free+0x110>)
 800cfc2:	4832      	ldr	r0, [pc, #200]	; (800d08c <pbuf_free+0x10c>)
 800cfc4:	f00c ffaa 	bl	8019f1c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7b9b      	ldrb	r3, [r3, #14]
 800cfcc:	3b01      	subs	r3, #1
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	739a      	strb	r2, [r3, #14]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	7b9b      	ldrb	r3, [r3, #14]
 800cfd8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cfda:	69b8      	ldr	r0, [r7, #24]
 800cfdc:	f00c f8cc 	bl	8019178 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cfe0:	7dfb      	ldrb	r3, [r7, #23]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d143      	bne.n	800d06e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	7b1b      	ldrb	r3, [r3, #12]
 800cff0:	f003 030f 	and.w	r3, r3, #15
 800cff4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7b5b      	ldrb	r3, [r3, #13]
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d011      	beq.n	800d026 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d106      	bne.n	800d01c <pbuf_free+0x9c>
 800d00e:	4b1d      	ldr	r3, [pc, #116]	; (800d084 <pbuf_free+0x104>)
 800d010:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d014:	491f      	ldr	r1, [pc, #124]	; (800d094 <pbuf_free+0x114>)
 800d016:	481d      	ldr	r0, [pc, #116]	; (800d08c <pbuf_free+0x10c>)
 800d018:	f00c ff80 	bl	8019f1c <iprintf>
        pc->custom_free_function(p);
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	4798      	blx	r3
 800d024:	e01d      	b.n	800d062 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d026:	7bfb      	ldrb	r3, [r7, #15]
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d104      	bne.n	800d036 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	200d      	movs	r0, #13
 800d030:	f7ff f8fa 	bl	800c228 <memp_free>
 800d034:	e015      	b.n	800d062 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d036:	7bfb      	ldrb	r3, [r7, #15]
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d104      	bne.n	800d046 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d03c:	6879      	ldr	r1, [r7, #4]
 800d03e:	200c      	movs	r0, #12
 800d040:	f7ff f8f2 	bl	800c228 <memp_free>
 800d044:	e00d      	b.n	800d062 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d046:	7bfb      	ldrb	r3, [r7, #15]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d103      	bne.n	800d054 <pbuf_free+0xd4>
          mem_free(p);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7fe fd7d 	bl	800bb4c <mem_free>
 800d052:	e006      	b.n	800d062 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d054:	4b0b      	ldr	r3, [pc, #44]	; (800d084 <pbuf_free+0x104>)
 800d056:	f240 320f 	movw	r2, #783	; 0x30f
 800d05a:	490f      	ldr	r1, [pc, #60]	; (800d098 <pbuf_free+0x118>)
 800d05c:	480b      	ldr	r0, [pc, #44]	; (800d08c <pbuf_free+0x10c>)
 800d05e:	f00c ff5d 	bl	8019f1c <iprintf>
        }
      }
      count++;
 800d062:	7ffb      	ldrb	r3, [r7, #31]
 800d064:	3301      	adds	r3, #1
 800d066:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d068:	693b      	ldr	r3, [r7, #16]
 800d06a:	607b      	str	r3, [r7, #4]
 800d06c:	e001      	b.n	800d072 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d06e:	2300      	movs	r3, #0
 800d070:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d199      	bne.n	800cfac <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d078:	7ffb      	ldrb	r3, [r7, #31]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3720      	adds	r7, #32
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	0801f1fc 	.word	0x0801f1fc
 800d088:	0801f360 	.word	0x0801f360
 800d08c:	0801f25c 	.word	0x0801f25c
 800d090:	0801f38c 	.word	0x0801f38c
 800d094:	0801f3a4 	.word	0x0801f3a4
 800d098:	0801f3c8 	.word	0x0801f3c8

0800d09c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d0a8:	e005      	b.n	800d0b6 <pbuf_clen+0x1a>
    ++len;
 800d0aa:	89fb      	ldrh	r3, [r7, #14]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d1f6      	bne.n	800d0aa <pbuf_clen+0xe>
  }
  return len;
 800d0bc:	89fb      	ldrh	r3, [r7, #14]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
	...

0800d0cc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d016      	beq.n	800d108 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d0da:	f00c f83f 	bl	801915c <sys_arch_protect>
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	7b9b      	ldrb	r3, [r3, #14]
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	b2da      	uxtb	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	739a      	strb	r2, [r3, #14]
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f00c f843 	bl	8019178 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7b9b      	ldrb	r3, [r3, #14]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d106      	bne.n	800d108 <pbuf_ref+0x3c>
 800d0fa:	4b05      	ldr	r3, [pc, #20]	; (800d110 <pbuf_ref+0x44>)
 800d0fc:	f240 3242 	movw	r2, #834	; 0x342
 800d100:	4904      	ldr	r1, [pc, #16]	; (800d114 <pbuf_ref+0x48>)
 800d102:	4805      	ldr	r0, [pc, #20]	; (800d118 <pbuf_ref+0x4c>)
 800d104:	f00c ff0a 	bl	8019f1c <iprintf>
  }
}
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	0801f1fc 	.word	0x0801f1fc
 800d114:	0801f3dc 	.word	0x0801f3dc
 800d118:	0801f25c 	.word	0x0801f25c

0800d11c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d002      	beq.n	800d132 <pbuf_cat+0x16>
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d107      	bne.n	800d142 <pbuf_cat+0x26>
 800d132:	4b20      	ldr	r3, [pc, #128]	; (800d1b4 <pbuf_cat+0x98>)
 800d134:	f240 325a 	movw	r2, #858	; 0x35a
 800d138:	491f      	ldr	r1, [pc, #124]	; (800d1b8 <pbuf_cat+0x9c>)
 800d13a:	4820      	ldr	r0, [pc, #128]	; (800d1bc <pbuf_cat+0xa0>)
 800d13c:	f00c feee 	bl	8019f1c <iprintf>
 800d140:	e034      	b.n	800d1ac <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	60fb      	str	r3, [r7, #12]
 800d146:	e00a      	b.n	800d15e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	891a      	ldrh	r2, [r3, #8]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	891b      	ldrh	r3, [r3, #8]
 800d150:	4413      	add	r3, r2
 800d152:	b29a      	uxth	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	60fb      	str	r3, [r7, #12]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d1f0      	bne.n	800d148 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	891a      	ldrh	r2, [r3, #8]
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	895b      	ldrh	r3, [r3, #10]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d006      	beq.n	800d180 <pbuf_cat+0x64>
 800d172:	4b10      	ldr	r3, [pc, #64]	; (800d1b4 <pbuf_cat+0x98>)
 800d174:	f240 3262 	movw	r2, #866	; 0x362
 800d178:	4911      	ldr	r1, [pc, #68]	; (800d1c0 <pbuf_cat+0xa4>)
 800d17a:	4810      	ldr	r0, [pc, #64]	; (800d1bc <pbuf_cat+0xa0>)
 800d17c:	f00c fece 	bl	8019f1c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d006      	beq.n	800d196 <pbuf_cat+0x7a>
 800d188:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <pbuf_cat+0x98>)
 800d18a:	f240 3263 	movw	r2, #867	; 0x363
 800d18e:	490d      	ldr	r1, [pc, #52]	; (800d1c4 <pbuf_cat+0xa8>)
 800d190:	480a      	ldr	r0, [pc, #40]	; (800d1bc <pbuf_cat+0xa0>)
 800d192:	f00c fec3 	bl	8019f1c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	891a      	ldrh	r2, [r3, #8]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	891b      	ldrh	r3, [r3, #8]
 800d19e:	4413      	add	r3, r2
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d1ac:	3710      	adds	r7, #16
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	0801f1fc 	.word	0x0801f1fc
 800d1b8:	0801f3f0 	.word	0x0801f3f0
 800d1bc:	0801f25c 	.word	0x0801f25c
 800d1c0:	0801f428 	.word	0x0801f428
 800d1c4:	0801f458 	.word	0x0801f458

0800d1c8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d1d2:	6839      	ldr	r1, [r7, #0]
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f7ff ffa1 	bl	800d11c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d1da:	6838      	ldr	r0, [r7, #0]
 800d1dc:	f7ff ff76 	bl	800d0cc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d1e0:	bf00      	nop
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b086      	sub	sp, #24
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	617b      	str	r3, [r7, #20]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d008      	beq.n	800d212 <pbuf_copy+0x2a>
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d005      	beq.n	800d212 <pbuf_copy+0x2a>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	891a      	ldrh	r2, [r3, #8]
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	891b      	ldrh	r3, [r3, #8]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d209      	bcs.n	800d226 <pbuf_copy+0x3e>
 800d212:	4b57      	ldr	r3, [pc, #348]	; (800d370 <pbuf_copy+0x188>)
 800d214:	f240 32ca 	movw	r2, #970	; 0x3ca
 800d218:	4956      	ldr	r1, [pc, #344]	; (800d374 <pbuf_copy+0x18c>)
 800d21a:	4857      	ldr	r0, [pc, #348]	; (800d378 <pbuf_copy+0x190>)
 800d21c:	f00c fe7e 	bl	8019f1c <iprintf>
 800d220:	f06f 030f 	mvn.w	r3, #15
 800d224:	e09f      	b.n	800d366 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	895b      	ldrh	r3, [r3, #10]
 800d22a:	461a      	mov	r2, r3
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	1ad2      	subs	r2, r2, r3
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	895b      	ldrh	r3, [r3, #10]
 800d234:	4619      	mov	r1, r3
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	1acb      	subs	r3, r1, r3
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d306      	bcc.n	800d24c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	895b      	ldrh	r3, [r3, #10]
 800d242:	461a      	mov	r2, r3
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	60fb      	str	r3, [r7, #12]
 800d24a:	e005      	b.n	800d258 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	895b      	ldrh	r3, [r3, #10]
 800d250:	461a      	mov	r2, r3
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	18d0      	adds	r0, r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	685a      	ldr	r2, [r3, #4]
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	4413      	add	r3, r2
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	4619      	mov	r1, r3
 800d26c:	f00b ffeb 	bl	8019246 <memcpy>
    offset_to += len;
 800d270:	697a      	ldr	r2, [r7, #20]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	4413      	add	r3, r2
 800d276:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	4413      	add	r3, r2
 800d27e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	895b      	ldrh	r3, [r3, #10]
 800d284:	461a      	mov	r2, r3
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	4293      	cmp	r3, r2
 800d28a:	d906      	bls.n	800d29a <pbuf_copy+0xb2>
 800d28c:	4b38      	ldr	r3, [pc, #224]	; (800d370 <pbuf_copy+0x188>)
 800d28e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d292:	493a      	ldr	r1, [pc, #232]	; (800d37c <pbuf_copy+0x194>)
 800d294:	4838      	ldr	r0, [pc, #224]	; (800d378 <pbuf_copy+0x190>)
 800d296:	f00c fe41 	bl	8019f1c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	895b      	ldrh	r3, [r3, #10]
 800d29e:	461a      	mov	r2, r3
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d906      	bls.n	800d2b4 <pbuf_copy+0xcc>
 800d2a6:	4b32      	ldr	r3, [pc, #200]	; (800d370 <pbuf_copy+0x188>)
 800d2a8:	f240 32da 	movw	r2, #986	; 0x3da
 800d2ac:	4934      	ldr	r1, [pc, #208]	; (800d380 <pbuf_copy+0x198>)
 800d2ae:	4832      	ldr	r0, [pc, #200]	; (800d378 <pbuf_copy+0x190>)
 800d2b0:	f00c fe34 	bl	8019f1c <iprintf>
    if (offset_from >= p_from->len) {
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	895b      	ldrh	r3, [r3, #10]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d304      	bcc.n	800d2ca <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	895b      	ldrh	r3, [r3, #10]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	697b      	ldr	r3, [r7, #20]
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d114      	bne.n	800d300 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10c      	bne.n	800d300 <pbuf_copy+0x118>
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d009      	beq.n	800d300 <pbuf_copy+0x118>
 800d2ec:	4b20      	ldr	r3, [pc, #128]	; (800d370 <pbuf_copy+0x188>)
 800d2ee:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d2f2:	4924      	ldr	r1, [pc, #144]	; (800d384 <pbuf_copy+0x19c>)
 800d2f4:	4820      	ldr	r0, [pc, #128]	; (800d378 <pbuf_copy+0x190>)
 800d2f6:	f00c fe11 	bl	8019f1c <iprintf>
 800d2fa:	f06f 030f 	mvn.w	r3, #15
 800d2fe:	e032      	b.n	800d366 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d013      	beq.n	800d32e <pbuf_copy+0x146>
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	895a      	ldrh	r2, [r3, #10]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	891b      	ldrh	r3, [r3, #8]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d10d      	bne.n	800d32e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d009      	beq.n	800d32e <pbuf_copy+0x146>
 800d31a:	4b15      	ldr	r3, [pc, #84]	; (800d370 <pbuf_copy+0x188>)
 800d31c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800d320:	4919      	ldr	r1, [pc, #100]	; (800d388 <pbuf_copy+0x1a0>)
 800d322:	4815      	ldr	r0, [pc, #84]	; (800d378 <pbuf_copy+0x190>)
 800d324:	f00c fdfa 	bl	8019f1c <iprintf>
 800d328:	f06f 0305 	mvn.w	r3, #5
 800d32c:	e01b      	b.n	800d366 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d013      	beq.n	800d35c <pbuf_copy+0x174>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	895a      	ldrh	r2, [r3, #10]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	891b      	ldrh	r3, [r3, #8]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d10d      	bne.n	800d35c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d009      	beq.n	800d35c <pbuf_copy+0x174>
 800d348:	4b09      	ldr	r3, [pc, #36]	; (800d370 <pbuf_copy+0x188>)
 800d34a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800d34e:	490e      	ldr	r1, [pc, #56]	; (800d388 <pbuf_copy+0x1a0>)
 800d350:	4809      	ldr	r0, [pc, #36]	; (800d378 <pbuf_copy+0x190>)
 800d352:	f00c fde3 	bl	8019f1c <iprintf>
 800d356:	f06f 0305 	mvn.w	r3, #5
 800d35a:	e004      	b.n	800d366 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f47f af61 	bne.w	800d226 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d364:	2300      	movs	r3, #0
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	0801f1fc 	.word	0x0801f1fc
 800d374:	0801f4a4 	.word	0x0801f4a4
 800d378:	0801f25c 	.word	0x0801f25c
 800d37c:	0801f4d4 	.word	0x0801f4d4
 800d380:	0801f4ec 	.word	0x0801f4ec
 800d384:	0801f508 	.word	0x0801f508
 800d388:	0801f518 	.word	0x0801f518

0800d38c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b088      	sub	sp, #32
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4611      	mov	r1, r2
 800d398:	461a      	mov	r2, r3
 800d39a:	460b      	mov	r3, r1
 800d39c:	80fb      	strh	r3, [r7, #6]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d108      	bne.n	800d3c2 <pbuf_copy_partial+0x36>
 800d3b0:	4b2b      	ldr	r3, [pc, #172]	; (800d460 <pbuf_copy_partial+0xd4>)
 800d3b2:	f240 420a 	movw	r2, #1034	; 0x40a
 800d3b6:	492b      	ldr	r1, [pc, #172]	; (800d464 <pbuf_copy_partial+0xd8>)
 800d3b8:	482b      	ldr	r0, [pc, #172]	; (800d468 <pbuf_copy_partial+0xdc>)
 800d3ba:	f00c fdaf 	bl	8019f1c <iprintf>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	e04a      	b.n	800d458 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d108      	bne.n	800d3da <pbuf_copy_partial+0x4e>
 800d3c8:	4b25      	ldr	r3, [pc, #148]	; (800d460 <pbuf_copy_partial+0xd4>)
 800d3ca:	f240 420b 	movw	r2, #1035	; 0x40b
 800d3ce:	4927      	ldr	r1, [pc, #156]	; (800d46c <pbuf_copy_partial+0xe0>)
 800d3d0:	4825      	ldr	r0, [pc, #148]	; (800d468 <pbuf_copy_partial+0xdc>)
 800d3d2:	f00c fda3 	bl	8019f1c <iprintf>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	e03e      	b.n	800d458 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	61fb      	str	r3, [r7, #28]
 800d3de:	e034      	b.n	800d44a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d3e0:	88bb      	ldrh	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00a      	beq.n	800d3fc <pbuf_copy_partial+0x70>
 800d3e6:	69fb      	ldr	r3, [r7, #28]
 800d3e8:	895b      	ldrh	r3, [r3, #10]
 800d3ea:	88ba      	ldrh	r2, [r7, #4]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d305      	bcc.n	800d3fc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	895b      	ldrh	r3, [r3, #10]
 800d3f4:	88ba      	ldrh	r2, [r7, #4]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	80bb      	strh	r3, [r7, #4]
 800d3fa:	e023      	b.n	800d444 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	895a      	ldrh	r2, [r3, #10]
 800d400:	88bb      	ldrh	r3, [r7, #4]
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d406:	8b3a      	ldrh	r2, [r7, #24]
 800d408:	88fb      	ldrh	r3, [r7, #6]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d901      	bls.n	800d412 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d40e:	88fb      	ldrh	r3, [r7, #6]
 800d410:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d412:	8b7b      	ldrh	r3, [r7, #26]
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	18d0      	adds	r0, r2, r3
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	88bb      	ldrh	r3, [r7, #4]
 800d41e:	4413      	add	r3, r2
 800d420:	8b3a      	ldrh	r2, [r7, #24]
 800d422:	4619      	mov	r1, r3
 800d424:	f00b ff0f 	bl	8019246 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d428:	8afa      	ldrh	r2, [r7, #22]
 800d42a:	8b3b      	ldrh	r3, [r7, #24]
 800d42c:	4413      	add	r3, r2
 800d42e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d430:	8b7a      	ldrh	r2, [r7, #26]
 800d432:	8b3b      	ldrh	r3, [r7, #24]
 800d434:	4413      	add	r3, r2
 800d436:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d438:	88fa      	ldrh	r2, [r7, #6]
 800d43a:	8b3b      	ldrh	r3, [r7, #24]
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d440:	2300      	movs	r3, #0
 800d442:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	61fb      	str	r3, [r7, #28]
 800d44a:	88fb      	ldrh	r3, [r7, #6]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <pbuf_copy_partial+0xca>
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1c4      	bne.n	800d3e0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d456:	8afb      	ldrh	r3, [r7, #22]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3720      	adds	r7, #32
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	0801f1fc 	.word	0x0801f1fc
 800d464:	0801f544 	.word	0x0801f544
 800d468:	0801f25c 	.word	0x0801f25c
 800d46c:	0801f564 	.word	0x0801f564

0800d470 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d470:	b480      	push	{r7}
 800d472:	b087      	sub	sp, #28
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	460b      	mov	r3, r1
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800d47e:	897b      	ldrh	r3, [r7, #10]
 800d480:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800d486:	e007      	b.n	800d498 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	895b      	ldrh	r3, [r3, #10]
 800d48c:	8afa      	ldrh	r2, [r7, #22]
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800d492:	693b      	ldr	r3, [r7, #16]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d004      	beq.n	800d4a8 <pbuf_skip_const+0x38>
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	895b      	ldrh	r3, [r3, #10]
 800d4a2:	8afa      	ldrh	r2, [r7, #22]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d2ef      	bcs.n	800d488 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	8afa      	ldrh	r2, [r7, #22]
 800d4b2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800d4b4:	693b      	ldr	r3, [r7, #16]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	371c      	adds	r7, #28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b086      	sub	sp, #24
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	60f8      	str	r0, [r7, #12]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	607a      	str	r2, [r7, #4]
 800d4ce:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800d4d0:	897b      	ldrh	r3, [r7, #10]
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f7ff ffca 	bl	800d470 <pbuf_skip_const>
 800d4dc:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800d4de:	697b      	ldr	r3, [r7, #20]
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3718      	adds	r7, #24
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	4613      	mov	r3, r2
 800d4f4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d4f6:	88fb      	ldrh	r3, [r7, #6]
 800d4f8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d109      	bne.n	800d518 <pbuf_take+0x30>
 800d504:	4b3a      	ldr	r3, [pc, #232]	; (800d5f0 <pbuf_take+0x108>)
 800d506:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d50a:	493a      	ldr	r1, [pc, #232]	; (800d5f4 <pbuf_take+0x10c>)
 800d50c:	483a      	ldr	r0, [pc, #232]	; (800d5f8 <pbuf_take+0x110>)
 800d50e:	f00c fd05 	bl	8019f1c <iprintf>
 800d512:	f06f 030f 	mvn.w	r3, #15
 800d516:	e067      	b.n	800d5e8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d109      	bne.n	800d532 <pbuf_take+0x4a>
 800d51e:	4b34      	ldr	r3, [pc, #208]	; (800d5f0 <pbuf_take+0x108>)
 800d520:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d524:	4935      	ldr	r1, [pc, #212]	; (800d5fc <pbuf_take+0x114>)
 800d526:	4834      	ldr	r0, [pc, #208]	; (800d5f8 <pbuf_take+0x110>)
 800d528:	f00c fcf8 	bl	8019f1c <iprintf>
 800d52c:	f06f 030f 	mvn.w	r3, #15
 800d530:	e05a      	b.n	800d5e8 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	891b      	ldrh	r3, [r3, #8]
 800d536:	88fa      	ldrh	r2, [r7, #6]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d909      	bls.n	800d550 <pbuf_take+0x68>
 800d53c:	4b2c      	ldr	r3, [pc, #176]	; (800d5f0 <pbuf_take+0x108>)
 800d53e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d542:	492f      	ldr	r1, [pc, #188]	; (800d600 <pbuf_take+0x118>)
 800d544:	482c      	ldr	r0, [pc, #176]	; (800d5f8 <pbuf_take+0x110>)
 800d546:	f00c fce9 	bl	8019f1c <iprintf>
 800d54a:	f04f 33ff 	mov.w	r3, #4294967295
 800d54e:	e04b      	b.n	800d5e8 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d007      	beq.n	800d566 <pbuf_take+0x7e>
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d004      	beq.n	800d566 <pbuf_take+0x7e>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	891b      	ldrh	r3, [r3, #8]
 800d560:	88fa      	ldrh	r2, [r7, #6]
 800d562:	429a      	cmp	r2, r3
 800d564:	d902      	bls.n	800d56c <pbuf_take+0x84>
    return ERR_ARG;
 800d566:	f06f 030f 	mvn.w	r3, #15
 800d56a:	e03d      	b.n	800d5e8 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	61fb      	str	r3, [r7, #28]
 800d570:	e028      	b.n	800d5c4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d106      	bne.n	800d586 <pbuf_take+0x9e>
 800d578:	4b1d      	ldr	r3, [pc, #116]	; (800d5f0 <pbuf_take+0x108>)
 800d57a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d57e:	4921      	ldr	r1, [pc, #132]	; (800d604 <pbuf_take+0x11c>)
 800d580:	481d      	ldr	r0, [pc, #116]	; (800d5f8 <pbuf_take+0x110>)
 800d582:	f00c fccb 	bl	8019f1c <iprintf>
    buf_copy_len = total_copy_len;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	895b      	ldrh	r3, [r3, #10]
 800d58e:	461a      	mov	r2, r3
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	4293      	cmp	r3, r2
 800d594:	d902      	bls.n	800d59c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	895b      	ldrh	r3, [r3, #10]
 800d59a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	6858      	ldr	r0, [r3, #4]
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	69ba      	ldr	r2, [r7, #24]
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	f00b fe4c 	bl	8019246 <memcpy>
    total_copy_len -= buf_copy_len;
 800d5ae:	697a      	ldr	r2, [r7, #20]
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800d5b6:	693a      	ldr	r2, [r7, #16]
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	61fb      	str	r3, [r7, #28]
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1d3      	bne.n	800d572 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d103      	bne.n	800d5d8 <pbuf_take+0xf0>
 800d5d0:	88fb      	ldrh	r3, [r7, #6]
 800d5d2:	693a      	ldr	r2, [r7, #16]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d006      	beq.n	800d5e6 <pbuf_take+0xfe>
 800d5d8:	4b05      	ldr	r3, [pc, #20]	; (800d5f0 <pbuf_take+0x108>)
 800d5da:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800d5de:	490a      	ldr	r1, [pc, #40]	; (800d608 <pbuf_take+0x120>)
 800d5e0:	4805      	ldr	r0, [pc, #20]	; (800d5f8 <pbuf_take+0x110>)
 800d5e2:	f00c fc9b 	bl	8019f1c <iprintf>
  return ERR_OK;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3720      	adds	r7, #32
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	0801f1fc 	.word	0x0801f1fc
 800d5f4:	0801f5d4 	.word	0x0801f5d4
 800d5f8:	0801f25c 	.word	0x0801f25c
 800d5fc:	0801f5ec 	.word	0x0801f5ec
 800d600:	0801f608 	.word	0x0801f608
 800d604:	0801f628 	.word	0x0801f628
 800d608:	0801f640 	.word	0x0801f640

0800d60c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b088      	sub	sp, #32
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	4611      	mov	r1, r2
 800d618:	461a      	mov	r2, r3
 800d61a:	460b      	mov	r3, r1
 800d61c:	80fb      	strh	r3, [r7, #6]
 800d61e:	4613      	mov	r3, r2
 800d620:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800d622:	f107 0210 	add.w	r2, r7, #16
 800d626:	88bb      	ldrh	r3, [r7, #4]
 800d628:	4619      	mov	r1, r3
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f7ff ff49 	bl	800d4c2 <pbuf_skip>
 800d630:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800d632:	69fb      	ldr	r3, [r7, #28]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d047      	beq.n	800d6c8 <pbuf_take_at+0xbc>
 800d638:	69fb      	ldr	r3, [r7, #28]
 800d63a:	891b      	ldrh	r3, [r3, #8]
 800d63c:	461a      	mov	r2, r3
 800d63e:	8a3b      	ldrh	r3, [r7, #16]
 800d640:	4619      	mov	r1, r3
 800d642:	88fb      	ldrh	r3, [r7, #6]
 800d644:	440b      	add	r3, r1
 800d646:	429a      	cmp	r2, r3
 800d648:	db3e      	blt.n	800d6c8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800d64a:	88fb      	ldrh	r3, [r7, #6]
 800d64c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	895a      	ldrh	r2, [r3, #10]
 800d656:	8a3b      	ldrh	r3, [r7, #16]
 800d658:	429a      	cmp	r2, r3
 800d65a:	d806      	bhi.n	800d66a <pbuf_take_at+0x5e>
 800d65c:	4b1d      	ldr	r3, [pc, #116]	; (800d6d4 <pbuf_take_at+0xc8>)
 800d65e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800d662:	491d      	ldr	r1, [pc, #116]	; (800d6d8 <pbuf_take_at+0xcc>)
 800d664:	481d      	ldr	r0, [pc, #116]	; (800d6dc <pbuf_take_at+0xd0>)
 800d666:	f00c fc59 	bl	8019f1c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	895b      	ldrh	r3, [r3, #10]
 800d66e:	461a      	mov	r2, r3
 800d670:	8a3b      	ldrh	r3, [r7, #16]
 800d672:	1ad2      	subs	r2, r2, r3
 800d674:	88fb      	ldrh	r3, [r7, #6]
 800d676:	429a      	cmp	r2, r3
 800d678:	da05      	bge.n	800d686 <pbuf_take_at+0x7a>
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	895a      	ldrh	r2, [r3, #10]
 800d67e:	8a3b      	ldrh	r3, [r7, #16]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	b29b      	uxth	r3, r3
 800d684:	e000      	b.n	800d688 <pbuf_take_at+0x7c>
 800d686:	88fb      	ldrh	r3, [r7, #6]
 800d688:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800d68a:	69fb      	ldr	r3, [r7, #28]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	8a3a      	ldrh	r2, [r7, #16]
 800d690:	4413      	add	r3, r2
 800d692:	8a7a      	ldrh	r2, [r7, #18]
 800d694:	68b9      	ldr	r1, [r7, #8]
 800d696:	4618      	mov	r0, r3
 800d698:	f00b fdd5 	bl	8019246 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800d69c:	8b7a      	ldrh	r2, [r7, #26]
 800d69e:	8a7b      	ldrh	r3, [r7, #18]
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800d6a4:	8a7b      	ldrh	r3, [r7, #18]
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800d6ac:	8b7b      	ldrh	r3, [r7, #26]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d008      	beq.n	800d6c4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	8b7a      	ldrh	r2, [r7, #26]
 800d6b8:	6979      	ldr	r1, [r7, #20]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff ff14 	bl	800d4e8 <pbuf_take>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	e003      	b.n	800d6cc <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	e001      	b.n	800d6cc <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800d6c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3720      	adds	r7, #32
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	0801f1fc 	.word	0x0801f1fc
 800d6d8:	0801f658 	.word	0x0801f658
 800d6dc:	0801f25c 	.word	0x0801f25c

0800d6e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	603a      	str	r2, [r7, #0]
 800d6ea:	71fb      	strb	r3, [r7, #7]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	8919      	ldrh	r1, [r3, #8]
 800d6f4:	88ba      	ldrh	r2, [r7, #4]
 800d6f6:	79fb      	ldrb	r3, [r7, #7]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff f961 	bl	800c9c0 <pbuf_alloc>
 800d6fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d101      	bne.n	800d70a <pbuf_clone+0x2a>
    return NULL;
 800d706:	2300      	movs	r3, #0
 800d708:	e011      	b.n	800d72e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	68f8      	ldr	r0, [r7, #12]
 800d70e:	f7ff fd6b 	bl	800d1e8 <pbuf_copy>
 800d712:	4603      	mov	r3, r0
 800d714:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d716:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d006      	beq.n	800d72c <pbuf_clone+0x4c>
 800d71e:	4b06      	ldr	r3, [pc, #24]	; (800d738 <pbuf_clone+0x58>)
 800d720:	f240 5224 	movw	r2, #1316	; 0x524
 800d724:	4905      	ldr	r1, [pc, #20]	; (800d73c <pbuf_clone+0x5c>)
 800d726:	4806      	ldr	r0, [pc, #24]	; (800d740 <pbuf_clone+0x60>)
 800d728:	f00c fbf8 	bl	8019f1c <iprintf>
  return q;
 800d72c:	68fb      	ldr	r3, [r7, #12]
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	0801f1fc 	.word	0x0801f1fc
 800d73c:	0801f670 	.word	0x0801f670
 800d740:	0801f25c 	.word	0x0801f25c

0800d744 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800d750:	f107 020a 	add.w	r2, r7, #10
 800d754:	887b      	ldrh	r3, [r7, #2]
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7ff fe89 	bl	800d470 <pbuf_skip_const>
 800d75e:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00a      	beq.n	800d77c <pbuf_try_get_at+0x38>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	895a      	ldrh	r2, [r3, #10]
 800d76a:	897b      	ldrh	r3, [r7, #10]
 800d76c:	429a      	cmp	r2, r3
 800d76e:	d905      	bls.n	800d77c <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	897a      	ldrh	r2, [r7, #10]
 800d776:	4413      	add	r3, r2
 800d778:	781b      	ldrb	r3, [r3, #0]
 800d77a:	e001      	b.n	800d780 <pbuf_try_get_at+0x3c>
  }
  return -1;
 800d77c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	460b      	mov	r3, r1
 800d792:	807b      	strh	r3, [r7, #2]
 800d794:	4613      	mov	r3, r2
 800d796:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800d798:	f107 020a 	add.w	r2, r7, #10
 800d79c:	887b      	ldrh	r3, [r7, #2]
 800d79e:	4619      	mov	r1, r3
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f7ff fe8e 	bl	800d4c2 <pbuf_skip>
 800d7a6:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00a      	beq.n	800d7c4 <pbuf_put_at+0x3c>
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	895a      	ldrh	r2, [r3, #10]
 800d7b2:	897b      	ldrh	r3, [r7, #10]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d905      	bls.n	800d7c4 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	685b      	ldr	r3, [r3, #4]
 800d7bc:	897a      	ldrh	r2, [r7, #10]
 800d7be:	4413      	add	r3, r2
 800d7c0:	787a      	ldrb	r2, [r7, #1]
 800d7c2:	701a      	strb	r2, [r3, #0]
  }
}
 800d7c4:	bf00      	nop
 800d7c6:	3710      	adds	r7, #16
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d7d0:	f00c fc20 	bl	801a014 <rand>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	4b01      	ldr	r3, [pc, #4]	; (800d7ec <tcp_init+0x20>)
 800d7e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d7e8:	bf00      	nop
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	20000010 	.word	0x20000010

0800d7f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b082      	sub	sp, #8
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	7d1b      	ldrb	r3, [r3, #20]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d105      	bne.n	800d80c <tcp_free+0x1c>
 800d800:	4b06      	ldr	r3, [pc, #24]	; (800d81c <tcp_free+0x2c>)
 800d802:	22d4      	movs	r2, #212	; 0xd4
 800d804:	4906      	ldr	r1, [pc, #24]	; (800d820 <tcp_free+0x30>)
 800d806:	4807      	ldr	r0, [pc, #28]	; (800d824 <tcp_free+0x34>)
 800d808:	f00c fb88 	bl	8019f1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d80c:	6879      	ldr	r1, [r7, #4]
 800d80e:	2001      	movs	r0, #1
 800d810:	f7fe fd0a 	bl	800c228 <memp_free>
}
 800d814:	bf00      	nop
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	0801f6fc 	.word	0x0801f6fc
 800d820:	0801f72c 	.word	0x0801f72c
 800d824:	0801f740 	.word	0x0801f740

0800d828 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b082      	sub	sp, #8
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	7d1b      	ldrb	r3, [r3, #20]
 800d834:	2b01      	cmp	r3, #1
 800d836:	d105      	bne.n	800d844 <tcp_free_listen+0x1c>
 800d838:	4b06      	ldr	r3, [pc, #24]	; (800d854 <tcp_free_listen+0x2c>)
 800d83a:	22df      	movs	r2, #223	; 0xdf
 800d83c:	4906      	ldr	r1, [pc, #24]	; (800d858 <tcp_free_listen+0x30>)
 800d83e:	4807      	ldr	r0, [pc, #28]	; (800d85c <tcp_free_listen+0x34>)
 800d840:	f00c fb6c 	bl	8019f1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d844:	6879      	ldr	r1, [r7, #4]
 800d846:	2002      	movs	r0, #2
 800d848:	f7fe fcee 	bl	800c228 <memp_free>
}
 800d84c:	bf00      	nop
 800d84e:	3708      	adds	r7, #8
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	0801f6fc 	.word	0x0801f6fc
 800d858:	0801f768 	.word	0x0801f768
 800d85c:	0801f740 	.word	0x0801f740

0800d860 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d864:	f001 f8e8 	bl	800ea38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d868:	4b07      	ldr	r3, [pc, #28]	; (800d888 <tcp_tmr+0x28>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	3301      	adds	r3, #1
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	4b05      	ldr	r3, [pc, #20]	; (800d888 <tcp_tmr+0x28>)
 800d872:	701a      	strb	r2, [r3, #0]
 800d874:	4b04      	ldr	r3, [pc, #16]	; (800d888 <tcp_tmr+0x28>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 0301 	and.w	r3, r3, #1
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d880:	f000 fd9c 	bl	800e3bc <tcp_slowtmr>
  }
}
 800d884:	bf00      	nop
 800d886:	bd80      	pop	{r7, pc}
 800d888:	20021499 	.word	0x20021499

0800d88c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d105      	bne.n	800d8a8 <tcp_remove_listener+0x1c>
 800d89c:	4b0d      	ldr	r3, [pc, #52]	; (800d8d4 <tcp_remove_listener+0x48>)
 800d89e:	22ff      	movs	r2, #255	; 0xff
 800d8a0:	490d      	ldr	r1, [pc, #52]	; (800d8d8 <tcp_remove_listener+0x4c>)
 800d8a2:	480e      	ldr	r0, [pc, #56]	; (800d8dc <tcp_remove_listener+0x50>)
 800d8a4:	f00c fb3a 	bl	8019f1c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	e00a      	b.n	800d8c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d8b2:	683a      	ldr	r2, [r7, #0]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d102      	bne.n	800d8be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	68db      	ldr	r3, [r3, #12]
 800d8c2:	60fb      	str	r3, [r7, #12]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d1f1      	bne.n	800d8ae <tcp_remove_listener+0x22>
    }
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	3710      	adds	r7, #16
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0801f6fc 	.word	0x0801f6fc
 800d8d8:	0801f784 	.word	0x0801f784
 800d8dc:	0801f740 	.word	0x0801f740

0800d8e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d106      	bne.n	800d8fc <tcp_listen_closed+0x1c>
 800d8ee:	4b14      	ldr	r3, [pc, #80]	; (800d940 <tcp_listen_closed+0x60>)
 800d8f0:	f240 1211 	movw	r2, #273	; 0x111
 800d8f4:	4913      	ldr	r1, [pc, #76]	; (800d944 <tcp_listen_closed+0x64>)
 800d8f6:	4814      	ldr	r0, [pc, #80]	; (800d948 <tcp_listen_closed+0x68>)
 800d8f8:	f00c fb10 	bl	8019f1c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	7d1b      	ldrb	r3, [r3, #20]
 800d900:	2b01      	cmp	r3, #1
 800d902:	d006      	beq.n	800d912 <tcp_listen_closed+0x32>
 800d904:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <tcp_listen_closed+0x60>)
 800d906:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d90a:	4910      	ldr	r1, [pc, #64]	; (800d94c <tcp_listen_closed+0x6c>)
 800d90c:	480e      	ldr	r0, [pc, #56]	; (800d948 <tcp_listen_closed+0x68>)
 800d90e:	f00c fb05 	bl	8019f1c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d912:	2301      	movs	r3, #1
 800d914:	60fb      	str	r3, [r7, #12]
 800d916:	e00b      	b.n	800d930 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d918:	4a0d      	ldr	r2, [pc, #52]	; (800d950 <tcp_listen_closed+0x70>)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	6879      	ldr	r1, [r7, #4]
 800d924:	4618      	mov	r0, r3
 800d926:	f7ff ffb1 	bl	800d88c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	3301      	adds	r3, #1
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b03      	cmp	r3, #3
 800d934:	d9f0      	bls.n	800d918 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d936:	bf00      	nop
 800d938:	3710      	adds	r7, #16
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}
 800d93e:	bf00      	nop
 800d940:	0801f6fc 	.word	0x0801f6fc
 800d944:	0801f7ac 	.word	0x0801f7ac
 800d948:	0801f740 	.word	0x0801f740
 800d94c:	0801f7b8 	.word	0x0801f7b8
 800d950:	08021b50 	.word	0x08021b50

0800d954 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d954:	b5b0      	push	{r4, r5, r7, lr}
 800d956:	b088      	sub	sp, #32
 800d958:	af04      	add	r7, sp, #16
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	460b      	mov	r3, r1
 800d95e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d106      	bne.n	800d974 <tcp_close_shutdown+0x20>
 800d966:	4b61      	ldr	r3, [pc, #388]	; (800daec <tcp_close_shutdown+0x198>)
 800d968:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d96c:	4960      	ldr	r1, [pc, #384]	; (800daf0 <tcp_close_shutdown+0x19c>)
 800d96e:	4861      	ldr	r0, [pc, #388]	; (800daf4 <tcp_close_shutdown+0x1a0>)
 800d970:	f00c fad4 	bl	8019f1c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d974:	78fb      	ldrb	r3, [r7, #3]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d066      	beq.n	800da48 <tcp_close_shutdown+0xf4>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	7d1b      	ldrb	r3, [r3, #20]
 800d97e:	2b04      	cmp	r3, #4
 800d980:	d003      	beq.n	800d98a <tcp_close_shutdown+0x36>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	7d1b      	ldrb	r3, [r3, #20]
 800d986:	2b07      	cmp	r3, #7
 800d988:	d15e      	bne.n	800da48 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d104      	bne.n	800d99c <tcp_close_shutdown+0x48>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d996:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d99a:	d055      	beq.n	800da48 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	8b5b      	ldrh	r3, [r3, #26]
 800d9a0:	f003 0310 	and.w	r3, r3, #16
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d106      	bne.n	800d9b6 <tcp_close_shutdown+0x62>
 800d9a8:	4b50      	ldr	r3, [pc, #320]	; (800daec <tcp_close_shutdown+0x198>)
 800d9aa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d9ae:	4952      	ldr	r1, [pc, #328]	; (800daf8 <tcp_close_shutdown+0x1a4>)
 800d9b0:	4850      	ldr	r0, [pc, #320]	; (800daf4 <tcp_close_shutdown+0x1a0>)
 800d9b2:	f00c fab3 	bl	8019f1c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d9be:	687d      	ldr	r5, [r7, #4]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	8ad2      	ldrh	r2, [r2, #22]
 800d9c8:	6879      	ldr	r1, [r7, #4]
 800d9ca:	8b09      	ldrh	r1, [r1, #24]
 800d9cc:	9102      	str	r1, [sp, #8]
 800d9ce:	9201      	str	r2, [sp, #4]
 800d9d0:	9300      	str	r3, [sp, #0]
 800d9d2:	462b      	mov	r3, r5
 800d9d4:	4622      	mov	r2, r4
 800d9d6:	4601      	mov	r1, r0
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f005 fe09 	bl	80135f0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f001 fbd8 	bl	800f194 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d9e4:	4b45      	ldr	r3, [pc, #276]	; (800dafc <tcp_close_shutdown+0x1a8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d105      	bne.n	800d9fa <tcp_close_shutdown+0xa6>
 800d9ee:	4b43      	ldr	r3, [pc, #268]	; (800dafc <tcp_close_shutdown+0x1a8>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	4a41      	ldr	r2, [pc, #260]	; (800dafc <tcp_close_shutdown+0x1a8>)
 800d9f6:	6013      	str	r3, [r2, #0]
 800d9f8:	e013      	b.n	800da22 <tcp_close_shutdown+0xce>
 800d9fa:	4b40      	ldr	r3, [pc, #256]	; (800dafc <tcp_close_shutdown+0x1a8>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	60fb      	str	r3, [r7, #12]
 800da00:	e00c      	b.n	800da1c <tcp_close_shutdown+0xc8>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	68db      	ldr	r3, [r3, #12]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d104      	bne.n	800da16 <tcp_close_shutdown+0xc2>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	68da      	ldr	r2, [r3, #12]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	60da      	str	r2, [r3, #12]
 800da14:	e005      	b.n	800da22 <tcp_close_shutdown+0xce>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	60fb      	str	r3, [r7, #12]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d1ef      	bne.n	800da02 <tcp_close_shutdown+0xae>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2200      	movs	r2, #0
 800da26:	60da      	str	r2, [r3, #12]
 800da28:	4b35      	ldr	r3, [pc, #212]	; (800db00 <tcp_close_shutdown+0x1ac>)
 800da2a:	2201      	movs	r2, #1
 800da2c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800da2e:	4b35      	ldr	r3, [pc, #212]	; (800db04 <tcp_close_shutdown+0x1b0>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	429a      	cmp	r2, r3
 800da36:	d102      	bne.n	800da3e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800da38:	f004 f86a 	bl	8011b10 <tcp_trigger_input_pcb_close>
 800da3c:	e002      	b.n	800da44 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f7ff fed6 	bl	800d7f0 <tcp_free>
      }
      return ERR_OK;
 800da44:	2300      	movs	r3, #0
 800da46:	e04d      	b.n	800dae4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	7d1b      	ldrb	r3, [r3, #20]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d02d      	beq.n	800daac <tcp_close_shutdown+0x158>
 800da50:	2b02      	cmp	r3, #2
 800da52:	d036      	beq.n	800dac2 <tcp_close_shutdown+0x16e>
 800da54:	2b00      	cmp	r3, #0
 800da56:	d13f      	bne.n	800dad8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	8adb      	ldrh	r3, [r3, #22]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d021      	beq.n	800daa4 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da60:	4b29      	ldr	r3, [pc, #164]	; (800db08 <tcp_close_shutdown+0x1b4>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	429a      	cmp	r2, r3
 800da68:	d105      	bne.n	800da76 <tcp_close_shutdown+0x122>
 800da6a:	4b27      	ldr	r3, [pc, #156]	; (800db08 <tcp_close_shutdown+0x1b4>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	4a25      	ldr	r2, [pc, #148]	; (800db08 <tcp_close_shutdown+0x1b4>)
 800da72:	6013      	str	r3, [r2, #0]
 800da74:	e013      	b.n	800da9e <tcp_close_shutdown+0x14a>
 800da76:	4b24      	ldr	r3, [pc, #144]	; (800db08 <tcp_close_shutdown+0x1b4>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	60bb      	str	r3, [r7, #8]
 800da7c:	e00c      	b.n	800da98 <tcp_close_shutdown+0x144>
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	68db      	ldr	r3, [r3, #12]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	429a      	cmp	r2, r3
 800da86:	d104      	bne.n	800da92 <tcp_close_shutdown+0x13e>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	68da      	ldr	r2, [r3, #12]
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	60da      	str	r2, [r3, #12]
 800da90:	e005      	b.n	800da9e <tcp_close_shutdown+0x14a>
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	60bb      	str	r3, [r7, #8]
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1ef      	bne.n	800da7e <tcp_close_shutdown+0x12a>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff fea3 	bl	800d7f0 <tcp_free>
      break;
 800daaa:	e01a      	b.n	800dae2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff ff17 	bl	800d8e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dab2:	6879      	ldr	r1, [r7, #4]
 800dab4:	4815      	ldr	r0, [pc, #84]	; (800db0c <tcp_close_shutdown+0x1b8>)
 800dab6:	f001 fbbd 	bl	800f234 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff feb4 	bl	800d828 <tcp_free_listen>
      break;
 800dac0:	e00f      	b.n	800dae2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dac2:	6879      	ldr	r1, [r7, #4]
 800dac4:	480d      	ldr	r0, [pc, #52]	; (800dafc <tcp_close_shutdown+0x1a8>)
 800dac6:	f001 fbb5 	bl	800f234 <tcp_pcb_remove>
 800daca:	4b0d      	ldr	r3, [pc, #52]	; (800db00 <tcp_close_shutdown+0x1ac>)
 800dacc:	2201      	movs	r2, #1
 800dace:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff fe8d 	bl	800d7f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dad6:	e004      	b.n	800dae2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 f819 	bl	800db10 <tcp_close_shutdown_fin>
 800dade:	4603      	mov	r3, r0
 800dae0:	e000      	b.n	800dae4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800dae2:	2300      	movs	r3, #0
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bdb0      	pop	{r4, r5, r7, pc}
 800daec:	0801f6fc 	.word	0x0801f6fc
 800daf0:	0801f7d0 	.word	0x0801f7d0
 800daf4:	0801f740 	.word	0x0801f740
 800daf8:	0801f7f0 	.word	0x0801f7f0
 800dafc:	20028090 	.word	0x20028090
 800db00:	2002808c 	.word	0x2002808c
 800db04:	200280a4 	.word	0x200280a4
 800db08:	2002809c 	.word	0x2002809c
 800db0c:	20028098 	.word	0x20028098

0800db10 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d106      	bne.n	800db2c <tcp_close_shutdown_fin+0x1c>
 800db1e:	4b2c      	ldr	r3, [pc, #176]	; (800dbd0 <tcp_close_shutdown_fin+0xc0>)
 800db20:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800db24:	492b      	ldr	r1, [pc, #172]	; (800dbd4 <tcp_close_shutdown_fin+0xc4>)
 800db26:	482c      	ldr	r0, [pc, #176]	; (800dbd8 <tcp_close_shutdown_fin+0xc8>)
 800db28:	f00c f9f8 	bl	8019f1c <iprintf>

  switch (pcb->state) {
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
 800db30:	2b04      	cmp	r3, #4
 800db32:	d010      	beq.n	800db56 <tcp_close_shutdown_fin+0x46>
 800db34:	2b07      	cmp	r3, #7
 800db36:	d01b      	beq.n	800db70 <tcp_close_shutdown_fin+0x60>
 800db38:	2b03      	cmp	r3, #3
 800db3a:	d126      	bne.n	800db8a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f004 fe53 	bl	80127e8 <tcp_send_fin>
 800db42:	4603      	mov	r3, r0
 800db44:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d11f      	bne.n	800db8e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2205      	movs	r2, #5
 800db52:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db54:	e01b      	b.n	800db8e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f004 fe46 	bl	80127e8 <tcp_send_fin>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d114      	bne.n	800db92 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2205      	movs	r2, #5
 800db6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db6e:	e010      	b.n	800db92 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f004 fe39 	bl	80127e8 <tcp_send_fin>
 800db76:	4603      	mov	r3, r0
 800db78:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d109      	bne.n	800db96 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2209      	movs	r2, #9
 800db86:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db88:	e005      	b.n	800db96 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e01c      	b.n	800dbc8 <tcp_close_shutdown_fin+0xb8>
      break;
 800db8e:	bf00      	nop
 800db90:	e002      	b.n	800db98 <tcp_close_shutdown_fin+0x88>
      break;
 800db92:	bf00      	nop
 800db94:	e000      	b.n	800db98 <tcp_close_shutdown_fin+0x88>
      break;
 800db96:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d103      	bne.n	800dba8 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f004 ff5f 	bl	8012a64 <tcp_output>
 800dba6:	e00d      	b.n	800dbc4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800dba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb0:	d108      	bne.n	800dbc4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	8b5b      	ldrh	r3, [r3, #26]
 800dbb6:	f043 0308 	orr.w	r3, r3, #8
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	e001      	b.n	800dbc8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800dbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	0801f6fc 	.word	0x0801f6fc
 800dbd4:	0801f7ac 	.word	0x0801f7ac
 800dbd8:	0801f740 	.word	0x0801f740

0800dbdc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d109      	bne.n	800dbfe <tcp_close+0x22>
 800dbea:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <tcp_close+0x4c>)
 800dbec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dbf0:	490e      	ldr	r1, [pc, #56]	; (800dc2c <tcp_close+0x50>)
 800dbf2:	480f      	ldr	r0, [pc, #60]	; (800dc30 <tcp_close+0x54>)
 800dbf4:	f00c f992 	bl	8019f1c <iprintf>
 800dbf8:	f06f 030f 	mvn.w	r3, #15
 800dbfc:	e00f      	b.n	800dc1e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	7d1b      	ldrb	r3, [r3, #20]
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d006      	beq.n	800dc14 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	8b5b      	ldrh	r3, [r3, #26]
 800dc0a:	f043 0310 	orr.w	r3, r3, #16
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dc14:	2101      	movs	r1, #1
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff fe9c 	bl	800d954 <tcp_close_shutdown>
 800dc1c:	4603      	mov	r3, r0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3708      	adds	r7, #8
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	0801f6fc 	.word	0x0801f6fc
 800dc2c:	0801f80c 	.word	0x0801f80c
 800dc30:	0801f740 	.word	0x0801f740

0800dc34 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d109      	bne.n	800dc5a <tcp_shutdown+0x26>
 800dc46:	4b25      	ldr	r3, [pc, #148]	; (800dcdc <tcp_shutdown+0xa8>)
 800dc48:	f240 2207 	movw	r2, #519	; 0x207
 800dc4c:	4924      	ldr	r1, [pc, #144]	; (800dce0 <tcp_shutdown+0xac>)
 800dc4e:	4825      	ldr	r0, [pc, #148]	; (800dce4 <tcp_shutdown+0xb0>)
 800dc50:	f00c f964 	bl	8019f1c <iprintf>
 800dc54:	f06f 030f 	mvn.w	r3, #15
 800dc58:	e03c      	b.n	800dcd4 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	7d1b      	ldrb	r3, [r3, #20]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d102      	bne.n	800dc68 <tcp_shutdown+0x34>
    return ERR_CONN;
 800dc62:	f06f 030a 	mvn.w	r3, #10
 800dc66:	e035      	b.n	800dcd4 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d01b      	beq.n	800dca6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	8b5b      	ldrh	r3, [r3, #26]
 800dc72:	f043 0310 	orr.w	r3, r3, #16
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d005      	beq.n	800dc8e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dc82:	2101      	movs	r1, #1
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f7ff fe65 	bl	800d954 <tcp_close_shutdown>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	e022      	b.n	800dcd4 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d007      	beq.n	800dca6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7ff f970 	bl	800cf80 <pbuf_free>
      pcb->refused_data = NULL;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2200      	movs	r2, #0
 800dca4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d012      	beq.n	800dcd2 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	7d1b      	ldrb	r3, [r3, #20]
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	db0b      	blt.n	800dccc <tcp_shutdown+0x98>
 800dcb4:	2b04      	cmp	r3, #4
 800dcb6:	dd01      	ble.n	800dcbc <tcp_shutdown+0x88>
 800dcb8:	2b07      	cmp	r3, #7
 800dcba:	d107      	bne.n	800dccc <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f7ff fe46 	bl	800d954 <tcp_close_shutdown>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	e003      	b.n	800dcd4 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dccc:	f06f 030a 	mvn.w	r3, #10
 800dcd0:	e000      	b.n	800dcd4 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	0801f6fc 	.word	0x0801f6fc
 800dce0:	0801f824 	.word	0x0801f824
 800dce4:	0801f740 	.word	0x0801f740

0800dce8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b08e      	sub	sp, #56	; 0x38
 800dcec:	af04      	add	r7, sp, #16
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d107      	bne.n	800dd08 <tcp_abandon+0x20>
 800dcf8:	4b52      	ldr	r3, [pc, #328]	; (800de44 <tcp_abandon+0x15c>)
 800dcfa:	f240 223d 	movw	r2, #573	; 0x23d
 800dcfe:	4952      	ldr	r1, [pc, #328]	; (800de48 <tcp_abandon+0x160>)
 800dd00:	4852      	ldr	r0, [pc, #328]	; (800de4c <tcp_abandon+0x164>)
 800dd02:	f00c f90b 	bl	8019f1c <iprintf>
 800dd06:	e099      	b.n	800de3c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	7d1b      	ldrb	r3, [r3, #20]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d106      	bne.n	800dd1e <tcp_abandon+0x36>
 800dd10:	4b4c      	ldr	r3, [pc, #304]	; (800de44 <tcp_abandon+0x15c>)
 800dd12:	f240 2241 	movw	r2, #577	; 0x241
 800dd16:	494e      	ldr	r1, [pc, #312]	; (800de50 <tcp_abandon+0x168>)
 800dd18:	484c      	ldr	r0, [pc, #304]	; (800de4c <tcp_abandon+0x164>)
 800dd1a:	f00c f8ff 	bl	8019f1c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	7d1b      	ldrb	r3, [r3, #20]
 800dd22:	2b0a      	cmp	r3, #10
 800dd24:	d107      	bne.n	800dd36 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd26:	6879      	ldr	r1, [r7, #4]
 800dd28:	484a      	ldr	r0, [pc, #296]	; (800de54 <tcp_abandon+0x16c>)
 800dd2a:	f001 fa83 	bl	800f234 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff fd5e 	bl	800d7f0 <tcp_free>
 800dd34:	e082      	b.n	800de3c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd42:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd50:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	691b      	ldr	r3, [r3, #16]
 800dd56:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	7d1b      	ldrb	r3, [r3, #20]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d126      	bne.n	800ddae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	8adb      	ldrh	r3, [r3, #22]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d02e      	beq.n	800ddc6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd68:	4b3b      	ldr	r3, [pc, #236]	; (800de58 <tcp_abandon+0x170>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d105      	bne.n	800dd7e <tcp_abandon+0x96>
 800dd72:	4b39      	ldr	r3, [pc, #228]	; (800de58 <tcp_abandon+0x170>)
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	4a37      	ldr	r2, [pc, #220]	; (800de58 <tcp_abandon+0x170>)
 800dd7a:	6013      	str	r3, [r2, #0]
 800dd7c:	e013      	b.n	800dda6 <tcp_abandon+0xbe>
 800dd7e:	4b36      	ldr	r3, [pc, #216]	; (800de58 <tcp_abandon+0x170>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	61fb      	str	r3, [r7, #28]
 800dd84:	e00c      	b.n	800dda0 <tcp_abandon+0xb8>
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d104      	bne.n	800dd9a <tcp_abandon+0xb2>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	68da      	ldr	r2, [r3, #12]
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	60da      	str	r2, [r3, #12]
 800dd98:	e005      	b.n	800dda6 <tcp_abandon+0xbe>
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	68db      	ldr	r3, [r3, #12]
 800dd9e:	61fb      	str	r3, [r7, #28]
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d1ef      	bne.n	800dd86 <tcp_abandon+0x9e>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	60da      	str	r2, [r3, #12]
 800ddac:	e00b      	b.n	800ddc6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	8adb      	ldrh	r3, [r3, #22]
 800ddb6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ddb8:	6879      	ldr	r1, [r7, #4]
 800ddba:	4828      	ldr	r0, [pc, #160]	; (800de5c <tcp_abandon+0x174>)
 800ddbc:	f001 fa3a 	bl	800f234 <tcp_pcb_remove>
 800ddc0:	4b27      	ldr	r3, [pc, #156]	; (800de60 <tcp_abandon+0x178>)
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d004      	beq.n	800ddd8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 ff10 	bl	800ebf8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d004      	beq.n	800ddea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 ff07 	bl	800ebf8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d004      	beq.n	800ddfc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 fefe 	bl	800ebf8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d00e      	beq.n	800de20 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800de02:	6879      	ldr	r1, [r7, #4]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	3304      	adds	r3, #4
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	8b12      	ldrh	r2, [r2, #24]
 800de0c:	9202      	str	r2, [sp, #8]
 800de0e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800de10:	9201      	str	r2, [sp, #4]
 800de12:	9300      	str	r3, [sp, #0]
 800de14:	460b      	mov	r3, r1
 800de16:	697a      	ldr	r2, [r7, #20]
 800de18:	69b9      	ldr	r1, [r7, #24]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f005 fbe8 	bl	80135f0 <tcp_rst>
    }
    last_state = pcb->state;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7d1b      	ldrb	r3, [r3, #20]
 800de24:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff fce2 	bl	800d7f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d004      	beq.n	800de3c <tcp_abandon+0x154>
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	f06f 010c 	mvn.w	r1, #12
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	4798      	blx	r3
  }
}
 800de3c:	3728      	adds	r7, #40	; 0x28
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	0801f6fc 	.word	0x0801f6fc
 800de48:	0801f840 	.word	0x0801f840
 800de4c:	0801f740 	.word	0x0801f740
 800de50:	0801f85c 	.word	0x0801f85c
 800de54:	200280a0 	.word	0x200280a0
 800de58:	2002809c 	.word	0x2002809c
 800de5c:	20028090 	.word	0x20028090
 800de60:	2002808c 	.word	0x2002808c

0800de64 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de6c:	2101      	movs	r1, #1
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff ff3a 	bl	800dce8 <tcp_abandon>
}
 800de74:	bf00      	nop
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	4613      	mov	r3, r2
 800de88:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800de8a:	2304      	movs	r3, #4
 800de8c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800de94:	4b3e      	ldr	r3, [pc, #248]	; (800df90 <tcp_bind+0x114>)
 800de96:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d109      	bne.n	800deb2 <tcp_bind+0x36>
 800de9e:	4b3d      	ldr	r3, [pc, #244]	; (800df94 <tcp_bind+0x118>)
 800dea0:	f240 22a9 	movw	r2, #681	; 0x2a9
 800dea4:	493c      	ldr	r1, [pc, #240]	; (800df98 <tcp_bind+0x11c>)
 800dea6:	483d      	ldr	r0, [pc, #244]	; (800df9c <tcp_bind+0x120>)
 800dea8:	f00c f838 	bl	8019f1c <iprintf>
 800deac:	f06f 030f 	mvn.w	r3, #15
 800deb0:	e06a      	b.n	800df88 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	7d1b      	ldrb	r3, [r3, #20]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d009      	beq.n	800dece <tcp_bind+0x52>
 800deba:	4b36      	ldr	r3, [pc, #216]	; (800df94 <tcp_bind+0x118>)
 800debc:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dec0:	4937      	ldr	r1, [pc, #220]	; (800dfa0 <tcp_bind+0x124>)
 800dec2:	4836      	ldr	r0, [pc, #216]	; (800df9c <tcp_bind+0x120>)
 800dec4:	f00c f82a 	bl	8019f1c <iprintf>
 800dec8:	f06f 0305 	mvn.w	r3, #5
 800decc:	e05c      	b.n	800df88 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800dece:	88fb      	ldrh	r3, [r7, #6]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d109      	bne.n	800dee8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ded4:	f000 f914 	bl	800e100 <tcp_new_port>
 800ded8:	4603      	mov	r3, r0
 800deda:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dedc:	88fb      	ldrh	r3, [r7, #6]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d135      	bne.n	800df4e <tcp_bind+0xd2>
      return ERR_BUF;
 800dee2:	f06f 0301 	mvn.w	r3, #1
 800dee6:	e04f      	b.n	800df88 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dee8:	2300      	movs	r3, #0
 800deea:	61fb      	str	r3, [r7, #28]
 800deec:	e02b      	b.n	800df46 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800deee:	4a2d      	ldr	r2, [pc, #180]	; (800dfa4 <tcp_bind+0x128>)
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	61bb      	str	r3, [r7, #24]
 800defa:	e01e      	b.n	800df3a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	8adb      	ldrh	r3, [r3, #22]
 800df00:	88fa      	ldrh	r2, [r7, #6]
 800df02:	429a      	cmp	r2, r3
 800df04:	d116      	bne.n	800df34 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800df06:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d010      	beq.n	800df2e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00c      	beq.n	800df2e <tcp_bind+0xb2>
 800df14:	68bb      	ldr	r3, [r7, #8]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d009      	beq.n	800df2e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d005      	beq.n	800df2e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	681a      	ldr	r2, [r3, #0]
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d102      	bne.n	800df34 <tcp_bind+0xb8>
              return ERR_USE;
 800df2e:	f06f 0307 	mvn.w	r3, #7
 800df32:	e029      	b.n	800df88 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	68db      	ldr	r3, [r3, #12]
 800df38:	61bb      	str	r3, [r7, #24]
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d1dd      	bne.n	800defc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	3301      	adds	r3, #1
 800df44:	61fb      	str	r3, [r7, #28]
 800df46:	69fa      	ldr	r2, [r7, #28]
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	dbcf      	blt.n	800deee <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00c      	beq.n	800df6e <tcp_bind+0xf2>
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d008      	beq.n	800df6e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800df5c:	68bb      	ldr	r3, [r7, #8]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d002      	beq.n	800df68 <tcp_bind+0xec>
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	e000      	b.n	800df6a <tcp_bind+0xee>
 800df68:	2300      	movs	r3, #0
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	88fa      	ldrh	r2, [r7, #6]
 800df72:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800df74:	4b0c      	ldr	r3, [pc, #48]	; (800dfa8 <tcp_bind+0x12c>)
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	60da      	str	r2, [r3, #12]
 800df7c:	4a0a      	ldr	r2, [pc, #40]	; (800dfa8 <tcp_bind+0x12c>)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	f005 fcf7 	bl	8013974 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3720      	adds	r7, #32
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	08021b90 	.word	0x08021b90
 800df94:	0801f6fc 	.word	0x0801f6fc
 800df98:	0801f890 	.word	0x0801f890
 800df9c:	0801f740 	.word	0x0801f740
 800dfa0:	0801f8a8 	.word	0x0801f8a8
 800dfa4:	08021b50 	.word	0x08021b50
 800dfa8:	2002809c 	.word	0x2002809c

0800dfac <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d106      	bne.n	800dfc8 <tcp_update_rcv_ann_wnd+0x1c>
 800dfba:	4b25      	ldr	r3, [pc, #148]	; (800e050 <tcp_update_rcv_ann_wnd+0xa4>)
 800dfbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dfc0:	4924      	ldr	r1, [pc, #144]	; (800e054 <tcp_update_rcv_ann_wnd+0xa8>)
 800dfc2:	4825      	ldr	r0, [pc, #148]	; (800e058 <tcp_update_rcv_ann_wnd+0xac>)
 800dfc4:	f00b ffaa 	bl	8019f1c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dfd0:	4413      	add	r3, r2
 800dfd2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dfdc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dfe0:	bf28      	it	cs
 800dfe2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dfe6:	b292      	uxth	r2, r2
 800dfe8:	4413      	add	r3, r2
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	db08      	blt.n	800e004 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	e020      	b.n	800e046 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	2b00      	cmp	r3, #0
 800e010:	dd03      	ble.n	800e01a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e018:	e014      	b.n	800e044 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e02c:	d306      	bcc.n	800e03c <tcp_update_rcv_ann_wnd+0x90>
 800e02e:	4b08      	ldr	r3, [pc, #32]	; (800e050 <tcp_update_rcv_ann_wnd+0xa4>)
 800e030:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e034:	4909      	ldr	r1, [pc, #36]	; (800e05c <tcp_update_rcv_ann_wnd+0xb0>)
 800e036:	4808      	ldr	r0, [pc, #32]	; (800e058 <tcp_update_rcv_ann_wnd+0xac>)
 800e038:	f00b ff70 	bl	8019f1c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	b29a      	uxth	r2, r3
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e044:	2300      	movs	r3, #0
  }
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	0801f6fc 	.word	0x0801f6fc
 800e054:	0801f958 	.word	0x0801f958
 800e058:	0801f740 	.word	0x0801f740
 800e05c:	0801f97c 	.word	0x0801f97c

0800e060 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	460b      	mov	r3, r1
 800e06a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d107      	bne.n	800e082 <tcp_recved+0x22>
 800e072:	4b1f      	ldr	r3, [pc, #124]	; (800e0f0 <tcp_recved+0x90>)
 800e074:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e078:	491e      	ldr	r1, [pc, #120]	; (800e0f4 <tcp_recved+0x94>)
 800e07a:	481f      	ldr	r0, [pc, #124]	; (800e0f8 <tcp_recved+0x98>)
 800e07c:	f00b ff4e 	bl	8019f1c <iprintf>
 800e080:	e032      	b.n	800e0e8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	7d1b      	ldrb	r3, [r3, #20]
 800e086:	2b01      	cmp	r3, #1
 800e088:	d106      	bne.n	800e098 <tcp_recved+0x38>
 800e08a:	4b19      	ldr	r3, [pc, #100]	; (800e0f0 <tcp_recved+0x90>)
 800e08c:	f240 32d3 	movw	r2, #979	; 0x3d3
 800e090:	491a      	ldr	r1, [pc, #104]	; (800e0fc <tcp_recved+0x9c>)
 800e092:	4819      	ldr	r0, [pc, #100]	; (800e0f8 <tcp_recved+0x98>)
 800e094:	f00b ff42 	bl	8019f1c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e09c:	887b      	ldrh	r3, [r7, #2]
 800e09e:	4413      	add	r3, r2
 800e0a0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e0a2:	89fb      	ldrh	r3, [r7, #14]
 800e0a4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0a8:	d804      	bhi.n	800e0b4 <tcp_recved+0x54>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ae:	89fa      	ldrh	r2, [r7, #14]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d204      	bcs.n	800e0be <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0ba:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0bc:	e002      	b.n	800e0c4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	89fa      	ldrh	r2, [r7, #14]
 800e0c2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff ff71 	bl	800dfac <tcp_update_rcv_ann_wnd>
 800e0ca:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0d2:	d309      	bcc.n	800e0e8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	8b5b      	ldrh	r3, [r3, #26]
 800e0d8:	f043 0302 	orr.w	r3, r3, #2
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f004 fcbe 	bl	8012a64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	0801f6fc 	.word	0x0801f6fc
 800e0f4:	0801f998 	.word	0x0801f998
 800e0f8:	0801f740 	.word	0x0801f740
 800e0fc:	0801f9b0 	.word	0x0801f9b0

0800e100 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e106:	2300      	movs	r3, #0
 800e108:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e10a:	4b1e      	ldr	r3, [pc, #120]	; (800e184 <tcp_new_port+0x84>)
 800e10c:	881b      	ldrh	r3, [r3, #0]
 800e10e:	3301      	adds	r3, #1
 800e110:	b29a      	uxth	r2, r3
 800e112:	4b1c      	ldr	r3, [pc, #112]	; (800e184 <tcp_new_port+0x84>)
 800e114:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e116:	4b1b      	ldr	r3, [pc, #108]	; (800e184 <tcp_new_port+0x84>)
 800e118:	881b      	ldrh	r3, [r3, #0]
 800e11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e11e:	4293      	cmp	r3, r2
 800e120:	d103      	bne.n	800e12a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e122:	4b18      	ldr	r3, [pc, #96]	; (800e184 <tcp_new_port+0x84>)
 800e124:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e128:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e12a:	2300      	movs	r3, #0
 800e12c:	71fb      	strb	r3, [r7, #7]
 800e12e:	e01e      	b.n	800e16e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e130:	79fb      	ldrb	r3, [r7, #7]
 800e132:	4a15      	ldr	r2, [pc, #84]	; (800e188 <tcp_new_port+0x88>)
 800e134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	603b      	str	r3, [r7, #0]
 800e13c:	e011      	b.n	800e162 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	8ada      	ldrh	r2, [r3, #22]
 800e142:	4b10      	ldr	r3, [pc, #64]	; (800e184 <tcp_new_port+0x84>)
 800e144:	881b      	ldrh	r3, [r3, #0]
 800e146:	429a      	cmp	r2, r3
 800e148:	d108      	bne.n	800e15c <tcp_new_port+0x5c>
        n++;
 800e14a:	88bb      	ldrh	r3, [r7, #4]
 800e14c:	3301      	adds	r3, #1
 800e14e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e150:	88bb      	ldrh	r3, [r7, #4]
 800e152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e156:	d3d8      	bcc.n	800e10a <tcp_new_port+0xa>
          return 0;
 800e158:	2300      	movs	r3, #0
 800e15a:	e00d      	b.n	800e178 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	603b      	str	r3, [r7, #0]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d1ea      	bne.n	800e13e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e168:	79fb      	ldrb	r3, [r7, #7]
 800e16a:	3301      	adds	r3, #1
 800e16c:	71fb      	strb	r3, [r7, #7]
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	2b03      	cmp	r3, #3
 800e172:	d9dd      	bls.n	800e130 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e174:	4b03      	ldr	r3, [pc, #12]	; (800e184 <tcp_new_port+0x84>)
 800e176:	881b      	ldrh	r3, [r3, #0]
}
 800e178:	4618      	mov	r0, r3
 800e17a:	370c      	adds	r7, #12
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	20000010 	.word	0x20000010
 800e188:	08021b50 	.word	0x08021b50

0800e18c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08a      	sub	sp, #40	; 0x28
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	603b      	str	r3, [r7, #0]
 800e198:	4613      	mov	r3, r2
 800e19a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e19c:	2300      	movs	r3, #0
 800e19e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d109      	bne.n	800e1ba <tcp_connect+0x2e>
 800e1a6:	4b7d      	ldr	r3, [pc, #500]	; (800e39c <tcp_connect+0x210>)
 800e1a8:	f240 4235 	movw	r2, #1077	; 0x435
 800e1ac:	497c      	ldr	r1, [pc, #496]	; (800e3a0 <tcp_connect+0x214>)
 800e1ae:	487d      	ldr	r0, [pc, #500]	; (800e3a4 <tcp_connect+0x218>)
 800e1b0:	f00b feb4 	bl	8019f1c <iprintf>
 800e1b4:	f06f 030f 	mvn.w	r3, #15
 800e1b8:	e0ec      	b.n	800e394 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d109      	bne.n	800e1d4 <tcp_connect+0x48>
 800e1c0:	4b76      	ldr	r3, [pc, #472]	; (800e39c <tcp_connect+0x210>)
 800e1c2:	f240 4236 	movw	r2, #1078	; 0x436
 800e1c6:	4978      	ldr	r1, [pc, #480]	; (800e3a8 <tcp_connect+0x21c>)
 800e1c8:	4876      	ldr	r0, [pc, #472]	; (800e3a4 <tcp_connect+0x218>)
 800e1ca:	f00b fea7 	bl	8019f1c <iprintf>
 800e1ce:	f06f 030f 	mvn.w	r3, #15
 800e1d2:	e0df      	b.n	800e394 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	7d1b      	ldrb	r3, [r3, #20]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d009      	beq.n	800e1f0 <tcp_connect+0x64>
 800e1dc:	4b6f      	ldr	r3, [pc, #444]	; (800e39c <tcp_connect+0x210>)
 800e1de:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e1e2:	4972      	ldr	r1, [pc, #456]	; (800e3ac <tcp_connect+0x220>)
 800e1e4:	486f      	ldr	r0, [pc, #444]	; (800e3a4 <tcp_connect+0x218>)
 800e1e6:	f00b fe99 	bl	8019f1c <iprintf>
 800e1ea:	f06f 0309 	mvn.w	r3, #9
 800e1ee:	e0d1      	b.n	800e394 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d002      	beq.n	800e1fc <tcp_connect+0x70>
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	e000      	b.n	800e1fe <tcp_connect+0x72>
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	88fa      	ldrh	r2, [r7, #6]
 800e206:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	7a1b      	ldrb	r3, [r3, #8]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d006      	beq.n	800e21e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	7a1b      	ldrb	r3, [r3, #8]
 800e214:	4618      	mov	r0, r3
 800e216:	f7fe fb29 	bl	800c86c <netif_get_by_index>
 800e21a:	6278      	str	r0, [r7, #36]	; 0x24
 800e21c:	e005      	b.n	800e22a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	3304      	adds	r3, #4
 800e222:	4618      	mov	r0, r3
 800e224:	f009 fa14 	bl	8017650 <ip4_route>
 800e228:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d102      	bne.n	800e236 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e230:	f06f 0303 	mvn.w	r3, #3
 800e234:	e0ae      	b.n	800e394 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d003      	beq.n	800e244 <tcp_connect+0xb8>
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d111      	bne.n	800e268 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <tcp_connect+0xc4>
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	3304      	adds	r3, #4
 800e24e:	e000      	b.n	800e252 <tcp_connect+0xc6>
 800e250:	2300      	movs	r3, #0
 800e252:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d102      	bne.n	800e260 <tcp_connect+0xd4>
      return ERR_RTE;
 800e25a:	f06f 0303 	mvn.w	r3, #3
 800e25e:	e099      	b.n	800e394 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	8adb      	ldrh	r3, [r3, #22]
 800e26c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	8adb      	ldrh	r3, [r3, #22]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10c      	bne.n	800e290 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e276:	f7ff ff43 	bl	800e100 <tcp_new_port>
 800e27a:	4603      	mov	r3, r0
 800e27c:	461a      	mov	r2, r3
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	8adb      	ldrh	r3, [r3, #22]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <tcp_connect+0x104>
      return ERR_BUF;
 800e28a:	f06f 0301 	mvn.w	r3, #1
 800e28e:	e081      	b.n	800e394 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e290:	68f8      	ldr	r0, [r7, #12]
 800e292:	f001 f863 	bl	800f35c <tcp_next_iss>
 800e296:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	1e5a      	subs	r2, r3, #1
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	1e5a      	subs	r2, r3, #1
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e2b4:	697b      	ldr	r3, [r7, #20]
 800e2b6:	1e5a      	subs	r2, r3, #1
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e2e4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	3304      	adds	r3, #4
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2f2:	f001 f859 	bl	800f3a8 <tcp_eff_send_mss_netif>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2201      	movs	r2, #1
 800e302:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e30e:	2102      	movs	r1, #2
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f004 fab9 	bl	8012888 <tcp_enqueue_flags>
 800e316:	4603      	mov	r3, r0
 800e318:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e31a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d136      	bne.n	800e390 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2202      	movs	r2, #2
 800e326:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e328:	8b7b      	ldrh	r3, [r7, #26]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d021      	beq.n	800e372 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e32e:	4b20      	ldr	r3, [pc, #128]	; (800e3b0 <tcp_connect+0x224>)
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	68fa      	ldr	r2, [r7, #12]
 800e334:	429a      	cmp	r2, r3
 800e336:	d105      	bne.n	800e344 <tcp_connect+0x1b8>
 800e338:	4b1d      	ldr	r3, [pc, #116]	; (800e3b0 <tcp_connect+0x224>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	4a1c      	ldr	r2, [pc, #112]	; (800e3b0 <tcp_connect+0x224>)
 800e340:	6013      	str	r3, [r2, #0]
 800e342:	e013      	b.n	800e36c <tcp_connect+0x1e0>
 800e344:	4b1a      	ldr	r3, [pc, #104]	; (800e3b0 <tcp_connect+0x224>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	623b      	str	r3, [r7, #32]
 800e34a:	e00c      	b.n	800e366 <tcp_connect+0x1da>
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	429a      	cmp	r2, r3
 800e354:	d104      	bne.n	800e360 <tcp_connect+0x1d4>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	68da      	ldr	r2, [r3, #12]
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	60da      	str	r2, [r3, #12]
 800e35e:	e005      	b.n	800e36c <tcp_connect+0x1e0>
 800e360:	6a3b      	ldr	r3, [r7, #32]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	623b      	str	r3, [r7, #32]
 800e366:	6a3b      	ldr	r3, [r7, #32]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d1ef      	bne.n	800e34c <tcp_connect+0x1c0>
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2200      	movs	r2, #0
 800e370:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e372:	4b10      	ldr	r3, [pc, #64]	; (800e3b4 <tcp_connect+0x228>)
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	60da      	str	r2, [r3, #12]
 800e37a:	4a0e      	ldr	r2, [pc, #56]	; (800e3b4 <tcp_connect+0x228>)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6013      	str	r3, [r2, #0]
 800e380:	f005 faf8 	bl	8013974 <tcp_timer_needed>
 800e384:	4b0c      	ldr	r3, [pc, #48]	; (800e3b8 <tcp_connect+0x22c>)
 800e386:	2201      	movs	r2, #1
 800e388:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f004 fb6a 	bl	8012a64 <tcp_output>
  }
  return ret;
 800e390:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3728      	adds	r7, #40	; 0x28
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	0801f6fc 	.word	0x0801f6fc
 800e3a0:	0801f9d8 	.word	0x0801f9d8
 800e3a4:	0801f740 	.word	0x0801f740
 800e3a8:	0801f9f4 	.word	0x0801f9f4
 800e3ac:	0801fa10 	.word	0x0801fa10
 800e3b0:	2002809c 	.word	0x2002809c
 800e3b4:	20028090 	.word	0x20028090
 800e3b8:	2002808c 	.word	0x2002808c

0800e3bc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e3bc:	b5b0      	push	{r4, r5, r7, lr}
 800e3be:	b090      	sub	sp, #64	; 0x40
 800e3c0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e3c8:	4b94      	ldr	r3, [pc, #592]	; (800e61c <tcp_slowtmr+0x260>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	4a93      	ldr	r2, [pc, #588]	; (800e61c <tcp_slowtmr+0x260>)
 800e3d0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e3d2:	4b93      	ldr	r3, [pc, #588]	; (800e620 <tcp_slowtmr+0x264>)
 800e3d4:	781b      	ldrb	r3, [r3, #0]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	4b91      	ldr	r3, [pc, #580]	; (800e620 <tcp_slowtmr+0x264>)
 800e3dc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e3e2:	4b90      	ldr	r3, [pc, #576]	; (800e624 <tcp_slowtmr+0x268>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e3e8:	e29d      	b.n	800e926 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ec:	7d1b      	ldrb	r3, [r3, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d106      	bne.n	800e400 <tcp_slowtmr+0x44>
 800e3f2:	4b8d      	ldr	r3, [pc, #564]	; (800e628 <tcp_slowtmr+0x26c>)
 800e3f4:	f240 42be 	movw	r2, #1214	; 0x4be
 800e3f8:	498c      	ldr	r1, [pc, #560]	; (800e62c <tcp_slowtmr+0x270>)
 800e3fa:	488d      	ldr	r0, [pc, #564]	; (800e630 <tcp_slowtmr+0x274>)
 800e3fc:	f00b fd8e 	bl	8019f1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e402:	7d1b      	ldrb	r3, [r3, #20]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d106      	bne.n	800e416 <tcp_slowtmr+0x5a>
 800e408:	4b87      	ldr	r3, [pc, #540]	; (800e628 <tcp_slowtmr+0x26c>)
 800e40a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e40e:	4989      	ldr	r1, [pc, #548]	; (800e634 <tcp_slowtmr+0x278>)
 800e410:	4887      	ldr	r0, [pc, #540]	; (800e630 <tcp_slowtmr+0x274>)
 800e412:	f00b fd83 	bl	8019f1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e418:	7d1b      	ldrb	r3, [r3, #20]
 800e41a:	2b0a      	cmp	r3, #10
 800e41c:	d106      	bne.n	800e42c <tcp_slowtmr+0x70>
 800e41e:	4b82      	ldr	r3, [pc, #520]	; (800e628 <tcp_slowtmr+0x26c>)
 800e420:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e424:	4984      	ldr	r1, [pc, #528]	; (800e638 <tcp_slowtmr+0x27c>)
 800e426:	4882      	ldr	r0, [pc, #520]	; (800e630 <tcp_slowtmr+0x274>)
 800e428:	f00b fd78 	bl	8019f1c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42e:	7f9a      	ldrb	r2, [r3, #30]
 800e430:	4b7b      	ldr	r3, [pc, #492]	; (800e620 <tcp_slowtmr+0x264>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	429a      	cmp	r2, r3
 800e436:	d105      	bne.n	800e444 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e442:	e270      	b.n	800e926 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e444:	4b76      	ldr	r3, [pc, #472]	; (800e620 <tcp_slowtmr+0x264>)
 800e446:	781a      	ldrb	r2, [r3, #0]
 800e448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e452:	2300      	movs	r3, #0
 800e454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e45a:	7d1b      	ldrb	r3, [r3, #20]
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d10a      	bne.n	800e476 <tcp_slowtmr+0xba>
 800e460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e466:	2b05      	cmp	r3, #5
 800e468:	d905      	bls.n	800e476 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e46e:	3301      	adds	r3, #1
 800e470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e474:	e11e      	b.n	800e6b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e478:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e47c:	2b0b      	cmp	r3, #11
 800e47e:	d905      	bls.n	800e48c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e484:	3301      	adds	r3, #1
 800e486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e48a:	e113      	b.n	800e6b4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e492:	2b00      	cmp	r3, #0
 800e494:	d075      	beq.n	800e582 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d006      	beq.n	800e4ac <tcp_slowtmr+0xf0>
 800e49e:	4b62      	ldr	r3, [pc, #392]	; (800e628 <tcp_slowtmr+0x26c>)
 800e4a0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e4a4:	4965      	ldr	r1, [pc, #404]	; (800e63c <tcp_slowtmr+0x280>)
 800e4a6:	4862      	ldr	r0, [pc, #392]	; (800e630 <tcp_slowtmr+0x274>)
 800e4a8:	f00b fd38 	bl	8019f1c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d106      	bne.n	800e4c2 <tcp_slowtmr+0x106>
 800e4b4:	4b5c      	ldr	r3, [pc, #368]	; (800e628 <tcp_slowtmr+0x26c>)
 800e4b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e4ba:	4961      	ldr	r1, [pc, #388]	; (800e640 <tcp_slowtmr+0x284>)
 800e4bc:	485c      	ldr	r0, [pc, #368]	; (800e630 <tcp_slowtmr+0x274>)
 800e4be:	f00b fd2d 	bl	8019f1c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e4c8:	2b0b      	cmp	r3, #11
 800e4ca:	d905      	bls.n	800e4d8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4d6:	e0ed      	b.n	800e6b4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	4a58      	ldr	r2, [pc, #352]	; (800e644 <tcp_slowtmr+0x288>)
 800e4e2:	5cd3      	ldrb	r3, [r2, r3]
 800e4e4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4ec:	7c7a      	ldrb	r2, [r7, #17]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d907      	bls.n	800e502 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4fe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e508:	7c7a      	ldrb	r2, [r7, #17]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	f200 80d2 	bhi.w	800e6b4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e510:	2301      	movs	r3, #1
 800e512:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e516:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d108      	bne.n	800e530 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e520:	f005 f95a 	bl	80137d8 <tcp_zero_window_probe>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d014      	beq.n	800e554 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e52a:	2300      	movs	r3, #0
 800e52c:	623b      	str	r3, [r7, #32]
 800e52e:	e011      	b.n	800e554 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e536:	4619      	mov	r1, r3
 800e538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e53a:	f004 f80d 	bl	8012558 <tcp_split_unsent_seg>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d107      	bne.n	800e554 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e546:	f004 fa8d 	bl	8012a64 <tcp_output>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d101      	bne.n	800e554 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e550:	2300      	movs	r3, #0
 800e552:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	2b00      	cmp	r3, #0
 800e558:	f000 80ac 	beq.w	800e6b4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	2200      	movs	r2, #0
 800e560:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e566:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e56a:	2b06      	cmp	r3, #6
 800e56c:	f200 80a2 	bhi.w	800e6b4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e576:	3301      	adds	r3, #1
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e580:	e098      	b.n	800e6b4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e588:	2b00      	cmp	r3, #0
 800e58a:	db0f      	blt.n	800e5ac <tcp_slowtmr+0x1f0>
 800e58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e58e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e592:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e596:	4293      	cmp	r3, r2
 800e598:	d008      	beq.n	800e5ac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	b21a      	sxth	r2, r3
 800e5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5aa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	db7b      	blt.n	800e6b4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e5bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5be:	f004 fd49 	bl	8013054 <tcp_rexmit_rto_prepare>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d007      	beq.n	800e5d8 <tcp_slowtmr+0x21c>
 800e5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d171      	bne.n	800e6b4 <tcp_slowtmr+0x2f8>
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d06d      	beq.n	800e6b4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5da:	7d1b      	ldrb	r3, [r3, #20]
 800e5dc:	2b02      	cmp	r3, #2
 800e5de:	d03a      	beq.n	800e656 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5e6:	2b0c      	cmp	r3, #12
 800e5e8:	bf28      	it	cs
 800e5ea:	230c      	movcs	r3, #12
 800e5ec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5f4:	10db      	asrs	r3, r3, #3
 800e5f6:	b21b      	sxth	r3, r3
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e600:	4413      	add	r3, r2
 800e602:	7efa      	ldrb	r2, [r7, #27]
 800e604:	4910      	ldr	r1, [pc, #64]	; (800e648 <tcp_slowtmr+0x28c>)
 800e606:	5c8a      	ldrb	r2, [r1, r2]
 800e608:	4093      	lsls	r3, r2
 800e60a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e612:	4293      	cmp	r3, r2
 800e614:	dc1a      	bgt.n	800e64c <tcp_slowtmr+0x290>
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	b21a      	sxth	r2, r3
 800e61a:	e019      	b.n	800e650 <tcp_slowtmr+0x294>
 800e61c:	20028094 	.word	0x20028094
 800e620:	2002149a 	.word	0x2002149a
 800e624:	20028090 	.word	0x20028090
 800e628:	0801f6fc 	.word	0x0801f6fc
 800e62c:	0801fa40 	.word	0x0801fa40
 800e630:	0801f740 	.word	0x0801f740
 800e634:	0801fa6c 	.word	0x0801fa6c
 800e638:	0801fa98 	.word	0x0801fa98
 800e63c:	0801fac8 	.word	0x0801fac8
 800e640:	0801fafc 	.word	0x0801fafc
 800e644:	08021b48 	.word	0x08021b48
 800e648:	08021b38 	.word	0x08021b38
 800e64c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e658:	2200      	movs	r2, #0
 800e65a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e668:	4293      	cmp	r3, r2
 800e66a:	bf28      	it	cs
 800e66c:	4613      	movcs	r3, r2
 800e66e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e670:	8a7b      	ldrh	r3, [r7, #18]
 800e672:	085b      	lsrs	r3, r3, #1
 800e674:	b29a      	uxth	r2, r3
 800e676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e678:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e686:	005b      	lsls	r3, r3, #1
 800e688:	b29b      	uxth	r3, r3
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d206      	bcs.n	800e69c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e692:	005b      	lsls	r3, r3, #1
 800e694:	b29a      	uxth	r2, r3
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e6ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6b0:	f004 fd40 	bl	8013134 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b6:	7d1b      	ldrb	r3, [r3, #20]
 800e6b8:	2b06      	cmp	r3, #6
 800e6ba:	d111      	bne.n	800e6e0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	8b5b      	ldrh	r3, [r3, #26]
 800e6c0:	f003 0310 	and.w	r3, r3, #16
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d00b      	beq.n	800e6e0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6c8:	4b9c      	ldr	r3, [pc, #624]	; (800e93c <tcp_slowtmr+0x580>)
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	6a1b      	ldr	r3, [r3, #32]
 800e6d0:	1ad3      	subs	r3, r2, r3
 800e6d2:	2b28      	cmp	r3, #40	; 0x28
 800e6d4:	d904      	bls.n	800e6e0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e6d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6da:	3301      	adds	r3, #1
 800e6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	7a5b      	ldrb	r3, [r3, #9]
 800e6e4:	f003 0308 	and.w	r3, r3, #8
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d04a      	beq.n	800e782 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6f0:	2b04      	cmp	r3, #4
 800e6f2:	d003      	beq.n	800e6fc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e6f8:	2b07      	cmp	r3, #7
 800e6fa:	d142      	bne.n	800e782 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6fc:	4b8f      	ldr	r3, [pc, #572]	; (800e93c <tcp_slowtmr+0x580>)
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e702:	6a1b      	ldr	r3, [r3, #32]
 800e704:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e70c:	4b8c      	ldr	r3, [pc, #560]	; (800e940 <tcp_slowtmr+0x584>)
 800e70e:	440b      	add	r3, r1
 800e710:	498c      	ldr	r1, [pc, #560]	; (800e944 <tcp_slowtmr+0x588>)
 800e712:	fba1 1303 	umull	r1, r3, r1, r3
 800e716:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e718:	429a      	cmp	r2, r3
 800e71a:	d90a      	bls.n	800e732 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e71c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e720:	3301      	adds	r3, #1
 800e722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e726:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e72a:	3301      	adds	r3, #1
 800e72c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e730:	e027      	b.n	800e782 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e732:	4b82      	ldr	r3, [pc, #520]	; (800e93c <tcp_slowtmr+0x580>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e748:	4618      	mov	r0, r3
 800e74a:	4b7f      	ldr	r3, [pc, #508]	; (800e948 <tcp_slowtmr+0x58c>)
 800e74c:	fb03 f300 	mul.w	r3, r3, r0
 800e750:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e752:	497c      	ldr	r1, [pc, #496]	; (800e944 <tcp_slowtmr+0x588>)
 800e754:	fba1 1303 	umull	r1, r3, r1, r3
 800e758:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d911      	bls.n	800e782 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e75e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e760:	f004 fffa 	bl	8013758 <tcp_keepalive>
 800e764:	4603      	mov	r3, r0
 800e766:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e76a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d107      	bne.n	800e782 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e778:	3301      	adds	r3, #1
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e786:	2b00      	cmp	r3, #0
 800e788:	d011      	beq.n	800e7ae <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e78a:	4b6c      	ldr	r3, [pc, #432]	; (800e93c <tcp_slowtmr+0x580>)
 800e78c:	681a      	ldr	r2, [r3, #0]
 800e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e790:	6a1b      	ldr	r3, [r3, #32]
 800e792:	1ad2      	subs	r2, r2, r3
 800e794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e796:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e79a:	4619      	mov	r1, r3
 800e79c:	460b      	mov	r3, r1
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	440b      	add	r3, r1
 800e7a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d302      	bcc.n	800e7ae <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e7a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7aa:	f000 fea7 	bl	800f4fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	7d1b      	ldrb	r3, [r3, #20]
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	d10b      	bne.n	800e7ce <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7b6:	4b61      	ldr	r3, [pc, #388]	; (800e93c <tcp_slowtmr+0x580>)
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7bc:	6a1b      	ldr	r3, [r3, #32]
 800e7be:	1ad3      	subs	r3, r2, r3
 800e7c0:	2b28      	cmp	r3, #40	; 0x28
 800e7c2:	d904      	bls.n	800e7ce <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e7c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	7d1b      	ldrb	r3, [r3, #20]
 800e7d2:	2b09      	cmp	r3, #9
 800e7d4:	d10b      	bne.n	800e7ee <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7d6:	4b59      	ldr	r3, [pc, #356]	; (800e93c <tcp_slowtmr+0x580>)
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	2bf0      	cmp	r3, #240	; 0xf0
 800e7e2:	d904      	bls.n	800e7ee <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d060      	beq.n	800e8b8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7fc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e7fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e800:	f000 fcc8 	bl	800f194 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	2b00      	cmp	r3, #0
 800e808:	d010      	beq.n	800e82c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e80a:	4b50      	ldr	r3, [pc, #320]	; (800e94c <tcp_slowtmr+0x590>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e810:	429a      	cmp	r2, r3
 800e812:	d106      	bne.n	800e822 <tcp_slowtmr+0x466>
 800e814:	4b4e      	ldr	r3, [pc, #312]	; (800e950 <tcp_slowtmr+0x594>)
 800e816:	f240 526d 	movw	r2, #1389	; 0x56d
 800e81a:	494e      	ldr	r1, [pc, #312]	; (800e954 <tcp_slowtmr+0x598>)
 800e81c:	484e      	ldr	r0, [pc, #312]	; (800e958 <tcp_slowtmr+0x59c>)
 800e81e:	f00b fb7d 	bl	8019f1c <iprintf>
        prev->next = pcb->next;
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	68da      	ldr	r2, [r3, #12]
 800e826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e828:	60da      	str	r2, [r3, #12]
 800e82a:	e00f      	b.n	800e84c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e82c:	4b47      	ldr	r3, [pc, #284]	; (800e94c <tcp_slowtmr+0x590>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e832:	429a      	cmp	r2, r3
 800e834:	d006      	beq.n	800e844 <tcp_slowtmr+0x488>
 800e836:	4b46      	ldr	r3, [pc, #280]	; (800e950 <tcp_slowtmr+0x594>)
 800e838:	f240 5271 	movw	r2, #1393	; 0x571
 800e83c:	4947      	ldr	r1, [pc, #284]	; (800e95c <tcp_slowtmr+0x5a0>)
 800e83e:	4846      	ldr	r0, [pc, #280]	; (800e958 <tcp_slowtmr+0x59c>)
 800e840:	f00b fb6c 	bl	8019f1c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	4a40      	ldr	r2, [pc, #256]	; (800e94c <tcp_slowtmr+0x590>)
 800e84a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e84c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e850:	2b00      	cmp	r3, #0
 800e852:	d013      	beq.n	800e87c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e856:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e85c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e860:	3304      	adds	r3, #4
 800e862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e864:	8ad2      	ldrh	r2, [r2, #22]
 800e866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e868:	8b09      	ldrh	r1, [r1, #24]
 800e86a:	9102      	str	r1, [sp, #8]
 800e86c:	9201      	str	r2, [sp, #4]
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	462b      	mov	r3, r5
 800e872:	4622      	mov	r2, r4
 800e874:	4601      	mov	r1, r0
 800e876:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e878:	f004 feba 	bl	80135f0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	691b      	ldr	r3, [r3, #16]
 800e880:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e884:	7d1b      	ldrb	r3, [r3, #20]
 800e886:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88e:	68db      	ldr	r3, [r3, #12]
 800e890:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e892:	6838      	ldr	r0, [r7, #0]
 800e894:	f7fe ffac 	bl	800d7f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e898:	4b31      	ldr	r3, [pc, #196]	; (800e960 <tcp_slowtmr+0x5a4>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d004      	beq.n	800e8ae <tcp_slowtmr+0x4f2>
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f06f 010c 	mvn.w	r1, #12
 800e8aa:	68b8      	ldr	r0, [r7, #8]
 800e8ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e8ae:	4b2c      	ldr	r3, [pc, #176]	; (800e960 <tcp_slowtmr+0x5a4>)
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d037      	beq.n	800e926 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e8b6:	e592      	b.n	800e3de <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	68db      	ldr	r3, [r3, #12]
 800e8c0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	7f1b      	ldrb	r3, [r3, #28]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	b2da      	uxtb	r2, r3
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	7f1a      	ldrb	r2, [r3, #28]
 800e8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d4:	7f5b      	ldrb	r3, [r3, #29]
 800e8d6:	429a      	cmp	r2, r3
 800e8d8:	d325      	bcc.n	800e926 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8dc:	2200      	movs	r2, #0
 800e8de:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e8e0:	4b1f      	ldr	r3, [pc, #124]	; (800e960 <tcp_slowtmr+0x5a4>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00b      	beq.n	800e908 <tcp_slowtmr+0x54c>
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f8:	6912      	ldr	r2, [r2, #16]
 800e8fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	4798      	blx	r3
 800e900:	4603      	mov	r3, r0
 800e902:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e906:	e002      	b.n	800e90e <tcp_slowtmr+0x552>
 800e908:	2300      	movs	r3, #0
 800e90a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e90e:	4b14      	ldr	r3, [pc, #80]	; (800e960 <tcp_slowtmr+0x5a4>)
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d000      	beq.n	800e918 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e916:	e562      	b.n	800e3de <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e918:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d102      	bne.n	800e926 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e922:	f004 f89f 	bl	8012a64 <tcp_output>
  while (pcb != NULL) {
 800e926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f47f ad5e 	bne.w	800e3ea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e92e:	2300      	movs	r3, #0
 800e930:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e932:	4b0c      	ldr	r3, [pc, #48]	; (800e964 <tcp_slowtmr+0x5a8>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e938:	e069      	b.n	800ea0e <tcp_slowtmr+0x652>
 800e93a:	bf00      	nop
 800e93c:	20028094 	.word	0x20028094
 800e940:	000a4cb8 	.word	0x000a4cb8
 800e944:	10624dd3 	.word	0x10624dd3
 800e948:	000124f8 	.word	0x000124f8
 800e94c:	20028090 	.word	0x20028090
 800e950:	0801f6fc 	.word	0x0801f6fc
 800e954:	0801fb34 	.word	0x0801fb34
 800e958:	0801f740 	.word	0x0801f740
 800e95c:	0801fb60 	.word	0x0801fb60
 800e960:	2002808c 	.word	0x2002808c
 800e964:	200280a0 	.word	0x200280a0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e96a:	7d1b      	ldrb	r3, [r3, #20]
 800e96c:	2b0a      	cmp	r3, #10
 800e96e:	d006      	beq.n	800e97e <tcp_slowtmr+0x5c2>
 800e970:	4b2a      	ldr	r3, [pc, #168]	; (800ea1c <tcp_slowtmr+0x660>)
 800e972:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e976:	492a      	ldr	r1, [pc, #168]	; (800ea20 <tcp_slowtmr+0x664>)
 800e978:	482a      	ldr	r0, [pc, #168]	; (800ea24 <tcp_slowtmr+0x668>)
 800e97a:	f00b facf 	bl	8019f1c <iprintf>
    pcb_remove = 0;
 800e97e:	2300      	movs	r3, #0
 800e980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e984:	4b28      	ldr	r3, [pc, #160]	; (800ea28 <tcp_slowtmr+0x66c>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	6a1b      	ldr	r3, [r3, #32]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	2bf0      	cmp	r3, #240	; 0xf0
 800e990:	d904      	bls.n	800e99c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e992:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e996:	3301      	adds	r3, #1
 800e998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e99c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d02f      	beq.n	800ea04 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e9a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9a6:	f000 fbf5 	bl	800f194 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d010      	beq.n	800e9d2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9b0:	4b1e      	ldr	r3, [pc, #120]	; (800ea2c <tcp_slowtmr+0x670>)
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d106      	bne.n	800e9c8 <tcp_slowtmr+0x60c>
 800e9ba:	4b18      	ldr	r3, [pc, #96]	; (800ea1c <tcp_slowtmr+0x660>)
 800e9bc:	f240 52af 	movw	r2, #1455	; 0x5af
 800e9c0:	491b      	ldr	r1, [pc, #108]	; (800ea30 <tcp_slowtmr+0x674>)
 800e9c2:	4818      	ldr	r0, [pc, #96]	; (800ea24 <tcp_slowtmr+0x668>)
 800e9c4:	f00b faaa 	bl	8019f1c <iprintf>
        prev->next = pcb->next;
 800e9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ca:	68da      	ldr	r2, [r3, #12]
 800e9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ce:	60da      	str	r2, [r3, #12]
 800e9d0:	e00f      	b.n	800e9f2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e9d2:	4b16      	ldr	r3, [pc, #88]	; (800ea2c <tcp_slowtmr+0x670>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d006      	beq.n	800e9ea <tcp_slowtmr+0x62e>
 800e9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ea1c <tcp_slowtmr+0x660>)
 800e9de:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e9e2:	4914      	ldr	r1, [pc, #80]	; (800ea34 <tcp_slowtmr+0x678>)
 800e9e4:	480f      	ldr	r0, [pc, #60]	; (800ea24 <tcp_slowtmr+0x668>)
 800e9e6:	f00b fa99 	bl	8019f1c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	4a0f      	ldr	r2, [pc, #60]	; (800ea2c <tcp_slowtmr+0x670>)
 800e9f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e9fc:	69f8      	ldr	r0, [r7, #28]
 800e9fe:	f7fe fef7 	bl	800d7f0 <tcp_free>
 800ea02:	e004      	b.n	800ea0e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ea04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1a9      	bne.n	800e968 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea14:	bf00      	nop
 800ea16:	3730      	adds	r7, #48	; 0x30
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bdb0      	pop	{r4, r5, r7, pc}
 800ea1c:	0801f6fc 	.word	0x0801f6fc
 800ea20:	0801fb8c 	.word	0x0801fb8c
 800ea24:	0801f740 	.word	0x0801f740
 800ea28:	20028094 	.word	0x20028094
 800ea2c:	200280a0 	.word	0x200280a0
 800ea30:	0801fbbc 	.word	0x0801fbbc
 800ea34:	0801fbe4 	.word	0x0801fbe4

0800ea38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b082      	sub	sp, #8
 800ea3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea3e:	4b2d      	ldr	r3, [pc, #180]	; (800eaf4 <tcp_fasttmr+0xbc>)
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	3301      	adds	r3, #1
 800ea44:	b2da      	uxtb	r2, r3
 800ea46:	4b2b      	ldr	r3, [pc, #172]	; (800eaf4 <tcp_fasttmr+0xbc>)
 800ea48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea4a:	4b2b      	ldr	r3, [pc, #172]	; (800eaf8 <tcp_fasttmr+0xc0>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea50:	e048      	b.n	800eae4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	7f9a      	ldrb	r2, [r3, #30]
 800ea56:	4b27      	ldr	r3, [pc, #156]	; (800eaf4 <tcp_fasttmr+0xbc>)
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	d03f      	beq.n	800eade <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea5e:	4b25      	ldr	r3, [pc, #148]	; (800eaf4 <tcp_fasttmr+0xbc>)
 800ea60:	781a      	ldrb	r2, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	8b5b      	ldrh	r3, [r3, #26]
 800ea6a:	f003 0301 	and.w	r3, r3, #1
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d010      	beq.n	800ea94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	8b5b      	ldrh	r3, [r3, #26]
 800ea76:	f043 0302 	orr.w	r3, r3, #2
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f003 ffef 	bl	8012a64 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	8b5b      	ldrh	r3, [r3, #26]
 800ea8a:	f023 0303 	bic.w	r3, r3, #3
 800ea8e:	b29a      	uxth	r2, r3
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	8b5b      	ldrh	r3, [r3, #26]
 800ea98:	f003 0308 	and.w	r3, r3, #8
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d009      	beq.n	800eab4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	8b5b      	ldrh	r3, [r3, #26]
 800eaa4:	f023 0308 	bic.w	r3, r3, #8
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7ff f82e 	bl	800db10 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	68db      	ldr	r3, [r3, #12]
 800eab8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d00a      	beq.n	800ead8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eac2:	4b0e      	ldr	r3, [pc, #56]	; (800eafc <tcp_fasttmr+0xc4>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 f819 	bl	800eb00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eace:	4b0b      	ldr	r3, [pc, #44]	; (800eafc <tcp_fasttmr+0xc4>)
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d000      	beq.n	800ead8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ead6:	e7b8      	b.n	800ea4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	607b      	str	r3, [r7, #4]
 800eadc:	e002      	b.n	800eae4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	68db      	ldr	r3, [r3, #12]
 800eae2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1b3      	bne.n	800ea52 <tcp_fasttmr+0x1a>
    }
  }
}
 800eaea:	bf00      	nop
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	2002149a 	.word	0x2002149a
 800eaf8:	20028090 	.word	0x20028090
 800eafc:	2002808c 	.word	0x2002808c

0800eb00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb00:	b590      	push	{r4, r7, lr}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d109      	bne.n	800eb22 <tcp_process_refused_data+0x22>
 800eb0e:	4b37      	ldr	r3, [pc, #220]	; (800ebec <tcp_process_refused_data+0xec>)
 800eb10:	f240 6209 	movw	r2, #1545	; 0x609
 800eb14:	4936      	ldr	r1, [pc, #216]	; (800ebf0 <tcp_process_refused_data+0xf0>)
 800eb16:	4837      	ldr	r0, [pc, #220]	; (800ebf4 <tcp_process_refused_data+0xf4>)
 800eb18:	f00b fa00 	bl	8019f1c <iprintf>
 800eb1c:	f06f 030f 	mvn.w	r3, #15
 800eb20:	e060      	b.n	800ebe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb26:	7b5b      	ldrb	r3, [r3, #13]
 800eb28:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb2e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00b      	beq.n	800eb58 <tcp_process_refused_data+0x58>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6918      	ldr	r0, [r3, #16]
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	6879      	ldr	r1, [r7, #4]
 800eb50:	47a0      	blx	r4
 800eb52:	4603      	mov	r3, r0
 800eb54:	73fb      	strb	r3, [r7, #15]
 800eb56:	e007      	b.n	800eb68 <tcp_process_refused_data+0x68>
 800eb58:	2300      	movs	r3, #0
 800eb5a:	68ba      	ldr	r2, [r7, #8]
 800eb5c:	6879      	ldr	r1, [r7, #4]
 800eb5e:	2000      	movs	r0, #0
 800eb60:	f000 f8a2 	bl	800eca8 <tcp_recv_null>
 800eb64:	4603      	mov	r3, r0
 800eb66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d12a      	bne.n	800ebc6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eb70:	7bbb      	ldrb	r3, [r7, #14]
 800eb72:	f003 0320 	and.w	r3, r3, #32
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d033      	beq.n	800ebe2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb7e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb82:	d005      	beq.n	800eb90 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb88:	3301      	adds	r3, #1
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00b      	beq.n	800ebb2 <tcp_process_refused_data+0xb2>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6918      	ldr	r0, [r3, #16]
 800eba4:	2300      	movs	r3, #0
 800eba6:	2200      	movs	r2, #0
 800eba8:	6879      	ldr	r1, [r7, #4]
 800ebaa:	47a0      	blx	r4
 800ebac:	4603      	mov	r3, r0
 800ebae:	73fb      	strb	r3, [r7, #15]
 800ebb0:	e001      	b.n	800ebb6 <tcp_process_refused_data+0xb6>
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ebb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebba:	f113 0f0d 	cmn.w	r3, #13
 800ebbe:	d110      	bne.n	800ebe2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ebc0:	f06f 030c 	mvn.w	r3, #12
 800ebc4:	e00e      	b.n	800ebe4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ebc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebca:	f113 0f0d 	cmn.w	r3, #13
 800ebce:	d102      	bne.n	800ebd6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ebd0:	f06f 030c 	mvn.w	r3, #12
 800ebd4:	e006      	b.n	800ebe4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ebdc:	f06f 0304 	mvn.w	r3, #4
 800ebe0:	e000      	b.n	800ebe4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd90      	pop	{r4, r7, pc}
 800ebec:	0801f6fc 	.word	0x0801f6fc
 800ebf0:	0801fc0c 	.word	0x0801fc0c
 800ebf4:	0801f740 	.word	0x0801f740

0800ebf8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ec00:	e007      	b.n	800ec12 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f809 	bl	800ec20 <tcp_seg_free>
    seg = next;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1f4      	bne.n	800ec02 <tcp_segs_free+0xa>
  }
}
 800ec18:	bf00      	nop
 800ec1a:	3710      	adds	r7, #16
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00c      	beq.n	800ec48 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d004      	beq.n	800ec40 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7fe f9a0 	bl	800cf80 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec40:	6879      	ldr	r1, [r7, #4]
 800ec42:	2003      	movs	r0, #3
 800ec44:	f7fd faf0 	bl	800c228 <memp_free>
  }
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d106      	bne.n	800ec6c <tcp_seg_copy+0x1c>
 800ec5e:	4b0f      	ldr	r3, [pc, #60]	; (800ec9c <tcp_seg_copy+0x4c>)
 800ec60:	f240 6282 	movw	r2, #1666	; 0x682
 800ec64:	490e      	ldr	r1, [pc, #56]	; (800eca0 <tcp_seg_copy+0x50>)
 800ec66:	480f      	ldr	r0, [pc, #60]	; (800eca4 <tcp_seg_copy+0x54>)
 800ec68:	f00b f958 	bl	8019f1c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec6c:	2003      	movs	r0, #3
 800ec6e:	f7fd fa89 	bl	800c184 <memp_malloc>
 800ec72:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <tcp_seg_copy+0x2e>
    return NULL;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	e00a      	b.n	800ec94 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec7e:	2210      	movs	r2, #16
 800ec80:	6879      	ldr	r1, [r7, #4]
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f00a fadf 	bl	8019246 <memcpy>
  pbuf_ref(cseg->p);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	f7fe fa1d 	bl	800d0cc <pbuf_ref>
  return cseg;
 800ec92:	68fb      	ldr	r3, [r7, #12]
}
 800ec94:	4618      	mov	r0, r3
 800ec96:	3710      	adds	r7, #16
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	0801f6fc 	.word	0x0801f6fc
 800eca0:	0801fc50 	.word	0x0801fc50
 800eca4:	0801f740 	.word	0x0801f740

0800eca8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
 800ecb4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d109      	bne.n	800ecd0 <tcp_recv_null+0x28>
 800ecbc:	4b12      	ldr	r3, [pc, #72]	; (800ed08 <tcp_recv_null+0x60>)
 800ecbe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ecc2:	4912      	ldr	r1, [pc, #72]	; (800ed0c <tcp_recv_null+0x64>)
 800ecc4:	4812      	ldr	r0, [pc, #72]	; (800ed10 <tcp_recv_null+0x68>)
 800ecc6:	f00b f929 	bl	8019f1c <iprintf>
 800ecca:	f06f 030f 	mvn.w	r3, #15
 800ecce:	e016      	b.n	800ecfe <tcp_recv_null+0x56>

  if (p != NULL) {
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d009      	beq.n	800ecea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	891b      	ldrh	r3, [r3, #8]
 800ecda:	4619      	mov	r1, r3
 800ecdc:	68b8      	ldr	r0, [r7, #8]
 800ecde:	f7ff f9bf 	bl	800e060 <tcp_recved>
    pbuf_free(p);
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7fe f94c 	bl	800cf80 <pbuf_free>
 800ece8:	e008      	b.n	800ecfc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ecea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d104      	bne.n	800ecfc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ecf2:	68b8      	ldr	r0, [r7, #8]
 800ecf4:	f7fe ff72 	bl	800dbdc <tcp_close>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	e000      	b.n	800ecfe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	0801f6fc 	.word	0x0801f6fc
 800ed0c:	0801fc6c 	.word	0x0801fc6c
 800ed10:	0801f740 	.word	0x0801f740

0800ed14 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	db01      	blt.n	800ed2a <tcp_kill_prio+0x16>
 800ed26:	79fb      	ldrb	r3, [r7, #7]
 800ed28:	e000      	b.n	800ed2c <tcp_kill_prio+0x18>
 800ed2a:	237f      	movs	r3, #127	; 0x7f
 800ed2c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed2e:	7afb      	ldrb	r3, [r7, #11]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d034      	beq.n	800ed9e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed34:	7afb      	ldrb	r3, [r7, #11]
 800ed36:	3b01      	subs	r3, #1
 800ed38:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed42:	4b19      	ldr	r3, [pc, #100]	; (800eda8 <tcp_kill_prio+0x94>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	617b      	str	r3, [r7, #20]
 800ed48:	e01f      	b.n	800ed8a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	7d5b      	ldrb	r3, [r3, #21]
 800ed4e:	7afa      	ldrb	r2, [r7, #11]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d80c      	bhi.n	800ed6e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed58:	7afa      	ldrb	r2, [r7, #11]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d112      	bne.n	800ed84 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed5e:	4b13      	ldr	r3, [pc, #76]	; (800edac <tcp_kill_prio+0x98>)
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	6a1b      	ldr	r3, [r3, #32]
 800ed66:	1ad3      	subs	r3, r2, r3
 800ed68:	68fa      	ldr	r2, [r7, #12]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d80a      	bhi.n	800ed84 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ed6e:	4b0f      	ldr	r3, [pc, #60]	; (800edac <tcp_kill_prio+0x98>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	6a1b      	ldr	r3, [r3, #32]
 800ed76:	1ad3      	subs	r3, r2, r3
 800ed78:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	7d5b      	ldrb	r3, [r3, #21]
 800ed82:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	617b      	str	r3, [r7, #20]
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d1dc      	bne.n	800ed4a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d004      	beq.n	800eda0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed96:	6938      	ldr	r0, [r7, #16]
 800ed98:	f7ff f864 	bl	800de64 <tcp_abort>
 800ed9c:	e000      	b.n	800eda0 <tcp_kill_prio+0x8c>
    return;
 800ed9e:	bf00      	nop
  }
}
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	20028090 	.word	0x20028090
 800edac:	20028094 	.word	0x20028094

0800edb0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	4603      	mov	r3, r0
 800edb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800edba:	79fb      	ldrb	r3, [r7, #7]
 800edbc:	2b08      	cmp	r3, #8
 800edbe:	d009      	beq.n	800edd4 <tcp_kill_state+0x24>
 800edc0:	79fb      	ldrb	r3, [r7, #7]
 800edc2:	2b09      	cmp	r3, #9
 800edc4:	d006      	beq.n	800edd4 <tcp_kill_state+0x24>
 800edc6:	4b1a      	ldr	r3, [pc, #104]	; (800ee30 <tcp_kill_state+0x80>)
 800edc8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800edcc:	4919      	ldr	r1, [pc, #100]	; (800ee34 <tcp_kill_state+0x84>)
 800edce:	481a      	ldr	r0, [pc, #104]	; (800ee38 <tcp_kill_state+0x88>)
 800edd0:	f00b f8a4 	bl	8019f1c <iprintf>

  inactivity = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edd8:	2300      	movs	r3, #0
 800edda:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eddc:	4b17      	ldr	r3, [pc, #92]	; (800ee3c <tcp_kill_state+0x8c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	617b      	str	r3, [r7, #20]
 800ede2:	e017      	b.n	800ee14 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	7d1b      	ldrb	r3, [r3, #20]
 800ede8:	79fa      	ldrb	r2, [r7, #7]
 800edea:	429a      	cmp	r2, r3
 800edec:	d10f      	bne.n	800ee0e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800edee:	4b14      	ldr	r3, [pc, #80]	; (800ee40 <tcp_kill_state+0x90>)
 800edf0:	681a      	ldr	r2, [r3, #0]
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	1ad3      	subs	r3, r2, r3
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d807      	bhi.n	800ee0e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800edfe:	4b10      	ldr	r3, [pc, #64]	; (800ee40 <tcp_kill_state+0x90>)
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	68db      	ldr	r3, [r3, #12]
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1e4      	bne.n	800ede4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee20:	2100      	movs	r1, #0
 800ee22:	6938      	ldr	r0, [r7, #16]
 800ee24:	f7fe ff60 	bl	800dce8 <tcp_abandon>
  }
}
 800ee28:	bf00      	nop
 800ee2a:	3718      	adds	r7, #24
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	0801f6fc 	.word	0x0801f6fc
 800ee34:	0801fc88 	.word	0x0801fc88
 800ee38:	0801f740 	.word	0x0801f740
 800ee3c:	20028090 	.word	0x20028090
 800ee40:	20028094 	.word	0x20028094

0800ee44 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b084      	sub	sp, #16
 800ee48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee52:	4b12      	ldr	r3, [pc, #72]	; (800ee9c <tcp_kill_timewait+0x58>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	60fb      	str	r3, [r7, #12]
 800ee58:	e012      	b.n	800ee80 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee5a:	4b11      	ldr	r3, [pc, #68]	; (800eea0 <tcp_kill_timewait+0x5c>)
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d807      	bhi.n	800ee7a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee6a:	4b0d      	ldr	r3, [pc, #52]	; (800eea0 <tcp_kill_timewait+0x5c>)
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6a1b      	ldr	r3, [r3, #32]
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d1e9      	bne.n	800ee5a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d002      	beq.n	800ee92 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee8c:	68b8      	ldr	r0, [r7, #8]
 800ee8e:	f7fe ffe9 	bl	800de64 <tcp_abort>
  }
}
 800ee92:	bf00      	nop
 800ee94:	3710      	adds	r7, #16
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	200280a0 	.word	0x200280a0
 800eea0:	20028094 	.word	0x20028094

0800eea4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eeaa:	4b10      	ldr	r3, [pc, #64]	; (800eeec <tcp_handle_closepend+0x48>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eeb0:	e014      	b.n	800eedc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	8b5b      	ldrh	r3, [r3, #26]
 800eebc:	f003 0308 	and.w	r3, r3, #8
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d009      	beq.n	800eed8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	8b5b      	ldrh	r3, [r3, #26]
 800eec8:	f023 0308 	bic.w	r3, r3, #8
 800eecc:	b29a      	uxth	r2, r3
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f7fe fe1c 	bl	800db10 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d1e7      	bne.n	800eeb2 <tcp_handle_closepend+0xe>
  }
}
 800eee2:	bf00      	nop
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}
 800eeea:	bf00      	nop
 800eeec:	20028090 	.word	0x20028090

0800eef0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	4603      	mov	r3, r0
 800eef8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eefa:	2001      	movs	r0, #1
 800eefc:	f7fd f942 	bl	800c184 <memp_malloc>
 800ef00:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d126      	bne.n	800ef56 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef08:	f7ff ffcc 	bl	800eea4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef0c:	f7ff ff9a 	bl	800ee44 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef10:	2001      	movs	r0, #1
 800ef12:	f7fd f937 	bl	800c184 <memp_malloc>
 800ef16:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d11b      	bne.n	800ef56 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef1e:	2009      	movs	r0, #9
 800ef20:	f7ff ff46 	bl	800edb0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef24:	2001      	movs	r0, #1
 800ef26:	f7fd f92d 	bl	800c184 <memp_malloc>
 800ef2a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d111      	bne.n	800ef56 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef32:	2008      	movs	r0, #8
 800ef34:	f7ff ff3c 	bl	800edb0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef38:	2001      	movs	r0, #1
 800ef3a:	f7fd f923 	bl	800c184 <memp_malloc>
 800ef3e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d107      	bne.n	800ef56 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef46:	79fb      	ldrb	r3, [r7, #7]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7ff fee3 	bl	800ed14 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef4e:	2001      	movs	r0, #1
 800ef50:	f7fd f918 	bl	800c184 <memp_malloc>
 800ef54:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d03f      	beq.n	800efdc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef5c:	229c      	movs	r2, #156	; 0x9c
 800ef5e:	2100      	movs	r1, #0
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f00a f994 	bl	801928e <memset>
    pcb->prio = prio;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	79fa      	ldrb	r2, [r7, #7]
 800ef6a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef72:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	22ff      	movs	r2, #255	; 0xff
 800ef8a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ef92:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2206      	movs	r2, #6
 800ef98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2206      	movs	r2, #6
 800efa0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efa8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2201      	movs	r2, #1
 800efae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800efb2:	4b0d      	ldr	r3, [pc, #52]	; (800efe8 <tcp_alloc+0xf8>)
 800efb4:	681a      	ldr	r2, [r3, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800efba:	4b0c      	ldr	r3, [pc, #48]	; (800efec <tcp_alloc+0xfc>)
 800efbc:	781a      	ldrb	r2, [r3, #0]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efc8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	4a08      	ldr	r2, [pc, #32]	; (800eff0 <tcp_alloc+0x100>)
 800efd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	4a07      	ldr	r2, [pc, #28]	; (800eff4 <tcp_alloc+0x104>)
 800efd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800efdc:	68fb      	ldr	r3, [r7, #12]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3710      	adds	r7, #16
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20028094 	.word	0x20028094
 800efec:	2002149a 	.word	0x2002149a
 800eff0:	0800eca9 	.word	0x0800eca9
 800eff4:	006ddd00 	.word	0x006ddd00

0800eff8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f002:	2040      	movs	r0, #64	; 0x40
 800f004:	f7ff ff74 	bl	800eef0 <tcp_alloc>
 800f008:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f00a:	68fb      	ldr	r3, [r7, #12]
}
 800f00c:	4618      	mov	r0, r3
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}

0800f014 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	683a      	ldr	r2, [r7, #0]
 800f028:	611a      	str	r2, [r3, #16]
  }
}
 800f02a:	bf00      	nop
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
	...

0800f038 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00e      	beq.n	800f066 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7d1b      	ldrb	r3, [r3, #20]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d106      	bne.n	800f05e <tcp_recv+0x26>
 800f050:	4b07      	ldr	r3, [pc, #28]	; (800f070 <tcp_recv+0x38>)
 800f052:	f240 72df 	movw	r2, #2015	; 0x7df
 800f056:	4907      	ldr	r1, [pc, #28]	; (800f074 <tcp_recv+0x3c>)
 800f058:	4807      	ldr	r0, [pc, #28]	; (800f078 <tcp_recv+0x40>)
 800f05a:	f00a ff5f 	bl	8019f1c <iprintf>
    pcb->recv = recv;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	683a      	ldr	r2, [r7, #0]
 800f062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f066:	bf00      	nop
 800f068:	3708      	adds	r7, #8
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop
 800f070:	0801f6fc 	.word	0x0801f6fc
 800f074:	0801fc98 	.word	0x0801fc98
 800f078:	0801f740 	.word	0x0801f740

0800f07c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00e      	beq.n	800f0aa <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	7d1b      	ldrb	r3, [r3, #20]
 800f090:	2b01      	cmp	r3, #1
 800f092:	d106      	bne.n	800f0a2 <tcp_sent+0x26>
 800f094:	4b07      	ldr	r3, [pc, #28]	; (800f0b4 <tcp_sent+0x38>)
 800f096:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f09a:	4907      	ldr	r1, [pc, #28]	; (800f0b8 <tcp_sent+0x3c>)
 800f09c:	4807      	ldr	r0, [pc, #28]	; (800f0bc <tcp_sent+0x40>)
 800f09e:	f00a ff3d 	bl	8019f1c <iprintf>
    pcb->sent = sent;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	683a      	ldr	r2, [r7, #0]
 800f0a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f0aa:	bf00      	nop
 800f0ac:	3708      	adds	r7, #8
 800f0ae:	46bd      	mov	sp, r7
 800f0b0:	bd80      	pop	{r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	0801f6fc 	.word	0x0801f6fc
 800f0b8:	0801fcc0 	.word	0x0801fcc0
 800f0bc:	0801f740 	.word	0x0801f740

0800f0c0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00e      	beq.n	800f0ee <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	7d1b      	ldrb	r3, [r3, #20]
 800f0d4:	2b01      	cmp	r3, #1
 800f0d6:	d106      	bne.n	800f0e6 <tcp_err+0x26>
 800f0d8:	4b07      	ldr	r3, [pc, #28]	; (800f0f8 <tcp_err+0x38>)
 800f0da:	f640 020d 	movw	r2, #2061	; 0x80d
 800f0de:	4907      	ldr	r1, [pc, #28]	; (800f0fc <tcp_err+0x3c>)
 800f0e0:	4807      	ldr	r0, [pc, #28]	; (800f100 <tcp_err+0x40>)
 800f0e2:	f00a ff1b 	bl	8019f1c <iprintf>
    pcb->errf = err;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	683a      	ldr	r2, [r7, #0]
 800f0ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f0ee:	bf00      	nop
 800f0f0:	3708      	adds	r7, #8
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	0801f6fc 	.word	0x0801f6fc
 800f0fc:	0801fce8 	.word	0x0801fce8
 800f100:	0801f740 	.word	0x0801f740

0800f104 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d008      	beq.n	800f126 <tcp_accept+0x22>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	7d1b      	ldrb	r3, [r3, #20]
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d104      	bne.n	800f126 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	619a      	str	r2, [r3, #24]
  }
}
 800f126:	bf00      	nop
 800f128:	3714      	adds	r7, #20
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
	...

0800f134 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b084      	sub	sp, #16
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	4613      	mov	r3, r2
 800f140:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d107      	bne.n	800f158 <tcp_poll+0x24>
 800f148:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <tcp_poll+0x50>)
 800f14a:	f640 023d 	movw	r2, #2109	; 0x83d
 800f14e:	490e      	ldr	r1, [pc, #56]	; (800f188 <tcp_poll+0x54>)
 800f150:	480e      	ldr	r0, [pc, #56]	; (800f18c <tcp_poll+0x58>)
 800f152:	f00a fee3 	bl	8019f1c <iprintf>
 800f156:	e011      	b.n	800f17c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	7d1b      	ldrb	r3, [r3, #20]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d106      	bne.n	800f16e <tcp_poll+0x3a>
 800f160:	4b08      	ldr	r3, [pc, #32]	; (800f184 <tcp_poll+0x50>)
 800f162:	f640 023e 	movw	r2, #2110	; 0x83e
 800f166:	490a      	ldr	r1, [pc, #40]	; (800f190 <tcp_poll+0x5c>)
 800f168:	4808      	ldr	r0, [pc, #32]	; (800f18c <tcp_poll+0x58>)
 800f16a:	f00a fed7 	bl	8019f1c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	68ba      	ldr	r2, [r7, #8]
 800f172:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	79fa      	ldrb	r2, [r7, #7]
 800f17a:	775a      	strb	r2, [r3, #29]
}
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	0801f6fc 	.word	0x0801f6fc
 800f188:	0801fd10 	.word	0x0801fd10
 800f18c:	0801f740 	.word	0x0801f740
 800f190:	0801fd28 	.word	0x0801fd28

0800f194 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d107      	bne.n	800f1b2 <tcp_pcb_purge+0x1e>
 800f1a2:	4b21      	ldr	r3, [pc, #132]	; (800f228 <tcp_pcb_purge+0x94>)
 800f1a4:	f640 0251 	movw	r2, #2129	; 0x851
 800f1a8:	4920      	ldr	r1, [pc, #128]	; (800f22c <tcp_pcb_purge+0x98>)
 800f1aa:	4821      	ldr	r0, [pc, #132]	; (800f230 <tcp_pcb_purge+0x9c>)
 800f1ac:	f00a feb6 	bl	8019f1c <iprintf>
 800f1b0:	e037      	b.n	800f222 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	7d1b      	ldrb	r3, [r3, #20]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d033      	beq.n	800f222 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1be:	2b0a      	cmp	r3, #10
 800f1c0:	d02f      	beq.n	800f222 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d02b      	beq.n	800f222 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d007      	beq.n	800f1e2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fd fed2 	bl	800cf80 <pbuf_free>
      pcb->refused_data = NULL;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f986 	bl	800f4fc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1f6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fcfb 	bl	800ebf8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f206:	4618      	mov	r0, r3
 800f208:	f7ff fcf6 	bl	800ebf8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	66da      	str	r2, [r3, #108]	; 0x6c
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f222:	3708      	adds	r7, #8
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}
 800f228:	0801f6fc 	.word	0x0801f6fc
 800f22c:	0801fd48 	.word	0x0801fd48
 800f230:	0801f740 	.word	0x0801f740

0800f234 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
 800f23c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <tcp_pcb_remove+0x1e>
 800f244:	4b3e      	ldr	r3, [pc, #248]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f246:	f640 0283 	movw	r2, #2179	; 0x883
 800f24a:	493e      	ldr	r1, [pc, #248]	; (800f344 <tcp_pcb_remove+0x110>)
 800f24c:	483e      	ldr	r0, [pc, #248]	; (800f348 <tcp_pcb_remove+0x114>)
 800f24e:	f00a fe65 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d106      	bne.n	800f266 <tcp_pcb_remove+0x32>
 800f258:	4b39      	ldr	r3, [pc, #228]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f25a:	f640 0284 	movw	r2, #2180	; 0x884
 800f25e:	493b      	ldr	r1, [pc, #236]	; (800f34c <tcp_pcb_remove+0x118>)
 800f260:	4839      	ldr	r0, [pc, #228]	; (800f348 <tcp_pcb_remove+0x114>)
 800f262:	f00a fe5b 	bl	8019f1c <iprintf>

  TCP_RMV(pcblist, pcb);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	683a      	ldr	r2, [r7, #0]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d105      	bne.n	800f27c <tcp_pcb_remove+0x48>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68da      	ldr	r2, [r3, #12]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	e013      	b.n	800f2a4 <tcp_pcb_remove+0x70>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	60fb      	str	r3, [r7, #12]
 800f282:	e00c      	b.n	800f29e <tcp_pcb_remove+0x6a>
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d104      	bne.n	800f298 <tcp_pcb_remove+0x64>
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	68da      	ldr	r2, [r3, #12]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	60da      	str	r2, [r3, #12]
 800f296:	e005      	b.n	800f2a4 <tcp_pcb_remove+0x70>
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	68db      	ldr	r3, [r3, #12]
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1ef      	bne.n	800f284 <tcp_pcb_remove+0x50>
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f2aa:	6838      	ldr	r0, [r7, #0]
 800f2ac:	f7ff ff72 	bl	800f194 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	7d1b      	ldrb	r3, [r3, #20]
 800f2b4:	2b0a      	cmp	r3, #10
 800f2b6:	d013      	beq.n	800f2e0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d00f      	beq.n	800f2e0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	8b5b      	ldrh	r3, [r3, #26]
 800f2c4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d009      	beq.n	800f2e0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	8b5b      	ldrh	r3, [r3, #26]
 800f2d0:	f043 0302 	orr.w	r3, r3, #2
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2da:	6838      	ldr	r0, [r7, #0]
 800f2dc:	f003 fbc2 	bl	8012a64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	7d1b      	ldrb	r3, [r3, #20]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d020      	beq.n	800f32a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d006      	beq.n	800f2fe <tcp_pcb_remove+0xca>
 800f2f0:	4b13      	ldr	r3, [pc, #76]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f2f2:	f640 0293 	movw	r2, #2195	; 0x893
 800f2f6:	4916      	ldr	r1, [pc, #88]	; (800f350 <tcp_pcb_remove+0x11c>)
 800f2f8:	4813      	ldr	r0, [pc, #76]	; (800f348 <tcp_pcb_remove+0x114>)
 800f2fa:	f00a fe0f 	bl	8019f1c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f302:	2b00      	cmp	r3, #0
 800f304:	d006      	beq.n	800f314 <tcp_pcb_remove+0xe0>
 800f306:	4b0e      	ldr	r3, [pc, #56]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f308:	f640 0294 	movw	r2, #2196	; 0x894
 800f30c:	4911      	ldr	r1, [pc, #68]	; (800f354 <tcp_pcb_remove+0x120>)
 800f30e:	480e      	ldr	r0, [pc, #56]	; (800f348 <tcp_pcb_remove+0x114>)
 800f310:	f00a fe04 	bl	8019f1c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d006      	beq.n	800f32a <tcp_pcb_remove+0xf6>
 800f31c:	4b08      	ldr	r3, [pc, #32]	; (800f340 <tcp_pcb_remove+0x10c>)
 800f31e:	f640 0296 	movw	r2, #2198	; 0x896
 800f322:	490d      	ldr	r1, [pc, #52]	; (800f358 <tcp_pcb_remove+0x124>)
 800f324:	4808      	ldr	r0, [pc, #32]	; (800f348 <tcp_pcb_remove+0x114>)
 800f326:	f00a fdf9 	bl	8019f1c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	2200      	movs	r2, #0
 800f32e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	2200      	movs	r2, #0
 800f334:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f336:	bf00      	nop
 800f338:	3710      	adds	r7, #16
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	0801f6fc 	.word	0x0801f6fc
 800f344:	0801fd64 	.word	0x0801fd64
 800f348:	0801f740 	.word	0x0801f740
 800f34c:	0801fd80 	.word	0x0801fd80
 800f350:	0801fda0 	.word	0x0801fda0
 800f354:	0801fdb8 	.word	0x0801fdb8
 800f358:	0801fdd4 	.word	0x0801fdd4

0800f35c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d106      	bne.n	800f378 <tcp_next_iss+0x1c>
 800f36a:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <tcp_next_iss+0x38>)
 800f36c:	f640 02af 	movw	r2, #2223	; 0x8af
 800f370:	4909      	ldr	r1, [pc, #36]	; (800f398 <tcp_next_iss+0x3c>)
 800f372:	480a      	ldr	r0, [pc, #40]	; (800f39c <tcp_next_iss+0x40>)
 800f374:	f00a fdd2 	bl	8019f1c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f378:	4b09      	ldr	r3, [pc, #36]	; (800f3a0 <tcp_next_iss+0x44>)
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	4b09      	ldr	r3, [pc, #36]	; (800f3a4 <tcp_next_iss+0x48>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4413      	add	r3, r2
 800f382:	4a07      	ldr	r2, [pc, #28]	; (800f3a0 <tcp_next_iss+0x44>)
 800f384:	6013      	str	r3, [r2, #0]
  return iss;
 800f386:	4b06      	ldr	r3, [pc, #24]	; (800f3a0 <tcp_next_iss+0x44>)
 800f388:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3708      	adds	r7, #8
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}
 800f392:	bf00      	nop
 800f394:	0801f6fc 	.word	0x0801f6fc
 800f398:	0801fdec 	.word	0x0801fdec
 800f39c:	0801f740 	.word	0x0801f740
 800f3a0:	20000014 	.word	0x20000014
 800f3a4:	20028094 	.word	0x20028094

0800f3a8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b086      	sub	sp, #24
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	60b9      	str	r1, [r7, #8]
 800f3b2:	607a      	str	r2, [r7, #4]
 800f3b4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d106      	bne.n	800f3ca <tcp_eff_send_mss_netif+0x22>
 800f3bc:	4b14      	ldr	r3, [pc, #80]	; (800f410 <tcp_eff_send_mss_netif+0x68>)
 800f3be:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f3c2:	4914      	ldr	r1, [pc, #80]	; (800f414 <tcp_eff_send_mss_netif+0x6c>)
 800f3c4:	4814      	ldr	r0, [pc, #80]	; (800f418 <tcp_eff_send_mss_netif+0x70>)
 800f3c6:	f00a fda9 	bl	8019f1c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f3ca:	68bb      	ldr	r3, [r7, #8]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d101      	bne.n	800f3d4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f3d0:	89fb      	ldrh	r3, [r7, #14]
 800f3d2:	e019      	b.n	800f408 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f3da:	8afb      	ldrh	r3, [r7, #22]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d012      	beq.n	800f406 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f3e0:	2328      	movs	r3, #40	; 0x28
 800f3e2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f3e4:	8afa      	ldrh	r2, [r7, #22]
 800f3e6:	8abb      	ldrh	r3, [r7, #20]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d904      	bls.n	800f3f6 <tcp_eff_send_mss_netif+0x4e>
 800f3ec:	8afa      	ldrh	r2, [r7, #22]
 800f3ee:	8abb      	ldrh	r3, [r7, #20]
 800f3f0:	1ad3      	subs	r3, r2, r3
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	e000      	b.n	800f3f8 <tcp_eff_send_mss_netif+0x50>
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f3fa:	8a7a      	ldrh	r2, [r7, #18]
 800f3fc:	89fb      	ldrh	r3, [r7, #14]
 800f3fe:	4293      	cmp	r3, r2
 800f400:	bf28      	it	cs
 800f402:	4613      	movcs	r3, r2
 800f404:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f406:	89fb      	ldrh	r3, [r7, #14]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3718      	adds	r7, #24
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	0801f6fc 	.word	0x0801f6fc
 800f414:	0801fe08 	.word	0x0801fe08
 800f418:	0801f740 	.word	0x0801f740

0800f41c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d119      	bne.n	800f464 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f430:	4b10      	ldr	r3, [pc, #64]	; (800f474 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f432:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f436:	4910      	ldr	r1, [pc, #64]	; (800f478 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f438:	4810      	ldr	r0, [pc, #64]	; (800f47c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f43a:	f00a fd6f 	bl	8019f1c <iprintf>

  while (pcb != NULL) {
 800f43e:	e011      	b.n	800f464 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	429a      	cmp	r2, r3
 800f44a:	d108      	bne.n	800f45e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f7fe fd06 	bl	800de64 <tcp_abort>
      pcb = next;
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	60fb      	str	r3, [r7, #12]
 800f45c:	e002      	b.n	800f464 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1ea      	bne.n	800f440 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f46a:	bf00      	nop
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	0801f6fc 	.word	0x0801f6fc
 800f478:	0801fe30 	.word	0x0801fe30
 800f47c:	0801f740 	.word	0x0801f740

0800f480 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b084      	sub	sp, #16
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d02a      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d026      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f498:	4b15      	ldr	r3, [pc, #84]	; (800f4f0 <tcp_netif_ip_addr_changed+0x70>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4619      	mov	r1, r3
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7ff ffbc 	bl	800f41c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f4a4:	4b13      	ldr	r3, [pc, #76]	; (800f4f4 <tcp_netif_ip_addr_changed+0x74>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7ff ffb6 	bl	800f41c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d017      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d013      	beq.n	800f4e6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4be:	4b0e      	ldr	r3, [pc, #56]	; (800f4f8 <tcp_netif_ip_addr_changed+0x78>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	60fb      	str	r3, [r7, #12]
 800f4c4:	e00c      	b.n	800f4e0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d103      	bne.n	800f4da <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d1ef      	bne.n	800f4c6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f4e6:	bf00      	nop
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	20028090 	.word	0x20028090
 800f4f4:	2002809c 	.word	0x2002809c
 800f4f8:	20028098 	.word	0x20028098

0800f4fc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d007      	beq.n	800f51c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff fb71 	bl	800ebf8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2200      	movs	r2, #0
 800f51a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f51c:	bf00      	nop
 800f51e:	3708      	adds	r7, #8
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}

0800f524 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f524:	b590      	push	{r4, r7, lr}
 800f526:	b08d      	sub	sp, #52	; 0x34
 800f528:	af04      	add	r7, sp, #16
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d105      	bne.n	800f540 <tcp_input+0x1c>
 800f534:	4b9b      	ldr	r3, [pc, #620]	; (800f7a4 <tcp_input+0x280>)
 800f536:	2283      	movs	r2, #131	; 0x83
 800f538:	499b      	ldr	r1, [pc, #620]	; (800f7a8 <tcp_input+0x284>)
 800f53a:	489c      	ldr	r0, [pc, #624]	; (800f7ac <tcp_input+0x288>)
 800f53c:	f00a fcee 	bl	8019f1c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	4a9a      	ldr	r2, [pc, #616]	; (800f7b0 <tcp_input+0x28c>)
 800f546:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	895b      	ldrh	r3, [r3, #10]
 800f54c:	2b13      	cmp	r3, #19
 800f54e:	f240 83c4 	bls.w	800fcda <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f552:	4b98      	ldr	r3, [pc, #608]	; (800f7b4 <tcp_input+0x290>)
 800f554:	695a      	ldr	r2, [r3, #20]
 800f556:	4b97      	ldr	r3, [pc, #604]	; (800f7b4 <tcp_input+0x290>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	4619      	mov	r1, r3
 800f55c:	4610      	mov	r0, r2
 800f55e:	f008 fb29 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	f040 83ba 	bne.w	800fcde <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f56a:	4b92      	ldr	r3, [pc, #584]	; (800f7b4 <tcp_input+0x290>)
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f572:	2be0      	cmp	r3, #224	; 0xe0
 800f574:	f000 83b3 	beq.w	800fcde <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f578:	4b8d      	ldr	r3, [pc, #564]	; (800f7b0 <tcp_input+0x28c>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	899b      	ldrh	r3, [r3, #12]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	4618      	mov	r0, r3
 800f582:	f7fb f975 	bl	800a870 <lwip_htons>
 800f586:	4603      	mov	r3, r0
 800f588:	0b1b      	lsrs	r3, r3, #12
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	b2db      	uxtb	r3, r3
 800f58e:	009b      	lsls	r3, r3, #2
 800f590:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f592:	7cbb      	ldrb	r3, [r7, #18]
 800f594:	2b13      	cmp	r3, #19
 800f596:	f240 83a2 	bls.w	800fcde <tcp_input+0x7ba>
 800f59a:	7cbb      	ldrb	r3, [r7, #18]
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	891b      	ldrh	r3, [r3, #8]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	f200 839b 	bhi.w	800fcde <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f5a8:	7cbb      	ldrb	r3, [r7, #18]
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	3b14      	subs	r3, #20
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	4b81      	ldr	r3, [pc, #516]	; (800f7b8 <tcp_input+0x294>)
 800f5b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5b4:	4b81      	ldr	r3, [pc, #516]	; (800f7bc <tcp_input+0x298>)
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	895a      	ldrh	r2, [r3, #10]
 800f5be:	7cbb      	ldrb	r3, [r7, #18]
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d309      	bcc.n	800f5da <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5c6:	4b7c      	ldr	r3, [pc, #496]	; (800f7b8 <tcp_input+0x294>)
 800f5c8:	881a      	ldrh	r2, [r3, #0]
 800f5ca:	4b7d      	ldr	r3, [pc, #500]	; (800f7c0 <tcp_input+0x29c>)
 800f5cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f5ce:	7cbb      	ldrb	r3, [r7, #18]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7fd fc4e 	bl	800ce74 <pbuf_remove_header>
 800f5d8:	e04e      	b.n	800f678 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d105      	bne.n	800f5ee <tcp_input+0xca>
 800f5e2:	4b70      	ldr	r3, [pc, #448]	; (800f7a4 <tcp_input+0x280>)
 800f5e4:	22c2      	movs	r2, #194	; 0xc2
 800f5e6:	4977      	ldr	r1, [pc, #476]	; (800f7c4 <tcp_input+0x2a0>)
 800f5e8:	4870      	ldr	r0, [pc, #448]	; (800f7ac <tcp_input+0x288>)
 800f5ea:	f00a fc97 	bl	8019f1c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f5ee:	2114      	movs	r1, #20
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f7fd fc3f 	bl	800ce74 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	895a      	ldrh	r2, [r3, #10]
 800f5fa:	4b71      	ldr	r3, [pc, #452]	; (800f7c0 <tcp_input+0x29c>)
 800f5fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f5fe:	4b6e      	ldr	r3, [pc, #440]	; (800f7b8 <tcp_input+0x294>)
 800f600:	881a      	ldrh	r2, [r3, #0]
 800f602:	4b6f      	ldr	r3, [pc, #444]	; (800f7c0 <tcp_input+0x29c>)
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	1ad3      	subs	r3, r2, r3
 800f608:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f60a:	4b6d      	ldr	r3, [pc, #436]	; (800f7c0 <tcp_input+0x29c>)
 800f60c:	881b      	ldrh	r3, [r3, #0]
 800f60e:	4619      	mov	r1, r3
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7fd fc2f 	bl	800ce74 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	895b      	ldrh	r3, [r3, #10]
 800f61c:	8a3a      	ldrh	r2, [r7, #16]
 800f61e:	429a      	cmp	r2, r3
 800f620:	f200 835f 	bhi.w	800fce2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	4a64      	ldr	r2, [pc, #400]	; (800f7bc <tcp_input+0x298>)
 800f62c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	8a3a      	ldrh	r2, [r7, #16]
 800f634:	4611      	mov	r1, r2
 800f636:	4618      	mov	r0, r3
 800f638:	f7fd fc1c 	bl	800ce74 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	891a      	ldrh	r2, [r3, #8]
 800f640:	8a3b      	ldrh	r3, [r7, #16]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	b29a      	uxth	r2, r3
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	895b      	ldrh	r3, [r3, #10]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d005      	beq.n	800f65e <tcp_input+0x13a>
 800f652:	4b54      	ldr	r3, [pc, #336]	; (800f7a4 <tcp_input+0x280>)
 800f654:	22df      	movs	r2, #223	; 0xdf
 800f656:	495c      	ldr	r1, [pc, #368]	; (800f7c8 <tcp_input+0x2a4>)
 800f658:	4854      	ldr	r0, [pc, #336]	; (800f7ac <tcp_input+0x288>)
 800f65a:	f00a fc5f 	bl	8019f1c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	891a      	ldrh	r2, [r3, #8]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	891b      	ldrh	r3, [r3, #8]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d005      	beq.n	800f678 <tcp_input+0x154>
 800f66c:	4b4d      	ldr	r3, [pc, #308]	; (800f7a4 <tcp_input+0x280>)
 800f66e:	22e0      	movs	r2, #224	; 0xe0
 800f670:	4956      	ldr	r1, [pc, #344]	; (800f7cc <tcp_input+0x2a8>)
 800f672:	484e      	ldr	r0, [pc, #312]	; (800f7ac <tcp_input+0x288>)
 800f674:	f00a fc52 	bl	8019f1c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f678:	4b4d      	ldr	r3, [pc, #308]	; (800f7b0 <tcp_input+0x28c>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	b29a      	uxth	r2, r3
 800f680:	4b4b      	ldr	r3, [pc, #300]	; (800f7b0 <tcp_input+0x28c>)
 800f682:	681c      	ldr	r4, [r3, #0]
 800f684:	4610      	mov	r0, r2
 800f686:	f7fb f8f3 	bl	800a870 <lwip_htons>
 800f68a:	4603      	mov	r3, r0
 800f68c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f68e:	4b48      	ldr	r3, [pc, #288]	; (800f7b0 <tcp_input+0x28c>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	885b      	ldrh	r3, [r3, #2]
 800f694:	b29a      	uxth	r2, r3
 800f696:	4b46      	ldr	r3, [pc, #280]	; (800f7b0 <tcp_input+0x28c>)
 800f698:	681c      	ldr	r4, [r3, #0]
 800f69a:	4610      	mov	r0, r2
 800f69c:	f7fb f8e8 	bl	800a870 <lwip_htons>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f6a4:	4b42      	ldr	r3, [pc, #264]	; (800f7b0 <tcp_input+0x28c>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	685a      	ldr	r2, [r3, #4]
 800f6aa:	4b41      	ldr	r3, [pc, #260]	; (800f7b0 <tcp_input+0x28c>)
 800f6ac:	681c      	ldr	r4, [r3, #0]
 800f6ae:	4610      	mov	r0, r2
 800f6b0:	f7fb f8f3 	bl	800a89a <lwip_htonl>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	6063      	str	r3, [r4, #4]
 800f6b8:	6863      	ldr	r3, [r4, #4]
 800f6ba:	4a45      	ldr	r2, [pc, #276]	; (800f7d0 <tcp_input+0x2ac>)
 800f6bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6be:	4b3c      	ldr	r3, [pc, #240]	; (800f7b0 <tcp_input+0x28c>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	689a      	ldr	r2, [r3, #8]
 800f6c4:	4b3a      	ldr	r3, [pc, #232]	; (800f7b0 <tcp_input+0x28c>)
 800f6c6:	681c      	ldr	r4, [r3, #0]
 800f6c8:	4610      	mov	r0, r2
 800f6ca:	f7fb f8e6 	bl	800a89a <lwip_htonl>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	60a3      	str	r3, [r4, #8]
 800f6d2:	68a3      	ldr	r3, [r4, #8]
 800f6d4:	4a3f      	ldr	r2, [pc, #252]	; (800f7d4 <tcp_input+0x2b0>)
 800f6d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6d8:	4b35      	ldr	r3, [pc, #212]	; (800f7b0 <tcp_input+0x28c>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	89db      	ldrh	r3, [r3, #14]
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	4b33      	ldr	r3, [pc, #204]	; (800f7b0 <tcp_input+0x28c>)
 800f6e2:	681c      	ldr	r4, [r3, #0]
 800f6e4:	4610      	mov	r0, r2
 800f6e6:	f7fb f8c3 	bl	800a870 <lwip_htons>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6ee:	4b30      	ldr	r3, [pc, #192]	; (800f7b0 <tcp_input+0x28c>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	899b      	ldrh	r3, [r3, #12]
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fb f8ba 	bl	800a870 <lwip_htons>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f704:	b2da      	uxtb	r2, r3
 800f706:	4b34      	ldr	r3, [pc, #208]	; (800f7d8 <tcp_input+0x2b4>)
 800f708:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	891a      	ldrh	r2, [r3, #8]
 800f70e:	4b33      	ldr	r3, [pc, #204]	; (800f7dc <tcp_input+0x2b8>)
 800f710:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f712:	4b31      	ldr	r3, [pc, #196]	; (800f7d8 <tcp_input+0x2b4>)
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	f003 0303 	and.w	r3, r3, #3
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00c      	beq.n	800f738 <tcp_input+0x214>
    tcplen++;
 800f71e:	4b2f      	ldr	r3, [pc, #188]	; (800f7dc <tcp_input+0x2b8>)
 800f720:	881b      	ldrh	r3, [r3, #0]
 800f722:	3301      	adds	r3, #1
 800f724:	b29a      	uxth	r2, r3
 800f726:	4b2d      	ldr	r3, [pc, #180]	; (800f7dc <tcp_input+0x2b8>)
 800f728:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	891a      	ldrh	r2, [r3, #8]
 800f72e:	4b2b      	ldr	r3, [pc, #172]	; (800f7dc <tcp_input+0x2b8>)
 800f730:	881b      	ldrh	r3, [r3, #0]
 800f732:	429a      	cmp	r2, r3
 800f734:	f200 82d7 	bhi.w	800fce6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f738:	2300      	movs	r3, #0
 800f73a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f73c:	4b28      	ldr	r3, [pc, #160]	; (800f7e0 <tcp_input+0x2bc>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	61fb      	str	r3, [r7, #28]
 800f742:	e09d      	b.n	800f880 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f744:	69fb      	ldr	r3, [r7, #28]
 800f746:	7d1b      	ldrb	r3, [r3, #20]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d105      	bne.n	800f758 <tcp_input+0x234>
 800f74c:	4b15      	ldr	r3, [pc, #84]	; (800f7a4 <tcp_input+0x280>)
 800f74e:	22fb      	movs	r2, #251	; 0xfb
 800f750:	4924      	ldr	r1, [pc, #144]	; (800f7e4 <tcp_input+0x2c0>)
 800f752:	4816      	ldr	r0, [pc, #88]	; (800f7ac <tcp_input+0x288>)
 800f754:	f00a fbe2 	bl	8019f1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	7d1b      	ldrb	r3, [r3, #20]
 800f75c:	2b0a      	cmp	r3, #10
 800f75e:	d105      	bne.n	800f76c <tcp_input+0x248>
 800f760:	4b10      	ldr	r3, [pc, #64]	; (800f7a4 <tcp_input+0x280>)
 800f762:	22fc      	movs	r2, #252	; 0xfc
 800f764:	4920      	ldr	r1, [pc, #128]	; (800f7e8 <tcp_input+0x2c4>)
 800f766:	4811      	ldr	r0, [pc, #68]	; (800f7ac <tcp_input+0x288>)
 800f768:	f00a fbd8 	bl	8019f1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f76c:	69fb      	ldr	r3, [r7, #28]
 800f76e:	7d1b      	ldrb	r3, [r3, #20]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d105      	bne.n	800f780 <tcp_input+0x25c>
 800f774:	4b0b      	ldr	r3, [pc, #44]	; (800f7a4 <tcp_input+0x280>)
 800f776:	22fd      	movs	r2, #253	; 0xfd
 800f778:	491c      	ldr	r1, [pc, #112]	; (800f7ec <tcp_input+0x2c8>)
 800f77a:	480c      	ldr	r0, [pc, #48]	; (800f7ac <tcp_input+0x288>)
 800f77c:	f00a fbce 	bl	8019f1c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	7a1b      	ldrb	r3, [r3, #8]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d033      	beq.n	800f7f0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	7a1a      	ldrb	r2, [r3, #8]
 800f78c:	4b09      	ldr	r3, [pc, #36]	; (800f7b4 <tcp_input+0x290>)
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f794:	3301      	adds	r3, #1
 800f796:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f798:	429a      	cmp	r2, r3
 800f79a:	d029      	beq.n	800f7f0 <tcp_input+0x2cc>
      prev = pcb;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	61bb      	str	r3, [r7, #24]
      continue;
 800f7a0:	e06b      	b.n	800f87a <tcp_input+0x356>
 800f7a2:	bf00      	nop
 800f7a4:	0801fe64 	.word	0x0801fe64
 800f7a8:	0801fe98 	.word	0x0801fe98
 800f7ac:	0801feb0 	.word	0x0801feb0
 800f7b0:	200214ac 	.word	0x200214ac
 800f7b4:	20024804 	.word	0x20024804
 800f7b8:	200214b0 	.word	0x200214b0
 800f7bc:	200214b4 	.word	0x200214b4
 800f7c0:	200214b2 	.word	0x200214b2
 800f7c4:	0801fed8 	.word	0x0801fed8
 800f7c8:	0801fee8 	.word	0x0801fee8
 800f7cc:	0801fef4 	.word	0x0801fef4
 800f7d0:	200214bc 	.word	0x200214bc
 800f7d4:	200214c0 	.word	0x200214c0
 800f7d8:	200214c8 	.word	0x200214c8
 800f7dc:	200214c6 	.word	0x200214c6
 800f7e0:	20028090 	.word	0x20028090
 800f7e4:	0801ff14 	.word	0x0801ff14
 800f7e8:	0801ff3c 	.word	0x0801ff3c
 800f7ec:	0801ff68 	.word	0x0801ff68
    }

    if (pcb->remote_port == tcphdr->src &&
 800f7f0:	69fb      	ldr	r3, [r7, #28]
 800f7f2:	8b1a      	ldrh	r2, [r3, #24]
 800f7f4:	4b94      	ldr	r3, [pc, #592]	; (800fa48 <tcp_input+0x524>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	881b      	ldrh	r3, [r3, #0]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d13a      	bne.n	800f876 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	8ada      	ldrh	r2, [r3, #22]
 800f804:	4b90      	ldr	r3, [pc, #576]	; (800fa48 <tcp_input+0x524>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	885b      	ldrh	r3, [r3, #2]
 800f80a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d132      	bne.n	800f876 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	685a      	ldr	r2, [r3, #4]
 800f814:	4b8d      	ldr	r3, [pc, #564]	; (800fa4c <tcp_input+0x528>)
 800f816:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f818:	429a      	cmp	r2, r3
 800f81a:	d12c      	bne.n	800f876 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	4b8a      	ldr	r3, [pc, #552]	; (800fa4c <tcp_input+0x528>)
 800f822:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f824:	429a      	cmp	r2, r3
 800f826:	d126      	bne.n	800f876 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	69fa      	ldr	r2, [r7, #28]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d106      	bne.n	800f840 <tcp_input+0x31c>
 800f832:	4b87      	ldr	r3, [pc, #540]	; (800fa50 <tcp_input+0x52c>)
 800f834:	f240 120d 	movw	r2, #269	; 0x10d
 800f838:	4986      	ldr	r1, [pc, #536]	; (800fa54 <tcp_input+0x530>)
 800f83a:	4887      	ldr	r0, [pc, #540]	; (800fa58 <tcp_input+0x534>)
 800f83c:	f00a fb6e 	bl	8019f1c <iprintf>
      if (prev != NULL) {
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00a      	beq.n	800f85c <tcp_input+0x338>
        prev->next = pcb->next;
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f84e:	4b83      	ldr	r3, [pc, #524]	; (800fa5c <tcp_input+0x538>)
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f856:	4a81      	ldr	r2, [pc, #516]	; (800fa5c <tcp_input+0x538>)
 800f858:	69fb      	ldr	r3, [r7, #28]
 800f85a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	69fa      	ldr	r2, [r7, #28]
 800f862:	429a      	cmp	r2, r3
 800f864:	d111      	bne.n	800f88a <tcp_input+0x366>
 800f866:	4b7a      	ldr	r3, [pc, #488]	; (800fa50 <tcp_input+0x52c>)
 800f868:	f240 1215 	movw	r2, #277	; 0x115
 800f86c:	497c      	ldr	r1, [pc, #496]	; (800fa60 <tcp_input+0x53c>)
 800f86e:	487a      	ldr	r0, [pc, #488]	; (800fa58 <tcp_input+0x534>)
 800f870:	f00a fb54 	bl	8019f1c <iprintf>
      break;
 800f874:	e009      	b.n	800f88a <tcp_input+0x366>
    }
    prev = pcb;
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f87a:	69fb      	ldr	r3, [r7, #28]
 800f87c:	68db      	ldr	r3, [r3, #12]
 800f87e:	61fb      	str	r3, [r7, #28]
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	2b00      	cmp	r3, #0
 800f884:	f47f af5e 	bne.w	800f744 <tcp_input+0x220>
 800f888:	e000      	b.n	800f88c <tcp_input+0x368>
      break;
 800f88a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f040 8095 	bne.w	800f9be <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f894:	4b73      	ldr	r3, [pc, #460]	; (800fa64 <tcp_input+0x540>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	61fb      	str	r3, [r7, #28]
 800f89a:	e03f      	b.n	800f91c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	7d1b      	ldrb	r3, [r3, #20]
 800f8a0:	2b0a      	cmp	r3, #10
 800f8a2:	d006      	beq.n	800f8b2 <tcp_input+0x38e>
 800f8a4:	4b6a      	ldr	r3, [pc, #424]	; (800fa50 <tcp_input+0x52c>)
 800f8a6:	f240 121f 	movw	r2, #287	; 0x11f
 800f8aa:	496f      	ldr	r1, [pc, #444]	; (800fa68 <tcp_input+0x544>)
 800f8ac:	486a      	ldr	r0, [pc, #424]	; (800fa58 <tcp_input+0x534>)
 800f8ae:	f00a fb35 	bl	8019f1c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8b2:	69fb      	ldr	r3, [r7, #28]
 800f8b4:	7a1b      	ldrb	r3, [r3, #8]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d009      	beq.n	800f8ce <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	7a1a      	ldrb	r2, [r3, #8]
 800f8be:	4b63      	ldr	r3, [pc, #396]	; (800fa4c <tcp_input+0x528>)
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d122      	bne.n	800f914 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8ce:	69fb      	ldr	r3, [r7, #28]
 800f8d0:	8b1a      	ldrh	r2, [r3, #24]
 800f8d2:	4b5d      	ldr	r3, [pc, #372]	; (800fa48 <tcp_input+0x524>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	881b      	ldrh	r3, [r3, #0]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d11b      	bne.n	800f916 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f8de:	69fb      	ldr	r3, [r7, #28]
 800f8e0:	8ada      	ldrh	r2, [r3, #22]
 800f8e2:	4b59      	ldr	r3, [pc, #356]	; (800fa48 <tcp_input+0x524>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	885b      	ldrh	r3, [r3, #2]
 800f8e8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d113      	bne.n	800f916 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	685a      	ldr	r2, [r3, #4]
 800f8f2:	4b56      	ldr	r3, [pc, #344]	; (800fa4c <tcp_input+0x528>)
 800f8f4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d10d      	bne.n	800f916 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	681a      	ldr	r2, [r3, #0]
 800f8fe:	4b53      	ldr	r3, [pc, #332]	; (800fa4c <tcp_input+0x528>)
 800f900:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f902:	429a      	cmp	r2, r3
 800f904:	d107      	bne.n	800f916 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f906:	69f8      	ldr	r0, [r7, #28]
 800f908:	f000 fb52 	bl	800ffb0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7fd fb37 	bl	800cf80 <pbuf_free>
        return;
 800f912:	e1ee      	b.n	800fcf2 <tcp_input+0x7ce>
        continue;
 800f914:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f916:	69fb      	ldr	r3, [r7, #28]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	61fb      	str	r3, [r7, #28]
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1bc      	bne.n	800f89c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f922:	2300      	movs	r3, #0
 800f924:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f926:	4b51      	ldr	r3, [pc, #324]	; (800fa6c <tcp_input+0x548>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	617b      	str	r3, [r7, #20]
 800f92c:	e02a      	b.n	800f984 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	7a1b      	ldrb	r3, [r3, #8]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00c      	beq.n	800f950 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	7a1a      	ldrb	r2, [r3, #8]
 800f93a:	4b44      	ldr	r3, [pc, #272]	; (800fa4c <tcp_input+0x528>)
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f942:	3301      	adds	r3, #1
 800f944:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f946:	429a      	cmp	r2, r3
 800f948:	d002      	beq.n	800f950 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	61bb      	str	r3, [r7, #24]
        continue;
 800f94e:	e016      	b.n	800f97e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	8ada      	ldrh	r2, [r3, #22]
 800f954:	4b3c      	ldr	r3, [pc, #240]	; (800fa48 <tcp_input+0x524>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	885b      	ldrh	r3, [r3, #2]
 800f95a:	b29b      	uxth	r3, r3
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d10c      	bne.n	800f97a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	4b39      	ldr	r3, [pc, #228]	; (800fa4c <tcp_input+0x528>)
 800f966:	695b      	ldr	r3, [r3, #20]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d00f      	beq.n	800f98c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00d      	beq.n	800f98e <tcp_input+0x46a>
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d009      	beq.n	800f98e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f97a:	697b      	ldr	r3, [r7, #20]
 800f97c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	68db      	ldr	r3, [r3, #12]
 800f982:	617b      	str	r3, [r7, #20]
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1d1      	bne.n	800f92e <tcp_input+0x40a>
 800f98a:	e000      	b.n	800f98e <tcp_input+0x46a>
            break;
 800f98c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d014      	beq.n	800f9be <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d00a      	beq.n	800f9b0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	68da      	ldr	r2, [r3, #12]
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f9a2:	4b32      	ldr	r3, [pc, #200]	; (800fa6c <tcp_input+0x548>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9aa:	4a30      	ldr	r2, [pc, #192]	; (800fa6c <tcp_input+0x548>)
 800f9ac:	697b      	ldr	r3, [r7, #20]
 800f9ae:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9b0:	6978      	ldr	r0, [r7, #20]
 800f9b2:	f000 f9ff 	bl	800fdb4 <tcp_listen_input>
      }
      pbuf_free(p);
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	f7fd fae2 	bl	800cf80 <pbuf_free>
      return;
 800f9bc:	e199      	b.n	800fcf2 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	f000 8160 	beq.w	800fc86 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f9c6:	4b2a      	ldr	r3, [pc, #168]	; (800fa70 <tcp_input+0x54c>)
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	891a      	ldrh	r2, [r3, #8]
 800f9d0:	4b27      	ldr	r3, [pc, #156]	; (800fa70 <tcp_input+0x54c>)
 800f9d2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f9d4:	4a26      	ldr	r2, [pc, #152]	; (800fa70 <tcp_input+0x54c>)
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f9da:	4b1b      	ldr	r3, [pc, #108]	; (800fa48 <tcp_input+0x524>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a24      	ldr	r2, [pc, #144]	; (800fa70 <tcp_input+0x54c>)
 800f9e0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f9e2:	4b24      	ldr	r3, [pc, #144]	; (800fa74 <tcp_input+0x550>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f9e8:	4b23      	ldr	r3, [pc, #140]	; (800fa78 <tcp_input+0x554>)
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f9ee:	4b23      	ldr	r3, [pc, #140]	; (800fa7c <tcp_input+0x558>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f9f4:	4b22      	ldr	r3, [pc, #136]	; (800fa80 <tcp_input+0x55c>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 0308 	and.w	r3, r3, #8
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d006      	beq.n	800fa0e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	7b5b      	ldrb	r3, [r3, #13]
 800fa04:	f043 0301 	orr.w	r3, r3, #1
 800fa08:	b2da      	uxtb	r2, r3
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d038      	beq.n	800fa88 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa16:	69f8      	ldr	r0, [r7, #28]
 800fa18:	f7ff f872 	bl	800eb00 <tcp_process_refused_data>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	f113 0f0d 	cmn.w	r3, #13
 800fa22:	d007      	beq.n	800fa34 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d02d      	beq.n	800fa88 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa2c:	4b15      	ldr	r3, [pc, #84]	; (800fa84 <tcp_input+0x560>)
 800fa2e:	881b      	ldrh	r3, [r3, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d029      	beq.n	800fa88 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	f040 8104 	bne.w	800fc46 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa3e:	69f8      	ldr	r0, [r7, #28]
 800fa40:	f003 fe28 	bl	8013694 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa44:	e0ff      	b.n	800fc46 <tcp_input+0x722>
 800fa46:	bf00      	nop
 800fa48:	200214ac 	.word	0x200214ac
 800fa4c:	20024804 	.word	0x20024804
 800fa50:	0801fe64 	.word	0x0801fe64
 800fa54:	0801ff90 	.word	0x0801ff90
 800fa58:	0801feb0 	.word	0x0801feb0
 800fa5c:	20028090 	.word	0x20028090
 800fa60:	0801ffbc 	.word	0x0801ffbc
 800fa64:	200280a0 	.word	0x200280a0
 800fa68:	0801ffe8 	.word	0x0801ffe8
 800fa6c:	20028098 	.word	0x20028098
 800fa70:	2002149c 	.word	0x2002149c
 800fa74:	200214cc 	.word	0x200214cc
 800fa78:	200214c9 	.word	0x200214c9
 800fa7c:	200214c4 	.word	0x200214c4
 800fa80:	200214c8 	.word	0x200214c8
 800fa84:	200214c6 	.word	0x200214c6
      }
    }
    tcp_input_pcb = pcb;
 800fa88:	4a9b      	ldr	r2, [pc, #620]	; (800fcf8 <tcp_input+0x7d4>)
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa8e:	69f8      	ldr	r0, [r7, #28]
 800fa90:	f000 fb0a 	bl	80100a8 <tcp_process>
 800fa94:	4603      	mov	r3, r0
 800fa96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa9c:	f113 0f0d 	cmn.w	r3, #13
 800faa0:	f000 80d3 	beq.w	800fc4a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800faa4:	4b95      	ldr	r3, [pc, #596]	; (800fcfc <tcp_input+0x7d8>)
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	f003 0308 	and.w	r3, r3, #8
 800faac:	2b00      	cmp	r3, #0
 800faae:	d015      	beq.n	800fadc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d008      	beq.n	800facc <tcp_input+0x5a8>
 800faba:	69fb      	ldr	r3, [r7, #28]
 800fabc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fac0:	69fa      	ldr	r2, [r7, #28]
 800fac2:	6912      	ldr	r2, [r2, #16]
 800fac4:	f06f 010d 	mvn.w	r1, #13
 800fac8:	4610      	mov	r0, r2
 800faca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800facc:	69f9      	ldr	r1, [r7, #28]
 800face:	488c      	ldr	r0, [pc, #560]	; (800fd00 <tcp_input+0x7dc>)
 800fad0:	f7ff fbb0 	bl	800f234 <tcp_pcb_remove>
        tcp_free(pcb);
 800fad4:	69f8      	ldr	r0, [r7, #28]
 800fad6:	f7fd fe8b 	bl	800d7f0 <tcp_free>
 800fada:	e0c1      	b.n	800fc60 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800fadc:	2300      	movs	r3, #0
 800fade:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fae0:	4b88      	ldr	r3, [pc, #544]	; (800fd04 <tcp_input+0x7e0>)
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d01d      	beq.n	800fb24 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fae8:	4b86      	ldr	r3, [pc, #536]	; (800fd04 <tcp_input+0x7e0>)
 800faea:	881b      	ldrh	r3, [r3, #0]
 800faec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00a      	beq.n	800fb0e <tcp_input+0x5ea>
 800faf8:	69fb      	ldr	r3, [r7, #28]
 800fafa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fafe:	69fa      	ldr	r2, [r7, #28]
 800fb00:	6910      	ldr	r0, [r2, #16]
 800fb02:	89fa      	ldrh	r2, [r7, #14]
 800fb04:	69f9      	ldr	r1, [r7, #28]
 800fb06:	4798      	blx	r3
 800fb08:	4603      	mov	r3, r0
 800fb0a:	74fb      	strb	r3, [r7, #19]
 800fb0c:	e001      	b.n	800fb12 <tcp_input+0x5ee>
 800fb0e:	2300      	movs	r3, #0
 800fb10:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb16:	f113 0f0d 	cmn.w	r3, #13
 800fb1a:	f000 8098 	beq.w	800fc4e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb1e:	4b79      	ldr	r3, [pc, #484]	; (800fd04 <tcp_input+0x7e0>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb24:	69f8      	ldr	r0, [r7, #28]
 800fb26:	f000 f905 	bl	800fd34 <tcp_input_delayed_close>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	f040 8090 	bne.w	800fc52 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb32:	4b75      	ldr	r3, [pc, #468]	; (800fd08 <tcp_input+0x7e4>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d041      	beq.n	800fbbe <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d006      	beq.n	800fb50 <tcp_input+0x62c>
 800fb42:	4b72      	ldr	r3, [pc, #456]	; (800fd0c <tcp_input+0x7e8>)
 800fb44:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb48:	4971      	ldr	r1, [pc, #452]	; (800fd10 <tcp_input+0x7ec>)
 800fb4a:	4872      	ldr	r0, [pc, #456]	; (800fd14 <tcp_input+0x7f0>)
 800fb4c:	f00a f9e6 	bl	8019f1c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	8b5b      	ldrh	r3, [r3, #26]
 800fb54:	f003 0310 	and.w	r3, r3, #16
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d008      	beq.n	800fb6e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb5c:	4b6a      	ldr	r3, [pc, #424]	; (800fd08 <tcp_input+0x7e4>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fd fa0d 	bl	800cf80 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb66:	69f8      	ldr	r0, [r7, #28]
 800fb68:	f7fe f97c 	bl	800de64 <tcp_abort>
            goto aborted;
 800fb6c:	e078      	b.n	800fc60 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00c      	beq.n	800fb92 <tcp_input+0x66e>
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	6918      	ldr	r0, [r3, #16]
 800fb82:	4b61      	ldr	r3, [pc, #388]	; (800fd08 <tcp_input+0x7e4>)
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	2300      	movs	r3, #0
 800fb88:	69f9      	ldr	r1, [r7, #28]
 800fb8a:	47a0      	blx	r4
 800fb8c:	4603      	mov	r3, r0
 800fb8e:	74fb      	strb	r3, [r7, #19]
 800fb90:	e008      	b.n	800fba4 <tcp_input+0x680>
 800fb92:	4b5d      	ldr	r3, [pc, #372]	; (800fd08 <tcp_input+0x7e4>)
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	2300      	movs	r3, #0
 800fb98:	69f9      	ldr	r1, [r7, #28]
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	f7ff f884 	bl	800eca8 <tcp_recv_null>
 800fba0:	4603      	mov	r3, r0
 800fba2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fba8:	f113 0f0d 	cmn.w	r3, #13
 800fbac:	d053      	beq.n	800fc56 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fbae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d003      	beq.n	800fbbe <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fbb6:	4b54      	ldr	r3, [pc, #336]	; (800fd08 <tcp_input+0x7e4>)
 800fbb8:	681a      	ldr	r2, [r3, #0]
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fbbe:	4b4f      	ldr	r3, [pc, #316]	; (800fcfc <tcp_input+0x7d8>)
 800fbc0:	781b      	ldrb	r3, [r3, #0]
 800fbc2:	f003 0320 	and.w	r3, r3, #32
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d030      	beq.n	800fc2c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d009      	beq.n	800fbe6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbd6:	7b5a      	ldrb	r2, [r3, #13]
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbdc:	f042 0220 	orr.w	r2, r2, #32
 800fbe0:	b2d2      	uxtb	r2, r2
 800fbe2:	735a      	strb	r2, [r3, #13]
 800fbe4:	e022      	b.n	800fc2c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbea:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbee:	d005      	beq.n	800fbfc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbfc:	69fb      	ldr	r3, [r7, #28]
 800fbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d00b      	beq.n	800fc1e <tcp_input+0x6fa>
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	6918      	ldr	r0, [r3, #16]
 800fc10:	2300      	movs	r3, #0
 800fc12:	2200      	movs	r2, #0
 800fc14:	69f9      	ldr	r1, [r7, #28]
 800fc16:	47a0      	blx	r4
 800fc18:	4603      	mov	r3, r0
 800fc1a:	74fb      	strb	r3, [r7, #19]
 800fc1c:	e001      	b.n	800fc22 <tcp_input+0x6fe>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fc22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc26:	f113 0f0d 	cmn.w	r3, #13
 800fc2a:	d016      	beq.n	800fc5a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc2c:	4b32      	ldr	r3, [pc, #200]	; (800fcf8 <tcp_input+0x7d4>)
 800fc2e:	2200      	movs	r2, #0
 800fc30:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc32:	69f8      	ldr	r0, [r7, #28]
 800fc34:	f000 f87e 	bl	800fd34 <tcp_input_delayed_close>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10f      	bne.n	800fc5e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc3e:	69f8      	ldr	r0, [r7, #28]
 800fc40:	f002 ff10 	bl	8012a64 <tcp_output>
 800fc44:	e00c      	b.n	800fc60 <tcp_input+0x73c>
        goto aborted;
 800fc46:	bf00      	nop
 800fc48:	e00a      	b.n	800fc60 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc4a:	bf00      	nop
 800fc4c:	e008      	b.n	800fc60 <tcp_input+0x73c>
              goto aborted;
 800fc4e:	bf00      	nop
 800fc50:	e006      	b.n	800fc60 <tcp_input+0x73c>
          goto aborted;
 800fc52:	bf00      	nop
 800fc54:	e004      	b.n	800fc60 <tcp_input+0x73c>
            goto aborted;
 800fc56:	bf00      	nop
 800fc58:	e002      	b.n	800fc60 <tcp_input+0x73c>
              goto aborted;
 800fc5a:	bf00      	nop
 800fc5c:	e000      	b.n	800fc60 <tcp_input+0x73c>
          goto aborted;
 800fc5e:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc60:	4b25      	ldr	r3, [pc, #148]	; (800fcf8 <tcp_input+0x7d4>)
 800fc62:	2200      	movs	r2, #0
 800fc64:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc66:	4b28      	ldr	r3, [pc, #160]	; (800fd08 <tcp_input+0x7e4>)
 800fc68:	2200      	movs	r2, #0
 800fc6a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fc6c:	4b2a      	ldr	r3, [pc, #168]	; (800fd18 <tcp_input+0x7f4>)
 800fc6e:	685b      	ldr	r3, [r3, #4]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d03d      	beq.n	800fcf0 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800fc74:	4b28      	ldr	r3, [pc, #160]	; (800fd18 <tcp_input+0x7f4>)
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7fd f981 	bl	800cf80 <pbuf_free>
      inseg.p = NULL;
 800fc7e:	4b26      	ldr	r3, [pc, #152]	; (800fd18 <tcp_input+0x7f4>)
 800fc80:	2200      	movs	r2, #0
 800fc82:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc84:	e034      	b.n	800fcf0 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fc86:	4b25      	ldr	r3, [pc, #148]	; (800fd1c <tcp_input+0x7f8>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	899b      	ldrh	r3, [r3, #12]
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fa fdee 	bl	800a870 <lwip_htons>
 800fc94:	4603      	mov	r3, r0
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	f003 0304 	and.w	r3, r3, #4
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d118      	bne.n	800fcd2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fca0:	4b1f      	ldr	r3, [pc, #124]	; (800fd20 <tcp_input+0x7fc>)
 800fca2:	6819      	ldr	r1, [r3, #0]
 800fca4:	4b1f      	ldr	r3, [pc, #124]	; (800fd24 <tcp_input+0x800>)
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	461a      	mov	r2, r3
 800fcaa:	4b1f      	ldr	r3, [pc, #124]	; (800fd28 <tcp_input+0x804>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb0:	4b1a      	ldr	r3, [pc, #104]	; (800fd1c <tcp_input+0x7f8>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb4:	885b      	ldrh	r3, [r3, #2]
 800fcb6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb8:	4a18      	ldr	r2, [pc, #96]	; (800fd1c <tcp_input+0x7f8>)
 800fcba:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcbc:	8812      	ldrh	r2, [r2, #0]
 800fcbe:	b292      	uxth	r2, r2
 800fcc0:	9202      	str	r2, [sp, #8]
 800fcc2:	9301      	str	r3, [sp, #4]
 800fcc4:	4b19      	ldr	r3, [pc, #100]	; (800fd2c <tcp_input+0x808>)
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	4b19      	ldr	r3, [pc, #100]	; (800fd30 <tcp_input+0x80c>)
 800fcca:	4602      	mov	r2, r0
 800fccc:	2000      	movs	r0, #0
 800fcce:	f003 fc8f 	bl	80135f0 <tcp_rst>
    pbuf_free(p);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f7fd f954 	bl	800cf80 <pbuf_free>
  return;
 800fcd8:	e00a      	b.n	800fcf0 <tcp_input+0x7cc>
    goto dropped;
 800fcda:	bf00      	nop
 800fcdc:	e004      	b.n	800fce8 <tcp_input+0x7c4>
dropped:
 800fcde:	bf00      	nop
 800fce0:	e002      	b.n	800fce8 <tcp_input+0x7c4>
      goto dropped;
 800fce2:	bf00      	nop
 800fce4:	e000      	b.n	800fce8 <tcp_input+0x7c4>
      goto dropped;
 800fce6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7fd f949 	bl	800cf80 <pbuf_free>
 800fcee:	e000      	b.n	800fcf2 <tcp_input+0x7ce>
  return;
 800fcf0:	bf00      	nop
}
 800fcf2:	3724      	adds	r7, #36	; 0x24
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd90      	pop	{r4, r7, pc}
 800fcf8:	200280a4 	.word	0x200280a4
 800fcfc:	200214c9 	.word	0x200214c9
 800fd00:	20028090 	.word	0x20028090
 800fd04:	200214c4 	.word	0x200214c4
 800fd08:	200214cc 	.word	0x200214cc
 800fd0c:	0801fe64 	.word	0x0801fe64
 800fd10:	08020018 	.word	0x08020018
 800fd14:	0801feb0 	.word	0x0801feb0
 800fd18:	2002149c 	.word	0x2002149c
 800fd1c:	200214ac 	.word	0x200214ac
 800fd20:	200214c0 	.word	0x200214c0
 800fd24:	200214c6 	.word	0x200214c6
 800fd28:	200214bc 	.word	0x200214bc
 800fd2c:	20024814 	.word	0x20024814
 800fd30:	20024818 	.word	0x20024818

0800fd34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d106      	bne.n	800fd50 <tcp_input_delayed_close+0x1c>
 800fd42:	4b17      	ldr	r3, [pc, #92]	; (800fda0 <tcp_input_delayed_close+0x6c>)
 800fd44:	f240 225a 	movw	r2, #602	; 0x25a
 800fd48:	4916      	ldr	r1, [pc, #88]	; (800fda4 <tcp_input_delayed_close+0x70>)
 800fd4a:	4817      	ldr	r0, [pc, #92]	; (800fda8 <tcp_input_delayed_close+0x74>)
 800fd4c:	f00a f8e6 	bl	8019f1c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd50:	4b16      	ldr	r3, [pc, #88]	; (800fdac <tcp_input_delayed_close+0x78>)
 800fd52:	781b      	ldrb	r3, [r3, #0]
 800fd54:	f003 0310 	and.w	r3, r3, #16
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d01c      	beq.n	800fd96 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	8b5b      	ldrh	r3, [r3, #26]
 800fd60:	f003 0310 	and.w	r3, r3, #16
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d10d      	bne.n	800fd84 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d008      	beq.n	800fd84 <tcp_input_delayed_close+0x50>
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd78:	687a      	ldr	r2, [r7, #4]
 800fd7a:	6912      	ldr	r2, [r2, #16]
 800fd7c:	f06f 010e 	mvn.w	r1, #14
 800fd80:	4610      	mov	r0, r2
 800fd82:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd84:	6879      	ldr	r1, [r7, #4]
 800fd86:	480a      	ldr	r0, [pc, #40]	; (800fdb0 <tcp_input_delayed_close+0x7c>)
 800fd88:	f7ff fa54 	bl	800f234 <tcp_pcb_remove>
    tcp_free(pcb);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f7fd fd2f 	bl	800d7f0 <tcp_free>
    return 1;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fd96:	2300      	movs	r3, #0
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	0801fe64 	.word	0x0801fe64
 800fda4:	08020034 	.word	0x08020034
 800fda8:	0801feb0 	.word	0x0801feb0
 800fdac:	200214c9 	.word	0x200214c9
 800fdb0:	20028090 	.word	0x20028090

0800fdb4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fdb4:	b590      	push	{r4, r7, lr}
 800fdb6:	b08b      	sub	sp, #44	; 0x2c
 800fdb8:	af04      	add	r7, sp, #16
 800fdba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fdbc:	4b6f      	ldr	r3, [pc, #444]	; (800ff7c <tcp_listen_input+0x1c8>)
 800fdbe:	781b      	ldrb	r3, [r3, #0]
 800fdc0:	f003 0304 	and.w	r3, r3, #4
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	f040 80d3 	bne.w	800ff70 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d106      	bne.n	800fdde <tcp_listen_input+0x2a>
 800fdd0:	4b6b      	ldr	r3, [pc, #428]	; (800ff80 <tcp_listen_input+0x1cc>)
 800fdd2:	f240 2281 	movw	r2, #641	; 0x281
 800fdd6:	496b      	ldr	r1, [pc, #428]	; (800ff84 <tcp_listen_input+0x1d0>)
 800fdd8:	486b      	ldr	r0, [pc, #428]	; (800ff88 <tcp_listen_input+0x1d4>)
 800fdda:	f00a f89f 	bl	8019f1c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fdde:	4b67      	ldr	r3, [pc, #412]	; (800ff7c <tcp_listen_input+0x1c8>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	f003 0310 	and.w	r3, r3, #16
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d019      	beq.n	800fe1e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdea:	4b68      	ldr	r3, [pc, #416]	; (800ff8c <tcp_listen_input+0x1d8>)
 800fdec:	6819      	ldr	r1, [r3, #0]
 800fdee:	4b68      	ldr	r3, [pc, #416]	; (800ff90 <tcp_listen_input+0x1dc>)
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	4b67      	ldr	r3, [pc, #412]	; (800ff94 <tcp_listen_input+0x1e0>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdfa:	4b67      	ldr	r3, [pc, #412]	; (800ff98 <tcp_listen_input+0x1e4>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdfe:	885b      	ldrh	r3, [r3, #2]
 800fe00:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe02:	4a65      	ldr	r2, [pc, #404]	; (800ff98 <tcp_listen_input+0x1e4>)
 800fe04:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe06:	8812      	ldrh	r2, [r2, #0]
 800fe08:	b292      	uxth	r2, r2
 800fe0a:	9202      	str	r2, [sp, #8]
 800fe0c:	9301      	str	r3, [sp, #4]
 800fe0e:	4b63      	ldr	r3, [pc, #396]	; (800ff9c <tcp_listen_input+0x1e8>)
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	4b63      	ldr	r3, [pc, #396]	; (800ffa0 <tcp_listen_input+0x1ec>)
 800fe14:	4602      	mov	r2, r0
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	f003 fbea 	bl	80135f0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe1c:	e0aa      	b.n	800ff74 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800fe1e:	4b57      	ldr	r3, [pc, #348]	; (800ff7c <tcp_listen_input+0x1c8>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	f003 0302 	and.w	r3, r3, #2
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f000 80a4 	beq.w	800ff74 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	7d5b      	ldrb	r3, [r3, #21]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7ff f85d 	bl	800eef0 <tcp_alloc>
 800fe36:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d111      	bne.n	800fe62 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	699b      	ldr	r3, [r3, #24]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d00a      	beq.n	800fe5c <tcp_listen_input+0xa8>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	687a      	ldr	r2, [r7, #4]
 800fe4c:	6910      	ldr	r0, [r2, #16]
 800fe4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe52:	2100      	movs	r1, #0
 800fe54:	4798      	blx	r3
 800fe56:	4603      	mov	r3, r0
 800fe58:	73bb      	strb	r3, [r7, #14]
      return;
 800fe5a:	e08c      	b.n	800ff76 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe5c:	23f0      	movs	r3, #240	; 0xf0
 800fe5e:	73bb      	strb	r3, [r7, #14]
      return;
 800fe60:	e089      	b.n	800ff76 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe62:	4b50      	ldr	r3, [pc, #320]	; (800ffa4 <tcp_listen_input+0x1f0>)
 800fe64:	695a      	ldr	r2, [r3, #20]
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe6a:	4b4e      	ldr	r3, [pc, #312]	; (800ffa4 <tcp_listen_input+0x1f0>)
 800fe6c:	691a      	ldr	r2, [r3, #16]
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	8ada      	ldrh	r2, [r3, #22]
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe7a:	4b47      	ldr	r3, [pc, #284]	; (800ff98 <tcp_listen_input+0x1e4>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	2203      	movs	r2, #3
 800fe8a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe8c:	4b41      	ldr	r3, [pc, #260]	; (800ff94 <tcp_listen_input+0x1e0>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	1c5a      	adds	r2, r3, #1
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fe9e:	6978      	ldr	r0, [r7, #20]
 800fea0:	f7ff fa5c 	bl	800f35c <tcp_next_iss>
 800fea4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	693a      	ldr	r2, [r7, #16]
 800feaa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	693a      	ldr	r2, [r7, #16]
 800feb0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800feb2:	697b      	ldr	r3, [r7, #20]
 800feb4:	693a      	ldr	r2, [r7, #16]
 800feb6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	693a      	ldr	r2, [r7, #16]
 800febc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800febe:	4b35      	ldr	r3, [pc, #212]	; (800ff94 <tcp_listen_input+0x1e0>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	1e5a      	subs	r2, r3, #1
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	691a      	ldr	r2, [r3, #16]
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	7a5b      	ldrb	r3, [r3, #9]
 800feda:	f003 030c 	and.w	r3, r3, #12
 800fede:	b2da      	uxtb	r2, r3
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	7a1a      	ldrb	r2, [r3, #8]
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800feec:	4b2e      	ldr	r3, [pc, #184]	; (800ffa8 <tcp_listen_input+0x1f4>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	60da      	str	r2, [r3, #12]
 800fef4:	4a2c      	ldr	r2, [pc, #176]	; (800ffa8 <tcp_listen_input+0x1f4>)
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	6013      	str	r3, [r2, #0]
 800fefa:	f003 fd3b 	bl	8013974 <tcp_timer_needed>
 800fefe:	4b2b      	ldr	r3, [pc, #172]	; (800ffac <tcp_listen_input+0x1f8>)
 800ff00:	2201      	movs	r2, #1
 800ff02:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff04:	6978      	ldr	r0, [r7, #20]
 800ff06:	f001 fd8f 	bl	8011a28 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff0a:	4b23      	ldr	r3, [pc, #140]	; (800ff98 <tcp_listen_input+0x1e4>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	89db      	ldrh	r3, [r3, #14]
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	3304      	adds	r3, #4
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	f007 fb8f 	bl	8017650 <ip4_route>
 800ff32:	4601      	mov	r1, r0
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	3304      	adds	r3, #4
 800ff38:	461a      	mov	r2, r3
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	f7ff fa34 	bl	800f3a8 <tcp_eff_send_mss_netif>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff48:	2112      	movs	r1, #18
 800ff4a:	6978      	ldr	r0, [r7, #20]
 800ff4c:	f002 fc9c 	bl	8012888 <tcp_enqueue_flags>
 800ff50:	4603      	mov	r3, r0
 800ff52:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d004      	beq.n	800ff66 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff5c:	2100      	movs	r1, #0
 800ff5e:	6978      	ldr	r0, [r7, #20]
 800ff60:	f7fd fec2 	bl	800dce8 <tcp_abandon>
      return;
 800ff64:	e007      	b.n	800ff76 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800ff66:	6978      	ldr	r0, [r7, #20]
 800ff68:	f002 fd7c 	bl	8012a64 <tcp_output>
  return;
 800ff6c:	bf00      	nop
 800ff6e:	e001      	b.n	800ff74 <tcp_listen_input+0x1c0>
    return;
 800ff70:	bf00      	nop
 800ff72:	e000      	b.n	800ff76 <tcp_listen_input+0x1c2>
  return;
 800ff74:	bf00      	nop
}
 800ff76:	371c      	adds	r7, #28
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd90      	pop	{r4, r7, pc}
 800ff7c:	200214c8 	.word	0x200214c8
 800ff80:	0801fe64 	.word	0x0801fe64
 800ff84:	0802005c 	.word	0x0802005c
 800ff88:	0801feb0 	.word	0x0801feb0
 800ff8c:	200214c0 	.word	0x200214c0
 800ff90:	200214c6 	.word	0x200214c6
 800ff94:	200214bc 	.word	0x200214bc
 800ff98:	200214ac 	.word	0x200214ac
 800ff9c:	20024814 	.word	0x20024814
 800ffa0:	20024818 	.word	0x20024818
 800ffa4:	20024804 	.word	0x20024804
 800ffa8:	20028090 	.word	0x20028090
 800ffac:	2002808c 	.word	0x2002808c

0800ffb0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	af04      	add	r7, sp, #16
 800ffb6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ffb8:	4b30      	ldr	r3, [pc, #192]	; (801007c <tcp_timewait_input+0xcc>)
 800ffba:	781b      	ldrb	r3, [r3, #0]
 800ffbc:	f003 0304 	and.w	r3, r3, #4
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d154      	bne.n	801006e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d106      	bne.n	800ffd8 <tcp_timewait_input+0x28>
 800ffca:	4b2d      	ldr	r3, [pc, #180]	; (8010080 <tcp_timewait_input+0xd0>)
 800ffcc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ffd0:	492c      	ldr	r1, [pc, #176]	; (8010084 <tcp_timewait_input+0xd4>)
 800ffd2:	482d      	ldr	r0, [pc, #180]	; (8010088 <tcp_timewait_input+0xd8>)
 800ffd4:	f009 ffa2 	bl	8019f1c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ffd8:	4b28      	ldr	r3, [pc, #160]	; (801007c <tcp_timewait_input+0xcc>)
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 0302 	and.w	r3, r3, #2
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d02a      	beq.n	801003a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ffe4:	4b29      	ldr	r3, [pc, #164]	; (801008c <tcp_timewait_input+0xdc>)
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	db2d      	blt.n	801004e <tcp_timewait_input+0x9e>
 800fff2:	4b26      	ldr	r3, [pc, #152]	; (801008c <tcp_timewait_input+0xdc>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fffa:	6879      	ldr	r1, [r7, #4]
 800fffc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fffe:	440b      	add	r3, r1
 8010000:	1ad3      	subs	r3, r2, r3
 8010002:	2b00      	cmp	r3, #0
 8010004:	dc23      	bgt.n	801004e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010006:	4b22      	ldr	r3, [pc, #136]	; (8010090 <tcp_timewait_input+0xe0>)
 8010008:	6819      	ldr	r1, [r3, #0]
 801000a:	4b22      	ldr	r3, [pc, #136]	; (8010094 <tcp_timewait_input+0xe4>)
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	461a      	mov	r2, r3
 8010010:	4b1e      	ldr	r3, [pc, #120]	; (801008c <tcp_timewait_input+0xdc>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010016:	4b20      	ldr	r3, [pc, #128]	; (8010098 <tcp_timewait_input+0xe8>)
 8010018:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001a:	885b      	ldrh	r3, [r3, #2]
 801001c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801001e:	4a1e      	ldr	r2, [pc, #120]	; (8010098 <tcp_timewait_input+0xe8>)
 8010020:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010022:	8812      	ldrh	r2, [r2, #0]
 8010024:	b292      	uxth	r2, r2
 8010026:	9202      	str	r2, [sp, #8]
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	4b1c      	ldr	r3, [pc, #112]	; (801009c <tcp_timewait_input+0xec>)
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	4b1c      	ldr	r3, [pc, #112]	; (80100a0 <tcp_timewait_input+0xf0>)
 8010030:	4602      	mov	r2, r0
 8010032:	6878      	ldr	r0, [r7, #4]
 8010034:	f003 fadc 	bl	80135f0 <tcp_rst>
      return;
 8010038:	e01c      	b.n	8010074 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 801003a:	4b10      	ldr	r3, [pc, #64]	; (801007c <tcp_timewait_input+0xcc>)
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	f003 0301 	and.w	r3, r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010046:	4b17      	ldr	r3, [pc, #92]	; (80100a4 <tcp_timewait_input+0xf4>)
 8010048:	681a      	ldr	r2, [r3, #0]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801004e:	4b11      	ldr	r3, [pc, #68]	; (8010094 <tcp_timewait_input+0xe4>)
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00d      	beq.n	8010072 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	8b5b      	ldrh	r3, [r3, #26]
 801005a:	f043 0302 	orr.w	r3, r3, #2
 801005e:	b29a      	uxth	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f002 fcfd 	bl	8012a64 <tcp_output>
  }
  return;
 801006a:	bf00      	nop
 801006c:	e001      	b.n	8010072 <tcp_timewait_input+0xc2>
    return;
 801006e:	bf00      	nop
 8010070:	e000      	b.n	8010074 <tcp_timewait_input+0xc4>
  return;
 8010072:	bf00      	nop
}
 8010074:	3708      	adds	r7, #8
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop
 801007c:	200214c8 	.word	0x200214c8
 8010080:	0801fe64 	.word	0x0801fe64
 8010084:	0802007c 	.word	0x0802007c
 8010088:	0801feb0 	.word	0x0801feb0
 801008c:	200214bc 	.word	0x200214bc
 8010090:	200214c0 	.word	0x200214c0
 8010094:	200214c6 	.word	0x200214c6
 8010098:	200214ac 	.word	0x200214ac
 801009c:	20024814 	.word	0x20024814
 80100a0:	20024818 	.word	0x20024818
 80100a4:	20028094 	.word	0x20028094

080100a8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100a8:	b590      	push	{r4, r7, lr}
 80100aa:	b08d      	sub	sp, #52	; 0x34
 80100ac:	af04      	add	r7, sp, #16
 80100ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100b0:	2300      	movs	r3, #0
 80100b2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d106      	bne.n	80100cc <tcp_process+0x24>
 80100be:	4ba5      	ldr	r3, [pc, #660]	; (8010354 <tcp_process+0x2ac>)
 80100c0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80100c4:	49a4      	ldr	r1, [pc, #656]	; (8010358 <tcp_process+0x2b0>)
 80100c6:	48a5      	ldr	r0, [pc, #660]	; (801035c <tcp_process+0x2b4>)
 80100c8:	f009 ff28 	bl	8019f1c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80100cc:	4ba4      	ldr	r3, [pc, #656]	; (8010360 <tcp_process+0x2b8>)
 80100ce:	781b      	ldrb	r3, [r3, #0]
 80100d0:	f003 0304 	and.w	r3, r3, #4
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d04e      	beq.n	8010176 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	7d1b      	ldrb	r3, [r3, #20]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d108      	bne.n	80100f2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100e4:	4b9f      	ldr	r3, [pc, #636]	; (8010364 <tcp_process+0x2bc>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	429a      	cmp	r2, r3
 80100ea:	d123      	bne.n	8010134 <tcp_process+0x8c>
        acceptable = 1;
 80100ec:	2301      	movs	r3, #1
 80100ee:	76fb      	strb	r3, [r7, #27]
 80100f0:	e020      	b.n	8010134 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100f6:	4b9c      	ldr	r3, [pc, #624]	; (8010368 <tcp_process+0x2c0>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d102      	bne.n	8010104 <tcp_process+0x5c>
        acceptable = 1;
 80100fe:	2301      	movs	r3, #1
 8010100:	76fb      	strb	r3, [r7, #27]
 8010102:	e017      	b.n	8010134 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010104:	4b98      	ldr	r3, [pc, #608]	; (8010368 <tcp_process+0x2c0>)
 8010106:	681a      	ldr	r2, [r3, #0]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010c:	1ad3      	subs	r3, r2, r3
 801010e:	2b00      	cmp	r3, #0
 8010110:	db10      	blt.n	8010134 <tcp_process+0x8c>
 8010112:	4b95      	ldr	r3, [pc, #596]	; (8010368 <tcp_process+0x2c0>)
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011a:	6879      	ldr	r1, [r7, #4]
 801011c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801011e:	440b      	add	r3, r1
 8010120:	1ad3      	subs	r3, r2, r3
 8010122:	2b00      	cmp	r3, #0
 8010124:	dc06      	bgt.n	8010134 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	8b5b      	ldrh	r3, [r3, #26]
 801012a:	f043 0302 	orr.w	r3, r3, #2
 801012e:	b29a      	uxth	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010134:	7efb      	ldrb	r3, [r7, #27]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d01b      	beq.n	8010172 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	7d1b      	ldrb	r3, [r3, #20]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <tcp_process+0xa8>
 8010142:	4b84      	ldr	r3, [pc, #528]	; (8010354 <tcp_process+0x2ac>)
 8010144:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010148:	4988      	ldr	r1, [pc, #544]	; (801036c <tcp_process+0x2c4>)
 801014a:	4884      	ldr	r0, [pc, #528]	; (801035c <tcp_process+0x2b4>)
 801014c:	f009 fee6 	bl	8019f1c <iprintf>
      recv_flags |= TF_RESET;
 8010150:	4b87      	ldr	r3, [pc, #540]	; (8010370 <tcp_process+0x2c8>)
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	f043 0308 	orr.w	r3, r3, #8
 8010158:	b2da      	uxtb	r2, r3
 801015a:	4b85      	ldr	r3, [pc, #532]	; (8010370 <tcp_process+0x2c8>)
 801015c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	8b5b      	ldrh	r3, [r3, #26]
 8010162:	f023 0301 	bic.w	r3, r3, #1
 8010166:	b29a      	uxth	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801016c:	f06f 030d 	mvn.w	r3, #13
 8010170:	e37a      	b.n	8010868 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010172:	2300      	movs	r3, #0
 8010174:	e378      	b.n	8010868 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010176:	4b7a      	ldr	r3, [pc, #488]	; (8010360 <tcp_process+0x2b8>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	f003 0302 	and.w	r3, r3, #2
 801017e:	2b00      	cmp	r3, #0
 8010180:	d010      	beq.n	80101a4 <tcp_process+0xfc>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	7d1b      	ldrb	r3, [r3, #20]
 8010186:	2b02      	cmp	r3, #2
 8010188:	d00c      	beq.n	80101a4 <tcp_process+0xfc>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	7d1b      	ldrb	r3, [r3, #20]
 801018e:	2b03      	cmp	r3, #3
 8010190:	d008      	beq.n	80101a4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	8b5b      	ldrh	r3, [r3, #26]
 8010196:	f043 0302 	orr.w	r3, r3, #2
 801019a:	b29a      	uxth	r2, r3
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80101a0:	2300      	movs	r3, #0
 80101a2:	e361      	b.n	8010868 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	8b5b      	ldrh	r3, [r3, #26]
 80101a8:	f003 0310 	and.w	r3, r3, #16
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d103      	bne.n	80101b8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101b0:	4b70      	ldr	r3, [pc, #448]	; (8010374 <tcp_process+0x2cc>)
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f001 fc2d 	bl	8011a28 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	7d1b      	ldrb	r3, [r3, #20]
 80101d2:	3b02      	subs	r3, #2
 80101d4:	2b07      	cmp	r3, #7
 80101d6:	f200 8337 	bhi.w	8010848 <tcp_process+0x7a0>
 80101da:	a201      	add	r2, pc, #4	; (adr r2, 80101e0 <tcp_process+0x138>)
 80101dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e0:	08010201 	.word	0x08010201
 80101e4:	08010431 	.word	0x08010431
 80101e8:	080105a9 	.word	0x080105a9
 80101ec:	080105d3 	.word	0x080105d3
 80101f0:	080106f7 	.word	0x080106f7
 80101f4:	080105a9 	.word	0x080105a9
 80101f8:	08010783 	.word	0x08010783
 80101fc:	08010813 	.word	0x08010813
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010200:	4b57      	ldr	r3, [pc, #348]	; (8010360 <tcp_process+0x2b8>)
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	f003 0310 	and.w	r3, r3, #16
 8010208:	2b00      	cmp	r3, #0
 801020a:	f000 80e4 	beq.w	80103d6 <tcp_process+0x32e>
 801020e:	4b54      	ldr	r3, [pc, #336]	; (8010360 <tcp_process+0x2b8>)
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	f003 0302 	and.w	r3, r3, #2
 8010216:	2b00      	cmp	r3, #0
 8010218:	f000 80dd 	beq.w	80103d6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010220:	1c5a      	adds	r2, r3, #1
 8010222:	4b50      	ldr	r3, [pc, #320]	; (8010364 <tcp_process+0x2bc>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	429a      	cmp	r2, r3
 8010228:	f040 80d5 	bne.w	80103d6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801022c:	4b4e      	ldr	r3, [pc, #312]	; (8010368 <tcp_process+0x2c0>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	1c5a      	adds	r2, r3, #1
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801023e:	4b49      	ldr	r3, [pc, #292]	; (8010364 <tcp_process+0x2bc>)
 8010240:	681a      	ldr	r2, [r3, #0]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010246:	4b4c      	ldr	r3, [pc, #304]	; (8010378 <tcp_process+0x2d0>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	89db      	ldrh	r3, [r3, #14]
 801024c:	b29a      	uxth	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010260:	4b41      	ldr	r3, [pc, #260]	; (8010368 <tcp_process+0x2c0>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	1e5a      	subs	r2, r3, #1
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2204      	movs	r2, #4
 801026e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3304      	adds	r3, #4
 8010278:	4618      	mov	r0, r3
 801027a:	f007 f9e9 	bl	8017650 <ip4_route>
 801027e:	4601      	mov	r1, r0
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	3304      	adds	r3, #4
 8010284:	461a      	mov	r2, r3
 8010286:	4620      	mov	r0, r4
 8010288:	f7ff f88e 	bl	800f3a8 <tcp_eff_send_mss_netif>
 801028c:	4603      	mov	r3, r0
 801028e:	461a      	mov	r2, r3
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010298:	009a      	lsls	r2, r3, #2
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801029e:	005b      	lsls	r3, r3, #1
 80102a0:	f241 111c 	movw	r1, #4380	; 0x111c
 80102a4:	428b      	cmp	r3, r1
 80102a6:	bf38      	it	cc
 80102a8:	460b      	movcc	r3, r1
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d204      	bcs.n	80102b8 <tcp_process+0x210>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	b29b      	uxth	r3, r3
 80102b6:	e00d      	b.n	80102d4 <tcp_process+0x22c>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102bc:	005b      	lsls	r3, r3, #1
 80102be:	f241 121c 	movw	r2, #4380	; 0x111c
 80102c2:	4293      	cmp	r3, r2
 80102c4:	d904      	bls.n	80102d0 <tcp_process+0x228>
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102ca:	005b      	lsls	r3, r3, #1
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	e001      	b.n	80102d4 <tcp_process+0x22c>
 80102d0:	f241 131c 	movw	r3, #4380	; 0x111c
 80102d4:	687a      	ldr	r2, [r7, #4]
 80102d6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d106      	bne.n	80102f2 <tcp_process+0x24a>
 80102e4:	4b1b      	ldr	r3, [pc, #108]	; (8010354 <tcp_process+0x2ac>)
 80102e6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80102ea:	4924      	ldr	r1, [pc, #144]	; (801037c <tcp_process+0x2d4>)
 80102ec:	481b      	ldr	r0, [pc, #108]	; (801035c <tcp_process+0x2b4>)
 80102ee:	f009 fe15 	bl	8019f1c <iprintf>
        --pcb->snd_queuelen;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102f8:	3b01      	subs	r3, #1
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010306:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d111      	bne.n	8010332 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010312:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <tcp_process+0x280>
 801031a:	4b0e      	ldr	r3, [pc, #56]	; (8010354 <tcp_process+0x2ac>)
 801031c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010320:	4917      	ldr	r1, [pc, #92]	; (8010380 <tcp_process+0x2d8>)
 8010322:	480e      	ldr	r0, [pc, #56]	; (801035c <tcp_process+0x2b4>)
 8010324:	f009 fdfa 	bl	8019f1c <iprintf>
          pcb->unsent = rseg->next;
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	681a      	ldr	r2, [r3, #0]
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	66da      	str	r2, [r3, #108]	; 0x6c
 8010330:	e003      	b.n	801033a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801033a:	69f8      	ldr	r0, [r7, #28]
 801033c:	f7fe fc70 	bl	800ec20 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010344:	2b00      	cmp	r3, #0
 8010346:	d11d      	bne.n	8010384 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801034e:	861a      	strh	r2, [r3, #48]	; 0x30
 8010350:	e01f      	b.n	8010392 <tcp_process+0x2ea>
 8010352:	bf00      	nop
 8010354:	0801fe64 	.word	0x0801fe64
 8010358:	0802009c 	.word	0x0802009c
 801035c:	0801feb0 	.word	0x0801feb0
 8010360:	200214c8 	.word	0x200214c8
 8010364:	200214c0 	.word	0x200214c0
 8010368:	200214bc 	.word	0x200214bc
 801036c:	080200b8 	.word	0x080200b8
 8010370:	200214c9 	.word	0x200214c9
 8010374:	20028094 	.word	0x20028094
 8010378:	200214ac 	.word	0x200214ac
 801037c:	080200d8 	.word	0x080200d8
 8010380:	080200f0 	.word	0x080200f0
        } else {
          pcb->rtime = 0;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2200      	movs	r2, #0
 8010388:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2200      	movs	r2, #0
 801038e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010398:	2b00      	cmp	r3, #0
 801039a:	d00a      	beq.n	80103b2 <tcp_process+0x30a>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	6910      	ldr	r0, [r2, #16]
 80103a6:	2200      	movs	r2, #0
 80103a8:	6879      	ldr	r1, [r7, #4]
 80103aa:	4798      	blx	r3
 80103ac:	4603      	mov	r3, r0
 80103ae:	76bb      	strb	r3, [r7, #26]
 80103b0:	e001      	b.n	80103b6 <tcp_process+0x30e>
 80103b2:	2300      	movs	r3, #0
 80103b4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103b6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103ba:	f113 0f0d 	cmn.w	r3, #13
 80103be:	d102      	bne.n	80103c6 <tcp_process+0x31e>
          return ERR_ABRT;
 80103c0:	f06f 030c 	mvn.w	r3, #12
 80103c4:	e250      	b.n	8010868 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	8b5b      	ldrh	r3, [r3, #26]
 80103ca:	f043 0302 	orr.w	r3, r3, #2
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80103d4:	e23a      	b.n	801084c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80103d6:	4b9d      	ldr	r3, [pc, #628]	; (801064c <tcp_process+0x5a4>)
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	f003 0310 	and.w	r3, r3, #16
 80103de:	2b00      	cmp	r3, #0
 80103e0:	f000 8234 	beq.w	801084c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103e4:	4b9a      	ldr	r3, [pc, #616]	; (8010650 <tcp_process+0x5a8>)
 80103e6:	6819      	ldr	r1, [r3, #0]
 80103e8:	4b9a      	ldr	r3, [pc, #616]	; (8010654 <tcp_process+0x5ac>)
 80103ea:	881b      	ldrh	r3, [r3, #0]
 80103ec:	461a      	mov	r2, r3
 80103ee:	4b9a      	ldr	r3, [pc, #616]	; (8010658 <tcp_process+0x5b0>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f4:	4b99      	ldr	r3, [pc, #612]	; (801065c <tcp_process+0x5b4>)
 80103f6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103f8:	885b      	ldrh	r3, [r3, #2]
 80103fa:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103fc:	4a97      	ldr	r2, [pc, #604]	; (801065c <tcp_process+0x5b4>)
 80103fe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010400:	8812      	ldrh	r2, [r2, #0]
 8010402:	b292      	uxth	r2, r2
 8010404:	9202      	str	r2, [sp, #8]
 8010406:	9301      	str	r3, [sp, #4]
 8010408:	4b95      	ldr	r3, [pc, #596]	; (8010660 <tcp_process+0x5b8>)
 801040a:	9300      	str	r3, [sp, #0]
 801040c:	4b95      	ldr	r3, [pc, #596]	; (8010664 <tcp_process+0x5bc>)
 801040e:	4602      	mov	r2, r0
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f003 f8ed 	bl	80135f0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801041c:	2b05      	cmp	r3, #5
 801041e:	f200 8215 	bhi.w	801084c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010428:	6878      	ldr	r0, [r7, #4]
 801042a:	f002 feab 	bl	8013184 <tcp_rexmit_rto>
      break;
 801042e:	e20d      	b.n	801084c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010430:	4b86      	ldr	r3, [pc, #536]	; (801064c <tcp_process+0x5a4>)
 8010432:	781b      	ldrb	r3, [r3, #0]
 8010434:	f003 0310 	and.w	r3, r3, #16
 8010438:	2b00      	cmp	r3, #0
 801043a:	f000 80a1 	beq.w	8010580 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801043e:	4b84      	ldr	r3, [pc, #528]	; (8010650 <tcp_process+0x5a8>)
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	3b01      	subs	r3, #1
 801044a:	2b00      	cmp	r3, #0
 801044c:	db7e      	blt.n	801054c <tcp_process+0x4a4>
 801044e:	4b80      	ldr	r3, [pc, #512]	; (8010650 <tcp_process+0x5a8>)
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010456:	1ad3      	subs	r3, r2, r3
 8010458:	2b00      	cmp	r3, #0
 801045a:	dc77      	bgt.n	801054c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2204      	movs	r2, #4
 8010460:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010466:	2b00      	cmp	r3, #0
 8010468:	d102      	bne.n	8010470 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801046a:	23fa      	movs	r3, #250	; 0xfa
 801046c:	76bb      	strb	r3, [r7, #26]
 801046e:	e01d      	b.n	80104ac <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d106      	bne.n	8010488 <tcp_process+0x3e0>
 801047a:	4b7b      	ldr	r3, [pc, #492]	; (8010668 <tcp_process+0x5c0>)
 801047c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010480:	497a      	ldr	r1, [pc, #488]	; (801066c <tcp_process+0x5c4>)
 8010482:	487b      	ldr	r0, [pc, #492]	; (8010670 <tcp_process+0x5c8>)
 8010484:	f009 fd4a 	bl	8019f1c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801048c:	699b      	ldr	r3, [r3, #24]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d00a      	beq.n	80104a8 <tcp_process+0x400>
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010496:	699b      	ldr	r3, [r3, #24]
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	6910      	ldr	r0, [r2, #16]
 801049c:	2200      	movs	r2, #0
 801049e:	6879      	ldr	r1, [r7, #4]
 80104a0:	4798      	blx	r3
 80104a2:	4603      	mov	r3, r0
 80104a4:	76bb      	strb	r3, [r7, #26]
 80104a6:	e001      	b.n	80104ac <tcp_process+0x404>
 80104a8:	23f0      	movs	r3, #240	; 0xf0
 80104aa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d00a      	beq.n	80104ca <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b8:	f113 0f0d 	cmn.w	r3, #13
 80104bc:	d002      	beq.n	80104c4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7fd fcd0 	bl	800de64 <tcp_abort>
            }
            return ERR_ABRT;
 80104c4:	f06f 030c 	mvn.w	r3, #12
 80104c8:	e1ce      	b.n	8010868 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f000 fae0 	bl	8010a90 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80104d0:	4b68      	ldr	r3, [pc, #416]	; (8010674 <tcp_process+0x5cc>)
 80104d2:	881b      	ldrh	r3, [r3, #0]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d005      	beq.n	80104e4 <tcp_process+0x43c>
            recv_acked--;
 80104d8:	4b66      	ldr	r3, [pc, #408]	; (8010674 <tcp_process+0x5cc>)
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	3b01      	subs	r3, #1
 80104de:	b29a      	uxth	r2, r3
 80104e0:	4b64      	ldr	r3, [pc, #400]	; (8010674 <tcp_process+0x5cc>)
 80104e2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104e8:	009a      	lsls	r2, r3, #2
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	f241 111c 	movw	r1, #4380	; 0x111c
 80104f4:	428b      	cmp	r3, r1
 80104f6:	bf38      	it	cc
 80104f8:	460b      	movcc	r3, r1
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d204      	bcs.n	8010508 <tcp_process+0x460>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	b29b      	uxth	r3, r3
 8010506:	e00d      	b.n	8010524 <tcp_process+0x47c>
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	f241 121c 	movw	r2, #4380	; 0x111c
 8010512:	4293      	cmp	r3, r2
 8010514:	d904      	bls.n	8010520 <tcp_process+0x478>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	b29b      	uxth	r3, r3
 801051e:	e001      	b.n	8010524 <tcp_process+0x47c>
 8010520:	f241 131c 	movw	r3, #4380	; 0x111c
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801052a:	4b53      	ldr	r3, [pc, #332]	; (8010678 <tcp_process+0x5d0>)
 801052c:	781b      	ldrb	r3, [r3, #0]
 801052e:	f003 0320 	and.w	r3, r3, #32
 8010532:	2b00      	cmp	r3, #0
 8010534:	d037      	beq.n	80105a6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	8b5b      	ldrh	r3, [r3, #26]
 801053a:	f043 0302 	orr.w	r3, r3, #2
 801053e:	b29a      	uxth	r2, r3
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2207      	movs	r2, #7
 8010548:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801054a:	e02c      	b.n	80105a6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801054c:	4b40      	ldr	r3, [pc, #256]	; (8010650 <tcp_process+0x5a8>)
 801054e:	6819      	ldr	r1, [r3, #0]
 8010550:	4b40      	ldr	r3, [pc, #256]	; (8010654 <tcp_process+0x5ac>)
 8010552:	881b      	ldrh	r3, [r3, #0]
 8010554:	461a      	mov	r2, r3
 8010556:	4b40      	ldr	r3, [pc, #256]	; (8010658 <tcp_process+0x5b0>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801055c:	4b3f      	ldr	r3, [pc, #252]	; (801065c <tcp_process+0x5b4>)
 801055e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010560:	885b      	ldrh	r3, [r3, #2]
 8010562:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010564:	4a3d      	ldr	r2, [pc, #244]	; (801065c <tcp_process+0x5b4>)
 8010566:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010568:	8812      	ldrh	r2, [r2, #0]
 801056a:	b292      	uxth	r2, r2
 801056c:	9202      	str	r2, [sp, #8]
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	4b3b      	ldr	r3, [pc, #236]	; (8010660 <tcp_process+0x5b8>)
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	4b3b      	ldr	r3, [pc, #236]	; (8010664 <tcp_process+0x5bc>)
 8010576:	4602      	mov	r2, r0
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f003 f839 	bl	80135f0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801057e:	e167      	b.n	8010850 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010580:	4b32      	ldr	r3, [pc, #200]	; (801064c <tcp_process+0x5a4>)
 8010582:	781b      	ldrb	r3, [r3, #0]
 8010584:	f003 0302 	and.w	r3, r3, #2
 8010588:	2b00      	cmp	r3, #0
 801058a:	f000 8161 	beq.w	8010850 <tcp_process+0x7a8>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010592:	1e5a      	subs	r2, r3, #1
 8010594:	4b30      	ldr	r3, [pc, #192]	; (8010658 <tcp_process+0x5b0>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	429a      	cmp	r2, r3
 801059a:	f040 8159 	bne.w	8010850 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f002 fe12 	bl	80131c8 <tcp_rexmit>
      break;
 80105a4:	e154      	b.n	8010850 <tcp_process+0x7a8>
 80105a6:	e153      	b.n	8010850 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105a8:	6878      	ldr	r0, [r7, #4]
 80105aa:	f000 fa71 	bl	8010a90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105ae:	4b32      	ldr	r3, [pc, #200]	; (8010678 <tcp_process+0x5d0>)
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	f003 0320 	and.w	r3, r3, #32
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	f000 814c 	beq.w	8010854 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	8b5b      	ldrh	r3, [r3, #26]
 80105c0:	f043 0302 	orr.w	r3, r3, #2
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2207      	movs	r2, #7
 80105ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 80105d0:	e140      	b.n	8010854 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 fa5c 	bl	8010a90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105d8:	4b27      	ldr	r3, [pc, #156]	; (8010678 <tcp_process+0x5d0>)
 80105da:	781b      	ldrb	r3, [r3, #0]
 80105dc:	f003 0320 	and.w	r3, r3, #32
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d071      	beq.n	80106c8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105e4:	4b19      	ldr	r3, [pc, #100]	; (801064c <tcp_process+0x5a4>)
 80105e6:	781b      	ldrb	r3, [r3, #0]
 80105e8:	f003 0310 	and.w	r3, r3, #16
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d060      	beq.n	80106b2 <tcp_process+0x60a>
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105f4:	4b16      	ldr	r3, [pc, #88]	; (8010650 <tcp_process+0x5a8>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d15a      	bne.n	80106b2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010600:	2b00      	cmp	r3, #0
 8010602:	d156      	bne.n	80106b2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	8b5b      	ldrh	r3, [r3, #26]
 8010608:	f043 0302 	orr.w	r3, r3, #2
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010612:	6878      	ldr	r0, [r7, #4]
 8010614:	f7fe fdbe 	bl	800f194 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010618:	4b18      	ldr	r3, [pc, #96]	; (801067c <tcp_process+0x5d4>)
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	687a      	ldr	r2, [r7, #4]
 801061e:	429a      	cmp	r2, r3
 8010620:	d105      	bne.n	801062e <tcp_process+0x586>
 8010622:	4b16      	ldr	r3, [pc, #88]	; (801067c <tcp_process+0x5d4>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	4a14      	ldr	r2, [pc, #80]	; (801067c <tcp_process+0x5d4>)
 801062a:	6013      	str	r3, [r2, #0]
 801062c:	e02e      	b.n	801068c <tcp_process+0x5e4>
 801062e:	4b13      	ldr	r3, [pc, #76]	; (801067c <tcp_process+0x5d4>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	617b      	str	r3, [r7, #20]
 8010634:	e027      	b.n	8010686 <tcp_process+0x5de>
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	429a      	cmp	r2, r3
 801063e:	d11f      	bne.n	8010680 <tcp_process+0x5d8>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	68da      	ldr	r2, [r3, #12]
 8010644:	697b      	ldr	r3, [r7, #20]
 8010646:	60da      	str	r2, [r3, #12]
 8010648:	e020      	b.n	801068c <tcp_process+0x5e4>
 801064a:	bf00      	nop
 801064c:	200214c8 	.word	0x200214c8
 8010650:	200214c0 	.word	0x200214c0
 8010654:	200214c6 	.word	0x200214c6
 8010658:	200214bc 	.word	0x200214bc
 801065c:	200214ac 	.word	0x200214ac
 8010660:	20024814 	.word	0x20024814
 8010664:	20024818 	.word	0x20024818
 8010668:	0801fe64 	.word	0x0801fe64
 801066c:	08020104 	.word	0x08020104
 8010670:	0801feb0 	.word	0x0801feb0
 8010674:	200214c4 	.word	0x200214c4
 8010678:	200214c9 	.word	0x200214c9
 801067c:	20028090 	.word	0x20028090
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	68db      	ldr	r3, [r3, #12]
 8010684:	617b      	str	r3, [r7, #20]
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d1d4      	bne.n	8010636 <tcp_process+0x58e>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	60da      	str	r2, [r3, #12]
 8010692:	4b77      	ldr	r3, [pc, #476]	; (8010870 <tcp_process+0x7c8>)
 8010694:	2201      	movs	r2, #1
 8010696:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	220a      	movs	r2, #10
 801069c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801069e:	4b75      	ldr	r3, [pc, #468]	; (8010874 <tcp_process+0x7cc>)
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	60da      	str	r2, [r3, #12]
 80106a6:	4a73      	ldr	r2, [pc, #460]	; (8010874 <tcp_process+0x7cc>)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6013      	str	r3, [r2, #0]
 80106ac:	f003 f962 	bl	8013974 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106b0:	e0d2      	b.n	8010858 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	8b5b      	ldrh	r3, [r3, #26]
 80106b6:	f043 0302 	orr.w	r3, r3, #2
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	2208      	movs	r2, #8
 80106c4:	751a      	strb	r2, [r3, #20]
      break;
 80106c6:	e0c7      	b.n	8010858 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106c8:	4b6b      	ldr	r3, [pc, #428]	; (8010878 <tcp_process+0x7d0>)
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f003 0310 	and.w	r3, r3, #16
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	f000 80c1 	beq.w	8010858 <tcp_process+0x7b0>
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106da:	4b68      	ldr	r3, [pc, #416]	; (801087c <tcp_process+0x7d4>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	429a      	cmp	r2, r3
 80106e0:	f040 80ba 	bne.w	8010858 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	f040 80b5 	bne.w	8010858 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2206      	movs	r2, #6
 80106f2:	751a      	strb	r2, [r3, #20]
      break;
 80106f4:	e0b0      	b.n	8010858 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 f9ca 	bl	8010a90 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106fc:	4b60      	ldr	r3, [pc, #384]	; (8010880 <tcp_process+0x7d8>)
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	f003 0320 	and.w	r3, r3, #32
 8010704:	2b00      	cmp	r3, #0
 8010706:	f000 80a9 	beq.w	801085c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	8b5b      	ldrh	r3, [r3, #26]
 801070e:	f043 0302 	orr.w	r3, r3, #2
 8010712:	b29a      	uxth	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f7fe fd3b 	bl	800f194 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801071e:	4b59      	ldr	r3, [pc, #356]	; (8010884 <tcp_process+0x7dc>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	687a      	ldr	r2, [r7, #4]
 8010724:	429a      	cmp	r2, r3
 8010726:	d105      	bne.n	8010734 <tcp_process+0x68c>
 8010728:	4b56      	ldr	r3, [pc, #344]	; (8010884 <tcp_process+0x7dc>)
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	4a55      	ldr	r2, [pc, #340]	; (8010884 <tcp_process+0x7dc>)
 8010730:	6013      	str	r3, [r2, #0]
 8010732:	e013      	b.n	801075c <tcp_process+0x6b4>
 8010734:	4b53      	ldr	r3, [pc, #332]	; (8010884 <tcp_process+0x7dc>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	613b      	str	r3, [r7, #16]
 801073a:	e00c      	b.n	8010756 <tcp_process+0x6ae>
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	68db      	ldr	r3, [r3, #12]
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	429a      	cmp	r2, r3
 8010744:	d104      	bne.n	8010750 <tcp_process+0x6a8>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	68da      	ldr	r2, [r3, #12]
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	60da      	str	r2, [r3, #12]
 801074e:	e005      	b.n	801075c <tcp_process+0x6b4>
 8010750:	693b      	ldr	r3, [r7, #16]
 8010752:	68db      	ldr	r3, [r3, #12]
 8010754:	613b      	str	r3, [r7, #16]
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d1ef      	bne.n	801073c <tcp_process+0x694>
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	60da      	str	r2, [r3, #12]
 8010762:	4b43      	ldr	r3, [pc, #268]	; (8010870 <tcp_process+0x7c8>)
 8010764:	2201      	movs	r2, #1
 8010766:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	220a      	movs	r2, #10
 801076c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801076e:	4b41      	ldr	r3, [pc, #260]	; (8010874 <tcp_process+0x7cc>)
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	60da      	str	r2, [r3, #12]
 8010776:	4a3f      	ldr	r2, [pc, #252]	; (8010874 <tcp_process+0x7cc>)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6013      	str	r3, [r2, #0]
 801077c:	f003 f8fa 	bl	8013974 <tcp_timer_needed>
      }
      break;
 8010780:	e06c      	b.n	801085c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f000 f984 	bl	8010a90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010788:	4b3b      	ldr	r3, [pc, #236]	; (8010878 <tcp_process+0x7d0>)
 801078a:	781b      	ldrb	r3, [r3, #0]
 801078c:	f003 0310 	and.w	r3, r3, #16
 8010790:	2b00      	cmp	r3, #0
 8010792:	d065      	beq.n	8010860 <tcp_process+0x7b8>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010798:	4b38      	ldr	r3, [pc, #224]	; (801087c <tcp_process+0x7d4>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	429a      	cmp	r2, r3
 801079e:	d15f      	bne.n	8010860 <tcp_process+0x7b8>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d15b      	bne.n	8010860 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	f7fe fcf3 	bl	800f194 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107ae:	4b35      	ldr	r3, [pc, #212]	; (8010884 <tcp_process+0x7dc>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d105      	bne.n	80107c4 <tcp_process+0x71c>
 80107b8:	4b32      	ldr	r3, [pc, #200]	; (8010884 <tcp_process+0x7dc>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	4a31      	ldr	r2, [pc, #196]	; (8010884 <tcp_process+0x7dc>)
 80107c0:	6013      	str	r3, [r2, #0]
 80107c2:	e013      	b.n	80107ec <tcp_process+0x744>
 80107c4:	4b2f      	ldr	r3, [pc, #188]	; (8010884 <tcp_process+0x7dc>)
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	60fb      	str	r3, [r7, #12]
 80107ca:	e00c      	b.n	80107e6 <tcp_process+0x73e>
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	68db      	ldr	r3, [r3, #12]
 80107d0:	687a      	ldr	r2, [r7, #4]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d104      	bne.n	80107e0 <tcp_process+0x738>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	68da      	ldr	r2, [r3, #12]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	60da      	str	r2, [r3, #12]
 80107de:	e005      	b.n	80107ec <tcp_process+0x744>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	68db      	ldr	r3, [r3, #12]
 80107e4:	60fb      	str	r3, [r7, #12]
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1ef      	bne.n	80107cc <tcp_process+0x724>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2200      	movs	r2, #0
 80107f0:	60da      	str	r2, [r3, #12]
 80107f2:	4b1f      	ldr	r3, [pc, #124]	; (8010870 <tcp_process+0x7c8>)
 80107f4:	2201      	movs	r2, #1
 80107f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	220a      	movs	r2, #10
 80107fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80107fe:	4b1d      	ldr	r3, [pc, #116]	; (8010874 <tcp_process+0x7cc>)
 8010800:	681a      	ldr	r2, [r3, #0]
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	60da      	str	r2, [r3, #12]
 8010806:	4a1b      	ldr	r2, [pc, #108]	; (8010874 <tcp_process+0x7cc>)
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6013      	str	r3, [r2, #0]
 801080c:	f003 f8b2 	bl	8013974 <tcp_timer_needed>
      }
      break;
 8010810:	e026      	b.n	8010860 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f93c 	bl	8010a90 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010818:	4b17      	ldr	r3, [pc, #92]	; (8010878 <tcp_process+0x7d0>)
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	f003 0310 	and.w	r3, r3, #16
 8010820:	2b00      	cmp	r3, #0
 8010822:	d01f      	beq.n	8010864 <tcp_process+0x7bc>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010828:	4b14      	ldr	r3, [pc, #80]	; (801087c <tcp_process+0x7d4>)
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	429a      	cmp	r2, r3
 801082e:	d119      	bne.n	8010864 <tcp_process+0x7bc>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010834:	2b00      	cmp	r3, #0
 8010836:	d115      	bne.n	8010864 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010838:	4b11      	ldr	r3, [pc, #68]	; (8010880 <tcp_process+0x7d8>)
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	f043 0310 	orr.w	r3, r3, #16
 8010840:	b2da      	uxtb	r2, r3
 8010842:	4b0f      	ldr	r3, [pc, #60]	; (8010880 <tcp_process+0x7d8>)
 8010844:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010846:	e00d      	b.n	8010864 <tcp_process+0x7bc>
    default:
      break;
 8010848:	bf00      	nop
 801084a:	e00c      	b.n	8010866 <tcp_process+0x7be>
      break;
 801084c:	bf00      	nop
 801084e:	e00a      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010850:	bf00      	nop
 8010852:	e008      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010854:	bf00      	nop
 8010856:	e006      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010858:	bf00      	nop
 801085a:	e004      	b.n	8010866 <tcp_process+0x7be>
      break;
 801085c:	bf00      	nop
 801085e:	e002      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010860:	bf00      	nop
 8010862:	e000      	b.n	8010866 <tcp_process+0x7be>
      break;
 8010864:	bf00      	nop
  }
  return ERR_OK;
 8010866:	2300      	movs	r3, #0
}
 8010868:	4618      	mov	r0, r3
 801086a:	3724      	adds	r7, #36	; 0x24
 801086c:	46bd      	mov	sp, r7
 801086e:	bd90      	pop	{r4, r7, pc}
 8010870:	2002808c 	.word	0x2002808c
 8010874:	200280a0 	.word	0x200280a0
 8010878:	200214c8 	.word	0x200214c8
 801087c:	200214c0 	.word	0x200214c0
 8010880:	200214c9 	.word	0x200214c9
 8010884:	20028090 	.word	0x20028090

08010888 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010888:	b590      	push	{r4, r7, lr}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
 8010890:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d106      	bne.n	80108a6 <tcp_oos_insert_segment+0x1e>
 8010898:	4b3b      	ldr	r3, [pc, #236]	; (8010988 <tcp_oos_insert_segment+0x100>)
 801089a:	f240 421f 	movw	r2, #1055	; 0x41f
 801089e:	493b      	ldr	r1, [pc, #236]	; (801098c <tcp_oos_insert_segment+0x104>)
 80108a0:	483b      	ldr	r0, [pc, #236]	; (8010990 <tcp_oos_insert_segment+0x108>)
 80108a2:	f009 fb3b 	bl	8019f1c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	899b      	ldrh	r3, [r3, #12]
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7f9 ffde 	bl	800a870 <lwip_htons>
 80108b4:	4603      	mov	r3, r0
 80108b6:	b2db      	uxtb	r3, r3
 80108b8:	f003 0301 	and.w	r3, r3, #1
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d028      	beq.n	8010912 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80108c0:	6838      	ldr	r0, [r7, #0]
 80108c2:	f7fe f999 	bl	800ebf8 <tcp_segs_free>
    next = NULL;
 80108c6:	2300      	movs	r3, #0
 80108c8:	603b      	str	r3, [r7, #0]
 80108ca:	e056      	b.n	801097a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108cc:	683b      	ldr	r3, [r7, #0]
 80108ce:	68db      	ldr	r3, [r3, #12]
 80108d0:	899b      	ldrh	r3, [r3, #12]
 80108d2:	b29b      	uxth	r3, r3
 80108d4:	4618      	mov	r0, r3
 80108d6:	f7f9 ffcb 	bl	800a870 <lwip_htons>
 80108da:	4603      	mov	r3, r0
 80108dc:	b2db      	uxtb	r3, r3
 80108de:	f003 0301 	and.w	r3, r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00d      	beq.n	8010902 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68db      	ldr	r3, [r3, #12]
 80108ea:	899b      	ldrh	r3, [r3, #12]
 80108ec:	b29c      	uxth	r4, r3
 80108ee:	2001      	movs	r0, #1
 80108f0:	f7f9 ffbe 	bl	800a870 <lwip_htons>
 80108f4:	4603      	mov	r3, r0
 80108f6:	461a      	mov	r2, r3
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	68db      	ldr	r3, [r3, #12]
 80108fc:	4322      	orrs	r2, r4
 80108fe:	b292      	uxth	r2, r2
 8010900:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801090c:	68f8      	ldr	r0, [r7, #12]
 801090e:	f7fe f987 	bl	800ec20 <tcp_seg_free>
    while (next &&
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00e      	beq.n	8010936 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	891b      	ldrh	r3, [r3, #8]
 801091c:	461a      	mov	r2, r3
 801091e:	4b1d      	ldr	r3, [pc, #116]	; (8010994 <tcp_oos_insert_segment+0x10c>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	441a      	add	r2, r3
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	6839      	ldr	r1, [r7, #0]
 801092c:	8909      	ldrh	r1, [r1, #8]
 801092e:	440b      	add	r3, r1
 8010930:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010932:	2b00      	cmp	r3, #0
 8010934:	daca      	bge.n	80108cc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d01e      	beq.n	801097a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	891b      	ldrh	r3, [r3, #8]
 8010940:	461a      	mov	r2, r3
 8010942:	4b14      	ldr	r3, [pc, #80]	; (8010994 <tcp_oos_insert_segment+0x10c>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	441a      	add	r2, r3
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	68db      	ldr	r3, [r3, #12]
 801094c:	685b      	ldr	r3, [r3, #4]
 801094e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010950:	2b00      	cmp	r3, #0
 8010952:	dd12      	ble.n	801097a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	68db      	ldr	r3, [r3, #12]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	b29a      	uxth	r2, r3
 801095c:	4b0d      	ldr	r3, [pc, #52]	; (8010994 <tcp_oos_insert_segment+0x10c>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	b29b      	uxth	r3, r3
 8010962:	1ad3      	subs	r3, r2, r3
 8010964:	b29a      	uxth	r2, r3
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	685a      	ldr	r2, [r3, #4]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	891b      	ldrh	r3, [r3, #8]
 8010972:	4619      	mov	r1, r3
 8010974:	4610      	mov	r0, r2
 8010976:	f7fc f97d 	bl	800cc74 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	683a      	ldr	r2, [r7, #0]
 801097e:	601a      	str	r2, [r3, #0]
}
 8010980:	bf00      	nop
 8010982:	3714      	adds	r7, #20
 8010984:	46bd      	mov	sp, r7
 8010986:	bd90      	pop	{r4, r7, pc}
 8010988:	0801fe64 	.word	0x0801fe64
 801098c:	08020124 	.word	0x08020124
 8010990:	0801feb0 	.word	0x0801feb0
 8010994:	200214bc 	.word	0x200214bc

08010998 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010998:	b5b0      	push	{r4, r5, r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80109a6:	e03e      	b.n	8010a26 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7fc fb70 	bl	800d09c <pbuf_clen>
 80109bc:	4603      	mov	r3, r0
 80109be:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109c6:	8a7a      	ldrh	r2, [r7, #18]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d906      	bls.n	80109da <tcp_free_acked_segments+0x42>
 80109cc:	4b2a      	ldr	r3, [pc, #168]	; (8010a78 <tcp_free_acked_segments+0xe0>)
 80109ce:	f240 4257 	movw	r2, #1111	; 0x457
 80109d2:	492a      	ldr	r1, [pc, #168]	; (8010a7c <tcp_free_acked_segments+0xe4>)
 80109d4:	482a      	ldr	r0, [pc, #168]	; (8010a80 <tcp_free_acked_segments+0xe8>)
 80109d6:	f009 faa1 	bl	8019f1c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80109e0:	8a7b      	ldrh	r3, [r7, #18]
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	b29a      	uxth	r2, r3
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	891a      	ldrh	r2, [r3, #8]
 80109f0:	4b24      	ldr	r3, [pc, #144]	; (8010a84 <tcp_free_acked_segments+0xec>)
 80109f2:	881b      	ldrh	r3, [r3, #0]
 80109f4:	4413      	add	r3, r2
 80109f6:	b29a      	uxth	r2, r3
 80109f8:	4b22      	ldr	r3, [pc, #136]	; (8010a84 <tcp_free_acked_segments+0xec>)
 80109fa:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80109fc:	6978      	ldr	r0, [r7, #20]
 80109fe:	f7fe f90f 	bl	800ec20 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00c      	beq.n	8010a26 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d109      	bne.n	8010a26 <tcp_free_acked_segments+0x8e>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d106      	bne.n	8010a26 <tcp_free_acked_segments+0x8e>
 8010a18:	4b17      	ldr	r3, [pc, #92]	; (8010a78 <tcp_free_acked_segments+0xe0>)
 8010a1a:	f240 4262 	movw	r2, #1122	; 0x462
 8010a1e:	491a      	ldr	r1, [pc, #104]	; (8010a88 <tcp_free_acked_segments+0xf0>)
 8010a20:	4817      	ldr	r0, [pc, #92]	; (8010a80 <tcp_free_acked_segments+0xe8>)
 8010a22:	f009 fa7b 	bl	8019f1c <iprintf>
  while (seg_list != NULL &&
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d020      	beq.n	8010a6e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	68db      	ldr	r3, [r3, #12]
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7f9 ff31 	bl	800a89a <lwip_htonl>
 8010a38:	4604      	mov	r4, r0
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	891b      	ldrh	r3, [r3, #8]
 8010a3e:	461d      	mov	r5, r3
 8010a40:	68bb      	ldr	r3, [r7, #8]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	899b      	ldrh	r3, [r3, #12]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7f9 ff11 	bl	800a870 <lwip_htons>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	f003 0303 	and.w	r3, r3, #3
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d001      	beq.n	8010a5e <tcp_free_acked_segments+0xc6>
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	e000      	b.n	8010a60 <tcp_free_acked_segments+0xc8>
 8010a5e:	2300      	movs	r3, #0
 8010a60:	442b      	add	r3, r5
 8010a62:	18e2      	adds	r2, r4, r3
 8010a64:	4b09      	ldr	r3, [pc, #36]	; (8010a8c <tcp_free_acked_segments+0xf4>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	dd9c      	ble.n	80109a8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a6e:	68bb      	ldr	r3, [r7, #8]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bdb0      	pop	{r4, r5, r7, pc}
 8010a78:	0801fe64 	.word	0x0801fe64
 8010a7c:	0802014c 	.word	0x0802014c
 8010a80:	0801feb0 	.word	0x0801feb0
 8010a84:	200214c4 	.word	0x200214c4
 8010a88:	08020174 	.word	0x08020174
 8010a8c:	200214c0 	.word	0x200214c0

08010a90 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010a90:	b5b0      	push	{r4, r5, r7, lr}
 8010a92:	b094      	sub	sp, #80	; 0x50
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <tcp_receive+0x20>
 8010aa2:	4ba6      	ldr	r3, [pc, #664]	; (8010d3c <tcp_receive+0x2ac>)
 8010aa4:	f240 427b 	movw	r2, #1147	; 0x47b
 8010aa8:	49a5      	ldr	r1, [pc, #660]	; (8010d40 <tcp_receive+0x2b0>)
 8010aaa:	48a6      	ldr	r0, [pc, #664]	; (8010d44 <tcp_receive+0x2b4>)
 8010aac:	f009 fa36 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	7d1b      	ldrb	r3, [r3, #20]
 8010ab4:	2b03      	cmp	r3, #3
 8010ab6:	d806      	bhi.n	8010ac6 <tcp_receive+0x36>
 8010ab8:	4ba0      	ldr	r3, [pc, #640]	; (8010d3c <tcp_receive+0x2ac>)
 8010aba:	f240 427c 	movw	r2, #1148	; 0x47c
 8010abe:	49a2      	ldr	r1, [pc, #648]	; (8010d48 <tcp_receive+0x2b8>)
 8010ac0:	48a0      	ldr	r0, [pc, #640]	; (8010d44 <tcp_receive+0x2b4>)
 8010ac2:	f009 fa2b 	bl	8019f1c <iprintf>

  if (flags & TCP_ACK) {
 8010ac6:	4ba1      	ldr	r3, [pc, #644]	; (8010d4c <tcp_receive+0x2bc>)
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	f003 0310 	and.w	r3, r3, #16
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	f000 8263 	beq.w	8010f9a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ada:	461a      	mov	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ae0:	4413      	add	r3, r2
 8010ae2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ae8:	4b99      	ldr	r3, [pc, #612]	; (8010d50 <tcp_receive+0x2c0>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	1ad3      	subs	r3, r2, r3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	db1b      	blt.n	8010b2a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010af6:	4b96      	ldr	r3, [pc, #600]	; (8010d50 <tcp_receive+0x2c0>)
 8010af8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d106      	bne.n	8010b0c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b02:	4b94      	ldr	r3, [pc, #592]	; (8010d54 <tcp_receive+0x2c4>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	db0e      	blt.n	8010b2a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b10:	4b90      	ldr	r3, [pc, #576]	; (8010d54 <tcp_receive+0x2c4>)
 8010b12:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d125      	bne.n	8010b64 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b18:	4b8f      	ldr	r3, [pc, #572]	; (8010d58 <tcp_receive+0x2c8>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	89db      	ldrh	r3, [r3, #14]
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d91c      	bls.n	8010b64 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b2a:	4b8b      	ldr	r3, [pc, #556]	; (8010d58 <tcp_receive+0x2c8>)
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	89db      	ldrh	r3, [r3, #14]
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b44:	429a      	cmp	r2, r3
 8010b46:	d205      	bcs.n	8010b54 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b54:	4b7e      	ldr	r3, [pc, #504]	; (8010d50 <tcp_receive+0x2c0>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010b5c:	4b7d      	ldr	r3, [pc, #500]	; (8010d54 <tcp_receive+0x2c4>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b64:	4b7b      	ldr	r3, [pc, #492]	; (8010d54 <tcp_receive+0x2c4>)
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b6c:	1ad3      	subs	r3, r2, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	dc58      	bgt.n	8010c24 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b72:	4b7a      	ldr	r3, [pc, #488]	; (8010d5c <tcp_receive+0x2cc>)
 8010b74:	881b      	ldrh	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d14b      	bne.n	8010c12 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b7e:	687a      	ldr	r2, [r7, #4]
 8010b80:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010b84:	4413      	add	r3, r2
 8010b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b88:	429a      	cmp	r2, r3
 8010b8a:	d142      	bne.n	8010c12 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	db3d      	blt.n	8010c12 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b9a:	4b6e      	ldr	r3, [pc, #440]	; (8010d54 <tcp_receive+0x2c4>)
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d137      	bne.n	8010c12 <tcp_receive+0x182>
              found_dupack = 1;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bac:	2bff      	cmp	r3, #255	; 0xff
 8010bae:	d007      	beq.n	8010bc0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bc6:	2b03      	cmp	r3, #3
 8010bc8:	d91b      	bls.n	8010c02 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bd4:	4413      	add	r3, r2
 8010bd6:	b29a      	uxth	r2, r3
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bde:	429a      	cmp	r2, r3
 8010be0:	d30a      	bcc.n	8010bf8 <tcp_receive+0x168>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bec:	4413      	add	r3, r2
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bf6:	e004      	b.n	8010c02 <tcp_receive+0x172>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c08:	2b02      	cmp	r3, #2
 8010c0a:	d902      	bls.n	8010c12 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f002 fb47 	bl	80132a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f040 8160 	bne.w	8010eda <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c22:	e15a      	b.n	8010eda <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c24:	4b4b      	ldr	r3, [pc, #300]	; (8010d54 <tcp_receive+0x2c4>)
 8010c26:	681a      	ldr	r2, [r3, #0]
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c2c:	1ad3      	subs	r3, r2, r3
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f2c0 814d 	blt.w	8010ed0 <tcp_receive+0x440>
 8010c36:	4b47      	ldr	r3, [pc, #284]	; (8010d54 <tcp_receive+0x2c4>)
 8010c38:	681a      	ldr	r2, [r3, #0]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c3e:	1ad3      	subs	r3, r2, r3
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f300 8145 	bgt.w	8010ed0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	8b5b      	ldrh	r3, [r3, #26]
 8010c4a:	f003 0304 	and.w	r3, r3, #4
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d010      	beq.n	8010c74 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	8b5b      	ldrh	r3, [r3, #26]
 8010c56:	f023 0304 	bic.w	r3, r3, #4
 8010c5a:	b29a      	uxth	r2, r3
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c82:	10db      	asrs	r3, r3, #3
 8010c84:	b21b      	sxth	r3, r3
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4413      	add	r3, r2
 8010c92:	b29b      	uxth	r3, r3
 8010c94:	b21a      	sxth	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010c9c:	4b2d      	ldr	r3, [pc, #180]	; (8010d54 <tcp_receive+0x2c4>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ca6:	b29b      	uxth	r3, r3
 8010ca8:	1ad3      	subs	r3, r2, r3
 8010caa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010cb4:	4b27      	ldr	r3, [pc, #156]	; (8010d54 <tcp_receive+0x2c4>)
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	7d1b      	ldrb	r3, [r3, #20]
 8010cc0:	2b03      	cmp	r3, #3
 8010cc2:	f240 8096 	bls.w	8010df2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d244      	bcs.n	8010d60 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8b5b      	ldrh	r3, [r3, #26]
 8010cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d001      	beq.n	8010ce6 <tcp_receive+0x256>
 8010ce2:	2301      	movs	r3, #1
 8010ce4:	e000      	b.n	8010ce8 <tcp_receive+0x258>
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010cec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cf6:	fb12 f303 	smulbb	r3, r2, r3
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	bf28      	it	cs
 8010d02:	4613      	movcs	r3, r2
 8010d04:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d0e:	4413      	add	r3, r2
 8010d10:	b29a      	uxth	r2, r3
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d309      	bcc.n	8010d30 <tcp_receive+0x2a0>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d24:	4413      	add	r3, r2
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d2e:	e060      	b.n	8010df2 <tcp_receive+0x362>
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d3a:	e05a      	b.n	8010df2 <tcp_receive+0x362>
 8010d3c:	0801fe64 	.word	0x0801fe64
 8010d40:	08020194 	.word	0x08020194
 8010d44:	0801feb0 	.word	0x0801feb0
 8010d48:	080201b0 	.word	0x080201b0
 8010d4c:	200214c8 	.word	0x200214c8
 8010d50:	200214bc 	.word	0x200214bc
 8010d54:	200214c0 	.word	0x200214c0
 8010d58:	200214ac 	.word	0x200214ac
 8010d5c:	200214c6 	.word	0x200214c6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d68:	4413      	add	r3, r2
 8010d6a:	b29a      	uxth	r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d72:	429a      	cmp	r2, r3
 8010d74:	d309      	bcc.n	8010d8a <tcp_receive+0x2fa>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d7e:	4413      	add	r3, r2
 8010d80:	b29a      	uxth	r2, r3
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d88:	e004      	b.n	8010d94 <tcp_receive+0x304>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d326      	bcc.n	8010df2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010db0:	1ad3      	subs	r3, r2, r3
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dc4:	4413      	add	r3, r2
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dce:	429a      	cmp	r2, r3
 8010dd0:	d30a      	bcc.n	8010de8 <tcp_receive+0x358>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ddc:	4413      	add	r3, r2
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010de6:	e004      	b.n	8010df2 <tcp_receive+0x362>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010dfa:	4a98      	ldr	r2, [pc, #608]	; (801105c <tcp_receive+0x5cc>)
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7ff fdcb 	bl	8010998 <tcp_free_acked_segments>
 8010e02:	4602      	mov	r2, r0
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e10:	4a93      	ldr	r2, [pc, #588]	; (8011060 <tcp_receive+0x5d0>)
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff fdc0 	bl	8010998 <tcp_free_acked_segments>
 8010e18:	4602      	mov	r2, r0
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d104      	bne.n	8010e30 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e2c:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e2e:	e002      	b.n	8010e36 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d103      	bne.n	8010e4c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2200      	movs	r2, #0
 8010e48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e52:	4b84      	ldr	r3, [pc, #528]	; (8011064 <tcp_receive+0x5d4>)
 8010e54:	881b      	ldrh	r3, [r3, #0]
 8010e56:	4413      	add	r3, r2
 8010e58:	b29a      	uxth	r2, r3
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	8b5b      	ldrh	r3, [r3, #26]
 8010e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d035      	beq.n	8010ed8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d118      	bne.n	8010ea6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d00c      	beq.n	8010e96 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e84:	68db      	ldr	r3, [r3, #12]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7f9 fd06 	bl	800a89a <lwip_htonl>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	dc20      	bgt.n	8010ed8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	8b5b      	ldrh	r3, [r3, #26]
 8010e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ea4:	e018      	b.n	8010ed8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eae:	68db      	ldr	r3, [r3, #12]
 8010eb0:	685b      	ldr	r3, [r3, #4]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7f9 fcf1 	bl	800a89a <lwip_htonl>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	1ae3      	subs	r3, r4, r3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	dc0b      	bgt.n	8010ed8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	8b5b      	ldrh	r3, [r3, #26]
 8010ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ece:	e003      	b.n	8010ed8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f002 fbdf 	bl	8013694 <tcp_send_empty_ack>
 8010ed6:	e000      	b.n	8010eda <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ed8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d05b      	beq.n	8010f9a <tcp_receive+0x50a>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ee6:	4b60      	ldr	r3, [pc, #384]	; (8011068 <tcp_receive+0x5d8>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	1ad3      	subs	r3, r2, r3
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	da54      	bge.n	8010f9a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010ef0:	4b5e      	ldr	r3, [pc, #376]	; (801106c <tcp_receive+0x5dc>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	b29a      	uxth	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010efa:	b29b      	uxth	r3, r3
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010f04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f0e:	10db      	asrs	r3, r3, #3
 8010f10:	b21b      	sxth	r3, r3
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	1ad3      	subs	r3, r2, r3
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f28:	4413      	add	r3, r2
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	b21a      	sxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010f32:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	da05      	bge.n	8010f46 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010f3a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f3e:	425b      	negs	r3, r3
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f46:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f50:	109b      	asrs	r3, r3, #2
 8010f52:	b21b      	sxth	r3, r3
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	1ad3      	subs	r3, r2, r3
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f6a:	4413      	add	r3, r2
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	b21a      	sxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f7a:	10db      	asrs	r3, r3, #3
 8010f7c:	b21b      	sxth	r3, r3
 8010f7e:	b29a      	uxth	r2, r3
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	4413      	add	r3, r2
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	b21a      	sxth	r2, r3
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2200      	movs	r2, #0
 8010f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010f9a:	4b35      	ldr	r3, [pc, #212]	; (8011070 <tcp_receive+0x5e0>)
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	f000 84e1 	beq.w	8011966 <tcp_receive+0xed6>
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	7d1b      	ldrb	r3, [r3, #20]
 8010fa8:	2b06      	cmp	r3, #6
 8010faa:	f200 84dc 	bhi.w	8011966 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fb2:	4b30      	ldr	r3, [pc, #192]	; (8011074 <tcp_receive+0x5e4>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f2c0 808e 	blt.w	80110dc <tcp_receive+0x64c>
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fc4:	4b2a      	ldr	r3, [pc, #168]	; (8011070 <tcp_receive+0x5e0>)
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	4619      	mov	r1, r3
 8010fca:	4b2a      	ldr	r3, [pc, #168]	; (8011074 <tcp_receive+0x5e4>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	440b      	add	r3, r1
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	f300 8081 	bgt.w	80110dc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010fda:	4b27      	ldr	r3, [pc, #156]	; (8011078 <tcp_receive+0x5e8>)
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fe4:	4b23      	ldr	r3, [pc, #140]	; (8011074 <tcp_receive+0x5e4>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	1ad3      	subs	r3, r2, r3
 8010fea:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010fec:	4b22      	ldr	r3, [pc, #136]	; (8011078 <tcp_receive+0x5e8>)
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d106      	bne.n	8011002 <tcp_receive+0x572>
 8010ff4:	4b21      	ldr	r3, [pc, #132]	; (801107c <tcp_receive+0x5ec>)
 8010ff6:	f240 5294 	movw	r2, #1428	; 0x594
 8010ffa:	4921      	ldr	r1, [pc, #132]	; (8011080 <tcp_receive+0x5f0>)
 8010ffc:	4821      	ldr	r0, [pc, #132]	; (8011084 <tcp_receive+0x5f4>)
 8010ffe:	f008 ff8d 	bl	8019f1c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011004:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011008:	4293      	cmp	r3, r2
 801100a:	d906      	bls.n	801101a <tcp_receive+0x58a>
 801100c:	4b1b      	ldr	r3, [pc, #108]	; (801107c <tcp_receive+0x5ec>)
 801100e:	f240 5295 	movw	r2, #1429	; 0x595
 8011012:	491d      	ldr	r1, [pc, #116]	; (8011088 <tcp_receive+0x5f8>)
 8011014:	481b      	ldr	r0, [pc, #108]	; (8011084 <tcp_receive+0x5f4>)
 8011016:	f008 ff81 	bl	8019f1c <iprintf>
      off = (u16_t)off32;
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011020:	4b15      	ldr	r3, [pc, #84]	; (8011078 <tcp_receive+0x5e8>)
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	891b      	ldrh	r3, [r3, #8]
 8011026:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801102a:	429a      	cmp	r2, r3
 801102c:	d906      	bls.n	801103c <tcp_receive+0x5ac>
 801102e:	4b13      	ldr	r3, [pc, #76]	; (801107c <tcp_receive+0x5ec>)
 8011030:	f240 5297 	movw	r2, #1431	; 0x597
 8011034:	4915      	ldr	r1, [pc, #84]	; (801108c <tcp_receive+0x5fc>)
 8011036:	4813      	ldr	r0, [pc, #76]	; (8011084 <tcp_receive+0x5f4>)
 8011038:	f008 ff70 	bl	8019f1c <iprintf>
      inseg.len -= off;
 801103c:	4b0e      	ldr	r3, [pc, #56]	; (8011078 <tcp_receive+0x5e8>)
 801103e:	891a      	ldrh	r2, [r3, #8]
 8011040:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	b29a      	uxth	r2, r3
 8011048:	4b0b      	ldr	r3, [pc, #44]	; (8011078 <tcp_receive+0x5e8>)
 801104a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801104c:	4b0a      	ldr	r3, [pc, #40]	; (8011078 <tcp_receive+0x5e8>)
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	891a      	ldrh	r2, [r3, #8]
 8011052:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011056:	1ad3      	subs	r3, r2, r3
 8011058:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801105a:	e029      	b.n	80110b0 <tcp_receive+0x620>
 801105c:	080201cc 	.word	0x080201cc
 8011060:	080201d4 	.word	0x080201d4
 8011064:	200214c4 	.word	0x200214c4
 8011068:	200214c0 	.word	0x200214c0
 801106c:	20028094 	.word	0x20028094
 8011070:	200214c6 	.word	0x200214c6
 8011074:	200214bc 	.word	0x200214bc
 8011078:	2002149c 	.word	0x2002149c
 801107c:	0801fe64 	.word	0x0801fe64
 8011080:	080201dc 	.word	0x080201dc
 8011084:	0801feb0 	.word	0x0801feb0
 8011088:	080201ec 	.word	0x080201ec
 801108c:	080201fc 	.word	0x080201fc
        off -= p->len;
 8011090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011092:	895b      	ldrh	r3, [r3, #10]
 8011094:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011098:	1ad3      	subs	r3, r2, r3
 801109a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801109e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80110a2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a6:	2200      	movs	r2, #0
 80110a8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80110b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110b2:	895b      	ldrh	r3, [r3, #10]
 80110b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110b8:	429a      	cmp	r2, r3
 80110ba:	d8e9      	bhi.n	8011090 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80110bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110c0:	4619      	mov	r1, r3
 80110c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80110c4:	f7fb fed6 	bl	800ce74 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110cc:	4a91      	ldr	r2, [pc, #580]	; (8011314 <tcp_receive+0x884>)
 80110ce:	6013      	str	r3, [r2, #0]
 80110d0:	4b91      	ldr	r3, [pc, #580]	; (8011318 <tcp_receive+0x888>)
 80110d2:	68db      	ldr	r3, [r3, #12]
 80110d4:	4a8f      	ldr	r2, [pc, #572]	; (8011314 <tcp_receive+0x884>)
 80110d6:	6812      	ldr	r2, [r2, #0]
 80110d8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80110da:	e00d      	b.n	80110f8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80110dc:	4b8d      	ldr	r3, [pc, #564]	; (8011314 <tcp_receive+0x884>)
 80110de:	681a      	ldr	r2, [r3, #0]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e4:	1ad3      	subs	r3, r2, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	da06      	bge.n	80110f8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	8b5b      	ldrh	r3, [r3, #26]
 80110ee:	f043 0302 	orr.w	r3, r3, #2
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110f8:	4b86      	ldr	r3, [pc, #536]	; (8011314 <tcp_receive+0x884>)
 80110fa:	681a      	ldr	r2, [r3, #0]
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	2b00      	cmp	r3, #0
 8011104:	f2c0 842a 	blt.w	801195c <tcp_receive+0xecc>
 8011108:	4b82      	ldr	r3, [pc, #520]	; (8011314 <tcp_receive+0x884>)
 801110a:	681a      	ldr	r2, [r3, #0]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011110:	6879      	ldr	r1, [r7, #4]
 8011112:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011114:	440b      	add	r3, r1
 8011116:	1ad3      	subs	r3, r2, r3
 8011118:	3301      	adds	r3, #1
 801111a:	2b00      	cmp	r3, #0
 801111c:	f300 841e 	bgt.w	801195c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011124:	4b7b      	ldr	r3, [pc, #492]	; (8011314 <tcp_receive+0x884>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	429a      	cmp	r2, r3
 801112a:	f040 829a 	bne.w	8011662 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801112e:	4b7a      	ldr	r3, [pc, #488]	; (8011318 <tcp_receive+0x888>)
 8011130:	891c      	ldrh	r4, [r3, #8]
 8011132:	4b79      	ldr	r3, [pc, #484]	; (8011318 <tcp_receive+0x888>)
 8011134:	68db      	ldr	r3, [r3, #12]
 8011136:	899b      	ldrh	r3, [r3, #12]
 8011138:	b29b      	uxth	r3, r3
 801113a:	4618      	mov	r0, r3
 801113c:	f7f9 fb98 	bl	800a870 <lwip_htons>
 8011140:	4603      	mov	r3, r0
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f003 0303 	and.w	r3, r3, #3
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <tcp_receive+0x6c0>
 801114c:	2301      	movs	r3, #1
 801114e:	e000      	b.n	8011152 <tcp_receive+0x6c2>
 8011150:	2300      	movs	r3, #0
 8011152:	4423      	add	r3, r4
 8011154:	b29a      	uxth	r2, r3
 8011156:	4b71      	ldr	r3, [pc, #452]	; (801131c <tcp_receive+0x88c>)
 8011158:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801115e:	4b6f      	ldr	r3, [pc, #444]	; (801131c <tcp_receive+0x88c>)
 8011160:	881b      	ldrh	r3, [r3, #0]
 8011162:	429a      	cmp	r2, r3
 8011164:	d275      	bcs.n	8011252 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011166:	4b6c      	ldr	r3, [pc, #432]	; (8011318 <tcp_receive+0x888>)
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	899b      	ldrh	r3, [r3, #12]
 801116c:	b29b      	uxth	r3, r3
 801116e:	4618      	mov	r0, r3
 8011170:	f7f9 fb7e 	bl	800a870 <lwip_htons>
 8011174:	4603      	mov	r3, r0
 8011176:	b2db      	uxtb	r3, r3
 8011178:	f003 0301 	and.w	r3, r3, #1
 801117c:	2b00      	cmp	r3, #0
 801117e:	d01f      	beq.n	80111c0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011180:	4b65      	ldr	r3, [pc, #404]	; (8011318 <tcp_receive+0x888>)
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	899b      	ldrh	r3, [r3, #12]
 8011186:	b29b      	uxth	r3, r3
 8011188:	b21b      	sxth	r3, r3
 801118a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801118e:	b21c      	sxth	r4, r3
 8011190:	4b61      	ldr	r3, [pc, #388]	; (8011318 <tcp_receive+0x888>)
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	899b      	ldrh	r3, [r3, #12]
 8011196:	b29b      	uxth	r3, r3
 8011198:	4618      	mov	r0, r3
 801119a:	f7f9 fb69 	bl	800a870 <lwip_htons>
 801119e:	4603      	mov	r3, r0
 80111a0:	b2db      	uxtb	r3, r3
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111a8:	b29b      	uxth	r3, r3
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7f9 fb60 	bl	800a870 <lwip_htons>
 80111b0:	4603      	mov	r3, r0
 80111b2:	b21b      	sxth	r3, r3
 80111b4:	4323      	orrs	r3, r4
 80111b6:	b21a      	sxth	r2, r3
 80111b8:	4b57      	ldr	r3, [pc, #348]	; (8011318 <tcp_receive+0x888>)
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	b292      	uxth	r2, r2
 80111be:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111c4:	4b54      	ldr	r3, [pc, #336]	; (8011318 <tcp_receive+0x888>)
 80111c6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111c8:	4b53      	ldr	r3, [pc, #332]	; (8011318 <tcp_receive+0x888>)
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	899b      	ldrh	r3, [r3, #12]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7f9 fb4d 	bl	800a870 <lwip_htons>
 80111d6:	4603      	mov	r3, r0
 80111d8:	b2db      	uxtb	r3, r3
 80111da:	f003 0302 	and.w	r3, r3, #2
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d005      	beq.n	80111ee <tcp_receive+0x75e>
            inseg.len -= 1;
 80111e2:	4b4d      	ldr	r3, [pc, #308]	; (8011318 <tcp_receive+0x888>)
 80111e4:	891b      	ldrh	r3, [r3, #8]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	b29a      	uxth	r2, r3
 80111ea:	4b4b      	ldr	r3, [pc, #300]	; (8011318 <tcp_receive+0x888>)
 80111ec:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80111ee:	4b4a      	ldr	r3, [pc, #296]	; (8011318 <tcp_receive+0x888>)
 80111f0:	685a      	ldr	r2, [r3, #4]
 80111f2:	4b49      	ldr	r3, [pc, #292]	; (8011318 <tcp_receive+0x888>)
 80111f4:	891b      	ldrh	r3, [r3, #8]
 80111f6:	4619      	mov	r1, r3
 80111f8:	4610      	mov	r0, r2
 80111fa:	f7fb fd3b 	bl	800cc74 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80111fe:	4b46      	ldr	r3, [pc, #280]	; (8011318 <tcp_receive+0x888>)
 8011200:	891c      	ldrh	r4, [r3, #8]
 8011202:	4b45      	ldr	r3, [pc, #276]	; (8011318 <tcp_receive+0x888>)
 8011204:	68db      	ldr	r3, [r3, #12]
 8011206:	899b      	ldrh	r3, [r3, #12]
 8011208:	b29b      	uxth	r3, r3
 801120a:	4618      	mov	r0, r3
 801120c:	f7f9 fb30 	bl	800a870 <lwip_htons>
 8011210:	4603      	mov	r3, r0
 8011212:	b2db      	uxtb	r3, r3
 8011214:	f003 0303 	and.w	r3, r3, #3
 8011218:	2b00      	cmp	r3, #0
 801121a:	d001      	beq.n	8011220 <tcp_receive+0x790>
 801121c:	2301      	movs	r3, #1
 801121e:	e000      	b.n	8011222 <tcp_receive+0x792>
 8011220:	2300      	movs	r3, #0
 8011222:	4423      	add	r3, r4
 8011224:	b29a      	uxth	r2, r3
 8011226:	4b3d      	ldr	r3, [pc, #244]	; (801131c <tcp_receive+0x88c>)
 8011228:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801122a:	4b3c      	ldr	r3, [pc, #240]	; (801131c <tcp_receive+0x88c>)
 801122c:	881b      	ldrh	r3, [r3, #0]
 801122e:	461a      	mov	r2, r3
 8011230:	4b38      	ldr	r3, [pc, #224]	; (8011314 <tcp_receive+0x884>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	441a      	add	r2, r3
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801123a:	6879      	ldr	r1, [r7, #4]
 801123c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801123e:	440b      	add	r3, r1
 8011240:	429a      	cmp	r2, r3
 8011242:	d006      	beq.n	8011252 <tcp_receive+0x7c2>
 8011244:	4b36      	ldr	r3, [pc, #216]	; (8011320 <tcp_receive+0x890>)
 8011246:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801124a:	4936      	ldr	r1, [pc, #216]	; (8011324 <tcp_receive+0x894>)
 801124c:	4836      	ldr	r0, [pc, #216]	; (8011328 <tcp_receive+0x898>)
 801124e:	f008 fe65 	bl	8019f1c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011256:	2b00      	cmp	r3, #0
 8011258:	f000 80e7 	beq.w	801142a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801125c:	4b2e      	ldr	r3, [pc, #184]	; (8011318 <tcp_receive+0x888>)
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	899b      	ldrh	r3, [r3, #12]
 8011262:	b29b      	uxth	r3, r3
 8011264:	4618      	mov	r0, r3
 8011266:	f7f9 fb03 	bl	800a870 <lwip_htons>
 801126a:	4603      	mov	r3, r0
 801126c:	b2db      	uxtb	r3, r3
 801126e:	f003 0301 	and.w	r3, r3, #1
 8011272:	2b00      	cmp	r3, #0
 8011274:	d010      	beq.n	8011298 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011276:	e00a      	b.n	801128e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801127c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	f7fd fcc9 	bl	800ec20 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011292:	2b00      	cmp	r3, #0
 8011294:	d1f0      	bne.n	8011278 <tcp_receive+0x7e8>
 8011296:	e0c8      	b.n	801142a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801129c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801129e:	e052      	b.n	8011346 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	899b      	ldrh	r3, [r3, #12]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7f9 fae1 	bl	800a870 <lwip_htons>
 80112ae:	4603      	mov	r3, r0
 80112b0:	b2db      	uxtb	r3, r3
 80112b2:	f003 0301 	and.w	r3, r3, #1
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d03d      	beq.n	8011336 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112ba:	4b17      	ldr	r3, [pc, #92]	; (8011318 <tcp_receive+0x888>)
 80112bc:	68db      	ldr	r3, [r3, #12]
 80112be:	899b      	ldrh	r3, [r3, #12]
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7f9 fad4 	bl	800a870 <lwip_htons>
 80112c8:	4603      	mov	r3, r0
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d130      	bne.n	8011336 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80112d4:	4b10      	ldr	r3, [pc, #64]	; (8011318 <tcp_receive+0x888>)
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	899b      	ldrh	r3, [r3, #12]
 80112da:	b29c      	uxth	r4, r3
 80112dc:	2001      	movs	r0, #1
 80112de:	f7f9 fac7 	bl	800a870 <lwip_htons>
 80112e2:	4603      	mov	r3, r0
 80112e4:	461a      	mov	r2, r3
 80112e6:	4b0c      	ldr	r3, [pc, #48]	; (8011318 <tcp_receive+0x888>)
 80112e8:	68db      	ldr	r3, [r3, #12]
 80112ea:	4322      	orrs	r2, r4
 80112ec:	b292      	uxth	r2, r2
 80112ee:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80112f0:	4b09      	ldr	r3, [pc, #36]	; (8011318 <tcp_receive+0x888>)
 80112f2:	891c      	ldrh	r4, [r3, #8]
 80112f4:	4b08      	ldr	r3, [pc, #32]	; (8011318 <tcp_receive+0x888>)
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	899b      	ldrh	r3, [r3, #12]
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f9 fab7 	bl	800a870 <lwip_htons>
 8011302:	4603      	mov	r3, r0
 8011304:	b2db      	uxtb	r3, r3
 8011306:	f003 0303 	and.w	r3, r3, #3
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00e      	beq.n	801132c <tcp_receive+0x89c>
 801130e:	2301      	movs	r3, #1
 8011310:	e00d      	b.n	801132e <tcp_receive+0x89e>
 8011312:	bf00      	nop
 8011314:	200214bc 	.word	0x200214bc
 8011318:	2002149c 	.word	0x2002149c
 801131c:	200214c6 	.word	0x200214c6
 8011320:	0801fe64 	.word	0x0801fe64
 8011324:	0802020c 	.word	0x0802020c
 8011328:	0801feb0 	.word	0x0801feb0
 801132c:	2300      	movs	r3, #0
 801132e:	4423      	add	r3, r4
 8011330:	b29a      	uxth	r2, r3
 8011332:	4b98      	ldr	r3, [pc, #608]	; (8011594 <tcp_receive+0xb04>)
 8011334:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011338:	613b      	str	r3, [r7, #16]
              next = next->next;
 801133a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011340:	6938      	ldr	r0, [r7, #16]
 8011342:	f7fd fc6d 	bl	800ec20 <tcp_seg_free>
            while (next &&
 8011346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00e      	beq.n	801136a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801134c:	4b91      	ldr	r3, [pc, #580]	; (8011594 <tcp_receive+0xb04>)
 801134e:	881b      	ldrh	r3, [r3, #0]
 8011350:	461a      	mov	r2, r3
 8011352:	4b91      	ldr	r3, [pc, #580]	; (8011598 <tcp_receive+0xb08>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	441a      	add	r2, r3
 8011358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011360:	8909      	ldrh	r1, [r1, #8]
 8011362:	440b      	add	r3, r1
 8011364:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011366:	2b00      	cmp	r3, #0
 8011368:	da9a      	bge.n	80112a0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801136a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801136c:	2b00      	cmp	r3, #0
 801136e:	d059      	beq.n	8011424 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011370:	4b88      	ldr	r3, [pc, #544]	; (8011594 <tcp_receive+0xb04>)
 8011372:	881b      	ldrh	r3, [r3, #0]
 8011374:	461a      	mov	r2, r3
 8011376:	4b88      	ldr	r3, [pc, #544]	; (8011598 <tcp_receive+0xb08>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	441a      	add	r2, r3
 801137c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	685b      	ldr	r3, [r3, #4]
 8011382:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011384:	2b00      	cmp	r3, #0
 8011386:	dd4d      	ble.n	8011424 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801138a:	68db      	ldr	r3, [r3, #12]
 801138c:	685b      	ldr	r3, [r3, #4]
 801138e:	b29a      	uxth	r2, r3
 8011390:	4b81      	ldr	r3, [pc, #516]	; (8011598 <tcp_receive+0xb08>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	b29b      	uxth	r3, r3
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	b29a      	uxth	r2, r3
 801139a:	4b80      	ldr	r3, [pc, #512]	; (801159c <tcp_receive+0xb0c>)
 801139c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801139e:	4b7f      	ldr	r3, [pc, #508]	; (801159c <tcp_receive+0xb0c>)
 80113a0:	68db      	ldr	r3, [r3, #12]
 80113a2:	899b      	ldrh	r3, [r3, #12]
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7f9 fa62 	bl	800a870 <lwip_htons>
 80113ac:	4603      	mov	r3, r0
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	f003 0302 	and.w	r3, r3, #2
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d005      	beq.n	80113c4 <tcp_receive+0x934>
                inseg.len -= 1;
 80113b8:	4b78      	ldr	r3, [pc, #480]	; (801159c <tcp_receive+0xb0c>)
 80113ba:	891b      	ldrh	r3, [r3, #8]
 80113bc:	3b01      	subs	r3, #1
 80113be:	b29a      	uxth	r2, r3
 80113c0:	4b76      	ldr	r3, [pc, #472]	; (801159c <tcp_receive+0xb0c>)
 80113c2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80113c4:	4b75      	ldr	r3, [pc, #468]	; (801159c <tcp_receive+0xb0c>)
 80113c6:	685a      	ldr	r2, [r3, #4]
 80113c8:	4b74      	ldr	r3, [pc, #464]	; (801159c <tcp_receive+0xb0c>)
 80113ca:	891b      	ldrh	r3, [r3, #8]
 80113cc:	4619      	mov	r1, r3
 80113ce:	4610      	mov	r0, r2
 80113d0:	f7fb fc50 	bl	800cc74 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80113d4:	4b71      	ldr	r3, [pc, #452]	; (801159c <tcp_receive+0xb0c>)
 80113d6:	891c      	ldrh	r4, [r3, #8]
 80113d8:	4b70      	ldr	r3, [pc, #448]	; (801159c <tcp_receive+0xb0c>)
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	899b      	ldrh	r3, [r3, #12]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7f9 fa45 	bl	800a870 <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	f003 0303 	and.w	r3, r3, #3
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d001      	beq.n	80113f6 <tcp_receive+0x966>
 80113f2:	2301      	movs	r3, #1
 80113f4:	e000      	b.n	80113f8 <tcp_receive+0x968>
 80113f6:	2300      	movs	r3, #0
 80113f8:	4423      	add	r3, r4
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	4b65      	ldr	r3, [pc, #404]	; (8011594 <tcp_receive+0xb04>)
 80113fe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011400:	4b64      	ldr	r3, [pc, #400]	; (8011594 <tcp_receive+0xb04>)
 8011402:	881b      	ldrh	r3, [r3, #0]
 8011404:	461a      	mov	r2, r3
 8011406:	4b64      	ldr	r3, [pc, #400]	; (8011598 <tcp_receive+0xb08>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	441a      	add	r2, r3
 801140c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140e:	68db      	ldr	r3, [r3, #12]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	429a      	cmp	r2, r3
 8011414:	d006      	beq.n	8011424 <tcp_receive+0x994>
 8011416:	4b62      	ldr	r3, [pc, #392]	; (80115a0 <tcp_receive+0xb10>)
 8011418:	f240 52fd 	movw	r2, #1533	; 0x5fd
 801141c:	4961      	ldr	r1, [pc, #388]	; (80115a4 <tcp_receive+0xb14>)
 801141e:	4862      	ldr	r0, [pc, #392]	; (80115a8 <tcp_receive+0xb18>)
 8011420:	f008 fd7c 	bl	8019f1c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011428:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801142a:	4b5a      	ldr	r3, [pc, #360]	; (8011594 <tcp_receive+0xb04>)
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	461a      	mov	r2, r3
 8011430:	4b59      	ldr	r3, [pc, #356]	; (8011598 <tcp_receive+0xb08>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	441a      	add	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801143e:	4b55      	ldr	r3, [pc, #340]	; (8011594 <tcp_receive+0xb04>)
 8011440:	881b      	ldrh	r3, [r3, #0]
 8011442:	429a      	cmp	r2, r3
 8011444:	d206      	bcs.n	8011454 <tcp_receive+0x9c4>
 8011446:	4b56      	ldr	r3, [pc, #344]	; (80115a0 <tcp_receive+0xb10>)
 8011448:	f240 6207 	movw	r2, #1543	; 0x607
 801144c:	4957      	ldr	r1, [pc, #348]	; (80115ac <tcp_receive+0xb1c>)
 801144e:	4856      	ldr	r0, [pc, #344]	; (80115a8 <tcp_receive+0xb18>)
 8011450:	f008 fd64 	bl	8019f1c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011458:	4b4e      	ldr	r3, [pc, #312]	; (8011594 <tcp_receive+0xb04>)
 801145a:	881b      	ldrh	r3, [r3, #0]
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	b29a      	uxth	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f7fc fda1 	bl	800dfac <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801146a:	4b4c      	ldr	r3, [pc, #304]	; (801159c <tcp_receive+0xb0c>)
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	891b      	ldrh	r3, [r3, #8]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d006      	beq.n	8011482 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011474:	4b49      	ldr	r3, [pc, #292]	; (801159c <tcp_receive+0xb0c>)
 8011476:	685b      	ldr	r3, [r3, #4]
 8011478:	4a4d      	ldr	r2, [pc, #308]	; (80115b0 <tcp_receive+0xb20>)
 801147a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801147c:	4b47      	ldr	r3, [pc, #284]	; (801159c <tcp_receive+0xb0c>)
 801147e:	2200      	movs	r2, #0
 8011480:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011482:	4b46      	ldr	r3, [pc, #280]	; (801159c <tcp_receive+0xb0c>)
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	899b      	ldrh	r3, [r3, #12]
 8011488:	b29b      	uxth	r3, r3
 801148a:	4618      	mov	r0, r3
 801148c:	f7f9 f9f0 	bl	800a870 <lwip_htons>
 8011490:	4603      	mov	r3, r0
 8011492:	b2db      	uxtb	r3, r3
 8011494:	f003 0301 	and.w	r3, r3, #1
 8011498:	2b00      	cmp	r3, #0
 801149a:	f000 80b8 	beq.w	801160e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801149e:	4b45      	ldr	r3, [pc, #276]	; (80115b4 <tcp_receive+0xb24>)
 80114a0:	781b      	ldrb	r3, [r3, #0]
 80114a2:	f043 0320 	orr.w	r3, r3, #32
 80114a6:	b2da      	uxtb	r2, r3
 80114a8:	4b42      	ldr	r3, [pc, #264]	; (80115b4 <tcp_receive+0xb24>)
 80114aa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114ac:	e0af      	b.n	801160e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114b2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	4a36      	ldr	r2, [pc, #216]	; (8011598 <tcp_receive+0xb08>)
 80114be:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	891b      	ldrh	r3, [r3, #8]
 80114c4:	461c      	mov	r4, r3
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	899b      	ldrh	r3, [r3, #12]
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7f9 f9ce 	bl	800a870 <lwip_htons>
 80114d4:	4603      	mov	r3, r0
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	f003 0303 	and.w	r3, r3, #3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <tcp_receive+0xa54>
 80114e0:	2301      	movs	r3, #1
 80114e2:	e000      	b.n	80114e6 <tcp_receive+0xa56>
 80114e4:	2300      	movs	r3, #0
 80114e6:	191a      	adds	r2, r3, r4
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ec:	441a      	add	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114f6:	461c      	mov	r4, r3
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	891b      	ldrh	r3, [r3, #8]
 80114fc:	461d      	mov	r5, r3
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	899b      	ldrh	r3, [r3, #12]
 8011504:	b29b      	uxth	r3, r3
 8011506:	4618      	mov	r0, r3
 8011508:	f7f9 f9b2 	bl	800a870 <lwip_htons>
 801150c:	4603      	mov	r3, r0
 801150e:	b2db      	uxtb	r3, r3
 8011510:	f003 0303 	and.w	r3, r3, #3
 8011514:	2b00      	cmp	r3, #0
 8011516:	d001      	beq.n	801151c <tcp_receive+0xa8c>
 8011518:	2301      	movs	r3, #1
 801151a:	e000      	b.n	801151e <tcp_receive+0xa8e>
 801151c:	2300      	movs	r3, #0
 801151e:	442b      	add	r3, r5
 8011520:	429c      	cmp	r4, r3
 8011522:	d206      	bcs.n	8011532 <tcp_receive+0xaa2>
 8011524:	4b1e      	ldr	r3, [pc, #120]	; (80115a0 <tcp_receive+0xb10>)
 8011526:	f240 622c 	movw	r2, #1580	; 0x62c
 801152a:	4923      	ldr	r1, [pc, #140]	; (80115b8 <tcp_receive+0xb28>)
 801152c:	481e      	ldr	r0, [pc, #120]	; (80115a8 <tcp_receive+0xb18>)
 801152e:	f008 fcf5 	bl	8019f1c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	891b      	ldrh	r3, [r3, #8]
 8011536:	461c      	mov	r4, r3
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	899b      	ldrh	r3, [r3, #12]
 801153e:	b29b      	uxth	r3, r3
 8011540:	4618      	mov	r0, r3
 8011542:	f7f9 f995 	bl	800a870 <lwip_htons>
 8011546:	4603      	mov	r3, r0
 8011548:	b2db      	uxtb	r3, r3
 801154a:	f003 0303 	and.w	r3, r3, #3
 801154e:	2b00      	cmp	r3, #0
 8011550:	d001      	beq.n	8011556 <tcp_receive+0xac6>
 8011552:	2301      	movs	r3, #1
 8011554:	e000      	b.n	8011558 <tcp_receive+0xac8>
 8011556:	2300      	movs	r3, #0
 8011558:	1919      	adds	r1, r3, r4
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801155e:	b28b      	uxth	r3, r1
 8011560:	1ad3      	subs	r3, r2, r3
 8011562:	b29a      	uxth	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7fc fd1f 	bl	800dfac <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	891b      	ldrh	r3, [r3, #8]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d028      	beq.n	80115ca <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011578:	4b0d      	ldr	r3, [pc, #52]	; (80115b0 <tcp_receive+0xb20>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d01d      	beq.n	80115bc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011580:	4b0b      	ldr	r3, [pc, #44]	; (80115b0 <tcp_receive+0xb20>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	4619      	mov	r1, r3
 801158a:	4610      	mov	r0, r2
 801158c:	f7fb fdc6 	bl	800d11c <pbuf_cat>
 8011590:	e018      	b.n	80115c4 <tcp_receive+0xb34>
 8011592:	bf00      	nop
 8011594:	200214c6 	.word	0x200214c6
 8011598:	200214bc 	.word	0x200214bc
 801159c:	2002149c 	.word	0x2002149c
 80115a0:	0801fe64 	.word	0x0801fe64
 80115a4:	08020244 	.word	0x08020244
 80115a8:	0801feb0 	.word	0x0801feb0
 80115ac:	08020280 	.word	0x08020280
 80115b0:	200214cc 	.word	0x200214cc
 80115b4:	200214c9 	.word	0x200214c9
 80115b8:	080202a0 	.word	0x080202a0
            } else {
              recv_data = cseg->p;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	4a70      	ldr	r2, [pc, #448]	; (8011784 <tcp_receive+0xcf4>)
 80115c2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	2200      	movs	r2, #0
 80115c8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	899b      	ldrh	r3, [r3, #12]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7f9 f94c 	bl	800a870 <lwip_htons>
 80115d8:	4603      	mov	r3, r0
 80115da:	b2db      	uxtb	r3, r3
 80115dc:	f003 0301 	and.w	r3, r3, #1
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00d      	beq.n	8011600 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80115e4:	4b68      	ldr	r3, [pc, #416]	; (8011788 <tcp_receive+0xcf8>)
 80115e6:	781b      	ldrb	r3, [r3, #0]
 80115e8:	f043 0320 	orr.w	r3, r3, #32
 80115ec:	b2da      	uxtb	r2, r3
 80115ee:	4b66      	ldr	r3, [pc, #408]	; (8011788 <tcp_receive+0xcf8>)
 80115f0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	7d1b      	ldrb	r3, [r3, #20]
 80115f6:	2b04      	cmp	r3, #4
 80115f8:	d102      	bne.n	8011600 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2207      	movs	r2, #7
 80115fe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	681a      	ldr	r2, [r3, #0]
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011608:	68b8      	ldr	r0, [r7, #8]
 801160a:	f7fd fb09 	bl	800ec20 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011612:	2b00      	cmp	r3, #0
 8011614:	d008      	beq.n	8011628 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	685a      	ldr	r2, [r3, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011622:	429a      	cmp	r2, r3
 8011624:	f43f af43 	beq.w	80114ae <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	8b5b      	ldrh	r3, [r3, #26]
 801162c:	f003 0301 	and.w	r3, r3, #1
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00e      	beq.n	8011652 <tcp_receive+0xbc2>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	8b5b      	ldrh	r3, [r3, #26]
 8011638:	f023 0301 	bic.w	r3, r3, #1
 801163c:	b29a      	uxth	r2, r3
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	835a      	strh	r2, [r3, #26]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	8b5b      	ldrh	r3, [r3, #26]
 8011646:	f043 0302 	orr.w	r3, r3, #2
 801164a:	b29a      	uxth	r2, r3
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011650:	e188      	b.n	8011964 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	8b5b      	ldrh	r3, [r3, #26]
 8011656:	f043 0301 	orr.w	r3, r3, #1
 801165a:	b29a      	uxth	r2, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011660:	e180      	b.n	8011964 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011666:	2b00      	cmp	r3, #0
 8011668:	d106      	bne.n	8011678 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801166a:	4848      	ldr	r0, [pc, #288]	; (801178c <tcp_receive+0xcfc>)
 801166c:	f7fd faf0 	bl	800ec50 <tcp_seg_copy>
 8011670:	4602      	mov	r2, r0
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	675a      	str	r2, [r3, #116]	; 0x74
 8011676:	e16d      	b.n	8011954 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011678:	2300      	movs	r3, #0
 801167a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011680:	63bb      	str	r3, [r7, #56]	; 0x38
 8011682:	e157      	b.n	8011934 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	685a      	ldr	r2, [r3, #4]
 801168a:	4b41      	ldr	r3, [pc, #260]	; (8011790 <tcp_receive+0xd00>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	429a      	cmp	r2, r3
 8011690:	d11d      	bne.n	80116ce <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011692:	4b3e      	ldr	r3, [pc, #248]	; (801178c <tcp_receive+0xcfc>)
 8011694:	891a      	ldrh	r2, [r3, #8]
 8011696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011698:	891b      	ldrh	r3, [r3, #8]
 801169a:	429a      	cmp	r2, r3
 801169c:	f240 814f 	bls.w	801193e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116a0:	483a      	ldr	r0, [pc, #232]	; (801178c <tcp_receive+0xcfc>)
 80116a2:	f7fd fad5 	bl	800ec50 <tcp_seg_copy>
 80116a6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f000 8149 	beq.w	8011942 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80116b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d003      	beq.n	80116be <tcp_receive+0xc2e>
                    prev->next = cseg;
 80116b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	601a      	str	r2, [r3, #0]
 80116bc:	e002      	b.n	80116c4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	697a      	ldr	r2, [r7, #20]
 80116c2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80116c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116c6:	6978      	ldr	r0, [r7, #20]
 80116c8:	f7ff f8de 	bl	8010888 <tcp_oos_insert_segment>
                }
                break;
 80116cc:	e139      	b.n	8011942 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80116ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d117      	bne.n	8011704 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80116d4:	4b2e      	ldr	r3, [pc, #184]	; (8011790 <tcp_receive+0xd00>)
 80116d6:	681a      	ldr	r2, [r3, #0]
 80116d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	1ad3      	subs	r3, r2, r3
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	da57      	bge.n	8011794 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116e4:	4829      	ldr	r0, [pc, #164]	; (801178c <tcp_receive+0xcfc>)
 80116e6:	f7fd fab3 	bl	800ec50 <tcp_seg_copy>
 80116ea:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	f000 8129 	beq.w	8011946 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	69ba      	ldr	r2, [r7, #24]
 80116f8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80116fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116fc:	69b8      	ldr	r0, [r7, #24]
 80116fe:	f7ff f8c3 	bl	8010888 <tcp_oos_insert_segment>
                  }
                  break;
 8011702:	e120      	b.n	8011946 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011704:	4b22      	ldr	r3, [pc, #136]	; (8011790 <tcp_receive+0xd00>)
 8011706:	681a      	ldr	r2, [r3, #0]
 8011708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801170a:	68db      	ldr	r3, [r3, #12]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	1ad3      	subs	r3, r2, r3
 8011710:	3b01      	subs	r3, #1
 8011712:	2b00      	cmp	r3, #0
 8011714:	db3e      	blt.n	8011794 <tcp_receive+0xd04>
 8011716:	4b1e      	ldr	r3, [pc, #120]	; (8011790 <tcp_receive+0xd00>)
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171c:	68db      	ldr	r3, [r3, #12]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	3301      	adds	r3, #1
 8011724:	2b00      	cmp	r3, #0
 8011726:	dc35      	bgt.n	8011794 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011728:	4818      	ldr	r0, [pc, #96]	; (801178c <tcp_receive+0xcfc>)
 801172a:	f7fd fa91 	bl	800ec50 <tcp_seg_copy>
 801172e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	2b00      	cmp	r3, #0
 8011734:	f000 8109 	beq.w	801194a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011740:	8912      	ldrh	r2, [r2, #8]
 8011742:	441a      	add	r2, r3
 8011744:	4b12      	ldr	r3, [pc, #72]	; (8011790 <tcp_receive+0xd00>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	1ad3      	subs	r3, r2, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	dd12      	ble.n	8011774 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801174e:	4b10      	ldr	r3, [pc, #64]	; (8011790 <tcp_receive+0xd00>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	b29a      	uxth	r2, r3
 8011754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011756:	68db      	ldr	r3, [r3, #12]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	b29b      	uxth	r3, r3
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	b29a      	uxth	r2, r3
 8011760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011762:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011766:	685a      	ldr	r2, [r3, #4]
 8011768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801176a:	891b      	ldrh	r3, [r3, #8]
 801176c:	4619      	mov	r1, r3
 801176e:	4610      	mov	r0, r2
 8011770:	f7fb fa80 	bl	800cc74 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011776:	69fa      	ldr	r2, [r7, #28]
 8011778:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801177a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801177c:	69f8      	ldr	r0, [r7, #28]
 801177e:	f7ff f883 	bl	8010888 <tcp_oos_insert_segment>
                  }
                  break;
 8011782:	e0e2      	b.n	801194a <tcp_receive+0xeba>
 8011784:	200214cc 	.word	0x200214cc
 8011788:	200214c9 	.word	0x200214c9
 801178c:	2002149c 	.word	0x2002149c
 8011790:	200214bc 	.word	0x200214bc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011796:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	f040 80c6 	bne.w	801192e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80117a2:	4b80      	ldr	r3, [pc, #512]	; (80119a4 <tcp_receive+0xf14>)
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	f340 80bd 	ble.w	801192e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b6:	68db      	ldr	r3, [r3, #12]
 80117b8:	899b      	ldrh	r3, [r3, #12]
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	4618      	mov	r0, r3
 80117be:	f7f9 f857 	bl	800a870 <lwip_htons>
 80117c2:	4603      	mov	r3, r0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	f003 0301 	and.w	r3, r3, #1
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f040 80bf 	bne.w	801194e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80117d0:	4875      	ldr	r0, [pc, #468]	; (80119a8 <tcp_receive+0xf18>)
 80117d2:	f7fd fa3d 	bl	800ec50 <tcp_seg_copy>
 80117d6:	4602      	mov	r2, r0
 80117d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117da:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80117dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f000 80b6 	beq.w	8011952 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80117e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117ee:	8912      	ldrh	r2, [r2, #8]
 80117f0:	441a      	add	r2, r3
 80117f2:	4b6c      	ldr	r3, [pc, #432]	; (80119a4 <tcp_receive+0xf14>)
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	dd12      	ble.n	8011822 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80117fc:	4b69      	ldr	r3, [pc, #420]	; (80119a4 <tcp_receive+0xf14>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	b29a      	uxth	r2, r3
 8011802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	685b      	ldr	r3, [r3, #4]
 8011808:	b29b      	uxth	r3, r3
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	b29a      	uxth	r2, r3
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011814:	685a      	ldr	r2, [r3, #4]
 8011816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011818:	891b      	ldrh	r3, [r3, #8]
 801181a:	4619      	mov	r1, r3
 801181c:	4610      	mov	r0, r2
 801181e:	f7fb fa29 	bl	800cc74 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011822:	4b62      	ldr	r3, [pc, #392]	; (80119ac <tcp_receive+0xf1c>)
 8011824:	881b      	ldrh	r3, [r3, #0]
 8011826:	461a      	mov	r2, r3
 8011828:	4b5e      	ldr	r3, [pc, #376]	; (80119a4 <tcp_receive+0xf14>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	441a      	add	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011832:	6879      	ldr	r1, [r7, #4]
 8011834:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011836:	440b      	add	r3, r1
 8011838:	1ad3      	subs	r3, r2, r3
 801183a:	2b00      	cmp	r3, #0
 801183c:	f340 8089 	ble.w	8011952 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	899b      	ldrh	r3, [r3, #12]
 8011848:	b29b      	uxth	r3, r3
 801184a:	4618      	mov	r0, r3
 801184c:	f7f9 f810 	bl	800a870 <lwip_htons>
 8011850:	4603      	mov	r3, r0
 8011852:	b2db      	uxtb	r3, r3
 8011854:	f003 0301 	and.w	r3, r3, #1
 8011858:	2b00      	cmp	r3, #0
 801185a:	d022      	beq.n	80118a2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	899b      	ldrh	r3, [r3, #12]
 8011864:	b29b      	uxth	r3, r3
 8011866:	b21b      	sxth	r3, r3
 8011868:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801186c:	b21c      	sxth	r4, r3
 801186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	899b      	ldrh	r3, [r3, #12]
 8011876:	b29b      	uxth	r3, r3
 8011878:	4618      	mov	r0, r3
 801187a:	f7f8 fff9 	bl	800a870 <lwip_htons>
 801187e:	4603      	mov	r3, r0
 8011880:	b2db      	uxtb	r3, r3
 8011882:	b29b      	uxth	r3, r3
 8011884:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011888:	b29b      	uxth	r3, r3
 801188a:	4618      	mov	r0, r3
 801188c:	f7f8 fff0 	bl	800a870 <lwip_htons>
 8011890:	4603      	mov	r3, r0
 8011892:	b21b      	sxth	r3, r3
 8011894:	4323      	orrs	r3, r4
 8011896:	b21a      	sxth	r2, r3
 8011898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	b292      	uxth	r2, r2
 80118a0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118ac:	4413      	add	r3, r2
 80118ae:	b299      	uxth	r1, r3
 80118b0:	4b3c      	ldr	r3, [pc, #240]	; (80119a4 <tcp_receive+0xf14>)
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	1a8a      	subs	r2, r1, r2
 80118bc:	b292      	uxth	r2, r2
 80118be:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80118c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	685a      	ldr	r2, [r3, #4]
 80118c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	891b      	ldrh	r3, [r3, #8]
 80118cc:	4619      	mov	r1, r3
 80118ce:	4610      	mov	r0, r2
 80118d0:	f7fb f9d0 	bl	800cc74 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80118d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	891c      	ldrh	r4, [r3, #8]
 80118da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	899b      	ldrh	r3, [r3, #12]
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	4618      	mov	r0, r3
 80118e6:	f7f8 ffc3 	bl	800a870 <lwip_htons>
 80118ea:	4603      	mov	r3, r0
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	f003 0303 	and.w	r3, r3, #3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d001      	beq.n	80118fa <tcp_receive+0xe6a>
 80118f6:	2301      	movs	r3, #1
 80118f8:	e000      	b.n	80118fc <tcp_receive+0xe6c>
 80118fa:	2300      	movs	r3, #0
 80118fc:	4423      	add	r3, r4
 80118fe:	b29a      	uxth	r2, r3
 8011900:	4b2a      	ldr	r3, [pc, #168]	; (80119ac <tcp_receive+0xf1c>)
 8011902:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011904:	4b29      	ldr	r3, [pc, #164]	; (80119ac <tcp_receive+0xf1c>)
 8011906:	881b      	ldrh	r3, [r3, #0]
 8011908:	461a      	mov	r2, r3
 801190a:	4b26      	ldr	r3, [pc, #152]	; (80119a4 <tcp_receive+0xf14>)
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	441a      	add	r2, r3
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011914:	6879      	ldr	r1, [r7, #4]
 8011916:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011918:	440b      	add	r3, r1
 801191a:	429a      	cmp	r2, r3
 801191c:	d019      	beq.n	8011952 <tcp_receive+0xec2>
 801191e:	4b24      	ldr	r3, [pc, #144]	; (80119b0 <tcp_receive+0xf20>)
 8011920:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011924:	4923      	ldr	r1, [pc, #140]	; (80119b4 <tcp_receive+0xf24>)
 8011926:	4824      	ldr	r0, [pc, #144]	; (80119b8 <tcp_receive+0xf28>)
 8011928:	f008 faf8 	bl	8019f1c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801192c:	e011      	b.n	8011952 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801192e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	63bb      	str	r3, [r7, #56]	; 0x38
 8011934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011936:	2b00      	cmp	r3, #0
 8011938:	f47f aea4 	bne.w	8011684 <tcp_receive+0xbf4>
 801193c:	e00a      	b.n	8011954 <tcp_receive+0xec4>
                break;
 801193e:	bf00      	nop
 8011940:	e008      	b.n	8011954 <tcp_receive+0xec4>
                break;
 8011942:	bf00      	nop
 8011944:	e006      	b.n	8011954 <tcp_receive+0xec4>
                  break;
 8011946:	bf00      	nop
 8011948:	e004      	b.n	8011954 <tcp_receive+0xec4>
                  break;
 801194a:	bf00      	nop
 801194c:	e002      	b.n	8011954 <tcp_receive+0xec4>
                  break;
 801194e:	bf00      	nop
 8011950:	e000      	b.n	8011954 <tcp_receive+0xec4>
                break;
 8011952:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f001 fe9d 	bl	8013694 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801195a:	e003      	b.n	8011964 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f001 fe99 	bl	8013694 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011962:	e01a      	b.n	801199a <tcp_receive+0xf0a>
 8011964:	e019      	b.n	801199a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011966:	4b0f      	ldr	r3, [pc, #60]	; (80119a4 <tcp_receive+0xf14>)
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196e:	1ad3      	subs	r3, r2, r3
 8011970:	2b00      	cmp	r3, #0
 8011972:	db0a      	blt.n	801198a <tcp_receive+0xefa>
 8011974:	4b0b      	ldr	r3, [pc, #44]	; (80119a4 <tcp_receive+0xf14>)
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197c:	6879      	ldr	r1, [r7, #4]
 801197e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011980:	440b      	add	r3, r1
 8011982:	1ad3      	subs	r3, r2, r3
 8011984:	3301      	adds	r3, #1
 8011986:	2b00      	cmp	r3, #0
 8011988:	dd07      	ble.n	801199a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	8b5b      	ldrh	r3, [r3, #26]
 801198e:	f043 0302 	orr.w	r3, r3, #2
 8011992:	b29a      	uxth	r2, r3
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011998:	e7ff      	b.n	801199a <tcp_receive+0xf0a>
 801199a:	bf00      	nop
 801199c:	3750      	adds	r7, #80	; 0x50
 801199e:	46bd      	mov	sp, r7
 80119a0:	bdb0      	pop	{r4, r5, r7, pc}
 80119a2:	bf00      	nop
 80119a4:	200214bc 	.word	0x200214bc
 80119a8:	2002149c 	.word	0x2002149c
 80119ac:	200214c6 	.word	0x200214c6
 80119b0:	0801fe64 	.word	0x0801fe64
 80119b4:	0802020c 	.word	0x0802020c
 80119b8:	0801feb0 	.word	0x0801feb0

080119bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119bc:	b480      	push	{r7}
 80119be:	b083      	sub	sp, #12
 80119c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119c2:	4b15      	ldr	r3, [pc, #84]	; (8011a18 <tcp_get_next_optbyte+0x5c>)
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	1c5a      	adds	r2, r3, #1
 80119c8:	b291      	uxth	r1, r2
 80119ca:	4a13      	ldr	r2, [pc, #76]	; (8011a18 <tcp_get_next_optbyte+0x5c>)
 80119cc:	8011      	strh	r1, [r2, #0]
 80119ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119d0:	4b12      	ldr	r3, [pc, #72]	; (8011a1c <tcp_get_next_optbyte+0x60>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d004      	beq.n	80119e2 <tcp_get_next_optbyte+0x26>
 80119d8:	4b11      	ldr	r3, [pc, #68]	; (8011a20 <tcp_get_next_optbyte+0x64>)
 80119da:	881b      	ldrh	r3, [r3, #0]
 80119dc:	88fa      	ldrh	r2, [r7, #6]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d208      	bcs.n	80119f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80119e2:	4b10      	ldr	r3, [pc, #64]	; (8011a24 <tcp_get_next_optbyte+0x68>)
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	3314      	adds	r3, #20
 80119e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80119ea:	88fb      	ldrh	r3, [r7, #6]
 80119ec:	683a      	ldr	r2, [r7, #0]
 80119ee:	4413      	add	r3, r2
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	e00b      	b.n	8011a0c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80119f4:	88fb      	ldrh	r3, [r7, #6]
 80119f6:	b2da      	uxtb	r2, r3
 80119f8:	4b09      	ldr	r3, [pc, #36]	; (8011a20 <tcp_get_next_optbyte+0x64>)
 80119fa:	881b      	ldrh	r3, [r3, #0]
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	1ad3      	subs	r3, r2, r3
 8011a00:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011a02:	4b06      	ldr	r3, [pc, #24]	; (8011a1c <tcp_get_next_optbyte+0x60>)
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	797b      	ldrb	r3, [r7, #5]
 8011a08:	4413      	add	r3, r2
 8011a0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr
 8011a18:	200214b8 	.word	0x200214b8
 8011a1c:	200214b4 	.word	0x200214b4
 8011a20:	200214b2 	.word	0x200214b2
 8011a24:	200214ac 	.word	0x200214ac

08011a28 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d106      	bne.n	8011a44 <tcp_parseopt+0x1c>
 8011a36:	4b31      	ldr	r3, [pc, #196]	; (8011afc <tcp_parseopt+0xd4>)
 8011a38:	f240 727d 	movw	r2, #1917	; 0x77d
 8011a3c:	4930      	ldr	r1, [pc, #192]	; (8011b00 <tcp_parseopt+0xd8>)
 8011a3e:	4831      	ldr	r0, [pc, #196]	; (8011b04 <tcp_parseopt+0xdc>)
 8011a40:	f008 fa6c 	bl	8019f1c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a44:	4b30      	ldr	r3, [pc, #192]	; (8011b08 <tcp_parseopt+0xe0>)
 8011a46:	881b      	ldrh	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d053      	beq.n	8011af4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a4c:	4b2f      	ldr	r3, [pc, #188]	; (8011b0c <tcp_parseopt+0xe4>)
 8011a4e:	2200      	movs	r2, #0
 8011a50:	801a      	strh	r2, [r3, #0]
 8011a52:	e043      	b.n	8011adc <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8011a54:	f7ff ffb2 	bl	80119bc <tcp_get_next_optbyte>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a5c:	7bfb      	ldrb	r3, [r7, #15]
 8011a5e:	2b01      	cmp	r3, #1
 8011a60:	d03c      	beq.n	8011adc <tcp_parseopt+0xb4>
 8011a62:	2b02      	cmp	r3, #2
 8011a64:	d002      	beq.n	8011a6c <tcp_parseopt+0x44>
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d03f      	beq.n	8011aea <tcp_parseopt+0xc2>
 8011a6a:	e026      	b.n	8011aba <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a6c:	f7ff ffa6 	bl	80119bc <tcp_get_next_optbyte>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b04      	cmp	r3, #4
 8011a74:	d13b      	bne.n	8011aee <tcp_parseopt+0xc6>
 8011a76:	4b25      	ldr	r3, [pc, #148]	; (8011b0c <tcp_parseopt+0xe4>)
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	3302      	adds	r3, #2
 8011a7c:	4a22      	ldr	r2, [pc, #136]	; (8011b08 <tcp_parseopt+0xe0>)
 8011a7e:	8812      	ldrh	r2, [r2, #0]
 8011a80:	4293      	cmp	r3, r2
 8011a82:	dc34      	bgt.n	8011aee <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011a84:	f7ff ff9a 	bl	80119bc <tcp_get_next_optbyte>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	021b      	lsls	r3, r3, #8
 8011a8e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011a90:	f7ff ff94 	bl	80119bc <tcp_get_next_optbyte>
 8011a94:	4603      	mov	r3, r0
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	89bb      	ldrh	r3, [r7, #12]
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011a9e:	89bb      	ldrh	r3, [r7, #12]
 8011aa0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011aa4:	d804      	bhi.n	8011ab0 <tcp_parseopt+0x88>
 8011aa6:	89bb      	ldrh	r3, [r7, #12]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d001      	beq.n	8011ab0 <tcp_parseopt+0x88>
 8011aac:	89ba      	ldrh	r2, [r7, #12]
 8011aae:	e001      	b.n	8011ab4 <tcp_parseopt+0x8c>
 8011ab0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ab8:	e010      	b.n	8011adc <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011aba:	f7ff ff7f 	bl	80119bc <tcp_get_next_optbyte>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ac2:	7afb      	ldrb	r3, [r7, #11]
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d914      	bls.n	8011af2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ac8:	7afb      	ldrb	r3, [r7, #11]
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	4b0f      	ldr	r3, [pc, #60]	; (8011b0c <tcp_parseopt+0xe4>)
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	3b02      	subs	r3, #2
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	4b0c      	ldr	r3, [pc, #48]	; (8011b0c <tcp_parseopt+0xe4>)
 8011ada:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011adc:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <tcp_parseopt+0xe4>)
 8011ade:	881a      	ldrh	r2, [r3, #0]
 8011ae0:	4b09      	ldr	r3, [pc, #36]	; (8011b08 <tcp_parseopt+0xe0>)
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d3b5      	bcc.n	8011a54 <tcp_parseopt+0x2c>
 8011ae8:	e004      	b.n	8011af4 <tcp_parseopt+0xcc>
          return;
 8011aea:	bf00      	nop
 8011aec:	e002      	b.n	8011af4 <tcp_parseopt+0xcc>
            return;
 8011aee:	bf00      	nop
 8011af0:	e000      	b.n	8011af4 <tcp_parseopt+0xcc>
            return;
 8011af2:	bf00      	nop
      }
    }
  }
}
 8011af4:	3710      	adds	r7, #16
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	0801fe64 	.word	0x0801fe64
 8011b00:	080202c8 	.word	0x080202c8
 8011b04:	0801feb0 	.word	0x0801feb0
 8011b08:	200214b0 	.word	0x200214b0
 8011b0c:	200214b8 	.word	0x200214b8

08011b10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b10:	b480      	push	{r7}
 8011b12:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b14:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f043 0310 	orr.w	r3, r3, #16
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	4b03      	ldr	r3, [pc, #12]	; (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b20:	701a      	strb	r2, [r3, #0]
}
 8011b22:	bf00      	nop
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	200214c9 	.word	0x200214c9

08011b30 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00a      	beq.n	8011b58 <tcp_route+0x28>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	7a1b      	ldrb	r3, [r3, #8]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d006      	beq.n	8011b58 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	7a1b      	ldrb	r3, [r3, #8]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fa fe8c 	bl	800c86c <netif_get_by_index>
 8011b54:	4603      	mov	r3, r0
 8011b56:	e003      	b.n	8011b60 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f005 fd79 	bl	8017650 <ip4_route>
 8011b5e:	4603      	mov	r3, r0
  }
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b087      	sub	sp, #28
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	603b      	str	r3, [r7, #0]
 8011b74:	4613      	mov	r3, r2
 8011b76:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d105      	bne.n	8011b8a <tcp_create_segment+0x22>
 8011b7e:	4b44      	ldr	r3, [pc, #272]	; (8011c90 <tcp_create_segment+0x128>)
 8011b80:	22a3      	movs	r2, #163	; 0xa3
 8011b82:	4944      	ldr	r1, [pc, #272]	; (8011c94 <tcp_create_segment+0x12c>)
 8011b84:	4844      	ldr	r0, [pc, #272]	; (8011c98 <tcp_create_segment+0x130>)
 8011b86:	f008 f9c9 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <tcp_create_segment+0x34>
 8011b90:	4b3f      	ldr	r3, [pc, #252]	; (8011c90 <tcp_create_segment+0x128>)
 8011b92:	22a4      	movs	r2, #164	; 0xa4
 8011b94:	4941      	ldr	r1, [pc, #260]	; (8011c9c <tcp_create_segment+0x134>)
 8011b96:	4840      	ldr	r0, [pc, #256]	; (8011c98 <tcp_create_segment+0x130>)
 8011b98:	f008 f9c0 	bl	8019f1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f003 0304 	and.w	r3, r3, #4
 8011ba8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011baa:	2003      	movs	r0, #3
 8011bac:	f7fa faea 	bl	800c184 <memp_malloc>
 8011bb0:	6138      	str	r0, [r7, #16]
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d104      	bne.n	8011bc2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011bb8:	68b8      	ldr	r0, [r7, #8]
 8011bba:	f7fb f9e1 	bl	800cf80 <pbuf_free>
    return NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e061      	b.n	8011c86 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011bc8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	891a      	ldrh	r2, [r3, #8]
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d205      	bcs.n	8011bee <tcp_create_segment+0x86>
 8011be2:	4b2b      	ldr	r3, [pc, #172]	; (8011c90 <tcp_create_segment+0x128>)
 8011be4:	22b0      	movs	r2, #176	; 0xb0
 8011be6:	492e      	ldr	r1, [pc, #184]	; (8011ca0 <tcp_create_segment+0x138>)
 8011be8:	482b      	ldr	r0, [pc, #172]	; (8011c98 <tcp_create_segment+0x130>)
 8011bea:	f008 f997 	bl	8019f1c <iprintf>
  seg->len = p->tot_len - optlen;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	891a      	ldrh	r2, [r3, #8]
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011bfe:	2114      	movs	r1, #20
 8011c00:	68b8      	ldr	r0, [r7, #8]
 8011c02:	f7fb f927 	bl	800ce54 <pbuf_add_header>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d004      	beq.n	8011c16 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c0c:	6938      	ldr	r0, [r7, #16]
 8011c0e:	f7fd f807 	bl	800ec20 <tcp_seg_free>
    return NULL;
 8011c12:	2300      	movs	r3, #0
 8011c14:	e037      	b.n	8011c86 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	685a      	ldr	r2, [r3, #4]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	8ada      	ldrh	r2, [r3, #22]
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	68dc      	ldr	r4, [r3, #12]
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7f8 fe21 	bl	800a870 <lwip_htons>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	8b1a      	ldrh	r2, [r3, #24]
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	68dc      	ldr	r4, [r3, #12]
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	f7f8 fe18 	bl	800a870 <lwip_htons>
 8011c40:	4603      	mov	r3, r0
 8011c42:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	68dc      	ldr	r4, [r3, #12]
 8011c48:	6838      	ldr	r0, [r7, #0]
 8011c4a:	f7f8 fe26 	bl	800a89a <lwip_htonl>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	089b      	lsrs	r3, r3, #2
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	3305      	adds	r3, #5
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	031b      	lsls	r3, r3, #12
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	79fb      	ldrb	r3, [r7, #7]
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	4313      	orrs	r3, r2
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	68dc      	ldr	r4, [r3, #12]
 8011c6e:	4610      	mov	r0, r2
 8011c70:	f7f8 fdfe 	bl	800a870 <lwip_htons>
 8011c74:	4603      	mov	r3, r0
 8011c76:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	749a      	strb	r2, [r3, #18]
 8011c80:	2200      	movs	r2, #0
 8011c82:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c84:	693b      	ldr	r3, [r7, #16]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	371c      	adds	r7, #28
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd90      	pop	{r4, r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	080202e4 	.word	0x080202e4
 8011c94:	08020318 	.word	0x08020318
 8011c98:	08020338 	.word	0x08020338
 8011c9c:	08020360 	.word	0x08020360
 8011ca0:	08020384 	.word	0x08020384

08011ca4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b086      	sub	sp, #24
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	607b      	str	r3, [r7, #4]
 8011cac:	4603      	mov	r3, r0
 8011cae:	73fb      	strb	r3, [r7, #15]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	81bb      	strh	r3, [r7, #12]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011cb8:	89bb      	ldrh	r3, [r7, #12]
 8011cba:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d105      	bne.n	8011cce <tcp_pbuf_prealloc+0x2a>
 8011cc2:	4b30      	ldr	r3, [pc, #192]	; (8011d84 <tcp_pbuf_prealloc+0xe0>)
 8011cc4:	22e8      	movs	r2, #232	; 0xe8
 8011cc6:	4930      	ldr	r1, [pc, #192]	; (8011d88 <tcp_pbuf_prealloc+0xe4>)
 8011cc8:	4830      	ldr	r0, [pc, #192]	; (8011d8c <tcp_pbuf_prealloc+0xe8>)
 8011cca:	f008 f927 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011cce:	6a3b      	ldr	r3, [r7, #32]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d105      	bne.n	8011ce0 <tcp_pbuf_prealloc+0x3c>
 8011cd4:	4b2b      	ldr	r3, [pc, #172]	; (8011d84 <tcp_pbuf_prealloc+0xe0>)
 8011cd6:	22e9      	movs	r2, #233	; 0xe9
 8011cd8:	492d      	ldr	r1, [pc, #180]	; (8011d90 <tcp_pbuf_prealloc+0xec>)
 8011cda:	482c      	ldr	r0, [pc, #176]	; (8011d8c <tcp_pbuf_prealloc+0xe8>)
 8011cdc:	f008 f91e 	bl	8019f1c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011ce0:	89ba      	ldrh	r2, [r7, #12]
 8011ce2:	897b      	ldrh	r3, [r7, #10]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d221      	bcs.n	8011d2c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011cec:	f003 0302 	and.w	r3, r3, #2
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d111      	bne.n	8011d18 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	8b5b      	ldrh	r3, [r3, #26]
 8011cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d115      	bne.n	8011d2c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d007      	beq.n	8011d18 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d08:	6a3b      	ldr	r3, [r7, #32]
 8011d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d103      	bne.n	8011d18 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d10:	6a3b      	ldr	r3, [r7, #32]
 8011d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d009      	beq.n	8011d2c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d18:	89bb      	ldrh	r3, [r7, #12]
 8011d1a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011d1e:	f023 0203 	bic.w	r2, r3, #3
 8011d22:	897b      	ldrh	r3, [r7, #10]
 8011d24:	4293      	cmp	r3, r2
 8011d26:	bf28      	it	cs
 8011d28:	4613      	movcs	r3, r2
 8011d2a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d2c:	8af9      	ldrh	r1, [r7, #22]
 8011d2e:	7bfb      	ldrb	r3, [r7, #15]
 8011d30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fa fe43 	bl	800c9c0 <pbuf_alloc>
 8011d3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d101      	bne.n	8011d46 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	e019      	b.n	8011d7a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d006      	beq.n	8011d5c <tcp_pbuf_prealloc+0xb8>
 8011d4e:	4b0d      	ldr	r3, [pc, #52]	; (8011d84 <tcp_pbuf_prealloc+0xe0>)
 8011d50:	f240 120b 	movw	r2, #267	; 0x10b
 8011d54:	490f      	ldr	r1, [pc, #60]	; (8011d94 <tcp_pbuf_prealloc+0xf0>)
 8011d56:	480d      	ldr	r0, [pc, #52]	; (8011d8c <tcp_pbuf_prealloc+0xe8>)
 8011d58:	f008 f8e0 	bl	8019f1c <iprintf>
  *oversize = p->len - length;
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	895a      	ldrh	r2, [r3, #10]
 8011d60:	89bb      	ldrh	r3, [r7, #12]
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	89ba      	ldrh	r2, [r7, #12]
 8011d6e:	811a      	strh	r2, [r3, #8]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	891a      	ldrh	r2, [r3, #8]
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	815a      	strh	r2, [r3, #10]
  return p;
 8011d78:	693b      	ldr	r3, [r7, #16]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3718      	adds	r7, #24
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	080202e4 	.word	0x080202e4
 8011d88:	0802039c 	.word	0x0802039c
 8011d8c:	08020338 	.word	0x08020338
 8011d90:	080203c0 	.word	0x080203c0
 8011d94:	080203e0 	.word	0x080203e0

08011d98 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	460b      	mov	r3, r1
 8011da2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d106      	bne.n	8011db8 <tcp_write_checks+0x20>
 8011daa:	4b33      	ldr	r3, [pc, #204]	; (8011e78 <tcp_write_checks+0xe0>)
 8011dac:	f240 1233 	movw	r2, #307	; 0x133
 8011db0:	4932      	ldr	r1, [pc, #200]	; (8011e7c <tcp_write_checks+0xe4>)
 8011db2:	4833      	ldr	r0, [pc, #204]	; (8011e80 <tcp_write_checks+0xe8>)
 8011db4:	f008 f8b2 	bl	8019f1c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	7d1b      	ldrb	r3, [r3, #20]
 8011dbc:	2b04      	cmp	r3, #4
 8011dbe:	d00e      	beq.n	8011dde <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011dc4:	2b07      	cmp	r3, #7
 8011dc6:	d00a      	beq.n	8011dde <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011dcc:	2b02      	cmp	r3, #2
 8011dce:	d006      	beq.n	8011dde <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011dd4:	2b03      	cmp	r3, #3
 8011dd6:	d002      	beq.n	8011dde <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011dd8:	f06f 030a 	mvn.w	r3, #10
 8011ddc:	e048      	b.n	8011e70 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011dde:	887b      	ldrh	r3, [r7, #2]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d101      	bne.n	8011de8 <tcp_write_checks+0x50>
    return ERR_OK;
 8011de4:	2300      	movs	r3, #0
 8011de6:	e043      	b.n	8011e70 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011dee:	887a      	ldrh	r2, [r7, #2]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d909      	bls.n	8011e08 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	8b5b      	ldrh	r3, [r3, #26]
 8011df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e02:	f04f 33ff 	mov.w	r3, #4294967295
 8011e06:	e033      	b.n	8011e70 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e0e:	2b08      	cmp	r3, #8
 8011e10:	d909      	bls.n	8011e26 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	8b5b      	ldrh	r3, [r3, #26]
 8011e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e20:	f04f 33ff 	mov.w	r3, #4294967295
 8011e24:	e024      	b.n	8011e70 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00f      	beq.n	8011e50 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d11a      	bne.n	8011e6e <tcp_write_checks+0xd6>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d116      	bne.n	8011e6e <tcp_write_checks+0xd6>
 8011e40:	4b0d      	ldr	r3, [pc, #52]	; (8011e78 <tcp_write_checks+0xe0>)
 8011e42:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8011e46:	490f      	ldr	r1, [pc, #60]	; (8011e84 <tcp_write_checks+0xec>)
 8011e48:	480d      	ldr	r0, [pc, #52]	; (8011e80 <tcp_write_checks+0xe8>)
 8011e4a:	f008 f867 	bl	8019f1c <iprintf>
 8011e4e:	e00e      	b.n	8011e6e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d103      	bne.n	8011e60 <tcp_write_checks+0xc8>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d006      	beq.n	8011e6e <tcp_write_checks+0xd6>
 8011e60:	4b05      	ldr	r3, [pc, #20]	; (8011e78 <tcp_write_checks+0xe0>)
 8011e62:	f240 1259 	movw	r2, #345	; 0x159
 8011e66:	4908      	ldr	r1, [pc, #32]	; (8011e88 <tcp_write_checks+0xf0>)
 8011e68:	4805      	ldr	r0, [pc, #20]	; (8011e80 <tcp_write_checks+0xe8>)
 8011e6a:	f008 f857 	bl	8019f1c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3708      	adds	r7, #8
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	080202e4 	.word	0x080202e4
 8011e7c:	080203f4 	.word	0x080203f4
 8011e80:	08020338 	.word	0x08020338
 8011e84:	08020414 	.word	0x08020414
 8011e88:	08020450 	.word	0x08020450

08011e8c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b09b      	sub	sp, #108	; 0x6c
 8011e90:	af04      	add	r7, sp, #16
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	4611      	mov	r1, r2
 8011e98:	461a      	mov	r2, r3
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	80fb      	strh	r3, [r7, #6]
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8011eaa:	2300      	movs	r3, #0
 8011eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eae:	2300      	movs	r3, #0
 8011eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d109      	bne.n	8011ee8 <tcp_write+0x5c>
 8011ed4:	4ba5      	ldr	r3, [pc, #660]	; (801216c <tcp_write+0x2e0>)
 8011ed6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011eda:	49a5      	ldr	r1, [pc, #660]	; (8012170 <tcp_write+0x2e4>)
 8011edc:	48a5      	ldr	r0, [pc, #660]	; (8012174 <tcp_write+0x2e8>)
 8011ede:	f008 f81d 	bl	8019f1c <iprintf>
 8011ee2:	f06f 030f 	mvn.w	r3, #15
 8011ee6:	e32c      	b.n	8012542 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011eee:	085b      	lsrs	r3, r3, #1
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	bf28      	it	cs
 8011efa:	4613      	movcs	r3, r2
 8011efc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d102      	bne.n	8011f0a <tcp_write+0x7e>
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f08:	e000      	b.n	8011f0c <tcp_write+0x80>
 8011f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d109      	bne.n	8011f28 <tcp_write+0x9c>
 8011f14:	4b95      	ldr	r3, [pc, #596]	; (801216c <tcp_write+0x2e0>)
 8011f16:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8011f1a:	4997      	ldr	r1, [pc, #604]	; (8012178 <tcp_write+0x2ec>)
 8011f1c:	4895      	ldr	r0, [pc, #596]	; (8012174 <tcp_write+0x2e8>)
 8011f1e:	f007 fffd 	bl	8019f1c <iprintf>
 8011f22:	f06f 030f 	mvn.w	r3, #15
 8011f26:	e30c      	b.n	8012542 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f28:	88fb      	ldrh	r3, [r7, #6]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f7ff ff33 	bl	8011d98 <tcp_write_checks>
 8011f32:	4603      	mov	r3, r0
 8011f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011f38:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d002      	beq.n	8011f46 <tcp_write+0xba>
    return err;
 8011f40:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f44:	e2fd      	b.n	8012542 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f50:	2300      	movs	r3, #0
 8011f52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f000 80f7 	beq.w	801214e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f64:	653b      	str	r3, [r7, #80]	; 0x50
 8011f66:	e002      	b.n	8011f6e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d1f8      	bne.n	8011f68 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f78:	7a9b      	ldrb	r3, [r3, #10]
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	f003 0304 	and.w	r3, r3, #4
 8011f82:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011f84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f88:	891b      	ldrh	r3, [r3, #8]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	8c3b      	ldrh	r3, [r7, #32]
 8011f8e:	440b      	add	r3, r1
 8011f90:	429a      	cmp	r2, r3
 8011f92:	da06      	bge.n	8011fa2 <tcp_write+0x116>
 8011f94:	4b75      	ldr	r3, [pc, #468]	; (801216c <tcp_write+0x2e0>)
 8011f96:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011f9a:	4978      	ldr	r1, [pc, #480]	; (801217c <tcp_write+0x2f0>)
 8011f9c:	4875      	ldr	r0, [pc, #468]	; (8012174 <tcp_write+0x2e8>)
 8011f9e:	f007 ffbd 	bl	8019f1c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa4:	891a      	ldrh	r2, [r3, #8]
 8011fa6:	8c3b      	ldrh	r3, [r7, #32]
 8011fa8:	4413      	add	r3, r2
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fb8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011fba:	8a7b      	ldrh	r3, [r7, #18]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d027      	beq.n	8012010 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011fc0:	8a7b      	ldrh	r3, [r7, #18]
 8011fc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d206      	bcs.n	8011fd6 <tcp_write+0x14a>
 8011fc8:	4b68      	ldr	r3, [pc, #416]	; (801216c <tcp_write+0x2e0>)
 8011fca:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011fce:	496c      	ldr	r1, [pc, #432]	; (8012180 <tcp_write+0x2f4>)
 8011fd0:	4868      	ldr	r0, [pc, #416]	; (8012174 <tcp_write+0x2e8>)
 8011fd2:	f007 ffa3 	bl	8019f1c <iprintf>
      seg = last_unsent;
 8011fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011fda:	8a7b      	ldrh	r3, [r7, #18]
 8011fdc:	88fa      	ldrh	r2, [r7, #6]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d901      	bls.n	8011fe6 <tcp_write+0x15a>
 8011fe2:	8a7b      	ldrh	r3, [r7, #18]
 8011fe4:	e000      	b.n	8011fe8 <tcp_write+0x15c>
 8011fe6:	88fb      	ldrh	r3, [r7, #6]
 8011fe8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fea:	4293      	cmp	r3, r2
 8011fec:	bfa8      	it	ge
 8011fee:	4613      	movge	r3, r2
 8011ff0:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011ff2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ff6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ff8:	4413      	add	r3, r2
 8011ffa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011ffe:	8a7a      	ldrh	r2, [r7, #18]
 8012000:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012002:	1ad3      	subs	r3, r2, r3
 8012004:	b29b      	uxth	r3, r3
 8012006:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012008:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801200a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801200c:	1ad3      	subs	r3, r2, r3
 801200e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012010:	8a7b      	ldrh	r3, [r7, #18]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00b      	beq.n	801202e <tcp_write+0x1a2>
 8012016:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801201a:	88fb      	ldrh	r3, [r7, #6]
 801201c:	429a      	cmp	r2, r3
 801201e:	d006      	beq.n	801202e <tcp_write+0x1a2>
 8012020:	4b52      	ldr	r3, [pc, #328]	; (801216c <tcp_write+0x2e0>)
 8012022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012026:	4957      	ldr	r1, [pc, #348]	; (8012184 <tcp_write+0x2f8>)
 8012028:	4852      	ldr	r0, [pc, #328]	; (8012174 <tcp_write+0x2e8>)
 801202a:	f007 ff77 	bl	8019f1c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801202e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012032:	88fb      	ldrh	r3, [r7, #6]
 8012034:	429a      	cmp	r2, r3
 8012036:	f080 8168 	bcs.w	801230a <tcp_write+0x47e>
 801203a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801203c:	2b00      	cmp	r3, #0
 801203e:	f000 8164 	beq.w	801230a <tcp_write+0x47e>
 8012042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012044:	891b      	ldrh	r3, [r3, #8]
 8012046:	2b00      	cmp	r3, #0
 8012048:	f000 815f 	beq.w	801230a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801204c:	88fa      	ldrh	r2, [r7, #6]
 801204e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012052:	1ad2      	subs	r2, r2, r3
 8012054:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012056:	4293      	cmp	r3, r2
 8012058:	bfa8      	it	ge
 801205a:	4613      	movge	r3, r2
 801205c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801205e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012060:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012062:	797b      	ldrb	r3, [r7, #5]
 8012064:	f003 0301 	and.w	r3, r3, #1
 8012068:	2b00      	cmp	r3, #0
 801206a:	d027      	beq.n	80120bc <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801206c:	f107 0012 	add.w	r0, r7, #18
 8012070:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012072:	8bf9      	ldrh	r1, [r7, #30]
 8012074:	2301      	movs	r3, #1
 8012076:	9302      	str	r3, [sp, #8]
 8012078:	797b      	ldrb	r3, [r7, #5]
 801207a:	9301      	str	r3, [sp, #4]
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	9300      	str	r3, [sp, #0]
 8012080:	4603      	mov	r3, r0
 8012082:	2000      	movs	r0, #0
 8012084:	f7ff fe0e 	bl	8011ca4 <tcp_pbuf_prealloc>
 8012088:	6578      	str	r0, [r7, #84]	; 0x54
 801208a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801208c:	2b00      	cmp	r3, #0
 801208e:	f000 8226 	beq.w	80124de <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012094:	6858      	ldr	r0, [r3, #4]
 8012096:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801209a:	68ba      	ldr	r2, [r7, #8]
 801209c:	4413      	add	r3, r2
 801209e:	8bfa      	ldrh	r2, [r7, #30]
 80120a0:	4619      	mov	r1, r3
 80120a2:	f007 f8d0 	bl	8019246 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80120a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120a8:	f7fa fff8 	bl	800d09c <pbuf_clen>
 80120ac:	4603      	mov	r3, r0
 80120ae:	461a      	mov	r2, r3
 80120b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120b4:	4413      	add	r3, r2
 80120b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80120ba:	e041      	b.n	8012140 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80120bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120be:	685b      	ldr	r3, [r3, #4]
 80120c0:	637b      	str	r3, [r7, #52]	; 0x34
 80120c2:	e002      	b.n	80120ca <tcp_write+0x23e>
 80120c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	637b      	str	r3, [r7, #52]	; 0x34
 80120ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1f8      	bne.n	80120c4 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d4:	7b1b      	ldrb	r3, [r3, #12]
 80120d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d115      	bne.n	801210a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80120de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120e4:	8952      	ldrh	r2, [r2, #10]
 80120e6:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120e8:	68ba      	ldr	r2, [r7, #8]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d10d      	bne.n	801210a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80120ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d006      	beq.n	8012104 <tcp_write+0x278>
 80120f6:	4b1d      	ldr	r3, [pc, #116]	; (801216c <tcp_write+0x2e0>)
 80120f8:	f240 2231 	movw	r2, #561	; 0x231
 80120fc:	4922      	ldr	r1, [pc, #136]	; (8012188 <tcp_write+0x2fc>)
 80120fe:	481d      	ldr	r0, [pc, #116]	; (8012174 <tcp_write+0x2e8>)
 8012100:	f007 ff0c 	bl	8019f1c <iprintf>
          extendlen = seglen;
 8012104:	8bfb      	ldrh	r3, [r7, #30]
 8012106:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012108:	e01a      	b.n	8012140 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801210a:	8bfb      	ldrh	r3, [r7, #30]
 801210c:	2201      	movs	r2, #1
 801210e:	4619      	mov	r1, r3
 8012110:	2000      	movs	r0, #0
 8012112:	f7fa fc55 	bl	800c9c0 <pbuf_alloc>
 8012116:	6578      	str	r0, [r7, #84]	; 0x54
 8012118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801211a:	2b00      	cmp	r3, #0
 801211c:	f000 81e1 	beq.w	80124e2 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012120:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012124:	68ba      	ldr	r2, [r7, #8]
 8012126:	441a      	add	r2, r3
 8012128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801212a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801212c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801212e:	f7fa ffb5 	bl	800d09c <pbuf_clen>
 8012132:	4603      	mov	r3, r0
 8012134:	461a      	mov	r2, r3
 8012136:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801213a:	4413      	add	r3, r2
 801213c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012140:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012144:	8bfb      	ldrh	r3, [r7, #30]
 8012146:	4413      	add	r3, r2
 8012148:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801214c:	e0dd      	b.n	801230a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012154:	2b00      	cmp	r3, #0
 8012156:	f000 80d8 	beq.w	801230a <tcp_write+0x47e>
 801215a:	4b04      	ldr	r3, [pc, #16]	; (801216c <tcp_write+0x2e0>)
 801215c:	f240 224b 	movw	r2, #587	; 0x24b
 8012160:	490a      	ldr	r1, [pc, #40]	; (801218c <tcp_write+0x300>)
 8012162:	4804      	ldr	r0, [pc, #16]	; (8012174 <tcp_write+0x2e8>)
 8012164:	f007 feda 	bl	8019f1c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012168:	e0cf      	b.n	801230a <tcp_write+0x47e>
 801216a:	bf00      	nop
 801216c:	080202e4 	.word	0x080202e4
 8012170:	08020484 	.word	0x08020484
 8012174:	08020338 	.word	0x08020338
 8012178:	0802049c 	.word	0x0802049c
 801217c:	080204d0 	.word	0x080204d0
 8012180:	080204e8 	.word	0x080204e8
 8012184:	08020508 	.word	0x08020508
 8012188:	08020528 	.word	0x08020528
 801218c:	08020554 	.word	0x08020554
    struct pbuf *p;
    u16_t left = len - pos;
 8012190:	88fa      	ldrh	r2, [r7, #6]
 8012192:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012196:	1ad3      	subs	r3, r2, r3
 8012198:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801219a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801219e:	b29b      	uxth	r3, r3
 80121a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121a2:	1ad3      	subs	r3, r2, r3
 80121a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80121a6:	8b7a      	ldrh	r2, [r7, #26]
 80121a8:	8bbb      	ldrh	r3, [r7, #28]
 80121aa:	4293      	cmp	r3, r2
 80121ac:	bf28      	it	cs
 80121ae:	4613      	movcs	r3, r2
 80121b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121b2:	797b      	ldrb	r3, [r7, #5]
 80121b4:	f003 0301 	and.w	r3, r3, #1
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d036      	beq.n	801222a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80121bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121c0:	b29a      	uxth	r2, r3
 80121c2:	8b3b      	ldrh	r3, [r7, #24]
 80121c4:	4413      	add	r3, r2
 80121c6:	b299      	uxth	r1, r3
 80121c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	bf0c      	ite	eq
 80121ce:	2301      	moveq	r3, #1
 80121d0:	2300      	movne	r3, #0
 80121d2:	b2db      	uxtb	r3, r3
 80121d4:	f107 0012 	add.w	r0, r7, #18
 80121d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121da:	9302      	str	r3, [sp, #8]
 80121dc:	797b      	ldrb	r3, [r7, #5]
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	4603      	mov	r3, r0
 80121e6:	2036      	movs	r0, #54	; 0x36
 80121e8:	f7ff fd5c 	bl	8011ca4 <tcp_pbuf_prealloc>
 80121ec:	6338      	str	r0, [r7, #48]	; 0x30
 80121ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f000 8178 	beq.w	80124e6 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80121f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f8:	895b      	ldrh	r3, [r3, #10]
 80121fa:	8b3a      	ldrh	r2, [r7, #24]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d906      	bls.n	801220e <tcp_write+0x382>
 8012200:	4b8c      	ldr	r3, [pc, #560]	; (8012434 <tcp_write+0x5a8>)
 8012202:	f240 2267 	movw	r2, #615	; 0x267
 8012206:	498c      	ldr	r1, [pc, #560]	; (8012438 <tcp_write+0x5ac>)
 8012208:	488c      	ldr	r0, [pc, #560]	; (801243c <tcp_write+0x5b0>)
 801220a:	f007 fe87 	bl	8019f1c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012210:	685a      	ldr	r2, [r3, #4]
 8012212:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012216:	18d0      	adds	r0, r2, r3
 8012218:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801221c:	68ba      	ldr	r2, [r7, #8]
 801221e:	4413      	add	r3, r2
 8012220:	8b3a      	ldrh	r2, [r7, #24]
 8012222:	4619      	mov	r1, r3
 8012224:	f007 f80f 	bl	8019246 <memcpy>
 8012228:	e02f      	b.n	801228a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801222a:	8a7b      	ldrh	r3, [r7, #18]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d006      	beq.n	801223e <tcp_write+0x3b2>
 8012230:	4b80      	ldr	r3, [pc, #512]	; (8012434 <tcp_write+0x5a8>)
 8012232:	f240 2271 	movw	r2, #625	; 0x271
 8012236:	4982      	ldr	r1, [pc, #520]	; (8012440 <tcp_write+0x5b4>)
 8012238:	4880      	ldr	r0, [pc, #512]	; (801243c <tcp_write+0x5b0>)
 801223a:	f007 fe6f 	bl	8019f1c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801223e:	8b3b      	ldrh	r3, [r7, #24]
 8012240:	2201      	movs	r2, #1
 8012242:	4619      	mov	r1, r3
 8012244:	2036      	movs	r0, #54	; 0x36
 8012246:	f7fa fbbb 	bl	800c9c0 <pbuf_alloc>
 801224a:	6178      	str	r0, [r7, #20]
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	2b00      	cmp	r3, #0
 8012250:	f000 814b 	beq.w	80124ea <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012254:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012258:	68ba      	ldr	r2, [r7, #8]
 801225a:	441a      	add	r2, r3
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012260:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012264:	b29b      	uxth	r3, r3
 8012266:	f44f 7220 	mov.w	r2, #640	; 0x280
 801226a:	4619      	mov	r1, r3
 801226c:	2036      	movs	r0, #54	; 0x36
 801226e:	f7fa fba7 	bl	800c9c0 <pbuf_alloc>
 8012272:	6338      	str	r0, [r7, #48]	; 0x30
 8012274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012276:	2b00      	cmp	r3, #0
 8012278:	d103      	bne.n	8012282 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801227a:	6978      	ldr	r0, [r7, #20]
 801227c:	f7fa fe80 	bl	800cf80 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012280:	e136      	b.n	80124f0 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012282:	6979      	ldr	r1, [r7, #20]
 8012284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012286:	f7fa ff49 	bl	800d11c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801228a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801228c:	f7fa ff06 	bl	800d09c <pbuf_clen>
 8012290:	4603      	mov	r3, r0
 8012292:	461a      	mov	r2, r3
 8012294:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012298:	4413      	add	r3, r2
 801229a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801229e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80122a2:	2b09      	cmp	r3, #9
 80122a4:	d903      	bls.n	80122ae <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80122a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122a8:	f7fa fe6a 	bl	800cf80 <pbuf_free>
      goto memerr;
 80122ac:	e120      	b.n	80124f0 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122b6:	441a      	add	r2, r3
 80122b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122bc:	9300      	str	r3, [sp, #0]
 80122be:	4613      	mov	r3, r2
 80122c0:	2200      	movs	r2, #0
 80122c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80122c4:	68f8      	ldr	r0, [r7, #12]
 80122c6:	f7ff fc4f 	bl	8011b68 <tcp_create_segment>
 80122ca:	64f8      	str	r0, [r7, #76]	; 0x4c
 80122cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	f000 810d 	beq.w	80124ee <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80122d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d102      	bne.n	80122e0 <tcp_write+0x454>
      queue = seg;
 80122da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122dc:	647b      	str	r3, [r7, #68]	; 0x44
 80122de:	e00c      	b.n	80122fa <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80122e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d106      	bne.n	80122f4 <tcp_write+0x468>
 80122e6:	4b53      	ldr	r3, [pc, #332]	; (8012434 <tcp_write+0x5a8>)
 80122e8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80122ec:	4955      	ldr	r1, [pc, #340]	; (8012444 <tcp_write+0x5b8>)
 80122ee:	4853      	ldr	r0, [pc, #332]	; (801243c <tcp_write+0x5b0>)
 80122f0:	f007 fe14 	bl	8019f1c <iprintf>
      prev_seg->next = seg;
 80122f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122f8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80122fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122fc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80122fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012302:	8b3b      	ldrh	r3, [r7, #24]
 8012304:	4413      	add	r3, r2
 8012306:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801230a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801230e:	88fb      	ldrh	r3, [r7, #6]
 8012310:	429a      	cmp	r2, r3
 8012312:	f4ff af3d 	bcc.w	8012190 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012316:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012318:	2b00      	cmp	r3, #0
 801231a:	d02c      	beq.n	8012376 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801231c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801231e:	685b      	ldr	r3, [r3, #4]
 8012320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012322:	e01e      	b.n	8012362 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8012324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012326:	891a      	ldrh	r2, [r3, #8]
 8012328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801232a:	4413      	add	r3, r2
 801232c:	b29a      	uxth	r2, r3
 801232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012330:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d110      	bne.n	801235c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012340:	8952      	ldrh	r2, [r2, #10]
 8012342:	4413      	add	r3, r2
 8012344:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012346:	68b9      	ldr	r1, [r7, #8]
 8012348:	4618      	mov	r0, r3
 801234a:	f006 ff7c 	bl	8019246 <memcpy>
        p->len += oversize_used;
 801234e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012350:	895a      	ldrh	r2, [r3, #10]
 8012352:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012354:	4413      	add	r3, r2
 8012356:	b29a      	uxth	r2, r3
 8012358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1dd      	bne.n	8012324 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8012368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801236a:	891a      	ldrh	r2, [r3, #8]
 801236c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801236e:	4413      	add	r3, r2
 8012370:	b29a      	uxth	r2, r3
 8012372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012374:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012376:	8a7a      	ldrh	r2, [r7, #18]
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801237e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012380:	2b00      	cmp	r3, #0
 8012382:	d018      	beq.n	80123b6 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012386:	2b00      	cmp	r3, #0
 8012388:	d106      	bne.n	8012398 <tcp_write+0x50c>
 801238a:	4b2a      	ldr	r3, [pc, #168]	; (8012434 <tcp_write+0x5a8>)
 801238c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012390:	492d      	ldr	r1, [pc, #180]	; (8012448 <tcp_write+0x5bc>)
 8012392:	482a      	ldr	r0, [pc, #168]	; (801243c <tcp_write+0x5b0>)
 8012394:	f007 fdc2 	bl	8019f1c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801239e:	4618      	mov	r0, r3
 80123a0:	f7fa febc 	bl	800d11c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80123a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a6:	891a      	ldrh	r2, [r3, #8]
 80123a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123aa:	891b      	ldrh	r3, [r3, #8]
 80123ac:	4413      	add	r3, r2
 80123ae:	b29a      	uxth	r2, r3
 80123b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123b2:	811a      	strh	r2, [r3, #8]
 80123b4:	e037      	b.n	8012426 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80123b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d034      	beq.n	8012426 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80123bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d003      	beq.n	80123ca <tcp_write+0x53e>
 80123c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <tcp_write+0x54c>
 80123ca:	4b1a      	ldr	r3, [pc, #104]	; (8012434 <tcp_write+0x5a8>)
 80123cc:	f240 22e7 	movw	r2, #743	; 0x2e7
 80123d0:	491e      	ldr	r1, [pc, #120]	; (801244c <tcp_write+0x5c0>)
 80123d2:	481a      	ldr	r0, [pc, #104]	; (801243c <tcp_write+0x5b0>)
 80123d4:	f007 fda2 	bl	8019f1c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123da:	685b      	ldr	r3, [r3, #4]
 80123dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80123de:	e009      	b.n	80123f4 <tcp_write+0x568>
      p->tot_len += extendlen;
 80123e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e2:	891a      	ldrh	r2, [r3, #8]
 80123e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123e6:	4413      	add	r3, r2
 80123e8:	b29a      	uxth	r2, r3
 80123ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ec:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80123f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d1f1      	bne.n	80123e0 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	891a      	ldrh	r2, [r3, #8]
 8012400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012402:	4413      	add	r3, r2
 8012404:	b29a      	uxth	r2, r3
 8012406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012408:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240c:	895a      	ldrh	r2, [r3, #10]
 801240e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012410:	4413      	add	r3, r2
 8012412:	b29a      	uxth	r2, r3
 8012414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012416:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801241a:	891a      	ldrh	r2, [r3, #8]
 801241c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801241e:	4413      	add	r3, r2
 8012420:	b29a      	uxth	r2, r3
 8012422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012424:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012428:	2b00      	cmp	r3, #0
 801242a:	d111      	bne.n	8012450 <tcp_write+0x5c4>
    pcb->unsent = queue;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012430:	66da      	str	r2, [r3, #108]	; 0x6c
 8012432:	e010      	b.n	8012456 <tcp_write+0x5ca>
 8012434:	080202e4 	.word	0x080202e4
 8012438:	08020584 	.word	0x08020584
 801243c:	08020338 	.word	0x08020338
 8012440:	080205c4 	.word	0x080205c4
 8012444:	080205d4 	.word	0x080205d4
 8012448:	080205e8 	.word	0x080205e8
 801244c:	08020620 	.word	0x08020620
  } else {
    last_unsent->next = queue;
 8012450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012452:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012454:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801245a:	88fb      	ldrh	r3, [r7, #6]
 801245c:	441a      	add	r2, r3
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012468:	88fb      	ldrh	r3, [r7, #6]
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	b29a      	uxth	r2, r3
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801247a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012484:	2b00      	cmp	r3, #0
 8012486:	d00e      	beq.n	80124a6 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801248c:	2b00      	cmp	r3, #0
 801248e:	d10a      	bne.n	80124a6 <tcp_write+0x61a>
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012494:	2b00      	cmp	r3, #0
 8012496:	d106      	bne.n	80124a6 <tcp_write+0x61a>
 8012498:	4b2c      	ldr	r3, [pc, #176]	; (801254c <tcp_write+0x6c0>)
 801249a:	f240 3213 	movw	r2, #787	; 0x313
 801249e:	492c      	ldr	r1, [pc, #176]	; (8012550 <tcp_write+0x6c4>)
 80124a0:	482c      	ldr	r0, [pc, #176]	; (8012554 <tcp_write+0x6c8>)
 80124a2:	f007 fd3b 	bl	8019f1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80124a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d016      	beq.n	80124da <tcp_write+0x64e>
 80124ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d012      	beq.n	80124da <tcp_write+0x64e>
 80124b4:	797b      	ldrb	r3, [r7, #5]
 80124b6:	f003 0302 	and.w	r3, r3, #2
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d10d      	bne.n	80124da <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80124be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124c0:	68db      	ldr	r3, [r3, #12]
 80124c2:	899b      	ldrh	r3, [r3, #12]
 80124c4:	b29c      	uxth	r4, r3
 80124c6:	2008      	movs	r0, #8
 80124c8:	f7f8 f9d2 	bl	800a870 <lwip_htons>
 80124cc:	4603      	mov	r3, r0
 80124ce:	461a      	mov	r2, r3
 80124d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	4322      	orrs	r2, r4
 80124d6:	b292      	uxth	r2, r2
 80124d8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80124da:	2300      	movs	r3, #0
 80124dc:	e031      	b.n	8012542 <tcp_write+0x6b6>
          goto memerr;
 80124de:	bf00      	nop
 80124e0:	e006      	b.n	80124f0 <tcp_write+0x664>
            goto memerr;
 80124e2:	bf00      	nop
 80124e4:	e004      	b.n	80124f0 <tcp_write+0x664>
        goto memerr;
 80124e6:	bf00      	nop
 80124e8:	e002      	b.n	80124f0 <tcp_write+0x664>
        goto memerr;
 80124ea:	bf00      	nop
 80124ec:	e000      	b.n	80124f0 <tcp_write+0x664>
      goto memerr;
 80124ee:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	8b5b      	ldrh	r3, [r3, #26]
 80124f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80124fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012500:	2b00      	cmp	r3, #0
 8012502:	d002      	beq.n	801250a <tcp_write+0x67e>
    pbuf_free(concat_p);
 8012504:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012506:	f7fa fd3b 	bl	800cf80 <pbuf_free>
  }
  if (queue != NULL) {
 801250a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8012510:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012512:	f7fc fb71 	bl	800ebf8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801251c:	2b00      	cmp	r3, #0
 801251e:	d00e      	beq.n	801253e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012524:	2b00      	cmp	r3, #0
 8012526:	d10a      	bne.n	801253e <tcp_write+0x6b2>
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801252c:	2b00      	cmp	r3, #0
 801252e:	d106      	bne.n	801253e <tcp_write+0x6b2>
 8012530:	4b06      	ldr	r3, [pc, #24]	; (801254c <tcp_write+0x6c0>)
 8012532:	f44f 724a 	mov.w	r2, #808	; 0x328
 8012536:	4906      	ldr	r1, [pc, #24]	; (8012550 <tcp_write+0x6c4>)
 8012538:	4806      	ldr	r0, [pc, #24]	; (8012554 <tcp_write+0x6c8>)
 801253a:	f007 fcef 	bl	8019f1c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801253e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012542:	4618      	mov	r0, r3
 8012544:	375c      	adds	r7, #92	; 0x5c
 8012546:	46bd      	mov	sp, r7
 8012548:	bd90      	pop	{r4, r7, pc}
 801254a:	bf00      	nop
 801254c:	080202e4 	.word	0x080202e4
 8012550:	08020658 	.word	0x08020658
 8012554:	08020338 	.word	0x08020338

08012558 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012558:	b590      	push	{r4, r7, lr}
 801255a:	b08b      	sub	sp, #44	; 0x2c
 801255c:	af02      	add	r7, sp, #8
 801255e:	6078      	str	r0, [r7, #4]
 8012560:	460b      	mov	r3, r1
 8012562:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012564:	2300      	movs	r3, #0
 8012566:	61fb      	str	r3, [r7, #28]
 8012568:	2300      	movs	r3, #0
 801256a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801256c:	2300      	movs	r3, #0
 801256e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d106      	bne.n	8012584 <tcp_split_unsent_seg+0x2c>
 8012576:	4b95      	ldr	r3, [pc, #596]	; (80127cc <tcp_split_unsent_seg+0x274>)
 8012578:	f240 324b 	movw	r2, #843	; 0x34b
 801257c:	4994      	ldr	r1, [pc, #592]	; (80127d0 <tcp_split_unsent_seg+0x278>)
 801257e:	4895      	ldr	r0, [pc, #596]	; (80127d4 <tcp_split_unsent_seg+0x27c>)
 8012580:	f007 fccc 	bl	8019f1c <iprintf>

  useg = pcb->unsent;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012588:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d102      	bne.n	8012596 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012590:	f04f 33ff 	mov.w	r3, #4294967295
 8012594:	e116      	b.n	80127c4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012596:	887b      	ldrh	r3, [r7, #2]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d109      	bne.n	80125b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801259c:	4b8b      	ldr	r3, [pc, #556]	; (80127cc <tcp_split_unsent_seg+0x274>)
 801259e:	f240 3253 	movw	r2, #851	; 0x353
 80125a2:	498d      	ldr	r1, [pc, #564]	; (80127d8 <tcp_split_unsent_seg+0x280>)
 80125a4:	488b      	ldr	r0, [pc, #556]	; (80127d4 <tcp_split_unsent_seg+0x27c>)
 80125a6:	f007 fcb9 	bl	8019f1c <iprintf>
    return ERR_VAL;
 80125aa:	f06f 0305 	mvn.w	r3, #5
 80125ae:	e109      	b.n	80127c4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	891b      	ldrh	r3, [r3, #8]
 80125b4:	887a      	ldrh	r2, [r7, #2]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d301      	bcc.n	80125be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125ba:	2300      	movs	r3, #0
 80125bc:	e102      	b.n	80127c4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125c2:	887a      	ldrh	r2, [r7, #2]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d906      	bls.n	80125d6 <tcp_split_unsent_seg+0x7e>
 80125c8:	4b80      	ldr	r3, [pc, #512]	; (80127cc <tcp_split_unsent_seg+0x274>)
 80125ca:	f240 325b 	movw	r2, #859	; 0x35b
 80125ce:	4983      	ldr	r1, [pc, #524]	; (80127dc <tcp_split_unsent_seg+0x284>)
 80125d0:	4880      	ldr	r0, [pc, #512]	; (80127d4 <tcp_split_unsent_seg+0x27c>)
 80125d2:	f007 fca3 	bl	8019f1c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	891b      	ldrh	r3, [r3, #8]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d106      	bne.n	80125ec <tcp_split_unsent_seg+0x94>
 80125de:	4b7b      	ldr	r3, [pc, #492]	; (80127cc <tcp_split_unsent_seg+0x274>)
 80125e0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80125e4:	497e      	ldr	r1, [pc, #504]	; (80127e0 <tcp_split_unsent_seg+0x288>)
 80125e6:	487b      	ldr	r0, [pc, #492]	; (80127d4 <tcp_split_unsent_seg+0x27c>)
 80125e8:	f007 fc98 	bl	8019f1c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	7a9b      	ldrb	r3, [r3, #10]
 80125f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80125f2:	7bfb      	ldrb	r3, [r7, #15]
 80125f4:	009b      	lsls	r3, r3, #2
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	f003 0304 	and.w	r3, r3, #4
 80125fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	891a      	ldrh	r2, [r3, #8]
 8012602:	887b      	ldrh	r3, [r7, #2]
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012608:	7bbb      	ldrb	r3, [r7, #14]
 801260a:	b29a      	uxth	r2, r3
 801260c:	89bb      	ldrh	r3, [r7, #12]
 801260e:	4413      	add	r3, r2
 8012610:	b29b      	uxth	r3, r3
 8012612:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012616:	4619      	mov	r1, r3
 8012618:	2036      	movs	r0, #54	; 0x36
 801261a:	f7fa f9d1 	bl	800c9c0 <pbuf_alloc>
 801261e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	2b00      	cmp	r3, #0
 8012624:	f000 80b7 	beq.w	8012796 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012628:	697b      	ldr	r3, [r7, #20]
 801262a:	685b      	ldr	r3, [r3, #4]
 801262c:	891a      	ldrh	r2, [r3, #8]
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	891b      	ldrh	r3, [r3, #8]
 8012632:	1ad3      	subs	r3, r2, r3
 8012634:	b29a      	uxth	r2, r3
 8012636:	887b      	ldrh	r3, [r7, #2]
 8012638:	4413      	add	r3, r2
 801263a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	6858      	ldr	r0, [r3, #4]
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	685a      	ldr	r2, [r3, #4]
 8012644:	7bbb      	ldrb	r3, [r7, #14]
 8012646:	18d1      	adds	r1, r2, r3
 8012648:	897b      	ldrh	r3, [r7, #10]
 801264a:	89ba      	ldrh	r2, [r7, #12]
 801264c:	f7fa fe9e 	bl	800d38c <pbuf_copy_partial>
 8012650:	4603      	mov	r3, r0
 8012652:	461a      	mov	r2, r3
 8012654:	89bb      	ldrh	r3, [r7, #12]
 8012656:	4293      	cmp	r3, r2
 8012658:	f040 809f 	bne.w	801279a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	899b      	ldrh	r3, [r3, #12]
 8012662:	b29b      	uxth	r3, r3
 8012664:	4618      	mov	r0, r3
 8012666:	f7f8 f903 	bl	800a870 <lwip_htons>
 801266a:	4603      	mov	r3, r0
 801266c:	b2db      	uxtb	r3, r3
 801266e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012672:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012674:	2300      	movs	r3, #0
 8012676:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012678:	7efb      	ldrb	r3, [r7, #27]
 801267a:	f003 0308 	and.w	r3, r3, #8
 801267e:	2b00      	cmp	r3, #0
 8012680:	d007      	beq.n	8012692 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012682:	7efb      	ldrb	r3, [r7, #27]
 8012684:	f023 0308 	bic.w	r3, r3, #8
 8012688:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801268a:	7ebb      	ldrb	r3, [r7, #26]
 801268c:	f043 0308 	orr.w	r3, r3, #8
 8012690:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012692:	7efb      	ldrb	r3, [r7, #27]
 8012694:	f003 0301 	and.w	r3, r3, #1
 8012698:	2b00      	cmp	r3, #0
 801269a:	d007      	beq.n	80126ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801269c:	7efb      	ldrb	r3, [r7, #27]
 801269e:	f023 0301 	bic.w	r3, r3, #1
 80126a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80126a4:	7ebb      	ldrb	r3, [r7, #26]
 80126a6:	f043 0301 	orr.w	r3, r3, #1
 80126aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7f8 f8f1 	bl	800a89a <lwip_htonl>
 80126b8:	4602      	mov	r2, r0
 80126ba:	887b      	ldrh	r3, [r7, #2]
 80126bc:	18d1      	adds	r1, r2, r3
 80126be:	7eba      	ldrb	r2, [r7, #26]
 80126c0:	7bfb      	ldrb	r3, [r7, #15]
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	460b      	mov	r3, r1
 80126c6:	6939      	ldr	r1, [r7, #16]
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f7ff fa4d 	bl	8011b68 <tcp_create_segment>
 80126ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80126d0:	69fb      	ldr	r3, [r7, #28]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d063      	beq.n	801279e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	4618      	mov	r0, r3
 80126dc:	f7fa fcde 	bl	800d09c <pbuf_clen>
 80126e0:	4603      	mov	r3, r0
 80126e2:	461a      	mov	r2, r3
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126ea:	1a9b      	subs	r3, r3, r2
 80126ec:	b29a      	uxth	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	6858      	ldr	r0, [r3, #4]
 80126f8:	697b      	ldr	r3, [r7, #20]
 80126fa:	685b      	ldr	r3, [r3, #4]
 80126fc:	891a      	ldrh	r2, [r3, #8]
 80126fe:	89bb      	ldrh	r3, [r7, #12]
 8012700:	1ad3      	subs	r3, r2, r3
 8012702:	b29b      	uxth	r3, r3
 8012704:	4619      	mov	r1, r3
 8012706:	f7fa fab5 	bl	800cc74 <pbuf_realloc>
  useg->len -= remainder;
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	891a      	ldrh	r2, [r3, #8]
 801270e:	89bb      	ldrh	r3, [r7, #12]
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	b29a      	uxth	r2, r3
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	68db      	ldr	r3, [r3, #12]
 801271c:	899b      	ldrh	r3, [r3, #12]
 801271e:	b29c      	uxth	r4, r3
 8012720:	7efb      	ldrb	r3, [r7, #27]
 8012722:	b29b      	uxth	r3, r3
 8012724:	4618      	mov	r0, r3
 8012726:	f7f8 f8a3 	bl	800a870 <lwip_htons>
 801272a:	4603      	mov	r3, r0
 801272c:	461a      	mov	r2, r3
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	68db      	ldr	r3, [r3, #12]
 8012732:	4322      	orrs	r2, r4
 8012734:	b292      	uxth	r2, r2
 8012736:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	4618      	mov	r0, r3
 801273e:	f7fa fcad 	bl	800d09c <pbuf_clen>
 8012742:	4603      	mov	r3, r0
 8012744:	461a      	mov	r2, r3
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801274c:	4413      	add	r3, r2
 801274e:	b29a      	uxth	r2, r3
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012756:	69fb      	ldr	r3, [r7, #28]
 8012758:	685b      	ldr	r3, [r3, #4]
 801275a:	4618      	mov	r0, r3
 801275c:	f7fa fc9e 	bl	800d09c <pbuf_clen>
 8012760:	4603      	mov	r3, r0
 8012762:	461a      	mov	r2, r3
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801276a:	4413      	add	r3, r2
 801276c:	b29a      	uxth	r2, r3
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	681a      	ldr	r2, [r3, #0]
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	69fa      	ldr	r2, [r7, #28]
 8012780:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012782:	69fb      	ldr	r3, [r7, #28]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d103      	bne.n	8012792 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2200      	movs	r2, #0
 801278e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012792:	2300      	movs	r3, #0
 8012794:	e016      	b.n	80127c4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012796:	bf00      	nop
 8012798:	e002      	b.n	80127a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801279a:	bf00      	nop
 801279c:	e000      	b.n	80127a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801279e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d006      	beq.n	80127b4 <tcp_split_unsent_seg+0x25c>
 80127a6:	4b09      	ldr	r3, [pc, #36]	; (80127cc <tcp_split_unsent_seg+0x274>)
 80127a8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80127ac:	490d      	ldr	r1, [pc, #52]	; (80127e4 <tcp_split_unsent_seg+0x28c>)
 80127ae:	4809      	ldr	r0, [pc, #36]	; (80127d4 <tcp_split_unsent_seg+0x27c>)
 80127b0:	f007 fbb4 	bl	8019f1c <iprintf>
  if (p != NULL) {
 80127b4:	693b      	ldr	r3, [r7, #16]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d002      	beq.n	80127c0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127ba:	6938      	ldr	r0, [r7, #16]
 80127bc:	f7fa fbe0 	bl	800cf80 <pbuf_free>
  }

  return ERR_MEM;
 80127c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3724      	adds	r7, #36	; 0x24
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd90      	pop	{r4, r7, pc}
 80127cc:	080202e4 	.word	0x080202e4
 80127d0:	08020678 	.word	0x08020678
 80127d4:	08020338 	.word	0x08020338
 80127d8:	0802069c 	.word	0x0802069c
 80127dc:	080206c0 	.word	0x080206c0
 80127e0:	080206d0 	.word	0x080206d0
 80127e4:	080206e0 	.word	0x080206e0

080127e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80127e8:	b590      	push	{r4, r7, lr}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d106      	bne.n	8012804 <tcp_send_fin+0x1c>
 80127f6:	4b21      	ldr	r3, [pc, #132]	; (801287c <tcp_send_fin+0x94>)
 80127f8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80127fc:	4920      	ldr	r1, [pc, #128]	; (8012880 <tcp_send_fin+0x98>)
 80127fe:	4821      	ldr	r0, [pc, #132]	; (8012884 <tcp_send_fin+0x9c>)
 8012800:	f007 fb8c 	bl	8019f1c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012808:	2b00      	cmp	r3, #0
 801280a:	d02e      	beq.n	801286a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012810:	60fb      	str	r3, [r7, #12]
 8012812:	e002      	b.n	801281a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d1f8      	bne.n	8012814 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	68db      	ldr	r3, [r3, #12]
 8012826:	899b      	ldrh	r3, [r3, #12]
 8012828:	b29b      	uxth	r3, r3
 801282a:	4618      	mov	r0, r3
 801282c:	f7f8 f820 	bl	800a870 <lwip_htons>
 8012830:	4603      	mov	r3, r0
 8012832:	b2db      	uxtb	r3, r3
 8012834:	f003 0307 	and.w	r3, r3, #7
 8012838:	2b00      	cmp	r3, #0
 801283a:	d116      	bne.n	801286a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	899b      	ldrh	r3, [r3, #12]
 8012842:	b29c      	uxth	r4, r3
 8012844:	2001      	movs	r0, #1
 8012846:	f7f8 f813 	bl	800a870 <lwip_htons>
 801284a:	4603      	mov	r3, r0
 801284c:	461a      	mov	r2, r3
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	4322      	orrs	r2, r4
 8012854:	b292      	uxth	r2, r2
 8012856:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	8b5b      	ldrh	r3, [r3, #26]
 801285c:	f043 0320 	orr.w	r3, r3, #32
 8012860:	b29a      	uxth	r2, r3
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012866:	2300      	movs	r3, #0
 8012868:	e004      	b.n	8012874 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801286a:	2101      	movs	r1, #1
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 f80b 	bl	8012888 <tcp_enqueue_flags>
 8012872:	4603      	mov	r3, r0
}
 8012874:	4618      	mov	r0, r3
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	bd90      	pop	{r4, r7, pc}
 801287c:	080202e4 	.word	0x080202e4
 8012880:	080206ec 	.word	0x080206ec
 8012884:	08020338 	.word	0x08020338

08012888 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b08a      	sub	sp, #40	; 0x28
 801288c:	af02      	add	r7, sp, #8
 801288e:	6078      	str	r0, [r7, #4]
 8012890:	460b      	mov	r3, r1
 8012892:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012894:	2300      	movs	r3, #0
 8012896:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012898:	2300      	movs	r3, #0
 801289a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801289c:	78fb      	ldrb	r3, [r7, #3]
 801289e:	f003 0303 	and.w	r3, r3, #3
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d106      	bne.n	80128b4 <tcp_enqueue_flags+0x2c>
 80128a6:	4b67      	ldr	r3, [pc, #412]	; (8012a44 <tcp_enqueue_flags+0x1bc>)
 80128a8:	f240 4212 	movw	r2, #1042	; 0x412
 80128ac:	4966      	ldr	r1, [pc, #408]	; (8012a48 <tcp_enqueue_flags+0x1c0>)
 80128ae:	4867      	ldr	r0, [pc, #412]	; (8012a4c <tcp_enqueue_flags+0x1c4>)
 80128b0:	f007 fb34 	bl	8019f1c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d106      	bne.n	80128c8 <tcp_enqueue_flags+0x40>
 80128ba:	4b62      	ldr	r3, [pc, #392]	; (8012a44 <tcp_enqueue_flags+0x1bc>)
 80128bc:	f240 4213 	movw	r2, #1043	; 0x413
 80128c0:	4963      	ldr	r1, [pc, #396]	; (8012a50 <tcp_enqueue_flags+0x1c8>)
 80128c2:	4862      	ldr	r0, [pc, #392]	; (8012a4c <tcp_enqueue_flags+0x1c4>)
 80128c4:	f007 fb2a 	bl	8019f1c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80128c8:	78fb      	ldrb	r3, [r7, #3]
 80128ca:	f003 0302 	and.w	r3, r3, #2
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d001      	beq.n	80128d6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80128d2:	2301      	movs	r3, #1
 80128d4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128d6:	7ffb      	ldrb	r3, [r7, #31]
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	b2db      	uxtb	r3, r3
 80128dc:	f003 0304 	and.w	r3, r3, #4
 80128e0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128e2:	7dfb      	ldrb	r3, [r7, #23]
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128ea:	4619      	mov	r1, r3
 80128ec:	2036      	movs	r0, #54	; 0x36
 80128ee:	f7fa f867 	bl	800c9c0 <pbuf_alloc>
 80128f2:	6138      	str	r0, [r7, #16]
 80128f4:	693b      	ldr	r3, [r7, #16]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d109      	bne.n	801290e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	8b5b      	ldrh	r3, [r3, #26]
 80128fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012908:	f04f 33ff 	mov.w	r3, #4294967295
 801290c:	e095      	b.n	8012a3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	895a      	ldrh	r2, [r3, #10]
 8012912:	7dfb      	ldrb	r3, [r7, #23]
 8012914:	b29b      	uxth	r3, r3
 8012916:	429a      	cmp	r2, r3
 8012918:	d206      	bcs.n	8012928 <tcp_enqueue_flags+0xa0>
 801291a:	4b4a      	ldr	r3, [pc, #296]	; (8012a44 <tcp_enqueue_flags+0x1bc>)
 801291c:	f240 423a 	movw	r2, #1082	; 0x43a
 8012920:	494c      	ldr	r1, [pc, #304]	; (8012a54 <tcp_enqueue_flags+0x1cc>)
 8012922:	484a      	ldr	r0, [pc, #296]	; (8012a4c <tcp_enqueue_flags+0x1c4>)
 8012924:	f007 fafa 	bl	8019f1c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801292c:	78fa      	ldrb	r2, [r7, #3]
 801292e:	7ffb      	ldrb	r3, [r7, #31]
 8012930:	9300      	str	r3, [sp, #0]
 8012932:	460b      	mov	r3, r1
 8012934:	6939      	ldr	r1, [r7, #16]
 8012936:	6878      	ldr	r0, [r7, #4]
 8012938:	f7ff f916 	bl	8011b68 <tcp_create_segment>
 801293c:	60f8      	str	r0, [r7, #12]
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d109      	bne.n	8012958 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	8b5b      	ldrh	r3, [r3, #26]
 8012948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801294c:	b29a      	uxth	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012952:	f04f 33ff 	mov.w	r3, #4294967295
 8012956:	e070      	b.n	8012a3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	68db      	ldr	r3, [r3, #12]
 801295c:	f003 0303 	and.w	r3, r3, #3
 8012960:	2b00      	cmp	r3, #0
 8012962:	d006      	beq.n	8012972 <tcp_enqueue_flags+0xea>
 8012964:	4b37      	ldr	r3, [pc, #220]	; (8012a44 <tcp_enqueue_flags+0x1bc>)
 8012966:	f240 4242 	movw	r2, #1090	; 0x442
 801296a:	493b      	ldr	r1, [pc, #236]	; (8012a58 <tcp_enqueue_flags+0x1d0>)
 801296c:	4837      	ldr	r0, [pc, #220]	; (8012a4c <tcp_enqueue_flags+0x1c4>)
 801296e:	f007 fad5 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	891b      	ldrh	r3, [r3, #8]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d006      	beq.n	8012988 <tcp_enqueue_flags+0x100>
 801297a:	4b32      	ldr	r3, [pc, #200]	; (8012a44 <tcp_enqueue_flags+0x1bc>)
 801297c:	f240 4243 	movw	r2, #1091	; 0x443
 8012980:	4936      	ldr	r1, [pc, #216]	; (8012a5c <tcp_enqueue_flags+0x1d4>)
 8012982:	4832      	ldr	r0, [pc, #200]	; (8012a4c <tcp_enqueue_flags+0x1c4>)
 8012984:	f007 faca 	bl	8019f1c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801298c:	2b00      	cmp	r3, #0
 801298e:	d103      	bne.n	8012998 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	68fa      	ldr	r2, [r7, #12]
 8012994:	66da      	str	r2, [r3, #108]	; 0x6c
 8012996:	e00d      	b.n	80129b4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801299c:	61bb      	str	r3, [r7, #24]
 801299e:	e002      	b.n	80129a6 <tcp_enqueue_flags+0x11e>
 80129a0:	69bb      	ldr	r3, [r7, #24]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	61bb      	str	r3, [r7, #24]
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d1f8      	bne.n	80129a0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	68fa      	ldr	r2, [r7, #12]
 80129b2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2200      	movs	r2, #0
 80129b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80129bc:	78fb      	ldrb	r3, [r7, #3]
 80129be:	f003 0302 	and.w	r3, r3, #2
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d104      	bne.n	80129d0 <tcp_enqueue_flags+0x148>
 80129c6:	78fb      	ldrb	r3, [r7, #3]
 80129c8:	f003 0301 	and.w	r3, r3, #1
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d004      	beq.n	80129da <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129d4:	1c5a      	adds	r2, r3, #1
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80129da:	78fb      	ldrb	r3, [r7, #3]
 80129dc:	f003 0301 	and.w	r3, r3, #1
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d006      	beq.n	80129f2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	8b5b      	ldrh	r3, [r3, #26]
 80129e8:	f043 0320 	orr.w	r3, r3, #32
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	685b      	ldr	r3, [r3, #4]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fa fb50 	bl	800d09c <pbuf_clen>
 80129fc:	4603      	mov	r3, r0
 80129fe:	461a      	mov	r2, r3
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a06:	4413      	add	r3, r2
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d00e      	beq.n	8012a38 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d10a      	bne.n	8012a38 <tcp_enqueue_flags+0x1b0>
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d106      	bne.n	8012a38 <tcp_enqueue_flags+0x1b0>
 8012a2a:	4b06      	ldr	r3, [pc, #24]	; (8012a44 <tcp_enqueue_flags+0x1bc>)
 8012a2c:	f240 4266 	movw	r2, #1126	; 0x466
 8012a30:	490b      	ldr	r1, [pc, #44]	; (8012a60 <tcp_enqueue_flags+0x1d8>)
 8012a32:	4806      	ldr	r0, [pc, #24]	; (8012a4c <tcp_enqueue_flags+0x1c4>)
 8012a34:	f007 fa72 	bl	8019f1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a38:	2300      	movs	r3, #0
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3720      	adds	r7, #32
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	080202e4 	.word	0x080202e4
 8012a48:	08020708 	.word	0x08020708
 8012a4c:	08020338 	.word	0x08020338
 8012a50:	08020760 	.word	0x08020760
 8012a54:	08020780 	.word	0x08020780
 8012a58:	080207bc 	.word	0x080207bc
 8012a5c:	080207d4 	.word	0x080207d4
 8012a60:	08020800 	.word	0x08020800

08012a64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a64:	b5b0      	push	{r4, r5, r7, lr}
 8012a66:	b08a      	sub	sp, #40	; 0x28
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d106      	bne.n	8012a80 <tcp_output+0x1c>
 8012a72:	4ba0      	ldr	r3, [pc, #640]	; (8012cf4 <tcp_output+0x290>)
 8012a74:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012a78:	499f      	ldr	r1, [pc, #636]	; (8012cf8 <tcp_output+0x294>)
 8012a7a:	48a0      	ldr	r0, [pc, #640]	; (8012cfc <tcp_output+0x298>)
 8012a7c:	f007 fa4e 	bl	8019f1c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	7d1b      	ldrb	r3, [r3, #20]
 8012a84:	2b01      	cmp	r3, #1
 8012a86:	d106      	bne.n	8012a96 <tcp_output+0x32>
 8012a88:	4b9a      	ldr	r3, [pc, #616]	; (8012cf4 <tcp_output+0x290>)
 8012a8a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8012a8e:	499c      	ldr	r1, [pc, #624]	; (8012d00 <tcp_output+0x29c>)
 8012a90:	489a      	ldr	r0, [pc, #616]	; (8012cfc <tcp_output+0x298>)
 8012a92:	f007 fa43 	bl	8019f1c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a96:	4b9b      	ldr	r3, [pc, #620]	; (8012d04 <tcp_output+0x2a0>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	d101      	bne.n	8012aa4 <tcp_output+0x40>
    return ERR_OK;
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	e1d2      	b.n	8012e4a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ab0:	429a      	cmp	r2, r3
 8012ab2:	d203      	bcs.n	8012abc <tcp_output+0x58>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012aba:	e002      	b.n	8012ac2 <tcp_output+0x5e>
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ac2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ac8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d10b      	bne.n	8012ae8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	8b5b      	ldrh	r3, [r3, #26]
 8012ad4:	f003 0302 	and.w	r3, r3, #2
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 81a9 	beq.w	8012e30 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f000 fdd8 	bl	8013694 <tcp_send_empty_ack>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	e1b0      	b.n	8012e4a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012ae8:	6879      	ldr	r1, [r7, #4]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	3304      	adds	r3, #4
 8012aee:	461a      	mov	r2, r3
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f7ff f81d 	bl	8011b30 <tcp_route>
 8012af6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d102      	bne.n	8012b04 <tcp_output+0xa0>
    return ERR_RTE;
 8012afe:	f06f 0303 	mvn.w	r3, #3
 8012b02:	e1a2      	b.n	8012e4a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d003      	beq.n	8012b12 <tcp_output+0xae>
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d111      	bne.n	8012b36 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d002      	beq.n	8012b1e <tcp_output+0xba>
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	3304      	adds	r3, #4
 8012b1c:	e000      	b.n	8012b20 <tcp_output+0xbc>
 8012b1e:	2300      	movs	r3, #0
 8012b20:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b22:	693b      	ldr	r3, [r7, #16]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d102      	bne.n	8012b2e <tcp_output+0xca>
      return ERR_RTE;
 8012b28:	f06f 0303 	mvn.w	r3, #3
 8012b2c:	e18d      	b.n	8012e4a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b2e:	693b      	ldr	r3, [r7, #16]
 8012b30:	681a      	ldr	r2, [r3, #0]
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7f7 feac 	bl	800a89a <lwip_htonl>
 8012b42:	4602      	mov	r2, r0
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b48:	1ad3      	subs	r3, r2, r3
 8012b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b4c:	8912      	ldrh	r2, [r2, #8]
 8012b4e:	4413      	add	r3, r2
 8012b50:	69ba      	ldr	r2, [r7, #24]
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d227      	bcs.n	8012ba6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	69bb      	ldr	r3, [r7, #24]
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d114      	bne.n	8012b8e <tcp_output+0x12a>
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d110      	bne.n	8012b8e <tcp_output+0x12a>
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d10b      	bne.n	8012b8e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2201      	movs	r2, #1
 8012b82:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	8b5b      	ldrh	r3, [r3, #26]
 8012b92:	f003 0302 	and.w	r3, r3, #2
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	f000 814c 	beq.w	8012e34 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f000 fd79 	bl	8013694 <tcp_send_empty_ack>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	e151      	b.n	8012e4a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bb2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012bb4:	6a3b      	ldr	r3, [r7, #32]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	f000 811b 	beq.w	8012df2 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8012bbc:	e002      	b.n	8012bc4 <tcp_output+0x160>
 8012bbe:	6a3b      	ldr	r3, [r7, #32]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	623b      	str	r3, [r7, #32]
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d1f8      	bne.n	8012bbe <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012bcc:	e111      	b.n	8012df2 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd0:	68db      	ldr	r3, [r3, #12]
 8012bd2:	899b      	ldrh	r3, [r3, #12]
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7f7 fe4a 	bl	800a870 <lwip_htons>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	b2db      	uxtb	r3, r3
 8012be0:	f003 0304 	and.w	r3, r3, #4
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d006      	beq.n	8012bf6 <tcp_output+0x192>
 8012be8:	4b42      	ldr	r3, [pc, #264]	; (8012cf4 <tcp_output+0x290>)
 8012bea:	f240 5237 	movw	r2, #1335	; 0x537
 8012bee:	4946      	ldr	r1, [pc, #280]	; (8012d08 <tcp_output+0x2a4>)
 8012bf0:	4842      	ldr	r0, [pc, #264]	; (8012cfc <tcp_output+0x298>)
 8012bf2:	f007 f993 	bl	8019f1c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d01f      	beq.n	8012c3e <tcp_output+0x1da>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	8b5b      	ldrh	r3, [r3, #26]
 8012c02:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d119      	bne.n	8012c3e <tcp_output+0x1da>
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d00b      	beq.n	8012c2a <tcp_output+0x1c6>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d110      	bne.n	8012c3e <tcp_output+0x1da>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c20:	891a      	ldrh	r2, [r3, #8]
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d209      	bcs.n	8012c3e <tcp_output+0x1da>
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d004      	beq.n	8012c3e <tcp_output+0x1da>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c3a:	2b08      	cmp	r3, #8
 8012c3c:	d901      	bls.n	8012c42 <tcp_output+0x1de>
 8012c3e:	2301      	movs	r3, #1
 8012c40:	e000      	b.n	8012c44 <tcp_output+0x1e0>
 8012c42:	2300      	movs	r3, #0
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d106      	bne.n	8012c56 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	8b5b      	ldrh	r3, [r3, #26]
 8012c4c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	f000 80e3 	beq.w	8012e1c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	7d1b      	ldrb	r3, [r3, #20]
 8012c5a:	2b02      	cmp	r3, #2
 8012c5c:	d00d      	beq.n	8012c7a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	899b      	ldrh	r3, [r3, #12]
 8012c64:	b29c      	uxth	r4, r3
 8012c66:	2010      	movs	r0, #16
 8012c68:	f7f7 fe02 	bl	800a870 <lwip_htons>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	461a      	mov	r2, r3
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	4322      	orrs	r2, r4
 8012c76:	b292      	uxth	r2, r2
 8012c78:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c7a:	697a      	ldr	r2, [r7, #20]
 8012c7c:	6879      	ldr	r1, [r7, #4]
 8012c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c80:	f000 f908 	bl	8012e94 <tcp_output_segment>
 8012c84:	4603      	mov	r3, r0
 8012c86:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d009      	beq.n	8012ca4 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	8b5b      	ldrh	r3, [r3, #26]
 8012c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c98:	b29a      	uxth	r2, r3
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	835a      	strh	r2, [r3, #26]
      return err;
 8012c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ca2:	e0d2      	b.n	8012e4a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca6:	681a      	ldr	r2, [r3, #0]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	7d1b      	ldrb	r3, [r3, #20]
 8012cb0:	2b02      	cmp	r3, #2
 8012cb2:	d006      	beq.n	8012cc2 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	8b5b      	ldrh	r3, [r3, #26]
 8012cb8:	f023 0303 	bic.w	r3, r3, #3
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc4:	68db      	ldr	r3, [r3, #12]
 8012cc6:	685b      	ldr	r3, [r3, #4]
 8012cc8:	4618      	mov	r0, r3
 8012cca:	f7f7 fde6 	bl	800a89a <lwip_htonl>
 8012cce:	4604      	mov	r4, r0
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	891b      	ldrh	r3, [r3, #8]
 8012cd4:	461d      	mov	r5, r3
 8012cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd8:	68db      	ldr	r3, [r3, #12]
 8012cda:	899b      	ldrh	r3, [r3, #12]
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	4618      	mov	r0, r3
 8012ce0:	f7f7 fdc6 	bl	800a870 <lwip_htons>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	f003 0303 	and.w	r3, r3, #3
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d00d      	beq.n	8012d0c <tcp_output+0x2a8>
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	e00c      	b.n	8012d0e <tcp_output+0x2aa>
 8012cf4:	080202e4 	.word	0x080202e4
 8012cf8:	08020828 	.word	0x08020828
 8012cfc:	08020338 	.word	0x08020338
 8012d00:	08020840 	.word	0x08020840
 8012d04:	200280a4 	.word	0x200280a4
 8012d08:	08020868 	.word	0x08020868
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	442b      	add	r3, r5
 8012d10:	4423      	add	r3, r4
 8012d12:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	1ad3      	subs	r3, r2, r3
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	da02      	bge.n	8012d26 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d28:	891b      	ldrh	r3, [r3, #8]
 8012d2a:	461c      	mov	r4, r3
 8012d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2e:	68db      	ldr	r3, [r3, #12]
 8012d30:	899b      	ldrh	r3, [r3, #12]
 8012d32:	b29b      	uxth	r3, r3
 8012d34:	4618      	mov	r0, r3
 8012d36:	f7f7 fd9b 	bl	800a870 <lwip_htons>
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	b2db      	uxtb	r3, r3
 8012d3e:	f003 0303 	and.w	r3, r3, #3
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d001      	beq.n	8012d4a <tcp_output+0x2e6>
 8012d46:	2301      	movs	r3, #1
 8012d48:	e000      	b.n	8012d4c <tcp_output+0x2e8>
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	4423      	add	r3, r4
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d049      	beq.n	8012de6 <tcp_output+0x382>
      seg->next = NULL;
 8012d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d54:	2200      	movs	r2, #0
 8012d56:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d105      	bne.n	8012d6c <tcp_output+0x308>
        pcb->unacked = seg;
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d64:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d68:	623b      	str	r3, [r7, #32]
 8012d6a:	e03f      	b.n	8012dec <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	4618      	mov	r0, r3
 8012d74:	f7f7 fd91 	bl	800a89a <lwip_htonl>
 8012d78:	4604      	mov	r4, r0
 8012d7a:	6a3b      	ldr	r3, [r7, #32]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7f7 fd8a 	bl	800a89a <lwip_htonl>
 8012d86:	4603      	mov	r3, r0
 8012d88:	1ae3      	subs	r3, r4, r3
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	da24      	bge.n	8012dd8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	3370      	adds	r3, #112	; 0x70
 8012d92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d94:	e002      	b.n	8012d9c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d011      	beq.n	8012dc8 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	68db      	ldr	r3, [r3, #12]
 8012daa:	685b      	ldr	r3, [r3, #4]
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f7 fd74 	bl	800a89a <lwip_htonl>
 8012db2:	4604      	mov	r4, r0
 8012db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	685b      	ldr	r3, [r3, #4]
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7f7 fd6d 	bl	800a89a <lwip_htonl>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	dbe6      	blt.n	8012d96 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8012dc8:	69fb      	ldr	r3, [r7, #28]
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dd4:	601a      	str	r2, [r3, #0]
 8012dd6:	e009      	b.n	8012dec <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012dd8:	6a3b      	ldr	r3, [r7, #32]
 8012dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ddc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012dde:	6a3b      	ldr	r3, [r7, #32]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	623b      	str	r3, [r7, #32]
 8012de4:	e002      	b.n	8012dec <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012de8:	f7fb ff1a 	bl	800ec20 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012df0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d012      	beq.n	8012e1e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f7 fd4b 	bl	800a89a <lwip_htonl>
 8012e04:	4602      	mov	r2, r0
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e0e:	8912      	ldrh	r2, [r2, #8]
 8012e10:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e12:	69ba      	ldr	r2, [r7, #24]
 8012e14:	429a      	cmp	r2, r3
 8012e16:	f4bf aeda 	bcs.w	8012bce <tcp_output+0x16a>
 8012e1a:	e000      	b.n	8012e1e <tcp_output+0x3ba>
      break;
 8012e1c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d108      	bne.n	8012e38 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e2e:	e004      	b.n	8012e3a <tcp_output+0x3d6>
    goto output_done;
 8012e30:	bf00      	nop
 8012e32:	e002      	b.n	8012e3a <tcp_output+0x3d6>
    goto output_done;
 8012e34:	bf00      	nop
 8012e36:	e000      	b.n	8012e3a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e38:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	8b5b      	ldrh	r3, [r3, #26]
 8012e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e42:	b29a      	uxth	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e48:	2300      	movs	r3, #0
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3728      	adds	r7, #40	; 0x28
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bdb0      	pop	{r4, r5, r7, pc}
 8012e52:	bf00      	nop

08012e54 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d106      	bne.n	8012e70 <tcp_output_segment_busy+0x1c>
 8012e62:	4b09      	ldr	r3, [pc, #36]	; (8012e88 <tcp_output_segment_busy+0x34>)
 8012e64:	f240 529a 	movw	r2, #1434	; 0x59a
 8012e68:	4908      	ldr	r1, [pc, #32]	; (8012e8c <tcp_output_segment_busy+0x38>)
 8012e6a:	4809      	ldr	r0, [pc, #36]	; (8012e90 <tcp_output_segment_busy+0x3c>)
 8012e6c:	f007 f856 	bl	8019f1c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	7b9b      	ldrb	r3, [r3, #14]
 8012e76:	2b01      	cmp	r3, #1
 8012e78:	d001      	beq.n	8012e7e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e000      	b.n	8012e80 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3708      	adds	r7, #8
 8012e84:	46bd      	mov	sp, r7
 8012e86:	bd80      	pop	{r7, pc}
 8012e88:	080202e4 	.word	0x080202e4
 8012e8c:	08020880 	.word	0x08020880
 8012e90:	08020338 	.word	0x08020338

08012e94 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012e94:	b5b0      	push	{r4, r5, r7, lr}
 8012e96:	b08c      	sub	sp, #48	; 0x30
 8012e98:	af04      	add	r7, sp, #16
 8012e9a:	60f8      	str	r0, [r7, #12]
 8012e9c:	60b9      	str	r1, [r7, #8]
 8012e9e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d106      	bne.n	8012eb4 <tcp_output_segment+0x20>
 8012ea6:	4b64      	ldr	r3, [pc, #400]	; (8013038 <tcp_output_segment+0x1a4>)
 8012ea8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012eac:	4963      	ldr	r1, [pc, #396]	; (801303c <tcp_output_segment+0x1a8>)
 8012eae:	4864      	ldr	r0, [pc, #400]	; (8013040 <tcp_output_segment+0x1ac>)
 8012eb0:	f007 f834 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d106      	bne.n	8012ec8 <tcp_output_segment+0x34>
 8012eba:	4b5f      	ldr	r3, [pc, #380]	; (8013038 <tcp_output_segment+0x1a4>)
 8012ebc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012ec0:	4960      	ldr	r1, [pc, #384]	; (8013044 <tcp_output_segment+0x1b0>)
 8012ec2:	485f      	ldr	r0, [pc, #380]	; (8013040 <tcp_output_segment+0x1ac>)
 8012ec4:	f007 f82a 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d106      	bne.n	8012edc <tcp_output_segment+0x48>
 8012ece:	4b5a      	ldr	r3, [pc, #360]	; (8013038 <tcp_output_segment+0x1a4>)
 8012ed0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012ed4:	495c      	ldr	r1, [pc, #368]	; (8013048 <tcp_output_segment+0x1b4>)
 8012ed6:	485a      	ldr	r0, [pc, #360]	; (8013040 <tcp_output_segment+0x1ac>)
 8012ed8:	f007 f820 	bl	8019f1c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f7ff ffb9 	bl	8012e54 <tcp_output_segment_busy>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d001      	beq.n	8012eec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012ee8:	2300      	movs	r3, #0
 8012eea:	e0a0      	b.n	801302e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	68dc      	ldr	r4, [r3, #12]
 8012ef4:	4610      	mov	r0, r2
 8012ef6:	f7f7 fcd0 	bl	800a89a <lwip_htonl>
 8012efa:	4603      	mov	r3, r0
 8012efc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012efe:	68bb      	ldr	r3, [r7, #8]
 8012f00:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	68dc      	ldr	r4, [r3, #12]
 8012f06:	4610      	mov	r0, r2
 8012f08:	f7f7 fcb2 	bl	800a870 <lwip_htons>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f14:	68ba      	ldr	r2, [r7, #8]
 8012f16:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f18:	441a      	add	r2, r3
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	68db      	ldr	r3, [r3, #12]
 8012f22:	3314      	adds	r3, #20
 8012f24:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	7a9b      	ldrb	r3, [r3, #10]
 8012f2a:	f003 0301 	and.w	r3, r3, #1
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d015      	beq.n	8012f5e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f32:	68bb      	ldr	r3, [r7, #8]
 8012f34:	3304      	adds	r3, #4
 8012f36:	461a      	mov	r2, r3
 8012f38:	6879      	ldr	r1, [r7, #4]
 8012f3a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012f3e:	f7fc fa33 	bl	800f3a8 <tcp_eff_send_mss_netif>
 8012f42:	4603      	mov	r3, r0
 8012f44:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f46:	8b7b      	ldrh	r3, [r7, #26]
 8012f48:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7f7 fca4 	bl	800a89a <lwip_htonl>
 8012f52:	4602      	mov	r2, r0
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f58:	69fb      	ldr	r3, [r7, #28]
 8012f5a:	3304      	adds	r3, #4
 8012f5c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	da02      	bge.n	8012f6e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d10c      	bne.n	8012f90 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f76:	4b35      	ldr	r3, [pc, #212]	; (801304c <tcp_output_segment+0x1b8>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7f7 fc88 	bl	800a89a <lwip_htonl>
 8012f8a:	4602      	mov	r2, r0
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	68db      	ldr	r3, [r3, #12]
 8012f94:	461a      	mov	r2, r3
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	1ad3      	subs	r3, r2, r3
 8012f9e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	8959      	ldrh	r1, [r3, #10]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	8b3a      	ldrh	r2, [r7, #24]
 8012fac:	1a8a      	subs	r2, r1, r2
 8012fae:	b292      	uxth	r2, r2
 8012fb0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	8919      	ldrh	r1, [r3, #8]
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	685b      	ldr	r3, [r3, #4]
 8012fbc:	8b3a      	ldrh	r2, [r7, #24]
 8012fbe:	1a8a      	subs	r2, r1, r2
 8012fc0:	b292      	uxth	r2, r2
 8012fc2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	68fa      	ldr	r2, [r7, #12]
 8012fca:	68d2      	ldr	r2, [r2, #12]
 8012fcc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	741a      	strb	r2, [r3, #16]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	68db      	ldr	r3, [r3, #12]
 8012fde:	f103 0214 	add.w	r2, r3, #20
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	7a9b      	ldrb	r3, [r3, #10]
 8012fe6:	009b      	lsls	r3, r3, #2
 8012fe8:	f003 0304 	and.w	r3, r3, #4
 8012fec:	4413      	add	r3, r2
 8012fee:	69fa      	ldr	r2, [r7, #28]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d006      	beq.n	8013002 <tcp_output_segment+0x16e>
 8012ff4:	4b10      	ldr	r3, [pc, #64]	; (8013038 <tcp_output_segment+0x1a4>)
 8012ff6:	f240 621c 	movw	r2, #1564	; 0x61c
 8012ffa:	4915      	ldr	r1, [pc, #84]	; (8013050 <tcp_output_segment+0x1bc>)
 8012ffc:	4810      	ldr	r0, [pc, #64]	; (8013040 <tcp_output_segment+0x1ac>)
 8012ffe:	f006 ff8d 	bl	8019f1c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	6858      	ldr	r0, [r3, #4]
 8013006:	68b9      	ldr	r1, [r7, #8]
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	1d1c      	adds	r4, r3, #4
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	7add      	ldrb	r5, [r3, #11]
 8013010:	68bb      	ldr	r3, [r7, #8]
 8013012:	7a9b      	ldrb	r3, [r3, #10]
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	9202      	str	r2, [sp, #8]
 8013018:	2206      	movs	r2, #6
 801301a:	9201      	str	r2, [sp, #4]
 801301c:	9300      	str	r3, [sp, #0]
 801301e:	462b      	mov	r3, r5
 8013020:	4622      	mov	r2, r4
 8013022:	f004 fcef 	bl	8017a04 <ip4_output_if>
 8013026:	4603      	mov	r3, r0
 8013028:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801302a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801302e:	4618      	mov	r0, r3
 8013030:	3720      	adds	r7, #32
 8013032:	46bd      	mov	sp, r7
 8013034:	bdb0      	pop	{r4, r5, r7, pc}
 8013036:	bf00      	nop
 8013038:	080202e4 	.word	0x080202e4
 801303c:	080208a8 	.word	0x080208a8
 8013040:	08020338 	.word	0x08020338
 8013044:	080208c8 	.word	0x080208c8
 8013048:	080208e8 	.word	0x080208e8
 801304c:	20028094 	.word	0x20028094
 8013050:	0802090c 	.word	0x0802090c

08013054 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013054:	b5b0      	push	{r4, r5, r7, lr}
 8013056:	b084      	sub	sp, #16
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d106      	bne.n	8013070 <tcp_rexmit_rto_prepare+0x1c>
 8013062:	4b31      	ldr	r3, [pc, #196]	; (8013128 <tcp_rexmit_rto_prepare+0xd4>)
 8013064:	f240 6263 	movw	r2, #1635	; 0x663
 8013068:	4930      	ldr	r1, [pc, #192]	; (801312c <tcp_rexmit_rto_prepare+0xd8>)
 801306a:	4831      	ldr	r0, [pc, #196]	; (8013130 <tcp_rexmit_rto_prepare+0xdc>)
 801306c:	f006 ff56 	bl	8019f1c <iprintf>

  if (pcb->unacked == NULL) {
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013074:	2b00      	cmp	r3, #0
 8013076:	d102      	bne.n	801307e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013078:	f06f 0305 	mvn.w	r3, #5
 801307c:	e050      	b.n	8013120 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013082:	60fb      	str	r3, [r7, #12]
 8013084:	e00b      	b.n	801309e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013086:	68f8      	ldr	r0, [r7, #12]
 8013088:	f7ff fee4 	bl	8012e54 <tcp_output_segment_busy>
 801308c:	4603      	mov	r3, r0
 801308e:	2b00      	cmp	r3, #0
 8013090:	d002      	beq.n	8013098 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013092:	f06f 0305 	mvn.w	r3, #5
 8013096:	e043      	b.n	8013120 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	60fb      	str	r3, [r7, #12]
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d1ef      	bne.n	8013086 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f7ff fed4 	bl	8012e54 <tcp_output_segment_busy>
 80130ac:	4603      	mov	r3, r0
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d002      	beq.n	80130b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130b2:	f06f 0305 	mvn.w	r3, #5
 80130b6:	e033      	b.n	8013120 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	2200      	movs	r2, #0
 80130cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	8b5b      	ldrh	r3, [r3, #26]
 80130d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80130d6:	b29a      	uxth	r2, r3
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7f7 fbd9 	bl	800a89a <lwip_htonl>
 80130e8:	4604      	mov	r4, r0
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	891b      	ldrh	r3, [r3, #8]
 80130ee:	461d      	mov	r5, r3
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	68db      	ldr	r3, [r3, #12]
 80130f4:	899b      	ldrh	r3, [r3, #12]
 80130f6:	b29b      	uxth	r3, r3
 80130f8:	4618      	mov	r0, r3
 80130fa:	f7f7 fbb9 	bl	800a870 <lwip_htons>
 80130fe:	4603      	mov	r3, r0
 8013100:	b2db      	uxtb	r3, r3
 8013102:	f003 0303 	and.w	r3, r3, #3
 8013106:	2b00      	cmp	r3, #0
 8013108:	d001      	beq.n	801310e <tcp_rexmit_rto_prepare+0xba>
 801310a:	2301      	movs	r3, #1
 801310c:	e000      	b.n	8013110 <tcp_rexmit_rto_prepare+0xbc>
 801310e:	2300      	movs	r3, #0
 8013110:	442b      	add	r3, r5
 8013112:	18e2      	adds	r2, r4, r3
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2200      	movs	r2, #0
 801311c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801311e:	2300      	movs	r3, #0
}
 8013120:	4618      	mov	r0, r3
 8013122:	3710      	adds	r7, #16
 8013124:	46bd      	mov	sp, r7
 8013126:	bdb0      	pop	{r4, r5, r7, pc}
 8013128:	080202e4 	.word	0x080202e4
 801312c:	08020920 	.word	0x08020920
 8013130:	08020338 	.word	0x08020338

08013134 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b082      	sub	sp, #8
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d106      	bne.n	8013150 <tcp_rexmit_rto_commit+0x1c>
 8013142:	4b0d      	ldr	r3, [pc, #52]	; (8013178 <tcp_rexmit_rto_commit+0x44>)
 8013144:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013148:	490c      	ldr	r1, [pc, #48]	; (801317c <tcp_rexmit_rto_commit+0x48>)
 801314a:	480d      	ldr	r0, [pc, #52]	; (8013180 <tcp_rexmit_rto_commit+0x4c>)
 801314c:	f006 fee6 	bl	8019f1c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013156:	2bff      	cmp	r3, #255	; 0xff
 8013158:	d007      	beq.n	801316a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013160:	3301      	adds	r3, #1
 8013162:	b2da      	uxtb	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	f7ff fc7a 	bl	8012a64 <tcp_output>
}
 8013170:	bf00      	nop
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}
 8013178:	080202e4 	.word	0x080202e4
 801317c:	08020944 	.word	0x08020944
 8013180:	08020338 	.word	0x08020338

08013184 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b082      	sub	sp, #8
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d106      	bne.n	80131a0 <tcp_rexmit_rto+0x1c>
 8013192:	4b0a      	ldr	r3, [pc, #40]	; (80131bc <tcp_rexmit_rto+0x38>)
 8013194:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013198:	4909      	ldr	r1, [pc, #36]	; (80131c0 <tcp_rexmit_rto+0x3c>)
 801319a:	480a      	ldr	r0, [pc, #40]	; (80131c4 <tcp_rexmit_rto+0x40>)
 801319c:	f006 febe 	bl	8019f1c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7ff ff57 	bl	8013054 <tcp_rexmit_rto_prepare>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d102      	bne.n	80131b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f7ff ffc1 	bl	8013134 <tcp_rexmit_rto_commit>
  }
}
 80131b2:	bf00      	nop
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	080202e4 	.word	0x080202e4
 80131c0:	08020968 	.word	0x08020968
 80131c4:	08020338 	.word	0x08020338

080131c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80131c8:	b590      	push	{r4, r7, lr}
 80131ca:	b085      	sub	sp, #20
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d106      	bne.n	80131e4 <tcp_rexmit+0x1c>
 80131d6:	4b2f      	ldr	r3, [pc, #188]	; (8013294 <tcp_rexmit+0xcc>)
 80131d8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80131dc:	492e      	ldr	r1, [pc, #184]	; (8013298 <tcp_rexmit+0xd0>)
 80131de:	482f      	ldr	r0, [pc, #188]	; (801329c <tcp_rexmit+0xd4>)
 80131e0:	f006 fe9c 	bl	8019f1c <iprintf>

  if (pcb->unacked == NULL) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d102      	bne.n	80131f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80131ec:	f06f 0305 	mvn.w	r3, #5
 80131f0:	e04c      	b.n	801328c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80131f8:	68b8      	ldr	r0, [r7, #8]
 80131fa:	f7ff fe2b 	bl	8012e54 <tcp_output_segment_busy>
 80131fe:	4603      	mov	r3, r0
 8013200:	2b00      	cmp	r3, #0
 8013202:	d002      	beq.n	801320a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013204:	f06f 0305 	mvn.w	r3, #5
 8013208:	e040      	b.n	801328c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	681a      	ldr	r2, [r3, #0]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	336c      	adds	r3, #108	; 0x6c
 8013216:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013218:	e002      	b.n	8013220 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d011      	beq.n	801324c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	68db      	ldr	r3, [r3, #12]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	4618      	mov	r0, r3
 8013232:	f7f7 fb32 	bl	800a89a <lwip_htonl>
 8013236:	4604      	mov	r4, r0
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	68db      	ldr	r3, [r3, #12]
 801323c:	685b      	ldr	r3, [r3, #4]
 801323e:	4618      	mov	r0, r3
 8013240:	f7f7 fb2b 	bl	800a89a <lwip_htonl>
 8013244:	4603      	mov	r3, r0
 8013246:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013248:	2b00      	cmp	r3, #0
 801324a:	dbe6      	blt.n	801321a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	681a      	ldr	r2, [r3, #0]
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	68ba      	ldr	r2, [r7, #8]
 8013258:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d103      	bne.n	801326a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2200      	movs	r2, #0
 8013266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013270:	2bff      	cmp	r3, #255	; 0xff
 8013272:	d007      	beq.n	8013284 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801327a:	3301      	adds	r3, #1
 801327c:	b2da      	uxtb	r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2200      	movs	r2, #0
 8013288:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	3714      	adds	r7, #20
 8013290:	46bd      	mov	sp, r7
 8013292:	bd90      	pop	{r4, r7, pc}
 8013294:	080202e4 	.word	0x080202e4
 8013298:	08020984 	.word	0x08020984
 801329c:	08020338 	.word	0x08020338

080132a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d106      	bne.n	80132bc <tcp_rexmit_fast+0x1c>
 80132ae:	4b2f      	ldr	r3, [pc, #188]	; (801336c <tcp_rexmit_fast+0xcc>)
 80132b0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80132b4:	492e      	ldr	r1, [pc, #184]	; (8013370 <tcp_rexmit_fast+0xd0>)
 80132b6:	482f      	ldr	r0, [pc, #188]	; (8013374 <tcp_rexmit_fast+0xd4>)
 80132b8:	f006 fe30 	bl	8019f1c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d04f      	beq.n	8013364 <tcp_rexmit_fast+0xc4>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	8b5b      	ldrh	r3, [r3, #26]
 80132c8:	f003 0304 	and.w	r3, r3, #4
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d149      	bne.n	8013364 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f7ff ff79 	bl	80131c8 <tcp_rexmit>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d143      	bne.n	8013364 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d208      	bcs.n	80132fe <tcp_rexmit_fast+0x5e>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	da00      	bge.n	80132f8 <tcp_rexmit_fast+0x58>
 80132f6:	3301      	adds	r3, #1
 80132f8:	105b      	asrs	r3, r3, #1
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	e007      	b.n	801330e <tcp_rexmit_fast+0x6e>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013304:	2b00      	cmp	r3, #0
 8013306:	da00      	bge.n	801330a <tcp_rexmit_fast+0x6a>
 8013308:	3301      	adds	r3, #1
 801330a:	105b      	asrs	r3, r3, #1
 801330c:	b29b      	uxth	r3, r3
 801330e:	687a      	ldr	r2, [r7, #4]
 8013310:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801331a:	461a      	mov	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013320:	005b      	lsls	r3, r3, #1
 8013322:	429a      	cmp	r2, r3
 8013324:	d206      	bcs.n	8013334 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801332a:	005b      	lsls	r3, r3, #1
 801332c:	b29a      	uxth	r2, r3
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801333e:	4619      	mov	r1, r3
 8013340:	0049      	lsls	r1, r1, #1
 8013342:	440b      	add	r3, r1
 8013344:	b29b      	uxth	r3, r3
 8013346:	4413      	add	r3, r2
 8013348:	b29a      	uxth	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	8b5b      	ldrh	r3, [r3, #26]
 8013354:	f043 0304 	orr.w	r3, r3, #4
 8013358:	b29a      	uxth	r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2200      	movs	r2, #0
 8013362:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013364:	bf00      	nop
 8013366:	3708      	adds	r7, #8
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}
 801336c:	080202e4 	.word	0x080202e4
 8013370:	0802099c 	.word	0x0802099c
 8013374:	08020338 	.word	0x08020338

08013378 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b086      	sub	sp, #24
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	607b      	str	r3, [r7, #4]
 8013382:	460b      	mov	r3, r1
 8013384:	817b      	strh	r3, [r7, #10]
 8013386:	4613      	mov	r3, r2
 8013388:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801338a:	897a      	ldrh	r2, [r7, #10]
 801338c:	893b      	ldrh	r3, [r7, #8]
 801338e:	4413      	add	r3, r2
 8013390:	b29b      	uxth	r3, r3
 8013392:	3314      	adds	r3, #20
 8013394:	b29b      	uxth	r3, r3
 8013396:	f44f 7220 	mov.w	r2, #640	; 0x280
 801339a:	4619      	mov	r1, r3
 801339c:	2022      	movs	r0, #34	; 0x22
 801339e:	f7f9 fb0f 	bl	800c9c0 <pbuf_alloc>
 80133a2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d04e      	beq.n	8013448 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80133aa:	697b      	ldr	r3, [r7, #20]
 80133ac:	895b      	ldrh	r3, [r3, #10]
 80133ae:	461a      	mov	r2, r3
 80133b0:	897b      	ldrh	r3, [r7, #10]
 80133b2:	3314      	adds	r3, #20
 80133b4:	429a      	cmp	r2, r3
 80133b6:	da06      	bge.n	80133c6 <tcp_output_alloc_header_common+0x4e>
 80133b8:	4b26      	ldr	r3, [pc, #152]	; (8013454 <tcp_output_alloc_header_common+0xdc>)
 80133ba:	f240 7224 	movw	r2, #1828	; 0x724
 80133be:	4926      	ldr	r1, [pc, #152]	; (8013458 <tcp_output_alloc_header_common+0xe0>)
 80133c0:	4826      	ldr	r0, [pc, #152]	; (801345c <tcp_output_alloc_header_common+0xe4>)
 80133c2:	f006 fdab 	bl	8019f1c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	685b      	ldr	r3, [r3, #4]
 80133ca:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80133cc:	8c3b      	ldrh	r3, [r7, #32]
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7f7 fa4e 	bl	800a870 <lwip_htons>
 80133d4:	4603      	mov	r3, r0
 80133d6:	461a      	mov	r2, r3
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80133dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133de:	4618      	mov	r0, r3
 80133e0:	f7f7 fa46 	bl	800a870 <lwip_htons>
 80133e4:	4603      	mov	r3, r0
 80133e6:	461a      	mov	r2, r3
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80133ec:	693b      	ldr	r3, [r7, #16]
 80133ee:	687a      	ldr	r2, [r7, #4]
 80133f0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80133f2:	68f8      	ldr	r0, [r7, #12]
 80133f4:	f7f7 fa51 	bl	800a89a <lwip_htonl>
 80133f8:	4602      	mov	r2, r0
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80133fe:	897b      	ldrh	r3, [r7, #10]
 8013400:	089b      	lsrs	r3, r3, #2
 8013402:	b29b      	uxth	r3, r3
 8013404:	3305      	adds	r3, #5
 8013406:	b29b      	uxth	r3, r3
 8013408:	031b      	lsls	r3, r3, #12
 801340a:	b29a      	uxth	r2, r3
 801340c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013410:	b29b      	uxth	r3, r3
 8013412:	4313      	orrs	r3, r2
 8013414:	b29b      	uxth	r3, r3
 8013416:	4618      	mov	r0, r3
 8013418:	f7f7 fa2a 	bl	800a870 <lwip_htons>
 801341c:	4603      	mov	r3, r0
 801341e:	461a      	mov	r2, r3
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013424:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013426:	4618      	mov	r0, r3
 8013428:	f7f7 fa22 	bl	800a870 <lwip_htons>
 801342c:	4603      	mov	r3, r0
 801342e:	461a      	mov	r2, r3
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013434:	693b      	ldr	r3, [r7, #16]
 8013436:	2200      	movs	r2, #0
 8013438:	741a      	strb	r2, [r3, #16]
 801343a:	2200      	movs	r2, #0
 801343c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	2200      	movs	r2, #0
 8013442:	749a      	strb	r2, [r3, #18]
 8013444:	2200      	movs	r2, #0
 8013446:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013448:	697b      	ldr	r3, [r7, #20]
}
 801344a:	4618      	mov	r0, r3
 801344c:	3718      	adds	r7, #24
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	080202e4 	.word	0x080202e4
 8013458:	080209bc 	.word	0x080209bc
 801345c:	08020338 	.word	0x08020338

08013460 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013460:	b5b0      	push	{r4, r5, r7, lr}
 8013462:	b08a      	sub	sp, #40	; 0x28
 8013464:	af04      	add	r7, sp, #16
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	607b      	str	r3, [r7, #4]
 801346a:	460b      	mov	r3, r1
 801346c:	817b      	strh	r3, [r7, #10]
 801346e:	4613      	mov	r3, r2
 8013470:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d106      	bne.n	8013486 <tcp_output_alloc_header+0x26>
 8013478:	4b15      	ldr	r3, [pc, #84]	; (80134d0 <tcp_output_alloc_header+0x70>)
 801347a:	f240 7242 	movw	r2, #1858	; 0x742
 801347e:	4915      	ldr	r1, [pc, #84]	; (80134d4 <tcp_output_alloc_header+0x74>)
 8013480:	4815      	ldr	r0, [pc, #84]	; (80134d8 <tcp_output_alloc_header+0x78>)
 8013482:	f006 fd4b 	bl	8019f1c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	8adb      	ldrh	r3, [r3, #22]
 801348e:	68fa      	ldr	r2, [r7, #12]
 8013490:	8b12      	ldrh	r2, [r2, #24]
 8013492:	68f9      	ldr	r1, [r7, #12]
 8013494:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013496:	893d      	ldrh	r5, [r7, #8]
 8013498:	897c      	ldrh	r4, [r7, #10]
 801349a:	9103      	str	r1, [sp, #12]
 801349c:	2110      	movs	r1, #16
 801349e:	9102      	str	r1, [sp, #8]
 80134a0:	9201      	str	r2, [sp, #4]
 80134a2:	9300      	str	r3, [sp, #0]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	462a      	mov	r2, r5
 80134a8:	4621      	mov	r1, r4
 80134aa:	f7ff ff65 	bl	8013378 <tcp_output_alloc_header_common>
 80134ae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d006      	beq.n	80134c4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ba:	68fa      	ldr	r2, [r7, #12]
 80134bc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80134be:	441a      	add	r2, r3
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80134c4:	697b      	ldr	r3, [r7, #20]
}
 80134c6:	4618      	mov	r0, r3
 80134c8:	3718      	adds	r7, #24
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bdb0      	pop	{r4, r5, r7, pc}
 80134ce:	bf00      	nop
 80134d0:	080202e4 	.word	0x080202e4
 80134d4:	080209ec 	.word	0x080209ec
 80134d8:	08020338 	.word	0x08020338

080134dc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80134dc:	b580      	push	{r7, lr}
 80134de:	b088      	sub	sp, #32
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	60f8      	str	r0, [r7, #12]
 80134e4:	60b9      	str	r1, [r7, #8]
 80134e6:	4611      	mov	r1, r2
 80134e8:	461a      	mov	r2, r3
 80134ea:	460b      	mov	r3, r1
 80134ec:	71fb      	strb	r3, [r7, #7]
 80134ee:	4613      	mov	r3, r2
 80134f0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80134f2:	2300      	movs	r3, #0
 80134f4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d106      	bne.n	801350a <tcp_output_fill_options+0x2e>
 80134fc:	4b13      	ldr	r3, [pc, #76]	; (801354c <tcp_output_fill_options+0x70>)
 80134fe:	f240 7256 	movw	r2, #1878	; 0x756
 8013502:	4913      	ldr	r1, [pc, #76]	; (8013550 <tcp_output_fill_options+0x74>)
 8013504:	4813      	ldr	r0, [pc, #76]	; (8013554 <tcp_output_fill_options+0x78>)
 8013506:	f006 fd09 	bl	8019f1c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	685b      	ldr	r3, [r3, #4]
 801350e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013510:	69bb      	ldr	r3, [r7, #24]
 8013512:	3314      	adds	r3, #20
 8013514:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013516:	69bb      	ldr	r3, [r7, #24]
 8013518:	f103 0214 	add.w	r2, r3, #20
 801351c:	8bfb      	ldrh	r3, [r7, #30]
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	4619      	mov	r1, r3
 8013522:	79fb      	ldrb	r3, [r7, #7]
 8013524:	009b      	lsls	r3, r3, #2
 8013526:	f003 0304 	and.w	r3, r3, #4
 801352a:	440b      	add	r3, r1
 801352c:	4413      	add	r3, r2
 801352e:	697a      	ldr	r2, [r7, #20]
 8013530:	429a      	cmp	r2, r3
 8013532:	d006      	beq.n	8013542 <tcp_output_fill_options+0x66>
 8013534:	4b05      	ldr	r3, [pc, #20]	; (801354c <tcp_output_fill_options+0x70>)
 8013536:	f240 7275 	movw	r2, #1909	; 0x775
 801353a:	4907      	ldr	r1, [pc, #28]	; (8013558 <tcp_output_fill_options+0x7c>)
 801353c:	4805      	ldr	r0, [pc, #20]	; (8013554 <tcp_output_fill_options+0x78>)
 801353e:	f006 fced 	bl	8019f1c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013542:	bf00      	nop
 8013544:	3720      	adds	r7, #32
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	080202e4 	.word	0x080202e4
 8013550:	08020a14 	.word	0x08020a14
 8013554:	08020338 	.word	0x08020338
 8013558:	0802090c 	.word	0x0802090c

0801355c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b08a      	sub	sp, #40	; 0x28
 8013560:	af04      	add	r7, sp, #16
 8013562:	60f8      	str	r0, [r7, #12]
 8013564:	60b9      	str	r1, [r7, #8]
 8013566:	607a      	str	r2, [r7, #4]
 8013568:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d106      	bne.n	801357e <tcp_output_control_segment+0x22>
 8013570:	4b1c      	ldr	r3, [pc, #112]	; (80135e4 <tcp_output_control_segment+0x88>)
 8013572:	f240 7287 	movw	r2, #1927	; 0x787
 8013576:	491c      	ldr	r1, [pc, #112]	; (80135e8 <tcp_output_control_segment+0x8c>)
 8013578:	481c      	ldr	r0, [pc, #112]	; (80135ec <tcp_output_control_segment+0x90>)
 801357a:	f006 fccf 	bl	8019f1c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801357e:	683a      	ldr	r2, [r7, #0]
 8013580:	6879      	ldr	r1, [r7, #4]
 8013582:	68f8      	ldr	r0, [r7, #12]
 8013584:	f7fe fad4 	bl	8011b30 <tcp_route>
 8013588:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d102      	bne.n	8013596 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013590:	23fc      	movs	r3, #252	; 0xfc
 8013592:	75fb      	strb	r3, [r7, #23]
 8013594:	e01c      	b.n	80135d0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d006      	beq.n	80135aa <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	7adb      	ldrb	r3, [r3, #11]
 80135a0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	7a9b      	ldrb	r3, [r3, #10]
 80135a6:	757b      	strb	r3, [r7, #21]
 80135a8:	e003      	b.n	80135b2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80135aa:	23ff      	movs	r3, #255	; 0xff
 80135ac:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80135ae:	2300      	movs	r3, #0
 80135b0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80135b2:	7dba      	ldrb	r2, [r7, #22]
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	9302      	str	r3, [sp, #8]
 80135b8:	2306      	movs	r3, #6
 80135ba:	9301      	str	r3, [sp, #4]
 80135bc:	7d7b      	ldrb	r3, [r7, #21]
 80135be:	9300      	str	r3, [sp, #0]
 80135c0:	4613      	mov	r3, r2
 80135c2:	683a      	ldr	r2, [r7, #0]
 80135c4:	6879      	ldr	r1, [r7, #4]
 80135c6:	68b8      	ldr	r0, [r7, #8]
 80135c8:	f004 fa1c 	bl	8017a04 <ip4_output_if>
 80135cc:	4603      	mov	r3, r0
 80135ce:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80135d0:	68b8      	ldr	r0, [r7, #8]
 80135d2:	f7f9 fcd5 	bl	800cf80 <pbuf_free>
  return err;
 80135d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3718      	adds	r7, #24
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}
 80135e2:	bf00      	nop
 80135e4:	080202e4 	.word	0x080202e4
 80135e8:	08020a3c 	.word	0x08020a3c
 80135ec:	08020338 	.word	0x08020338

080135f0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80135f0:	b590      	push	{r4, r7, lr}
 80135f2:	b08b      	sub	sp, #44	; 0x2c
 80135f4:	af04      	add	r7, sp, #16
 80135f6:	60f8      	str	r0, [r7, #12]
 80135f8:	60b9      	str	r1, [r7, #8]
 80135fa:	607a      	str	r2, [r7, #4]
 80135fc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d106      	bne.n	8013612 <tcp_rst+0x22>
 8013604:	4b1f      	ldr	r3, [pc, #124]	; (8013684 <tcp_rst+0x94>)
 8013606:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801360a:	491f      	ldr	r1, [pc, #124]	; (8013688 <tcp_rst+0x98>)
 801360c:	481f      	ldr	r0, [pc, #124]	; (801368c <tcp_rst+0x9c>)
 801360e:	f006 fc85 	bl	8019f1c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013614:	2b00      	cmp	r3, #0
 8013616:	d106      	bne.n	8013626 <tcp_rst+0x36>
 8013618:	4b1a      	ldr	r3, [pc, #104]	; (8013684 <tcp_rst+0x94>)
 801361a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801361e:	491c      	ldr	r1, [pc, #112]	; (8013690 <tcp_rst+0xa0>)
 8013620:	481a      	ldr	r0, [pc, #104]	; (801368c <tcp_rst+0x9c>)
 8013622:	f006 fc7b 	bl	8019f1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013626:	2300      	movs	r3, #0
 8013628:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801362a:	f246 0308 	movw	r3, #24584	; 0x6008
 801362e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013630:	7dfb      	ldrb	r3, [r7, #23]
 8013632:	b29c      	uxth	r4, r3
 8013634:	68b8      	ldr	r0, [r7, #8]
 8013636:	f7f7 f930 	bl	800a89a <lwip_htonl>
 801363a:	4602      	mov	r2, r0
 801363c:	8abb      	ldrh	r3, [r7, #20]
 801363e:	9303      	str	r3, [sp, #12]
 8013640:	2314      	movs	r3, #20
 8013642:	9302      	str	r3, [sp, #8]
 8013644:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013646:	9301      	str	r3, [sp, #4]
 8013648:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801364a:	9300      	str	r3, [sp, #0]
 801364c:	4613      	mov	r3, r2
 801364e:	2200      	movs	r2, #0
 8013650:	4621      	mov	r1, r4
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f7ff fe90 	bl	8013378 <tcp_output_alloc_header_common>
 8013658:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d00c      	beq.n	801367a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013660:	7dfb      	ldrb	r3, [r7, #23]
 8013662:	2200      	movs	r2, #0
 8013664:	6939      	ldr	r1, [r7, #16]
 8013666:	68f8      	ldr	r0, [r7, #12]
 8013668:	f7ff ff38 	bl	80134dc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366e:	683a      	ldr	r2, [r7, #0]
 8013670:	6939      	ldr	r1, [r7, #16]
 8013672:	68f8      	ldr	r0, [r7, #12]
 8013674:	f7ff ff72 	bl	801355c <tcp_output_control_segment>
 8013678:	e000      	b.n	801367c <tcp_rst+0x8c>
    return;
 801367a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801367c:	371c      	adds	r7, #28
 801367e:	46bd      	mov	sp, r7
 8013680:	bd90      	pop	{r4, r7, pc}
 8013682:	bf00      	nop
 8013684:	080202e4 	.word	0x080202e4
 8013688:	08020a68 	.word	0x08020a68
 801368c:	08020338 	.word	0x08020338
 8013690:	08020a84 	.word	0x08020a84

08013694 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013694:	b590      	push	{r4, r7, lr}
 8013696:	b087      	sub	sp, #28
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801369c:	2300      	movs	r3, #0
 801369e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80136a0:	2300      	movs	r3, #0
 80136a2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d106      	bne.n	80136b8 <tcp_send_empty_ack+0x24>
 80136aa:	4b28      	ldr	r3, [pc, #160]	; (801374c <tcp_send_empty_ack+0xb8>)
 80136ac:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80136b0:	4927      	ldr	r1, [pc, #156]	; (8013750 <tcp_send_empty_ack+0xbc>)
 80136b2:	4828      	ldr	r0, [pc, #160]	; (8013754 <tcp_send_empty_ack+0xc0>)
 80136b4:	f006 fc32 	bl	8019f1c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
 80136ba:	009b      	lsls	r3, r3, #2
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	f003 0304 	and.w	r3, r3, #4
 80136c2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80136c4:	7d7b      	ldrb	r3, [r7, #21]
 80136c6:	b29c      	uxth	r4, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7f7 f8e4 	bl	800a89a <lwip_htonl>
 80136d2:	4603      	mov	r3, r0
 80136d4:	2200      	movs	r2, #0
 80136d6:	4621      	mov	r1, r4
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7ff fec1 	bl	8013460 <tcp_output_alloc_header>
 80136de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80136e0:	693b      	ldr	r3, [r7, #16]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d109      	bne.n	80136fa <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	8b5b      	ldrh	r3, [r3, #26]
 80136ea:	f043 0303 	orr.w	r3, r3, #3
 80136ee:	b29a      	uxth	r2, r3
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80136f4:	f06f 0301 	mvn.w	r3, #1
 80136f8:	e023      	b.n	8013742 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80136fa:	7dbb      	ldrb	r3, [r7, #22]
 80136fc:	7dfa      	ldrb	r2, [r7, #23]
 80136fe:	6939      	ldr	r1, [r7, #16]
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f7ff feeb 	bl	80134dc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013706:	687a      	ldr	r2, [r7, #4]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	3304      	adds	r3, #4
 801370c:	6939      	ldr	r1, [r7, #16]
 801370e:	6878      	ldr	r0, [r7, #4]
 8013710:	f7ff ff24 	bl	801355c <tcp_output_control_segment>
 8013714:	4603      	mov	r3, r0
 8013716:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d007      	beq.n	8013730 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	8b5b      	ldrh	r3, [r3, #26]
 8013724:	f043 0303 	orr.w	r3, r3, #3
 8013728:	b29a      	uxth	r2, r3
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	835a      	strh	r2, [r3, #26]
 801372e:	e006      	b.n	801373e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	8b5b      	ldrh	r3, [r3, #26]
 8013734:	f023 0303 	bic.w	r3, r3, #3
 8013738:	b29a      	uxth	r2, r3
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801373e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013742:	4618      	mov	r0, r3
 8013744:	371c      	adds	r7, #28
 8013746:	46bd      	mov	sp, r7
 8013748:	bd90      	pop	{r4, r7, pc}
 801374a:	bf00      	nop
 801374c:	080202e4 	.word	0x080202e4
 8013750:	08020aa0 	.word	0x08020aa0
 8013754:	08020338 	.word	0x08020338

08013758 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013758:	b590      	push	{r4, r7, lr}
 801375a:	b087      	sub	sp, #28
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013760:	2300      	movs	r3, #0
 8013762:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d106      	bne.n	8013778 <tcp_keepalive+0x20>
 801376a:	4b18      	ldr	r3, [pc, #96]	; (80137cc <tcp_keepalive+0x74>)
 801376c:	f640 0224 	movw	r2, #2084	; 0x824
 8013770:	4917      	ldr	r1, [pc, #92]	; (80137d0 <tcp_keepalive+0x78>)
 8013772:	4818      	ldr	r0, [pc, #96]	; (80137d4 <tcp_keepalive+0x7c>)
 8013774:	f006 fbd2 	bl	8019f1c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013778:	7dfb      	ldrb	r3, [r7, #23]
 801377a:	b29c      	uxth	r4, r3
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013780:	3b01      	subs	r3, #1
 8013782:	4618      	mov	r0, r3
 8013784:	f7f7 f889 	bl	800a89a <lwip_htonl>
 8013788:	4603      	mov	r3, r0
 801378a:	2200      	movs	r2, #0
 801378c:	4621      	mov	r1, r4
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff fe66 	bl	8013460 <tcp_output_alloc_header>
 8013794:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d102      	bne.n	80137a2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801379c:	f04f 33ff 	mov.w	r3, #4294967295
 80137a0:	e010      	b.n	80137c4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137a2:	7dfb      	ldrb	r3, [r7, #23]
 80137a4:	2200      	movs	r2, #0
 80137a6:	6939      	ldr	r1, [r7, #16]
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7ff fe97 	bl	80134dc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	3304      	adds	r3, #4
 80137b4:	6939      	ldr	r1, [r7, #16]
 80137b6:	6878      	ldr	r0, [r7, #4]
 80137b8:	f7ff fed0 	bl	801355c <tcp_output_control_segment>
 80137bc:	4603      	mov	r3, r0
 80137be:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80137c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137c4:	4618      	mov	r0, r3
 80137c6:	371c      	adds	r7, #28
 80137c8:	46bd      	mov	sp, r7
 80137ca:	bd90      	pop	{r4, r7, pc}
 80137cc:	080202e4 	.word	0x080202e4
 80137d0:	08020ac0 	.word	0x08020ac0
 80137d4:	08020338 	.word	0x08020338

080137d8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80137d8:	b590      	push	{r4, r7, lr}
 80137da:	b08b      	sub	sp, #44	; 0x2c
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137e0:	2300      	movs	r3, #0
 80137e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d106      	bne.n	80137fa <tcp_zero_window_probe+0x22>
 80137ec:	4b4c      	ldr	r3, [pc, #304]	; (8013920 <tcp_zero_window_probe+0x148>)
 80137ee:	f640 024f 	movw	r2, #2127	; 0x84f
 80137f2:	494c      	ldr	r1, [pc, #304]	; (8013924 <tcp_zero_window_probe+0x14c>)
 80137f4:	484c      	ldr	r0, [pc, #304]	; (8013928 <tcp_zero_window_probe+0x150>)
 80137f6:	f006 fb91 	bl	8019f1c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137fe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013800:	6a3b      	ldr	r3, [r7, #32]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d101      	bne.n	801380a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013806:	2300      	movs	r3, #0
 8013808:	e086      	b.n	8013918 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013810:	2bff      	cmp	r3, #255	; 0xff
 8013812:	d007      	beq.n	8013824 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801381a:	3301      	adds	r3, #1
 801381c:	b2da      	uxtb	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013824:	6a3b      	ldr	r3, [r7, #32]
 8013826:	68db      	ldr	r3, [r3, #12]
 8013828:	899b      	ldrh	r3, [r3, #12]
 801382a:	b29b      	uxth	r3, r3
 801382c:	4618      	mov	r0, r3
 801382e:	f7f7 f81f 	bl	800a870 <lwip_htons>
 8013832:	4603      	mov	r3, r0
 8013834:	b2db      	uxtb	r3, r3
 8013836:	f003 0301 	and.w	r3, r3, #1
 801383a:	2b00      	cmp	r3, #0
 801383c:	d005      	beq.n	801384a <tcp_zero_window_probe+0x72>
 801383e:	6a3b      	ldr	r3, [r7, #32]
 8013840:	891b      	ldrh	r3, [r3, #8]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d101      	bne.n	801384a <tcp_zero_window_probe+0x72>
 8013846:	2301      	movs	r3, #1
 8013848:	e000      	b.n	801384c <tcp_zero_window_probe+0x74>
 801384a:	2300      	movs	r3, #0
 801384c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801384e:	7ffb      	ldrb	r3, [r7, #31]
 8013850:	2b00      	cmp	r3, #0
 8013852:	bf0c      	ite	eq
 8013854:	2301      	moveq	r3, #1
 8013856:	2300      	movne	r3, #0
 8013858:	b2db      	uxtb	r3, r3
 801385a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801385c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013860:	b299      	uxth	r1, r3
 8013862:	6a3b      	ldr	r3, [r7, #32]
 8013864:	68db      	ldr	r3, [r3, #12]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	8bba      	ldrh	r2, [r7, #28]
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f7ff fdf8 	bl	8013460 <tcp_output_alloc_header>
 8013870:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013872:	69bb      	ldr	r3, [r7, #24]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d102      	bne.n	801387e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013878:	f04f 33ff 	mov.w	r3, #4294967295
 801387c:	e04c      	b.n	8013918 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801387e:	69bb      	ldr	r3, [r7, #24]
 8013880:	685b      	ldr	r3, [r3, #4]
 8013882:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013884:	7ffb      	ldrb	r3, [r7, #31]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d011      	beq.n	80138ae <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	899b      	ldrh	r3, [r3, #12]
 801388e:	b29b      	uxth	r3, r3
 8013890:	b21b      	sxth	r3, r3
 8013892:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013896:	b21c      	sxth	r4, r3
 8013898:	2011      	movs	r0, #17
 801389a:	f7f6 ffe9 	bl	800a870 <lwip_htons>
 801389e:	4603      	mov	r3, r0
 80138a0:	b21b      	sxth	r3, r3
 80138a2:	4323      	orrs	r3, r4
 80138a4:	b21b      	sxth	r3, r3
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	819a      	strh	r2, [r3, #12]
 80138ac:	e010      	b.n	80138d0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	3314      	adds	r3, #20
 80138b4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80138b6:	6a3b      	ldr	r3, [r7, #32]
 80138b8:	6858      	ldr	r0, [r3, #4]
 80138ba:	6a3b      	ldr	r3, [r7, #32]
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	891a      	ldrh	r2, [r3, #8]
 80138c0:	6a3b      	ldr	r3, [r7, #32]
 80138c2:	891b      	ldrh	r3, [r3, #8]
 80138c4:	1ad3      	subs	r3, r2, r3
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	2201      	movs	r2, #1
 80138ca:	6939      	ldr	r1, [r7, #16]
 80138cc:	f7f9 fd5e 	bl	800d38c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80138d0:	6a3b      	ldr	r3, [r7, #32]
 80138d2:	68db      	ldr	r3, [r3, #12]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	4618      	mov	r0, r3
 80138d8:	f7f6 ffdf 	bl	800a89a <lwip_htonl>
 80138dc:	4603      	mov	r3, r0
 80138de:	3301      	adds	r3, #1
 80138e0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	1ad3      	subs	r3, r2, r3
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	da02      	bge.n	80138f4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	68fa      	ldr	r2, [r7, #12]
 80138f2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80138f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138f8:	2200      	movs	r2, #0
 80138fa:	69b9      	ldr	r1, [r7, #24]
 80138fc:	6878      	ldr	r0, [r7, #4]
 80138fe:	f7ff fded 	bl	80134dc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013902:	687a      	ldr	r2, [r7, #4]
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	3304      	adds	r3, #4
 8013908:	69b9      	ldr	r1, [r7, #24]
 801390a:	6878      	ldr	r0, [r7, #4]
 801390c:	f7ff fe26 	bl	801355c <tcp_output_control_segment>
 8013910:	4603      	mov	r3, r0
 8013912:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013914:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013918:	4618      	mov	r0, r3
 801391a:	372c      	adds	r7, #44	; 0x2c
 801391c:	46bd      	mov	sp, r7
 801391e:	bd90      	pop	{r4, r7, pc}
 8013920:	080202e4 	.word	0x080202e4
 8013924:	08020adc 	.word	0x08020adc
 8013928:	08020338 	.word	0x08020338

0801392c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801392c:	b580      	push	{r7, lr}
 801392e:	b082      	sub	sp, #8
 8013930:	af00      	add	r7, sp, #0
 8013932:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013934:	f7f9 ff94 	bl	800d860 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013938:	4b0a      	ldr	r3, [pc, #40]	; (8013964 <tcpip_tcp_timer+0x38>)
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d103      	bne.n	8013948 <tcpip_tcp_timer+0x1c>
 8013940:	4b09      	ldr	r3, [pc, #36]	; (8013968 <tcpip_tcp_timer+0x3c>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d005      	beq.n	8013954 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013948:	2200      	movs	r2, #0
 801394a:	4908      	ldr	r1, [pc, #32]	; (801396c <tcpip_tcp_timer+0x40>)
 801394c:	20fa      	movs	r0, #250	; 0xfa
 801394e:	f000 f8f1 	bl	8013b34 <sys_timeout>
 8013952:	e002      	b.n	801395a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013954:	4b06      	ldr	r3, [pc, #24]	; (8013970 <tcpip_tcp_timer+0x44>)
 8013956:	2200      	movs	r2, #0
 8013958:	601a      	str	r2, [r3, #0]
  }
}
 801395a:	bf00      	nop
 801395c:	3708      	adds	r7, #8
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	20028090 	.word	0x20028090
 8013968:	200280a0 	.word	0x200280a0
 801396c:	0801392d 	.word	0x0801392d
 8013970:	200214d8 	.word	0x200214d8

08013974 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013978:	4b0a      	ldr	r3, [pc, #40]	; (80139a4 <tcp_timer_needed+0x30>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d10f      	bne.n	80139a0 <tcp_timer_needed+0x2c>
 8013980:	4b09      	ldr	r3, [pc, #36]	; (80139a8 <tcp_timer_needed+0x34>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d103      	bne.n	8013990 <tcp_timer_needed+0x1c>
 8013988:	4b08      	ldr	r3, [pc, #32]	; (80139ac <tcp_timer_needed+0x38>)
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d007      	beq.n	80139a0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013990:	4b04      	ldr	r3, [pc, #16]	; (80139a4 <tcp_timer_needed+0x30>)
 8013992:	2201      	movs	r2, #1
 8013994:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013996:	2200      	movs	r2, #0
 8013998:	4905      	ldr	r1, [pc, #20]	; (80139b0 <tcp_timer_needed+0x3c>)
 801399a:	20fa      	movs	r0, #250	; 0xfa
 801399c:	f000 f8ca 	bl	8013b34 <sys_timeout>
  }
}
 80139a0:	bf00      	nop
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	200214d8 	.word	0x200214d8
 80139a8:	20028090 	.word	0x20028090
 80139ac:	200280a0 	.word	0x200280a0
 80139b0:	0801392d 	.word	0x0801392d

080139b4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b086      	sub	sp, #24
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80139c0:	200a      	movs	r0, #10
 80139c2:	f7f8 fbdf 	bl	800c184 <memp_malloc>
 80139c6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d109      	bne.n	80139e2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80139ce:	693b      	ldr	r3, [r7, #16]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d151      	bne.n	8013a78 <sys_timeout_abs+0xc4>
 80139d4:	4b2a      	ldr	r3, [pc, #168]	; (8013a80 <sys_timeout_abs+0xcc>)
 80139d6:	22be      	movs	r2, #190	; 0xbe
 80139d8:	492a      	ldr	r1, [pc, #168]	; (8013a84 <sys_timeout_abs+0xd0>)
 80139da:	482b      	ldr	r0, [pc, #172]	; (8013a88 <sys_timeout_abs+0xd4>)
 80139dc:	f006 fa9e 	bl	8019f1c <iprintf>
    return;
 80139e0:	e04a      	b.n	8013a78 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	2200      	movs	r2, #0
 80139e6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	68ba      	ldr	r2, [r7, #8]
 80139ec:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	68fa      	ldr	r2, [r7, #12]
 80139f8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80139fa:	4b24      	ldr	r3, [pc, #144]	; (8013a8c <sys_timeout_abs+0xd8>)
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d103      	bne.n	8013a0a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a02:	4a22      	ldr	r2, [pc, #136]	; (8013a8c <sys_timeout_abs+0xd8>)
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	6013      	str	r3, [r2, #0]
    return;
 8013a08:	e037      	b.n	8013a7a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a0a:	693b      	ldr	r3, [r7, #16]
 8013a0c:	685a      	ldr	r2, [r3, #4]
 8013a0e:	4b1f      	ldr	r3, [pc, #124]	; (8013a8c <sys_timeout_abs+0xd8>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	1ad3      	subs	r3, r2, r3
 8013a16:	0fdb      	lsrs	r3, r3, #31
 8013a18:	f003 0301 	and.w	r3, r3, #1
 8013a1c:	b2db      	uxtb	r3, r3
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d007      	beq.n	8013a32 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013a22:	4b1a      	ldr	r3, [pc, #104]	; (8013a8c <sys_timeout_abs+0xd8>)
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a2a:	4a18      	ldr	r2, [pc, #96]	; (8013a8c <sys_timeout_abs+0xd8>)
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	6013      	str	r3, [r2, #0]
 8013a30:	e023      	b.n	8013a7a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a32:	4b16      	ldr	r3, [pc, #88]	; (8013a8c <sys_timeout_abs+0xd8>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	617b      	str	r3, [r7, #20]
 8013a38:	e01a      	b.n	8013a70 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d00b      	beq.n	8013a5a <sys_timeout_abs+0xa6>
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	685a      	ldr	r2, [r3, #4]
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	685b      	ldr	r3, [r3, #4]
 8013a4c:	1ad3      	subs	r3, r2, r3
 8013a4e:	0fdb      	lsrs	r3, r3, #31
 8013a50:	f003 0301 	and.w	r3, r3, #1
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d007      	beq.n	8013a6a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	681a      	ldr	r2, [r3, #0]
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	693a      	ldr	r2, [r7, #16]
 8013a66:	601a      	str	r2, [r3, #0]
        break;
 8013a68:	e007      	b.n	8013a7a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a6a:	697b      	ldr	r3, [r7, #20]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	617b      	str	r3, [r7, #20]
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d1e1      	bne.n	8013a3a <sys_timeout_abs+0x86>
 8013a76:	e000      	b.n	8013a7a <sys_timeout_abs+0xc6>
    return;
 8013a78:	bf00      	nop
      }
    }
  }
}
 8013a7a:	3718      	adds	r7, #24
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	08020b00 	.word	0x08020b00
 8013a84:	08020b34 	.word	0x08020b34
 8013a88:	08020b74 	.word	0x08020b74
 8013a8c:	200214d0 	.word	0x200214d0

08013a90 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b086      	sub	sp, #24
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	4798      	blx	r3

  now = sys_now();
 8013aa2:	f7f1 fb2d 	bl	8005100 <sys_now>
 8013aa6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	681a      	ldr	r2, [r3, #0]
 8013aac:	4b0f      	ldr	r3, [pc, #60]	; (8013aec <lwip_cyclic_timer+0x5c>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	4413      	add	r3, r2
 8013ab2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013ab4:	68fa      	ldr	r2, [r7, #12]
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	1ad3      	subs	r3, r2, r3
 8013aba:	0fdb      	lsrs	r3, r3, #31
 8013abc:	f003 0301 	and.w	r3, r3, #1
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d009      	beq.n	8013ada <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	693b      	ldr	r3, [r7, #16]
 8013acc:	4413      	add	r3, r2
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	4907      	ldr	r1, [pc, #28]	; (8013af0 <lwip_cyclic_timer+0x60>)
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7ff ff6e 	bl	80139b4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013ad8:	e004      	b.n	8013ae4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	4904      	ldr	r1, [pc, #16]	; (8013af0 <lwip_cyclic_timer+0x60>)
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f7ff ff68 	bl	80139b4 <sys_timeout_abs>
}
 8013ae4:	bf00      	nop
 8013ae6:	3718      	adds	r7, #24
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	200214d4 	.word	0x200214d4
 8013af0:	08013a91 	.word	0x08013a91

08013af4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013afa:	2301      	movs	r3, #1
 8013afc:	607b      	str	r3, [r7, #4]
 8013afe:	e00e      	b.n	8013b1e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b00:	4a0a      	ldr	r2, [pc, #40]	; (8013b2c <sys_timeouts_init+0x38>)
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	00db      	lsls	r3, r3, #3
 8013b0c:	4a07      	ldr	r2, [pc, #28]	; (8013b2c <sys_timeouts_init+0x38>)
 8013b0e:	4413      	add	r3, r2
 8013b10:	461a      	mov	r2, r3
 8013b12:	4907      	ldr	r1, [pc, #28]	; (8013b30 <sys_timeouts_init+0x3c>)
 8013b14:	f000 f80e 	bl	8013b34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	607b      	str	r3, [r7, #4]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2b05      	cmp	r3, #5
 8013b22:	d9ed      	bls.n	8013b00 <sys_timeouts_init+0xc>
  }
}
 8013b24:	bf00      	nop
 8013b26:	3708      	adds	r7, #8
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	08021b60 	.word	0x08021b60
 8013b30:	08013a91 	.word	0x08013a91

08013b34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b086      	sub	sp, #24
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b46:	d306      	bcc.n	8013b56 <sys_timeout+0x22>
 8013b48:	4b0a      	ldr	r3, [pc, #40]	; (8013b74 <sys_timeout+0x40>)
 8013b4a:	f240 1229 	movw	r2, #297	; 0x129
 8013b4e:	490a      	ldr	r1, [pc, #40]	; (8013b78 <sys_timeout+0x44>)
 8013b50:	480a      	ldr	r0, [pc, #40]	; (8013b7c <sys_timeout+0x48>)
 8013b52:	f006 f9e3 	bl	8019f1c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b56:	f7f1 fad3 	bl	8005100 <sys_now>
 8013b5a:	4602      	mov	r2, r0
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	4413      	add	r3, r2
 8013b60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013b62:	687a      	ldr	r2, [r7, #4]
 8013b64:	68b9      	ldr	r1, [r7, #8]
 8013b66:	6978      	ldr	r0, [r7, #20]
 8013b68:	f7ff ff24 	bl	80139b4 <sys_timeout_abs>
#endif
}
 8013b6c:	bf00      	nop
 8013b6e:	3718      	adds	r7, #24
 8013b70:	46bd      	mov	sp, r7
 8013b72:	bd80      	pop	{r7, pc}
 8013b74:	08020b00 	.word	0x08020b00
 8013b78:	08020b9c 	.word	0x08020b9c
 8013b7c:	08020b74 	.word	0x08020b74

08013b80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013b80:	b580      	push	{r7, lr}
 8013b82:	b084      	sub	sp, #16
 8013b84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013b86:	f7f1 fabb 	bl	8005100 <sys_now>
 8013b8a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013b8c:	4b17      	ldr	r3, [pc, #92]	; (8013bec <sys_check_timeouts+0x6c>)
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d022      	beq.n	8013bde <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	68fa      	ldr	r2, [r7, #12]
 8013b9e:	1ad3      	subs	r3, r2, r3
 8013ba0:	0fdb      	lsrs	r3, r3, #31
 8013ba2:	f003 0301 	and.w	r3, r3, #1
 8013ba6:	b2db      	uxtb	r3, r3
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d11a      	bne.n	8013be2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	4a0e      	ldr	r2, [pc, #56]	; (8013bec <sys_check_timeouts+0x6c>)
 8013bb2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	689b      	ldr	r3, [r3, #8]
 8013bb8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013bc0:	68bb      	ldr	r3, [r7, #8]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	4a0a      	ldr	r2, [pc, #40]	; (8013bf0 <sys_check_timeouts+0x70>)
 8013bc6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013bc8:	68b9      	ldr	r1, [r7, #8]
 8013bca:	200a      	movs	r0, #10
 8013bcc:	f7f8 fb2c 	bl	800c228 <memp_free>
    if (handler != NULL) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d0da      	beq.n	8013b8c <sys_check_timeouts+0xc>
      handler(arg);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	6838      	ldr	r0, [r7, #0]
 8013bda:	4798      	blx	r3
  do {
 8013bdc:	e7d6      	b.n	8013b8c <sys_check_timeouts+0xc>
      return;
 8013bde:	bf00      	nop
 8013be0:	e000      	b.n	8013be4 <sys_check_timeouts+0x64>
      return;
 8013be2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013be4:	3710      	adds	r7, #16
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
 8013bea:	bf00      	nop
 8013bec:	200214d0 	.word	0x200214d0
 8013bf0:	200214d4 	.word	0x200214d4

08013bf4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013bfa:	4b16      	ldr	r3, [pc, #88]	; (8013c54 <sys_timeouts_sleeptime+0x60>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d102      	bne.n	8013c08 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013c02:	f04f 33ff 	mov.w	r3, #4294967295
 8013c06:	e020      	b.n	8013c4a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013c08:	f7f1 fa7a 	bl	8005100 <sys_now>
 8013c0c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013c0e:	4b11      	ldr	r3, [pc, #68]	; (8013c54 <sys_timeouts_sleeptime+0x60>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	685a      	ldr	r2, [r3, #4]
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	1ad3      	subs	r3, r2, r3
 8013c18:	0fdb      	lsrs	r3, r3, #31
 8013c1a:	f003 0301 	and.w	r3, r3, #1
 8013c1e:	b2db      	uxtb	r3, r3
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013c24:	2300      	movs	r3, #0
 8013c26:	e010      	b.n	8013c4a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013c28:	4b0a      	ldr	r3, [pc, #40]	; (8013c54 <sys_timeouts_sleeptime+0x60>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	685a      	ldr	r2, [r3, #4]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	1ad3      	subs	r3, r2, r3
 8013c32:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	da06      	bge.n	8013c48 <sys_timeouts_sleeptime+0x54>
 8013c3a:	4b07      	ldr	r3, [pc, #28]	; (8013c58 <sys_timeouts_sleeptime+0x64>)
 8013c3c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013c40:	4906      	ldr	r1, [pc, #24]	; (8013c5c <sys_timeouts_sleeptime+0x68>)
 8013c42:	4807      	ldr	r0, [pc, #28]	; (8013c60 <sys_timeouts_sleeptime+0x6c>)
 8013c44:	f006 f96a 	bl	8019f1c <iprintf>
    return ret;
 8013c48:	683b      	ldr	r3, [r7, #0]
  }
}
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
 8013c52:	bf00      	nop
 8013c54:	200214d0 	.word	0x200214d0
 8013c58:	08020b00 	.word	0x08020b00
 8013c5c:	08020bd4 	.word	0x08020bd4
 8013c60:	08020b74 	.word	0x08020b74

08013c64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c68:	f006 f9d4 	bl	801a014 <rand>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	b29b      	uxth	r3, r3
 8013c70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c74:	b29b      	uxth	r3, r3
 8013c76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013c7a:	b29a      	uxth	r2, r3
 8013c7c:	4b01      	ldr	r3, [pc, #4]	; (8013c84 <udp_init+0x20>)
 8013c7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c80:	bf00      	nop
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	20000018 	.word	0x20000018

08013c88 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b083      	sub	sp, #12
 8013c8c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013c92:	4b17      	ldr	r3, [pc, #92]	; (8013cf0 <udp_new_port+0x68>)
 8013c94:	881b      	ldrh	r3, [r3, #0]
 8013c96:	1c5a      	adds	r2, r3, #1
 8013c98:	b291      	uxth	r1, r2
 8013c9a:	4a15      	ldr	r2, [pc, #84]	; (8013cf0 <udp_new_port+0x68>)
 8013c9c:	8011      	strh	r1, [r2, #0]
 8013c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d103      	bne.n	8013cae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013ca6:	4b12      	ldr	r3, [pc, #72]	; (8013cf0 <udp_new_port+0x68>)
 8013ca8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013cac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cae:	4b11      	ldr	r3, [pc, #68]	; (8013cf4 <udp_new_port+0x6c>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	603b      	str	r3, [r7, #0]
 8013cb4:	e011      	b.n	8013cda <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	8a5a      	ldrh	r2, [r3, #18]
 8013cba:	4b0d      	ldr	r3, [pc, #52]	; (8013cf0 <udp_new_port+0x68>)
 8013cbc:	881b      	ldrh	r3, [r3, #0]
 8013cbe:	429a      	cmp	r2, r3
 8013cc0:	d108      	bne.n	8013cd4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013cc2:	88fb      	ldrh	r3, [r7, #6]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	80fb      	strh	r3, [r7, #6]
 8013cc8:	88fb      	ldrh	r3, [r7, #6]
 8013cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013cce:	d3e0      	bcc.n	8013c92 <udp_new_port+0xa>
        return 0;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	e007      	b.n	8013ce4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	603b      	str	r3, [r7, #0]
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d1ea      	bne.n	8013cb6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013ce0:	4b03      	ldr	r3, [pc, #12]	; (8013cf0 <udp_new_port+0x68>)
 8013ce2:	881b      	ldrh	r3, [r3, #0]
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	370c      	adds	r7, #12
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr
 8013cf0:	20000018 	.word	0x20000018
 8013cf4:	200280a8 	.word	0x200280a8

08013cf8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b084      	sub	sp, #16
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	60f8      	str	r0, [r7, #12]
 8013d00:	60b9      	str	r1, [r7, #8]
 8013d02:	4613      	mov	r3, r2
 8013d04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d105      	bne.n	8013d18 <udp_input_local_match+0x20>
 8013d0c:	4b27      	ldr	r3, [pc, #156]	; (8013dac <udp_input_local_match+0xb4>)
 8013d0e:	2287      	movs	r2, #135	; 0x87
 8013d10:	4927      	ldr	r1, [pc, #156]	; (8013db0 <udp_input_local_match+0xb8>)
 8013d12:	4828      	ldr	r0, [pc, #160]	; (8013db4 <udp_input_local_match+0xbc>)
 8013d14:	f006 f902 	bl	8019f1c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d105      	bne.n	8013d2a <udp_input_local_match+0x32>
 8013d1e:	4b23      	ldr	r3, [pc, #140]	; (8013dac <udp_input_local_match+0xb4>)
 8013d20:	2288      	movs	r2, #136	; 0x88
 8013d22:	4925      	ldr	r1, [pc, #148]	; (8013db8 <udp_input_local_match+0xc0>)
 8013d24:	4823      	ldr	r0, [pc, #140]	; (8013db4 <udp_input_local_match+0xbc>)
 8013d26:	f006 f8f9 	bl	8019f1c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	7a1b      	ldrb	r3, [r3, #8]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d00b      	beq.n	8013d4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	7a1a      	ldrb	r2, [r3, #8]
 8013d36:	4b21      	ldr	r3, [pc, #132]	; (8013dbc <udp_input_local_match+0xc4>)
 8013d38:	685b      	ldr	r3, [r3, #4]
 8013d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013d3e:	3301      	adds	r3, #1
 8013d40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d001      	beq.n	8013d4a <udp_input_local_match+0x52>
    return 0;
 8013d46:	2300      	movs	r3, #0
 8013d48:	e02b      	b.n	8013da2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d4a:	79fb      	ldrb	r3, [r7, #7]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d018      	beq.n	8013d82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d013      	beq.n	8013d7e <udp_input_local_match+0x86>
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d00f      	beq.n	8013d7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d5e:	4b17      	ldr	r3, [pc, #92]	; (8013dbc <udp_input_local_match+0xc4>)
 8013d60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d66:	d00a      	beq.n	8013d7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	681a      	ldr	r2, [r3, #0]
 8013d6c:	4b13      	ldr	r3, [pc, #76]	; (8013dbc <udp_input_local_match+0xc4>)
 8013d6e:	695b      	ldr	r3, [r3, #20]
 8013d70:	405a      	eors	r2, r3
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	3308      	adds	r3, #8
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d110      	bne.n	8013da0 <udp_input_local_match+0xa8>
          return 1;
 8013d7e:	2301      	movs	r3, #1
 8013d80:	e00f      	b.n	8013da2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d009      	beq.n	8013d9c <udp_input_local_match+0xa4>
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d005      	beq.n	8013d9c <udp_input_local_match+0xa4>
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	681a      	ldr	r2, [r3, #0]
 8013d94:	4b09      	ldr	r3, [pc, #36]	; (8013dbc <udp_input_local_match+0xc4>)
 8013d96:	695b      	ldr	r3, [r3, #20]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d101      	bne.n	8013da0 <udp_input_local_match+0xa8>
        return 1;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	e000      	b.n	8013da2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013da0:	2300      	movs	r3, #0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	08020be8 	.word	0x08020be8
 8013db0:	08020c18 	.word	0x08020c18
 8013db4:	08020c3c 	.word	0x08020c3c
 8013db8:	08020c64 	.word	0x08020c64
 8013dbc:	20024804 	.word	0x20024804

08013dc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013dc0:	b590      	push	{r4, r7, lr}
 8013dc2:	b08d      	sub	sp, #52	; 0x34
 8013dc4:	af02      	add	r7, sp, #8
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d105      	bne.n	8013de0 <udp_input+0x20>
 8013dd4:	4b7c      	ldr	r3, [pc, #496]	; (8013fc8 <udp_input+0x208>)
 8013dd6:	22cf      	movs	r2, #207	; 0xcf
 8013dd8:	497c      	ldr	r1, [pc, #496]	; (8013fcc <udp_input+0x20c>)
 8013dda:	487d      	ldr	r0, [pc, #500]	; (8013fd0 <udp_input+0x210>)
 8013ddc:	f006 f89e 	bl	8019f1c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013de0:	683b      	ldr	r3, [r7, #0]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d105      	bne.n	8013df2 <udp_input+0x32>
 8013de6:	4b78      	ldr	r3, [pc, #480]	; (8013fc8 <udp_input+0x208>)
 8013de8:	22d0      	movs	r2, #208	; 0xd0
 8013dea:	497a      	ldr	r1, [pc, #488]	; (8013fd4 <udp_input+0x214>)
 8013dec:	4878      	ldr	r0, [pc, #480]	; (8013fd0 <udp_input+0x210>)
 8013dee:	f006 f895 	bl	8019f1c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	895b      	ldrh	r3, [r3, #10]
 8013df6:	2b07      	cmp	r3, #7
 8013df8:	d803      	bhi.n	8013e02 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f7f9 f8c0 	bl	800cf80 <pbuf_free>
    goto end;
 8013e00:	e0de      	b.n	8013fc0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013e08:	4b73      	ldr	r3, [pc, #460]	; (8013fd8 <udp_input+0x218>)
 8013e0a:	695a      	ldr	r2, [r3, #20]
 8013e0c:	4b72      	ldr	r3, [pc, #456]	; (8013fd8 <udp_input+0x218>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4619      	mov	r1, r3
 8013e12:	4610      	mov	r0, r2
 8013e14:	f003 fece 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	881b      	ldrh	r3, [r3, #0]
 8013e20:	b29b      	uxth	r3, r3
 8013e22:	4618      	mov	r0, r3
 8013e24:	f7f6 fd24 	bl	800a870 <lwip_htons>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	885b      	ldrh	r3, [r3, #2]
 8013e30:	b29b      	uxth	r3, r3
 8013e32:	4618      	mov	r0, r3
 8013e34:	f7f6 fd1c 	bl	800a870 <lwip_htons>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e40:	2300      	movs	r3, #0
 8013e42:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e44:	2300      	movs	r3, #0
 8013e46:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e48:	4b64      	ldr	r3, [pc, #400]	; (8013fdc <udp_input+0x21c>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8013e4e:	e054      	b.n	8013efa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	8a5b      	ldrh	r3, [r3, #18]
 8013e54:	89fa      	ldrh	r2, [r7, #14]
 8013e56:	429a      	cmp	r2, r3
 8013e58:	d14a      	bne.n	8013ef0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e5a:	7cfb      	ldrb	r3, [r7, #19]
 8013e5c:	461a      	mov	r2, r3
 8013e5e:	6839      	ldr	r1, [r7, #0]
 8013e60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e62:	f7ff ff49 	bl	8013cf8 <udp_input_local_match>
 8013e66:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d041      	beq.n	8013ef0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6e:	7c1b      	ldrb	r3, [r3, #16]
 8013e70:	f003 0304 	and.w	r3, r3, #4
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d11d      	bne.n	8013eb4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e78:	69fb      	ldr	r3, [r7, #28]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d102      	bne.n	8013e84 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e80:	61fb      	str	r3, [r7, #28]
 8013e82:	e017      	b.n	8013eb4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e84:	7cfb      	ldrb	r3, [r7, #19]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d014      	beq.n	8013eb4 <udp_input+0xf4>
 8013e8a:	4b53      	ldr	r3, [pc, #332]	; (8013fd8 <udp_input+0x218>)
 8013e8c:	695b      	ldr	r3, [r3, #20]
 8013e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e92:	d10f      	bne.n	8013eb4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e94:	69fb      	ldr	r3, [r7, #28]
 8013e96:	681a      	ldr	r2, [r3, #0]
 8013e98:	683b      	ldr	r3, [r7, #0]
 8013e9a:	3304      	adds	r3, #4
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d008      	beq.n	8013eb4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea4:	681a      	ldr	r2, [r3, #0]
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d101      	bne.n	8013eb4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	8a9b      	ldrh	r3, [r3, #20]
 8013eb8:	8a3a      	ldrh	r2, [r7, #16]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d118      	bne.n	8013ef0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d005      	beq.n	8013ed2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec8:	685a      	ldr	r2, [r3, #4]
 8013eca:	4b43      	ldr	r3, [pc, #268]	; (8013fd8 <udp_input+0x218>)
 8013ecc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ece:	429a      	cmp	r2, r3
 8013ed0:	d10e      	bne.n	8013ef0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013ed2:	6a3b      	ldr	r3, [r7, #32]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d014      	beq.n	8013f02 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	68da      	ldr	r2, [r3, #12]
 8013edc:	6a3b      	ldr	r3, [r7, #32]
 8013ede:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ee0:	4b3e      	ldr	r3, [pc, #248]	; (8013fdc <udp_input+0x21c>)
 8013ee2:	681a      	ldr	r2, [r3, #0]
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ee8:	4a3c      	ldr	r2, [pc, #240]	; (8013fdc <udp_input+0x21c>)
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013eee:	e008      	b.n	8013f02 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8013efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d1a7      	bne.n	8013e50 <udp_input+0x90>
 8013f00:	e000      	b.n	8013f04 <udp_input+0x144>
        break;
 8013f02:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d101      	bne.n	8013f0e <udp_input+0x14e>
    pcb = uncon_pcb;
 8013f0a:	69fb      	ldr	r3, [r7, #28]
 8013f0c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d002      	beq.n	8013f1a <udp_input+0x15a>
    for_us = 1;
 8013f14:	2301      	movs	r3, #1
 8013f16:	76fb      	strb	r3, [r7, #27]
 8013f18:	e00a      	b.n	8013f30 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	3304      	adds	r3, #4
 8013f1e:	681a      	ldr	r2, [r3, #0]
 8013f20:	4b2d      	ldr	r3, [pc, #180]	; (8013fd8 <udp_input+0x218>)
 8013f22:	695b      	ldr	r3, [r3, #20]
 8013f24:	429a      	cmp	r2, r3
 8013f26:	bf0c      	ite	eq
 8013f28:	2301      	moveq	r3, #1
 8013f2a:	2300      	movne	r3, #0
 8013f2c:	b2db      	uxtb	r3, r3
 8013f2e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f30:	7efb      	ldrb	r3, [r7, #27]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d041      	beq.n	8013fba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f36:	2108      	movs	r1, #8
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7f8 ff9b 	bl	800ce74 <pbuf_remove_header>
 8013f3e:	4603      	mov	r3, r0
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d00a      	beq.n	8013f5a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f44:	4b20      	ldr	r3, [pc, #128]	; (8013fc8 <udp_input+0x208>)
 8013f46:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f4a:	4925      	ldr	r1, [pc, #148]	; (8013fe0 <udp_input+0x220>)
 8013f4c:	4820      	ldr	r0, [pc, #128]	; (8013fd0 <udp_input+0x210>)
 8013f4e:	f005 ffe5 	bl	8019f1c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f7f9 f814 	bl	800cf80 <pbuf_free>
      goto end;
 8013f58:	e032      	b.n	8013fc0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d012      	beq.n	8013f86 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f62:	699b      	ldr	r3, [r3, #24]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00a      	beq.n	8013f7e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6a:	699c      	ldr	r4, [r3, #24]
 8013f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f6e:	69d8      	ldr	r0, [r3, #28]
 8013f70:	8a3b      	ldrh	r3, [r7, #16]
 8013f72:	9300      	str	r3, [sp, #0]
 8013f74:	4b1b      	ldr	r3, [pc, #108]	; (8013fe4 <udp_input+0x224>)
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f7a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f7c:	e021      	b.n	8013fc2 <udp_input+0x202>
        pbuf_free(p);
 8013f7e:	6878      	ldr	r0, [r7, #4]
 8013f80:	f7f8 fffe 	bl	800cf80 <pbuf_free>
        goto end;
 8013f84:	e01c      	b.n	8013fc0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f86:	7cfb      	ldrb	r3, [r7, #19]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d112      	bne.n	8013fb2 <udp_input+0x1f2>
 8013f8c:	4b12      	ldr	r3, [pc, #72]	; (8013fd8 <udp_input+0x218>)
 8013f8e:	695b      	ldr	r3, [r3, #20]
 8013f90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f94:	2be0      	cmp	r3, #224	; 0xe0
 8013f96:	d00c      	beq.n	8013fb2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013f98:	4b0f      	ldr	r3, [pc, #60]	; (8013fd8 <udp_input+0x218>)
 8013f9a:	899b      	ldrh	r3, [r3, #12]
 8013f9c:	3308      	adds	r3, #8
 8013f9e:	b29b      	uxth	r3, r3
 8013fa0:	b21b      	sxth	r3, r3
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	6878      	ldr	r0, [r7, #4]
 8013fa6:	f7f8 ffd8 	bl	800cf5a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013faa:	2103      	movs	r1, #3
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f003 fac5 	bl	801753c <icmp_dest_unreach>
      pbuf_free(p);
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f7f8 ffe4 	bl	800cf80 <pbuf_free>
  return;
 8013fb8:	e003      	b.n	8013fc2 <udp_input+0x202>
    pbuf_free(p);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7f8 ffe0 	bl	800cf80 <pbuf_free>
  return;
 8013fc0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013fc2:	372c      	adds	r7, #44	; 0x2c
 8013fc4:	46bd      	mov	sp, r7
 8013fc6:	bd90      	pop	{r4, r7, pc}
 8013fc8:	08020be8 	.word	0x08020be8
 8013fcc:	08020c8c 	.word	0x08020c8c
 8013fd0:	08020c3c 	.word	0x08020c3c
 8013fd4:	08020ca4 	.word	0x08020ca4
 8013fd8:	20024804 	.word	0x20024804
 8013fdc:	200280a8 	.word	0x200280a8
 8013fe0:	08020cc0 	.word	0x08020cc0
 8013fe4:	20024814 	.word	0x20024814

08013fe8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b088      	sub	sp, #32
 8013fec:	af02      	add	r7, sp, #8
 8013fee:	60f8      	str	r0, [r7, #12]
 8013ff0:	60b9      	str	r1, [r7, #8]
 8013ff2:	607a      	str	r2, [r7, #4]
 8013ff4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d109      	bne.n	8014010 <udp_sendto+0x28>
 8013ffc:	4b23      	ldr	r3, [pc, #140]	; (801408c <udp_sendto+0xa4>)
 8013ffe:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014002:	4923      	ldr	r1, [pc, #140]	; (8014090 <udp_sendto+0xa8>)
 8014004:	4823      	ldr	r0, [pc, #140]	; (8014094 <udp_sendto+0xac>)
 8014006:	f005 ff89 	bl	8019f1c <iprintf>
 801400a:	f06f 030f 	mvn.w	r3, #15
 801400e:	e038      	b.n	8014082 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d109      	bne.n	801402a <udp_sendto+0x42>
 8014016:	4b1d      	ldr	r3, [pc, #116]	; (801408c <udp_sendto+0xa4>)
 8014018:	f240 2219 	movw	r2, #537	; 0x219
 801401c:	491e      	ldr	r1, [pc, #120]	; (8014098 <udp_sendto+0xb0>)
 801401e:	481d      	ldr	r0, [pc, #116]	; (8014094 <udp_sendto+0xac>)
 8014020:	f005 ff7c 	bl	8019f1c <iprintf>
 8014024:	f06f 030f 	mvn.w	r3, #15
 8014028:	e02b      	b.n	8014082 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d109      	bne.n	8014044 <udp_sendto+0x5c>
 8014030:	4b16      	ldr	r3, [pc, #88]	; (801408c <udp_sendto+0xa4>)
 8014032:	f240 221a 	movw	r2, #538	; 0x21a
 8014036:	4919      	ldr	r1, [pc, #100]	; (801409c <udp_sendto+0xb4>)
 8014038:	4816      	ldr	r0, [pc, #88]	; (8014094 <udp_sendto+0xac>)
 801403a:	f005 ff6f 	bl	8019f1c <iprintf>
 801403e:	f06f 030f 	mvn.w	r3, #15
 8014042:	e01e      	b.n	8014082 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	7a1b      	ldrb	r3, [r3, #8]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d006      	beq.n	801405a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	7a1b      	ldrb	r3, [r3, #8]
 8014050:	4618      	mov	r0, r3
 8014052:	f7f8 fc0b 	bl	800c86c <netif_get_by_index>
 8014056:	6178      	str	r0, [r7, #20]
 8014058:	e003      	b.n	8014062 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f003 faf8 	bl	8017650 <ip4_route>
 8014060:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d102      	bne.n	801406e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014068:	f06f 0303 	mvn.w	r3, #3
 801406c:	e009      	b.n	8014082 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801406e:	887a      	ldrh	r2, [r7, #2]
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	4613      	mov	r3, r2
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	68b9      	ldr	r1, [r7, #8]
 801407a:	68f8      	ldr	r0, [r7, #12]
 801407c:	f000 f810 	bl	80140a0 <udp_sendto_if>
 8014080:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014082:	4618      	mov	r0, r3
 8014084:	3718      	adds	r7, #24
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
 801408a:	bf00      	nop
 801408c:	08020be8 	.word	0x08020be8
 8014090:	08020d0c 	.word	0x08020d0c
 8014094:	08020c3c 	.word	0x08020c3c
 8014098:	08020d24 	.word	0x08020d24
 801409c:	08020d40 	.word	0x08020d40

080140a0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80140a0:	b580      	push	{r7, lr}
 80140a2:	b088      	sub	sp, #32
 80140a4:	af02      	add	r7, sp, #8
 80140a6:	60f8      	str	r0, [r7, #12]
 80140a8:	60b9      	str	r1, [r7, #8]
 80140aa:	607a      	str	r2, [r7, #4]
 80140ac:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d109      	bne.n	80140c8 <udp_sendto_if+0x28>
 80140b4:	4b2e      	ldr	r3, [pc, #184]	; (8014170 <udp_sendto_if+0xd0>)
 80140b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80140ba:	492e      	ldr	r1, [pc, #184]	; (8014174 <udp_sendto_if+0xd4>)
 80140bc:	482e      	ldr	r0, [pc, #184]	; (8014178 <udp_sendto_if+0xd8>)
 80140be:	f005 ff2d 	bl	8019f1c <iprintf>
 80140c2:	f06f 030f 	mvn.w	r3, #15
 80140c6:	e04f      	b.n	8014168 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d109      	bne.n	80140e2 <udp_sendto_if+0x42>
 80140ce:	4b28      	ldr	r3, [pc, #160]	; (8014170 <udp_sendto_if+0xd0>)
 80140d0:	f240 2281 	movw	r2, #641	; 0x281
 80140d4:	4929      	ldr	r1, [pc, #164]	; (801417c <udp_sendto_if+0xdc>)
 80140d6:	4828      	ldr	r0, [pc, #160]	; (8014178 <udp_sendto_if+0xd8>)
 80140d8:	f005 ff20 	bl	8019f1c <iprintf>
 80140dc:	f06f 030f 	mvn.w	r3, #15
 80140e0:	e042      	b.n	8014168 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d109      	bne.n	80140fc <udp_sendto_if+0x5c>
 80140e8:	4b21      	ldr	r3, [pc, #132]	; (8014170 <udp_sendto_if+0xd0>)
 80140ea:	f240 2282 	movw	r2, #642	; 0x282
 80140ee:	4924      	ldr	r1, [pc, #144]	; (8014180 <udp_sendto_if+0xe0>)
 80140f0:	4821      	ldr	r0, [pc, #132]	; (8014178 <udp_sendto_if+0xd8>)
 80140f2:	f005 ff13 	bl	8019f1c <iprintf>
 80140f6:	f06f 030f 	mvn.w	r3, #15
 80140fa:	e035      	b.n	8014168 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80140fc:	6a3b      	ldr	r3, [r7, #32]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d109      	bne.n	8014116 <udp_sendto_if+0x76>
 8014102:	4b1b      	ldr	r3, [pc, #108]	; (8014170 <udp_sendto_if+0xd0>)
 8014104:	f240 2283 	movw	r2, #643	; 0x283
 8014108:	491e      	ldr	r1, [pc, #120]	; (8014184 <udp_sendto_if+0xe4>)
 801410a:	481b      	ldr	r0, [pc, #108]	; (8014178 <udp_sendto_if+0xd8>)
 801410c:	f005 ff06 	bl	8019f1c <iprintf>
 8014110:	f06f 030f 	mvn.w	r3, #15
 8014114:	e028      	b.n	8014168 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d009      	beq.n	8014130 <udp_sendto_if+0x90>
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d005      	beq.n	8014130 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801412c:	2be0      	cmp	r3, #224	; 0xe0
 801412e:	d103      	bne.n	8014138 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014130:	6a3b      	ldr	r3, [r7, #32]
 8014132:	3304      	adds	r3, #4
 8014134:	617b      	str	r3, [r7, #20]
 8014136:	e00b      	b.n	8014150 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	681a      	ldr	r2, [r3, #0]
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	3304      	adds	r3, #4
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	429a      	cmp	r2, r3
 8014144:	d002      	beq.n	801414c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014146:	f06f 0303 	mvn.w	r3, #3
 801414a:	e00d      	b.n	8014168 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801414c:	68fb      	ldr	r3, [r7, #12]
 801414e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014150:	887a      	ldrh	r2, [r7, #2]
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	9301      	str	r3, [sp, #4]
 8014156:	6a3b      	ldr	r3, [r7, #32]
 8014158:	9300      	str	r3, [sp, #0]
 801415a:	4613      	mov	r3, r2
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	68b9      	ldr	r1, [r7, #8]
 8014160:	68f8      	ldr	r0, [r7, #12]
 8014162:	f000 f811 	bl	8014188 <udp_sendto_if_src>
 8014166:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014168:	4618      	mov	r0, r3
 801416a:	3718      	adds	r7, #24
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}
 8014170:	08020be8 	.word	0x08020be8
 8014174:	08020d5c 	.word	0x08020d5c
 8014178:	08020c3c 	.word	0x08020c3c
 801417c:	08020d78 	.word	0x08020d78
 8014180:	08020d94 	.word	0x08020d94
 8014184:	08020db4 	.word	0x08020db4

08014188 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b08c      	sub	sp, #48	; 0x30
 801418c:	af04      	add	r7, sp, #16
 801418e:	60f8      	str	r0, [r7, #12]
 8014190:	60b9      	str	r1, [r7, #8]
 8014192:	607a      	str	r2, [r7, #4]
 8014194:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d109      	bne.n	80141b0 <udp_sendto_if_src+0x28>
 801419c:	4b65      	ldr	r3, [pc, #404]	; (8014334 <udp_sendto_if_src+0x1ac>)
 801419e:	f240 22d1 	movw	r2, #721	; 0x2d1
 80141a2:	4965      	ldr	r1, [pc, #404]	; (8014338 <udp_sendto_if_src+0x1b0>)
 80141a4:	4865      	ldr	r0, [pc, #404]	; (801433c <udp_sendto_if_src+0x1b4>)
 80141a6:	f005 feb9 	bl	8019f1c <iprintf>
 80141aa:	f06f 030f 	mvn.w	r3, #15
 80141ae:	e0bc      	b.n	801432a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d109      	bne.n	80141ca <udp_sendto_if_src+0x42>
 80141b6:	4b5f      	ldr	r3, [pc, #380]	; (8014334 <udp_sendto_if_src+0x1ac>)
 80141b8:	f240 22d2 	movw	r2, #722	; 0x2d2
 80141bc:	4960      	ldr	r1, [pc, #384]	; (8014340 <udp_sendto_if_src+0x1b8>)
 80141be:	485f      	ldr	r0, [pc, #380]	; (801433c <udp_sendto_if_src+0x1b4>)
 80141c0:	f005 feac 	bl	8019f1c <iprintf>
 80141c4:	f06f 030f 	mvn.w	r3, #15
 80141c8:	e0af      	b.n	801432a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d109      	bne.n	80141e4 <udp_sendto_if_src+0x5c>
 80141d0:	4b58      	ldr	r3, [pc, #352]	; (8014334 <udp_sendto_if_src+0x1ac>)
 80141d2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80141d6:	495b      	ldr	r1, [pc, #364]	; (8014344 <udp_sendto_if_src+0x1bc>)
 80141d8:	4858      	ldr	r0, [pc, #352]	; (801433c <udp_sendto_if_src+0x1b4>)
 80141da:	f005 fe9f 	bl	8019f1c <iprintf>
 80141de:	f06f 030f 	mvn.w	r3, #15
 80141e2:	e0a2      	b.n	801432a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80141e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d109      	bne.n	80141fe <udp_sendto_if_src+0x76>
 80141ea:	4b52      	ldr	r3, [pc, #328]	; (8014334 <udp_sendto_if_src+0x1ac>)
 80141ec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80141f0:	4955      	ldr	r1, [pc, #340]	; (8014348 <udp_sendto_if_src+0x1c0>)
 80141f2:	4852      	ldr	r0, [pc, #328]	; (801433c <udp_sendto_if_src+0x1b4>)
 80141f4:	f005 fe92 	bl	8019f1c <iprintf>
 80141f8:	f06f 030f 	mvn.w	r3, #15
 80141fc:	e095      	b.n	801432a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80141fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014200:	2b00      	cmp	r3, #0
 8014202:	d109      	bne.n	8014218 <udp_sendto_if_src+0x90>
 8014204:	4b4b      	ldr	r3, [pc, #300]	; (8014334 <udp_sendto_if_src+0x1ac>)
 8014206:	f240 22d5 	movw	r2, #725	; 0x2d5
 801420a:	4950      	ldr	r1, [pc, #320]	; (801434c <udp_sendto_if_src+0x1c4>)
 801420c:	484b      	ldr	r0, [pc, #300]	; (801433c <udp_sendto_if_src+0x1b4>)
 801420e:	f005 fe85 	bl	8019f1c <iprintf>
 8014212:	f06f 030f 	mvn.w	r3, #15
 8014216:	e088      	b.n	801432a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	8a5b      	ldrh	r3, [r3, #18]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d10f      	bne.n	8014240 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014220:	68f9      	ldr	r1, [r7, #12]
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	8a5b      	ldrh	r3, [r3, #18]
 8014226:	461a      	mov	r2, r3
 8014228:	68f8      	ldr	r0, [r7, #12]
 801422a:	f000 f893 	bl	8014354 <udp_bind>
 801422e:	4603      	mov	r3, r0
 8014230:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014232:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d002      	beq.n	8014240 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801423a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801423e:	e074      	b.n	801432a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	891b      	ldrh	r3, [r3, #8]
 8014244:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014248:	4293      	cmp	r3, r2
 801424a:	d902      	bls.n	8014252 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801424c:	f04f 33ff 	mov.w	r3, #4294967295
 8014250:	e06b      	b.n	801432a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014252:	2108      	movs	r1, #8
 8014254:	68b8      	ldr	r0, [r7, #8]
 8014256:	f7f8 fdfd 	bl	800ce54 <pbuf_add_header>
 801425a:	4603      	mov	r3, r0
 801425c:	2b00      	cmp	r3, #0
 801425e:	d015      	beq.n	801428c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014260:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014264:	2108      	movs	r1, #8
 8014266:	2022      	movs	r0, #34	; 0x22
 8014268:	f7f8 fbaa 	bl	800c9c0 <pbuf_alloc>
 801426c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d102      	bne.n	801427a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014274:	f04f 33ff 	mov.w	r3, #4294967295
 8014278:	e057      	b.n	801432a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	891b      	ldrh	r3, [r3, #8]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d006      	beq.n	8014290 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014282:	68b9      	ldr	r1, [r7, #8]
 8014284:	69f8      	ldr	r0, [r7, #28]
 8014286:	f7f8 ff9f 	bl	800d1c8 <pbuf_chain>
 801428a:	e001      	b.n	8014290 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801428c:	68bb      	ldr	r3, [r7, #8]
 801428e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014290:	69fb      	ldr	r3, [r7, #28]
 8014292:	895b      	ldrh	r3, [r3, #10]
 8014294:	2b07      	cmp	r3, #7
 8014296:	d806      	bhi.n	80142a6 <udp_sendto_if_src+0x11e>
 8014298:	4b26      	ldr	r3, [pc, #152]	; (8014334 <udp_sendto_if_src+0x1ac>)
 801429a:	f240 320e 	movw	r2, #782	; 0x30e
 801429e:	492c      	ldr	r1, [pc, #176]	; (8014350 <udp_sendto_if_src+0x1c8>)
 80142a0:	4826      	ldr	r0, [pc, #152]	; (801433c <udp_sendto_if_src+0x1b4>)
 80142a2:	f005 fe3b 	bl	8019f1c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	685b      	ldr	r3, [r3, #4]
 80142aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	8a5b      	ldrh	r3, [r3, #18]
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7f6 fadd 	bl	800a870 <lwip_htons>
 80142b6:	4603      	mov	r3, r0
 80142b8:	461a      	mov	r2, r3
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80142be:	887b      	ldrh	r3, [r7, #2]
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7f6 fad5 	bl	800a870 <lwip_htons>
 80142c6:	4603      	mov	r3, r0
 80142c8:	461a      	mov	r2, r3
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	2200      	movs	r2, #0
 80142d2:	719a      	strb	r2, [r3, #6]
 80142d4:	2200      	movs	r2, #0
 80142d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80142d8:	69fb      	ldr	r3, [r7, #28]
 80142da:	891b      	ldrh	r3, [r3, #8]
 80142dc:	4618      	mov	r0, r3
 80142de:	f7f6 fac7 	bl	800a870 <lwip_htons>
 80142e2:	4603      	mov	r3, r0
 80142e4:	461a      	mov	r2, r3
 80142e6:	697b      	ldr	r3, [r7, #20]
 80142e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80142ea:	2311      	movs	r3, #17
 80142ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	7adb      	ldrb	r3, [r3, #11]
 80142f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	7a9b      	ldrb	r3, [r3, #10]
 80142f8:	7cb9      	ldrb	r1, [r7, #18]
 80142fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142fc:	9202      	str	r2, [sp, #8]
 80142fe:	7cfa      	ldrb	r2, [r7, #19]
 8014300:	9201      	str	r2, [sp, #4]
 8014302:	9300      	str	r3, [sp, #0]
 8014304:	460b      	mov	r3, r1
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801430a:	69f8      	ldr	r0, [r7, #28]
 801430c:	f003 fba4 	bl	8017a58 <ip4_output_if_src>
 8014310:	4603      	mov	r3, r0
 8014312:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014314:	69fa      	ldr	r2, [r7, #28]
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	429a      	cmp	r2, r3
 801431a:	d004      	beq.n	8014326 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801431c:	69f8      	ldr	r0, [r7, #28]
 801431e:	f7f8 fe2f 	bl	800cf80 <pbuf_free>
    q = NULL;
 8014322:	2300      	movs	r3, #0
 8014324:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014326:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801432a:	4618      	mov	r0, r3
 801432c:	3720      	adds	r7, #32
 801432e:	46bd      	mov	sp, r7
 8014330:	bd80      	pop	{r7, pc}
 8014332:	bf00      	nop
 8014334:	08020be8 	.word	0x08020be8
 8014338:	08020dd4 	.word	0x08020dd4
 801433c:	08020c3c 	.word	0x08020c3c
 8014340:	08020df4 	.word	0x08020df4
 8014344:	08020e14 	.word	0x08020e14
 8014348:	08020e38 	.word	0x08020e38
 801434c:	08020e5c 	.word	0x08020e5c
 8014350:	08020e80 	.word	0x08020e80

08014354 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014354:	b580      	push	{r7, lr}
 8014356:	b086      	sub	sp, #24
 8014358:	af00      	add	r7, sp, #0
 801435a:	60f8      	str	r0, [r7, #12]
 801435c:	60b9      	str	r1, [r7, #8]
 801435e:	4613      	mov	r3, r2
 8014360:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d101      	bne.n	801436c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014368:	4b39      	ldr	r3, [pc, #228]	; (8014450 <udp_bind+0xfc>)
 801436a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d109      	bne.n	8014386 <udp_bind+0x32>
 8014372:	4b38      	ldr	r3, [pc, #224]	; (8014454 <udp_bind+0x100>)
 8014374:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014378:	4937      	ldr	r1, [pc, #220]	; (8014458 <udp_bind+0x104>)
 801437a:	4838      	ldr	r0, [pc, #224]	; (801445c <udp_bind+0x108>)
 801437c:	f005 fdce 	bl	8019f1c <iprintf>
 8014380:	f06f 030f 	mvn.w	r3, #15
 8014384:	e060      	b.n	8014448 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014386:	2300      	movs	r3, #0
 8014388:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801438a:	4b35      	ldr	r3, [pc, #212]	; (8014460 <udp_bind+0x10c>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	617b      	str	r3, [r7, #20]
 8014390:	e009      	b.n	80143a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014392:	68fa      	ldr	r2, [r7, #12]
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	429a      	cmp	r2, r3
 8014398:	d102      	bne.n	80143a0 <udp_bind+0x4c>
      rebind = 1;
 801439a:	2301      	movs	r3, #1
 801439c:	74fb      	strb	r3, [r7, #19]
      break;
 801439e:	e005      	b.n	80143ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80143a0:	697b      	ldr	r3, [r7, #20]
 80143a2:	68db      	ldr	r3, [r3, #12]
 80143a4:	617b      	str	r3, [r7, #20]
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d1f2      	bne.n	8014392 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80143ac:	88fb      	ldrh	r3, [r7, #6]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d109      	bne.n	80143c6 <udp_bind+0x72>
    port = udp_new_port();
 80143b2:	f7ff fc69 	bl	8013c88 <udp_new_port>
 80143b6:	4603      	mov	r3, r0
 80143b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80143ba:	88fb      	ldrh	r3, [r7, #6]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d12c      	bne.n	801441a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80143c0:	f06f 0307 	mvn.w	r3, #7
 80143c4:	e040      	b.n	8014448 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80143c6:	4b26      	ldr	r3, [pc, #152]	; (8014460 <udp_bind+0x10c>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	617b      	str	r3, [r7, #20]
 80143cc:	e022      	b.n	8014414 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80143ce:	68fa      	ldr	r2, [r7, #12]
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d01b      	beq.n	801440e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	8a5b      	ldrh	r3, [r3, #18]
 80143da:	88fa      	ldrh	r2, [r7, #6]
 80143dc:	429a      	cmp	r2, r3
 80143de:	d116      	bne.n	801440e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80143e8:	429a      	cmp	r2, r3
 80143ea:	d00d      	beq.n	8014408 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d00a      	beq.n	8014408 <udp_bind+0xb4>
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d006      	beq.n	8014408 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80143fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d003      	beq.n	8014408 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d102      	bne.n	801440e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014408:	f06f 0307 	mvn.w	r3, #7
 801440c:	e01c      	b.n	8014448 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	68db      	ldr	r3, [r3, #12]
 8014412:	617b      	str	r3, [r7, #20]
 8014414:	697b      	ldr	r3, [r7, #20]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d1d9      	bne.n	80143ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801441a:	68bb      	ldr	r3, [r7, #8]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d002      	beq.n	8014426 <udp_bind+0xd2>
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	e000      	b.n	8014428 <udp_bind+0xd4>
 8014426:	2300      	movs	r3, #0
 8014428:	68fa      	ldr	r2, [r7, #12]
 801442a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	88fa      	ldrh	r2, [r7, #6]
 8014430:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014432:	7cfb      	ldrb	r3, [r7, #19]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d106      	bne.n	8014446 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014438:	4b09      	ldr	r3, [pc, #36]	; (8014460 <udp_bind+0x10c>)
 801443a:	681a      	ldr	r2, [r3, #0]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014440:	4a07      	ldr	r2, [pc, #28]	; (8014460 <udp_bind+0x10c>)
 8014442:	68fb      	ldr	r3, [r7, #12]
 8014444:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014446:	2300      	movs	r3, #0
}
 8014448:	4618      	mov	r0, r3
 801444a:	3718      	adds	r7, #24
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}
 8014450:	08021b90 	.word	0x08021b90
 8014454:	08020be8 	.word	0x08020be8
 8014458:	08020eb0 	.word	0x08020eb0
 801445c:	08020c3c 	.word	0x08020c3c
 8014460:	200280a8 	.word	0x200280a8

08014464 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b086      	sub	sp, #24
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	4613      	mov	r3, r2
 8014470:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d109      	bne.n	801448c <udp_connect+0x28>
 8014478:	4b2c      	ldr	r3, [pc, #176]	; (801452c <udp_connect+0xc8>)
 801447a:	f240 4235 	movw	r2, #1077	; 0x435
 801447e:	492c      	ldr	r1, [pc, #176]	; (8014530 <udp_connect+0xcc>)
 8014480:	482c      	ldr	r0, [pc, #176]	; (8014534 <udp_connect+0xd0>)
 8014482:	f005 fd4b 	bl	8019f1c <iprintf>
 8014486:	f06f 030f 	mvn.w	r3, #15
 801448a:	e04b      	b.n	8014524 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d109      	bne.n	80144a6 <udp_connect+0x42>
 8014492:	4b26      	ldr	r3, [pc, #152]	; (801452c <udp_connect+0xc8>)
 8014494:	f240 4236 	movw	r2, #1078	; 0x436
 8014498:	4927      	ldr	r1, [pc, #156]	; (8014538 <udp_connect+0xd4>)
 801449a:	4826      	ldr	r0, [pc, #152]	; (8014534 <udp_connect+0xd0>)
 801449c:	f005 fd3e 	bl	8019f1c <iprintf>
 80144a0:	f06f 030f 	mvn.w	r3, #15
 80144a4:	e03e      	b.n	8014524 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	8a5b      	ldrh	r3, [r3, #18]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d10f      	bne.n	80144ce <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80144ae:	68f9      	ldr	r1, [r7, #12]
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	8a5b      	ldrh	r3, [r3, #18]
 80144b4:	461a      	mov	r2, r3
 80144b6:	68f8      	ldr	r0, [r7, #12]
 80144b8:	f7ff ff4c 	bl	8014354 <udp_bind>
 80144bc:	4603      	mov	r3, r0
 80144be:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80144c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d002      	beq.n	80144ce <udp_connect+0x6a>
      return err;
 80144c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144cc:	e02a      	b.n	8014524 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d002      	beq.n	80144da <udp_connect+0x76>
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	e000      	b.n	80144dc <udp_connect+0x78>
 80144da:	2300      	movs	r3, #0
 80144dc:	68fa      	ldr	r2, [r7, #12]
 80144de:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	88fa      	ldrh	r2, [r7, #6]
 80144e4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	7c1b      	ldrb	r3, [r3, #16]
 80144ea:	f043 0304 	orr.w	r3, r3, #4
 80144ee:	b2da      	uxtb	r2, r3
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144f4:	4b11      	ldr	r3, [pc, #68]	; (801453c <udp_connect+0xd8>)
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	617b      	str	r3, [r7, #20]
 80144fa:	e008      	b.n	801450e <udp_connect+0xaa>
    if (pcb == ipcb) {
 80144fc:	68fa      	ldr	r2, [r7, #12]
 80144fe:	697b      	ldr	r3, [r7, #20]
 8014500:	429a      	cmp	r2, r3
 8014502:	d101      	bne.n	8014508 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014504:	2300      	movs	r3, #0
 8014506:	e00d      	b.n	8014524 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	68db      	ldr	r3, [r3, #12]
 801450c:	617b      	str	r3, [r7, #20]
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d1f3      	bne.n	80144fc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014514:	4b09      	ldr	r3, [pc, #36]	; (801453c <udp_connect+0xd8>)
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801451c:	4a07      	ldr	r2, [pc, #28]	; (801453c <udp_connect+0xd8>)
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014522:	2300      	movs	r3, #0
}
 8014524:	4618      	mov	r0, r3
 8014526:	3718      	adds	r7, #24
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}
 801452c:	08020be8 	.word	0x08020be8
 8014530:	08020ec8 	.word	0x08020ec8
 8014534:	08020c3c 	.word	0x08020c3c
 8014538:	08020ee4 	.word	0x08020ee4
 801453c:	200280a8 	.word	0x200280a8

08014540 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	b084      	sub	sp, #16
 8014544:	af00      	add	r7, sp, #0
 8014546:	60f8      	str	r0, [r7, #12]
 8014548:	60b9      	str	r1, [r7, #8]
 801454a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d107      	bne.n	8014562 <udp_recv+0x22>
 8014552:	4b08      	ldr	r3, [pc, #32]	; (8014574 <udp_recv+0x34>)
 8014554:	f240 428a 	movw	r2, #1162	; 0x48a
 8014558:	4907      	ldr	r1, [pc, #28]	; (8014578 <udp_recv+0x38>)
 801455a:	4808      	ldr	r0, [pc, #32]	; (801457c <udp_recv+0x3c>)
 801455c:	f005 fcde 	bl	8019f1c <iprintf>
 8014560:	e005      	b.n	801456e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	61da      	str	r2, [r3, #28]
}
 801456e:	3710      	adds	r7, #16
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}
 8014574:	08020be8 	.word	0x08020be8
 8014578:	08020f1c 	.word	0x08020f1c
 801457c:	08020c3c 	.word	0x08020c3c

08014580 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b084      	sub	sp, #16
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d107      	bne.n	801459e <udp_remove+0x1e>
 801458e:	4b19      	ldr	r3, [pc, #100]	; (80145f4 <udp_remove+0x74>)
 8014590:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014594:	4918      	ldr	r1, [pc, #96]	; (80145f8 <udp_remove+0x78>)
 8014596:	4819      	ldr	r0, [pc, #100]	; (80145fc <udp_remove+0x7c>)
 8014598:	f005 fcc0 	bl	8019f1c <iprintf>
 801459c:	e026      	b.n	80145ec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801459e:	4b18      	ldr	r3, [pc, #96]	; (8014600 <udp_remove+0x80>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	687a      	ldr	r2, [r7, #4]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d105      	bne.n	80145b4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80145a8:	4b15      	ldr	r3, [pc, #84]	; (8014600 <udp_remove+0x80>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	4a14      	ldr	r2, [pc, #80]	; (8014600 <udp_remove+0x80>)
 80145b0:	6013      	str	r3, [r2, #0]
 80145b2:	e017      	b.n	80145e4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80145b4:	4b12      	ldr	r3, [pc, #72]	; (8014600 <udp_remove+0x80>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	60fb      	str	r3, [r7, #12]
 80145ba:	e010      	b.n	80145de <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	68db      	ldr	r3, [r3, #12]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d009      	beq.n	80145d8 <udp_remove+0x58>
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	d104      	bne.n	80145d8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	68da      	ldr	r2, [r3, #12]
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	60da      	str	r2, [r3, #12]
        break;
 80145d6:	e005      	b.n	80145e4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	68db      	ldr	r3, [r3, #12]
 80145dc:	60fb      	str	r3, [r7, #12]
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d1eb      	bne.n	80145bc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80145e4:	6879      	ldr	r1, [r7, #4]
 80145e6:	2000      	movs	r0, #0
 80145e8:	f7f7 fe1e 	bl	800c228 <memp_free>
}
 80145ec:	3710      	adds	r7, #16
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}
 80145f2:	bf00      	nop
 80145f4:	08020be8 	.word	0x08020be8
 80145f8:	08020f34 	.word	0x08020f34
 80145fc:	08020c3c 	.word	0x08020c3c
 8014600:	200280a8 	.word	0x200280a8

08014604 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b082      	sub	sp, #8
 8014608:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801460a:	2000      	movs	r0, #0
 801460c:	f7f7 fdba 	bl	800c184 <memp_malloc>
 8014610:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d007      	beq.n	8014628 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014618:	2220      	movs	r2, #32
 801461a:	2100      	movs	r1, #0
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f004 fe36 	bl	801928e <memset>
    pcb->ttl = UDP_TTL;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	22ff      	movs	r2, #255	; 0xff
 8014626:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014628:	687b      	ldr	r3, [r7, #4]
}
 801462a:	4618      	mov	r0, r3
 801462c:	3708      	adds	r7, #8
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}

08014632 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014632:	b580      	push	{r7, lr}
 8014634:	b084      	sub	sp, #16
 8014636:	af00      	add	r7, sp, #0
 8014638:	4603      	mov	r3, r0
 801463a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801463c:	f7ff ffe2 	bl	8014604 <udp_new>
 8014640:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014642:	68fb      	ldr	r3, [r7, #12]
}
 8014644:	4618      	mov	r0, r3
 8014646:	3710      	adds	r7, #16
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}

0801464c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801464c:	b480      	push	{r7}
 801464e:	b085      	sub	sp, #20
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
 8014654:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d01e      	beq.n	801469a <udp_netif_ip_addr_changed+0x4e>
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d01a      	beq.n	801469a <udp_netif_ip_addr_changed+0x4e>
 8014664:	683b      	ldr	r3, [r7, #0]
 8014666:	2b00      	cmp	r3, #0
 8014668:	d017      	beq.n	801469a <udp_netif_ip_addr_changed+0x4e>
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d013      	beq.n	801469a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014672:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <udp_netif_ip_addr_changed+0x5c>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	60fb      	str	r3, [r7, #12]
 8014678:	e00c      	b.n	8014694 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	681a      	ldr	r2, [r3, #0]
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	429a      	cmp	r2, r3
 8014684:	d103      	bne.n	801468e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	681a      	ldr	r2, [r3, #0]
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	60fb      	str	r3, [r7, #12]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d1ef      	bne.n	801467a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801469a:	bf00      	nop
 801469c:	3714      	adds	r7, #20
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr
 80146a6:	bf00      	nop
 80146a8:	200280a8 	.word	0x200280a8

080146ac <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80146b0:	4b20      	ldr	r3, [pc, #128]	; (8014734 <dhcp_inc_pcb_refcount+0x88>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d133      	bne.n	8014720 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80146b8:	4b1f      	ldr	r3, [pc, #124]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d005      	beq.n	80146cc <dhcp_inc_pcb_refcount+0x20>
 80146c0:	4b1e      	ldr	r3, [pc, #120]	; (801473c <dhcp_inc_pcb_refcount+0x90>)
 80146c2:	22e5      	movs	r2, #229	; 0xe5
 80146c4:	491e      	ldr	r1, [pc, #120]	; (8014740 <dhcp_inc_pcb_refcount+0x94>)
 80146c6:	481f      	ldr	r0, [pc, #124]	; (8014744 <dhcp_inc_pcb_refcount+0x98>)
 80146c8:	f005 fc28 	bl	8019f1c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80146cc:	f7ff ff9a 	bl	8014604 <udp_new>
 80146d0:	4602      	mov	r2, r0
 80146d2:	4b19      	ldr	r3, [pc, #100]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 80146d4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80146d6:	4b18      	ldr	r3, [pc, #96]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d102      	bne.n	80146e4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80146de:	f04f 33ff 	mov.w	r3, #4294967295
 80146e2:	e024      	b.n	801472e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80146e4:	4b14      	ldr	r3, [pc, #80]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	7a5a      	ldrb	r2, [r3, #9]
 80146ea:	4b13      	ldr	r3, [pc, #76]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f042 0220 	orr.w	r2, r2, #32
 80146f2:	b2d2      	uxtb	r2, r2
 80146f4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80146f6:	4b10      	ldr	r3, [pc, #64]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	2244      	movs	r2, #68	; 0x44
 80146fc:	4912      	ldr	r1, [pc, #72]	; (8014748 <dhcp_inc_pcb_refcount+0x9c>)
 80146fe:	4618      	mov	r0, r3
 8014700:	f7ff fe28 	bl	8014354 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014704:	4b0c      	ldr	r3, [pc, #48]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2243      	movs	r2, #67	; 0x43
 801470a:	490f      	ldr	r1, [pc, #60]	; (8014748 <dhcp_inc_pcb_refcount+0x9c>)
 801470c:	4618      	mov	r0, r3
 801470e:	f7ff fea9 	bl	8014464 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014712:	4b09      	ldr	r3, [pc, #36]	; (8014738 <dhcp_inc_pcb_refcount+0x8c>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2200      	movs	r2, #0
 8014718:	490c      	ldr	r1, [pc, #48]	; (801474c <dhcp_inc_pcb_refcount+0xa0>)
 801471a:	4618      	mov	r0, r3
 801471c:	f7ff ff10 	bl	8014540 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014720:	4b04      	ldr	r3, [pc, #16]	; (8014734 <dhcp_inc_pcb_refcount+0x88>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	3301      	adds	r3, #1
 8014726:	b2da      	uxtb	r2, r3
 8014728:	4b02      	ldr	r3, [pc, #8]	; (8014734 <dhcp_inc_pcb_refcount+0x88>)
 801472a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801472c:	2300      	movs	r3, #0
}
 801472e:	4618      	mov	r0, r3
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	200214e0 	.word	0x200214e0
 8014738:	200214dc 	.word	0x200214dc
 801473c:	08020f4c 	.word	0x08020f4c
 8014740:	08020f84 	.word	0x08020f84
 8014744:	08020fac 	.word	0x08020fac
 8014748:	08021b90 	.word	0x08021b90
 801474c:	080160a9 	.word	0x080160a9

08014750 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014754:	4b0e      	ldr	r3, [pc, #56]	; (8014790 <dhcp_dec_pcb_refcount+0x40>)
 8014756:	781b      	ldrb	r3, [r3, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d105      	bne.n	8014768 <dhcp_dec_pcb_refcount+0x18>
 801475c:	4b0d      	ldr	r3, [pc, #52]	; (8014794 <dhcp_dec_pcb_refcount+0x44>)
 801475e:	22ff      	movs	r2, #255	; 0xff
 8014760:	490d      	ldr	r1, [pc, #52]	; (8014798 <dhcp_dec_pcb_refcount+0x48>)
 8014762:	480e      	ldr	r0, [pc, #56]	; (801479c <dhcp_dec_pcb_refcount+0x4c>)
 8014764:	f005 fbda 	bl	8019f1c <iprintf>
  dhcp_pcb_refcount--;
 8014768:	4b09      	ldr	r3, [pc, #36]	; (8014790 <dhcp_dec_pcb_refcount+0x40>)
 801476a:	781b      	ldrb	r3, [r3, #0]
 801476c:	3b01      	subs	r3, #1
 801476e:	b2da      	uxtb	r2, r3
 8014770:	4b07      	ldr	r3, [pc, #28]	; (8014790 <dhcp_dec_pcb_refcount+0x40>)
 8014772:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014774:	4b06      	ldr	r3, [pc, #24]	; (8014790 <dhcp_dec_pcb_refcount+0x40>)
 8014776:	781b      	ldrb	r3, [r3, #0]
 8014778:	2b00      	cmp	r3, #0
 801477a:	d107      	bne.n	801478c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801477c:	4b08      	ldr	r3, [pc, #32]	; (80147a0 <dhcp_dec_pcb_refcount+0x50>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	4618      	mov	r0, r3
 8014782:	f7ff fefd 	bl	8014580 <udp_remove>
    dhcp_pcb = NULL;
 8014786:	4b06      	ldr	r3, [pc, #24]	; (80147a0 <dhcp_dec_pcb_refcount+0x50>)
 8014788:	2200      	movs	r2, #0
 801478a:	601a      	str	r2, [r3, #0]
  }
}
 801478c:	bf00      	nop
 801478e:	bd80      	pop	{r7, pc}
 8014790:	200214e0 	.word	0x200214e0
 8014794:	08020f4c 	.word	0x08020f4c
 8014798:	08020fd4 	.word	0x08020fd4
 801479c:	08020fac 	.word	0x08020fac
 80147a0:	200214dc 	.word	0x200214dc

080147a4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80147a4:	b580      	push	{r7, lr}
 80147a6:	b084      	sub	sp, #16
 80147a8:	af00      	add	r7, sp, #0
 80147aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147b0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80147b2:	210c      	movs	r1, #12
 80147b4:	68f8      	ldr	r0, [r7, #12]
 80147b6:	f001 f889 	bl	80158cc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80147ba:	4b06      	ldr	r3, [pc, #24]	; (80147d4 <dhcp_handle_nak+0x30>)
 80147bc:	4a05      	ldr	r2, [pc, #20]	; (80147d4 <dhcp_handle_nak+0x30>)
 80147be:	4905      	ldr	r1, [pc, #20]	; (80147d4 <dhcp_handle_nak+0x30>)
 80147c0:	6878      	ldr	r0, [r7, #4]
 80147c2:	f7f7 fed3 	bl	800c56c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f000 fc7c 	bl	80150c4 <dhcp_discover>
}
 80147cc:	bf00      	nop
 80147ce:	3710      	adds	r7, #16
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}
 80147d4:	08021b90 	.word	0x08021b90

080147d8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147e4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80147e6:	2108      	movs	r1, #8
 80147e8:	68f8      	ldr	r0, [r7, #12]
 80147ea:	f001 f86f 	bl	80158cc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	331c      	adds	r3, #28
 80147f2:	2200      	movs	r2, #0
 80147f4:	4619      	mov	r1, r3
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f002 fb9e 	bl	8016f38 <etharp_query>
 80147fc:	4603      	mov	r3, r0
 80147fe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	799b      	ldrb	r3, [r3, #6]
 8014804:	2bff      	cmp	r3, #255	; 0xff
 8014806:	d005      	beq.n	8014814 <dhcp_check+0x3c>
    dhcp->tries++;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	799b      	ldrb	r3, [r3, #6]
 801480c:	3301      	adds	r3, #1
 801480e:	b2da      	uxtb	r2, r3
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014814:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014818:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801481a:	893b      	ldrh	r3, [r7, #8]
 801481c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014820:	4a06      	ldr	r2, [pc, #24]	; (801483c <dhcp_check+0x64>)
 8014822:	fb82 1203 	smull	r1, r2, r2, r3
 8014826:	1152      	asrs	r2, r2, #5
 8014828:	17db      	asrs	r3, r3, #31
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	b29a      	uxth	r2, r3
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014832:	bf00      	nop
 8014834:	3710      	adds	r7, #16
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	10624dd3 	.word	0x10624dd3

08014840 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	b084      	sub	sp, #16
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801484e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014850:	4b0c      	ldr	r3, [pc, #48]	; (8014884 <dhcp_handle_offer+0x44>)
 8014852:	789b      	ldrb	r3, [r3, #2]
 8014854:	2b00      	cmp	r3, #0
 8014856:	d011      	beq.n	801487c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2200      	movs	r2, #0
 801485c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801485e:	4b0a      	ldr	r3, [pc, #40]	; (8014888 <dhcp_handle_offer+0x48>)
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	4618      	mov	r0, r3
 8014864:	f7f6 f819 	bl	800a89a <lwip_htonl>
 8014868:	4602      	mov	r2, r0
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	691a      	ldr	r2, [r3, #16]
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014876:	6878      	ldr	r0, [r7, #4]
 8014878:	f000 f808 	bl	801488c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801487c:	bf00      	nop
 801487e:	3710      	adds	r7, #16
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}
 8014884:	200280ac 	.word	0x200280ac
 8014888:	200280b8 	.word	0x200280b8

0801488c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801488c:	b5b0      	push	{r4, r5, r7, lr}
 801488e:	b08a      	sub	sp, #40	; 0x28
 8014890:	af02      	add	r7, sp, #8
 8014892:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d109      	bne.n	80148ae <dhcp_select+0x22>
 801489a:	4b71      	ldr	r3, [pc, #452]	; (8014a60 <dhcp_select+0x1d4>)
 801489c:	f240 1277 	movw	r2, #375	; 0x177
 80148a0:	4970      	ldr	r1, [pc, #448]	; (8014a64 <dhcp_select+0x1d8>)
 80148a2:	4871      	ldr	r0, [pc, #452]	; (8014a68 <dhcp_select+0x1dc>)
 80148a4:	f005 fb3a 	bl	8019f1c <iprintf>
 80148a8:	f06f 030f 	mvn.w	r3, #15
 80148ac:	e0d3      	b.n	8014a56 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148b2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80148b4:	69bb      	ldr	r3, [r7, #24]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d109      	bne.n	80148ce <dhcp_select+0x42>
 80148ba:	4b69      	ldr	r3, [pc, #420]	; (8014a60 <dhcp_select+0x1d4>)
 80148bc:	f240 1279 	movw	r2, #377	; 0x179
 80148c0:	496a      	ldr	r1, [pc, #424]	; (8014a6c <dhcp_select+0x1e0>)
 80148c2:	4869      	ldr	r0, [pc, #420]	; (8014a68 <dhcp_select+0x1dc>)
 80148c4:	f005 fb2a 	bl	8019f1c <iprintf>
 80148c8:	f06f 0305 	mvn.w	r3, #5
 80148cc:	e0c3      	b.n	8014a56 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80148ce:	2101      	movs	r1, #1
 80148d0:	69b8      	ldr	r0, [r7, #24]
 80148d2:	f000 fffb 	bl	80158cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80148d6:	f107 030c 	add.w	r3, r7, #12
 80148da:	2203      	movs	r2, #3
 80148dc:	69b9      	ldr	r1, [r7, #24]
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f001 fcae 	bl	8016240 <dhcp_create_msg>
 80148e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f000 8085 	beq.w	80149f8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	685b      	ldr	r3, [r3, #4]
 80148f2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80148f4:	89b8      	ldrh	r0, [r7, #12]
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148fc:	2302      	movs	r3, #2
 80148fe:	2239      	movs	r2, #57	; 0x39
 8014900:	f000 fffe 	bl	8015900 <dhcp_option>
 8014904:	4603      	mov	r3, r0
 8014906:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014908:	89b8      	ldrh	r0, [r7, #12]
 801490a:	693b      	ldr	r3, [r7, #16]
 801490c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014914:	461a      	mov	r2, r3
 8014916:	f001 f84d 	bl	80159b4 <dhcp_option_short>
 801491a:	4603      	mov	r3, r0
 801491c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801491e:	89b8      	ldrh	r0, [r7, #12]
 8014920:	693b      	ldr	r3, [r7, #16]
 8014922:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014926:	2304      	movs	r3, #4
 8014928:	2232      	movs	r2, #50	; 0x32
 801492a:	f000 ffe9 	bl	8015900 <dhcp_option>
 801492e:	4603      	mov	r3, r0
 8014930:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014932:	89bc      	ldrh	r4, [r7, #12]
 8014934:	693b      	ldr	r3, [r7, #16]
 8014936:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	69db      	ldr	r3, [r3, #28]
 801493e:	4618      	mov	r0, r3
 8014940:	f7f5 ffab 	bl	800a89a <lwip_htonl>
 8014944:	4603      	mov	r3, r0
 8014946:	461a      	mov	r2, r3
 8014948:	4629      	mov	r1, r5
 801494a:	4620      	mov	r0, r4
 801494c:	f001 f864 	bl	8015a18 <dhcp_option_long>
 8014950:	4603      	mov	r3, r0
 8014952:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014954:	89b8      	ldrh	r0, [r7, #12]
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801495c:	2304      	movs	r3, #4
 801495e:	2236      	movs	r2, #54	; 0x36
 8014960:	f000 ffce 	bl	8015900 <dhcp_option>
 8014964:	4603      	mov	r3, r0
 8014966:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014968:	89bc      	ldrh	r4, [r7, #12]
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	699b      	ldr	r3, [r3, #24]
 8014974:	4618      	mov	r0, r3
 8014976:	f7f5 ff90 	bl	800a89a <lwip_htonl>
 801497a:	4603      	mov	r3, r0
 801497c:	461a      	mov	r2, r3
 801497e:	4629      	mov	r1, r5
 8014980:	4620      	mov	r0, r4
 8014982:	f001 f849 	bl	8015a18 <dhcp_option_long>
 8014986:	4603      	mov	r3, r0
 8014988:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801498a:	89b8      	ldrh	r0, [r7, #12]
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014992:	2304      	movs	r3, #4
 8014994:	2237      	movs	r2, #55	; 0x37
 8014996:	f000 ffb3 	bl	8015900 <dhcp_option>
 801499a:	4603      	mov	r3, r0
 801499c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801499e:	2300      	movs	r3, #0
 80149a0:	77bb      	strb	r3, [r7, #30]
 80149a2:	e00e      	b.n	80149c2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80149a4:	89b8      	ldrh	r0, [r7, #12]
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149ac:	7fbb      	ldrb	r3, [r7, #30]
 80149ae:	4a30      	ldr	r2, [pc, #192]	; (8014a70 <dhcp_select+0x1e4>)
 80149b0:	5cd3      	ldrb	r3, [r2, r3]
 80149b2:	461a      	mov	r2, r3
 80149b4:	f000 ffd8 	bl	8015968 <dhcp_option_byte>
 80149b8:	4603      	mov	r3, r0
 80149ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80149bc:	7fbb      	ldrb	r3, [r7, #30]
 80149be:	3301      	adds	r3, #1
 80149c0:	77bb      	strb	r3, [r7, #30]
 80149c2:	7fbb      	ldrb	r3, [r7, #30]
 80149c4:	2b03      	cmp	r3, #3
 80149c6:	d9ed      	bls.n	80149a4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80149c8:	89b8      	ldrh	r0, [r7, #12]
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	33f0      	adds	r3, #240	; 0xf0
 80149ce:	697a      	ldr	r2, [r7, #20]
 80149d0:	4619      	mov	r1, r3
 80149d2:	f001 fd0b 	bl	80163ec <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80149d6:	4b27      	ldr	r3, [pc, #156]	; (8014a74 <dhcp_select+0x1e8>)
 80149d8:	6818      	ldr	r0, [r3, #0]
 80149da:	4b27      	ldr	r3, [pc, #156]	; (8014a78 <dhcp_select+0x1ec>)
 80149dc:	9301      	str	r3, [sp, #4]
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	9300      	str	r3, [sp, #0]
 80149e2:	2343      	movs	r3, #67	; 0x43
 80149e4:	4a25      	ldr	r2, [pc, #148]	; (8014a7c <dhcp_select+0x1f0>)
 80149e6:	6979      	ldr	r1, [r7, #20]
 80149e8:	f7ff fbce 	bl	8014188 <udp_sendto_if_src>
 80149ec:	4603      	mov	r3, r0
 80149ee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80149f0:	6978      	ldr	r0, [r7, #20]
 80149f2:	f7f8 fac5 	bl	800cf80 <pbuf_free>
 80149f6:	e001      	b.n	80149fc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80149f8:	23ff      	movs	r3, #255	; 0xff
 80149fa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	799b      	ldrb	r3, [r3, #6]
 8014a00:	2bff      	cmp	r3, #255	; 0xff
 8014a02:	d005      	beq.n	8014a10 <dhcp_select+0x184>
    dhcp->tries++;
 8014a04:	69bb      	ldr	r3, [r7, #24]
 8014a06:	799b      	ldrb	r3, [r3, #6]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	b2da      	uxtb	r2, r3
 8014a0c:	69bb      	ldr	r3, [r7, #24]
 8014a0e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	799b      	ldrb	r3, [r3, #6]
 8014a14:	2b05      	cmp	r3, #5
 8014a16:	d80d      	bhi.n	8014a34 <dhcp_select+0x1a8>
 8014a18:	69bb      	ldr	r3, [r7, #24]
 8014a1a:	799b      	ldrb	r3, [r3, #6]
 8014a1c:	461a      	mov	r2, r3
 8014a1e:	2301      	movs	r3, #1
 8014a20:	4093      	lsls	r3, r2
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	461a      	mov	r2, r3
 8014a26:	0152      	lsls	r2, r2, #5
 8014a28:	1ad2      	subs	r2, r2, r3
 8014a2a:	0092      	lsls	r2, r2, #2
 8014a2c:	4413      	add	r3, r2
 8014a2e:	00db      	lsls	r3, r3, #3
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	e001      	b.n	8014a38 <dhcp_select+0x1ac>
 8014a34:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014a38:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a3a:	89fb      	ldrh	r3, [r7, #14]
 8014a3c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a40:	4a0f      	ldr	r2, [pc, #60]	; (8014a80 <dhcp_select+0x1f4>)
 8014a42:	fb82 1203 	smull	r1, r2, r2, r3
 8014a46:	1152      	asrs	r2, r2, #5
 8014a48:	17db      	asrs	r3, r3, #31
 8014a4a:	1ad3      	subs	r3, r2, r3
 8014a4c:	b29a      	uxth	r2, r3
 8014a4e:	69bb      	ldr	r3, [r7, #24]
 8014a50:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a56:	4618      	mov	r0, r3
 8014a58:	3720      	adds	r7, #32
 8014a5a:	46bd      	mov	sp, r7
 8014a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8014a5e:	bf00      	nop
 8014a60:	08020f4c 	.word	0x08020f4c
 8014a64:	08020ff8 	.word	0x08020ff8
 8014a68:	08020fac 	.word	0x08020fac
 8014a6c:	08021014 	.word	0x08021014
 8014a70:	2000001c 	.word	0x2000001c
 8014a74:	200214dc 	.word	0x200214dc
 8014a78:	08021b90 	.word	0x08021b90
 8014a7c:	08021b94 	.word	0x08021b94
 8014a80:	10624dd3 	.word	0x10624dd3

08014a84 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b082      	sub	sp, #8
 8014a88:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014a8a:	4b27      	ldr	r3, [pc, #156]	; (8014b28 <dhcp_coarse_tmr+0xa4>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	607b      	str	r3, [r7, #4]
 8014a90:	e042      	b.n	8014b18 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a96:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d039      	beq.n	8014b12 <dhcp_coarse_tmr+0x8e>
 8014a9e:	683b      	ldr	r3, [r7, #0]
 8014aa0:	795b      	ldrb	r3, [r3, #5]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d035      	beq.n	8014b12 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	8a9b      	ldrh	r3, [r3, #20]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d012      	beq.n	8014ad4 <dhcp_coarse_tmr+0x50>
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	8a5b      	ldrh	r3, [r3, #18]
 8014ab2:	3301      	adds	r3, #1
 8014ab4:	b29a      	uxth	r2, r3
 8014ab6:	683b      	ldr	r3, [r7, #0]
 8014ab8:	825a      	strh	r2, [r3, #18]
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	8a5a      	ldrh	r2, [r3, #18]
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	8a9b      	ldrh	r3, [r3, #20]
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d106      	bne.n	8014ad4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014ac6:	6878      	ldr	r0, [r7, #4]
 8014ac8:	f000 fe66 	bl	8015798 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f000 f98b 	bl	8014de8 <dhcp_start>
 8014ad2:	e01e      	b.n	8014b12 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	8a1b      	ldrh	r3, [r3, #16]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d00b      	beq.n	8014af4 <dhcp_coarse_tmr+0x70>
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	8a1b      	ldrh	r3, [r3, #16]
 8014ae0:	1e5a      	subs	r2, r3, #1
 8014ae2:	b291      	uxth	r1, r2
 8014ae4:	683a      	ldr	r2, [r7, #0]
 8014ae6:	8211      	strh	r1, [r2, #16]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d103      	bne.n	8014af4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014aec:	6878      	ldr	r0, [r7, #4]
 8014aee:	f000 f8c7 	bl	8014c80 <dhcp_t2_timeout>
 8014af2:	e00e      	b.n	8014b12 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	89db      	ldrh	r3, [r3, #14]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d00a      	beq.n	8014b12 <dhcp_coarse_tmr+0x8e>
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	89db      	ldrh	r3, [r3, #14]
 8014b00:	1e5a      	subs	r2, r3, #1
 8014b02:	b291      	uxth	r1, r2
 8014b04:	683a      	ldr	r2, [r7, #0]
 8014b06:	81d1      	strh	r1, [r2, #14]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d102      	bne.n	8014b12 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 f888 	bl	8014c22 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	607b      	str	r3, [r7, #4]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d1b9      	bne.n	8014a92 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014b1e:	bf00      	nop
 8014b20:	3708      	adds	r7, #8
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	20028080 	.word	0x20028080

08014b2c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014b32:	4b16      	ldr	r3, [pc, #88]	; (8014b8c <dhcp_fine_tmr+0x60>)
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	607b      	str	r3, [r7, #4]
 8014b38:	e020      	b.n	8014b7c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b3e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d017      	beq.n	8014b76 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	891b      	ldrh	r3, [r3, #8]
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d906      	bls.n	8014b5c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014b4e:	683b      	ldr	r3, [r7, #0]
 8014b50:	891b      	ldrh	r3, [r3, #8]
 8014b52:	3b01      	subs	r3, #1
 8014b54:	b29a      	uxth	r2, r3
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	811a      	strh	r2, [r3, #8]
 8014b5a:	e00c      	b.n	8014b76 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014b5c:	683b      	ldr	r3, [r7, #0]
 8014b5e:	891b      	ldrh	r3, [r3, #8]
 8014b60:	2b01      	cmp	r3, #1
 8014b62:	d108      	bne.n	8014b76 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	891b      	ldrh	r3, [r3, #8]
 8014b68:	3b01      	subs	r3, #1
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f000 f80d 	bl	8014b90 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	607b      	str	r3, [r7, #4]
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d1db      	bne.n	8014b3a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014b82:	bf00      	nop
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	20028080 	.word	0x20028080

08014b90 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b9c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	795b      	ldrb	r3, [r3, #5]
 8014ba2:	2b0c      	cmp	r3, #12
 8014ba4:	d003      	beq.n	8014bae <dhcp_timeout+0x1e>
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	795b      	ldrb	r3, [r3, #5]
 8014baa:	2b06      	cmp	r3, #6
 8014bac:	d103      	bne.n	8014bb6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014bae:	6878      	ldr	r0, [r7, #4]
 8014bb0:	f000 fa88 	bl	80150c4 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014bb4:	e031      	b.n	8014c1a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	795b      	ldrb	r3, [r3, #5]
 8014bba:	2b01      	cmp	r3, #1
 8014bbc:	d10e      	bne.n	8014bdc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	799b      	ldrb	r3, [r3, #6]
 8014bc2:	2b05      	cmp	r3, #5
 8014bc4:	d803      	bhi.n	8014bce <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f7ff fe60 	bl	801488c <dhcp_select>
}
 8014bcc:	e025      	b.n	8014c1a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014bce:	6878      	ldr	r0, [r7, #4]
 8014bd0:	f000 fde2 	bl	8015798 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 f907 	bl	8014de8 <dhcp_start>
}
 8014bda:	e01e      	b.n	8014c1a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	795b      	ldrb	r3, [r3, #5]
 8014be0:	2b08      	cmp	r3, #8
 8014be2:	d10b      	bne.n	8014bfc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	799b      	ldrb	r3, [r3, #6]
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	d803      	bhi.n	8014bf4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014bec:	6878      	ldr	r0, [r7, #4]
 8014bee:	f7ff fdf3 	bl	80147d8 <dhcp_check>
}
 8014bf2:	e012      	b.n	8014c1a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 fb07 	bl	8015208 <dhcp_bind>
}
 8014bfa:	e00e      	b.n	8014c1a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	795b      	ldrb	r3, [r3, #5]
 8014c00:	2b03      	cmp	r3, #3
 8014c02:	d10a      	bne.n	8014c1a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	799b      	ldrb	r3, [r3, #6]
 8014c08:	2b01      	cmp	r3, #1
 8014c0a:	d803      	bhi.n	8014c14 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014c0c:	6878      	ldr	r0, [r7, #4]
 8014c0e:	f000 fd0d 	bl	801562c <dhcp_reboot>
}
 8014c12:	e002      	b.n	8014c1a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f000 fa55 	bl	80150c4 <dhcp_discover>
}
 8014c1a:	bf00      	nop
 8014c1c:	3710      	adds	r7, #16
 8014c1e:	46bd      	mov	sp, r7
 8014c20:	bd80      	pop	{r7, pc}

08014c22 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014c22:	b580      	push	{r7, lr}
 8014c24:	b084      	sub	sp, #16
 8014c26:	af00      	add	r7, sp, #0
 8014c28:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c2e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	795b      	ldrb	r3, [r3, #5]
 8014c34:	2b01      	cmp	r3, #1
 8014c36:	d007      	beq.n	8014c48 <dhcp_t1_timeout+0x26>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	795b      	ldrb	r3, [r3, #5]
 8014c3c:	2b0a      	cmp	r3, #10
 8014c3e:	d003      	beq.n	8014c48 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c44:	2b05      	cmp	r3, #5
 8014c46:	d117      	bne.n	8014c78 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f000 fbb7 	bl	80153bc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	899b      	ldrh	r3, [r3, #12]
 8014c52:	461a      	mov	r2, r3
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	8a5b      	ldrh	r3, [r3, #18]
 8014c58:	1ad3      	subs	r3, r2, r3
 8014c5a:	2b01      	cmp	r3, #1
 8014c5c:	dd0c      	ble.n	8014c78 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	899b      	ldrh	r3, [r3, #12]
 8014c62:	461a      	mov	r2, r3
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	8a5b      	ldrh	r3, [r3, #18]
 8014c68:	1ad3      	subs	r3, r2, r3
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	da00      	bge.n	8014c70 <dhcp_t1_timeout+0x4e>
 8014c6e:	3301      	adds	r3, #1
 8014c70:	105b      	asrs	r3, r3, #1
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014c78:	bf00      	nop
 8014c7a:	3710      	adds	r7, #16
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}

08014c80 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c8c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	795b      	ldrb	r3, [r3, #5]
 8014c92:	2b01      	cmp	r3, #1
 8014c94:	d00b      	beq.n	8014cae <dhcp_t2_timeout+0x2e>
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	795b      	ldrb	r3, [r3, #5]
 8014c9a:	2b0a      	cmp	r3, #10
 8014c9c:	d007      	beq.n	8014cae <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014ca2:	2b05      	cmp	r3, #5
 8014ca4:	d003      	beq.n	8014cae <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	795b      	ldrb	r3, [r3, #5]
 8014caa:	2b04      	cmp	r3, #4
 8014cac:	d117      	bne.n	8014cde <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f000 fc20 	bl	80154f4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	8a9b      	ldrh	r3, [r3, #20]
 8014cb8:	461a      	mov	r2, r3
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	8a5b      	ldrh	r3, [r3, #18]
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	dd0c      	ble.n	8014cde <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	8a9b      	ldrh	r3, [r3, #20]
 8014cc8:	461a      	mov	r2, r3
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	8a5b      	ldrh	r3, [r3, #18]
 8014cce:	1ad3      	subs	r3, r2, r3
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	da00      	bge.n	8014cd6 <dhcp_t2_timeout+0x56>
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	105b      	asrs	r3, r3, #1
 8014cd8:	b29a      	uxth	r2, r3
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014cde:	bf00      	nop
 8014ce0:	3710      	adds	r7, #16
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}
	...

08014ce8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b086      	sub	sp, #24
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cf6:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	2200      	movs	r2, #0
 8014d02:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014d04:	4b36      	ldr	r3, [pc, #216]	; (8014de0 <dhcp_handle_ack+0xf8>)
 8014d06:	78db      	ldrb	r3, [r3, #3]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d003      	beq.n	8014d14 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014d0c:	4b35      	ldr	r3, [pc, #212]	; (8014de4 <dhcp_handle_ack+0xfc>)
 8014d0e:	68da      	ldr	r2, [r3, #12]
 8014d10:	693b      	ldr	r3, [r7, #16]
 8014d12:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014d14:	4b32      	ldr	r3, [pc, #200]	; (8014de0 <dhcp_handle_ack+0xf8>)
 8014d16:	791b      	ldrb	r3, [r3, #4]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d004      	beq.n	8014d26 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014d1c:	4b31      	ldr	r3, [pc, #196]	; (8014de4 <dhcp_handle_ack+0xfc>)
 8014d1e:	691a      	ldr	r2, [r3, #16]
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	62da      	str	r2, [r3, #44]	; 0x2c
 8014d24:	e004      	b.n	8014d30 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014d2a:	085a      	lsrs	r2, r3, #1
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014d30:	4b2b      	ldr	r3, [pc, #172]	; (8014de0 <dhcp_handle_ack+0xf8>)
 8014d32:	795b      	ldrb	r3, [r3, #5]
 8014d34:	2b00      	cmp	r3, #0
 8014d36:	d004      	beq.n	8014d42 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014d38:	4b2a      	ldr	r3, [pc, #168]	; (8014de4 <dhcp_handle_ack+0xfc>)
 8014d3a:	695a      	ldr	r2, [r3, #20]
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8014d40:	e007      	b.n	8014d52 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014d42:	693b      	ldr	r3, [r7, #16]
 8014d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d46:	4613      	mov	r3, r2
 8014d48:	00db      	lsls	r3, r3, #3
 8014d4a:	1a9b      	subs	r3, r3, r2
 8014d4c:	08da      	lsrs	r2, r3, #3
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	691a      	ldr	r2, [r3, #16]
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014d5a:	4b21      	ldr	r3, [pc, #132]	; (8014de0 <dhcp_handle_ack+0xf8>)
 8014d5c:	799b      	ldrb	r3, [r3, #6]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d00b      	beq.n	8014d7a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014d62:	4b20      	ldr	r3, [pc, #128]	; (8014de4 <dhcp_handle_ack+0xfc>)
 8014d64:	699b      	ldr	r3, [r3, #24]
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7f5 fd97 	bl	800a89a <lwip_htonl>
 8014d6c:	4602      	mov	r2, r0
 8014d6e:	693b      	ldr	r3, [r7, #16]
 8014d70:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	2201      	movs	r2, #1
 8014d76:	71da      	strb	r2, [r3, #7]
 8014d78:	e002      	b.n	8014d80 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014d80:	4b17      	ldr	r3, [pc, #92]	; (8014de0 <dhcp_handle_ack+0xf8>)
 8014d82:	79db      	ldrb	r3, [r3, #7]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d007      	beq.n	8014d98 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014d88:	4b16      	ldr	r3, [pc, #88]	; (8014de4 <dhcp_handle_ack+0xfc>)
 8014d8a:	69db      	ldr	r3, [r3, #28]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7f5 fd84 	bl	800a89a <lwip_htonl>
 8014d92:	4602      	mov	r2, r0
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8014d98:	2300      	movs	r3, #0
 8014d9a:	75fb      	strb	r3, [r7, #23]
 8014d9c:	e013      	b.n	8014dc6 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8014d9e:	7dfb      	ldrb	r3, [r7, #23]
 8014da0:	3308      	adds	r3, #8
 8014da2:	4a10      	ldr	r2, [pc, #64]	; (8014de4 <dhcp_handle_ack+0xfc>)
 8014da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014da8:	4618      	mov	r0, r3
 8014daa:	f7f5 fd76 	bl	800a89a <lwip_htonl>
 8014dae:	4603      	mov	r3, r0
 8014db0:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8014db2:	f107 020c 	add.w	r2, r7, #12
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
 8014db8:	4611      	mov	r1, r2
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7f5 fdc8 	bl	800a950 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8014dc0:	7dfb      	ldrb	r3, [r7, #23]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	75fb      	strb	r3, [r7, #23]
 8014dc6:	7dfb      	ldrb	r3, [r7, #23]
 8014dc8:	2b01      	cmp	r3, #1
 8014dca:	d805      	bhi.n	8014dd8 <dhcp_handle_ack+0xf0>
 8014dcc:	7dfb      	ldrb	r3, [r7, #23]
 8014dce:	3308      	adds	r3, #8
 8014dd0:	4a03      	ldr	r2, [pc, #12]	; (8014de0 <dhcp_handle_ack+0xf8>)
 8014dd2:	5cd3      	ldrb	r3, [r2, r3]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d1e2      	bne.n	8014d9e <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014dd8:	bf00      	nop
 8014dda:	3718      	adds	r7, #24
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	bd80      	pop	{r7, pc}
 8014de0:	200280ac 	.word	0x200280ac
 8014de4:	200280b8 	.word	0x200280b8

08014de8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b084      	sub	sp, #16
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d109      	bne.n	8014e0a <dhcp_start+0x22>
 8014df6:	4b37      	ldr	r3, [pc, #220]	; (8014ed4 <dhcp_start+0xec>)
 8014df8:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014dfc:	4936      	ldr	r1, [pc, #216]	; (8014ed8 <dhcp_start+0xf0>)
 8014dfe:	4837      	ldr	r0, [pc, #220]	; (8014edc <dhcp_start+0xf4>)
 8014e00:	f005 f88c 	bl	8019f1c <iprintf>
 8014e04:	f06f 030f 	mvn.w	r3, #15
 8014e08:	e060      	b.n	8014ecc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014e10:	f003 0301 	and.w	r3, r3, #1
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d109      	bne.n	8014e2c <dhcp_start+0x44>
 8014e18:	4b2e      	ldr	r3, [pc, #184]	; (8014ed4 <dhcp_start+0xec>)
 8014e1a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014e1e:	4930      	ldr	r1, [pc, #192]	; (8014ee0 <dhcp_start+0xf8>)
 8014e20:	482e      	ldr	r0, [pc, #184]	; (8014edc <dhcp_start+0xf4>)
 8014e22:	f005 f87b 	bl	8019f1c <iprintf>
 8014e26:	f06f 030f 	mvn.w	r3, #15
 8014e2a:	e04f      	b.n	8014ecc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e30:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014e36:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014e3a:	d202      	bcs.n	8014e42 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8014e40:	e044      	b.n	8014ecc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d10d      	bne.n	8014e64 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014e48:	2034      	movs	r0, #52	; 0x34
 8014e4a:	f7f7 f819 	bl	800be80 <mem_malloc>
 8014e4e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014e50:	68fb      	ldr	r3, [r7, #12]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d102      	bne.n	8014e5c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014e56:	f04f 33ff 	mov.w	r3, #4294967295
 8014e5a:	e037      	b.n	8014ecc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	68fa      	ldr	r2, [r7, #12]
 8014e60:	625a      	str	r2, [r3, #36]	; 0x24
 8014e62:	e005      	b.n	8014e70 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	791b      	ldrb	r3, [r3, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d001      	beq.n	8014e70 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014e6c:	f7ff fc70 	bl	8014750 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014e70:	2234      	movs	r2, #52	; 0x34
 8014e72:	2100      	movs	r1, #0
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f004 fa0a 	bl	801928e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014e7a:	f7ff fc17 	bl	80146ac <dhcp_inc_pcb_refcount>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d002      	beq.n	8014e8a <dhcp_start+0xa2>
    return ERR_MEM;
 8014e84:	f04f 33ff 	mov.w	r3, #4294967295
 8014e88:	e020      	b.n	8014ecc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2201      	movs	r2, #1
 8014e8e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014e96:	f003 0304 	and.w	r3, r3, #4
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d105      	bne.n	8014eaa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014e9e:	2102      	movs	r1, #2
 8014ea0:	68f8      	ldr	r0, [r7, #12]
 8014ea2:	f000 fd13 	bl	80158cc <dhcp_set_state>
    return ERR_OK;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	e010      	b.n	8014ecc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 f90a 	bl	80150c4 <dhcp_discover>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014eb4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d005      	beq.n	8014ec8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014ebc:	6878      	ldr	r0, [r7, #4]
 8014ebe:	f000 fc6b 	bl	8015798 <dhcp_release_and_stop>
    return ERR_MEM;
 8014ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec6:	e001      	b.n	8014ecc <dhcp_start+0xe4>
  }
  return result;
 8014ec8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	08020f4c 	.word	0x08020f4c
 8014ed8:	08021030 	.word	0x08021030
 8014edc:	08020fac 	.word	0x08020fac
 8014ee0:	08021074 	.word	0x08021074

08014ee4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b084      	sub	sp, #16
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d037      	beq.n	8014f68 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	795b      	ldrb	r3, [r3, #5]
 8014efc:	2b0a      	cmp	r3, #10
 8014efe:	d820      	bhi.n	8014f42 <dhcp_network_changed+0x5e>
 8014f00:	a201      	add	r2, pc, #4	; (adr r2, 8014f08 <dhcp_network_changed+0x24>)
 8014f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f06:	bf00      	nop
 8014f08:	08014f6d 	.word	0x08014f6d
 8014f0c:	08014f43 	.word	0x08014f43
 8014f10:	08014f43 	.word	0x08014f43
 8014f14:	08014f35 	.word	0x08014f35
 8014f18:	08014f35 	.word	0x08014f35
 8014f1c:	08014f35 	.word	0x08014f35
 8014f20:	08014f43 	.word	0x08014f43
 8014f24:	08014f43 	.word	0x08014f43
 8014f28:	08014f43 	.word	0x08014f43
 8014f2c:	08014f43 	.word	0x08014f43
 8014f30:	08014f35 	.word	0x08014f35
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	2200      	movs	r2, #0
 8014f38:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f000 fb76 	bl	801562c <dhcp_reboot>
      break;
 8014f40:	e015      	b.n	8014f6e <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	795b      	ldrb	r3, [r3, #5]
 8014f46:	2b0c      	cmp	r3, #12
 8014f48:	d906      	bls.n	8014f58 <dhcp_network_changed+0x74>
 8014f4a:	4b0a      	ldr	r3, [pc, #40]	; (8014f74 <dhcp_network_changed+0x90>)
 8014f4c:	f240 326d 	movw	r2, #877	; 0x36d
 8014f50:	4909      	ldr	r1, [pc, #36]	; (8014f78 <dhcp_network_changed+0x94>)
 8014f52:	480a      	ldr	r0, [pc, #40]	; (8014f7c <dhcp_network_changed+0x98>)
 8014f54:	f004 ffe2 	bl	8019f1c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014f5e:	6878      	ldr	r0, [r7, #4]
 8014f60:	f000 f8b0 	bl	80150c4 <dhcp_discover>
      break;
 8014f64:	bf00      	nop
 8014f66:	e002      	b.n	8014f6e <dhcp_network_changed+0x8a>
    return;
 8014f68:	bf00      	nop
 8014f6a:	e000      	b.n	8014f6e <dhcp_network_changed+0x8a>
      break;
 8014f6c:	bf00      	nop
  }
}
 8014f6e:	3710      	adds	r7, #16
 8014f70:	46bd      	mov	sp, r7
 8014f72:	bd80      	pop	{r7, pc}
 8014f74:	08020f4c 	.word	0x08020f4c
 8014f78:	08021098 	.word	0x08021098
 8014f7c:	08020fac 	.word	0x08020fac

08014f80 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d107      	bne.n	8014fa0 <dhcp_arp_reply+0x20>
 8014f90:	4b0e      	ldr	r3, [pc, #56]	; (8014fcc <dhcp_arp_reply+0x4c>)
 8014f92:	f240 328b 	movw	r2, #907	; 0x38b
 8014f96:	490e      	ldr	r1, [pc, #56]	; (8014fd0 <dhcp_arp_reply+0x50>)
 8014f98:	480e      	ldr	r0, [pc, #56]	; (8014fd4 <dhcp_arp_reply+0x54>)
 8014f9a:	f004 ffbf 	bl	8019f1c <iprintf>
 8014f9e:	e012      	b.n	8014fc6 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fa4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d00c      	beq.n	8014fc6 <dhcp_arp_reply+0x46>
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	795b      	ldrb	r3, [r3, #5]
 8014fb0:	2b08      	cmp	r3, #8
 8014fb2:	d108      	bne.n	8014fc6 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	681a      	ldr	r2, [r3, #0]
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	69db      	ldr	r3, [r3, #28]
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d102      	bne.n	8014fc6 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f000 f809 	bl	8014fd8 <dhcp_decline>
    }
  }
}
 8014fc6:	3710      	adds	r7, #16
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}
 8014fcc:	08020f4c 	.word	0x08020f4c
 8014fd0:	08021030 	.word	0x08021030
 8014fd4:	08020fac 	.word	0x08020fac

08014fd8 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014fd8:	b5b0      	push	{r4, r5, r7, lr}
 8014fda:	b08a      	sub	sp, #40	; 0x28
 8014fdc:	af02      	add	r7, sp, #8
 8014fde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fe4:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014fe6:	210c      	movs	r1, #12
 8014fe8:	69b8      	ldr	r0, [r7, #24]
 8014fea:	f000 fc6f 	bl	80158cc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014fee:	f107 030c 	add.w	r3, r7, #12
 8014ff2:	2204      	movs	r2, #4
 8014ff4:	69b9      	ldr	r1, [r7, #24]
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f001 f922 	bl	8016240 <dhcp_create_msg>
 8014ffc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014ffe:	697b      	ldr	r3, [r7, #20]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d035      	beq.n	8015070 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	685b      	ldr	r3, [r3, #4]
 8015008:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801500a:	89b8      	ldrh	r0, [r7, #12]
 801500c:	693b      	ldr	r3, [r7, #16]
 801500e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015012:	2304      	movs	r3, #4
 8015014:	2232      	movs	r2, #50	; 0x32
 8015016:	f000 fc73 	bl	8015900 <dhcp_option>
 801501a:	4603      	mov	r3, r0
 801501c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801501e:	89bc      	ldrh	r4, [r7, #12]
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	69db      	ldr	r3, [r3, #28]
 801502a:	4618      	mov	r0, r3
 801502c:	f7f5 fc35 	bl	800a89a <lwip_htonl>
 8015030:	4603      	mov	r3, r0
 8015032:	461a      	mov	r2, r3
 8015034:	4629      	mov	r1, r5
 8015036:	4620      	mov	r0, r4
 8015038:	f000 fcee 	bl	8015a18 <dhcp_option_long>
 801503c:	4603      	mov	r3, r0
 801503e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015040:	89b8      	ldrh	r0, [r7, #12]
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	33f0      	adds	r3, #240	; 0xf0
 8015046:	697a      	ldr	r2, [r7, #20]
 8015048:	4619      	mov	r1, r3
 801504a:	f001 f9cf 	bl	80163ec <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801504e:	4b19      	ldr	r3, [pc, #100]	; (80150b4 <dhcp_decline+0xdc>)
 8015050:	6818      	ldr	r0, [r3, #0]
 8015052:	4b19      	ldr	r3, [pc, #100]	; (80150b8 <dhcp_decline+0xe0>)
 8015054:	9301      	str	r3, [sp, #4]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	9300      	str	r3, [sp, #0]
 801505a:	2343      	movs	r3, #67	; 0x43
 801505c:	4a17      	ldr	r2, [pc, #92]	; (80150bc <dhcp_decline+0xe4>)
 801505e:	6979      	ldr	r1, [r7, #20]
 8015060:	f7ff f892 	bl	8014188 <udp_sendto_if_src>
 8015064:	4603      	mov	r3, r0
 8015066:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015068:	6978      	ldr	r0, [r7, #20]
 801506a:	f7f7 ff89 	bl	800cf80 <pbuf_free>
 801506e:	e001      	b.n	8015074 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015070:	23ff      	movs	r3, #255	; 0xff
 8015072:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	799b      	ldrb	r3, [r3, #6]
 8015078:	2bff      	cmp	r3, #255	; 0xff
 801507a:	d005      	beq.n	8015088 <dhcp_decline+0xb0>
    dhcp->tries++;
 801507c:	69bb      	ldr	r3, [r7, #24]
 801507e:	799b      	ldrb	r3, [r3, #6]
 8015080:	3301      	adds	r3, #1
 8015082:	b2da      	uxtb	r2, r3
 8015084:	69bb      	ldr	r3, [r7, #24]
 8015086:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015088:	f242 7310 	movw	r3, #10000	; 0x2710
 801508c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801508e:	89fb      	ldrh	r3, [r7, #14]
 8015090:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015094:	4a0a      	ldr	r2, [pc, #40]	; (80150c0 <dhcp_decline+0xe8>)
 8015096:	fb82 1203 	smull	r1, r2, r2, r3
 801509a:	1152      	asrs	r2, r2, #5
 801509c:	17db      	asrs	r3, r3, #31
 801509e:	1ad3      	subs	r3, r2, r3
 80150a0:	b29a      	uxth	r2, r3
 80150a2:	69bb      	ldr	r3, [r7, #24]
 80150a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80150a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80150aa:	4618      	mov	r0, r3
 80150ac:	3720      	adds	r7, #32
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bdb0      	pop	{r4, r5, r7, pc}
 80150b2:	bf00      	nop
 80150b4:	200214dc 	.word	0x200214dc
 80150b8:	08021b90 	.word	0x08021b90
 80150bc:	08021b94 	.word	0x08021b94
 80150c0:	10624dd3 	.word	0x10624dd3

080150c4 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b08a      	sub	sp, #40	; 0x28
 80150c8:	af02      	add	r7, sp, #8
 80150ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d0:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80150d2:	2300      	movs	r3, #0
 80150d4:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	2200      	movs	r2, #0
 80150da:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80150dc:	2106      	movs	r1, #6
 80150de:	69b8      	ldr	r0, [r7, #24]
 80150e0:	f000 fbf4 	bl	80158cc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80150e4:	f107 0308 	add.w	r3, r7, #8
 80150e8:	2201      	movs	r2, #1
 80150ea:	69b9      	ldr	r1, [r7, #24]
 80150ec:	6878      	ldr	r0, [r7, #4]
 80150ee:	f001 f8a7 	bl	8016240 <dhcp_create_msg>
 80150f2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d04b      	beq.n	8015192 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80150fa:	693b      	ldr	r3, [r7, #16]
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015100:	8938      	ldrh	r0, [r7, #8]
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015108:	2302      	movs	r3, #2
 801510a:	2239      	movs	r2, #57	; 0x39
 801510c:	f000 fbf8 	bl	8015900 <dhcp_option>
 8015110:	4603      	mov	r3, r0
 8015112:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015114:	8938      	ldrh	r0, [r7, #8]
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015120:	461a      	mov	r2, r3
 8015122:	f000 fc47 	bl	80159b4 <dhcp_option_short>
 8015126:	4603      	mov	r3, r0
 8015128:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801512a:	8938      	ldrh	r0, [r7, #8]
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015132:	2304      	movs	r3, #4
 8015134:	2237      	movs	r2, #55	; 0x37
 8015136:	f000 fbe3 	bl	8015900 <dhcp_option>
 801513a:	4603      	mov	r3, r0
 801513c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801513e:	2300      	movs	r3, #0
 8015140:	77fb      	strb	r3, [r7, #31]
 8015142:	e00e      	b.n	8015162 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015144:	8938      	ldrh	r0, [r7, #8]
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801514c:	7ffb      	ldrb	r3, [r7, #31]
 801514e:	4a29      	ldr	r2, [pc, #164]	; (80151f4 <dhcp_discover+0x130>)
 8015150:	5cd3      	ldrb	r3, [r2, r3]
 8015152:	461a      	mov	r2, r3
 8015154:	f000 fc08 	bl	8015968 <dhcp_option_byte>
 8015158:	4603      	mov	r3, r0
 801515a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801515c:	7ffb      	ldrb	r3, [r7, #31]
 801515e:	3301      	adds	r3, #1
 8015160:	77fb      	strb	r3, [r7, #31]
 8015162:	7ffb      	ldrb	r3, [r7, #31]
 8015164:	2b03      	cmp	r3, #3
 8015166:	d9ed      	bls.n	8015144 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015168:	8938      	ldrh	r0, [r7, #8]
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	33f0      	adds	r3, #240	; 0xf0
 801516e:	693a      	ldr	r2, [r7, #16]
 8015170:	4619      	mov	r1, r3
 8015172:	f001 f93b 	bl	80163ec <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015176:	4b20      	ldr	r3, [pc, #128]	; (80151f8 <dhcp_discover+0x134>)
 8015178:	6818      	ldr	r0, [r3, #0]
 801517a:	4b20      	ldr	r3, [pc, #128]	; (80151fc <dhcp_discover+0x138>)
 801517c:	9301      	str	r3, [sp, #4]
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	9300      	str	r3, [sp, #0]
 8015182:	2343      	movs	r3, #67	; 0x43
 8015184:	4a1e      	ldr	r2, [pc, #120]	; (8015200 <dhcp_discover+0x13c>)
 8015186:	6939      	ldr	r1, [r7, #16]
 8015188:	f7fe fffe 	bl	8014188 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801518c:	6938      	ldr	r0, [r7, #16]
 801518e:	f7f7 fef7 	bl	800cf80 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8015192:	69bb      	ldr	r3, [r7, #24]
 8015194:	799b      	ldrb	r3, [r3, #6]
 8015196:	2bff      	cmp	r3, #255	; 0xff
 8015198:	d005      	beq.n	80151a6 <dhcp_discover+0xe2>
    dhcp->tries++;
 801519a:	69bb      	ldr	r3, [r7, #24]
 801519c:	799b      	ldrb	r3, [r3, #6]
 801519e:	3301      	adds	r3, #1
 80151a0:	b2da      	uxtb	r2, r3
 80151a2:	69bb      	ldr	r3, [r7, #24]
 80151a4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80151a6:	69bb      	ldr	r3, [r7, #24]
 80151a8:	799b      	ldrb	r3, [r3, #6]
 80151aa:	2b05      	cmp	r3, #5
 80151ac:	d80d      	bhi.n	80151ca <dhcp_discover+0x106>
 80151ae:	69bb      	ldr	r3, [r7, #24]
 80151b0:	799b      	ldrb	r3, [r3, #6]
 80151b2:	461a      	mov	r2, r3
 80151b4:	2301      	movs	r3, #1
 80151b6:	4093      	lsls	r3, r2
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	461a      	mov	r2, r3
 80151bc:	0152      	lsls	r2, r2, #5
 80151be:	1ad2      	subs	r2, r2, r3
 80151c0:	0092      	lsls	r2, r2, #2
 80151c2:	4413      	add	r3, r2
 80151c4:	00db      	lsls	r3, r3, #3
 80151c6:	b29b      	uxth	r3, r3
 80151c8:	e001      	b.n	80151ce <dhcp_discover+0x10a>
 80151ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80151ce:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80151d0:	897b      	ldrh	r3, [r7, #10]
 80151d2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80151d6:	4a0b      	ldr	r2, [pc, #44]	; (8015204 <dhcp_discover+0x140>)
 80151d8:	fb82 1203 	smull	r1, r2, r2, r3
 80151dc:	1152      	asrs	r2, r2, #5
 80151de:	17db      	asrs	r3, r3, #31
 80151e0:	1ad3      	subs	r3, r2, r3
 80151e2:	b29a      	uxth	r2, r3
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80151e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80151ec:	4618      	mov	r0, r3
 80151ee:	3720      	adds	r7, #32
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}
 80151f4:	2000001c 	.word	0x2000001c
 80151f8:	200214dc 	.word	0x200214dc
 80151fc:	08021b90 	.word	0x08021b90
 8015200:	08021b94 	.word	0x08021b94
 8015204:	10624dd3 	.word	0x10624dd3

08015208 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b088      	sub	sp, #32
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d107      	bne.n	8015226 <dhcp_bind+0x1e>
 8015216:	4b64      	ldr	r3, [pc, #400]	; (80153a8 <dhcp_bind+0x1a0>)
 8015218:	f240 4215 	movw	r2, #1045	; 0x415
 801521c:	4963      	ldr	r1, [pc, #396]	; (80153ac <dhcp_bind+0x1a4>)
 801521e:	4864      	ldr	r0, [pc, #400]	; (80153b0 <dhcp_bind+0x1a8>)
 8015220:	f004 fe7c 	bl	8019f1c <iprintf>
 8015224:	e0bc      	b.n	80153a0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801522a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d107      	bne.n	8015242 <dhcp_bind+0x3a>
 8015232:	4b5d      	ldr	r3, [pc, #372]	; (80153a8 <dhcp_bind+0x1a0>)
 8015234:	f240 4217 	movw	r2, #1047	; 0x417
 8015238:	495e      	ldr	r1, [pc, #376]	; (80153b4 <dhcp_bind+0x1ac>)
 801523a:	485d      	ldr	r0, [pc, #372]	; (80153b0 <dhcp_bind+0x1a8>)
 801523c:	f004 fe6e 	bl	8019f1c <iprintf>
 8015240:	e0ae      	b.n	80153a0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8015242:	69bb      	ldr	r3, [r7, #24]
 8015244:	2200      	movs	r2, #0
 8015246:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801524c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015250:	d019      	beq.n	8015286 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015256:	331e      	adds	r3, #30
 8015258:	4a57      	ldr	r2, [pc, #348]	; (80153b8 <dhcp_bind+0x1b0>)
 801525a:	fba2 2303 	umull	r2, r3, r2, r3
 801525e:	095b      	lsrs	r3, r3, #5
 8015260:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015268:	d302      	bcc.n	8015270 <dhcp_bind+0x68>
      timeout = 0xffff;
 801526a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801526e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	b29a      	uxth	r2, r3
 8015274:	69bb      	ldr	r3, [r7, #24]
 8015276:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015278:	69bb      	ldr	r3, [r7, #24]
 801527a:	8a9b      	ldrh	r3, [r3, #20]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d102      	bne.n	8015286 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015280:	69bb      	ldr	r3, [r7, #24]
 8015282:	2201      	movs	r2, #1
 8015284:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015286:	69bb      	ldr	r3, [r7, #24]
 8015288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801528e:	d01d      	beq.n	80152cc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015290:	69bb      	ldr	r3, [r7, #24]
 8015292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015294:	331e      	adds	r3, #30
 8015296:	4a48      	ldr	r2, [pc, #288]	; (80153b8 <dhcp_bind+0x1b0>)
 8015298:	fba2 2303 	umull	r2, r3, r2, r3
 801529c:	095b      	lsrs	r3, r3, #5
 801529e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152a6:	d302      	bcc.n	80152ae <dhcp_bind+0xa6>
      timeout = 0xffff;
 80152a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152ac:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	b29a      	uxth	r2, r3
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80152b6:	69bb      	ldr	r3, [r7, #24]
 80152b8:	895b      	ldrh	r3, [r3, #10]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d102      	bne.n	80152c4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	2201      	movs	r2, #1
 80152c2:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80152c4:	69bb      	ldr	r3, [r7, #24]
 80152c6:	895a      	ldrh	r2, [r3, #10]
 80152c8:	69bb      	ldr	r3, [r7, #24]
 80152ca:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80152cc:	69bb      	ldr	r3, [r7, #24]
 80152ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152d4:	d01d      	beq.n	8015312 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80152d6:	69bb      	ldr	r3, [r7, #24]
 80152d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152da:	331e      	adds	r3, #30
 80152dc:	4a36      	ldr	r2, [pc, #216]	; (80153b8 <dhcp_bind+0x1b0>)
 80152de:	fba2 2303 	umull	r2, r3, r2, r3
 80152e2:	095b      	lsrs	r3, r3, #5
 80152e4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80152e6:	69fb      	ldr	r3, [r7, #28]
 80152e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152ec:	d302      	bcc.n	80152f4 <dhcp_bind+0xec>
      timeout = 0xffff;
 80152ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152f2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	b29a      	uxth	r2, r3
 80152f8:	69bb      	ldr	r3, [r7, #24]
 80152fa:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80152fc:	69bb      	ldr	r3, [r7, #24]
 80152fe:	899b      	ldrh	r3, [r3, #12]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d102      	bne.n	801530a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015304:	69bb      	ldr	r3, [r7, #24]
 8015306:	2201      	movs	r2, #1
 8015308:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801530a:	69bb      	ldr	r3, [r7, #24]
 801530c:	899a      	ldrh	r2, [r3, #12]
 801530e:	69bb      	ldr	r3, [r7, #24]
 8015310:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015312:	69bb      	ldr	r3, [r7, #24]
 8015314:	895a      	ldrh	r2, [r3, #10]
 8015316:	69bb      	ldr	r3, [r7, #24]
 8015318:	899b      	ldrh	r3, [r3, #12]
 801531a:	429a      	cmp	r2, r3
 801531c:	d306      	bcc.n	801532c <dhcp_bind+0x124>
 801531e:	69bb      	ldr	r3, [r7, #24]
 8015320:	899b      	ldrh	r3, [r3, #12]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d002      	beq.n	801532c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015326:	69bb      	ldr	r3, [r7, #24]
 8015328:	2200      	movs	r2, #0
 801532a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801532c:	69bb      	ldr	r3, [r7, #24]
 801532e:	79db      	ldrb	r3, [r3, #7]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d003      	beq.n	801533c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015334:	69bb      	ldr	r3, [r7, #24]
 8015336:	6a1b      	ldr	r3, [r3, #32]
 8015338:	613b      	str	r3, [r7, #16]
 801533a:	e014      	b.n	8015366 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801533c:	69bb      	ldr	r3, [r7, #24]
 801533e:	331c      	adds	r3, #28
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015348:	2b00      	cmp	r3, #0
 801534a:	db02      	blt.n	8015352 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801534c:	23ff      	movs	r3, #255	; 0xff
 801534e:	613b      	str	r3, [r7, #16]
 8015350:	e009      	b.n	8015366 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015352:	7dfb      	ldrb	r3, [r7, #23]
 8015354:	2bbf      	cmp	r3, #191	; 0xbf
 8015356:	d903      	bls.n	8015360 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015358:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801535c:	613b      	str	r3, [r7, #16]
 801535e:	e002      	b.n	8015366 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015360:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015364:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015366:	69bb      	ldr	r3, [r7, #24]
 8015368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801536a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d108      	bne.n	8015384 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	69da      	ldr	r2, [r3, #28]
 8015376:	693b      	ldr	r3, [r7, #16]
 8015378:	4013      	ands	r3, r2
 801537a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015382:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015384:	210a      	movs	r1, #10
 8015386:	69b8      	ldr	r0, [r7, #24]
 8015388:	f000 faa0 	bl	80158cc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801538c:	69bb      	ldr	r3, [r7, #24]
 801538e:	f103 011c 	add.w	r1, r3, #28
 8015392:	f107 030c 	add.w	r3, r7, #12
 8015396:	f107 0210 	add.w	r2, r7, #16
 801539a:	6878      	ldr	r0, [r7, #4]
 801539c:	f7f7 f8e6 	bl	800c56c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80153a0:	3720      	adds	r7, #32
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	08020f4c 	.word	0x08020f4c
 80153ac:	080210ac 	.word	0x080210ac
 80153b0:	08020fac 	.word	0x08020fac
 80153b4:	080210c8 	.word	0x080210c8
 80153b8:	88888889 	.word	0x88888889

080153bc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b08a      	sub	sp, #40	; 0x28
 80153c0:	af02      	add	r7, sp, #8
 80153c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153c8:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80153ca:	2105      	movs	r1, #5
 80153cc:	69b8      	ldr	r0, [r7, #24]
 80153ce:	f000 fa7d 	bl	80158cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80153d2:	f107 030c 	add.w	r3, r7, #12
 80153d6:	2203      	movs	r2, #3
 80153d8:	69b9      	ldr	r1, [r7, #24]
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 ff30 	bl	8016240 <dhcp_create_msg>
 80153e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d04e      	beq.n	8015486 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	685b      	ldr	r3, [r3, #4]
 80153ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80153ee:	89b8      	ldrh	r0, [r7, #12]
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80153f6:	2302      	movs	r3, #2
 80153f8:	2239      	movs	r2, #57	; 0x39
 80153fa:	f000 fa81 	bl	8015900 <dhcp_option>
 80153fe:	4603      	mov	r3, r0
 8015400:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015402:	89b8      	ldrh	r0, [r7, #12]
 8015404:	693b      	ldr	r3, [r7, #16]
 8015406:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801540e:	461a      	mov	r2, r3
 8015410:	f000 fad0 	bl	80159b4 <dhcp_option_short>
 8015414:	4603      	mov	r3, r0
 8015416:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015418:	89b8      	ldrh	r0, [r7, #12]
 801541a:	693b      	ldr	r3, [r7, #16]
 801541c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015420:	2304      	movs	r3, #4
 8015422:	2237      	movs	r2, #55	; 0x37
 8015424:	f000 fa6c 	bl	8015900 <dhcp_option>
 8015428:	4603      	mov	r3, r0
 801542a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801542c:	2300      	movs	r3, #0
 801542e:	77bb      	strb	r3, [r7, #30]
 8015430:	e00e      	b.n	8015450 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015432:	89b8      	ldrh	r0, [r7, #12]
 8015434:	693b      	ldr	r3, [r7, #16]
 8015436:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801543a:	7fbb      	ldrb	r3, [r7, #30]
 801543c:	4a2a      	ldr	r2, [pc, #168]	; (80154e8 <dhcp_renew+0x12c>)
 801543e:	5cd3      	ldrb	r3, [r2, r3]
 8015440:	461a      	mov	r2, r3
 8015442:	f000 fa91 	bl	8015968 <dhcp_option_byte>
 8015446:	4603      	mov	r3, r0
 8015448:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801544a:	7fbb      	ldrb	r3, [r7, #30]
 801544c:	3301      	adds	r3, #1
 801544e:	77bb      	strb	r3, [r7, #30]
 8015450:	7fbb      	ldrb	r3, [r7, #30]
 8015452:	2b03      	cmp	r3, #3
 8015454:	d9ed      	bls.n	8015432 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015456:	89b8      	ldrh	r0, [r7, #12]
 8015458:	693b      	ldr	r3, [r7, #16]
 801545a:	33f0      	adds	r3, #240	; 0xf0
 801545c:	697a      	ldr	r2, [r7, #20]
 801545e:	4619      	mov	r1, r3
 8015460:	f000 ffc4 	bl	80163ec <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015464:	4b21      	ldr	r3, [pc, #132]	; (80154ec <dhcp_renew+0x130>)
 8015466:	6818      	ldr	r0, [r3, #0]
 8015468:	69bb      	ldr	r3, [r7, #24]
 801546a:	f103 0218 	add.w	r2, r3, #24
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	9300      	str	r3, [sp, #0]
 8015472:	2343      	movs	r3, #67	; 0x43
 8015474:	6979      	ldr	r1, [r7, #20]
 8015476:	f7fe fe13 	bl	80140a0 <udp_sendto_if>
 801547a:	4603      	mov	r3, r0
 801547c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801547e:	6978      	ldr	r0, [r7, #20]
 8015480:	f7f7 fd7e 	bl	800cf80 <pbuf_free>
 8015484:	e001      	b.n	801548a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015486:	23ff      	movs	r3, #255	; 0xff
 8015488:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801548a:	69bb      	ldr	r3, [r7, #24]
 801548c:	799b      	ldrb	r3, [r3, #6]
 801548e:	2bff      	cmp	r3, #255	; 0xff
 8015490:	d005      	beq.n	801549e <dhcp_renew+0xe2>
    dhcp->tries++;
 8015492:	69bb      	ldr	r3, [r7, #24]
 8015494:	799b      	ldrb	r3, [r3, #6]
 8015496:	3301      	adds	r3, #1
 8015498:	b2da      	uxtb	r2, r3
 801549a:	69bb      	ldr	r3, [r7, #24]
 801549c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801549e:	69bb      	ldr	r3, [r7, #24]
 80154a0:	799b      	ldrb	r3, [r3, #6]
 80154a2:	2b09      	cmp	r3, #9
 80154a4:	d80a      	bhi.n	80154bc <dhcp_renew+0x100>
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	799b      	ldrb	r3, [r3, #6]
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	461a      	mov	r2, r3
 80154ae:	0152      	lsls	r2, r2, #5
 80154b0:	1ad2      	subs	r2, r2, r3
 80154b2:	0092      	lsls	r2, r2, #2
 80154b4:	4413      	add	r3, r2
 80154b6:	011b      	lsls	r3, r3, #4
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	e001      	b.n	80154c0 <dhcp_renew+0x104>
 80154bc:	f644 6320 	movw	r3, #20000	; 0x4e20
 80154c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154c2:	89fb      	ldrh	r3, [r7, #14]
 80154c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80154c8:	4a09      	ldr	r2, [pc, #36]	; (80154f0 <dhcp_renew+0x134>)
 80154ca:	fb82 1203 	smull	r1, r2, r2, r3
 80154ce:	1152      	asrs	r2, r2, #5
 80154d0:	17db      	asrs	r3, r3, #31
 80154d2:	1ad3      	subs	r3, r2, r3
 80154d4:	b29a      	uxth	r2, r3
 80154d6:	69bb      	ldr	r3, [r7, #24]
 80154d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3720      	adds	r7, #32
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	2000001c 	.word	0x2000001c
 80154ec:	200214dc 	.word	0x200214dc
 80154f0:	10624dd3 	.word	0x10624dd3

080154f4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b08a      	sub	sp, #40	; 0x28
 80154f8:	af02      	add	r7, sp, #8
 80154fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015500:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015502:	2104      	movs	r1, #4
 8015504:	69b8      	ldr	r0, [r7, #24]
 8015506:	f000 f9e1 	bl	80158cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801550a:	f107 030c 	add.w	r3, r7, #12
 801550e:	2203      	movs	r2, #3
 8015510:	69b9      	ldr	r1, [r7, #24]
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f000 fe94 	bl	8016240 <dhcp_create_msg>
 8015518:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d04c      	beq.n	80155ba <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015526:	89b8      	ldrh	r0, [r7, #12]
 8015528:	693b      	ldr	r3, [r7, #16]
 801552a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801552e:	2302      	movs	r3, #2
 8015530:	2239      	movs	r2, #57	; 0x39
 8015532:	f000 f9e5 	bl	8015900 <dhcp_option>
 8015536:	4603      	mov	r3, r0
 8015538:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801553a:	89b8      	ldrh	r0, [r7, #12]
 801553c:	693b      	ldr	r3, [r7, #16]
 801553e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015546:	461a      	mov	r2, r3
 8015548:	f000 fa34 	bl	80159b4 <dhcp_option_short>
 801554c:	4603      	mov	r3, r0
 801554e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015550:	89b8      	ldrh	r0, [r7, #12]
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015558:	2304      	movs	r3, #4
 801555a:	2237      	movs	r2, #55	; 0x37
 801555c:	f000 f9d0 	bl	8015900 <dhcp_option>
 8015560:	4603      	mov	r3, r0
 8015562:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015564:	2300      	movs	r3, #0
 8015566:	77bb      	strb	r3, [r7, #30]
 8015568:	e00e      	b.n	8015588 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801556a:	89b8      	ldrh	r0, [r7, #12]
 801556c:	693b      	ldr	r3, [r7, #16]
 801556e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015572:	7fbb      	ldrb	r3, [r7, #30]
 8015574:	4a29      	ldr	r2, [pc, #164]	; (801561c <dhcp_rebind+0x128>)
 8015576:	5cd3      	ldrb	r3, [r2, r3]
 8015578:	461a      	mov	r2, r3
 801557a:	f000 f9f5 	bl	8015968 <dhcp_option_byte>
 801557e:	4603      	mov	r3, r0
 8015580:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015582:	7fbb      	ldrb	r3, [r7, #30]
 8015584:	3301      	adds	r3, #1
 8015586:	77bb      	strb	r3, [r7, #30]
 8015588:	7fbb      	ldrb	r3, [r7, #30]
 801558a:	2b03      	cmp	r3, #3
 801558c:	d9ed      	bls.n	801556a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801558e:	89b8      	ldrh	r0, [r7, #12]
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	33f0      	adds	r3, #240	; 0xf0
 8015594:	697a      	ldr	r2, [r7, #20]
 8015596:	4619      	mov	r1, r3
 8015598:	f000 ff28 	bl	80163ec <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801559c:	4b20      	ldr	r3, [pc, #128]	; (8015620 <dhcp_rebind+0x12c>)
 801559e:	6818      	ldr	r0, [r3, #0]
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	9300      	str	r3, [sp, #0]
 80155a4:	2343      	movs	r3, #67	; 0x43
 80155a6:	4a1f      	ldr	r2, [pc, #124]	; (8015624 <dhcp_rebind+0x130>)
 80155a8:	6979      	ldr	r1, [r7, #20]
 80155aa:	f7fe fd79 	bl	80140a0 <udp_sendto_if>
 80155ae:	4603      	mov	r3, r0
 80155b0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80155b2:	6978      	ldr	r0, [r7, #20]
 80155b4:	f7f7 fce4 	bl	800cf80 <pbuf_free>
 80155b8:	e001      	b.n	80155be <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80155ba:	23ff      	movs	r3, #255	; 0xff
 80155bc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	799b      	ldrb	r3, [r3, #6]
 80155c2:	2bff      	cmp	r3, #255	; 0xff
 80155c4:	d005      	beq.n	80155d2 <dhcp_rebind+0xde>
    dhcp->tries++;
 80155c6:	69bb      	ldr	r3, [r7, #24]
 80155c8:	799b      	ldrb	r3, [r3, #6]
 80155ca:	3301      	adds	r3, #1
 80155cc:	b2da      	uxtb	r2, r3
 80155ce:	69bb      	ldr	r3, [r7, #24]
 80155d0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80155d2:	69bb      	ldr	r3, [r7, #24]
 80155d4:	799b      	ldrb	r3, [r3, #6]
 80155d6:	2b09      	cmp	r3, #9
 80155d8:	d80a      	bhi.n	80155f0 <dhcp_rebind+0xfc>
 80155da:	69bb      	ldr	r3, [r7, #24]
 80155dc:	799b      	ldrb	r3, [r3, #6]
 80155de:	b29b      	uxth	r3, r3
 80155e0:	461a      	mov	r2, r3
 80155e2:	0152      	lsls	r2, r2, #5
 80155e4:	1ad2      	subs	r2, r2, r3
 80155e6:	0092      	lsls	r2, r2, #2
 80155e8:	4413      	add	r3, r2
 80155ea:	00db      	lsls	r3, r3, #3
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	e001      	b.n	80155f4 <dhcp_rebind+0x100>
 80155f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80155f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80155f6:	89fb      	ldrh	r3, [r7, #14]
 80155f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80155fc:	4a0a      	ldr	r2, [pc, #40]	; (8015628 <dhcp_rebind+0x134>)
 80155fe:	fb82 1203 	smull	r1, r2, r2, r3
 8015602:	1152      	asrs	r2, r2, #5
 8015604:	17db      	asrs	r3, r3, #31
 8015606:	1ad3      	subs	r3, r2, r3
 8015608:	b29a      	uxth	r2, r3
 801560a:	69bb      	ldr	r3, [r7, #24]
 801560c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801560e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015612:	4618      	mov	r0, r3
 8015614:	3720      	adds	r7, #32
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}
 801561a:	bf00      	nop
 801561c:	2000001c 	.word	0x2000001c
 8015620:	200214dc 	.word	0x200214dc
 8015624:	08021b94 	.word	0x08021b94
 8015628:	10624dd3 	.word	0x10624dd3

0801562c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801562c:	b5b0      	push	{r4, r5, r7, lr}
 801562e:	b08a      	sub	sp, #40	; 0x28
 8015630:	af02      	add	r7, sp, #8
 8015632:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015638:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801563a:	2103      	movs	r1, #3
 801563c:	69b8      	ldr	r0, [r7, #24]
 801563e:	f000 f945 	bl	80158cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015642:	f107 030c 	add.w	r3, r7, #12
 8015646:	2203      	movs	r2, #3
 8015648:	69b9      	ldr	r1, [r7, #24]
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f000 fdf8 	bl	8016240 <dhcp_create_msg>
 8015650:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015652:	697b      	ldr	r3, [r7, #20]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d066      	beq.n	8015726 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015658:	697b      	ldr	r3, [r7, #20]
 801565a:	685b      	ldr	r3, [r3, #4]
 801565c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801565e:	89b8      	ldrh	r0, [r7, #12]
 8015660:	693b      	ldr	r3, [r7, #16]
 8015662:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015666:	2302      	movs	r3, #2
 8015668:	2239      	movs	r2, #57	; 0x39
 801566a:	f000 f949 	bl	8015900 <dhcp_option>
 801566e:	4603      	mov	r3, r0
 8015670:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015672:	89b8      	ldrh	r0, [r7, #12]
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	33f0      	adds	r3, #240	; 0xf0
 8015678:	f44f 7210 	mov.w	r2, #576	; 0x240
 801567c:	4619      	mov	r1, r3
 801567e:	f000 f999 	bl	80159b4 <dhcp_option_short>
 8015682:	4603      	mov	r3, r0
 8015684:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015686:	89b8      	ldrh	r0, [r7, #12]
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801568e:	2304      	movs	r3, #4
 8015690:	2232      	movs	r2, #50	; 0x32
 8015692:	f000 f935 	bl	8015900 <dhcp_option>
 8015696:	4603      	mov	r3, r0
 8015698:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801569a:	89bc      	ldrh	r4, [r7, #12]
 801569c:	693b      	ldr	r3, [r7, #16]
 801569e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80156a2:	69bb      	ldr	r3, [r7, #24]
 80156a4:	69db      	ldr	r3, [r3, #28]
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7f5 f8f7 	bl	800a89a <lwip_htonl>
 80156ac:	4603      	mov	r3, r0
 80156ae:	461a      	mov	r2, r3
 80156b0:	4629      	mov	r1, r5
 80156b2:	4620      	mov	r0, r4
 80156b4:	f000 f9b0 	bl	8015a18 <dhcp_option_long>
 80156b8:	4603      	mov	r3, r0
 80156ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80156bc:	89b8      	ldrh	r0, [r7, #12]
 80156be:	693b      	ldr	r3, [r7, #16]
 80156c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156c4:	2304      	movs	r3, #4
 80156c6:	2237      	movs	r2, #55	; 0x37
 80156c8:	f000 f91a 	bl	8015900 <dhcp_option>
 80156cc:	4603      	mov	r3, r0
 80156ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80156d0:	2300      	movs	r3, #0
 80156d2:	77bb      	strb	r3, [r7, #30]
 80156d4:	e00e      	b.n	80156f4 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80156d6:	89b8      	ldrh	r0, [r7, #12]
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156de:	7fbb      	ldrb	r3, [r7, #30]
 80156e0:	4a29      	ldr	r2, [pc, #164]	; (8015788 <dhcp_reboot+0x15c>)
 80156e2:	5cd3      	ldrb	r3, [r2, r3]
 80156e4:	461a      	mov	r2, r3
 80156e6:	f000 f93f 	bl	8015968 <dhcp_option_byte>
 80156ea:	4603      	mov	r3, r0
 80156ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80156ee:	7fbb      	ldrb	r3, [r7, #30]
 80156f0:	3301      	adds	r3, #1
 80156f2:	77bb      	strb	r3, [r7, #30]
 80156f4:	7fbb      	ldrb	r3, [r7, #30]
 80156f6:	2b03      	cmp	r3, #3
 80156f8:	d9ed      	bls.n	80156d6 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80156fa:	89b8      	ldrh	r0, [r7, #12]
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	33f0      	adds	r3, #240	; 0xf0
 8015700:	697a      	ldr	r2, [r7, #20]
 8015702:	4619      	mov	r1, r3
 8015704:	f000 fe72 	bl	80163ec <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015708:	4b20      	ldr	r3, [pc, #128]	; (801578c <dhcp_reboot+0x160>)
 801570a:	6818      	ldr	r0, [r3, #0]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	9300      	str	r3, [sp, #0]
 8015710:	2343      	movs	r3, #67	; 0x43
 8015712:	4a1f      	ldr	r2, [pc, #124]	; (8015790 <dhcp_reboot+0x164>)
 8015714:	6979      	ldr	r1, [r7, #20]
 8015716:	f7fe fcc3 	bl	80140a0 <udp_sendto_if>
 801571a:	4603      	mov	r3, r0
 801571c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801571e:	6978      	ldr	r0, [r7, #20]
 8015720:	f7f7 fc2e 	bl	800cf80 <pbuf_free>
 8015724:	e001      	b.n	801572a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015726:	23ff      	movs	r3, #255	; 0xff
 8015728:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801572a:	69bb      	ldr	r3, [r7, #24]
 801572c:	799b      	ldrb	r3, [r3, #6]
 801572e:	2bff      	cmp	r3, #255	; 0xff
 8015730:	d005      	beq.n	801573e <dhcp_reboot+0x112>
    dhcp->tries++;
 8015732:	69bb      	ldr	r3, [r7, #24]
 8015734:	799b      	ldrb	r3, [r3, #6]
 8015736:	3301      	adds	r3, #1
 8015738:	b2da      	uxtb	r2, r3
 801573a:	69bb      	ldr	r3, [r7, #24]
 801573c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	799b      	ldrb	r3, [r3, #6]
 8015742:	2b09      	cmp	r3, #9
 8015744:	d80a      	bhi.n	801575c <dhcp_reboot+0x130>
 8015746:	69bb      	ldr	r3, [r7, #24]
 8015748:	799b      	ldrb	r3, [r3, #6]
 801574a:	b29b      	uxth	r3, r3
 801574c:	461a      	mov	r2, r3
 801574e:	0152      	lsls	r2, r2, #5
 8015750:	1ad2      	subs	r2, r2, r3
 8015752:	0092      	lsls	r2, r2, #2
 8015754:	4413      	add	r3, r2
 8015756:	00db      	lsls	r3, r3, #3
 8015758:	b29b      	uxth	r3, r3
 801575a:	e001      	b.n	8015760 <dhcp_reboot+0x134>
 801575c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015760:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015762:	89fb      	ldrh	r3, [r7, #14]
 8015764:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015768:	4a0a      	ldr	r2, [pc, #40]	; (8015794 <dhcp_reboot+0x168>)
 801576a:	fb82 1203 	smull	r1, r2, r2, r3
 801576e:	1152      	asrs	r2, r2, #5
 8015770:	17db      	asrs	r3, r3, #31
 8015772:	1ad3      	subs	r3, r2, r3
 8015774:	b29a      	uxth	r2, r3
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801577a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3720      	adds	r7, #32
 8015782:	46bd      	mov	sp, r7
 8015784:	bdb0      	pop	{r4, r5, r7, pc}
 8015786:	bf00      	nop
 8015788:	2000001c 	.word	0x2000001c
 801578c:	200214dc 	.word	0x200214dc
 8015790:	08021b94 	.word	0x08021b94
 8015794:	10624dd3 	.word	0x10624dd3

08015798 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015798:	b5b0      	push	{r4, r5, r7, lr}
 801579a:	b08a      	sub	sp, #40	; 0x28
 801579c:	af02      	add	r7, sp, #8
 801579e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80157a6:	69fb      	ldr	r3, [r7, #28]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	f000 8084 	beq.w	80158b6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80157ae:	69fb      	ldr	r3, [r7, #28]
 80157b0:	795b      	ldrb	r3, [r3, #5]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	f000 8081 	beq.w	80158ba <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	699b      	ldr	r3, [r3, #24]
 80157bc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80157be:	69fb      	ldr	r3, [r7, #28]
 80157c0:	2200      	movs	r2, #0
 80157c2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80157c4:	69fb      	ldr	r3, [r7, #28]
 80157c6:	2200      	movs	r2, #0
 80157c8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	2200      	movs	r2, #0
 80157ce:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	2200      	movs	r2, #0
 80157d4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80157d6:	69fb      	ldr	r3, [r7, #28]
 80157d8:	2200      	movs	r2, #0
 80157da:	631a      	str	r2, [r3, #48]	; 0x30
 80157dc:	69fb      	ldr	r3, [r7, #28]
 80157de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80157e4:	69fb      	ldr	r3, [r7, #28]
 80157e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157e8:	69fb      	ldr	r3, [r7, #28]
 80157ea:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	2200      	movs	r2, #0
 80157f0:	829a      	strh	r2, [r3, #20]
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	8a9a      	ldrh	r2, [r3, #20]
 80157f6:	69fb      	ldr	r3, [r7, #28]
 80157f8:	825a      	strh	r2, [r3, #18]
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	8a5a      	ldrh	r2, [r3, #18]
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	821a      	strh	r2, [r3, #16]
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	8a1a      	ldrh	r2, [r3, #16]
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f000 fe1c 	bl	8016448 <dhcp_supplied_address>
 8015810:	4603      	mov	r3, r0
 8015812:	2b00      	cmp	r3, #0
 8015814:	d03b      	beq.n	801588e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015816:	f107 030e 	add.w	r3, r7, #14
 801581a:	2207      	movs	r2, #7
 801581c:	69f9      	ldr	r1, [r7, #28]
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f000 fd0e 	bl	8016240 <dhcp_create_msg>
 8015824:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015826:	69bb      	ldr	r3, [r7, #24]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d030      	beq.n	801588e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801582c:	69bb      	ldr	r3, [r7, #24]
 801582e:	685b      	ldr	r3, [r3, #4]
 8015830:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015832:	89f8      	ldrh	r0, [r7, #14]
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801583a:	2304      	movs	r3, #4
 801583c:	2236      	movs	r2, #54	; 0x36
 801583e:	f000 f85f 	bl	8015900 <dhcp_option>
 8015842:	4603      	mov	r3, r0
 8015844:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015846:	89fc      	ldrh	r4, [r7, #14]
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801584e:	693b      	ldr	r3, [r7, #16]
 8015850:	4618      	mov	r0, r3
 8015852:	f7f5 f822 	bl	800a89a <lwip_htonl>
 8015856:	4603      	mov	r3, r0
 8015858:	461a      	mov	r2, r3
 801585a:	4629      	mov	r1, r5
 801585c:	4620      	mov	r0, r4
 801585e:	f000 f8db 	bl	8015a18 <dhcp_option_long>
 8015862:	4603      	mov	r3, r0
 8015864:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015866:	89f8      	ldrh	r0, [r7, #14]
 8015868:	697b      	ldr	r3, [r7, #20]
 801586a:	33f0      	adds	r3, #240	; 0xf0
 801586c:	69ba      	ldr	r2, [r7, #24]
 801586e:	4619      	mov	r1, r3
 8015870:	f000 fdbc 	bl	80163ec <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015874:	4b13      	ldr	r3, [pc, #76]	; (80158c4 <dhcp_release_and_stop+0x12c>)
 8015876:	6818      	ldr	r0, [r3, #0]
 8015878:	f107 0210 	add.w	r2, r7, #16
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	9300      	str	r3, [sp, #0]
 8015880:	2343      	movs	r3, #67	; 0x43
 8015882:	69b9      	ldr	r1, [r7, #24]
 8015884:	f7fe fc0c 	bl	80140a0 <udp_sendto_if>
      pbuf_free(p_out);
 8015888:	69b8      	ldr	r0, [r7, #24]
 801588a:	f7f7 fb79 	bl	800cf80 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801588e:	4b0e      	ldr	r3, [pc, #56]	; (80158c8 <dhcp_release_and_stop+0x130>)
 8015890:	4a0d      	ldr	r2, [pc, #52]	; (80158c8 <dhcp_release_and_stop+0x130>)
 8015892:	490d      	ldr	r1, [pc, #52]	; (80158c8 <dhcp_release_and_stop+0x130>)
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f7f6 fe69 	bl	800c56c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801589a:	2100      	movs	r1, #0
 801589c:	69f8      	ldr	r0, [r7, #28]
 801589e:	f000 f815 	bl	80158cc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	791b      	ldrb	r3, [r3, #4]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d008      	beq.n	80158bc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80158aa:	f7fe ff51 	bl	8014750 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80158ae:	69fb      	ldr	r3, [r7, #28]
 80158b0:	2200      	movs	r2, #0
 80158b2:	711a      	strb	r2, [r3, #4]
 80158b4:	e002      	b.n	80158bc <dhcp_release_and_stop+0x124>
    return;
 80158b6:	bf00      	nop
 80158b8:	e000      	b.n	80158bc <dhcp_release_and_stop+0x124>
    return;
 80158ba:	bf00      	nop
  }
}
 80158bc:	3720      	adds	r7, #32
 80158be:	46bd      	mov	sp, r7
 80158c0:	bdb0      	pop	{r4, r5, r7, pc}
 80158c2:	bf00      	nop
 80158c4:	200214dc 	.word	0x200214dc
 80158c8:	08021b90 	.word	0x08021b90

080158cc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80158cc:	b480      	push	{r7}
 80158ce:	b083      	sub	sp, #12
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	460b      	mov	r3, r1
 80158d6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	795b      	ldrb	r3, [r3, #5]
 80158dc:	78fa      	ldrb	r2, [r7, #3]
 80158de:	429a      	cmp	r2, r3
 80158e0:	d008      	beq.n	80158f4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	78fa      	ldrb	r2, [r7, #3]
 80158e6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	2200      	movs	r2, #0
 80158ec:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	2200      	movs	r2, #0
 80158f2:	811a      	strh	r2, [r3, #8]
  }
}
 80158f4:	bf00      	nop
 80158f6:	370c      	adds	r7, #12
 80158f8:	46bd      	mov	sp, r7
 80158fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fe:	4770      	bx	lr

08015900 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b082      	sub	sp, #8
 8015904:	af00      	add	r7, sp, #0
 8015906:	6039      	str	r1, [r7, #0]
 8015908:	4611      	mov	r1, r2
 801590a:	461a      	mov	r2, r3
 801590c:	4603      	mov	r3, r0
 801590e:	80fb      	strh	r3, [r7, #6]
 8015910:	460b      	mov	r3, r1
 8015912:	717b      	strb	r3, [r7, #5]
 8015914:	4613      	mov	r3, r2
 8015916:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015918:	88fa      	ldrh	r2, [r7, #6]
 801591a:	793b      	ldrb	r3, [r7, #4]
 801591c:	4413      	add	r3, r2
 801591e:	3302      	adds	r3, #2
 8015920:	2b44      	cmp	r3, #68	; 0x44
 8015922:	d906      	bls.n	8015932 <dhcp_option+0x32>
 8015924:	4b0d      	ldr	r3, [pc, #52]	; (801595c <dhcp_option+0x5c>)
 8015926:	f240 529a 	movw	r2, #1434	; 0x59a
 801592a:	490d      	ldr	r1, [pc, #52]	; (8015960 <dhcp_option+0x60>)
 801592c:	480d      	ldr	r0, [pc, #52]	; (8015964 <dhcp_option+0x64>)
 801592e:	f004 faf5 	bl	8019f1c <iprintf>
  options[options_out_len++] = option_type;
 8015932:	88fb      	ldrh	r3, [r7, #6]
 8015934:	1c5a      	adds	r2, r3, #1
 8015936:	80fa      	strh	r2, [r7, #6]
 8015938:	461a      	mov	r2, r3
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	4413      	add	r3, r2
 801593e:	797a      	ldrb	r2, [r7, #5]
 8015940:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015942:	88fb      	ldrh	r3, [r7, #6]
 8015944:	1c5a      	adds	r2, r3, #1
 8015946:	80fa      	strh	r2, [r7, #6]
 8015948:	461a      	mov	r2, r3
 801594a:	683b      	ldr	r3, [r7, #0]
 801594c:	4413      	add	r3, r2
 801594e:	793a      	ldrb	r2, [r7, #4]
 8015950:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015952:	88fb      	ldrh	r3, [r7, #6]
}
 8015954:	4618      	mov	r0, r3
 8015956:	3708      	adds	r7, #8
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}
 801595c:	08020f4c 	.word	0x08020f4c
 8015960:	080210e0 	.word	0x080210e0
 8015964:	08020fac 	.word	0x08020fac

08015968 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	4603      	mov	r3, r0
 8015970:	6039      	str	r1, [r7, #0]
 8015972:	80fb      	strh	r3, [r7, #6]
 8015974:	4613      	mov	r3, r2
 8015976:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015978:	88fb      	ldrh	r3, [r7, #6]
 801597a:	2b43      	cmp	r3, #67	; 0x43
 801597c:	d906      	bls.n	801598c <dhcp_option_byte+0x24>
 801597e:	4b0a      	ldr	r3, [pc, #40]	; (80159a8 <dhcp_option_byte+0x40>)
 8015980:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015984:	4909      	ldr	r1, [pc, #36]	; (80159ac <dhcp_option_byte+0x44>)
 8015986:	480a      	ldr	r0, [pc, #40]	; (80159b0 <dhcp_option_byte+0x48>)
 8015988:	f004 fac8 	bl	8019f1c <iprintf>
  options[options_out_len++] = value;
 801598c:	88fb      	ldrh	r3, [r7, #6]
 801598e:	1c5a      	adds	r2, r3, #1
 8015990:	80fa      	strh	r2, [r7, #6]
 8015992:	461a      	mov	r2, r3
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	4413      	add	r3, r2
 8015998:	797a      	ldrb	r2, [r7, #5]
 801599a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801599c:	88fb      	ldrh	r3, [r7, #6]
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3708      	adds	r7, #8
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	08020f4c 	.word	0x08020f4c
 80159ac:	08021124 	.word	0x08021124
 80159b0:	08020fac 	.word	0x08020fac

080159b4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b082      	sub	sp, #8
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	4603      	mov	r3, r0
 80159bc:	6039      	str	r1, [r7, #0]
 80159be:	80fb      	strh	r3, [r7, #6]
 80159c0:	4613      	mov	r3, r2
 80159c2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80159c4:	88fb      	ldrh	r3, [r7, #6]
 80159c6:	3302      	adds	r3, #2
 80159c8:	2b44      	cmp	r3, #68	; 0x44
 80159ca:	d906      	bls.n	80159da <dhcp_option_short+0x26>
 80159cc:	4b0f      	ldr	r3, [pc, #60]	; (8015a0c <dhcp_option_short+0x58>)
 80159ce:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80159d2:	490f      	ldr	r1, [pc, #60]	; (8015a10 <dhcp_option_short+0x5c>)
 80159d4:	480f      	ldr	r0, [pc, #60]	; (8015a14 <dhcp_option_short+0x60>)
 80159d6:	f004 faa1 	bl	8019f1c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80159da:	88bb      	ldrh	r3, [r7, #4]
 80159dc:	0a1b      	lsrs	r3, r3, #8
 80159de:	b29a      	uxth	r2, r3
 80159e0:	88fb      	ldrh	r3, [r7, #6]
 80159e2:	1c59      	adds	r1, r3, #1
 80159e4:	80f9      	strh	r1, [r7, #6]
 80159e6:	4619      	mov	r1, r3
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	440b      	add	r3, r1
 80159ec:	b2d2      	uxtb	r2, r2
 80159ee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80159f0:	88fb      	ldrh	r3, [r7, #6]
 80159f2:	1c5a      	adds	r2, r3, #1
 80159f4:	80fa      	strh	r2, [r7, #6]
 80159f6:	461a      	mov	r2, r3
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	4413      	add	r3, r2
 80159fc:	88ba      	ldrh	r2, [r7, #4]
 80159fe:	b2d2      	uxtb	r2, r2
 8015a00:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015a02:	88fb      	ldrh	r3, [r7, #6]
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3708      	adds	r7, #8
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	08020f4c 	.word	0x08020f4c
 8015a10:	0802115c 	.word	0x0802115c
 8015a14:	08020fac 	.word	0x08020fac

08015a18 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	4603      	mov	r3, r0
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	607a      	str	r2, [r7, #4]
 8015a24:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015a26:	89fb      	ldrh	r3, [r7, #14]
 8015a28:	3304      	adds	r3, #4
 8015a2a:	2b44      	cmp	r3, #68	; 0x44
 8015a2c:	d906      	bls.n	8015a3c <dhcp_option_long+0x24>
 8015a2e:	4b19      	ldr	r3, [pc, #100]	; (8015a94 <dhcp_option_long+0x7c>)
 8015a30:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015a34:	4918      	ldr	r1, [pc, #96]	; (8015a98 <dhcp_option_long+0x80>)
 8015a36:	4819      	ldr	r0, [pc, #100]	; (8015a9c <dhcp_option_long+0x84>)
 8015a38:	f004 fa70 	bl	8019f1c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	0e1a      	lsrs	r2, r3, #24
 8015a40:	89fb      	ldrh	r3, [r7, #14]
 8015a42:	1c59      	adds	r1, r3, #1
 8015a44:	81f9      	strh	r1, [r7, #14]
 8015a46:	4619      	mov	r1, r3
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	440b      	add	r3, r1
 8015a4c:	b2d2      	uxtb	r2, r2
 8015a4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	0c1a      	lsrs	r2, r3, #16
 8015a54:	89fb      	ldrh	r3, [r7, #14]
 8015a56:	1c59      	adds	r1, r3, #1
 8015a58:	81f9      	strh	r1, [r7, #14]
 8015a5a:	4619      	mov	r1, r3
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	440b      	add	r3, r1
 8015a60:	b2d2      	uxtb	r2, r2
 8015a62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	0a1a      	lsrs	r2, r3, #8
 8015a68:	89fb      	ldrh	r3, [r7, #14]
 8015a6a:	1c59      	adds	r1, r3, #1
 8015a6c:	81f9      	strh	r1, [r7, #14]
 8015a6e:	4619      	mov	r1, r3
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	440b      	add	r3, r1
 8015a74:	b2d2      	uxtb	r2, r2
 8015a76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015a78:	89fb      	ldrh	r3, [r7, #14]
 8015a7a:	1c5a      	adds	r2, r3, #1
 8015a7c:	81fa      	strh	r2, [r7, #14]
 8015a7e:	461a      	mov	r2, r3
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	4413      	add	r3, r2
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	b2d2      	uxtb	r2, r2
 8015a88:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015a8a:	89fb      	ldrh	r3, [r7, #14]
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3710      	adds	r7, #16
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	08020f4c 	.word	0x08020f4c
 8015a98:	08021198 	.word	0x08021198
 8015a9c:	08020fac 	.word	0x08020fac

08015aa0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b090      	sub	sp, #64	; 0x40
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
 8015aa8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015aaa:	2300      	movs	r3, #0
 8015aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015ab2:	220a      	movs	r2, #10
 8015ab4:	2100      	movs	r1, #0
 8015ab6:	48ba      	ldr	r0, [pc, #744]	; (8015da0 <dhcp_parse_reply+0x300>)
 8015ab8:	f003 fbe9 	bl	801928e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	895b      	ldrh	r3, [r3, #10]
 8015ac0:	2b2b      	cmp	r3, #43	; 0x2b
 8015ac2:	d802      	bhi.n	8015aca <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015ac4:	f06f 0301 	mvn.w	r3, #1
 8015ac8:	e2e9      	b.n	801609e <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	685b      	ldr	r3, [r3, #4]
 8015ace:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015ad0:	23f0      	movs	r3, #240	; 0xf0
 8015ad2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	891b      	ldrh	r3, [r3, #8]
 8015ad8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015ade:	e00c      	b.n	8015afa <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ae2:	895b      	ldrh	r3, [r3, #10]
 8015ae4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015ae6:	1ad3      	subs	r3, r2, r3
 8015ae8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aec:	895b      	ldrh	r3, [r3, #10]
 8015aee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015af0:	1ad3      	subs	r3, r2, r3
 8015af2:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d004      	beq.n	8015b0a <dhcp_parse_reply+0x6a>
 8015b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b02:	895b      	ldrh	r3, [r3, #10]
 8015b04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d2ea      	bcs.n	8015ae0 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d102      	bne.n	8015b16 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015b10:	f06f 0301 	mvn.w	r3, #1
 8015b14:	e2c3      	b.n	801609e <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 8015b16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015b18:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015b1a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015b1c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b20:	685b      	ldr	r3, [r3, #4]
 8015b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015b24:	e267      	b.n	8015ff6 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8015b26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b2a:	4413      	add	r3, r2
 8015b2c:	781b      	ldrb	r3, [r3, #0]
 8015b2e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015b30:	2300      	movs	r3, #0
 8015b32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015b36:	f04f 33ff 	mov.w	r3, #4294967295
 8015b3a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015b3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b3e:	3302      	adds	r3, #2
 8015b40:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015b42:	8bfa      	ldrh	r2, [r7, #30]
 8015b44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b46:	429a      	cmp	r2, r3
 8015b48:	d202      	bcs.n	8015b50 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015b4a:	f06f 0301 	mvn.w	r3, #1
 8015b4e:	e2a6      	b.n	801609e <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015b50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b52:	3301      	adds	r3, #1
 8015b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b56:	8952      	ldrh	r2, [r2, #10]
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	da07      	bge.n	8015b6c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015b5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015b5e:	3301      	adds	r3, #1
 8015b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b62:	4413      	add	r3, r2
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b6a:	e00b      	b.n	8015b84 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d004      	beq.n	8015b7e <dhcp_parse_reply+0xde>
 8015b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b76:	681b      	ldr	r3, [r3, #0]
 8015b78:	685b      	ldr	r3, [r3, #4]
 8015b7a:	781b      	ldrb	r3, [r3, #0]
 8015b7c:	e000      	b.n	8015b80 <dhcp_parse_reply+0xe0>
 8015b7e:	2300      	movs	r3, #0
 8015b80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015b8c:	7dfb      	ldrb	r3, [r7, #23]
 8015b8e:	2b3b      	cmp	r3, #59	; 0x3b
 8015b90:	f200 815a 	bhi.w	8015e48 <dhcp_parse_reply+0x3a8>
 8015b94:	a201      	add	r2, pc, #4	; (adr r2, 8015b9c <dhcp_parse_reply+0xfc>)
 8015b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b9a:	bf00      	nop
 8015b9c:	08015c8d 	.word	0x08015c8d
 8015ba0:	08015c9d 	.word	0x08015c9d
 8015ba4:	08015e49 	.word	0x08015e49
 8015ba8:	08015cbf 	.word	0x08015cbf
 8015bac:	08015e49 	.word	0x08015e49
 8015bb0:	08015e49 	.word	0x08015e49
 8015bb4:	08015ceb 	.word	0x08015ceb
 8015bb8:	08015e49 	.word	0x08015e49
 8015bbc:	08015e49 	.word	0x08015e49
 8015bc0:	08015e49 	.word	0x08015e49
 8015bc4:	08015e49 	.word	0x08015e49
 8015bc8:	08015e49 	.word	0x08015e49
 8015bcc:	08015e49 	.word	0x08015e49
 8015bd0:	08015e49 	.word	0x08015e49
 8015bd4:	08015e49 	.word	0x08015e49
 8015bd8:	08015e49 	.word	0x08015e49
 8015bdc:	08015e49 	.word	0x08015e49
 8015be0:	08015e49 	.word	0x08015e49
 8015be4:	08015e49 	.word	0x08015e49
 8015be8:	08015e49 	.word	0x08015e49
 8015bec:	08015e49 	.word	0x08015e49
 8015bf0:	08015e49 	.word	0x08015e49
 8015bf4:	08015e49 	.word	0x08015e49
 8015bf8:	08015e49 	.word	0x08015e49
 8015bfc:	08015e49 	.word	0x08015e49
 8015c00:	08015e49 	.word	0x08015e49
 8015c04:	08015e49 	.word	0x08015e49
 8015c08:	08015e49 	.word	0x08015e49
 8015c0c:	08015e49 	.word	0x08015e49
 8015c10:	08015e49 	.word	0x08015e49
 8015c14:	08015e49 	.word	0x08015e49
 8015c18:	08015e49 	.word	0x08015e49
 8015c1c:	08015e49 	.word	0x08015e49
 8015c20:	08015e49 	.word	0x08015e49
 8015c24:	08015e49 	.word	0x08015e49
 8015c28:	08015e49 	.word	0x08015e49
 8015c2c:	08015e49 	.word	0x08015e49
 8015c30:	08015e49 	.word	0x08015e49
 8015c34:	08015e49 	.word	0x08015e49
 8015c38:	08015e49 	.word	0x08015e49
 8015c3c:	08015e49 	.word	0x08015e49
 8015c40:	08015e49 	.word	0x08015e49
 8015c44:	08015e49 	.word	0x08015e49
 8015c48:	08015e49 	.word	0x08015e49
 8015c4c:	08015e49 	.word	0x08015e49
 8015c50:	08015e49 	.word	0x08015e49
 8015c54:	08015e49 	.word	0x08015e49
 8015c58:	08015e49 	.word	0x08015e49
 8015c5c:	08015e49 	.word	0x08015e49
 8015c60:	08015e49 	.word	0x08015e49
 8015c64:	08015e49 	.word	0x08015e49
 8015c68:	08015d41 	.word	0x08015d41
 8015c6c:	08015d63 	.word	0x08015d63
 8015c70:	08015dc1 	.word	0x08015dc1
 8015c74:	08015de3 	.word	0x08015de3
 8015c78:	08015e49 	.word	0x08015e49
 8015c7c:	08015e49 	.word	0x08015e49
 8015c80:	08015e49 	.word	0x08015e49
 8015c84:	08015e05 	.word	0x08015e05
 8015c88:	08015e27 	.word	0x08015e27
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015c92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015c9a:	e0d9      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ca0:	2b04      	cmp	r3, #4
 8015ca2:	d009      	beq.n	8015cb8 <dhcp_parse_reply+0x218>
 8015ca4:	4b3f      	ldr	r3, [pc, #252]	; (8015da4 <dhcp_parse_reply+0x304>)
 8015ca6:	f240 622e 	movw	r2, #1582	; 0x62e
 8015caa:	493f      	ldr	r1, [pc, #252]	; (8015da8 <dhcp_parse_reply+0x308>)
 8015cac:	483f      	ldr	r0, [pc, #252]	; (8015dac <dhcp_parse_reply+0x30c>)
 8015cae:	f004 f935 	bl	8019f1c <iprintf>
 8015cb2:	f06f 0305 	mvn.w	r3, #5
 8015cb6:	e1f2      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015cb8:	2306      	movs	r3, #6
 8015cba:	623b      	str	r3, [r7, #32]
        break;
 8015cbc:	e0c8      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015cbe:	2304      	movs	r3, #4
 8015cc0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015cc4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d209      	bcs.n	8015ce4 <dhcp_parse_reply+0x244>
 8015cd0:	4b34      	ldr	r3, [pc, #208]	; (8015da4 <dhcp_parse_reply+0x304>)
 8015cd2:	f240 6233 	movw	r2, #1587	; 0x633
 8015cd6:	4936      	ldr	r1, [pc, #216]	; (8015db0 <dhcp_parse_reply+0x310>)
 8015cd8:	4834      	ldr	r0, [pc, #208]	; (8015dac <dhcp_parse_reply+0x30c>)
 8015cda:	f004 f91f 	bl	8019f1c <iprintf>
 8015cde:	f06f 0305 	mvn.w	r3, #5
 8015ce2:	e1dc      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015ce4:	2307      	movs	r3, #7
 8015ce6:	623b      	str	r3, [r7, #32]
        break;
 8015ce8:	e0b2      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8015cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cee:	f003 0303 	and.w	r3, r3, #3
 8015cf2:	b2db      	uxtb	r3, r3
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d009      	beq.n	8015d0c <dhcp_parse_reply+0x26c>
 8015cf8:	4b2a      	ldr	r3, [pc, #168]	; (8015da4 <dhcp_parse_reply+0x304>)
 8015cfa:	f240 6239 	movw	r2, #1593	; 0x639
 8015cfe:	492d      	ldr	r1, [pc, #180]	; (8015db4 <dhcp_parse_reply+0x314>)
 8015d00:	482a      	ldr	r0, [pc, #168]	; (8015dac <dhcp_parse_reply+0x30c>)
 8015d02:	f004 f90b 	bl	8019f1c <iprintf>
 8015d06:	f06f 0305 	mvn.w	r3, #5
 8015d0a:	e1c8      	b.n	801609e <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8015d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d10:	2b08      	cmp	r3, #8
 8015d12:	bf28      	it	cs
 8015d14:	2308      	movcs	r3, #8
 8015d16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015d1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d209      	bcs.n	8015d3a <dhcp_parse_reply+0x29a>
 8015d26:	4b1f      	ldr	r3, [pc, #124]	; (8015da4 <dhcp_parse_reply+0x304>)
 8015d28:	f240 623c 	movw	r2, #1596	; 0x63c
 8015d2c:	4920      	ldr	r1, [pc, #128]	; (8015db0 <dhcp_parse_reply+0x310>)
 8015d2e:	481f      	ldr	r0, [pc, #124]	; (8015dac <dhcp_parse_reply+0x30c>)
 8015d30:	f004 f8f4 	bl	8019f1c <iprintf>
 8015d34:	f06f 0305 	mvn.w	r3, #5
 8015d38:	e1b1      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8015d3a:	2308      	movs	r3, #8
 8015d3c:	623b      	str	r3, [r7, #32]
        break;
 8015d3e:	e087      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d44:	2b04      	cmp	r3, #4
 8015d46:	d009      	beq.n	8015d5c <dhcp_parse_reply+0x2bc>
 8015d48:	4b16      	ldr	r3, [pc, #88]	; (8015da4 <dhcp_parse_reply+0x304>)
 8015d4a:	f240 6241 	movw	r2, #1601	; 0x641
 8015d4e:	4916      	ldr	r1, [pc, #88]	; (8015da8 <dhcp_parse_reply+0x308>)
 8015d50:	4816      	ldr	r0, [pc, #88]	; (8015dac <dhcp_parse_reply+0x30c>)
 8015d52:	f004 f8e3 	bl	8019f1c <iprintf>
 8015d56:	f06f 0305 	mvn.w	r3, #5
 8015d5a:	e1a0      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015d5c:	2303      	movs	r3, #3
 8015d5e:	623b      	str	r3, [r7, #32]
        break;
 8015d60:	e076      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015d62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d66:	2b01      	cmp	r3, #1
 8015d68:	d009      	beq.n	8015d7e <dhcp_parse_reply+0x2de>
 8015d6a:	4b0e      	ldr	r3, [pc, #56]	; (8015da4 <dhcp_parse_reply+0x304>)
 8015d6c:	f240 624f 	movw	r2, #1615	; 0x64f
 8015d70:	4911      	ldr	r1, [pc, #68]	; (8015db8 <dhcp_parse_reply+0x318>)
 8015d72:	480e      	ldr	r0, [pc, #56]	; (8015dac <dhcp_parse_reply+0x30c>)
 8015d74:	f004 f8d2 	bl	8019f1c <iprintf>
 8015d78:	f06f 0305 	mvn.w	r3, #5
 8015d7c:	e18f      	b.n	801609e <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015d7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015d80:	2bf0      	cmp	r3, #240	; 0xf0
 8015d82:	d009      	beq.n	8015d98 <dhcp_parse_reply+0x2f8>
 8015d84:	4b07      	ldr	r3, [pc, #28]	; (8015da4 <dhcp_parse_reply+0x304>)
 8015d86:	f240 6251 	movw	r2, #1617	; 0x651
 8015d8a:	490c      	ldr	r1, [pc, #48]	; (8015dbc <dhcp_parse_reply+0x31c>)
 8015d8c:	4807      	ldr	r0, [pc, #28]	; (8015dac <dhcp_parse_reply+0x30c>)
 8015d8e:	f004 f8c5 	bl	8019f1c <iprintf>
 8015d92:	f06f 0305 	mvn.w	r3, #5
 8015d96:	e182      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	623b      	str	r3, [r7, #32]
        break;
 8015d9c:	e058      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
 8015d9e:	bf00      	nop
 8015da0:	200280ac 	.word	0x200280ac
 8015da4:	08020f4c 	.word	0x08020f4c
 8015da8:	080211d4 	.word	0x080211d4
 8015dac:	08020fac 	.word	0x08020fac
 8015db0:	080211e0 	.word	0x080211e0
 8015db4:	080211f4 	.word	0x080211f4
 8015db8:	08021204 	.word	0x08021204
 8015dbc:	08021210 	.word	0x08021210
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dc4:	2b01      	cmp	r3, #1
 8015dc6:	d009      	beq.n	8015ddc <dhcp_parse_reply+0x33c>
 8015dc8:	4ba5      	ldr	r3, [pc, #660]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015dca:	f240 6255 	movw	r2, #1621	; 0x655
 8015dce:	49a5      	ldr	r1, [pc, #660]	; (8016064 <dhcp_parse_reply+0x5c4>)
 8015dd0:	48a5      	ldr	r0, [pc, #660]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015dd2:	f004 f8a3 	bl	8019f1c <iprintf>
 8015dd6:	f06f 0305 	mvn.w	r3, #5
 8015dda:	e160      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015ddc:	2301      	movs	r3, #1
 8015dde:	623b      	str	r3, [r7, #32]
        break;
 8015de0:	e036      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015de6:	2b04      	cmp	r3, #4
 8015de8:	d009      	beq.n	8015dfe <dhcp_parse_reply+0x35e>
 8015dea:	4b9d      	ldr	r3, [pc, #628]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015dec:	f240 6259 	movw	r2, #1625	; 0x659
 8015df0:	499e      	ldr	r1, [pc, #632]	; (801606c <dhcp_parse_reply+0x5cc>)
 8015df2:	489d      	ldr	r0, [pc, #628]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015df4:	f004 f892 	bl	8019f1c <iprintf>
 8015df8:	f06f 0305 	mvn.w	r3, #5
 8015dfc:	e14f      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015dfe:	2302      	movs	r3, #2
 8015e00:	623b      	str	r3, [r7, #32]
        break;
 8015e02:	e025      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e08:	2b04      	cmp	r3, #4
 8015e0a:	d009      	beq.n	8015e20 <dhcp_parse_reply+0x380>
 8015e0c:	4b94      	ldr	r3, [pc, #592]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015e0e:	f240 625d 	movw	r2, #1629	; 0x65d
 8015e12:	4996      	ldr	r1, [pc, #600]	; (801606c <dhcp_parse_reply+0x5cc>)
 8015e14:	4894      	ldr	r0, [pc, #592]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015e16:	f004 f881 	bl	8019f1c <iprintf>
 8015e1a:	f06f 0305 	mvn.w	r3, #5
 8015e1e:	e13e      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015e20:	2304      	movs	r3, #4
 8015e22:	623b      	str	r3, [r7, #32]
        break;
 8015e24:	e014      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e2a:	2b04      	cmp	r3, #4
 8015e2c:	d009      	beq.n	8015e42 <dhcp_parse_reply+0x3a2>
 8015e2e:	4b8c      	ldr	r3, [pc, #560]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015e30:	f240 6261 	movw	r2, #1633	; 0x661
 8015e34:	498d      	ldr	r1, [pc, #564]	; (801606c <dhcp_parse_reply+0x5cc>)
 8015e36:	488c      	ldr	r0, [pc, #560]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015e38:	f004 f870 	bl	8019f1c <iprintf>
 8015e3c:	f06f 0305 	mvn.w	r3, #5
 8015e40:	e12d      	b.n	801609e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015e42:	2305      	movs	r3, #5
 8015e44:	623b      	str	r3, [r7, #32]
        break;
 8015e46:	e003      	b.n	8015e50 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015e4e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015e50:	7dfb      	ldrb	r3, [r7, #23]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d103      	bne.n	8015e5e <dhcp_parse_reply+0x3be>
      offset++;
 8015e56:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e58:	3301      	adds	r3, #1
 8015e5a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015e5c:	e0a1      	b.n	8015fa2 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015e5e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e64:	4413      	add	r3, r2
 8015e66:	3302      	adds	r3, #2
 8015e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e6c:	db02      	blt.n	8015e74 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8015e6e:	f06f 0301 	mvn.w	r3, #1
 8015e72:	e114      	b.n	801609e <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 8015e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e78:	b29a      	uxth	r2, r3
 8015e7a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e7c:	4413      	add	r3, r2
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	3302      	adds	r3, #2
 8015e82:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	f000 808a 	beq.w	8015fa2 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8015e8e:	2300      	movs	r3, #0
 8015e90:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015e92:	6a3b      	ldr	r3, [r7, #32]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	db02      	blt.n	8015e9e <dhcp_parse_reply+0x3fe>
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	2b09      	cmp	r3, #9
 8015e9c:	dd06      	ble.n	8015eac <dhcp_parse_reply+0x40c>
 8015e9e:	4b70      	ldr	r3, [pc, #448]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015ea0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015ea4:	4972      	ldr	r1, [pc, #456]	; (8016070 <dhcp_parse_reply+0x5d0>)
 8015ea6:	4870      	ldr	r0, [pc, #448]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015ea8:	f004 f838 	bl	8019f1c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015eac:	4a71      	ldr	r2, [pc, #452]	; (8016074 <dhcp_parse_reply+0x5d4>)
 8015eae:	6a3b      	ldr	r3, [r7, #32]
 8015eb0:	4413      	add	r3, r2
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d174      	bne.n	8015fa2 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8015eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ebc:	2b04      	cmp	r3, #4
 8015ebe:	bf28      	it	cs
 8015ec0:	2304      	movcs	r3, #4
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015ec6:	8bfb      	ldrh	r3, [r7, #30]
 8015ec8:	8aba      	ldrh	r2, [r7, #20]
 8015eca:	f107 0108 	add.w	r1, r7, #8
 8015ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ed0:	f7f7 fa5c 	bl	800d38c <pbuf_copy_partial>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	461a      	mov	r2, r3
 8015ed8:	8abb      	ldrh	r3, [r7, #20]
 8015eda:	4293      	cmp	r3, r2
 8015edc:	d002      	beq.n	8015ee4 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8015ede:	f06f 0301 	mvn.w	r3, #1
 8015ee2:	e0dc      	b.n	801609e <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 8015ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ee8:	2b04      	cmp	r3, #4
 8015eea:	d933      	bls.n	8015f54 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015eec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015ef0:	f003 0303 	and.w	r3, r3, #3
 8015ef4:	b2db      	uxtb	r3, r3
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d009      	beq.n	8015f0e <dhcp_parse_reply+0x46e>
 8015efa:	4b59      	ldr	r3, [pc, #356]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015efc:	f240 6281 	movw	r2, #1665	; 0x681
 8015f00:	495d      	ldr	r1, [pc, #372]	; (8016078 <dhcp_parse_reply+0x5d8>)
 8015f02:	4859      	ldr	r0, [pc, #356]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015f04:	f004 f80a 	bl	8019f1c <iprintf>
 8015f08:	f06f 0305 	mvn.w	r3, #5
 8015f0c:	e0c7      	b.n	801609e <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 8015f0e:	4a59      	ldr	r2, [pc, #356]	; (8016074 <dhcp_parse_reply+0x5d4>)
 8015f10:	6a3b      	ldr	r3, [r7, #32]
 8015f12:	4413      	add	r3, r2
 8015f14:	2201      	movs	r2, #1
 8015f16:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7f4 fcbd 	bl	800a89a <lwip_htonl>
 8015f20:	4601      	mov	r1, r0
 8015f22:	4a56      	ldr	r2, [pc, #344]	; (801607c <dhcp_parse_reply+0x5dc>)
 8015f24:	6a3b      	ldr	r3, [r7, #32]
 8015f26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015f2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f2e:	3b04      	subs	r3, #4
 8015f30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015f34:	8bfb      	ldrh	r3, [r7, #30]
 8015f36:	3304      	adds	r3, #4
 8015f38:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015f3a:	8a7a      	ldrh	r2, [r7, #18]
 8015f3c:	8bfb      	ldrh	r3, [r7, #30]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d202      	bcs.n	8015f48 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 8015f42:	f06f 0301 	mvn.w	r3, #1
 8015f46:	e0aa      	b.n	801609e <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 8015f48:	8a7b      	ldrh	r3, [r7, #18]
 8015f4a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015f4c:	6a3b      	ldr	r3, [r7, #32]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015f52:	e79e      	b.n	8015e92 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8015f54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f58:	2b04      	cmp	r3, #4
 8015f5a:	d106      	bne.n	8015f6a <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f7f4 fc9b 	bl	800a89a <lwip_htonl>
 8015f64:	4603      	mov	r3, r0
 8015f66:	60bb      	str	r3, [r7, #8]
 8015f68:	e011      	b.n	8015f8e <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f6e:	2b01      	cmp	r3, #1
 8015f70:	d009      	beq.n	8015f86 <dhcp_parse_reply+0x4e6>
 8015f72:	4b3b      	ldr	r3, [pc, #236]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015f74:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015f78:	4941      	ldr	r1, [pc, #260]	; (8016080 <dhcp_parse_reply+0x5e0>)
 8015f7a:	483b      	ldr	r0, [pc, #236]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015f7c:	f003 ffce 	bl	8019f1c <iprintf>
 8015f80:	f06f 0305 	mvn.w	r3, #5
 8015f84:	e08b      	b.n	801609e <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 8015f86:	f107 0308 	add.w	r3, r7, #8
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015f8e:	4a39      	ldr	r2, [pc, #228]	; (8016074 <dhcp_parse_reply+0x5d4>)
 8015f90:	6a3b      	ldr	r3, [r7, #32]
 8015f92:	4413      	add	r3, r2
 8015f94:	2201      	movs	r2, #1
 8015f96:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015f98:	68ba      	ldr	r2, [r7, #8]
 8015f9a:	4938      	ldr	r1, [pc, #224]	; (801607c <dhcp_parse_reply+0x5dc>)
 8015f9c:	6a3b      	ldr	r3, [r7, #32]
 8015f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fa4:	895b      	ldrh	r3, [r3, #10]
 8015fa6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d324      	bcc.n	8015ff6 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8015fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fae:	895b      	ldrh	r3, [r3, #10]
 8015fb0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fb2:	1ad3      	subs	r3, r2, r3
 8015fb4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb8:	895b      	ldrh	r3, [r3, #10]
 8015fba:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015fbc:	1ad3      	subs	r3, r2, r3
 8015fbe:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015fc0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fc2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015fc4:	429a      	cmp	r2, r3
 8015fc6:	d213      	bcs.n	8015ff0 <dhcp_parse_reply+0x550>
        q = q->next;
 8015fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d109      	bne.n	8015fe8 <dhcp_parse_reply+0x548>
 8015fd4:	4b22      	ldr	r3, [pc, #136]	; (8016060 <dhcp_parse_reply+0x5c0>)
 8015fd6:	f240 629d 	movw	r2, #1693	; 0x69d
 8015fda:	492a      	ldr	r1, [pc, #168]	; (8016084 <dhcp_parse_reply+0x5e4>)
 8015fdc:	4822      	ldr	r0, [pc, #136]	; (8016068 <dhcp_parse_reply+0x5c8>)
 8015fde:	f003 ff9d 	bl	8019f1c <iprintf>
 8015fe2:	f06f 0305 	mvn.w	r3, #5
 8015fe6:	e05a      	b.n	801609e <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 8015fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fea:	685b      	ldr	r3, [r3, #4]
 8015fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015fee:	e002      	b.n	8015ff6 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015ff0:	f06f 0301 	mvn.w	r3, #1
 8015ff4:	e053      	b.n	801609e <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d00a      	beq.n	8016012 <dhcp_parse_reply+0x572>
 8015ffc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ffe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016000:	429a      	cmp	r2, r3
 8016002:	d206      	bcs.n	8016012 <dhcp_parse_reply+0x572>
 8016004:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016008:	4413      	add	r3, r2
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	2bff      	cmp	r3, #255	; 0xff
 801600e:	f47f ad8a 	bne.w	8015b26 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016012:	4b18      	ldr	r3, [pc, #96]	; (8016074 <dhcp_parse_reply+0x5d4>)
 8016014:	781b      	ldrb	r3, [r3, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d018      	beq.n	801604c <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801601a:	4b18      	ldr	r3, [pc, #96]	; (801607c <dhcp_parse_reply+0x5dc>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016020:	4b14      	ldr	r3, [pc, #80]	; (8016074 <dhcp_parse_reply+0x5d4>)
 8016022:	2200      	movs	r2, #0
 8016024:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	2b01      	cmp	r3, #1
 801602a:	d102      	bne.n	8016032 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801602c:	2301      	movs	r3, #1
 801602e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016030:	e00c      	b.n	801604c <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	2b02      	cmp	r3, #2
 8016036:	d102      	bne.n	801603e <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 8016038:	2301      	movs	r3, #1
 801603a:	62bb      	str	r3, [r7, #40]	; 0x28
 801603c:	e006      	b.n	801604c <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	2b03      	cmp	r3, #3
 8016042:	d103      	bne.n	801604c <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 8016044:	2301      	movs	r3, #1
 8016046:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016048:	2301      	movs	r3, #1
 801604a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801604c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801604e:	2b00      	cmp	r3, #0
 8016050:	d01a      	beq.n	8016088 <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016052:	2300      	movs	r3, #0
 8016054:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016056:	236c      	movs	r3, #108	; 0x6c
 8016058:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801605a:	23ec      	movs	r3, #236	; 0xec
 801605c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801605e:	e53c      	b.n	8015ada <dhcp_parse_reply+0x3a>
 8016060:	08020f4c 	.word	0x08020f4c
 8016064:	08021204 	.word	0x08021204
 8016068:	08020fac 	.word	0x08020fac
 801606c:	080211d4 	.word	0x080211d4
 8016070:	08021228 	.word	0x08021228
 8016074:	200280ac 	.word	0x200280ac
 8016078:	0802123c 	.word	0x0802123c
 801607c:	200280b8 	.word	0x200280b8
 8016080:	08021254 	.word	0x08021254
 8016084:	08021268 	.word	0x08021268
  } else if (parse_sname_as_options) {
 8016088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801608a:	2b00      	cmp	r3, #0
 801608c:	d006      	beq.n	801609c <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 801608e:	2300      	movs	r3, #0
 8016090:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016092:	232c      	movs	r3, #44	; 0x2c
 8016094:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016096:	236c      	movs	r3, #108	; 0x6c
 8016098:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801609a:	e51e      	b.n	8015ada <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801609c:	2300      	movs	r3, #0
}
 801609e:	4618      	mov	r0, r3
 80160a0:	3740      	adds	r7, #64	; 0x40
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}
 80160a6:	bf00      	nop

080160a8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b08a      	sub	sp, #40	; 0x28
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	60f8      	str	r0, [r7, #12]
 80160b0:	60b9      	str	r1, [r7, #8]
 80160b2:	607a      	str	r2, [r7, #4]
 80160b4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80160b6:	4b5f      	ldr	r3, [pc, #380]	; (8016234 <dhcp_recv+0x18c>)
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160bc:	6a3b      	ldr	r3, [r7, #32]
 80160be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160c0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80160c8:	69fb      	ldr	r3, [r7, #28]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	f000 809d 	beq.w	801620a <dhcp_recv+0x162>
 80160d0:	69fb      	ldr	r3, [r7, #28]
 80160d2:	791b      	ldrb	r3, [r3, #4]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	f000 8098 	beq.w	801620a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	895b      	ldrh	r3, [r3, #10]
 80160de:	2b2b      	cmp	r3, #43	; 0x2b
 80160e0:	f240 8095 	bls.w	801620e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80160e4:	69bb      	ldr	r3, [r7, #24]
 80160e6:	781b      	ldrb	r3, [r3, #0]
 80160e8:	2b02      	cmp	r3, #2
 80160ea:	f040 8092 	bne.w	8016212 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80160ee:	2300      	movs	r3, #0
 80160f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80160f4:	e012      	b.n	801611c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80160f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80160fa:	6a3a      	ldr	r2, [r7, #32]
 80160fc:	4413      	add	r3, r2
 80160fe:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8016102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016106:	69b9      	ldr	r1, [r7, #24]
 8016108:	440b      	add	r3, r1
 801610a:	7f1b      	ldrb	r3, [r3, #28]
 801610c:	429a      	cmp	r2, r3
 801610e:	f040 8082 	bne.w	8016216 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016116:	3301      	adds	r3, #1
 8016118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801611c:	6a3b      	ldr	r3, [r7, #32]
 801611e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016122:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016126:	429a      	cmp	r2, r3
 8016128:	d203      	bcs.n	8016132 <dhcp_recv+0x8a>
 801612a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801612e:	2b05      	cmp	r3, #5
 8016130:	d9e1      	bls.n	80160f6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016132:	69bb      	ldr	r3, [r7, #24]
 8016134:	685b      	ldr	r3, [r3, #4]
 8016136:	4618      	mov	r0, r3
 8016138:	f7f4 fbaf 	bl	800a89a <lwip_htonl>
 801613c:	4602      	mov	r2, r0
 801613e:	69fb      	ldr	r3, [r7, #28]
 8016140:	681b      	ldr	r3, [r3, #0]
 8016142:	429a      	cmp	r2, r3
 8016144:	d169      	bne.n	801621a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016146:	69f9      	ldr	r1, [r7, #28]
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f7ff fca9 	bl	8015aa0 <dhcp_parse_reply>
 801614e:	4603      	mov	r3, r0
 8016150:	2b00      	cmp	r3, #0
 8016152:	d164      	bne.n	801621e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016154:	4b38      	ldr	r3, [pc, #224]	; (8016238 <dhcp_recv+0x190>)
 8016156:	785b      	ldrb	r3, [r3, #1]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d062      	beq.n	8016222 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	685b      	ldr	r3, [r3, #4]
 8016160:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016162:	4b36      	ldr	r3, [pc, #216]	; (801623c <dhcp_recv+0x194>)
 8016164:	685b      	ldr	r3, [r3, #4]
 8016166:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016168:	7cfb      	ldrb	r3, [r7, #19]
 801616a:	2b05      	cmp	r3, #5
 801616c:	d12a      	bne.n	80161c4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801616e:	69fb      	ldr	r3, [r7, #28]
 8016170:	795b      	ldrb	r3, [r3, #5]
 8016172:	2b01      	cmp	r3, #1
 8016174:	d112      	bne.n	801619c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8016176:	6979      	ldr	r1, [r7, #20]
 8016178:	6a38      	ldr	r0, [r7, #32]
 801617a:	f7fe fdb5 	bl	8014ce8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801617e:	6a3b      	ldr	r3, [r7, #32]
 8016180:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016184:	f003 0308 	and.w	r3, r3, #8
 8016188:	2b00      	cmp	r3, #0
 801618a:	d003      	beq.n	8016194 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801618c:	6a38      	ldr	r0, [r7, #32]
 801618e:	f7fe fb23 	bl	80147d8 <dhcp_check>
 8016192:	e047      	b.n	8016224 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016194:	6a38      	ldr	r0, [r7, #32]
 8016196:	f7ff f837 	bl	8015208 <dhcp_bind>
 801619a:	e043      	b.n	8016224 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801619c:	69fb      	ldr	r3, [r7, #28]
 801619e:	795b      	ldrb	r3, [r3, #5]
 80161a0:	2b03      	cmp	r3, #3
 80161a2:	d007      	beq.n	80161b4 <dhcp_recv+0x10c>
 80161a4:	69fb      	ldr	r3, [r7, #28]
 80161a6:	795b      	ldrb	r3, [r3, #5]
 80161a8:	2b04      	cmp	r3, #4
 80161aa:	d003      	beq.n	80161b4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80161b0:	2b05      	cmp	r3, #5
 80161b2:	d137      	bne.n	8016224 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 80161b4:	6979      	ldr	r1, [r7, #20]
 80161b6:	6a38      	ldr	r0, [r7, #32]
 80161b8:	f7fe fd96 	bl	8014ce8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80161bc:	6a38      	ldr	r0, [r7, #32]
 80161be:	f7ff f823 	bl	8015208 <dhcp_bind>
 80161c2:	e02f      	b.n	8016224 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80161c4:	7cfb      	ldrb	r3, [r7, #19]
 80161c6:	2b06      	cmp	r3, #6
 80161c8:	d113      	bne.n	80161f2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80161ca:	69fb      	ldr	r3, [r7, #28]
 80161cc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80161ce:	2b03      	cmp	r3, #3
 80161d0:	d00b      	beq.n	80161ea <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	795b      	ldrb	r3, [r3, #5]
 80161d6:	2b01      	cmp	r3, #1
 80161d8:	d007      	beq.n	80161ea <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80161de:	2b04      	cmp	r3, #4
 80161e0:	d003      	beq.n	80161ea <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80161e2:	69fb      	ldr	r3, [r7, #28]
 80161e4:	795b      	ldrb	r3, [r3, #5]
 80161e6:	2b05      	cmp	r3, #5
 80161e8:	d103      	bne.n	80161f2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80161ea:	6a38      	ldr	r0, [r7, #32]
 80161ec:	f7fe fada 	bl	80147a4 <dhcp_handle_nak>
 80161f0:	e018      	b.n	8016224 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80161f2:	7cfb      	ldrb	r3, [r7, #19]
 80161f4:	2b02      	cmp	r3, #2
 80161f6:	d108      	bne.n	801620a <dhcp_recv+0x162>
 80161f8:	69fb      	ldr	r3, [r7, #28]
 80161fa:	795b      	ldrb	r3, [r3, #5]
 80161fc:	2b06      	cmp	r3, #6
 80161fe:	d104      	bne.n	801620a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016200:	6979      	ldr	r1, [r7, #20]
 8016202:	6a38      	ldr	r0, [r7, #32]
 8016204:	f7fe fb1c 	bl	8014840 <dhcp_handle_offer>
 8016208:	e00c      	b.n	8016224 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 801620a:	bf00      	nop
 801620c:	e00a      	b.n	8016224 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801620e:	bf00      	nop
 8016210:	e008      	b.n	8016224 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016212:	bf00      	nop
 8016214:	e006      	b.n	8016224 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8016216:	bf00      	nop
 8016218:	e004      	b.n	8016224 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801621a:	bf00      	nop
 801621c:	e002      	b.n	8016224 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801621e:	bf00      	nop
 8016220:	e000      	b.n	8016224 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016222:	bf00      	nop
  pbuf_free(p);
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f7f6 feab 	bl	800cf80 <pbuf_free>
}
 801622a:	bf00      	nop
 801622c:	3728      	adds	r7, #40	; 0x28
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}
 8016232:	bf00      	nop
 8016234:	20024804 	.word	0x20024804
 8016238:	200280ac 	.word	0x200280ac
 801623c:	200280b8 	.word	0x200280b8

08016240 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b088      	sub	sp, #32
 8016244:	af00      	add	r7, sp, #0
 8016246:	60f8      	str	r0, [r7, #12]
 8016248:	60b9      	str	r1, [r7, #8]
 801624a:	603b      	str	r3, [r7, #0]
 801624c:	4613      	mov	r3, r2
 801624e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	2b00      	cmp	r3, #0
 8016254:	d108      	bne.n	8016268 <dhcp_create_msg+0x28>
 8016256:	4b5f      	ldr	r3, [pc, #380]	; (80163d4 <dhcp_create_msg+0x194>)
 8016258:	f240 7269 	movw	r2, #1897	; 0x769
 801625c:	495e      	ldr	r1, [pc, #376]	; (80163d8 <dhcp_create_msg+0x198>)
 801625e:	485f      	ldr	r0, [pc, #380]	; (80163dc <dhcp_create_msg+0x19c>)
 8016260:	f003 fe5c 	bl	8019f1c <iprintf>
 8016264:	2300      	movs	r3, #0
 8016266:	e0b1      	b.n	80163cc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016268:	68bb      	ldr	r3, [r7, #8]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d108      	bne.n	8016280 <dhcp_create_msg+0x40>
 801626e:	4b59      	ldr	r3, [pc, #356]	; (80163d4 <dhcp_create_msg+0x194>)
 8016270:	f240 726a 	movw	r2, #1898	; 0x76a
 8016274:	495a      	ldr	r1, [pc, #360]	; (80163e0 <dhcp_create_msg+0x1a0>)
 8016276:	4859      	ldr	r0, [pc, #356]	; (80163dc <dhcp_create_msg+0x19c>)
 8016278:	f003 fe50 	bl	8019f1c <iprintf>
 801627c:	2300      	movs	r3, #0
 801627e:	e0a5      	b.n	80163cc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016280:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016284:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016288:	2036      	movs	r0, #54	; 0x36
 801628a:	f7f6 fb99 	bl	800c9c0 <pbuf_alloc>
 801628e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016290:	69bb      	ldr	r3, [r7, #24]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d101      	bne.n	801629a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8016296:	2300      	movs	r3, #0
 8016298:	e098      	b.n	80163cc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801629a:	69bb      	ldr	r3, [r7, #24]
 801629c:	895b      	ldrh	r3, [r3, #10]
 801629e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80162a2:	d206      	bcs.n	80162b2 <dhcp_create_msg+0x72>
 80162a4:	4b4b      	ldr	r3, [pc, #300]	; (80163d4 <dhcp_create_msg+0x194>)
 80162a6:	f240 7272 	movw	r2, #1906	; 0x772
 80162aa:	494e      	ldr	r1, [pc, #312]	; (80163e4 <dhcp_create_msg+0x1a4>)
 80162ac:	484b      	ldr	r0, [pc, #300]	; (80163dc <dhcp_create_msg+0x19c>)
 80162ae:	f003 fe35 	bl	8019f1c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80162b2:	79fb      	ldrb	r3, [r7, #7]
 80162b4:	2b03      	cmp	r3, #3
 80162b6:	d103      	bne.n	80162c0 <dhcp_create_msg+0x80>
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	795b      	ldrb	r3, [r3, #5]
 80162bc:	2b03      	cmp	r3, #3
 80162be:	d10d      	bne.n	80162dc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	799b      	ldrb	r3, [r3, #6]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d105      	bne.n	80162d4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80162c8:	f003 fea4 	bl	801a014 <rand>
 80162cc:	4603      	mov	r3, r0
 80162ce:	461a      	mov	r2, r3
 80162d0:	4b45      	ldr	r3, [pc, #276]	; (80163e8 <dhcp_create_msg+0x1a8>)
 80162d2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80162d4:	4b44      	ldr	r3, [pc, #272]	; (80163e8 <dhcp_create_msg+0x1a8>)
 80162d6:	681a      	ldr	r2, [r3, #0]
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80162dc:	69bb      	ldr	r3, [r7, #24]
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80162e2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80162e6:	2100      	movs	r1, #0
 80162e8:	6978      	ldr	r0, [r7, #20]
 80162ea:	f002 ffd0 	bl	801928e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	2201      	movs	r2, #1
 80162f2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80162f4:	697b      	ldr	r3, [r7, #20]
 80162f6:	2201      	movs	r2, #1
 80162f8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016304:	68bb      	ldr	r3, [r7, #8]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	4618      	mov	r0, r3
 801630a:	f7f4 fac6 	bl	800a89a <lwip_htonl>
 801630e:	4602      	mov	r2, r0
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016314:	79fb      	ldrb	r3, [r7, #7]
 8016316:	2b08      	cmp	r3, #8
 8016318:	d010      	beq.n	801633c <dhcp_create_msg+0xfc>
 801631a:	79fb      	ldrb	r3, [r7, #7]
 801631c:	2b04      	cmp	r3, #4
 801631e:	d00d      	beq.n	801633c <dhcp_create_msg+0xfc>
 8016320:	79fb      	ldrb	r3, [r7, #7]
 8016322:	2b07      	cmp	r3, #7
 8016324:	d00a      	beq.n	801633c <dhcp_create_msg+0xfc>
 8016326:	79fb      	ldrb	r3, [r7, #7]
 8016328:	2b03      	cmp	r3, #3
 801632a:	d10c      	bne.n	8016346 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016330:	2b05      	cmp	r3, #5
 8016332:	d003      	beq.n	801633c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	795b      	ldrb	r3, [r3, #5]
 8016338:	2b04      	cmp	r3, #4
 801633a:	d104      	bne.n	8016346 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	3304      	adds	r3, #4
 8016340:	681a      	ldr	r2, [r3, #0]
 8016342:	697b      	ldr	r3, [r7, #20]
 8016344:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016346:	2300      	movs	r3, #0
 8016348:	83fb      	strh	r3, [r7, #30]
 801634a:	e00c      	b.n	8016366 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801634c:	8bfa      	ldrh	r2, [r7, #30]
 801634e:	8bfb      	ldrh	r3, [r7, #30]
 8016350:	68f9      	ldr	r1, [r7, #12]
 8016352:	440a      	add	r2, r1
 8016354:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016358:	697a      	ldr	r2, [r7, #20]
 801635a:	4413      	add	r3, r2
 801635c:	460a      	mov	r2, r1
 801635e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016360:	8bfb      	ldrh	r3, [r7, #30]
 8016362:	3301      	adds	r3, #1
 8016364:	83fb      	strh	r3, [r7, #30]
 8016366:	8bfb      	ldrh	r3, [r7, #30]
 8016368:	2b05      	cmp	r3, #5
 801636a:	d9ef      	bls.n	801634c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	2200      	movs	r2, #0
 8016370:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016374:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016378:	2200      	movs	r2, #0
 801637a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801637e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016382:	2200      	movs	r2, #0
 8016384:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016388:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801638c:	2200      	movs	r2, #0
 801638e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016392:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801639c:	2301      	movs	r3, #1
 801639e:	2235      	movs	r2, #53	; 0x35
 80163a0:	2000      	movs	r0, #0
 80163a2:	f7ff faad 	bl	8015900 <dhcp_option>
 80163a6:	4603      	mov	r3, r0
 80163a8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163b0:	79fa      	ldrb	r2, [r7, #7]
 80163b2:	8a7b      	ldrh	r3, [r7, #18]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7ff fad7 	bl	8015968 <dhcp_option_byte>
 80163ba:	4603      	mov	r3, r0
 80163bc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d002      	beq.n	80163ca <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	8a7a      	ldrh	r2, [r7, #18]
 80163c8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80163ca:	69bb      	ldr	r3, [r7, #24]
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	3720      	adds	r7, #32
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}
 80163d4:	08020f4c 	.word	0x08020f4c
 80163d8:	0802127c 	.word	0x0802127c
 80163dc:	08020fac 	.word	0x08020fac
 80163e0:	0802129c 	.word	0x0802129c
 80163e4:	080212bc 	.word	0x080212bc
 80163e8:	200214e4 	.word	0x200214e4

080163ec <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b084      	sub	sp, #16
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	4603      	mov	r3, r0
 80163f4:	60b9      	str	r1, [r7, #8]
 80163f6:	607a      	str	r2, [r7, #4]
 80163f8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80163fa:	89fb      	ldrh	r3, [r7, #14]
 80163fc:	1c5a      	adds	r2, r3, #1
 80163fe:	81fa      	strh	r2, [r7, #14]
 8016400:	461a      	mov	r2, r3
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	4413      	add	r3, r2
 8016406:	22ff      	movs	r2, #255	; 0xff
 8016408:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801640a:	e007      	b.n	801641c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801640c:	89fb      	ldrh	r3, [r7, #14]
 801640e:	1c5a      	adds	r2, r3, #1
 8016410:	81fa      	strh	r2, [r7, #14]
 8016412:	461a      	mov	r2, r3
 8016414:	68bb      	ldr	r3, [r7, #8]
 8016416:	4413      	add	r3, r2
 8016418:	2200      	movs	r2, #0
 801641a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801641c:	89fb      	ldrh	r3, [r7, #14]
 801641e:	2b43      	cmp	r3, #67	; 0x43
 8016420:	d904      	bls.n	801642c <dhcp_option_trailer+0x40>
 8016422:	89fb      	ldrh	r3, [r7, #14]
 8016424:	f003 0303 	and.w	r3, r3, #3
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <dhcp_option_trailer+0x46>
 801642c:	89fb      	ldrh	r3, [r7, #14]
 801642e:	2b43      	cmp	r3, #67	; 0x43
 8016430:	d9ec      	bls.n	801640c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016432:	89fb      	ldrh	r3, [r7, #14]
 8016434:	33f0      	adds	r3, #240	; 0xf0
 8016436:	b29b      	uxth	r3, r3
 8016438:	4619      	mov	r1, r3
 801643a:	6878      	ldr	r0, [r7, #4]
 801643c:	f7f6 fc1a 	bl	800cc74 <pbuf_realloc>
}
 8016440:	bf00      	nop
 8016442:	3710      	adds	r7, #16
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}

08016448 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016448:	b480      	push	{r7}
 801644a:	b085      	sub	sp, #20
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d017      	beq.n	8016486 <dhcp_supplied_address+0x3e>
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801645a:	2b00      	cmp	r3, #0
 801645c:	d013      	beq.n	8016486 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016462:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	795b      	ldrb	r3, [r3, #5]
 8016468:	2b0a      	cmp	r3, #10
 801646a:	d007      	beq.n	801647c <dhcp_supplied_address+0x34>
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	795b      	ldrb	r3, [r3, #5]
 8016470:	2b05      	cmp	r3, #5
 8016472:	d003      	beq.n	801647c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016478:	2b04      	cmp	r3, #4
 801647a:	d101      	bne.n	8016480 <dhcp_supplied_address+0x38>
 801647c:	2301      	movs	r3, #1
 801647e:	e000      	b.n	8016482 <dhcp_supplied_address+0x3a>
 8016480:	2300      	movs	r3, #0
 8016482:	b2db      	uxtb	r3, r3
 8016484:	e000      	b.n	8016488 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016486:	2300      	movs	r3, #0
}
 8016488:	4618      	mov	r0, r3
 801648a:	3714      	adds	r7, #20
 801648c:	46bd      	mov	sp, r7
 801648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016492:	4770      	bx	lr

08016494 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801649c:	4915      	ldr	r1, [pc, #84]	; (80164f4 <etharp_free_entry+0x60>)
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	4613      	mov	r3, r2
 80164a2:	005b      	lsls	r3, r3, #1
 80164a4:	4413      	add	r3, r2
 80164a6:	00db      	lsls	r3, r3, #3
 80164a8:	440b      	add	r3, r1
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d013      	beq.n	80164d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80164b0:	4910      	ldr	r1, [pc, #64]	; (80164f4 <etharp_free_entry+0x60>)
 80164b2:	687a      	ldr	r2, [r7, #4]
 80164b4:	4613      	mov	r3, r2
 80164b6:	005b      	lsls	r3, r3, #1
 80164b8:	4413      	add	r3, r2
 80164ba:	00db      	lsls	r3, r3, #3
 80164bc:	440b      	add	r3, r1
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7f6 fd5d 	bl	800cf80 <pbuf_free>
    arp_table[i].q = NULL;
 80164c6:	490b      	ldr	r1, [pc, #44]	; (80164f4 <etharp_free_entry+0x60>)
 80164c8:	687a      	ldr	r2, [r7, #4]
 80164ca:	4613      	mov	r3, r2
 80164cc:	005b      	lsls	r3, r3, #1
 80164ce:	4413      	add	r3, r2
 80164d0:	00db      	lsls	r3, r3, #3
 80164d2:	440b      	add	r3, r1
 80164d4:	2200      	movs	r2, #0
 80164d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80164d8:	4906      	ldr	r1, [pc, #24]	; (80164f4 <etharp_free_entry+0x60>)
 80164da:	687a      	ldr	r2, [r7, #4]
 80164dc:	4613      	mov	r3, r2
 80164de:	005b      	lsls	r3, r3, #1
 80164e0:	4413      	add	r3, r2
 80164e2:	00db      	lsls	r3, r3, #3
 80164e4:	440b      	add	r3, r1
 80164e6:	3314      	adds	r3, #20
 80164e8:	2200      	movs	r2, #0
 80164ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80164ec:	bf00      	nop
 80164ee:	3708      	adds	r7, #8
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}
 80164f4:	200214e8 	.word	0x200214e8

080164f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b082      	sub	sp, #8
 80164fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164fe:	2300      	movs	r3, #0
 8016500:	607b      	str	r3, [r7, #4]
 8016502:	e096      	b.n	8016632 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016504:	494f      	ldr	r1, [pc, #316]	; (8016644 <etharp_tmr+0x14c>)
 8016506:	687a      	ldr	r2, [r7, #4]
 8016508:	4613      	mov	r3, r2
 801650a:	005b      	lsls	r3, r3, #1
 801650c:	4413      	add	r3, r2
 801650e:	00db      	lsls	r3, r3, #3
 8016510:	440b      	add	r3, r1
 8016512:	3314      	adds	r3, #20
 8016514:	781b      	ldrb	r3, [r3, #0]
 8016516:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016518:	78fb      	ldrb	r3, [r7, #3]
 801651a:	2b00      	cmp	r3, #0
 801651c:	f000 8086 	beq.w	801662c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016520:	4948      	ldr	r1, [pc, #288]	; (8016644 <etharp_tmr+0x14c>)
 8016522:	687a      	ldr	r2, [r7, #4]
 8016524:	4613      	mov	r3, r2
 8016526:	005b      	lsls	r3, r3, #1
 8016528:	4413      	add	r3, r2
 801652a:	00db      	lsls	r3, r3, #3
 801652c:	440b      	add	r3, r1
 801652e:	3312      	adds	r3, #18
 8016530:	881b      	ldrh	r3, [r3, #0]
 8016532:	3301      	adds	r3, #1
 8016534:	b298      	uxth	r0, r3
 8016536:	4943      	ldr	r1, [pc, #268]	; (8016644 <etharp_tmr+0x14c>)
 8016538:	687a      	ldr	r2, [r7, #4]
 801653a:	4613      	mov	r3, r2
 801653c:	005b      	lsls	r3, r3, #1
 801653e:	4413      	add	r3, r2
 8016540:	00db      	lsls	r3, r3, #3
 8016542:	440b      	add	r3, r1
 8016544:	3312      	adds	r3, #18
 8016546:	4602      	mov	r2, r0
 8016548:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801654a:	493e      	ldr	r1, [pc, #248]	; (8016644 <etharp_tmr+0x14c>)
 801654c:	687a      	ldr	r2, [r7, #4]
 801654e:	4613      	mov	r3, r2
 8016550:	005b      	lsls	r3, r3, #1
 8016552:	4413      	add	r3, r2
 8016554:	00db      	lsls	r3, r3, #3
 8016556:	440b      	add	r3, r1
 8016558:	3312      	adds	r3, #18
 801655a:	881b      	ldrh	r3, [r3, #0]
 801655c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016560:	d215      	bcs.n	801658e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016562:	4938      	ldr	r1, [pc, #224]	; (8016644 <etharp_tmr+0x14c>)
 8016564:	687a      	ldr	r2, [r7, #4]
 8016566:	4613      	mov	r3, r2
 8016568:	005b      	lsls	r3, r3, #1
 801656a:	4413      	add	r3, r2
 801656c:	00db      	lsls	r3, r3, #3
 801656e:	440b      	add	r3, r1
 8016570:	3314      	adds	r3, #20
 8016572:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016574:	2b01      	cmp	r3, #1
 8016576:	d10e      	bne.n	8016596 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016578:	4932      	ldr	r1, [pc, #200]	; (8016644 <etharp_tmr+0x14c>)
 801657a:	687a      	ldr	r2, [r7, #4]
 801657c:	4613      	mov	r3, r2
 801657e:	005b      	lsls	r3, r3, #1
 8016580:	4413      	add	r3, r2
 8016582:	00db      	lsls	r3, r3, #3
 8016584:	440b      	add	r3, r1
 8016586:	3312      	adds	r3, #18
 8016588:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801658a:	2b04      	cmp	r3, #4
 801658c:	d903      	bls.n	8016596 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801658e:	6878      	ldr	r0, [r7, #4]
 8016590:	f7ff ff80 	bl	8016494 <etharp_free_entry>
 8016594:	e04a      	b.n	801662c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016596:	492b      	ldr	r1, [pc, #172]	; (8016644 <etharp_tmr+0x14c>)
 8016598:	687a      	ldr	r2, [r7, #4]
 801659a:	4613      	mov	r3, r2
 801659c:	005b      	lsls	r3, r3, #1
 801659e:	4413      	add	r3, r2
 80165a0:	00db      	lsls	r3, r3, #3
 80165a2:	440b      	add	r3, r1
 80165a4:	3314      	adds	r3, #20
 80165a6:	781b      	ldrb	r3, [r3, #0]
 80165a8:	2b03      	cmp	r3, #3
 80165aa:	d10a      	bne.n	80165c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80165ac:	4925      	ldr	r1, [pc, #148]	; (8016644 <etharp_tmr+0x14c>)
 80165ae:	687a      	ldr	r2, [r7, #4]
 80165b0:	4613      	mov	r3, r2
 80165b2:	005b      	lsls	r3, r3, #1
 80165b4:	4413      	add	r3, r2
 80165b6:	00db      	lsls	r3, r3, #3
 80165b8:	440b      	add	r3, r1
 80165ba:	3314      	adds	r3, #20
 80165bc:	2204      	movs	r2, #4
 80165be:	701a      	strb	r2, [r3, #0]
 80165c0:	e034      	b.n	801662c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80165c2:	4920      	ldr	r1, [pc, #128]	; (8016644 <etharp_tmr+0x14c>)
 80165c4:	687a      	ldr	r2, [r7, #4]
 80165c6:	4613      	mov	r3, r2
 80165c8:	005b      	lsls	r3, r3, #1
 80165ca:	4413      	add	r3, r2
 80165cc:	00db      	lsls	r3, r3, #3
 80165ce:	440b      	add	r3, r1
 80165d0:	3314      	adds	r3, #20
 80165d2:	781b      	ldrb	r3, [r3, #0]
 80165d4:	2b04      	cmp	r3, #4
 80165d6:	d10a      	bne.n	80165ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80165d8:	491a      	ldr	r1, [pc, #104]	; (8016644 <etharp_tmr+0x14c>)
 80165da:	687a      	ldr	r2, [r7, #4]
 80165dc:	4613      	mov	r3, r2
 80165de:	005b      	lsls	r3, r3, #1
 80165e0:	4413      	add	r3, r2
 80165e2:	00db      	lsls	r3, r3, #3
 80165e4:	440b      	add	r3, r1
 80165e6:	3314      	adds	r3, #20
 80165e8:	2202      	movs	r2, #2
 80165ea:	701a      	strb	r2, [r3, #0]
 80165ec:	e01e      	b.n	801662c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80165ee:	4915      	ldr	r1, [pc, #84]	; (8016644 <etharp_tmr+0x14c>)
 80165f0:	687a      	ldr	r2, [r7, #4]
 80165f2:	4613      	mov	r3, r2
 80165f4:	005b      	lsls	r3, r3, #1
 80165f6:	4413      	add	r3, r2
 80165f8:	00db      	lsls	r3, r3, #3
 80165fa:	440b      	add	r3, r1
 80165fc:	3314      	adds	r3, #20
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	2b01      	cmp	r3, #1
 8016602:	d113      	bne.n	801662c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016604:	490f      	ldr	r1, [pc, #60]	; (8016644 <etharp_tmr+0x14c>)
 8016606:	687a      	ldr	r2, [r7, #4]
 8016608:	4613      	mov	r3, r2
 801660a:	005b      	lsls	r3, r3, #1
 801660c:	4413      	add	r3, r2
 801660e:	00db      	lsls	r3, r3, #3
 8016610:	440b      	add	r3, r1
 8016612:	3308      	adds	r3, #8
 8016614:	6818      	ldr	r0, [r3, #0]
 8016616:	687a      	ldr	r2, [r7, #4]
 8016618:	4613      	mov	r3, r2
 801661a:	005b      	lsls	r3, r3, #1
 801661c:	4413      	add	r3, r2
 801661e:	00db      	lsls	r3, r3, #3
 8016620:	4a08      	ldr	r2, [pc, #32]	; (8016644 <etharp_tmr+0x14c>)
 8016622:	4413      	add	r3, r2
 8016624:	3304      	adds	r3, #4
 8016626:	4619      	mov	r1, r3
 8016628:	f000 fe72 	bl	8017310 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	3301      	adds	r3, #1
 8016630:	607b      	str	r3, [r7, #4]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2b09      	cmp	r3, #9
 8016636:	f77f af65 	ble.w	8016504 <etharp_tmr+0xc>
      }
    }
  }
}
 801663a:	bf00      	nop
 801663c:	3708      	adds	r7, #8
 801663e:	46bd      	mov	sp, r7
 8016640:	bd80      	pop	{r7, pc}
 8016642:	bf00      	nop
 8016644:	200214e8 	.word	0x200214e8

08016648 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b08a      	sub	sp, #40	; 0x28
 801664c:	af00      	add	r7, sp, #0
 801664e:	60f8      	str	r0, [r7, #12]
 8016650:	460b      	mov	r3, r1
 8016652:	607a      	str	r2, [r7, #4]
 8016654:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016656:	230a      	movs	r3, #10
 8016658:	84fb      	strh	r3, [r7, #38]	; 0x26
 801665a:	230a      	movs	r3, #10
 801665c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801665e:	230a      	movs	r3, #10
 8016660:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016662:	2300      	movs	r3, #0
 8016664:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016666:	230a      	movs	r3, #10
 8016668:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801666a:	2300      	movs	r3, #0
 801666c:	83bb      	strh	r3, [r7, #28]
 801666e:	2300      	movs	r3, #0
 8016670:	837b      	strh	r3, [r7, #26]
 8016672:	2300      	movs	r3, #0
 8016674:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016676:	2300      	movs	r3, #0
 8016678:	843b      	strh	r3, [r7, #32]
 801667a:	e0ae      	b.n	80167da <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801667c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016680:	49a6      	ldr	r1, [pc, #664]	; (801691c <etharp_find_entry+0x2d4>)
 8016682:	4613      	mov	r3, r2
 8016684:	005b      	lsls	r3, r3, #1
 8016686:	4413      	add	r3, r2
 8016688:	00db      	lsls	r3, r3, #3
 801668a:	440b      	add	r3, r1
 801668c:	3314      	adds	r3, #20
 801668e:	781b      	ldrb	r3, [r3, #0]
 8016690:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016692:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016696:	2b0a      	cmp	r3, #10
 8016698:	d105      	bne.n	80166a6 <etharp_find_entry+0x5e>
 801669a:	7dfb      	ldrb	r3, [r7, #23]
 801669c:	2b00      	cmp	r3, #0
 801669e:	d102      	bne.n	80166a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80166a0:	8c3b      	ldrh	r3, [r7, #32]
 80166a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80166a4:	e095      	b.n	80167d2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80166a6:	7dfb      	ldrb	r3, [r7, #23]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	f000 8092 	beq.w	80167d2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80166ae:	7dfb      	ldrb	r3, [r7, #23]
 80166b0:	2b01      	cmp	r3, #1
 80166b2:	d009      	beq.n	80166c8 <etharp_find_entry+0x80>
 80166b4:	7dfb      	ldrb	r3, [r7, #23]
 80166b6:	2b01      	cmp	r3, #1
 80166b8:	d806      	bhi.n	80166c8 <etharp_find_entry+0x80>
 80166ba:	4b99      	ldr	r3, [pc, #612]	; (8016920 <etharp_find_entry+0x2d8>)
 80166bc:	f44f 7292 	mov.w	r2, #292	; 0x124
 80166c0:	4998      	ldr	r1, [pc, #608]	; (8016924 <etharp_find_entry+0x2dc>)
 80166c2:	4899      	ldr	r0, [pc, #612]	; (8016928 <etharp_find_entry+0x2e0>)
 80166c4:	f003 fc2a 	bl	8019f1c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d020      	beq.n	8016710 <etharp_find_entry+0xc8>
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	6819      	ldr	r1, [r3, #0]
 80166d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166d6:	4891      	ldr	r0, [pc, #580]	; (801691c <etharp_find_entry+0x2d4>)
 80166d8:	4613      	mov	r3, r2
 80166da:	005b      	lsls	r3, r3, #1
 80166dc:	4413      	add	r3, r2
 80166de:	00db      	lsls	r3, r3, #3
 80166e0:	4403      	add	r3, r0
 80166e2:	3304      	adds	r3, #4
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	4299      	cmp	r1, r3
 80166e8:	d112      	bne.n	8016710 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d00c      	beq.n	801670a <etharp_find_entry+0xc2>
 80166f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166f4:	4989      	ldr	r1, [pc, #548]	; (801691c <etharp_find_entry+0x2d4>)
 80166f6:	4613      	mov	r3, r2
 80166f8:	005b      	lsls	r3, r3, #1
 80166fa:	4413      	add	r3, r2
 80166fc:	00db      	lsls	r3, r3, #3
 80166fe:	440b      	add	r3, r1
 8016700:	3308      	adds	r3, #8
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	687a      	ldr	r2, [r7, #4]
 8016706:	429a      	cmp	r2, r3
 8016708:	d102      	bne.n	8016710 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801670a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801670e:	e100      	b.n	8016912 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016710:	7dfb      	ldrb	r3, [r7, #23]
 8016712:	2b01      	cmp	r3, #1
 8016714:	d140      	bne.n	8016798 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801671a:	4980      	ldr	r1, [pc, #512]	; (801691c <etharp_find_entry+0x2d4>)
 801671c:	4613      	mov	r3, r2
 801671e:	005b      	lsls	r3, r3, #1
 8016720:	4413      	add	r3, r2
 8016722:	00db      	lsls	r3, r3, #3
 8016724:	440b      	add	r3, r1
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d01a      	beq.n	8016762 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801672c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016730:	497a      	ldr	r1, [pc, #488]	; (801691c <etharp_find_entry+0x2d4>)
 8016732:	4613      	mov	r3, r2
 8016734:	005b      	lsls	r3, r3, #1
 8016736:	4413      	add	r3, r2
 8016738:	00db      	lsls	r3, r3, #3
 801673a:	440b      	add	r3, r1
 801673c:	3312      	adds	r3, #18
 801673e:	881b      	ldrh	r3, [r3, #0]
 8016740:	8bba      	ldrh	r2, [r7, #28]
 8016742:	429a      	cmp	r2, r3
 8016744:	d845      	bhi.n	80167d2 <etharp_find_entry+0x18a>
            old_queue = i;
 8016746:	8c3b      	ldrh	r3, [r7, #32]
 8016748:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801674a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801674e:	4973      	ldr	r1, [pc, #460]	; (801691c <etharp_find_entry+0x2d4>)
 8016750:	4613      	mov	r3, r2
 8016752:	005b      	lsls	r3, r3, #1
 8016754:	4413      	add	r3, r2
 8016756:	00db      	lsls	r3, r3, #3
 8016758:	440b      	add	r3, r1
 801675a:	3312      	adds	r3, #18
 801675c:	881b      	ldrh	r3, [r3, #0]
 801675e:	83bb      	strh	r3, [r7, #28]
 8016760:	e037      	b.n	80167d2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016762:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016766:	496d      	ldr	r1, [pc, #436]	; (801691c <etharp_find_entry+0x2d4>)
 8016768:	4613      	mov	r3, r2
 801676a:	005b      	lsls	r3, r3, #1
 801676c:	4413      	add	r3, r2
 801676e:	00db      	lsls	r3, r3, #3
 8016770:	440b      	add	r3, r1
 8016772:	3312      	adds	r3, #18
 8016774:	881b      	ldrh	r3, [r3, #0]
 8016776:	8b7a      	ldrh	r2, [r7, #26]
 8016778:	429a      	cmp	r2, r3
 801677a:	d82a      	bhi.n	80167d2 <etharp_find_entry+0x18a>
            old_pending = i;
 801677c:	8c3b      	ldrh	r3, [r7, #32]
 801677e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016780:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016784:	4965      	ldr	r1, [pc, #404]	; (801691c <etharp_find_entry+0x2d4>)
 8016786:	4613      	mov	r3, r2
 8016788:	005b      	lsls	r3, r3, #1
 801678a:	4413      	add	r3, r2
 801678c:	00db      	lsls	r3, r3, #3
 801678e:	440b      	add	r3, r1
 8016790:	3312      	adds	r3, #18
 8016792:	881b      	ldrh	r3, [r3, #0]
 8016794:	837b      	strh	r3, [r7, #26]
 8016796:	e01c      	b.n	80167d2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016798:	7dfb      	ldrb	r3, [r7, #23]
 801679a:	2b01      	cmp	r3, #1
 801679c:	d919      	bls.n	80167d2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801679e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167a2:	495e      	ldr	r1, [pc, #376]	; (801691c <etharp_find_entry+0x2d4>)
 80167a4:	4613      	mov	r3, r2
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	4413      	add	r3, r2
 80167aa:	00db      	lsls	r3, r3, #3
 80167ac:	440b      	add	r3, r1
 80167ae:	3312      	adds	r3, #18
 80167b0:	881b      	ldrh	r3, [r3, #0]
 80167b2:	8b3a      	ldrh	r2, [r7, #24]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d80c      	bhi.n	80167d2 <etharp_find_entry+0x18a>
            old_stable = i;
 80167b8:	8c3b      	ldrh	r3, [r7, #32]
 80167ba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80167bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167c0:	4956      	ldr	r1, [pc, #344]	; (801691c <etharp_find_entry+0x2d4>)
 80167c2:	4613      	mov	r3, r2
 80167c4:	005b      	lsls	r3, r3, #1
 80167c6:	4413      	add	r3, r2
 80167c8:	00db      	lsls	r3, r3, #3
 80167ca:	440b      	add	r3, r1
 80167cc:	3312      	adds	r3, #18
 80167ce:	881b      	ldrh	r3, [r3, #0]
 80167d0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80167d2:	8c3b      	ldrh	r3, [r7, #32]
 80167d4:	3301      	adds	r3, #1
 80167d6:	b29b      	uxth	r3, r3
 80167d8:	843b      	strh	r3, [r7, #32]
 80167da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80167de:	2b09      	cmp	r3, #9
 80167e0:	f77f af4c 	ble.w	801667c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80167e4:	7afb      	ldrb	r3, [r7, #11]
 80167e6:	f003 0302 	and.w	r3, r3, #2
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d108      	bne.n	8016800 <etharp_find_entry+0x1b8>
 80167ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80167f2:	2b0a      	cmp	r3, #10
 80167f4:	d107      	bne.n	8016806 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80167f6:	7afb      	ldrb	r3, [r7, #11]
 80167f8:	f003 0301 	and.w	r3, r3, #1
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d102      	bne.n	8016806 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016800:	f04f 33ff 	mov.w	r3, #4294967295
 8016804:	e085      	b.n	8016912 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016806:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801680a:	2b09      	cmp	r3, #9
 801680c:	dc02      	bgt.n	8016814 <etharp_find_entry+0x1cc>
    i = empty;
 801680e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016810:	843b      	strh	r3, [r7, #32]
 8016812:	e039      	b.n	8016888 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016814:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016818:	2b09      	cmp	r3, #9
 801681a:	dc14      	bgt.n	8016846 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801681c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801681e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016820:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016824:	493d      	ldr	r1, [pc, #244]	; (801691c <etharp_find_entry+0x2d4>)
 8016826:	4613      	mov	r3, r2
 8016828:	005b      	lsls	r3, r3, #1
 801682a:	4413      	add	r3, r2
 801682c:	00db      	lsls	r3, r3, #3
 801682e:	440b      	add	r3, r1
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d018      	beq.n	8016868 <etharp_find_entry+0x220>
 8016836:	4b3a      	ldr	r3, [pc, #232]	; (8016920 <etharp_find_entry+0x2d8>)
 8016838:	f240 126d 	movw	r2, #365	; 0x16d
 801683c:	493b      	ldr	r1, [pc, #236]	; (801692c <etharp_find_entry+0x2e4>)
 801683e:	483a      	ldr	r0, [pc, #232]	; (8016928 <etharp_find_entry+0x2e0>)
 8016840:	f003 fb6c 	bl	8019f1c <iprintf>
 8016844:	e010      	b.n	8016868 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016846:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801684a:	2b09      	cmp	r3, #9
 801684c:	dc02      	bgt.n	8016854 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801684e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016850:	843b      	strh	r3, [r7, #32]
 8016852:	e009      	b.n	8016868 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016854:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016858:	2b09      	cmp	r3, #9
 801685a:	dc02      	bgt.n	8016862 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801685c:	8bfb      	ldrh	r3, [r7, #30]
 801685e:	843b      	strh	r3, [r7, #32]
 8016860:	e002      	b.n	8016868 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016862:	f04f 33ff 	mov.w	r3, #4294967295
 8016866:	e054      	b.n	8016912 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016868:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801686c:	2b09      	cmp	r3, #9
 801686e:	dd06      	ble.n	801687e <etharp_find_entry+0x236>
 8016870:	4b2b      	ldr	r3, [pc, #172]	; (8016920 <etharp_find_entry+0x2d8>)
 8016872:	f240 127f 	movw	r2, #383	; 0x17f
 8016876:	492e      	ldr	r1, [pc, #184]	; (8016930 <etharp_find_entry+0x2e8>)
 8016878:	482b      	ldr	r0, [pc, #172]	; (8016928 <etharp_find_entry+0x2e0>)
 801687a:	f003 fb4f 	bl	8019f1c <iprintf>
    etharp_free_entry(i);
 801687e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016882:	4618      	mov	r0, r3
 8016884:	f7ff fe06 	bl	8016494 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016888:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801688c:	2b09      	cmp	r3, #9
 801688e:	dd06      	ble.n	801689e <etharp_find_entry+0x256>
 8016890:	4b23      	ldr	r3, [pc, #140]	; (8016920 <etharp_find_entry+0x2d8>)
 8016892:	f240 1283 	movw	r2, #387	; 0x183
 8016896:	4926      	ldr	r1, [pc, #152]	; (8016930 <etharp_find_entry+0x2e8>)
 8016898:	4823      	ldr	r0, [pc, #140]	; (8016928 <etharp_find_entry+0x2e0>)
 801689a:	f003 fb3f 	bl	8019f1c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801689e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168a2:	491e      	ldr	r1, [pc, #120]	; (801691c <etharp_find_entry+0x2d4>)
 80168a4:	4613      	mov	r3, r2
 80168a6:	005b      	lsls	r3, r3, #1
 80168a8:	4413      	add	r3, r2
 80168aa:	00db      	lsls	r3, r3, #3
 80168ac:	440b      	add	r3, r1
 80168ae:	3314      	adds	r3, #20
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d006      	beq.n	80168c4 <etharp_find_entry+0x27c>
 80168b6:	4b1a      	ldr	r3, [pc, #104]	; (8016920 <etharp_find_entry+0x2d8>)
 80168b8:	f240 1285 	movw	r2, #389	; 0x185
 80168bc:	491d      	ldr	r1, [pc, #116]	; (8016934 <etharp_find_entry+0x2ec>)
 80168be:	481a      	ldr	r0, [pc, #104]	; (8016928 <etharp_find_entry+0x2e0>)
 80168c0:	f003 fb2c 	bl	8019f1c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d00b      	beq.n	80168e2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80168ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	6819      	ldr	r1, [r3, #0]
 80168d2:	4812      	ldr	r0, [pc, #72]	; (801691c <etharp_find_entry+0x2d4>)
 80168d4:	4613      	mov	r3, r2
 80168d6:	005b      	lsls	r3, r3, #1
 80168d8:	4413      	add	r3, r2
 80168da:	00db      	lsls	r3, r3, #3
 80168dc:	4403      	add	r3, r0
 80168de:	3304      	adds	r3, #4
 80168e0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80168e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168e6:	490d      	ldr	r1, [pc, #52]	; (801691c <etharp_find_entry+0x2d4>)
 80168e8:	4613      	mov	r3, r2
 80168ea:	005b      	lsls	r3, r3, #1
 80168ec:	4413      	add	r3, r2
 80168ee:	00db      	lsls	r3, r3, #3
 80168f0:	440b      	add	r3, r1
 80168f2:	3312      	adds	r3, #18
 80168f4:	2200      	movs	r2, #0
 80168f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80168f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168fc:	4907      	ldr	r1, [pc, #28]	; (801691c <etharp_find_entry+0x2d4>)
 80168fe:	4613      	mov	r3, r2
 8016900:	005b      	lsls	r3, r3, #1
 8016902:	4413      	add	r3, r2
 8016904:	00db      	lsls	r3, r3, #3
 8016906:	440b      	add	r3, r1
 8016908:	3308      	adds	r3, #8
 801690a:	687a      	ldr	r2, [r7, #4]
 801690c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801690e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016912:	4618      	mov	r0, r3
 8016914:	3728      	adds	r7, #40	; 0x28
 8016916:	46bd      	mov	sp, r7
 8016918:	bd80      	pop	{r7, pc}
 801691a:	bf00      	nop
 801691c:	200214e8 	.word	0x200214e8
 8016920:	080212fc 	.word	0x080212fc
 8016924:	08021334 	.word	0x08021334
 8016928:	08021374 	.word	0x08021374
 801692c:	0802139c 	.word	0x0802139c
 8016930:	080213b4 	.word	0x080213b4
 8016934:	080213c8 	.word	0x080213c8

08016938 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b088      	sub	sp, #32
 801693c:	af02      	add	r7, sp, #8
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	60b9      	str	r1, [r7, #8]
 8016942:	607a      	str	r2, [r7, #4]
 8016944:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801694c:	2b06      	cmp	r3, #6
 801694e:	d006      	beq.n	801695e <etharp_update_arp_entry+0x26>
 8016950:	4b48      	ldr	r3, [pc, #288]	; (8016a74 <etharp_update_arp_entry+0x13c>)
 8016952:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016956:	4948      	ldr	r1, [pc, #288]	; (8016a78 <etharp_update_arp_entry+0x140>)
 8016958:	4848      	ldr	r0, [pc, #288]	; (8016a7c <etharp_update_arp_entry+0x144>)
 801695a:	f003 fadf 	bl	8019f1c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801695e:	68bb      	ldr	r3, [r7, #8]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d012      	beq.n	801698a <etharp_update_arp_entry+0x52>
 8016964:	68bb      	ldr	r3, [r7, #8]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d00e      	beq.n	801698a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801696c:	68bb      	ldr	r3, [r7, #8]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	68f9      	ldr	r1, [r7, #12]
 8016972:	4618      	mov	r0, r3
 8016974:	f001 f91e 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 8016978:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801697a:	2b00      	cmp	r3, #0
 801697c:	d105      	bne.n	801698a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016986:	2be0      	cmp	r3, #224	; 0xe0
 8016988:	d102      	bne.n	8016990 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801698a:	f06f 030f 	mvn.w	r3, #15
 801698e:	e06c      	b.n	8016a6a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016990:	78fb      	ldrb	r3, [r7, #3]
 8016992:	68fa      	ldr	r2, [r7, #12]
 8016994:	4619      	mov	r1, r3
 8016996:	68b8      	ldr	r0, [r7, #8]
 8016998:	f7ff fe56 	bl	8016648 <etharp_find_entry>
 801699c:	4603      	mov	r3, r0
 801699e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80169a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	da02      	bge.n	80169ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80169a8:	8afb      	ldrh	r3, [r7, #22]
 80169aa:	b25b      	sxtb	r3, r3
 80169ac:	e05d      	b.n	8016a6a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80169ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169b2:	4933      	ldr	r1, [pc, #204]	; (8016a80 <etharp_update_arp_entry+0x148>)
 80169b4:	4613      	mov	r3, r2
 80169b6:	005b      	lsls	r3, r3, #1
 80169b8:	4413      	add	r3, r2
 80169ba:	00db      	lsls	r3, r3, #3
 80169bc:	440b      	add	r3, r1
 80169be:	3314      	adds	r3, #20
 80169c0:	2202      	movs	r2, #2
 80169c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80169c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169c8:	492d      	ldr	r1, [pc, #180]	; (8016a80 <etharp_update_arp_entry+0x148>)
 80169ca:	4613      	mov	r3, r2
 80169cc:	005b      	lsls	r3, r3, #1
 80169ce:	4413      	add	r3, r2
 80169d0:	00db      	lsls	r3, r3, #3
 80169d2:	440b      	add	r3, r1
 80169d4:	3308      	adds	r3, #8
 80169d6:	68fa      	ldr	r2, [r7, #12]
 80169d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80169da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169de:	4613      	mov	r3, r2
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	4413      	add	r3, r2
 80169e4:	00db      	lsls	r3, r3, #3
 80169e6:	3308      	adds	r3, #8
 80169e8:	4a25      	ldr	r2, [pc, #148]	; (8016a80 <etharp_update_arp_entry+0x148>)
 80169ea:	4413      	add	r3, r2
 80169ec:	3304      	adds	r3, #4
 80169ee:	2206      	movs	r2, #6
 80169f0:	6879      	ldr	r1, [r7, #4]
 80169f2:	4618      	mov	r0, r3
 80169f4:	f002 fc27 	bl	8019246 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80169f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169fc:	4920      	ldr	r1, [pc, #128]	; (8016a80 <etharp_update_arp_entry+0x148>)
 80169fe:	4613      	mov	r3, r2
 8016a00:	005b      	lsls	r3, r3, #1
 8016a02:	4413      	add	r3, r2
 8016a04:	00db      	lsls	r3, r3, #3
 8016a06:	440b      	add	r3, r1
 8016a08:	3312      	adds	r3, #18
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016a0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a12:	491b      	ldr	r1, [pc, #108]	; (8016a80 <etharp_update_arp_entry+0x148>)
 8016a14:	4613      	mov	r3, r2
 8016a16:	005b      	lsls	r3, r3, #1
 8016a18:	4413      	add	r3, r2
 8016a1a:	00db      	lsls	r3, r3, #3
 8016a1c:	440b      	add	r3, r1
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d021      	beq.n	8016a68 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016a24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a28:	4915      	ldr	r1, [pc, #84]	; (8016a80 <etharp_update_arp_entry+0x148>)
 8016a2a:	4613      	mov	r3, r2
 8016a2c:	005b      	lsls	r3, r3, #1
 8016a2e:	4413      	add	r3, r2
 8016a30:	00db      	lsls	r3, r3, #3
 8016a32:	440b      	add	r3, r1
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016a38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a3c:	4910      	ldr	r1, [pc, #64]	; (8016a80 <etharp_update_arp_entry+0x148>)
 8016a3e:	4613      	mov	r3, r2
 8016a40:	005b      	lsls	r3, r3, #1
 8016a42:	4413      	add	r3, r2
 8016a44:	00db      	lsls	r3, r3, #3
 8016a46:	440b      	add	r3, r1
 8016a48:	2200      	movs	r2, #0
 8016a4a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016a52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a56:	9300      	str	r3, [sp, #0]
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6939      	ldr	r1, [r7, #16]
 8016a5c:	68f8      	ldr	r0, [r7, #12]
 8016a5e:	f002 f971 	bl	8018d44 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016a62:	6938      	ldr	r0, [r7, #16]
 8016a64:	f7f6 fa8c 	bl	800cf80 <pbuf_free>
  }
  return ERR_OK;
 8016a68:	2300      	movs	r3, #0
}
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	3718      	adds	r7, #24
 8016a6e:	46bd      	mov	sp, r7
 8016a70:	bd80      	pop	{r7, pc}
 8016a72:	bf00      	nop
 8016a74:	080212fc 	.word	0x080212fc
 8016a78:	080213f4 	.word	0x080213f4
 8016a7c:	08021374 	.word	0x08021374
 8016a80:	200214e8 	.word	0x200214e8

08016a84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b084      	sub	sp, #16
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	60fb      	str	r3, [r7, #12]
 8016a90:	e01e      	b.n	8016ad0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016a92:	4913      	ldr	r1, [pc, #76]	; (8016ae0 <etharp_cleanup_netif+0x5c>)
 8016a94:	68fa      	ldr	r2, [r7, #12]
 8016a96:	4613      	mov	r3, r2
 8016a98:	005b      	lsls	r3, r3, #1
 8016a9a:	4413      	add	r3, r2
 8016a9c:	00db      	lsls	r3, r3, #3
 8016a9e:	440b      	add	r3, r1
 8016aa0:	3314      	adds	r3, #20
 8016aa2:	781b      	ldrb	r3, [r3, #0]
 8016aa4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016aa6:	7afb      	ldrb	r3, [r7, #11]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d00e      	beq.n	8016aca <etharp_cleanup_netif+0x46>
 8016aac:	490c      	ldr	r1, [pc, #48]	; (8016ae0 <etharp_cleanup_netif+0x5c>)
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	4413      	add	r3, r2
 8016ab6:	00db      	lsls	r3, r3, #3
 8016ab8:	440b      	add	r3, r1
 8016aba:	3308      	adds	r3, #8
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	687a      	ldr	r2, [r7, #4]
 8016ac0:	429a      	cmp	r2, r3
 8016ac2:	d102      	bne.n	8016aca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016ac4:	68f8      	ldr	r0, [r7, #12]
 8016ac6:	f7ff fce5 	bl	8016494 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	3301      	adds	r3, #1
 8016ace:	60fb      	str	r3, [r7, #12]
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	2b09      	cmp	r3, #9
 8016ad4:	dddd      	ble.n	8016a92 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016ad6:	bf00      	nop
 8016ad8:	3710      	adds	r7, #16
 8016ada:	46bd      	mov	sp, r7
 8016adc:	bd80      	pop	{r7, pc}
 8016ade:	bf00      	nop
 8016ae0:	200214e8 	.word	0x200214e8

08016ae4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016ae4:	b5b0      	push	{r4, r5, r7, lr}
 8016ae6:	b08a      	sub	sp, #40	; 0x28
 8016ae8:	af04      	add	r7, sp, #16
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016aee:	683b      	ldr	r3, [r7, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d107      	bne.n	8016b04 <etharp_input+0x20>
 8016af4:	4b3f      	ldr	r3, [pc, #252]	; (8016bf4 <etharp_input+0x110>)
 8016af6:	f240 228a 	movw	r2, #650	; 0x28a
 8016afa:	493f      	ldr	r1, [pc, #252]	; (8016bf8 <etharp_input+0x114>)
 8016afc:	483f      	ldr	r0, [pc, #252]	; (8016bfc <etharp_input+0x118>)
 8016afe:	f003 fa0d 	bl	8019f1c <iprintf>
 8016b02:	e074      	b.n	8016bee <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	881b      	ldrh	r3, [r3, #0]
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b14:	d10c      	bne.n	8016b30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b1a:	2b06      	cmp	r3, #6
 8016b1c:	d108      	bne.n	8016b30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b1e:	693b      	ldr	r3, [r7, #16]
 8016b20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b22:	2b04      	cmp	r3, #4
 8016b24:	d104      	bne.n	8016b30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016b26:	693b      	ldr	r3, [r7, #16]
 8016b28:	885b      	ldrh	r3, [r3, #2]
 8016b2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b2c:	2b08      	cmp	r3, #8
 8016b2e:	d003      	beq.n	8016b38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7f6 fa25 	bl	800cf80 <pbuf_free>
    return;
 8016b36:	e05a      	b.n	8016bee <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	330e      	adds	r3, #14
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016b40:	693b      	ldr	r3, [r7, #16]
 8016b42:	3318      	adds	r3, #24
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b48:	683b      	ldr	r3, [r7, #0]
 8016b4a:	3304      	adds	r3, #4
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d102      	bne.n	8016b58 <etharp_input+0x74>
    for_us = 0;
 8016b52:	2300      	movs	r3, #0
 8016b54:	75fb      	strb	r3, [r7, #23]
 8016b56:	e009      	b.n	8016b6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016b58:	68ba      	ldr	r2, [r7, #8]
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	bf0c      	ite	eq
 8016b64:	2301      	moveq	r3, #1
 8016b66:	2300      	movne	r3, #0
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016b6c:	693b      	ldr	r3, [r7, #16]
 8016b6e:	f103 0208 	add.w	r2, r3, #8
 8016b72:	7dfb      	ldrb	r3, [r7, #23]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d001      	beq.n	8016b7c <etharp_input+0x98>
 8016b78:	2301      	movs	r3, #1
 8016b7a:	e000      	b.n	8016b7e <etharp_input+0x9a>
 8016b7c:	2302      	movs	r3, #2
 8016b7e:	f107 010c 	add.w	r1, r7, #12
 8016b82:	6838      	ldr	r0, [r7, #0]
 8016b84:	f7ff fed8 	bl	8016938 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	88db      	ldrh	r3, [r3, #6]
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b92:	d003      	beq.n	8016b9c <etharp_input+0xb8>
 8016b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016b98:	d01e      	beq.n	8016bd8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016b9a:	e025      	b.n	8016be8 <etharp_input+0x104>
      if (for_us) {
 8016b9c:	7dfb      	ldrb	r3, [r7, #23]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d021      	beq.n	8016be6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016bae:	683b      	ldr	r3, [r7, #0]
 8016bb0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016bb4:	683b      	ldr	r3, [r7, #0]
 8016bb6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016bb8:	693a      	ldr	r2, [r7, #16]
 8016bba:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016bbc:	2102      	movs	r1, #2
 8016bbe:	9103      	str	r1, [sp, #12]
 8016bc0:	f107 010c 	add.w	r1, r7, #12
 8016bc4:	9102      	str	r1, [sp, #8]
 8016bc6:	9201      	str	r2, [sp, #4]
 8016bc8:	9300      	str	r3, [sp, #0]
 8016bca:	462b      	mov	r3, r5
 8016bcc:	4622      	mov	r2, r4
 8016bce:	4601      	mov	r1, r0
 8016bd0:	6838      	ldr	r0, [r7, #0]
 8016bd2:	f000 faef 	bl	80171b4 <etharp_raw>
      break;
 8016bd6:	e006      	b.n	8016be6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016bd8:	f107 030c 	add.w	r3, r7, #12
 8016bdc:	4619      	mov	r1, r3
 8016bde:	6838      	ldr	r0, [r7, #0]
 8016be0:	f7fe f9ce 	bl	8014f80 <dhcp_arp_reply>
      break;
 8016be4:	e000      	b.n	8016be8 <etharp_input+0x104>
      break;
 8016be6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f7f6 f9c9 	bl	800cf80 <pbuf_free>
}
 8016bee:	3718      	adds	r7, #24
 8016bf0:	46bd      	mov	sp, r7
 8016bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8016bf4:	080212fc 	.word	0x080212fc
 8016bf8:	0802144c 	.word	0x0802144c
 8016bfc:	08021374 	.word	0x08021374

08016c00 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b086      	sub	sp, #24
 8016c04:	af02      	add	r7, sp, #8
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	4613      	mov	r3, r2
 8016c0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016c0e:	79fa      	ldrb	r2, [r7, #7]
 8016c10:	4944      	ldr	r1, [pc, #272]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016c12:	4613      	mov	r3, r2
 8016c14:	005b      	lsls	r3, r3, #1
 8016c16:	4413      	add	r3, r2
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	440b      	add	r3, r1
 8016c1c:	3314      	adds	r3, #20
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	2b01      	cmp	r3, #1
 8016c22:	d806      	bhi.n	8016c32 <etharp_output_to_arp_index+0x32>
 8016c24:	4b40      	ldr	r3, [pc, #256]	; (8016d28 <etharp_output_to_arp_index+0x128>)
 8016c26:	f240 22ef 	movw	r2, #751	; 0x2ef
 8016c2a:	4940      	ldr	r1, [pc, #256]	; (8016d2c <etharp_output_to_arp_index+0x12c>)
 8016c2c:	4840      	ldr	r0, [pc, #256]	; (8016d30 <etharp_output_to_arp_index+0x130>)
 8016c2e:	f003 f975 	bl	8019f1c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016c32:	79fa      	ldrb	r2, [r7, #7]
 8016c34:	493b      	ldr	r1, [pc, #236]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016c36:	4613      	mov	r3, r2
 8016c38:	005b      	lsls	r3, r3, #1
 8016c3a:	4413      	add	r3, r2
 8016c3c:	00db      	lsls	r3, r3, #3
 8016c3e:	440b      	add	r3, r1
 8016c40:	3314      	adds	r3, #20
 8016c42:	781b      	ldrb	r3, [r3, #0]
 8016c44:	2b02      	cmp	r3, #2
 8016c46:	d153      	bne.n	8016cf0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016c48:	79fa      	ldrb	r2, [r7, #7]
 8016c4a:	4936      	ldr	r1, [pc, #216]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016c4c:	4613      	mov	r3, r2
 8016c4e:	005b      	lsls	r3, r3, #1
 8016c50:	4413      	add	r3, r2
 8016c52:	00db      	lsls	r3, r3, #3
 8016c54:	440b      	add	r3, r1
 8016c56:	3312      	adds	r3, #18
 8016c58:	881b      	ldrh	r3, [r3, #0]
 8016c5a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016c5e:	d919      	bls.n	8016c94 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016c60:	79fa      	ldrb	r2, [r7, #7]
 8016c62:	4613      	mov	r3, r2
 8016c64:	005b      	lsls	r3, r3, #1
 8016c66:	4413      	add	r3, r2
 8016c68:	00db      	lsls	r3, r3, #3
 8016c6a:	4a2e      	ldr	r2, [pc, #184]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016c6c:	4413      	add	r3, r2
 8016c6e:	3304      	adds	r3, #4
 8016c70:	4619      	mov	r1, r3
 8016c72:	68f8      	ldr	r0, [r7, #12]
 8016c74:	f000 fb4c 	bl	8017310 <etharp_request>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d138      	bne.n	8016cf0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016c7e:	79fa      	ldrb	r2, [r7, #7]
 8016c80:	4928      	ldr	r1, [pc, #160]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016c82:	4613      	mov	r3, r2
 8016c84:	005b      	lsls	r3, r3, #1
 8016c86:	4413      	add	r3, r2
 8016c88:	00db      	lsls	r3, r3, #3
 8016c8a:	440b      	add	r3, r1
 8016c8c:	3314      	adds	r3, #20
 8016c8e:	2203      	movs	r2, #3
 8016c90:	701a      	strb	r2, [r3, #0]
 8016c92:	e02d      	b.n	8016cf0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016c94:	79fa      	ldrb	r2, [r7, #7]
 8016c96:	4923      	ldr	r1, [pc, #140]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016c98:	4613      	mov	r3, r2
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	4413      	add	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	440b      	add	r3, r1
 8016ca2:	3312      	adds	r3, #18
 8016ca4:	881b      	ldrh	r3, [r3, #0]
 8016ca6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016caa:	d321      	bcc.n	8016cf0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016cac:	79fa      	ldrb	r2, [r7, #7]
 8016cae:	4613      	mov	r3, r2
 8016cb0:	005b      	lsls	r3, r3, #1
 8016cb2:	4413      	add	r3, r2
 8016cb4:	00db      	lsls	r3, r3, #3
 8016cb6:	4a1b      	ldr	r2, [pc, #108]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016cb8:	4413      	add	r3, r2
 8016cba:	1d19      	adds	r1, r3, #4
 8016cbc:	79fa      	ldrb	r2, [r7, #7]
 8016cbe:	4613      	mov	r3, r2
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	4413      	add	r3, r2
 8016cc4:	00db      	lsls	r3, r3, #3
 8016cc6:	3308      	adds	r3, #8
 8016cc8:	4a16      	ldr	r2, [pc, #88]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016cca:	4413      	add	r3, r2
 8016ccc:	3304      	adds	r3, #4
 8016cce:	461a      	mov	r2, r3
 8016cd0:	68f8      	ldr	r0, [r7, #12]
 8016cd2:	f000 fafb 	bl	80172cc <etharp_request_dst>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d109      	bne.n	8016cf0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016cdc:	79fa      	ldrb	r2, [r7, #7]
 8016cde:	4911      	ldr	r1, [pc, #68]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016ce0:	4613      	mov	r3, r2
 8016ce2:	005b      	lsls	r3, r3, #1
 8016ce4:	4413      	add	r3, r2
 8016ce6:	00db      	lsls	r3, r3, #3
 8016ce8:	440b      	add	r3, r1
 8016cea:	3314      	adds	r3, #20
 8016cec:	2203      	movs	r2, #3
 8016cee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016cf6:	79fa      	ldrb	r2, [r7, #7]
 8016cf8:	4613      	mov	r3, r2
 8016cfa:	005b      	lsls	r3, r3, #1
 8016cfc:	4413      	add	r3, r2
 8016cfe:	00db      	lsls	r3, r3, #3
 8016d00:	3308      	adds	r3, #8
 8016d02:	4a08      	ldr	r2, [pc, #32]	; (8016d24 <etharp_output_to_arp_index+0x124>)
 8016d04:	4413      	add	r3, r2
 8016d06:	1d1a      	adds	r2, r3, #4
 8016d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d0c:	9300      	str	r3, [sp, #0]
 8016d0e:	4613      	mov	r3, r2
 8016d10:	460a      	mov	r2, r1
 8016d12:	68b9      	ldr	r1, [r7, #8]
 8016d14:	68f8      	ldr	r0, [r7, #12]
 8016d16:	f002 f815 	bl	8018d44 <ethernet_output>
 8016d1a:	4603      	mov	r3, r0
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3710      	adds	r7, #16
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}
 8016d24:	200214e8 	.word	0x200214e8
 8016d28:	080212fc 	.word	0x080212fc
 8016d2c:	0802146c 	.word	0x0802146c
 8016d30:	08021374 	.word	0x08021374

08016d34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b08a      	sub	sp, #40	; 0x28
 8016d38:	af02      	add	r7, sp, #8
 8016d3a:	60f8      	str	r0, [r7, #12]
 8016d3c:	60b9      	str	r1, [r7, #8]
 8016d3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d106      	bne.n	8016d58 <etharp_output+0x24>
 8016d4a:	4b73      	ldr	r3, [pc, #460]	; (8016f18 <etharp_output+0x1e4>)
 8016d4c:	f240 321e 	movw	r2, #798	; 0x31e
 8016d50:	4972      	ldr	r1, [pc, #456]	; (8016f1c <etharp_output+0x1e8>)
 8016d52:	4873      	ldr	r0, [pc, #460]	; (8016f20 <etharp_output+0x1ec>)
 8016d54:	f003 f8e2 	bl	8019f1c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	d106      	bne.n	8016d6c <etharp_output+0x38>
 8016d5e:	4b6e      	ldr	r3, [pc, #440]	; (8016f18 <etharp_output+0x1e4>)
 8016d60:	f240 321f 	movw	r2, #799	; 0x31f
 8016d64:	496f      	ldr	r1, [pc, #444]	; (8016f24 <etharp_output+0x1f0>)
 8016d66:	486e      	ldr	r0, [pc, #440]	; (8016f20 <etharp_output+0x1ec>)
 8016d68:	f003 f8d8 	bl	8019f1c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d106      	bne.n	8016d80 <etharp_output+0x4c>
 8016d72:	4b69      	ldr	r3, [pc, #420]	; (8016f18 <etharp_output+0x1e4>)
 8016d74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016d78:	496b      	ldr	r1, [pc, #428]	; (8016f28 <etharp_output+0x1f4>)
 8016d7a:	4869      	ldr	r0, [pc, #420]	; (8016f20 <etharp_output+0x1ec>)
 8016d7c:	f003 f8ce 	bl	8019f1c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	68f9      	ldr	r1, [r7, #12]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f000 ff14 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d002      	beq.n	8016d98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016d92:	4b66      	ldr	r3, [pc, #408]	; (8016f2c <etharp_output+0x1f8>)
 8016d94:	61fb      	str	r3, [r7, #28]
 8016d96:	e0af      	b.n	8016ef8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016da0:	2be0      	cmp	r3, #224	; 0xe0
 8016da2:	d118      	bne.n	8016dd6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016da4:	2301      	movs	r3, #1
 8016da6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016da8:	2300      	movs	r3, #0
 8016daa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016dac:	235e      	movs	r3, #94	; 0x5e
 8016dae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	3301      	adds	r3, #1
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016dba:	b2db      	uxtb	r3, r3
 8016dbc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	3302      	adds	r3, #2
 8016dc2:	781b      	ldrb	r3, [r3, #0]
 8016dc4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	3303      	adds	r3, #3
 8016dca:	781b      	ldrb	r3, [r3, #0]
 8016dcc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016dce:	f107 0310 	add.w	r3, r7, #16
 8016dd2:	61fb      	str	r3, [r7, #28]
 8016dd4:	e090      	b.n	8016ef8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	3304      	adds	r3, #4
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	405a      	eors	r2, r3
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	3308      	adds	r3, #8
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	4013      	ands	r3, r2
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d012      	beq.n	8016e14 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016df4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016df8:	4293      	cmp	r3, r2
 8016dfa:	d00b      	beq.n	8016e14 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	330c      	adds	r3, #12
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d003      	beq.n	8016e0e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	330c      	adds	r3, #12
 8016e0a:	61bb      	str	r3, [r7, #24]
 8016e0c:	e002      	b.n	8016e14 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016e0e:	f06f 0303 	mvn.w	r3, #3
 8016e12:	e07d      	b.n	8016f10 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e14:	4b46      	ldr	r3, [pc, #280]	; (8016f30 <etharp_output+0x1fc>)
 8016e16:	781b      	ldrb	r3, [r3, #0]
 8016e18:	4619      	mov	r1, r3
 8016e1a:	4a46      	ldr	r2, [pc, #280]	; (8016f34 <etharp_output+0x200>)
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	005b      	lsls	r3, r3, #1
 8016e20:	440b      	add	r3, r1
 8016e22:	00db      	lsls	r3, r3, #3
 8016e24:	4413      	add	r3, r2
 8016e26:	3314      	adds	r3, #20
 8016e28:	781b      	ldrb	r3, [r3, #0]
 8016e2a:	2b01      	cmp	r3, #1
 8016e2c:	d925      	bls.n	8016e7a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016e2e:	4b40      	ldr	r3, [pc, #256]	; (8016f30 <etharp_output+0x1fc>)
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	4619      	mov	r1, r3
 8016e34:	4a3f      	ldr	r2, [pc, #252]	; (8016f34 <etharp_output+0x200>)
 8016e36:	460b      	mov	r3, r1
 8016e38:	005b      	lsls	r3, r3, #1
 8016e3a:	440b      	add	r3, r1
 8016e3c:	00db      	lsls	r3, r3, #3
 8016e3e:	4413      	add	r3, r2
 8016e40:	3308      	adds	r3, #8
 8016e42:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e44:	68fa      	ldr	r2, [r7, #12]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d117      	bne.n	8016e7a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016e4a:	69bb      	ldr	r3, [r7, #24]
 8016e4c:	681a      	ldr	r2, [r3, #0]
 8016e4e:	4b38      	ldr	r3, [pc, #224]	; (8016f30 <etharp_output+0x1fc>)
 8016e50:	781b      	ldrb	r3, [r3, #0]
 8016e52:	4618      	mov	r0, r3
 8016e54:	4937      	ldr	r1, [pc, #220]	; (8016f34 <etharp_output+0x200>)
 8016e56:	4603      	mov	r3, r0
 8016e58:	005b      	lsls	r3, r3, #1
 8016e5a:	4403      	add	r3, r0
 8016e5c:	00db      	lsls	r3, r3, #3
 8016e5e:	440b      	add	r3, r1
 8016e60:	3304      	adds	r3, #4
 8016e62:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016e64:	429a      	cmp	r2, r3
 8016e66:	d108      	bne.n	8016e7a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016e68:	4b31      	ldr	r3, [pc, #196]	; (8016f30 <etharp_output+0x1fc>)
 8016e6a:	781b      	ldrb	r3, [r3, #0]
 8016e6c:	461a      	mov	r2, r3
 8016e6e:	68b9      	ldr	r1, [r7, #8]
 8016e70:	68f8      	ldr	r0, [r7, #12]
 8016e72:	f7ff fec5 	bl	8016c00 <etharp_output_to_arp_index>
 8016e76:	4603      	mov	r3, r0
 8016e78:	e04a      	b.n	8016f10 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	75fb      	strb	r3, [r7, #23]
 8016e7e:	e031      	b.n	8016ee4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016e80:	7dfa      	ldrb	r2, [r7, #23]
 8016e82:	492c      	ldr	r1, [pc, #176]	; (8016f34 <etharp_output+0x200>)
 8016e84:	4613      	mov	r3, r2
 8016e86:	005b      	lsls	r3, r3, #1
 8016e88:	4413      	add	r3, r2
 8016e8a:	00db      	lsls	r3, r3, #3
 8016e8c:	440b      	add	r3, r1
 8016e8e:	3314      	adds	r3, #20
 8016e90:	781b      	ldrb	r3, [r3, #0]
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d923      	bls.n	8016ede <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016e96:	7dfa      	ldrb	r2, [r7, #23]
 8016e98:	4926      	ldr	r1, [pc, #152]	; (8016f34 <etharp_output+0x200>)
 8016e9a:	4613      	mov	r3, r2
 8016e9c:	005b      	lsls	r3, r3, #1
 8016e9e:	4413      	add	r3, r2
 8016ea0:	00db      	lsls	r3, r3, #3
 8016ea2:	440b      	add	r3, r1
 8016ea4:	3308      	adds	r3, #8
 8016ea6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ea8:	68fa      	ldr	r2, [r7, #12]
 8016eaa:	429a      	cmp	r2, r3
 8016eac:	d117      	bne.n	8016ede <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016eae:	69bb      	ldr	r3, [r7, #24]
 8016eb0:	6819      	ldr	r1, [r3, #0]
 8016eb2:	7dfa      	ldrb	r2, [r7, #23]
 8016eb4:	481f      	ldr	r0, [pc, #124]	; (8016f34 <etharp_output+0x200>)
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	4403      	add	r3, r0
 8016ec0:	3304      	adds	r3, #4
 8016ec2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016ec4:	4299      	cmp	r1, r3
 8016ec6:	d10a      	bne.n	8016ede <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016ec8:	4a19      	ldr	r2, [pc, #100]	; (8016f30 <etharp_output+0x1fc>)
 8016eca:	7dfb      	ldrb	r3, [r7, #23]
 8016ecc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016ece:	7dfb      	ldrb	r3, [r7, #23]
 8016ed0:	461a      	mov	r2, r3
 8016ed2:	68b9      	ldr	r1, [r7, #8]
 8016ed4:	68f8      	ldr	r0, [r7, #12]
 8016ed6:	f7ff fe93 	bl	8016c00 <etharp_output_to_arp_index>
 8016eda:	4603      	mov	r3, r0
 8016edc:	e018      	b.n	8016f10 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016ede:	7dfb      	ldrb	r3, [r7, #23]
 8016ee0:	3301      	adds	r3, #1
 8016ee2:	75fb      	strb	r3, [r7, #23]
 8016ee4:	7dfb      	ldrb	r3, [r7, #23]
 8016ee6:	2b09      	cmp	r3, #9
 8016ee8:	d9ca      	bls.n	8016e80 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016eea:	68ba      	ldr	r2, [r7, #8]
 8016eec:	69b9      	ldr	r1, [r7, #24]
 8016eee:	68f8      	ldr	r0, [r7, #12]
 8016ef0:	f000 f822 	bl	8016f38 <etharp_query>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	e00b      	b.n	8016f10 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016efe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f02:	9300      	str	r3, [sp, #0]
 8016f04:	69fb      	ldr	r3, [r7, #28]
 8016f06:	68b9      	ldr	r1, [r7, #8]
 8016f08:	68f8      	ldr	r0, [r7, #12]
 8016f0a:	f001 ff1b 	bl	8018d44 <ethernet_output>
 8016f0e:	4603      	mov	r3, r0
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	3720      	adds	r7, #32
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}
 8016f18:	080212fc 	.word	0x080212fc
 8016f1c:	0802144c 	.word	0x0802144c
 8016f20:	08021374 	.word	0x08021374
 8016f24:	0802149c 	.word	0x0802149c
 8016f28:	0802143c 	.word	0x0802143c
 8016f2c:	08021b98 	.word	0x08021b98
 8016f30:	200215d8 	.word	0x200215d8
 8016f34:	200214e8 	.word	0x200214e8

08016f38 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b08c      	sub	sp, #48	; 0x30
 8016f3c:	af02      	add	r7, sp, #8
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	60b9      	str	r1, [r7, #8]
 8016f42:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	332a      	adds	r3, #42	; 0x2a
 8016f48:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016f4a:	23ff      	movs	r3, #255	; 0xff
 8016f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016f50:	2300      	movs	r3, #0
 8016f52:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	68f9      	ldr	r1, [r7, #12]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f000 fe2a 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 8016f60:	4603      	mov	r3, r0
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d10c      	bne.n	8016f80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f66:	68bb      	ldr	r3, [r7, #8]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f6e:	2be0      	cmp	r3, #224	; 0xe0
 8016f70:	d006      	beq.n	8016f80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f72:	68bb      	ldr	r3, [r7, #8]
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d003      	beq.n	8016f80 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d102      	bne.n	8016f86 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016f80:	f06f 030f 	mvn.w	r3, #15
 8016f84:	e102      	b.n	801718c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016f86:	68fa      	ldr	r2, [r7, #12]
 8016f88:	2101      	movs	r1, #1
 8016f8a:	68b8      	ldr	r0, [r7, #8]
 8016f8c:	f7ff fb5c 	bl	8016648 <etharp_find_entry>
 8016f90:	4603      	mov	r3, r0
 8016f92:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016f94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	da02      	bge.n	8016fa2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016f9c:	8a7b      	ldrh	r3, [r7, #18]
 8016f9e:	b25b      	sxtb	r3, r3
 8016fa0:	e0f4      	b.n	801718c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016fa2:	8a7b      	ldrh	r3, [r7, #18]
 8016fa4:	2b7e      	cmp	r3, #126	; 0x7e
 8016fa6:	d906      	bls.n	8016fb6 <etharp_query+0x7e>
 8016fa8:	4b7a      	ldr	r3, [pc, #488]	; (8017194 <etharp_query+0x25c>)
 8016faa:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016fae:	497a      	ldr	r1, [pc, #488]	; (8017198 <etharp_query+0x260>)
 8016fb0:	487a      	ldr	r0, [pc, #488]	; (801719c <etharp_query+0x264>)
 8016fb2:	f002 ffb3 	bl	8019f1c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016fb6:	8a7b      	ldrh	r3, [r7, #18]
 8016fb8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016fba:	7c7a      	ldrb	r2, [r7, #17]
 8016fbc:	4978      	ldr	r1, [pc, #480]	; (80171a0 <etharp_query+0x268>)
 8016fbe:	4613      	mov	r3, r2
 8016fc0:	005b      	lsls	r3, r3, #1
 8016fc2:	4413      	add	r3, r2
 8016fc4:	00db      	lsls	r3, r3, #3
 8016fc6:	440b      	add	r3, r1
 8016fc8:	3314      	adds	r3, #20
 8016fca:	781b      	ldrb	r3, [r3, #0]
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d115      	bne.n	8016ffc <etharp_query+0xc4>
    is_new_entry = 1;
 8016fd0:	2301      	movs	r3, #1
 8016fd2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016fd4:	7c7a      	ldrb	r2, [r7, #17]
 8016fd6:	4972      	ldr	r1, [pc, #456]	; (80171a0 <etharp_query+0x268>)
 8016fd8:	4613      	mov	r3, r2
 8016fda:	005b      	lsls	r3, r3, #1
 8016fdc:	4413      	add	r3, r2
 8016fde:	00db      	lsls	r3, r3, #3
 8016fe0:	440b      	add	r3, r1
 8016fe2:	3314      	adds	r3, #20
 8016fe4:	2201      	movs	r2, #1
 8016fe6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016fe8:	7c7a      	ldrb	r2, [r7, #17]
 8016fea:	496d      	ldr	r1, [pc, #436]	; (80171a0 <etharp_query+0x268>)
 8016fec:	4613      	mov	r3, r2
 8016fee:	005b      	lsls	r3, r3, #1
 8016ff0:	4413      	add	r3, r2
 8016ff2:	00db      	lsls	r3, r3, #3
 8016ff4:	440b      	add	r3, r1
 8016ff6:	3308      	adds	r3, #8
 8016ff8:	68fa      	ldr	r2, [r7, #12]
 8016ffa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016ffc:	7c7a      	ldrb	r2, [r7, #17]
 8016ffe:	4968      	ldr	r1, [pc, #416]	; (80171a0 <etharp_query+0x268>)
 8017000:	4613      	mov	r3, r2
 8017002:	005b      	lsls	r3, r3, #1
 8017004:	4413      	add	r3, r2
 8017006:	00db      	lsls	r3, r3, #3
 8017008:	440b      	add	r3, r1
 801700a:	3314      	adds	r3, #20
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	2b01      	cmp	r3, #1
 8017010:	d011      	beq.n	8017036 <etharp_query+0xfe>
 8017012:	7c7a      	ldrb	r2, [r7, #17]
 8017014:	4962      	ldr	r1, [pc, #392]	; (80171a0 <etharp_query+0x268>)
 8017016:	4613      	mov	r3, r2
 8017018:	005b      	lsls	r3, r3, #1
 801701a:	4413      	add	r3, r2
 801701c:	00db      	lsls	r3, r3, #3
 801701e:	440b      	add	r3, r1
 8017020:	3314      	adds	r3, #20
 8017022:	781b      	ldrb	r3, [r3, #0]
 8017024:	2b01      	cmp	r3, #1
 8017026:	d806      	bhi.n	8017036 <etharp_query+0xfe>
 8017028:	4b5a      	ldr	r3, [pc, #360]	; (8017194 <etharp_query+0x25c>)
 801702a:	f240 32cf 	movw	r2, #975	; 0x3cf
 801702e:	495d      	ldr	r1, [pc, #372]	; (80171a4 <etharp_query+0x26c>)
 8017030:	485a      	ldr	r0, [pc, #360]	; (801719c <etharp_query+0x264>)
 8017032:	f002 ff73 	bl	8019f1c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017036:	6a3b      	ldr	r3, [r7, #32]
 8017038:	2b00      	cmp	r3, #0
 801703a:	d102      	bne.n	8017042 <etharp_query+0x10a>
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	2b00      	cmp	r3, #0
 8017040:	d10c      	bne.n	801705c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017042:	68b9      	ldr	r1, [r7, #8]
 8017044:	68f8      	ldr	r0, [r7, #12]
 8017046:	f000 f963 	bl	8017310 <etharp_request>
 801704a:	4603      	mov	r3, r0
 801704c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d102      	bne.n	801705c <etharp_query+0x124>
      return result;
 8017056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801705a:	e097      	b.n	801718c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	2b00      	cmp	r3, #0
 8017060:	d106      	bne.n	8017070 <etharp_query+0x138>
 8017062:	4b4c      	ldr	r3, [pc, #304]	; (8017194 <etharp_query+0x25c>)
 8017064:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017068:	494f      	ldr	r1, [pc, #316]	; (80171a8 <etharp_query+0x270>)
 801706a:	484c      	ldr	r0, [pc, #304]	; (801719c <etharp_query+0x264>)
 801706c:	f002 ff56 	bl	8019f1c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017070:	7c7a      	ldrb	r2, [r7, #17]
 8017072:	494b      	ldr	r1, [pc, #300]	; (80171a0 <etharp_query+0x268>)
 8017074:	4613      	mov	r3, r2
 8017076:	005b      	lsls	r3, r3, #1
 8017078:	4413      	add	r3, r2
 801707a:	00db      	lsls	r3, r3, #3
 801707c:	440b      	add	r3, r1
 801707e:	3314      	adds	r3, #20
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	2b01      	cmp	r3, #1
 8017084:	d918      	bls.n	80170b8 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017086:	4a49      	ldr	r2, [pc, #292]	; (80171ac <etharp_query+0x274>)
 8017088:	7c7b      	ldrb	r3, [r7, #17]
 801708a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801708c:	7c7a      	ldrb	r2, [r7, #17]
 801708e:	4613      	mov	r3, r2
 8017090:	005b      	lsls	r3, r3, #1
 8017092:	4413      	add	r3, r2
 8017094:	00db      	lsls	r3, r3, #3
 8017096:	3308      	adds	r3, #8
 8017098:	4a41      	ldr	r2, [pc, #260]	; (80171a0 <etharp_query+0x268>)
 801709a:	4413      	add	r3, r2
 801709c:	1d1a      	adds	r2, r3, #4
 801709e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	4613      	mov	r3, r2
 80170a6:	697a      	ldr	r2, [r7, #20]
 80170a8:	6879      	ldr	r1, [r7, #4]
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f001 fe4a 	bl	8018d44 <ethernet_output>
 80170b0:	4603      	mov	r3, r0
 80170b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80170b6:	e067      	b.n	8017188 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80170b8:	7c7a      	ldrb	r2, [r7, #17]
 80170ba:	4939      	ldr	r1, [pc, #228]	; (80171a0 <etharp_query+0x268>)
 80170bc:	4613      	mov	r3, r2
 80170be:	005b      	lsls	r3, r3, #1
 80170c0:	4413      	add	r3, r2
 80170c2:	00db      	lsls	r3, r3, #3
 80170c4:	440b      	add	r3, r1
 80170c6:	3314      	adds	r3, #20
 80170c8:	781b      	ldrb	r3, [r3, #0]
 80170ca:	2b01      	cmp	r3, #1
 80170cc:	d15c      	bne.n	8017188 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80170ce:	2300      	movs	r3, #0
 80170d0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80170d6:	e01c      	b.n	8017112 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80170d8:	69fb      	ldr	r3, [r7, #28]
 80170da:	895a      	ldrh	r2, [r3, #10]
 80170dc:	69fb      	ldr	r3, [r7, #28]
 80170de:	891b      	ldrh	r3, [r3, #8]
 80170e0:	429a      	cmp	r2, r3
 80170e2:	d10a      	bne.n	80170fa <etharp_query+0x1c2>
 80170e4:	69fb      	ldr	r3, [r7, #28]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d006      	beq.n	80170fa <etharp_query+0x1c2>
 80170ec:	4b29      	ldr	r3, [pc, #164]	; (8017194 <etharp_query+0x25c>)
 80170ee:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80170f2:	492f      	ldr	r1, [pc, #188]	; (80171b0 <etharp_query+0x278>)
 80170f4:	4829      	ldr	r0, [pc, #164]	; (801719c <etharp_query+0x264>)
 80170f6:	f002 ff11 	bl	8019f1c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80170fa:	69fb      	ldr	r3, [r7, #28]
 80170fc:	7b1b      	ldrb	r3, [r3, #12]
 80170fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017102:	2b00      	cmp	r3, #0
 8017104:	d002      	beq.n	801710c <etharp_query+0x1d4>
        copy_needed = 1;
 8017106:	2301      	movs	r3, #1
 8017108:	61bb      	str	r3, [r7, #24]
        break;
 801710a:	e005      	b.n	8017118 <etharp_query+0x1e0>
      }
      p = p->next;
 801710c:	69fb      	ldr	r3, [r7, #28]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017112:	69fb      	ldr	r3, [r7, #28]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d1df      	bne.n	80170d8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8017118:	69bb      	ldr	r3, [r7, #24]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d007      	beq.n	801712e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801711e:	687a      	ldr	r2, [r7, #4]
 8017120:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017124:	200e      	movs	r0, #14
 8017126:	f7f6 fadb 	bl	800d6e0 <pbuf_clone>
 801712a:	61f8      	str	r0, [r7, #28]
 801712c:	e004      	b.n	8017138 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017132:	69f8      	ldr	r0, [r7, #28]
 8017134:	f7f5 ffca 	bl	800d0cc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017138:	69fb      	ldr	r3, [r7, #28]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d021      	beq.n	8017182 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801713e:	7c7a      	ldrb	r2, [r7, #17]
 8017140:	4917      	ldr	r1, [pc, #92]	; (80171a0 <etharp_query+0x268>)
 8017142:	4613      	mov	r3, r2
 8017144:	005b      	lsls	r3, r3, #1
 8017146:	4413      	add	r3, r2
 8017148:	00db      	lsls	r3, r3, #3
 801714a:	440b      	add	r3, r1
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d00a      	beq.n	8017168 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017152:	7c7a      	ldrb	r2, [r7, #17]
 8017154:	4912      	ldr	r1, [pc, #72]	; (80171a0 <etharp_query+0x268>)
 8017156:	4613      	mov	r3, r2
 8017158:	005b      	lsls	r3, r3, #1
 801715a:	4413      	add	r3, r2
 801715c:	00db      	lsls	r3, r3, #3
 801715e:	440b      	add	r3, r1
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	4618      	mov	r0, r3
 8017164:	f7f5 ff0c 	bl	800cf80 <pbuf_free>
      }
      arp_table[i].q = p;
 8017168:	7c7a      	ldrb	r2, [r7, #17]
 801716a:	490d      	ldr	r1, [pc, #52]	; (80171a0 <etharp_query+0x268>)
 801716c:	4613      	mov	r3, r2
 801716e:	005b      	lsls	r3, r3, #1
 8017170:	4413      	add	r3, r2
 8017172:	00db      	lsls	r3, r3, #3
 8017174:	440b      	add	r3, r1
 8017176:	69fa      	ldr	r2, [r7, #28]
 8017178:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801717a:	2300      	movs	r3, #0
 801717c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017180:	e002      	b.n	8017188 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017182:	23ff      	movs	r3, #255	; 0xff
 8017184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017188:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801718c:	4618      	mov	r0, r3
 801718e:	3728      	adds	r7, #40	; 0x28
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	080212fc 	.word	0x080212fc
 8017198:	080214a8 	.word	0x080214a8
 801719c:	08021374 	.word	0x08021374
 80171a0:	200214e8 	.word	0x200214e8
 80171a4:	080214b8 	.word	0x080214b8
 80171a8:	0802149c 	.word	0x0802149c
 80171ac:	200215d8 	.word	0x200215d8
 80171b0:	080214e0 	.word	0x080214e0

080171b4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b08a      	sub	sp, #40	; 0x28
 80171b8:	af02      	add	r7, sp, #8
 80171ba:	60f8      	str	r0, [r7, #12]
 80171bc:	60b9      	str	r1, [r7, #8]
 80171be:	607a      	str	r2, [r7, #4]
 80171c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80171c2:	2300      	movs	r3, #0
 80171c4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d106      	bne.n	80171da <etharp_raw+0x26>
 80171cc:	4b3a      	ldr	r3, [pc, #232]	; (80172b8 <etharp_raw+0x104>)
 80171ce:	f240 4257 	movw	r2, #1111	; 0x457
 80171d2:	493a      	ldr	r1, [pc, #232]	; (80172bc <etharp_raw+0x108>)
 80171d4:	483a      	ldr	r0, [pc, #232]	; (80172c0 <etharp_raw+0x10c>)
 80171d6:	f002 fea1 	bl	8019f1c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80171da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80171de:	211c      	movs	r1, #28
 80171e0:	200e      	movs	r0, #14
 80171e2:	f7f5 fbed 	bl	800c9c0 <pbuf_alloc>
 80171e6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80171e8:	69bb      	ldr	r3, [r7, #24]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d102      	bne.n	80171f4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80171ee:	f04f 33ff 	mov.w	r3, #4294967295
 80171f2:	e05d      	b.n	80172b0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80171f4:	69bb      	ldr	r3, [r7, #24]
 80171f6:	895b      	ldrh	r3, [r3, #10]
 80171f8:	2b1b      	cmp	r3, #27
 80171fa:	d806      	bhi.n	801720a <etharp_raw+0x56>
 80171fc:	4b2e      	ldr	r3, [pc, #184]	; (80172b8 <etharp_raw+0x104>)
 80171fe:	f240 4263 	movw	r2, #1123	; 0x463
 8017202:	4930      	ldr	r1, [pc, #192]	; (80172c4 <etharp_raw+0x110>)
 8017204:	482e      	ldr	r0, [pc, #184]	; (80172c0 <etharp_raw+0x10c>)
 8017206:	f002 fe89 	bl	8019f1c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801720a:	69bb      	ldr	r3, [r7, #24]
 801720c:	685b      	ldr	r3, [r3, #4]
 801720e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017210:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017212:	4618      	mov	r0, r3
 8017214:	f7f3 fb2c 	bl	800a870 <lwip_htons>
 8017218:	4603      	mov	r3, r0
 801721a:	461a      	mov	r2, r3
 801721c:	697b      	ldr	r3, [r7, #20]
 801721e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017226:	2b06      	cmp	r3, #6
 8017228:	d006      	beq.n	8017238 <etharp_raw+0x84>
 801722a:	4b23      	ldr	r3, [pc, #140]	; (80172b8 <etharp_raw+0x104>)
 801722c:	f240 426a 	movw	r2, #1130	; 0x46a
 8017230:	4925      	ldr	r1, [pc, #148]	; (80172c8 <etharp_raw+0x114>)
 8017232:	4823      	ldr	r0, [pc, #140]	; (80172c0 <etharp_raw+0x10c>)
 8017234:	f002 fe72 	bl	8019f1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017238:	697b      	ldr	r3, [r7, #20]
 801723a:	3308      	adds	r3, #8
 801723c:	2206      	movs	r2, #6
 801723e:	6839      	ldr	r1, [r7, #0]
 8017240:	4618      	mov	r0, r3
 8017242:	f002 f800 	bl	8019246 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017246:	697b      	ldr	r3, [r7, #20]
 8017248:	3312      	adds	r3, #18
 801724a:	2206      	movs	r2, #6
 801724c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801724e:	4618      	mov	r0, r3
 8017250:	f001 fff9 	bl	8019246 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017254:	697b      	ldr	r3, [r7, #20]
 8017256:	330e      	adds	r3, #14
 8017258:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801725a:	6812      	ldr	r2, [r2, #0]
 801725c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801725e:	697b      	ldr	r3, [r7, #20]
 8017260:	3318      	adds	r3, #24
 8017262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017264:	6812      	ldr	r2, [r2, #0]
 8017266:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	2200      	movs	r2, #0
 801726c:	701a      	strb	r2, [r3, #0]
 801726e:	2200      	movs	r2, #0
 8017270:	f042 0201 	orr.w	r2, r2, #1
 8017274:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	2200      	movs	r2, #0
 801727a:	f042 0208 	orr.w	r2, r2, #8
 801727e:	709a      	strb	r2, [r3, #2]
 8017280:	2200      	movs	r2, #0
 8017282:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	2206      	movs	r2, #6
 8017288:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801728a:	697b      	ldr	r3, [r7, #20]
 801728c:	2204      	movs	r2, #4
 801728e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017290:	f640 0306 	movw	r3, #2054	; 0x806
 8017294:	9300      	str	r3, [sp, #0]
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	68ba      	ldr	r2, [r7, #8]
 801729a:	69b9      	ldr	r1, [r7, #24]
 801729c:	68f8      	ldr	r0, [r7, #12]
 801729e:	f001 fd51 	bl	8018d44 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80172a2:	69b8      	ldr	r0, [r7, #24]
 80172a4:	f7f5 fe6c 	bl	800cf80 <pbuf_free>
  p = NULL;
 80172a8:	2300      	movs	r3, #0
 80172aa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80172ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	3720      	adds	r7, #32
 80172b4:	46bd      	mov	sp, r7
 80172b6:	bd80      	pop	{r7, pc}
 80172b8:	080212fc 	.word	0x080212fc
 80172bc:	0802144c 	.word	0x0802144c
 80172c0:	08021374 	.word	0x08021374
 80172c4:	080214fc 	.word	0x080214fc
 80172c8:	08021530 	.word	0x08021530

080172cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b088      	sub	sp, #32
 80172d0:	af04      	add	r7, sp, #16
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80172e8:	2201      	movs	r2, #1
 80172ea:	9203      	str	r2, [sp, #12]
 80172ec:	68ba      	ldr	r2, [r7, #8]
 80172ee:	9202      	str	r2, [sp, #8]
 80172f0:	4a06      	ldr	r2, [pc, #24]	; (801730c <etharp_request_dst+0x40>)
 80172f2:	9201      	str	r2, [sp, #4]
 80172f4:	9300      	str	r3, [sp, #0]
 80172f6:	4603      	mov	r3, r0
 80172f8:	687a      	ldr	r2, [r7, #4]
 80172fa:	68f8      	ldr	r0, [r7, #12]
 80172fc:	f7ff ff5a 	bl	80171b4 <etharp_raw>
 8017300:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017302:	4618      	mov	r0, r3
 8017304:	3710      	adds	r7, #16
 8017306:	46bd      	mov	sp, r7
 8017308:	bd80      	pop	{r7, pc}
 801730a:	bf00      	nop
 801730c:	08021ba0 	.word	0x08021ba0

08017310 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
 8017318:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801731a:	4a05      	ldr	r2, [pc, #20]	; (8017330 <etharp_request+0x20>)
 801731c:	6839      	ldr	r1, [r7, #0]
 801731e:	6878      	ldr	r0, [r7, #4]
 8017320:	f7ff ffd4 	bl	80172cc <etharp_request_dst>
 8017324:	4603      	mov	r3, r0
}
 8017326:	4618      	mov	r0, r3
 8017328:	3708      	adds	r7, #8
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	08021b98 	.word	0x08021b98

08017334 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b08e      	sub	sp, #56	; 0x38
 8017338:	af04      	add	r7, sp, #16
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801733e:	4b79      	ldr	r3, [pc, #484]	; (8017524 <icmp_input+0x1f0>)
 8017340:	689b      	ldr	r3, [r3, #8]
 8017342:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	f003 030f 	and.w	r3, r3, #15
 801734c:	b2db      	uxtb	r3, r3
 801734e:	009b      	lsls	r3, r3, #2
 8017350:	b2db      	uxtb	r3, r3
 8017352:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017356:	2b13      	cmp	r3, #19
 8017358:	f240 80cd 	bls.w	80174f6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	895b      	ldrh	r3, [r3, #10]
 8017360:	2b03      	cmp	r3, #3
 8017362:	f240 80ca 	bls.w	80174fa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	685b      	ldr	r3, [r3, #4]
 801736a:	781b      	ldrb	r3, [r3, #0]
 801736c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017370:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017374:	2b00      	cmp	r3, #0
 8017376:	f000 80b7 	beq.w	80174e8 <icmp_input+0x1b4>
 801737a:	2b08      	cmp	r3, #8
 801737c:	f040 80b7 	bne.w	80174ee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017380:	4b69      	ldr	r3, [pc, #420]	; (8017528 <icmp_input+0x1f4>)
 8017382:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017384:	4b67      	ldr	r3, [pc, #412]	; (8017524 <icmp_input+0x1f0>)
 8017386:	695b      	ldr	r3, [r3, #20]
 8017388:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801738c:	2be0      	cmp	r3, #224	; 0xe0
 801738e:	f000 80bb 	beq.w	8017508 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017392:	4b64      	ldr	r3, [pc, #400]	; (8017524 <icmp_input+0x1f0>)
 8017394:	695a      	ldr	r2, [r3, #20]
 8017396:	4b63      	ldr	r3, [pc, #396]	; (8017524 <icmp_input+0x1f0>)
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	4619      	mov	r1, r3
 801739c:	4610      	mov	r0, r2
 801739e:	f000 fc09 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 80173a2:	4603      	mov	r3, r0
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	f040 80b1 	bne.w	801750c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	891b      	ldrh	r3, [r3, #8]
 80173ae:	2b07      	cmp	r3, #7
 80173b0:	f240 80a5 	bls.w	80174fe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80173b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173b6:	330e      	adds	r3, #14
 80173b8:	4619      	mov	r1, r3
 80173ba:	6878      	ldr	r0, [r7, #4]
 80173bc:	f7f5 fd4a 	bl	800ce54 <pbuf_add_header>
 80173c0:	4603      	mov	r3, r0
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d04b      	beq.n	801745e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	891a      	ldrh	r2, [r3, #8]
 80173ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173cc:	4413      	add	r3, r2
 80173ce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	891b      	ldrh	r3, [r3, #8]
 80173d4:	8b7a      	ldrh	r2, [r7, #26]
 80173d6:	429a      	cmp	r2, r3
 80173d8:	f0c0 809a 	bcc.w	8017510 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80173dc:	8b7b      	ldrh	r3, [r7, #26]
 80173de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173e2:	4619      	mov	r1, r3
 80173e4:	200e      	movs	r0, #14
 80173e6:	f7f5 faeb 	bl	800c9c0 <pbuf_alloc>
 80173ea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80173ec:	697b      	ldr	r3, [r7, #20]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	f000 8090 	beq.w	8017514 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	895b      	ldrh	r3, [r3, #10]
 80173f8:	461a      	mov	r2, r3
 80173fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173fc:	3308      	adds	r3, #8
 80173fe:	429a      	cmp	r2, r3
 8017400:	d203      	bcs.n	801740a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017402:	6978      	ldr	r0, [r7, #20]
 8017404:	f7f5 fdbc 	bl	800cf80 <pbuf_free>
          goto icmperr;
 8017408:	e085      	b.n	8017516 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801740a:	697b      	ldr	r3, [r7, #20]
 801740c:	685b      	ldr	r3, [r3, #4]
 801740e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017412:	4618      	mov	r0, r3
 8017414:	f001 ff17 	bl	8019246 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801741a:	4619      	mov	r1, r3
 801741c:	6978      	ldr	r0, [r7, #20]
 801741e:	f7f5 fd29 	bl	800ce74 <pbuf_remove_header>
 8017422:	4603      	mov	r3, r0
 8017424:	2b00      	cmp	r3, #0
 8017426:	d009      	beq.n	801743c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017428:	4b40      	ldr	r3, [pc, #256]	; (801752c <icmp_input+0x1f8>)
 801742a:	22b6      	movs	r2, #182	; 0xb6
 801742c:	4940      	ldr	r1, [pc, #256]	; (8017530 <icmp_input+0x1fc>)
 801742e:	4841      	ldr	r0, [pc, #260]	; (8017534 <icmp_input+0x200>)
 8017430:	f002 fd74 	bl	8019f1c <iprintf>
          pbuf_free(r);
 8017434:	6978      	ldr	r0, [r7, #20]
 8017436:	f7f5 fda3 	bl	800cf80 <pbuf_free>
          goto icmperr;
 801743a:	e06c      	b.n	8017516 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801743c:	6879      	ldr	r1, [r7, #4]
 801743e:	6978      	ldr	r0, [r7, #20]
 8017440:	f7f5 fed2 	bl	800d1e8 <pbuf_copy>
 8017444:	4603      	mov	r3, r0
 8017446:	2b00      	cmp	r3, #0
 8017448:	d003      	beq.n	8017452 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801744a:	6978      	ldr	r0, [r7, #20]
 801744c:	f7f5 fd98 	bl	800cf80 <pbuf_free>
          goto icmperr;
 8017450:	e061      	b.n	8017516 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017452:	6878      	ldr	r0, [r7, #4]
 8017454:	f7f5 fd94 	bl	800cf80 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	607b      	str	r3, [r7, #4]
 801745c:	e00f      	b.n	801747e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801745e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017460:	330e      	adds	r3, #14
 8017462:	4619      	mov	r1, r3
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f7f5 fd05 	bl	800ce74 <pbuf_remove_header>
 801746a:	4603      	mov	r3, r0
 801746c:	2b00      	cmp	r3, #0
 801746e:	d006      	beq.n	801747e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017470:	4b2e      	ldr	r3, [pc, #184]	; (801752c <icmp_input+0x1f8>)
 8017472:	22c7      	movs	r2, #199	; 0xc7
 8017474:	4930      	ldr	r1, [pc, #192]	; (8017538 <icmp_input+0x204>)
 8017476:	482f      	ldr	r0, [pc, #188]	; (8017534 <icmp_input+0x200>)
 8017478:	f002 fd50 	bl	8019f1c <iprintf>
          goto icmperr;
 801747c:	e04b      	b.n	8017516 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	685b      	ldr	r3, [r3, #4]
 8017482:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017484:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017486:	4619      	mov	r1, r3
 8017488:	6878      	ldr	r0, [r7, #4]
 801748a:	f7f5 fce3 	bl	800ce54 <pbuf_add_header>
 801748e:	4603      	mov	r3, r0
 8017490:	2b00      	cmp	r3, #0
 8017492:	d12b      	bne.n	80174ec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801749a:	69fb      	ldr	r3, [r7, #28]
 801749c:	681a      	ldr	r2, [r3, #0]
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80174a2:	4b20      	ldr	r3, [pc, #128]	; (8017524 <icmp_input+0x1f0>)
 80174a4:	691a      	ldr	r2, [r3, #16]
 80174a6:	68fb      	ldr	r3, [r7, #12]
 80174a8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80174aa:	693b      	ldr	r3, [r7, #16]
 80174ac:	2200      	movs	r2, #0
 80174ae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80174b0:	693b      	ldr	r3, [r7, #16]
 80174b2:	2200      	movs	r2, #0
 80174b4:	709a      	strb	r2, [r3, #2]
 80174b6:	2200      	movs	r2, #0
 80174b8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80174ba:	68fb      	ldr	r3, [r7, #12]
 80174bc:	22ff      	movs	r2, #255	; 0xff
 80174be:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	2200      	movs	r2, #0
 80174c4:	729a      	strb	r2, [r3, #10]
 80174c6:	2200      	movs	r2, #0
 80174c8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80174ca:	683b      	ldr	r3, [r7, #0]
 80174cc:	9302      	str	r3, [sp, #8]
 80174ce:	2301      	movs	r3, #1
 80174d0:	9301      	str	r3, [sp, #4]
 80174d2:	2300      	movs	r3, #0
 80174d4:	9300      	str	r3, [sp, #0]
 80174d6:	23ff      	movs	r3, #255	; 0xff
 80174d8:	2200      	movs	r2, #0
 80174da:	69f9      	ldr	r1, [r7, #28]
 80174dc:	6878      	ldr	r0, [r7, #4]
 80174de:	f000 fa91 	bl	8017a04 <ip4_output_if>
 80174e2:	4603      	mov	r3, r0
 80174e4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80174e6:	e001      	b.n	80174ec <icmp_input+0x1b8>
      break;
 80174e8:	bf00      	nop
 80174ea:	e000      	b.n	80174ee <icmp_input+0x1ba>
      break;
 80174ec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7f5 fd46 	bl	800cf80 <pbuf_free>
  return;
 80174f4:	e013      	b.n	801751e <icmp_input+0x1ea>
    goto lenerr;
 80174f6:	bf00      	nop
 80174f8:	e002      	b.n	8017500 <icmp_input+0x1cc>
    goto lenerr;
 80174fa:	bf00      	nop
 80174fc:	e000      	b.n	8017500 <icmp_input+0x1cc>
        goto lenerr;
 80174fe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017500:	6878      	ldr	r0, [r7, #4]
 8017502:	f7f5 fd3d 	bl	800cf80 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017506:	e00a      	b.n	801751e <icmp_input+0x1ea>
        goto icmperr;
 8017508:	bf00      	nop
 801750a:	e004      	b.n	8017516 <icmp_input+0x1e2>
        goto icmperr;
 801750c:	bf00      	nop
 801750e:	e002      	b.n	8017516 <icmp_input+0x1e2>
          goto icmperr;
 8017510:	bf00      	nop
 8017512:	e000      	b.n	8017516 <icmp_input+0x1e2>
          goto icmperr;
 8017514:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017516:	6878      	ldr	r0, [r7, #4]
 8017518:	f7f5 fd32 	bl	800cf80 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801751c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801751e:	3728      	adds	r7, #40	; 0x28
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}
 8017524:	20024804 	.word	0x20024804
 8017528:	20024818 	.word	0x20024818
 801752c:	08021574 	.word	0x08021574
 8017530:	080215ac 	.word	0x080215ac
 8017534:	080215e4 	.word	0x080215e4
 8017538:	0802160c 	.word	0x0802160c

0801753c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	460b      	mov	r3, r1
 8017546:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017548:	78fb      	ldrb	r3, [r7, #3]
 801754a:	461a      	mov	r2, r3
 801754c:	2103      	movs	r1, #3
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f000 f814 	bl	801757c <icmp_send_response>
}
 8017554:	bf00      	nop
 8017556:	3708      	adds	r7, #8
 8017558:	46bd      	mov	sp, r7
 801755a:	bd80      	pop	{r7, pc}

0801755c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b082      	sub	sp, #8
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	460b      	mov	r3, r1
 8017566:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017568:	78fb      	ldrb	r3, [r7, #3]
 801756a:	461a      	mov	r2, r3
 801756c:	210b      	movs	r1, #11
 801756e:	6878      	ldr	r0, [r7, #4]
 8017570:	f000 f804 	bl	801757c <icmp_send_response>
}
 8017574:	bf00      	nop
 8017576:	3708      	adds	r7, #8
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}

0801757c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b08c      	sub	sp, #48	; 0x30
 8017580:	af04      	add	r7, sp, #16
 8017582:	6078      	str	r0, [r7, #4]
 8017584:	460b      	mov	r3, r1
 8017586:	70fb      	strb	r3, [r7, #3]
 8017588:	4613      	mov	r3, r2
 801758a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801758c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017590:	2124      	movs	r1, #36	; 0x24
 8017592:	2022      	movs	r0, #34	; 0x22
 8017594:	f7f5 fa14 	bl	800c9c0 <pbuf_alloc>
 8017598:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	2b00      	cmp	r3, #0
 801759e:	d04c      	beq.n	801763a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80175a0:	69fb      	ldr	r3, [r7, #28]
 80175a2:	895b      	ldrh	r3, [r3, #10]
 80175a4:	2b23      	cmp	r3, #35	; 0x23
 80175a6:	d806      	bhi.n	80175b6 <icmp_send_response+0x3a>
 80175a8:	4b26      	ldr	r3, [pc, #152]	; (8017644 <icmp_send_response+0xc8>)
 80175aa:	f240 1269 	movw	r2, #361	; 0x169
 80175ae:	4926      	ldr	r1, [pc, #152]	; (8017648 <icmp_send_response+0xcc>)
 80175b0:	4826      	ldr	r0, [pc, #152]	; (801764c <icmp_send_response+0xd0>)
 80175b2:	f002 fcb3 	bl	8019f1c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	685b      	ldr	r3, [r3, #4]
 80175ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80175bc:	69fb      	ldr	r3, [r7, #28]
 80175be:	685b      	ldr	r3, [r3, #4]
 80175c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80175c2:	697b      	ldr	r3, [r7, #20]
 80175c4:	78fa      	ldrb	r2, [r7, #3]
 80175c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	78ba      	ldrb	r2, [r7, #2]
 80175cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80175ce:	697b      	ldr	r3, [r7, #20]
 80175d0:	2200      	movs	r2, #0
 80175d2:	711a      	strb	r2, [r3, #4]
 80175d4:	2200      	movs	r2, #0
 80175d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	2200      	movs	r2, #0
 80175dc:	719a      	strb	r2, [r3, #6]
 80175de:	2200      	movs	r2, #0
 80175e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80175e2:	69fb      	ldr	r3, [r7, #28]
 80175e4:	685b      	ldr	r3, [r3, #4]
 80175e6:	f103 0008 	add.w	r0, r3, #8
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	685b      	ldr	r3, [r3, #4]
 80175ee:	221c      	movs	r2, #28
 80175f0:	4619      	mov	r1, r3
 80175f2:	f001 fe28 	bl	8019246 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80175f6:	69bb      	ldr	r3, [r7, #24]
 80175f8:	68db      	ldr	r3, [r3, #12]
 80175fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80175fc:	f107 030c 	add.w	r3, r7, #12
 8017600:	4618      	mov	r0, r3
 8017602:	f000 f825 	bl	8017650 <ip4_route>
 8017606:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017608:	693b      	ldr	r3, [r7, #16]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d011      	beq.n	8017632 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	2200      	movs	r2, #0
 8017612:	709a      	strb	r2, [r3, #2]
 8017614:	2200      	movs	r2, #0
 8017616:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017618:	f107 020c 	add.w	r2, r7, #12
 801761c:	693b      	ldr	r3, [r7, #16]
 801761e:	9302      	str	r3, [sp, #8]
 8017620:	2301      	movs	r3, #1
 8017622:	9301      	str	r3, [sp, #4]
 8017624:	2300      	movs	r3, #0
 8017626:	9300      	str	r3, [sp, #0]
 8017628:	23ff      	movs	r3, #255	; 0xff
 801762a:	2100      	movs	r1, #0
 801762c:	69f8      	ldr	r0, [r7, #28]
 801762e:	f000 f9e9 	bl	8017a04 <ip4_output_if>
  }
  pbuf_free(q);
 8017632:	69f8      	ldr	r0, [r7, #28]
 8017634:	f7f5 fca4 	bl	800cf80 <pbuf_free>
 8017638:	e000      	b.n	801763c <icmp_send_response+0xc0>
    return;
 801763a:	bf00      	nop
}
 801763c:	3720      	adds	r7, #32
 801763e:	46bd      	mov	sp, r7
 8017640:	bd80      	pop	{r7, pc}
 8017642:	bf00      	nop
 8017644:	08021574 	.word	0x08021574
 8017648:	08021640 	.word	0x08021640
 801764c:	080215e4 	.word	0x080215e4

08017650 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017650:	b480      	push	{r7}
 8017652:	b085      	sub	sp, #20
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017658:	4b33      	ldr	r3, [pc, #204]	; (8017728 <ip4_route+0xd8>)
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	60fb      	str	r3, [r7, #12]
 801765e:	e036      	b.n	80176ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017666:	f003 0301 	and.w	r3, r3, #1
 801766a:	b2db      	uxtb	r3, r3
 801766c:	2b00      	cmp	r3, #0
 801766e:	d02b      	beq.n	80176c8 <ip4_route+0x78>
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017676:	089b      	lsrs	r3, r3, #2
 8017678:	f003 0301 	and.w	r3, r3, #1
 801767c:	b2db      	uxtb	r3, r3
 801767e:	2b00      	cmp	r3, #0
 8017680:	d022      	beq.n	80176c8 <ip4_route+0x78>
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	3304      	adds	r3, #4
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d01d      	beq.n	80176c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	681a      	ldr	r2, [r3, #0]
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	3304      	adds	r3, #4
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	405a      	eors	r2, r3
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	3308      	adds	r3, #8
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	4013      	ands	r3, r2
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d101      	bne.n	80176a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	e038      	b.n	801771a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176ae:	f003 0302 	and.w	r3, r3, #2
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d108      	bne.n	80176c8 <ip4_route+0x78>
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681a      	ldr	r2, [r3, #0]
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	330c      	adds	r3, #12
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	429a      	cmp	r2, r3
 80176c2:	d101      	bne.n	80176c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	e028      	b.n	801771a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	60fb      	str	r3, [r7, #12]
 80176ce:	68fb      	ldr	r3, [r7, #12]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d1c5      	bne.n	8017660 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80176d4:	4b15      	ldr	r3, [pc, #84]	; (801772c <ip4_route+0xdc>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d01a      	beq.n	8017712 <ip4_route+0xc2>
 80176dc:	4b13      	ldr	r3, [pc, #76]	; (801772c <ip4_route+0xdc>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176e4:	f003 0301 	and.w	r3, r3, #1
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d012      	beq.n	8017712 <ip4_route+0xc2>
 80176ec:	4b0f      	ldr	r3, [pc, #60]	; (801772c <ip4_route+0xdc>)
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176f4:	f003 0304 	and.w	r3, r3, #4
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d00a      	beq.n	8017712 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80176fc:	4b0b      	ldr	r3, [pc, #44]	; (801772c <ip4_route+0xdc>)
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	3304      	adds	r3, #4
 8017702:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017704:	2b00      	cmp	r3, #0
 8017706:	d004      	beq.n	8017712 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	b2db      	uxtb	r3, r3
 801770e:	2b7f      	cmp	r3, #127	; 0x7f
 8017710:	d101      	bne.n	8017716 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017712:	2300      	movs	r3, #0
 8017714:	e001      	b.n	801771a <ip4_route+0xca>
  }

  return netif_default;
 8017716:	4b05      	ldr	r3, [pc, #20]	; (801772c <ip4_route+0xdc>)
 8017718:	681b      	ldr	r3, [r3, #0]
}
 801771a:	4618      	mov	r0, r3
 801771c:	3714      	adds	r7, #20
 801771e:	46bd      	mov	sp, r7
 8017720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017724:	4770      	bx	lr
 8017726:	bf00      	nop
 8017728:	20028080 	.word	0x20028080
 801772c:	20028084 	.word	0x20028084

08017730 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017730:	b580      	push	{r7, lr}
 8017732:	b082      	sub	sp, #8
 8017734:	af00      	add	r7, sp, #0
 8017736:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801773e:	f003 0301 	and.w	r3, r3, #1
 8017742:	b2db      	uxtb	r3, r3
 8017744:	2b00      	cmp	r3, #0
 8017746:	d016      	beq.n	8017776 <ip4_input_accept+0x46>
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	3304      	adds	r3, #4
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d011      	beq.n	8017776 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017752:	4b0b      	ldr	r3, [pc, #44]	; (8017780 <ip4_input_accept+0x50>)
 8017754:	695a      	ldr	r2, [r3, #20]
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	3304      	adds	r3, #4
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	429a      	cmp	r2, r3
 801775e:	d008      	beq.n	8017772 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017760:	4b07      	ldr	r3, [pc, #28]	; (8017780 <ip4_input_accept+0x50>)
 8017762:	695b      	ldr	r3, [r3, #20]
 8017764:	6879      	ldr	r1, [r7, #4]
 8017766:	4618      	mov	r0, r3
 8017768:	f000 fa24 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 801776c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801776e:	2b00      	cmp	r3, #0
 8017770:	d001      	beq.n	8017776 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017772:	2301      	movs	r3, #1
 8017774:	e000      	b.n	8017778 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017776:	2300      	movs	r3, #0
}
 8017778:	4618      	mov	r0, r3
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	20024804 	.word	0x20024804

08017784 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b088      	sub	sp, #32
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
 801778c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801778e:	2301      	movs	r3, #1
 8017790:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	685b      	ldr	r3, [r3, #4]
 8017796:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017798:	69fb      	ldr	r3, [r7, #28]
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	091b      	lsrs	r3, r3, #4
 801779e:	b2db      	uxtb	r3, r3
 80177a0:	2b04      	cmp	r3, #4
 80177a2:	d004      	beq.n	80177ae <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80177a4:	6878      	ldr	r0, [r7, #4]
 80177a6:	f7f5 fbeb 	bl	800cf80 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80177aa:	2300      	movs	r3, #0
 80177ac:	e121      	b.n	80179f2 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80177ae:	69fb      	ldr	r3, [r7, #28]
 80177b0:	781b      	ldrb	r3, [r3, #0]
 80177b2:	f003 030f 	and.w	r3, r3, #15
 80177b6:	b2db      	uxtb	r3, r3
 80177b8:	009b      	lsls	r3, r3, #2
 80177ba:	b2db      	uxtb	r3, r3
 80177bc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80177be:	69fb      	ldr	r3, [r7, #28]
 80177c0:	885b      	ldrh	r3, [r3, #2]
 80177c2:	b29b      	uxth	r3, r3
 80177c4:	4618      	mov	r0, r3
 80177c6:	f7f3 f853 	bl	800a870 <lwip_htons>
 80177ca:	4603      	mov	r3, r0
 80177cc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	891b      	ldrh	r3, [r3, #8]
 80177d2:	8a3a      	ldrh	r2, [r7, #16]
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d204      	bcs.n	80177e2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80177d8:	8a3b      	ldrh	r3, [r7, #16]
 80177da:	4619      	mov	r1, r3
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f7f5 fa49 	bl	800cc74 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	895b      	ldrh	r3, [r3, #10]
 80177e6:	8a7a      	ldrh	r2, [r7, #18]
 80177e8:	429a      	cmp	r2, r3
 80177ea:	d807      	bhi.n	80177fc <ip4_input+0x78>
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	891b      	ldrh	r3, [r3, #8]
 80177f0:	8a3a      	ldrh	r2, [r7, #16]
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d802      	bhi.n	80177fc <ip4_input+0x78>
 80177f6:	8a7b      	ldrh	r3, [r7, #18]
 80177f8:	2b13      	cmp	r3, #19
 80177fa:	d804      	bhi.n	8017806 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f7f5 fbbf 	bl	800cf80 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017802:	2300      	movs	r3, #0
 8017804:	e0f5      	b.n	80179f2 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017806:	69fb      	ldr	r3, [r7, #28]
 8017808:	691b      	ldr	r3, [r3, #16]
 801780a:	4a7c      	ldr	r2, [pc, #496]	; (80179fc <ip4_input+0x278>)
 801780c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801780e:	69fb      	ldr	r3, [r7, #28]
 8017810:	68db      	ldr	r3, [r3, #12]
 8017812:	4a7a      	ldr	r2, [pc, #488]	; (80179fc <ip4_input+0x278>)
 8017814:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017816:	4b79      	ldr	r3, [pc, #484]	; (80179fc <ip4_input+0x278>)
 8017818:	695b      	ldr	r3, [r3, #20]
 801781a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801781e:	2be0      	cmp	r3, #224	; 0xe0
 8017820:	d112      	bne.n	8017848 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017828:	f003 0301 	and.w	r3, r3, #1
 801782c:	b2db      	uxtb	r3, r3
 801782e:	2b00      	cmp	r3, #0
 8017830:	d007      	beq.n	8017842 <ip4_input+0xbe>
 8017832:	683b      	ldr	r3, [r7, #0]
 8017834:	3304      	adds	r3, #4
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d002      	beq.n	8017842 <ip4_input+0xbe>
      netif = inp;
 801783c:	683b      	ldr	r3, [r7, #0]
 801783e:	61bb      	str	r3, [r7, #24]
 8017840:	e02a      	b.n	8017898 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017842:	2300      	movs	r3, #0
 8017844:	61bb      	str	r3, [r7, #24]
 8017846:	e027      	b.n	8017898 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017848:	6838      	ldr	r0, [r7, #0]
 801784a:	f7ff ff71 	bl	8017730 <ip4_input_accept>
 801784e:	4603      	mov	r3, r0
 8017850:	2b00      	cmp	r3, #0
 8017852:	d002      	beq.n	801785a <ip4_input+0xd6>
      netif = inp;
 8017854:	683b      	ldr	r3, [r7, #0]
 8017856:	61bb      	str	r3, [r7, #24]
 8017858:	e01e      	b.n	8017898 <ip4_input+0x114>
    } else {
      netif = NULL;
 801785a:	2300      	movs	r3, #0
 801785c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801785e:	4b67      	ldr	r3, [pc, #412]	; (80179fc <ip4_input+0x278>)
 8017860:	695b      	ldr	r3, [r3, #20]
 8017862:	b2db      	uxtb	r3, r3
 8017864:	2b7f      	cmp	r3, #127	; 0x7f
 8017866:	d017      	beq.n	8017898 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017868:	4b65      	ldr	r3, [pc, #404]	; (8017a00 <ip4_input+0x27c>)
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	61bb      	str	r3, [r7, #24]
 801786e:	e00e      	b.n	801788e <ip4_input+0x10a>
          if (netif == inp) {
 8017870:	69ba      	ldr	r2, [r7, #24]
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	429a      	cmp	r2, r3
 8017876:	d006      	beq.n	8017886 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017878:	69b8      	ldr	r0, [r7, #24]
 801787a:	f7ff ff59 	bl	8017730 <ip4_input_accept>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	d108      	bne.n	8017896 <ip4_input+0x112>
 8017884:	e000      	b.n	8017888 <ip4_input+0x104>
            continue;
 8017886:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017888:	69bb      	ldr	r3, [r7, #24]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	61bb      	str	r3, [r7, #24]
 801788e:	69bb      	ldr	r3, [r7, #24]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d1ed      	bne.n	8017870 <ip4_input+0xec>
 8017894:	e000      	b.n	8017898 <ip4_input+0x114>
            break;
 8017896:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017898:	69bb      	ldr	r3, [r7, #24]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d111      	bne.n	80178c2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801789e:	69fb      	ldr	r3, [r7, #28]
 80178a0:	7a5b      	ldrb	r3, [r3, #9]
 80178a2:	2b11      	cmp	r3, #17
 80178a4:	d10d      	bne.n	80178c2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80178a6:	8a7b      	ldrh	r3, [r7, #18]
 80178a8:	69fa      	ldr	r2, [r7, #28]
 80178aa:	4413      	add	r3, r2
 80178ac:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	885b      	ldrh	r3, [r3, #2]
 80178b2:	b29b      	uxth	r3, r3
 80178b4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80178b8:	d103      	bne.n	80178c2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80178be:	2300      	movs	r3, #0
 80178c0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80178c2:	697b      	ldr	r3, [r7, #20]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d017      	beq.n	80178f8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80178c8:	4b4c      	ldr	r3, [pc, #304]	; (80179fc <ip4_input+0x278>)
 80178ca:	691b      	ldr	r3, [r3, #16]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d013      	beq.n	80178f8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80178d0:	4b4a      	ldr	r3, [pc, #296]	; (80179fc <ip4_input+0x278>)
 80178d2:	691b      	ldr	r3, [r3, #16]
 80178d4:	6839      	ldr	r1, [r7, #0]
 80178d6:	4618      	mov	r0, r3
 80178d8:	f000 f96c 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 80178dc:	4603      	mov	r3, r0
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d105      	bne.n	80178ee <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80178e2:	4b46      	ldr	r3, [pc, #280]	; (80179fc <ip4_input+0x278>)
 80178e4:	691b      	ldr	r3, [r3, #16]
 80178e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80178ea:	2be0      	cmp	r3, #224	; 0xe0
 80178ec:	d104      	bne.n	80178f8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f7f5 fb46 	bl	800cf80 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80178f4:	2300      	movs	r3, #0
 80178f6:	e07c      	b.n	80179f2 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80178f8:	69bb      	ldr	r3, [r7, #24]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d104      	bne.n	8017908 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80178fe:	6878      	ldr	r0, [r7, #4]
 8017900:	f7f5 fb3e 	bl	800cf80 <pbuf_free>
    return ERR_OK;
 8017904:	2300      	movs	r3, #0
 8017906:	e074      	b.n	80179f2 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017908:	69fb      	ldr	r3, [r7, #28]
 801790a:	88db      	ldrh	r3, [r3, #6]
 801790c:	b29b      	uxth	r3, r3
 801790e:	461a      	mov	r2, r3
 8017910:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017914:	4013      	ands	r3, r2
 8017916:	2b00      	cmp	r3, #0
 8017918:	d00b      	beq.n	8017932 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f000 fe54 	bl	80185c8 <ip4_reass>
 8017920:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d101      	bne.n	801792c <ip4_input+0x1a8>
      return ERR_OK;
 8017928:	2300      	movs	r3, #0
 801792a:	e062      	b.n	80179f2 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017932:	4a32      	ldr	r2, [pc, #200]	; (80179fc <ip4_input+0x278>)
 8017934:	69bb      	ldr	r3, [r7, #24]
 8017936:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017938:	4a30      	ldr	r2, [pc, #192]	; (80179fc <ip4_input+0x278>)
 801793a:	683b      	ldr	r3, [r7, #0]
 801793c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801793e:	4a2f      	ldr	r2, [pc, #188]	; (80179fc <ip4_input+0x278>)
 8017940:	69fb      	ldr	r3, [r7, #28]
 8017942:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017944:	69fb      	ldr	r3, [r7, #28]
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	f003 030f 	and.w	r3, r3, #15
 801794c:	b2db      	uxtb	r3, r3
 801794e:	009b      	lsls	r3, r3, #2
 8017950:	b2db      	uxtb	r3, r3
 8017952:	b29a      	uxth	r2, r3
 8017954:	4b29      	ldr	r3, [pc, #164]	; (80179fc <ip4_input+0x278>)
 8017956:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017958:	8a7b      	ldrh	r3, [r7, #18]
 801795a:	4619      	mov	r1, r3
 801795c:	6878      	ldr	r0, [r7, #4]
 801795e:	f7f5 fa89 	bl	800ce74 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017962:	69fb      	ldr	r3, [r7, #28]
 8017964:	7a5b      	ldrb	r3, [r3, #9]
 8017966:	2b06      	cmp	r3, #6
 8017968:	d009      	beq.n	801797e <ip4_input+0x1fa>
 801796a:	2b11      	cmp	r3, #17
 801796c:	d002      	beq.n	8017974 <ip4_input+0x1f0>
 801796e:	2b01      	cmp	r3, #1
 8017970:	d00a      	beq.n	8017988 <ip4_input+0x204>
 8017972:	e00e      	b.n	8017992 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017974:	6839      	ldr	r1, [r7, #0]
 8017976:	6878      	ldr	r0, [r7, #4]
 8017978:	f7fc fa22 	bl	8013dc0 <udp_input>
        break;
 801797c:	e026      	b.n	80179cc <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801797e:	6839      	ldr	r1, [r7, #0]
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f7f7 fdcf 	bl	800f524 <tcp_input>
        break;
 8017986:	e021      	b.n	80179cc <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017988:	6839      	ldr	r1, [r7, #0]
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f7ff fcd2 	bl	8017334 <icmp_input>
        break;
 8017990:	e01c      	b.n	80179cc <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017992:	4b1a      	ldr	r3, [pc, #104]	; (80179fc <ip4_input+0x278>)
 8017994:	695b      	ldr	r3, [r3, #20]
 8017996:	69b9      	ldr	r1, [r7, #24]
 8017998:	4618      	mov	r0, r3
 801799a:	f000 f90b 	bl	8017bb4 <ip4_addr_isbroadcast_u32>
 801799e:	4603      	mov	r3, r0
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d10f      	bne.n	80179c4 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80179a4:	4b15      	ldr	r3, [pc, #84]	; (80179fc <ip4_input+0x278>)
 80179a6:	695b      	ldr	r3, [r3, #20]
 80179a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80179ac:	2be0      	cmp	r3, #224	; 0xe0
 80179ae:	d009      	beq.n	80179c4 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80179b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80179b4:	4619      	mov	r1, r3
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7f5 facf 	bl	800cf5a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80179bc:	2102      	movs	r1, #2
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f7ff fdbc 	bl	801753c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80179c4:	6878      	ldr	r0, [r7, #4]
 80179c6:	f7f5 fadb 	bl	800cf80 <pbuf_free>
        break;
 80179ca:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80179cc:	4b0b      	ldr	r3, [pc, #44]	; (80179fc <ip4_input+0x278>)
 80179ce:	2200      	movs	r2, #0
 80179d0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80179d2:	4b0a      	ldr	r3, [pc, #40]	; (80179fc <ip4_input+0x278>)
 80179d4:	2200      	movs	r2, #0
 80179d6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80179d8:	4b08      	ldr	r3, [pc, #32]	; (80179fc <ip4_input+0x278>)
 80179da:	2200      	movs	r2, #0
 80179dc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80179de:	4b07      	ldr	r3, [pc, #28]	; (80179fc <ip4_input+0x278>)
 80179e0:	2200      	movs	r2, #0
 80179e2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80179e4:	4b05      	ldr	r3, [pc, #20]	; (80179fc <ip4_input+0x278>)
 80179e6:	2200      	movs	r2, #0
 80179e8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80179ea:	4b04      	ldr	r3, [pc, #16]	; (80179fc <ip4_input+0x278>)
 80179ec:	2200      	movs	r2, #0
 80179ee:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80179f0:	2300      	movs	r3, #0
}
 80179f2:	4618      	mov	r0, r3
 80179f4:	3720      	adds	r7, #32
 80179f6:	46bd      	mov	sp, r7
 80179f8:	bd80      	pop	{r7, pc}
 80179fa:	bf00      	nop
 80179fc:	20024804 	.word	0x20024804
 8017a00:	20028080 	.word	0x20028080

08017a04 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b08a      	sub	sp, #40	; 0x28
 8017a08:	af04      	add	r7, sp, #16
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
 8017a10:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017a12:	68bb      	ldr	r3, [r7, #8]
 8017a14:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d009      	beq.n	8017a30 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017a1c:	68bb      	ldr	r3, [r7, #8]
 8017a1e:	2b00      	cmp	r3, #0
 8017a20:	d003      	beq.n	8017a2a <ip4_output_if+0x26>
 8017a22:	68bb      	ldr	r3, [r7, #8]
 8017a24:	681b      	ldr	r3, [r3, #0]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d102      	bne.n	8017a30 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a2c:	3304      	adds	r3, #4
 8017a2e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017a30:	78fa      	ldrb	r2, [r7, #3]
 8017a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a34:	9302      	str	r3, [sp, #8]
 8017a36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a3a:	9301      	str	r3, [sp, #4]
 8017a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017a40:	9300      	str	r3, [sp, #0]
 8017a42:	4613      	mov	r3, r2
 8017a44:	687a      	ldr	r2, [r7, #4]
 8017a46:	6979      	ldr	r1, [r7, #20]
 8017a48:	68f8      	ldr	r0, [r7, #12]
 8017a4a:	f000 f805 	bl	8017a58 <ip4_output_if_src>
 8017a4e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017a50:	4618      	mov	r0, r3
 8017a52:	3718      	adds	r7, #24
 8017a54:	46bd      	mov	sp, r7
 8017a56:	bd80      	pop	{r7, pc}

08017a58 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017a58:	b580      	push	{r7, lr}
 8017a5a:	b088      	sub	sp, #32
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	60f8      	str	r0, [r7, #12]
 8017a60:	60b9      	str	r1, [r7, #8]
 8017a62:	607a      	str	r2, [r7, #4]
 8017a64:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	7b9b      	ldrb	r3, [r3, #14]
 8017a6a:	2b01      	cmp	r3, #1
 8017a6c:	d006      	beq.n	8017a7c <ip4_output_if_src+0x24>
 8017a6e:	4b4b      	ldr	r3, [pc, #300]	; (8017b9c <ip4_output_if_src+0x144>)
 8017a70:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017a74:	494a      	ldr	r1, [pc, #296]	; (8017ba0 <ip4_output_if_src+0x148>)
 8017a76:	484b      	ldr	r0, [pc, #300]	; (8017ba4 <ip4_output_if_src+0x14c>)
 8017a78:	f002 fa50 	bl	8019f1c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d060      	beq.n	8017b44 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017a82:	2314      	movs	r3, #20
 8017a84:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017a86:	2114      	movs	r1, #20
 8017a88:	68f8      	ldr	r0, [r7, #12]
 8017a8a:	f7f5 f9e3 	bl	800ce54 <pbuf_add_header>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d002      	beq.n	8017a9a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017a94:	f06f 0301 	mvn.w	r3, #1
 8017a98:	e07c      	b.n	8017b94 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	685b      	ldr	r3, [r3, #4]
 8017a9e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	895b      	ldrh	r3, [r3, #10]
 8017aa4:	2b13      	cmp	r3, #19
 8017aa6:	d806      	bhi.n	8017ab6 <ip4_output_if_src+0x5e>
 8017aa8:	4b3c      	ldr	r3, [pc, #240]	; (8017b9c <ip4_output_if_src+0x144>)
 8017aaa:	f240 3289 	movw	r2, #905	; 0x389
 8017aae:	493e      	ldr	r1, [pc, #248]	; (8017ba8 <ip4_output_if_src+0x150>)
 8017ab0:	483c      	ldr	r0, [pc, #240]	; (8017ba4 <ip4_output_if_src+0x14c>)
 8017ab2:	f002 fa33 	bl	8019f1c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017ab6:	69fb      	ldr	r3, [r7, #28]
 8017ab8:	78fa      	ldrb	r2, [r7, #3]
 8017aba:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017abc:	69fb      	ldr	r3, [r7, #28]
 8017abe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017ac2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681a      	ldr	r2, [r3, #0]
 8017ac8:	69fb      	ldr	r3, [r7, #28]
 8017aca:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017acc:	8b7b      	ldrh	r3, [r7, #26]
 8017ace:	089b      	lsrs	r3, r3, #2
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	b2db      	uxtb	r3, r3
 8017ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ad8:	b2da      	uxtb	r2, r3
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017ade:	69fb      	ldr	r3, [r7, #28]
 8017ae0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017ae4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	891b      	ldrh	r3, [r3, #8]
 8017aea:	4618      	mov	r0, r3
 8017aec:	f7f2 fec0 	bl	800a870 <lwip_htons>
 8017af0:	4603      	mov	r3, r0
 8017af2:	461a      	mov	r2, r3
 8017af4:	69fb      	ldr	r3, [r7, #28]
 8017af6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017af8:	69fb      	ldr	r3, [r7, #28]
 8017afa:	2200      	movs	r2, #0
 8017afc:	719a      	strb	r2, [r3, #6]
 8017afe:	2200      	movs	r2, #0
 8017b00:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017b02:	4b2a      	ldr	r3, [pc, #168]	; (8017bac <ip4_output_if_src+0x154>)
 8017b04:	881b      	ldrh	r3, [r3, #0]
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7f2 feb2 	bl	800a870 <lwip_htons>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	461a      	mov	r2, r3
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017b14:	4b25      	ldr	r3, [pc, #148]	; (8017bac <ip4_output_if_src+0x154>)
 8017b16:	881b      	ldrh	r3, [r3, #0]
 8017b18:	3301      	adds	r3, #1
 8017b1a:	b29a      	uxth	r2, r3
 8017b1c:	4b23      	ldr	r3, [pc, #140]	; (8017bac <ip4_output_if_src+0x154>)
 8017b1e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d104      	bne.n	8017b30 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017b26:	4b22      	ldr	r3, [pc, #136]	; (8017bb0 <ip4_output_if_src+0x158>)
 8017b28:	681a      	ldr	r2, [r3, #0]
 8017b2a:	69fb      	ldr	r3, [r7, #28]
 8017b2c:	60da      	str	r2, [r3, #12]
 8017b2e:	e003      	b.n	8017b38 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017b30:	68bb      	ldr	r3, [r7, #8]
 8017b32:	681a      	ldr	r2, [r3, #0]
 8017b34:	69fb      	ldr	r3, [r7, #28]
 8017b36:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017b38:	69fb      	ldr	r3, [r7, #28]
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	729a      	strb	r2, [r3, #10]
 8017b3e:	2200      	movs	r2, #0
 8017b40:	72da      	strb	r2, [r3, #11]
 8017b42:	e00f      	b.n	8017b64 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	895b      	ldrh	r3, [r3, #10]
 8017b48:	2b13      	cmp	r3, #19
 8017b4a:	d802      	bhi.n	8017b52 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017b4c:	f06f 0301 	mvn.w	r3, #1
 8017b50:	e020      	b.n	8017b94 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017b58:	69fb      	ldr	r3, [r7, #28]
 8017b5a:	691b      	ldr	r3, [r3, #16]
 8017b5c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017b5e:	f107 0314 	add.w	r3, r7, #20
 8017b62:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d00c      	beq.n	8017b86 <ip4_output_if_src+0x12e>
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	891a      	ldrh	r2, [r3, #8]
 8017b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d906      	bls.n	8017b86 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017b78:	687a      	ldr	r2, [r7, #4]
 8017b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017b7c:	68f8      	ldr	r0, [r7, #12]
 8017b7e:	f000 ff0f 	bl	80189a0 <ip4_frag>
 8017b82:	4603      	mov	r3, r0
 8017b84:	e006      	b.n	8017b94 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b88:	695b      	ldr	r3, [r3, #20]
 8017b8a:	687a      	ldr	r2, [r7, #4]
 8017b8c:	68f9      	ldr	r1, [r7, #12]
 8017b8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b90:	4798      	blx	r3
 8017b92:	4603      	mov	r3, r0
}
 8017b94:	4618      	mov	r0, r3
 8017b96:	3720      	adds	r7, #32
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}
 8017b9c:	0802166c 	.word	0x0802166c
 8017ba0:	080216a0 	.word	0x080216a0
 8017ba4:	080216ac 	.word	0x080216ac
 8017ba8:	080216d4 	.word	0x080216d4
 8017bac:	200215da 	.word	0x200215da
 8017bb0:	08021b90 	.word	0x08021b90

08017bb4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017bb4:	b480      	push	{r7}
 8017bb6:	b085      	sub	sp, #20
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
 8017bbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bc8:	d002      	beq.n	8017bd0 <ip4_addr_isbroadcast_u32+0x1c>
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d101      	bne.n	8017bd4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	e02a      	b.n	8017c2a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017bd4:	683b      	ldr	r3, [r7, #0]
 8017bd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017bda:	f003 0302 	and.w	r3, r3, #2
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d101      	bne.n	8017be6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017be2:	2300      	movs	r3, #0
 8017be4:	e021      	b.n	8017c2a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017be6:	683b      	ldr	r3, [r7, #0]
 8017be8:	3304      	adds	r3, #4
 8017bea:	681b      	ldr	r3, [r3, #0]
 8017bec:	687a      	ldr	r2, [r7, #4]
 8017bee:	429a      	cmp	r2, r3
 8017bf0:	d101      	bne.n	8017bf6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	e019      	b.n	8017c2a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017bf6:	68fa      	ldr	r2, [r7, #12]
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	3304      	adds	r3, #4
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	405a      	eors	r2, r3
 8017c00:	683b      	ldr	r3, [r7, #0]
 8017c02:	3308      	adds	r3, #8
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	4013      	ands	r3, r2
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d10d      	bne.n	8017c28 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	3308      	adds	r3, #8
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	43da      	mvns	r2, r3
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	3308      	adds	r3, #8
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d101      	bne.n	8017c28 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017c24:	2301      	movs	r3, #1
 8017c26:	e000      	b.n	8017c2a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017c28:	2300      	movs	r3, #0
  }
}
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	3714      	adds	r7, #20
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c34:	4770      	bx	lr
	...

08017c38 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8017c38:	b5b0      	push	{r4, r5, r7, lr}
 8017c3a:	b08a      	sub	sp, #40	; 0x28
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
 8017c40:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8017c42:	f107 030c 	add.w	r3, r7, #12
 8017c46:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8017c50:	f001 faca 	bl	80191e8 <__locale_ctype_ptr>
 8017c54:	4602      	mov	r2, r0
 8017c56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c5a:	3301      	adds	r3, #1
 8017c5c:	4413      	add	r3, r2
 8017c5e:	781b      	ldrb	r3, [r3, #0]
 8017c60:	f003 0304 	and.w	r3, r3, #4
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d101      	bne.n	8017c6c <ip4addr_aton+0x34>
      return 0;
 8017c68:	2300      	movs	r3, #0
 8017c6a:	e10d      	b.n	8017e88 <ip4addr_aton+0x250>
    }
    val = 0;
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8017c70:	230a      	movs	r3, #10
 8017c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8017c76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c7a:	2b30      	cmp	r3, #48	; 0x30
 8017c7c:	d11c      	bne.n	8017cb8 <ip4addr_aton+0x80>
      c = *++cp;
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	3301      	adds	r3, #1
 8017c82:	607b      	str	r3, [r7, #4]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	781b      	ldrb	r3, [r3, #0]
 8017c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8017c8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c90:	2b78      	cmp	r3, #120	; 0x78
 8017c92:	d003      	beq.n	8017c9c <ip4addr_aton+0x64>
 8017c94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017c98:	2b58      	cmp	r3, #88	; 0x58
 8017c9a:	d10a      	bne.n	8017cb2 <ip4addr_aton+0x7a>
        base = 16;
 8017c9c:	2310      	movs	r3, #16
 8017c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	3301      	adds	r3, #1
 8017ca6:	607b      	str	r3, [r7, #4]
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	781b      	ldrb	r3, [r3, #0]
 8017cac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017cb0:	e002      	b.n	8017cb8 <ip4addr_aton+0x80>
      } else {
        base = 8;
 8017cb2:	2308      	movs	r3, #8
 8017cb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8017cb8:	f001 fa96 	bl	80191e8 <__locale_ctype_ptr>
 8017cbc:	4602      	mov	r2, r0
 8017cbe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017cc2:	3301      	adds	r3, #1
 8017cc4:	4413      	add	r3, r2
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	f003 0304 	and.w	r3, r3, #4
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d011      	beq.n	8017cf4 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 8017cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017cd6:	fb02 f203 	mul.w	r2, r2, r3
 8017cda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017cde:	4413      	add	r3, r2
 8017ce0:	3b30      	subs	r3, #48	; 0x30
 8017ce2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	607b      	str	r3, [r7, #4]
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	781b      	ldrb	r3, [r3, #0]
 8017cee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8017cf2:	e7e1      	b.n	8017cb8 <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8017cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017cf8:	2b10      	cmp	r3, #16
 8017cfa:	d12b      	bne.n	8017d54 <ip4addr_aton+0x11c>
 8017cfc:	f001 fa74 	bl	80191e8 <__locale_ctype_ptr>
 8017d00:	4602      	mov	r2, r0
 8017d02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d06:	3301      	adds	r3, #1
 8017d08:	4413      	add	r3, r2
 8017d0a:	781b      	ldrb	r3, [r3, #0]
 8017d0c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d01f      	beq.n	8017d54 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8017d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d16:	011c      	lsls	r4, r3, #4
 8017d18:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d1c:	f103 050a 	add.w	r5, r3, #10
 8017d20:	f001 fa62 	bl	80191e8 <__locale_ctype_ptr>
 8017d24:	4602      	mov	r2, r0
 8017d26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d2a:	3301      	adds	r3, #1
 8017d2c:	4413      	add	r3, r2
 8017d2e:	781b      	ldrb	r3, [r3, #0]
 8017d30:	f003 0303 	and.w	r3, r3, #3
 8017d34:	2b02      	cmp	r3, #2
 8017d36:	d101      	bne.n	8017d3c <ip4addr_aton+0x104>
 8017d38:	2361      	movs	r3, #97	; 0x61
 8017d3a:	e000      	b.n	8017d3e <ip4addr_aton+0x106>
 8017d3c:	2341      	movs	r3, #65	; 0x41
 8017d3e:	1aeb      	subs	r3, r5, r3
 8017d40:	4323      	orrs	r3, r4
 8017d42:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	3301      	adds	r3, #1
 8017d48:	607b      	str	r3, [r7, #4]
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	781b      	ldrb	r3, [r3, #0]
 8017d4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8017d52:	e7b1      	b.n	8017cb8 <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 8017d54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d58:	2b2e      	cmp	r3, #46	; 0x2e
 8017d5a:	d114      	bne.n	8017d86 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8017d5c:	f107 030c 	add.w	r3, r7, #12
 8017d60:	330c      	adds	r3, #12
 8017d62:	69fa      	ldr	r2, [r7, #28]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d301      	bcc.n	8017d6c <ip4addr_aton+0x134>
        return 0;
 8017d68:	2300      	movs	r3, #0
 8017d6a:	e08d      	b.n	8017e88 <ip4addr_aton+0x250>
      }
      *pp++ = val;
 8017d6c:	69fb      	ldr	r3, [r7, #28]
 8017d6e:	1d1a      	adds	r2, r3, #4
 8017d70:	61fa      	str	r2, [r7, #28]
 8017d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017d74:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	3301      	adds	r3, #1
 8017d7a:	607b      	str	r3, [r7, #4]
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	781b      	ldrb	r3, [r3, #0]
 8017d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8017d84:	e764      	b.n	8017c50 <ip4addr_aton+0x18>
    } else {
      break;
 8017d86:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8017d88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d00d      	beq.n	8017dac <ip4addr_aton+0x174>
 8017d90:	f001 fa2a 	bl	80191e8 <__locale_ctype_ptr>
 8017d94:	4602      	mov	r2, r0
 8017d96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	4413      	add	r3, r2
 8017d9e:	781b      	ldrb	r3, [r3, #0]
 8017da0:	f003 0308 	and.w	r3, r3, #8
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d101      	bne.n	8017dac <ip4addr_aton+0x174>
    return 0;
 8017da8:	2300      	movs	r3, #0
 8017daa:	e06d      	b.n	8017e88 <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8017dac:	69fa      	ldr	r2, [r7, #28]
 8017dae:	f107 030c 	add.w	r3, r7, #12
 8017db2:	1ad3      	subs	r3, r2, r3
 8017db4:	109b      	asrs	r3, r3, #2
 8017db6:	3301      	adds	r3, #1
 8017db8:	2b04      	cmp	r3, #4
 8017dba:	d853      	bhi.n	8017e64 <ip4addr_aton+0x22c>
 8017dbc:	a201      	add	r2, pc, #4	; (adr r2, 8017dc4 <ip4addr_aton+0x18c>)
 8017dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017dc2:	bf00      	nop
 8017dc4:	08017dd9 	.word	0x08017dd9
 8017dc8:	08017e73 	.word	0x08017e73
 8017dcc:	08017ddd 	.word	0x08017ddd
 8017dd0:	08017dff 	.word	0x08017dff
 8017dd4:	08017e2d 	.word	0x08017e2d

    case 0:
      return 0;       /* initial nondigit */
 8017dd8:	2300      	movs	r3, #0
 8017dda:	e055      	b.n	8017e88 <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8017ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017de2:	d301      	bcc.n	8017de8 <ip4addr_aton+0x1b0>
        return 0;
 8017de4:	2300      	movs	r3, #0
 8017de6:	e04f      	b.n	8017e88 <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 8017de8:	68fb      	ldr	r3, [r7, #12]
 8017dea:	2bff      	cmp	r3, #255	; 0xff
 8017dec:	d901      	bls.n	8017df2 <ip4addr_aton+0x1ba>
        return 0;
 8017dee:	2300      	movs	r3, #0
 8017df0:	e04a      	b.n	8017e88 <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	061b      	lsls	r3, r3, #24
 8017df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017df8:	4313      	orrs	r3, r2
 8017dfa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8017dfc:	e03a      	b.n	8017e74 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8017dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017e04:	d301      	bcc.n	8017e0a <ip4addr_aton+0x1d2>
        return 0;
 8017e06:	2300      	movs	r3, #0
 8017e08:	e03e      	b.n	8017e88 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	2bff      	cmp	r3, #255	; 0xff
 8017e0e:	d802      	bhi.n	8017e16 <ip4addr_aton+0x1de>
 8017e10:	693b      	ldr	r3, [r7, #16]
 8017e12:	2bff      	cmp	r3, #255	; 0xff
 8017e14:	d901      	bls.n	8017e1a <ip4addr_aton+0x1e2>
        return 0;
 8017e16:	2300      	movs	r3, #0
 8017e18:	e036      	b.n	8017e88 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8017e1a:	68fb      	ldr	r3, [r7, #12]
 8017e1c:	061a      	lsls	r2, r3, #24
 8017e1e:	693b      	ldr	r3, [r7, #16]
 8017e20:	041b      	lsls	r3, r3, #16
 8017e22:	4313      	orrs	r3, r2
 8017e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e26:	4313      	orrs	r3, r2
 8017e28:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8017e2a:	e023      	b.n	8017e74 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8017e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e2e:	2bff      	cmp	r3, #255	; 0xff
 8017e30:	d901      	bls.n	8017e36 <ip4addr_aton+0x1fe>
        return 0;
 8017e32:	2300      	movs	r3, #0
 8017e34:	e028      	b.n	8017e88 <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	2bff      	cmp	r3, #255	; 0xff
 8017e3a:	d805      	bhi.n	8017e48 <ip4addr_aton+0x210>
 8017e3c:	693b      	ldr	r3, [r7, #16]
 8017e3e:	2bff      	cmp	r3, #255	; 0xff
 8017e40:	d802      	bhi.n	8017e48 <ip4addr_aton+0x210>
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	2bff      	cmp	r3, #255	; 0xff
 8017e46:	d901      	bls.n	8017e4c <ip4addr_aton+0x214>
        return 0;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	e01d      	b.n	8017e88 <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	061a      	lsls	r2, r3, #24
 8017e50:	693b      	ldr	r3, [r7, #16]
 8017e52:	041b      	lsls	r3, r3, #16
 8017e54:	431a      	orrs	r2, r3
 8017e56:	697b      	ldr	r3, [r7, #20]
 8017e58:	021b      	lsls	r3, r3, #8
 8017e5a:	4313      	orrs	r3, r2
 8017e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e5e:	4313      	orrs	r3, r2
 8017e60:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8017e62:	e007      	b.n	8017e74 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 8017e64:	4b0a      	ldr	r3, [pc, #40]	; (8017e90 <ip4addr_aton+0x258>)
 8017e66:	22f9      	movs	r2, #249	; 0xf9
 8017e68:	490a      	ldr	r1, [pc, #40]	; (8017e94 <ip4addr_aton+0x25c>)
 8017e6a:	480b      	ldr	r0, [pc, #44]	; (8017e98 <ip4addr_aton+0x260>)
 8017e6c:	f002 f856 	bl	8019f1c <iprintf>
      break;
 8017e70:	e000      	b.n	8017e74 <ip4addr_aton+0x23c>
      break;
 8017e72:	bf00      	nop
  }
  if (addr) {
 8017e74:	683b      	ldr	r3, [r7, #0]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d005      	beq.n	8017e86 <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8017e7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e7c:	f7f2 fd0d 	bl	800a89a <lwip_htonl>
 8017e80:	4602      	mov	r2, r0
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8017e86:	2301      	movs	r3, #1
}
 8017e88:	4618      	mov	r0, r3
 8017e8a:	3728      	adds	r7, #40	; 0x28
 8017e8c:	46bd      	mov	sp, r7
 8017e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8017e90:	08021704 	.word	0x08021704
 8017e94:	08021740 	.word	0x08021740
 8017e98:	0802174c 	.word	0x0802174c

08017e9c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b082      	sub	sp, #8
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8017ea4:	2210      	movs	r2, #16
 8017ea6:	4904      	ldr	r1, [pc, #16]	; (8017eb8 <ip4addr_ntoa+0x1c>)
 8017ea8:	6878      	ldr	r0, [r7, #4]
 8017eaa:	f000 f807 	bl	8017ebc <ip4addr_ntoa_r>
 8017eae:	4603      	mov	r3, r0
}
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	3708      	adds	r7, #8
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}
 8017eb8:	200215dc 	.word	0x200215dc

08017ebc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8017ebc:	b480      	push	{r7}
 8017ebe:	b08d      	sub	sp, #52	; 0x34
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	60f8      	str	r0, [r7, #12]
 8017ec4:	60b9      	str	r1, [r7, #8]
 8017ec6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8017ed2:	68bb      	ldr	r3, [r7, #8]
 8017ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8017ed6:	f107 0318 	add.w	r3, r7, #24
 8017eda:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017edc:	2300      	movs	r3, #0
 8017ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ee2:	e059      	b.n	8017f98 <ip4addr_ntoa_r+0xdc>
    i = 0;
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8017eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eec:	781a      	ldrb	r2, [r3, #0]
 8017eee:	4b33      	ldr	r3, [pc, #204]	; (8017fbc <ip4addr_ntoa_r+0x100>)
 8017ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8017ef4:	08d9      	lsrs	r1, r3, #3
 8017ef6:	460b      	mov	r3, r1
 8017ef8:	009b      	lsls	r3, r3, #2
 8017efa:	440b      	add	r3, r1
 8017efc:	005b      	lsls	r3, r3, #1
 8017efe:	1ad3      	subs	r3, r2, r3
 8017f00:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8017f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f04:	781b      	ldrb	r3, [r3, #0]
 8017f06:	4a2d      	ldr	r2, [pc, #180]	; (8017fbc <ip4addr_ntoa_r+0x100>)
 8017f08:	fba2 2303 	umull	r2, r3, r2, r3
 8017f0c:	08db      	lsrs	r3, r3, #3
 8017f0e:	b2da      	uxtb	r2, r3
 8017f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f12:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8017f14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f18:	1c5a      	adds	r2, r3, #1
 8017f1a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017f1e:	4619      	mov	r1, r3
 8017f20:	7ffb      	ldrb	r3, [r7, #31]
 8017f22:	3330      	adds	r3, #48	; 0x30
 8017f24:	b2da      	uxtb	r2, r3
 8017f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8017f2a:	440b      	add	r3, r1
 8017f2c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8017f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f32:	781b      	ldrb	r3, [r3, #0]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d1d8      	bne.n	8017eea <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8017f38:	e012      	b.n	8017f60 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 8017f3a:	6a3b      	ldr	r3, [r7, #32]
 8017f3c:	1c5a      	adds	r2, r3, #1
 8017f3e:	623a      	str	r2, [r7, #32]
 8017f40:	687a      	ldr	r2, [r7, #4]
 8017f42:	429a      	cmp	r2, r3
 8017f44:	dc01      	bgt.n	8017f4a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8017f46:	2300      	movs	r3, #0
 8017f48:	e031      	b.n	8017fae <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 8017f4a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8017f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f50:	1c59      	adds	r1, r3, #1
 8017f52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8017f54:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8017f58:	440a      	add	r2, r1
 8017f5a:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8017f5e:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8017f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017f64:	1e5a      	subs	r2, r3, #1
 8017f66:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d1e5      	bne.n	8017f3a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8017f6e:	6a3b      	ldr	r3, [r7, #32]
 8017f70:	1c5a      	adds	r2, r3, #1
 8017f72:	623a      	str	r2, [r7, #32]
 8017f74:	687a      	ldr	r2, [r7, #4]
 8017f76:	429a      	cmp	r2, r3
 8017f78:	dc01      	bgt.n	8017f7e <ip4addr_ntoa_r+0xc2>
      return NULL;
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	e017      	b.n	8017fae <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8017f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f80:	1c5a      	adds	r2, r3, #1
 8017f82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017f84:	222e      	movs	r2, #46	; 0x2e
 8017f86:	701a      	strb	r2, [r3, #0]
    ap++;
 8017f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f8a:	3301      	adds	r3, #1
 8017f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8017f8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f92:	3301      	adds	r3, #1
 8017f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f9c:	2b03      	cmp	r3, #3
 8017f9e:	d9a1      	bls.n	8017ee4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8017fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa2:	3b01      	subs	r3, #1
 8017fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa8:	2200      	movs	r2, #0
 8017faa:	701a      	strb	r2, [r3, #0]
  return buf;
 8017fac:	68bb      	ldr	r3, [r7, #8]
}
 8017fae:	4618      	mov	r0, r3
 8017fb0:	3734      	adds	r7, #52	; 0x34
 8017fb2:	46bd      	mov	sp, r7
 8017fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb8:	4770      	bx	lr
 8017fba:	bf00      	nop
 8017fbc:	cccccccd 	.word	0xcccccccd

08017fc0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017fc0:	b580      	push	{r7, lr}
 8017fc2:	b084      	sub	sp, #16
 8017fc4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017fc6:	2300      	movs	r3, #0
 8017fc8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017fca:	4b12      	ldr	r3, [pc, #72]	; (8018014 <ip_reass_tmr+0x54>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017fd0:	e018      	b.n	8018004 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	7fdb      	ldrb	r3, [r3, #31]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d00b      	beq.n	8017ff2 <ip_reass_tmr+0x32>
      r->timer--;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	7fdb      	ldrb	r3, [r3, #31]
 8017fde:	3b01      	subs	r3, #1
 8017fe0:	b2da      	uxtb	r2, r3
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	60fb      	str	r3, [r7, #12]
 8017ff0:	e008      	b.n	8018004 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017ffc:	68b9      	ldr	r1, [r7, #8]
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f000 f80a 	bl	8018018 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d1e3      	bne.n	8017fd2 <ip_reass_tmr+0x12>
    }
  }
}
 801800a:	bf00      	nop
 801800c:	3710      	adds	r7, #16
 801800e:	46bd      	mov	sp, r7
 8018010:	bd80      	pop	{r7, pc}
 8018012:	bf00      	nop
 8018014:	200215ec 	.word	0x200215ec

08018018 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b088      	sub	sp, #32
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018022:	2300      	movs	r3, #0
 8018024:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018026:	683a      	ldr	r2, [r7, #0]
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	429a      	cmp	r2, r3
 801802c:	d105      	bne.n	801803a <ip_reass_free_complete_datagram+0x22>
 801802e:	4b45      	ldr	r3, [pc, #276]	; (8018144 <ip_reass_free_complete_datagram+0x12c>)
 8018030:	22ab      	movs	r2, #171	; 0xab
 8018032:	4945      	ldr	r1, [pc, #276]	; (8018148 <ip_reass_free_complete_datagram+0x130>)
 8018034:	4845      	ldr	r0, [pc, #276]	; (801814c <ip_reass_free_complete_datagram+0x134>)
 8018036:	f001 ff71 	bl	8019f1c <iprintf>
  if (prev != NULL) {
 801803a:	683b      	ldr	r3, [r7, #0]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d00a      	beq.n	8018056 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018040:	683b      	ldr	r3, [r7, #0]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	687a      	ldr	r2, [r7, #4]
 8018046:	429a      	cmp	r2, r3
 8018048:	d005      	beq.n	8018056 <ip_reass_free_complete_datagram+0x3e>
 801804a:	4b3e      	ldr	r3, [pc, #248]	; (8018144 <ip_reass_free_complete_datagram+0x12c>)
 801804c:	22ad      	movs	r2, #173	; 0xad
 801804e:	4940      	ldr	r1, [pc, #256]	; (8018150 <ip_reass_free_complete_datagram+0x138>)
 8018050:	483e      	ldr	r0, [pc, #248]	; (801814c <ip_reass_free_complete_datagram+0x134>)
 8018052:	f001 ff63 	bl	8019f1c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	889b      	ldrh	r3, [r3, #4]
 8018062:	b29b      	uxth	r3, r3
 8018064:	2b00      	cmp	r3, #0
 8018066:	d12a      	bne.n	80180be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801806e:	697b      	ldr	r3, [r7, #20]
 8018070:	681a      	ldr	r2, [r3, #0]
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018076:	69bb      	ldr	r3, [r7, #24]
 8018078:	6858      	ldr	r0, [r3, #4]
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	3308      	adds	r3, #8
 801807e:	2214      	movs	r2, #20
 8018080:	4619      	mov	r1, r3
 8018082:	f001 f8e0 	bl	8019246 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018086:	2101      	movs	r1, #1
 8018088:	69b8      	ldr	r0, [r7, #24]
 801808a:	f7ff fa67 	bl	801755c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801808e:	69b8      	ldr	r0, [r7, #24]
 8018090:	f7f5 f804 	bl	800d09c <pbuf_clen>
 8018094:	4603      	mov	r3, r0
 8018096:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018098:	8bfa      	ldrh	r2, [r7, #30]
 801809a:	8a7b      	ldrh	r3, [r7, #18]
 801809c:	4413      	add	r3, r2
 801809e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180a2:	db05      	blt.n	80180b0 <ip_reass_free_complete_datagram+0x98>
 80180a4:	4b27      	ldr	r3, [pc, #156]	; (8018144 <ip_reass_free_complete_datagram+0x12c>)
 80180a6:	22bc      	movs	r2, #188	; 0xbc
 80180a8:	492a      	ldr	r1, [pc, #168]	; (8018154 <ip_reass_free_complete_datagram+0x13c>)
 80180aa:	4828      	ldr	r0, [pc, #160]	; (801814c <ip_reass_free_complete_datagram+0x134>)
 80180ac:	f001 ff36 	bl	8019f1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180b0:	8bfa      	ldrh	r2, [r7, #30]
 80180b2:	8a7b      	ldrh	r3, [r7, #18]
 80180b4:	4413      	add	r3, r2
 80180b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80180b8:	69b8      	ldr	r0, [r7, #24]
 80180ba:	f7f4 ff61 	bl	800cf80 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	685b      	ldr	r3, [r3, #4]
 80180c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80180c4:	e01f      	b.n	8018106 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80180c6:	69bb      	ldr	r3, [r7, #24]
 80180c8:	685b      	ldr	r3, [r3, #4]
 80180ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80180cc:	69bb      	ldr	r3, [r7, #24]
 80180ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80180d0:	697b      	ldr	r3, [r7, #20]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80180d6:	68f8      	ldr	r0, [r7, #12]
 80180d8:	f7f4 ffe0 	bl	800d09c <pbuf_clen>
 80180dc:	4603      	mov	r3, r0
 80180de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80180e0:	8bfa      	ldrh	r2, [r7, #30]
 80180e2:	8a7b      	ldrh	r3, [r7, #18]
 80180e4:	4413      	add	r3, r2
 80180e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80180ea:	db05      	blt.n	80180f8 <ip_reass_free_complete_datagram+0xe0>
 80180ec:	4b15      	ldr	r3, [pc, #84]	; (8018144 <ip_reass_free_complete_datagram+0x12c>)
 80180ee:	22cc      	movs	r2, #204	; 0xcc
 80180f0:	4918      	ldr	r1, [pc, #96]	; (8018154 <ip_reass_free_complete_datagram+0x13c>)
 80180f2:	4816      	ldr	r0, [pc, #88]	; (801814c <ip_reass_free_complete_datagram+0x134>)
 80180f4:	f001 ff12 	bl	8019f1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80180f8:	8bfa      	ldrh	r2, [r7, #30]
 80180fa:	8a7b      	ldrh	r3, [r7, #18]
 80180fc:	4413      	add	r3, r2
 80180fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018100:	68f8      	ldr	r0, [r7, #12]
 8018102:	f7f4 ff3d 	bl	800cf80 <pbuf_free>
  while (p != NULL) {
 8018106:	69bb      	ldr	r3, [r7, #24]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d1dc      	bne.n	80180c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801810c:	6839      	ldr	r1, [r7, #0]
 801810e:	6878      	ldr	r0, [r7, #4]
 8018110:	f000 f8c2 	bl	8018298 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018114:	4b10      	ldr	r3, [pc, #64]	; (8018158 <ip_reass_free_complete_datagram+0x140>)
 8018116:	881b      	ldrh	r3, [r3, #0]
 8018118:	8bfa      	ldrh	r2, [r7, #30]
 801811a:	429a      	cmp	r2, r3
 801811c:	d905      	bls.n	801812a <ip_reass_free_complete_datagram+0x112>
 801811e:	4b09      	ldr	r3, [pc, #36]	; (8018144 <ip_reass_free_complete_datagram+0x12c>)
 8018120:	22d2      	movs	r2, #210	; 0xd2
 8018122:	490e      	ldr	r1, [pc, #56]	; (801815c <ip_reass_free_complete_datagram+0x144>)
 8018124:	4809      	ldr	r0, [pc, #36]	; (801814c <ip_reass_free_complete_datagram+0x134>)
 8018126:	f001 fef9 	bl	8019f1c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801812a:	4b0b      	ldr	r3, [pc, #44]	; (8018158 <ip_reass_free_complete_datagram+0x140>)
 801812c:	881a      	ldrh	r2, [r3, #0]
 801812e:	8bfb      	ldrh	r3, [r7, #30]
 8018130:	1ad3      	subs	r3, r2, r3
 8018132:	b29a      	uxth	r2, r3
 8018134:	4b08      	ldr	r3, [pc, #32]	; (8018158 <ip_reass_free_complete_datagram+0x140>)
 8018136:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018138:	8bfb      	ldrh	r3, [r7, #30]
}
 801813a:	4618      	mov	r0, r3
 801813c:	3720      	adds	r7, #32
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	08021774 	.word	0x08021774
 8018148:	080217b0 	.word	0x080217b0
 801814c:	080217bc 	.word	0x080217bc
 8018150:	080217e4 	.word	0x080217e4
 8018154:	080217f8 	.word	0x080217f8
 8018158:	200215f0 	.word	0x200215f0
 801815c:	08021818 	.word	0x08021818

08018160 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b08a      	sub	sp, #40	; 0x28
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
 8018168:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801816a:	2300      	movs	r3, #0
 801816c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801816e:	2300      	movs	r3, #0
 8018170:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018172:	2300      	movs	r3, #0
 8018174:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018176:	2300      	movs	r3, #0
 8018178:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801817a:	2300      	movs	r3, #0
 801817c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801817e:	4b28      	ldr	r3, [pc, #160]	; (8018220 <ip_reass_remove_oldest_datagram+0xc0>)
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018184:	e030      	b.n	80181e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018188:	695a      	ldr	r2, [r3, #20]
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	68db      	ldr	r3, [r3, #12]
 801818e:	429a      	cmp	r2, r3
 8018190:	d10c      	bne.n	80181ac <ip_reass_remove_oldest_datagram+0x4c>
 8018192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018194:	699a      	ldr	r2, [r3, #24]
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	691b      	ldr	r3, [r3, #16]
 801819a:	429a      	cmp	r2, r3
 801819c:	d106      	bne.n	80181ac <ip_reass_remove_oldest_datagram+0x4c>
 801819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181a0:	899a      	ldrh	r2, [r3, #12]
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	889b      	ldrh	r3, [r3, #4]
 80181a6:	b29b      	uxth	r3, r3
 80181a8:	429a      	cmp	r2, r3
 80181aa:	d014      	beq.n	80181d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80181ac:	693b      	ldr	r3, [r7, #16]
 80181ae:	3301      	adds	r3, #1
 80181b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80181b2:	6a3b      	ldr	r3, [r7, #32]
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d104      	bne.n	80181c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80181b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181bc:	69fb      	ldr	r3, [r7, #28]
 80181be:	61bb      	str	r3, [r7, #24]
 80181c0:	e009      	b.n	80181d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80181c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181c4:	7fda      	ldrb	r2, [r3, #31]
 80181c6:	6a3b      	ldr	r3, [r7, #32]
 80181c8:	7fdb      	ldrb	r3, [r3, #31]
 80181ca:	429a      	cmp	r2, r3
 80181cc:	d803      	bhi.n	80181d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80181ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80181d2:	69fb      	ldr	r3, [r7, #28]
 80181d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80181d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d001      	beq.n	80181e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80181de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80181e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e4:	681b      	ldr	r3, [r3, #0]
 80181e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80181e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d1cb      	bne.n	8018186 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80181ee:	6a3b      	ldr	r3, [r7, #32]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d008      	beq.n	8018206 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80181f4:	69b9      	ldr	r1, [r7, #24]
 80181f6:	6a38      	ldr	r0, [r7, #32]
 80181f8:	f7ff ff0e 	bl	8018018 <ip_reass_free_complete_datagram>
 80181fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80181fe:	697a      	ldr	r2, [r7, #20]
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	4413      	add	r3, r2
 8018204:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018206:	697a      	ldr	r2, [r7, #20]
 8018208:	683b      	ldr	r3, [r7, #0]
 801820a:	429a      	cmp	r2, r3
 801820c:	da02      	bge.n	8018214 <ip_reass_remove_oldest_datagram+0xb4>
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	2b01      	cmp	r3, #1
 8018212:	dcac      	bgt.n	801816e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018214:	697b      	ldr	r3, [r7, #20]
}
 8018216:	4618      	mov	r0, r3
 8018218:	3728      	adds	r7, #40	; 0x28
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}
 801821e:	bf00      	nop
 8018220:	200215ec 	.word	0x200215ec

08018224 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b084      	sub	sp, #16
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
 801822c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801822e:	2004      	movs	r0, #4
 8018230:	f7f3 ffa8 	bl	800c184 <memp_malloc>
 8018234:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	2b00      	cmp	r3, #0
 801823a:	d110      	bne.n	801825e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801823c:	6839      	ldr	r1, [r7, #0]
 801823e:	6878      	ldr	r0, [r7, #4]
 8018240:	f7ff ff8e 	bl	8018160 <ip_reass_remove_oldest_datagram>
 8018244:	4602      	mov	r2, r0
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	4293      	cmp	r3, r2
 801824a:	dc03      	bgt.n	8018254 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801824c:	2004      	movs	r0, #4
 801824e:	f7f3 ff99 	bl	800c184 <memp_malloc>
 8018252:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d101      	bne.n	801825e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801825a:	2300      	movs	r3, #0
 801825c:	e016      	b.n	801828c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801825e:	2220      	movs	r2, #32
 8018260:	2100      	movs	r1, #0
 8018262:	68f8      	ldr	r0, [r7, #12]
 8018264:	f001 f813 	bl	801928e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	220f      	movs	r2, #15
 801826c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801826e:	4b09      	ldr	r3, [pc, #36]	; (8018294 <ip_reass_enqueue_new_datagram+0x70>)
 8018270:	681a      	ldr	r2, [r3, #0]
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018276:	4a07      	ldr	r2, [pc, #28]	; (8018294 <ip_reass_enqueue_new_datagram+0x70>)
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	3308      	adds	r3, #8
 8018280:	2214      	movs	r2, #20
 8018282:	6879      	ldr	r1, [r7, #4]
 8018284:	4618      	mov	r0, r3
 8018286:	f000 ffde 	bl	8019246 <memcpy>
  return ipr;
 801828a:	68fb      	ldr	r3, [r7, #12]
}
 801828c:	4618      	mov	r0, r3
 801828e:	3710      	adds	r7, #16
 8018290:	46bd      	mov	sp, r7
 8018292:	bd80      	pop	{r7, pc}
 8018294:	200215ec 	.word	0x200215ec

08018298 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b082      	sub	sp, #8
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
 80182a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80182a2:	4b10      	ldr	r3, [pc, #64]	; (80182e4 <ip_reass_dequeue_datagram+0x4c>)
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	687a      	ldr	r2, [r7, #4]
 80182a8:	429a      	cmp	r2, r3
 80182aa:	d104      	bne.n	80182b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	4a0c      	ldr	r2, [pc, #48]	; (80182e4 <ip_reass_dequeue_datagram+0x4c>)
 80182b2:	6013      	str	r3, [r2, #0]
 80182b4:	e00d      	b.n	80182d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80182b6:	683b      	ldr	r3, [r7, #0]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d106      	bne.n	80182ca <ip_reass_dequeue_datagram+0x32>
 80182bc:	4b0a      	ldr	r3, [pc, #40]	; (80182e8 <ip_reass_dequeue_datagram+0x50>)
 80182be:	f240 1245 	movw	r2, #325	; 0x145
 80182c2:	490a      	ldr	r1, [pc, #40]	; (80182ec <ip_reass_dequeue_datagram+0x54>)
 80182c4:	480a      	ldr	r0, [pc, #40]	; (80182f0 <ip_reass_dequeue_datagram+0x58>)
 80182c6:	f001 fe29 	bl	8019f1c <iprintf>
    prev->next = ipr->next;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681a      	ldr	r2, [r3, #0]
 80182ce:	683b      	ldr	r3, [r7, #0]
 80182d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80182d2:	6879      	ldr	r1, [r7, #4]
 80182d4:	2004      	movs	r0, #4
 80182d6:	f7f3 ffa7 	bl	800c228 <memp_free>
}
 80182da:	bf00      	nop
 80182dc:	3708      	adds	r7, #8
 80182de:	46bd      	mov	sp, r7
 80182e0:	bd80      	pop	{r7, pc}
 80182e2:	bf00      	nop
 80182e4:	200215ec 	.word	0x200215ec
 80182e8:	08021774 	.word	0x08021774
 80182ec:	0802183c 	.word	0x0802183c
 80182f0:	080217bc 	.word	0x080217bc

080182f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b08c      	sub	sp, #48	; 0x30
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	60f8      	str	r0, [r7, #12]
 80182fc:	60b9      	str	r1, [r7, #8]
 80182fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018300:	2300      	movs	r3, #0
 8018302:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018304:	2301      	movs	r3, #1
 8018306:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	685b      	ldr	r3, [r3, #4]
 801830c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801830e:	69fb      	ldr	r3, [r7, #28]
 8018310:	885b      	ldrh	r3, [r3, #2]
 8018312:	b29b      	uxth	r3, r3
 8018314:	4618      	mov	r0, r3
 8018316:	f7f2 faab 	bl	800a870 <lwip_htons>
 801831a:	4603      	mov	r3, r0
 801831c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801831e:	69fb      	ldr	r3, [r7, #28]
 8018320:	781b      	ldrb	r3, [r3, #0]
 8018322:	f003 030f 	and.w	r3, r3, #15
 8018326:	b2db      	uxtb	r3, r3
 8018328:	009b      	lsls	r3, r3, #2
 801832a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801832c:	7e7b      	ldrb	r3, [r7, #25]
 801832e:	b29b      	uxth	r3, r3
 8018330:	8b7a      	ldrh	r2, [r7, #26]
 8018332:	429a      	cmp	r2, r3
 8018334:	d202      	bcs.n	801833c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018336:	f04f 33ff 	mov.w	r3, #4294967295
 801833a:	e135      	b.n	80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801833c:	7e7b      	ldrb	r3, [r7, #25]
 801833e:	b29b      	uxth	r3, r3
 8018340:	8b7a      	ldrh	r2, [r7, #26]
 8018342:	1ad3      	subs	r3, r2, r3
 8018344:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018346:	69fb      	ldr	r3, [r7, #28]
 8018348:	88db      	ldrh	r3, [r3, #6]
 801834a:	b29b      	uxth	r3, r3
 801834c:	4618      	mov	r0, r3
 801834e:	f7f2 fa8f 	bl	800a870 <lwip_htons>
 8018352:	4603      	mov	r3, r0
 8018354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018358:	b29b      	uxth	r3, r3
 801835a:	00db      	lsls	r3, r3, #3
 801835c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	685b      	ldr	r3, [r3, #4]
 8018362:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018366:	2200      	movs	r2, #0
 8018368:	701a      	strb	r2, [r3, #0]
 801836a:	2200      	movs	r2, #0
 801836c:	705a      	strb	r2, [r3, #1]
 801836e:	2200      	movs	r2, #0
 8018370:	709a      	strb	r2, [r3, #2]
 8018372:	2200      	movs	r2, #0
 8018374:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018378:	8afa      	ldrh	r2, [r7, #22]
 801837a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801837c:	8afa      	ldrh	r2, [r7, #22]
 801837e:	8b7b      	ldrh	r3, [r7, #26]
 8018380:	4413      	add	r3, r2
 8018382:	b29a      	uxth	r2, r3
 8018384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018386:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801838a:	88db      	ldrh	r3, [r3, #6]
 801838c:	b29b      	uxth	r3, r3
 801838e:	8afa      	ldrh	r2, [r7, #22]
 8018390:	429a      	cmp	r2, r3
 8018392:	d902      	bls.n	801839a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018394:	f04f 33ff 	mov.w	r3, #4294967295
 8018398:	e106      	b.n	80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	685b      	ldr	r3, [r3, #4]
 801839e:	627b      	str	r3, [r7, #36]	; 0x24
 80183a0:	e068      	b.n	8018474 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80183a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80183a4:	685b      	ldr	r3, [r3, #4]
 80183a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80183a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183aa:	889b      	ldrh	r3, [r3, #4]
 80183ac:	b29a      	uxth	r2, r3
 80183ae:	693b      	ldr	r3, [r7, #16]
 80183b0:	889b      	ldrh	r3, [r3, #4]
 80183b2:	b29b      	uxth	r3, r3
 80183b4:	429a      	cmp	r2, r3
 80183b6:	d235      	bcs.n	8018424 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80183b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80183be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d020      	beq.n	8018406 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80183c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183c6:	889b      	ldrh	r3, [r3, #4]
 80183c8:	b29a      	uxth	r2, r3
 80183ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183cc:	88db      	ldrh	r3, [r3, #6]
 80183ce:	b29b      	uxth	r3, r3
 80183d0:	429a      	cmp	r2, r3
 80183d2:	d307      	bcc.n	80183e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80183d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183d6:	88db      	ldrh	r3, [r3, #6]
 80183d8:	b29a      	uxth	r2, r3
 80183da:	693b      	ldr	r3, [r7, #16]
 80183dc:	889b      	ldrh	r3, [r3, #4]
 80183de:	b29b      	uxth	r3, r3
 80183e0:	429a      	cmp	r2, r3
 80183e2:	d902      	bls.n	80183ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80183e4:	f04f 33ff 	mov.w	r3, #4294967295
 80183e8:	e0de      	b.n	80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80183ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ec:	68ba      	ldr	r2, [r7, #8]
 80183ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80183f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183f2:	88db      	ldrh	r3, [r3, #6]
 80183f4:	b29a      	uxth	r2, r3
 80183f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183f8:	889b      	ldrh	r3, [r3, #4]
 80183fa:	b29b      	uxth	r3, r3
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d03d      	beq.n	801847c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018400:	2300      	movs	r3, #0
 8018402:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018404:	e03a      	b.n	801847c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018408:	88db      	ldrh	r3, [r3, #6]
 801840a:	b29a      	uxth	r2, r3
 801840c:	693b      	ldr	r3, [r7, #16]
 801840e:	889b      	ldrh	r3, [r3, #4]
 8018410:	b29b      	uxth	r3, r3
 8018412:	429a      	cmp	r2, r3
 8018414:	d902      	bls.n	801841c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018416:	f04f 33ff 	mov.w	r3, #4294967295
 801841a:	e0c5      	b.n	80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	68ba      	ldr	r2, [r7, #8]
 8018420:	605a      	str	r2, [r3, #4]
      break;
 8018422:	e02b      	b.n	801847c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018426:	889b      	ldrh	r3, [r3, #4]
 8018428:	b29a      	uxth	r2, r3
 801842a:	693b      	ldr	r3, [r7, #16]
 801842c:	889b      	ldrh	r3, [r3, #4]
 801842e:	b29b      	uxth	r3, r3
 8018430:	429a      	cmp	r2, r3
 8018432:	d102      	bne.n	801843a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018434:	f04f 33ff 	mov.w	r3, #4294967295
 8018438:	e0b6      	b.n	80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801843a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801843c:	889b      	ldrh	r3, [r3, #4]
 801843e:	b29a      	uxth	r2, r3
 8018440:	693b      	ldr	r3, [r7, #16]
 8018442:	88db      	ldrh	r3, [r3, #6]
 8018444:	b29b      	uxth	r3, r3
 8018446:	429a      	cmp	r2, r3
 8018448:	d202      	bcs.n	8018450 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801844a:	f04f 33ff 	mov.w	r3, #4294967295
 801844e:	e0ab      	b.n	80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018452:	2b00      	cmp	r3, #0
 8018454:	d009      	beq.n	801846a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018458:	88db      	ldrh	r3, [r3, #6]
 801845a:	b29a      	uxth	r2, r3
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	889b      	ldrh	r3, [r3, #4]
 8018460:	b29b      	uxth	r3, r3
 8018462:	429a      	cmp	r2, r3
 8018464:	d001      	beq.n	801846a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018466:	2300      	movs	r3, #0
 8018468:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801846a:	693b      	ldr	r3, [r7, #16]
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018470:	693b      	ldr	r3, [r7, #16]
 8018472:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018476:	2b00      	cmp	r3, #0
 8018478:	d193      	bne.n	80183a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801847a:	e000      	b.n	801847e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801847c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018480:	2b00      	cmp	r3, #0
 8018482:	d12d      	bne.n	80184e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018486:	2b00      	cmp	r3, #0
 8018488:	d01c      	beq.n	80184c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848c:	88db      	ldrh	r3, [r3, #6]
 801848e:	b29a      	uxth	r2, r3
 8018490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018492:	889b      	ldrh	r3, [r3, #4]
 8018494:	b29b      	uxth	r3, r3
 8018496:	429a      	cmp	r2, r3
 8018498:	d906      	bls.n	80184a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801849a:	4b45      	ldr	r3, [pc, #276]	; (80185b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801849c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80184a0:	4944      	ldr	r1, [pc, #272]	; (80185b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80184a2:	4845      	ldr	r0, [pc, #276]	; (80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184a4:	f001 fd3a 	bl	8019f1c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80184a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184aa:	68ba      	ldr	r2, [r7, #8]
 80184ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80184ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b0:	88db      	ldrh	r3, [r3, #6]
 80184b2:	b29a      	uxth	r2, r3
 80184b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184b6:	889b      	ldrh	r3, [r3, #4]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d010      	beq.n	80184e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80184be:	2300      	movs	r3, #0
 80184c0:	623b      	str	r3, [r7, #32]
 80184c2:	e00d      	b.n	80184e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	685b      	ldr	r3, [r3, #4]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d006      	beq.n	80184da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80184cc:	4b38      	ldr	r3, [pc, #224]	; (80185b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80184ce:	f240 12bf 	movw	r2, #447	; 0x1bf
 80184d2:	493a      	ldr	r1, [pc, #232]	; (80185bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80184d4:	4838      	ldr	r0, [pc, #224]	; (80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80184d6:	f001 fd21 	bl	8019f1c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80184da:	68fb      	ldr	r3, [r7, #12]
 80184dc:	68ba      	ldr	r2, [r7, #8]
 80184de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d105      	bne.n	80184f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	7f9b      	ldrb	r3, [r3, #30]
 80184ea:	f003 0301 	and.w	r3, r3, #1
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d059      	beq.n	80185a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80184f2:	6a3b      	ldr	r3, [r7, #32]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d04f      	beq.n	8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	685b      	ldr	r3, [r3, #4]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d006      	beq.n	801850e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018500:	68fb      	ldr	r3, [r7, #12]
 8018502:	685b      	ldr	r3, [r3, #4]
 8018504:	685b      	ldr	r3, [r3, #4]
 8018506:	889b      	ldrh	r3, [r3, #4]
 8018508:	b29b      	uxth	r3, r3
 801850a:	2b00      	cmp	r3, #0
 801850c:	d002      	beq.n	8018514 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801850e:	2300      	movs	r3, #0
 8018510:	623b      	str	r3, [r7, #32]
 8018512:	e041      	b.n	8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018516:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801851e:	e012      	b.n	8018546 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018522:	685b      	ldr	r3, [r3, #4]
 8018524:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018528:	88db      	ldrh	r3, [r3, #6]
 801852a:	b29a      	uxth	r2, r3
 801852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801852e:	889b      	ldrh	r3, [r3, #4]
 8018530:	b29b      	uxth	r3, r3
 8018532:	429a      	cmp	r2, r3
 8018534:	d002      	beq.n	801853c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018536:	2300      	movs	r3, #0
 8018538:	623b      	str	r3, [r7, #32]
            break;
 801853a:	e007      	b.n	801854c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801853e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018548:	2b00      	cmp	r3, #0
 801854a:	d1e9      	bne.n	8018520 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801854c:	6a3b      	ldr	r3, [r7, #32]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d022      	beq.n	8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018552:	68fb      	ldr	r3, [r7, #12]
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	2b00      	cmp	r3, #0
 8018558:	d106      	bne.n	8018568 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801855a:	4b15      	ldr	r3, [pc, #84]	; (80185b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801855c:	f240 12df 	movw	r2, #479	; 0x1df
 8018560:	4917      	ldr	r1, [pc, #92]	; (80185c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018562:	4815      	ldr	r0, [pc, #84]	; (80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018564:	f001 fcda 	bl	8019f1c <iprintf>
          LWIP_ASSERT("sanity check",
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	685b      	ldr	r3, [r3, #4]
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018570:	429a      	cmp	r2, r3
 8018572:	d106      	bne.n	8018582 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018574:	4b0e      	ldr	r3, [pc, #56]	; (80185b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018576:	f240 12e1 	movw	r2, #481	; 0x1e1
 801857a:	4911      	ldr	r1, [pc, #68]	; (80185c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801857c:	480e      	ldr	r0, [pc, #56]	; (80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801857e:	f001 fccd 	bl	8019f1c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d006      	beq.n	8018598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801858a:	4b09      	ldr	r3, [pc, #36]	; (80185b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801858c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8018590:	490c      	ldr	r1, [pc, #48]	; (80185c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018592:	4809      	ldr	r0, [pc, #36]	; (80185b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018594:	f001 fcc2 	bl	8019f1c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018598:	6a3b      	ldr	r3, [r7, #32]
 801859a:	2b00      	cmp	r3, #0
 801859c:	bf14      	ite	ne
 801859e:	2301      	movne	r3, #1
 80185a0:	2300      	moveq	r3, #0
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	e000      	b.n	80185a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80185a6:	2300      	movs	r3, #0
}
 80185a8:	4618      	mov	r0, r3
 80185aa:	3730      	adds	r7, #48	; 0x30
 80185ac:	46bd      	mov	sp, r7
 80185ae:	bd80      	pop	{r7, pc}
 80185b0:	08021774 	.word	0x08021774
 80185b4:	08021858 	.word	0x08021858
 80185b8:	080217bc 	.word	0x080217bc
 80185bc:	08021878 	.word	0x08021878
 80185c0:	080218b0 	.word	0x080218b0
 80185c4:	080218c0 	.word	0x080218c0

080185c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80185c8:	b580      	push	{r7, lr}
 80185ca:	b08e      	sub	sp, #56	; 0x38
 80185cc:	af00      	add	r7, sp, #0
 80185ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	685b      	ldr	r3, [r3, #4]
 80185d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80185d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185d8:	781b      	ldrb	r3, [r3, #0]
 80185da:	f003 030f 	and.w	r3, r3, #15
 80185de:	b2db      	uxtb	r3, r3
 80185e0:	009b      	lsls	r3, r3, #2
 80185e2:	b2db      	uxtb	r3, r3
 80185e4:	2b14      	cmp	r3, #20
 80185e6:	f040 8167 	bne.w	80188b8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80185ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ec:	88db      	ldrh	r3, [r3, #6]
 80185ee:	b29b      	uxth	r3, r3
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7f2 f93d 	bl	800a870 <lwip_htons>
 80185f6:	4603      	mov	r3, r0
 80185f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80185fc:	b29b      	uxth	r3, r3
 80185fe:	00db      	lsls	r3, r3, #3
 8018600:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018604:	885b      	ldrh	r3, [r3, #2]
 8018606:	b29b      	uxth	r3, r3
 8018608:	4618      	mov	r0, r3
 801860a:	f7f2 f931 	bl	800a870 <lwip_htons>
 801860e:	4603      	mov	r3, r0
 8018610:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018614:	781b      	ldrb	r3, [r3, #0]
 8018616:	f003 030f 	and.w	r3, r3, #15
 801861a:	b2db      	uxtb	r3, r3
 801861c:	009b      	lsls	r3, r3, #2
 801861e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018626:	b29b      	uxth	r3, r3
 8018628:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801862a:	429a      	cmp	r2, r3
 801862c:	f0c0 8146 	bcc.w	80188bc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018634:	b29b      	uxth	r3, r3
 8018636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018638:	1ad3      	subs	r3, r2, r3
 801863a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7f4 fd2d 	bl	800d09c <pbuf_clen>
 8018642:	4603      	mov	r3, r0
 8018644:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018646:	4ba3      	ldr	r3, [pc, #652]	; (80188d4 <ip4_reass+0x30c>)
 8018648:	881b      	ldrh	r3, [r3, #0]
 801864a:	461a      	mov	r2, r3
 801864c:	8c3b      	ldrh	r3, [r7, #32]
 801864e:	4413      	add	r3, r2
 8018650:	2b0a      	cmp	r3, #10
 8018652:	dd10      	ble.n	8018676 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018654:	8c3b      	ldrh	r3, [r7, #32]
 8018656:	4619      	mov	r1, r3
 8018658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801865a:	f7ff fd81 	bl	8018160 <ip_reass_remove_oldest_datagram>
 801865e:	4603      	mov	r3, r0
 8018660:	2b00      	cmp	r3, #0
 8018662:	f000 812d 	beq.w	80188c0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018666:	4b9b      	ldr	r3, [pc, #620]	; (80188d4 <ip4_reass+0x30c>)
 8018668:	881b      	ldrh	r3, [r3, #0]
 801866a:	461a      	mov	r2, r3
 801866c:	8c3b      	ldrh	r3, [r7, #32]
 801866e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018670:	2b0a      	cmp	r3, #10
 8018672:	f300 8125 	bgt.w	80188c0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018676:	4b98      	ldr	r3, [pc, #608]	; (80188d8 <ip4_reass+0x310>)
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	633b      	str	r3, [r7, #48]	; 0x30
 801867c:	e015      	b.n	80186aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018680:	695a      	ldr	r2, [r3, #20]
 8018682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	429a      	cmp	r2, r3
 8018688:	d10c      	bne.n	80186a4 <ip4_reass+0xdc>
 801868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801868c:	699a      	ldr	r2, [r3, #24]
 801868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018690:	691b      	ldr	r3, [r3, #16]
 8018692:	429a      	cmp	r2, r3
 8018694:	d106      	bne.n	80186a4 <ip4_reass+0xdc>
 8018696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018698:	899a      	ldrh	r2, [r3, #12]
 801869a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801869c:	889b      	ldrh	r3, [r3, #4]
 801869e:	b29b      	uxth	r3, r3
 80186a0:	429a      	cmp	r2, r3
 80186a2:	d006      	beq.n	80186b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80186a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	633b      	str	r3, [r7, #48]	; 0x30
 80186aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d1e6      	bne.n	801867e <ip4_reass+0xb6>
 80186b0:	e000      	b.n	80186b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80186b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80186b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186b6:	2b00      	cmp	r3, #0
 80186b8:	d109      	bne.n	80186ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80186ba:	8c3b      	ldrh	r3, [r7, #32]
 80186bc:	4619      	mov	r1, r3
 80186be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80186c0:	f7ff fdb0 	bl	8018224 <ip_reass_enqueue_new_datagram>
 80186c4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80186c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	d11c      	bne.n	8018706 <ip4_reass+0x13e>
      goto nullreturn;
 80186cc:	e0f9      	b.n	80188c2 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d0:	88db      	ldrh	r3, [r3, #6]
 80186d2:	b29b      	uxth	r3, r3
 80186d4:	4618      	mov	r0, r3
 80186d6:	f7f2 f8cb 	bl	800a870 <lwip_htons>
 80186da:	4603      	mov	r3, r0
 80186dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d110      	bne.n	8018706 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80186e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186e6:	89db      	ldrh	r3, [r3, #14]
 80186e8:	4618      	mov	r0, r3
 80186ea:	f7f2 f8c1 	bl	800a870 <lwip_htons>
 80186ee:	4603      	mov	r3, r0
 80186f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d006      	beq.n	8018706 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80186f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186fa:	3308      	adds	r3, #8
 80186fc:	2214      	movs	r2, #20
 80186fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018700:	4618      	mov	r0, r3
 8018702:	f000 fda0 	bl	8019246 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018708:	88db      	ldrh	r3, [r3, #6]
 801870a:	b29b      	uxth	r3, r3
 801870c:	f003 0320 	and.w	r3, r3, #32
 8018710:	2b00      	cmp	r3, #0
 8018712:	bf0c      	ite	eq
 8018714:	2301      	moveq	r3, #1
 8018716:	2300      	movne	r3, #0
 8018718:	b2db      	uxtb	r3, r3
 801871a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801871c:	69fb      	ldr	r3, [r7, #28]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d00e      	beq.n	8018740 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018722:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018726:	4413      	add	r3, r2
 8018728:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801872a:	8b7a      	ldrh	r2, [r7, #26]
 801872c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801872e:	429a      	cmp	r2, r3
 8018730:	f0c0 80a0 	bcc.w	8018874 <ip4_reass+0x2ac>
 8018734:	8b7b      	ldrh	r3, [r7, #26]
 8018736:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801873a:	4293      	cmp	r3, r2
 801873c:	f200 809a 	bhi.w	8018874 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018740:	69fa      	ldr	r2, [r7, #28]
 8018742:	6879      	ldr	r1, [r7, #4]
 8018744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018746:	f7ff fdd5 	bl	80182f4 <ip_reass_chain_frag_into_datagram_and_validate>
 801874a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801874c:	697b      	ldr	r3, [r7, #20]
 801874e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018752:	f000 8091 	beq.w	8018878 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018756:	4b5f      	ldr	r3, [pc, #380]	; (80188d4 <ip4_reass+0x30c>)
 8018758:	881a      	ldrh	r2, [r3, #0]
 801875a:	8c3b      	ldrh	r3, [r7, #32]
 801875c:	4413      	add	r3, r2
 801875e:	b29a      	uxth	r2, r3
 8018760:	4b5c      	ldr	r3, [pc, #368]	; (80188d4 <ip4_reass+0x30c>)
 8018762:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018764:	69fb      	ldr	r3, [r7, #28]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d00d      	beq.n	8018786 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801876a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801876c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801876e:	4413      	add	r3, r2
 8018770:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018774:	8a7a      	ldrh	r2, [r7, #18]
 8018776:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801877a:	7f9b      	ldrb	r3, [r3, #30]
 801877c:	f043 0301 	orr.w	r3, r3, #1
 8018780:	b2da      	uxtb	r2, r3
 8018782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018784:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018786:	697b      	ldr	r3, [r7, #20]
 8018788:	2b01      	cmp	r3, #1
 801878a:	d171      	bne.n	8018870 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878e:	8b9b      	ldrh	r3, [r3, #28]
 8018790:	3314      	adds	r3, #20
 8018792:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018796:	685b      	ldr	r3, [r3, #4]
 8018798:	685b      	ldr	r3, [r3, #4]
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801879e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	685b      	ldr	r3, [r3, #4]
 80187a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80187a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187a8:	3308      	adds	r3, #8
 80187aa:	2214      	movs	r2, #20
 80187ac:	4619      	mov	r1, r3
 80187ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80187b0:	f000 fd49 	bl	8019246 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80187b4:	8a3b      	ldrh	r3, [r7, #16]
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7f2 f85a 	bl	800a870 <lwip_htons>
 80187bc:	4603      	mov	r3, r0
 80187be:	461a      	mov	r2, r3
 80187c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80187c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c6:	2200      	movs	r2, #0
 80187c8:	719a      	strb	r2, [r3, #6]
 80187ca:	2200      	movs	r2, #0
 80187cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80187ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187d0:	2200      	movs	r2, #0
 80187d2:	729a      	strb	r2, [r3, #10]
 80187d4:	2200      	movs	r2, #0
 80187d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80187d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187da:	685b      	ldr	r3, [r3, #4]
 80187dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80187de:	e00d      	b.n	80187fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80187e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187e2:	685b      	ldr	r3, [r3, #4]
 80187e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80187e6:	2114      	movs	r1, #20
 80187e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80187ea:	f7f4 fb43 	bl	800ce74 <pbuf_remove_header>
      pbuf_cat(p, r);
 80187ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80187f0:	6878      	ldr	r0, [r7, #4]
 80187f2:	f7f4 fc93 	bl	800d11c <pbuf_cat>
      r = iprh->next_pbuf;
 80187f6:	68fb      	ldr	r3, [r7, #12]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80187fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d1ee      	bne.n	80187e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018802:	4b35      	ldr	r3, [pc, #212]	; (80188d8 <ip4_reass+0x310>)
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018808:	429a      	cmp	r2, r3
 801880a:	d102      	bne.n	8018812 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801880c:	2300      	movs	r3, #0
 801880e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018810:	e010      	b.n	8018834 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018812:	4b31      	ldr	r3, [pc, #196]	; (80188d8 <ip4_reass+0x310>)
 8018814:	681b      	ldr	r3, [r3, #0]
 8018816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018818:	e007      	b.n	801882a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018820:	429a      	cmp	r2, r3
 8018822:	d006      	beq.n	8018832 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	62fb      	str	r3, [r7, #44]	; 0x2c
 801882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801882c:	2b00      	cmp	r3, #0
 801882e:	d1f4      	bne.n	801881a <ip4_reass+0x252>
 8018830:	e000      	b.n	8018834 <ip4_reass+0x26c>
          break;
 8018832:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018838:	f7ff fd2e 	bl	8018298 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801883c:	6878      	ldr	r0, [r7, #4]
 801883e:	f7f4 fc2d 	bl	800d09c <pbuf_clen>
 8018842:	4603      	mov	r3, r0
 8018844:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018846:	4b23      	ldr	r3, [pc, #140]	; (80188d4 <ip4_reass+0x30c>)
 8018848:	881b      	ldrh	r3, [r3, #0]
 801884a:	8c3a      	ldrh	r2, [r7, #32]
 801884c:	429a      	cmp	r2, r3
 801884e:	d906      	bls.n	801885e <ip4_reass+0x296>
 8018850:	4b22      	ldr	r3, [pc, #136]	; (80188dc <ip4_reass+0x314>)
 8018852:	f240 229b 	movw	r2, #667	; 0x29b
 8018856:	4922      	ldr	r1, [pc, #136]	; (80188e0 <ip4_reass+0x318>)
 8018858:	4822      	ldr	r0, [pc, #136]	; (80188e4 <ip4_reass+0x31c>)
 801885a:	f001 fb5f 	bl	8019f1c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801885e:	4b1d      	ldr	r3, [pc, #116]	; (80188d4 <ip4_reass+0x30c>)
 8018860:	881a      	ldrh	r2, [r3, #0]
 8018862:	8c3b      	ldrh	r3, [r7, #32]
 8018864:	1ad3      	subs	r3, r2, r3
 8018866:	b29a      	uxth	r2, r3
 8018868:	4b1a      	ldr	r3, [pc, #104]	; (80188d4 <ip4_reass+0x30c>)
 801886a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	e02c      	b.n	80188ca <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018870:	2300      	movs	r3, #0
 8018872:	e02a      	b.n	80188ca <ip4_reass+0x302>

nullreturn_ipr:
 8018874:	bf00      	nop
 8018876:	e000      	b.n	801887a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018878:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887c:	2b00      	cmp	r3, #0
 801887e:	d106      	bne.n	801888e <ip4_reass+0x2c6>
 8018880:	4b16      	ldr	r3, [pc, #88]	; (80188dc <ip4_reass+0x314>)
 8018882:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018886:	4918      	ldr	r1, [pc, #96]	; (80188e8 <ip4_reass+0x320>)
 8018888:	4816      	ldr	r0, [pc, #88]	; (80188e4 <ip4_reass+0x31c>)
 801888a:	f001 fb47 	bl	8019f1c <iprintf>
  if (ipr->p == NULL) {
 801888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018890:	685b      	ldr	r3, [r3, #4]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d114      	bne.n	80188c0 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018896:	4b10      	ldr	r3, [pc, #64]	; (80188d8 <ip4_reass+0x310>)
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801889c:	429a      	cmp	r2, r3
 801889e:	d006      	beq.n	80188ae <ip4_reass+0x2e6>
 80188a0:	4b0e      	ldr	r3, [pc, #56]	; (80188dc <ip4_reass+0x314>)
 80188a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80188a6:	4911      	ldr	r1, [pc, #68]	; (80188ec <ip4_reass+0x324>)
 80188a8:	480e      	ldr	r0, [pc, #56]	; (80188e4 <ip4_reass+0x31c>)
 80188aa:	f001 fb37 	bl	8019f1c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80188ae:	2100      	movs	r1, #0
 80188b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188b2:	f7ff fcf1 	bl	8018298 <ip_reass_dequeue_datagram>
 80188b6:	e004      	b.n	80188c2 <ip4_reass+0x2fa>
    goto nullreturn;
 80188b8:	bf00      	nop
 80188ba:	e002      	b.n	80188c2 <ip4_reass+0x2fa>
    goto nullreturn;
 80188bc:	bf00      	nop
 80188be:	e000      	b.n	80188c2 <ip4_reass+0x2fa>
  }

nullreturn:
 80188c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f7f4 fb5c 	bl	800cf80 <pbuf_free>
  return NULL;
 80188c8:	2300      	movs	r3, #0
}
 80188ca:	4618      	mov	r0, r3
 80188cc:	3738      	adds	r7, #56	; 0x38
 80188ce:	46bd      	mov	sp, r7
 80188d0:	bd80      	pop	{r7, pc}
 80188d2:	bf00      	nop
 80188d4:	200215f0 	.word	0x200215f0
 80188d8:	200215ec 	.word	0x200215ec
 80188dc:	08021774 	.word	0x08021774
 80188e0:	080218e4 	.word	0x080218e4
 80188e4:	080217bc 	.word	0x080217bc
 80188e8:	08021900 	.word	0x08021900
 80188ec:	0802190c 	.word	0x0802190c

080188f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80188f4:	2005      	movs	r0, #5
 80188f6:	f7f3 fc45 	bl	800c184 <memp_malloc>
 80188fa:	4603      	mov	r3, r0
}
 80188fc:	4618      	mov	r0, r3
 80188fe:	bd80      	pop	{r7, pc}

08018900 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018900:	b580      	push	{r7, lr}
 8018902:	b082      	sub	sp, #8
 8018904:	af00      	add	r7, sp, #0
 8018906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d106      	bne.n	801891c <ip_frag_free_pbuf_custom_ref+0x1c>
 801890e:	4b07      	ldr	r3, [pc, #28]	; (801892c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018910:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018914:	4906      	ldr	r1, [pc, #24]	; (8018930 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018916:	4807      	ldr	r0, [pc, #28]	; (8018934 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018918:	f001 fb00 	bl	8019f1c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801891c:	6879      	ldr	r1, [r7, #4]
 801891e:	2005      	movs	r0, #5
 8018920:	f7f3 fc82 	bl	800c228 <memp_free>
}
 8018924:	bf00      	nop
 8018926:	3708      	adds	r7, #8
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}
 801892c:	08021774 	.word	0x08021774
 8018930:	0802192c 	.word	0x0802192c
 8018934:	080217bc 	.word	0x080217bc

08018938 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018944:	68fb      	ldr	r3, [r7, #12]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d106      	bne.n	8018958 <ipfrag_free_pbuf_custom+0x20>
 801894a:	4b11      	ldr	r3, [pc, #68]	; (8018990 <ipfrag_free_pbuf_custom+0x58>)
 801894c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018950:	4910      	ldr	r1, [pc, #64]	; (8018994 <ipfrag_free_pbuf_custom+0x5c>)
 8018952:	4811      	ldr	r0, [pc, #68]	; (8018998 <ipfrag_free_pbuf_custom+0x60>)
 8018954:	f001 fae2 	bl	8019f1c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018958:	68fa      	ldr	r2, [r7, #12]
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	429a      	cmp	r2, r3
 801895e:	d006      	beq.n	801896e <ipfrag_free_pbuf_custom+0x36>
 8018960:	4b0b      	ldr	r3, [pc, #44]	; (8018990 <ipfrag_free_pbuf_custom+0x58>)
 8018962:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018966:	490d      	ldr	r1, [pc, #52]	; (801899c <ipfrag_free_pbuf_custom+0x64>)
 8018968:	480b      	ldr	r0, [pc, #44]	; (8018998 <ipfrag_free_pbuf_custom+0x60>)
 801896a:	f001 fad7 	bl	8019f1c <iprintf>
  if (pcr->original != NULL) {
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	695b      	ldr	r3, [r3, #20]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d004      	beq.n	8018980 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018976:	68fb      	ldr	r3, [r7, #12]
 8018978:	695b      	ldr	r3, [r3, #20]
 801897a:	4618      	mov	r0, r3
 801897c:	f7f4 fb00 	bl	800cf80 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018980:	68f8      	ldr	r0, [r7, #12]
 8018982:	f7ff ffbd 	bl	8018900 <ip_frag_free_pbuf_custom_ref>
}
 8018986:	bf00      	nop
 8018988:	3710      	adds	r7, #16
 801898a:	46bd      	mov	sp, r7
 801898c:	bd80      	pop	{r7, pc}
 801898e:	bf00      	nop
 8018990:	08021774 	.word	0x08021774
 8018994:	08021938 	.word	0x08021938
 8018998:	080217bc 	.word	0x080217bc
 801899c:	08021944 	.word	0x08021944

080189a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	b094      	sub	sp, #80	; 0x50
 80189a4:	af02      	add	r7, sp, #8
 80189a6:	60f8      	str	r0, [r7, #12]
 80189a8:	60b9      	str	r1, [r7, #8]
 80189aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80189ac:	2300      	movs	r3, #0
 80189ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80189b2:	68bb      	ldr	r3, [r7, #8]
 80189b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189b6:	3b14      	subs	r3, #20
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	da00      	bge.n	80189be <ip4_frag+0x1e>
 80189bc:	3307      	adds	r3, #7
 80189be:	10db      	asrs	r3, r3, #3
 80189c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80189c2:	2314      	movs	r3, #20
 80189c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	685b      	ldr	r3, [r3, #4]
 80189ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80189cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80189ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80189d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189d2:	781b      	ldrb	r3, [r3, #0]
 80189d4:	f003 030f 	and.w	r3, r3, #15
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	009b      	lsls	r3, r3, #2
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	2b14      	cmp	r3, #20
 80189e0:	d002      	beq.n	80189e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80189e2:	f06f 0305 	mvn.w	r3, #5
 80189e6:	e10f      	b.n	8018c08 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	895b      	ldrh	r3, [r3, #10]
 80189ec:	2b13      	cmp	r3, #19
 80189ee:	d809      	bhi.n	8018a04 <ip4_frag+0x64>
 80189f0:	4b87      	ldr	r3, [pc, #540]	; (8018c10 <ip4_frag+0x270>)
 80189f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80189f6:	4987      	ldr	r1, [pc, #540]	; (8018c14 <ip4_frag+0x274>)
 80189f8:	4887      	ldr	r0, [pc, #540]	; (8018c18 <ip4_frag+0x278>)
 80189fa:	f001 fa8f 	bl	8019f1c <iprintf>
 80189fe:	f06f 0305 	mvn.w	r3, #5
 8018a02:	e101      	b.n	8018c08 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a06:	88db      	ldrh	r3, [r3, #6]
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7f1 ff30 	bl	800a870 <lwip_htons>
 8018a10:	4603      	mov	r3, r0
 8018a12:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018a14:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018a1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018a20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018a24:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	891b      	ldrh	r3, [r3, #8]
 8018a2a:	3b14      	subs	r3, #20
 8018a2c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018a30:	e0e0      	b.n	8018bf4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018a32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018a34:	00db      	lsls	r3, r3, #3
 8018a36:	b29b      	uxth	r3, r3
 8018a38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018a3c:	4293      	cmp	r3, r2
 8018a3e:	bf28      	it	cs
 8018a40:	4613      	movcs	r3, r2
 8018a42:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018a44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a48:	2114      	movs	r1, #20
 8018a4a:	200e      	movs	r0, #14
 8018a4c:	f7f3 ffb8 	bl	800c9c0 <pbuf_alloc>
 8018a50:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	f000 80d4 	beq.w	8018c02 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a5c:	895b      	ldrh	r3, [r3, #10]
 8018a5e:	2b13      	cmp	r3, #19
 8018a60:	d806      	bhi.n	8018a70 <ip4_frag+0xd0>
 8018a62:	4b6b      	ldr	r3, [pc, #428]	; (8018c10 <ip4_frag+0x270>)
 8018a64:	f240 3225 	movw	r2, #805	; 0x325
 8018a68:	496c      	ldr	r1, [pc, #432]	; (8018c1c <ip4_frag+0x27c>)
 8018a6a:	486b      	ldr	r0, [pc, #428]	; (8018c18 <ip4_frag+0x278>)
 8018a6c:	f001 fa56 	bl	8019f1c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a72:	685b      	ldr	r3, [r3, #4]
 8018a74:	2214      	movs	r2, #20
 8018a76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018a78:	4618      	mov	r0, r3
 8018a7a:	f000 fbe4 	bl	8019246 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a80:	685b      	ldr	r3, [r3, #4]
 8018a82:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018a84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018a86:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018a8a:	e064      	b.n	8018b56 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	895a      	ldrh	r2, [r3, #10]
 8018a90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018a92:	1ad3      	subs	r3, r2, r3
 8018a94:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	895b      	ldrh	r3, [r3, #10]
 8018a9a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018a9c:	429a      	cmp	r2, r3
 8018a9e:	d906      	bls.n	8018aae <ip4_frag+0x10e>
 8018aa0:	4b5b      	ldr	r3, [pc, #364]	; (8018c10 <ip4_frag+0x270>)
 8018aa2:	f240 322d 	movw	r2, #813	; 0x32d
 8018aa6:	495e      	ldr	r1, [pc, #376]	; (8018c20 <ip4_frag+0x280>)
 8018aa8:	485b      	ldr	r0, [pc, #364]	; (8018c18 <ip4_frag+0x278>)
 8018aaa:	f001 fa37 	bl	8019f1c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018aae:	8bfa      	ldrh	r2, [r7, #30]
 8018ab0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018ab4:	4293      	cmp	r3, r2
 8018ab6:	bf28      	it	cs
 8018ab8:	4613      	movcs	r3, r2
 8018aba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018abe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	d105      	bne.n	8018ad2 <ip4_frag+0x132>
        poff = 0;
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	60fb      	str	r3, [r7, #12]
        continue;
 8018ad0:	e041      	b.n	8018b56 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018ad2:	f7ff ff0d 	bl	80188f0 <ip_frag_alloc_pbuf_custom_ref>
 8018ad6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018ad8:	69bb      	ldr	r3, [r7, #24]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d103      	bne.n	8018ae6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ae0:	f7f4 fa4e 	bl	800cf80 <pbuf_free>
        goto memerr;
 8018ae4:	e08e      	b.n	8018c04 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ae6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018aec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018aee:	4413      	add	r3, r2
 8018af0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018af4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018af8:	9201      	str	r2, [sp, #4]
 8018afa:	9300      	str	r3, [sp, #0]
 8018afc:	4603      	mov	r3, r0
 8018afe:	2241      	movs	r2, #65	; 0x41
 8018b00:	2000      	movs	r0, #0
 8018b02:	f7f4 f883 	bl	800cc0c <pbuf_alloced_custom>
 8018b06:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d106      	bne.n	8018b1c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018b0e:	69b8      	ldr	r0, [r7, #24]
 8018b10:	f7ff fef6 	bl	8018900 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b16:	f7f4 fa33 	bl	800cf80 <pbuf_free>
        goto memerr;
 8018b1a:	e073      	b.n	8018c04 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8018b1c:	68f8      	ldr	r0, [r7, #12]
 8018b1e:	f7f4 fad5 	bl	800d0cc <pbuf_ref>
      pcr->original = p;
 8018b22:	69bb      	ldr	r3, [r7, #24]
 8018b24:	68fa      	ldr	r2, [r7, #12]
 8018b26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018b28:	69bb      	ldr	r3, [r7, #24]
 8018b2a:	4a3e      	ldr	r2, [pc, #248]	; (8018c24 <ip4_frag+0x284>)
 8018b2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018b2e:	6979      	ldr	r1, [r7, #20]
 8018b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018b32:	f7f4 faf3 	bl	800d11c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018b36:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018b3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b3e:	1ad3      	subs	r3, r2, r3
 8018b40:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018b44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d004      	beq.n	8018b56 <ip4_frag+0x1b6>
        poff = 0;
 8018b4c:	2300      	movs	r3, #0
 8018b4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	681b      	ldr	r3, [r3, #0]
 8018b54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018b56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	d196      	bne.n	8018a8c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018b5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018b60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018b64:	4413      	add	r3, r2
 8018b66:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018b68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018b6c:	68bb      	ldr	r3, [r7, #8]
 8018b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018b70:	3b14      	subs	r3, #20
 8018b72:	429a      	cmp	r2, r3
 8018b74:	bfd4      	ite	le
 8018b76:	2301      	movle	r3, #1
 8018b78:	2300      	movgt	r3, #0
 8018b7a:	b2db      	uxtb	r3, r3
 8018b7c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018b82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018b86:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018b88:	6a3b      	ldr	r3, [r7, #32]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d002      	beq.n	8018b94 <ip4_frag+0x1f4>
 8018b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d003      	beq.n	8018b9c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018b94:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018b9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018b9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7f1 fe66 	bl	800a870 <lwip_htons>
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018baa:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018bac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018bae:	3314      	adds	r3, #20
 8018bb0:	b29b      	uxth	r3, r3
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f7f1 fe5c 	bl	800a870 <lwip_htons>
 8018bb8:	4603      	mov	r3, r0
 8018bba:	461a      	mov	r2, r3
 8018bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bbe:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	729a      	strb	r2, [r3, #10]
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	695b      	ldr	r3, [r3, #20]
 8018bce:	687a      	ldr	r2, [r7, #4]
 8018bd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018bd2:	68b8      	ldr	r0, [r7, #8]
 8018bd4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018bd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018bd8:	f7f4 f9d2 	bl	800cf80 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018bdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018be0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018be2:	1ad3      	subs	r3, r2, r3
 8018be4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018be8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018bec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018bee:	4413      	add	r3, r2
 8018bf0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018bf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	f47f af1a 	bne.w	8018a32 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018bfe:	2300      	movs	r3, #0
 8018c00:	e002      	b.n	8018c08 <ip4_frag+0x268>
      goto memerr;
 8018c02:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018c08:	4618      	mov	r0, r3
 8018c0a:	3748      	adds	r7, #72	; 0x48
 8018c0c:	46bd      	mov	sp, r7
 8018c0e:	bd80      	pop	{r7, pc}
 8018c10:	08021774 	.word	0x08021774
 8018c14:	08021950 	.word	0x08021950
 8018c18:	080217bc 	.word	0x080217bc
 8018c1c:	0802196c 	.word	0x0802196c
 8018c20:	0802198c 	.word	0x0802198c
 8018c24:	08018939 	.word	0x08018939

08018c28 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018c28:	b580      	push	{r7, lr}
 8018c2a:	b086      	sub	sp, #24
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
 8018c30:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018c32:	230e      	movs	r3, #14
 8018c34:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	895b      	ldrh	r3, [r3, #10]
 8018c3a:	2b0e      	cmp	r3, #14
 8018c3c:	d96e      	bls.n	8018d1c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	7bdb      	ldrb	r3, [r3, #15]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d106      	bne.n	8018c54 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018c4c:	3301      	adds	r3, #1
 8018c4e:	b2da      	uxtb	r2, r3
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018c5a:	693b      	ldr	r3, [r7, #16]
 8018c5c:	7b1a      	ldrb	r2, [r3, #12]
 8018c5e:	7b5b      	ldrb	r3, [r3, #13]
 8018c60:	021b      	lsls	r3, r3, #8
 8018c62:	4313      	orrs	r3, r2
 8018c64:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018c66:	693b      	ldr	r3, [r7, #16]
 8018c68:	781b      	ldrb	r3, [r3, #0]
 8018c6a:	f003 0301 	and.w	r3, r3, #1
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d023      	beq.n	8018cba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018c72:	693b      	ldr	r3, [r7, #16]
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	2b01      	cmp	r3, #1
 8018c78:	d10f      	bne.n	8018c9a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c7a:	693b      	ldr	r3, [r7, #16]
 8018c7c:	785b      	ldrb	r3, [r3, #1]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d11b      	bne.n	8018cba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018c82:	693b      	ldr	r3, [r7, #16]
 8018c84:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018c86:	2b5e      	cmp	r3, #94	; 0x5e
 8018c88:	d117      	bne.n	8018cba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	7b5b      	ldrb	r3, [r3, #13]
 8018c8e:	f043 0310 	orr.w	r3, r3, #16
 8018c92:	b2da      	uxtb	r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	735a      	strb	r2, [r3, #13]
 8018c98:	e00f      	b.n	8018cba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018c9a:	693b      	ldr	r3, [r7, #16]
 8018c9c:	2206      	movs	r2, #6
 8018c9e:	4928      	ldr	r1, [pc, #160]	; (8018d40 <ethernet_input+0x118>)
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f000 fac1 	bl	8019228 <memcmp>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d106      	bne.n	8018cba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	7b5b      	ldrb	r3, [r3, #13]
 8018cb0:	f043 0308 	orr.w	r3, r3, #8
 8018cb4:	b2da      	uxtb	r2, r3
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018cba:	89fb      	ldrh	r3, [r7, #14]
 8018cbc:	2b08      	cmp	r3, #8
 8018cbe:	d003      	beq.n	8018cc8 <ethernet_input+0xa0>
 8018cc0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018cc4:	d014      	beq.n	8018cf0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018cc6:	e032      	b.n	8018d2e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cc8:	683b      	ldr	r3, [r7, #0]
 8018cca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018cce:	f003 0308 	and.w	r3, r3, #8
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d024      	beq.n	8018d20 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018cd6:	8afb      	ldrh	r3, [r7, #22]
 8018cd8:	4619      	mov	r1, r3
 8018cda:	6878      	ldr	r0, [r7, #4]
 8018cdc:	f7f4 f8ca 	bl	800ce74 <pbuf_remove_header>
 8018ce0:	4603      	mov	r3, r0
 8018ce2:	2b00      	cmp	r3, #0
 8018ce4:	d11e      	bne.n	8018d24 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018ce6:	6839      	ldr	r1, [r7, #0]
 8018ce8:	6878      	ldr	r0, [r7, #4]
 8018cea:	f7fe fd4b 	bl	8017784 <ip4_input>
      break;
 8018cee:	e013      	b.n	8018d18 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018cf0:	683b      	ldr	r3, [r7, #0]
 8018cf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018cf6:	f003 0308 	and.w	r3, r3, #8
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d014      	beq.n	8018d28 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018cfe:	8afb      	ldrh	r3, [r7, #22]
 8018d00:	4619      	mov	r1, r3
 8018d02:	6878      	ldr	r0, [r7, #4]
 8018d04:	f7f4 f8b6 	bl	800ce74 <pbuf_remove_header>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d10e      	bne.n	8018d2c <ethernet_input+0x104>
        etharp_input(p, netif);
 8018d0e:	6839      	ldr	r1, [r7, #0]
 8018d10:	6878      	ldr	r0, [r7, #4]
 8018d12:	f7fd fee7 	bl	8016ae4 <etharp_input>
      break;
 8018d16:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	e00c      	b.n	8018d36 <ethernet_input+0x10e>
    goto free_and_return;
 8018d1c:	bf00      	nop
 8018d1e:	e006      	b.n	8018d2e <ethernet_input+0x106>
        goto free_and_return;
 8018d20:	bf00      	nop
 8018d22:	e004      	b.n	8018d2e <ethernet_input+0x106>
        goto free_and_return;
 8018d24:	bf00      	nop
 8018d26:	e002      	b.n	8018d2e <ethernet_input+0x106>
        goto free_and_return;
 8018d28:	bf00      	nop
 8018d2a:	e000      	b.n	8018d2e <ethernet_input+0x106>
        goto free_and_return;
 8018d2c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018d2e:	6878      	ldr	r0, [r7, #4]
 8018d30:	f7f4 f926 	bl	800cf80 <pbuf_free>
  return ERR_OK;
 8018d34:	2300      	movs	r3, #0
}
 8018d36:	4618      	mov	r0, r3
 8018d38:	3718      	adds	r7, #24
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	bd80      	pop	{r7, pc}
 8018d3e:	bf00      	nop
 8018d40:	08021b98 	.word	0x08021b98

08018d44 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018d44:	b580      	push	{r7, lr}
 8018d46:	b086      	sub	sp, #24
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	60f8      	str	r0, [r7, #12]
 8018d4c:	60b9      	str	r1, [r7, #8]
 8018d4e:	607a      	str	r2, [r7, #4]
 8018d50:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018d52:	8c3b      	ldrh	r3, [r7, #32]
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7f1 fd8b 	bl	800a870 <lwip_htons>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018d5e:	210e      	movs	r1, #14
 8018d60:	68b8      	ldr	r0, [r7, #8]
 8018d62:	f7f4 f877 	bl	800ce54 <pbuf_add_header>
 8018d66:	4603      	mov	r3, r0
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d125      	bne.n	8018db8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	685b      	ldr	r3, [r3, #4]
 8018d70:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018d72:	693b      	ldr	r3, [r7, #16]
 8018d74:	8afa      	ldrh	r2, [r7, #22]
 8018d76:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018d78:	693b      	ldr	r3, [r7, #16]
 8018d7a:	2206      	movs	r2, #6
 8018d7c:	6839      	ldr	r1, [r7, #0]
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f000 fa61 	bl	8019246 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018d84:	693b      	ldr	r3, [r7, #16]
 8018d86:	3306      	adds	r3, #6
 8018d88:	2206      	movs	r2, #6
 8018d8a:	6879      	ldr	r1, [r7, #4]
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f000 fa5a 	bl	8019246 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018d98:	2b06      	cmp	r3, #6
 8018d9a:	d006      	beq.n	8018daa <ethernet_output+0x66>
 8018d9c:	4b0a      	ldr	r3, [pc, #40]	; (8018dc8 <ethernet_output+0x84>)
 8018d9e:	f240 1233 	movw	r2, #307	; 0x133
 8018da2:	490a      	ldr	r1, [pc, #40]	; (8018dcc <ethernet_output+0x88>)
 8018da4:	480a      	ldr	r0, [pc, #40]	; (8018dd0 <ethernet_output+0x8c>)
 8018da6:	f001 f8b9 	bl	8019f1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018daa:	68fb      	ldr	r3, [r7, #12]
 8018dac:	699b      	ldr	r3, [r3, #24]
 8018dae:	68b9      	ldr	r1, [r7, #8]
 8018db0:	68f8      	ldr	r0, [r7, #12]
 8018db2:	4798      	blx	r3
 8018db4:	4603      	mov	r3, r0
 8018db6:	e002      	b.n	8018dbe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018db8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018dba:	f06f 0301 	mvn.w	r3, #1
}
 8018dbe:	4618      	mov	r0, r3
 8018dc0:	3718      	adds	r7, #24
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	bd80      	pop	{r7, pc}
 8018dc6:	bf00      	nop
 8018dc8:	0802199c 	.word	0x0802199c
 8018dcc:	080219d4 	.word	0x080219d4
 8018dd0:	08021a08 	.word	0x08021a08

08018dd4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b086      	sub	sp, #24
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
 8018ddc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	60bb      	str	r3, [r7, #8]
 8018de2:	2304      	movs	r3, #4
 8018de4:	60fb      	str	r3, [r7, #12]
 8018de6:	2300      	movs	r3, #0
 8018de8:	613b      	str	r3, [r7, #16]
 8018dea:	2300      	movs	r3, #0
 8018dec:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018dee:	f107 0308 	add.w	r3, r7, #8
 8018df2:	2100      	movs	r1, #0
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7ec fc56 	bl	80056a6 <osMessageCreate>
 8018dfa:	4602      	mov	r2, r0
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d102      	bne.n	8018e0e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018e08:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0c:	e000      	b.n	8018e10 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018e0e:	2300      	movs	r3, #0
}
 8018e10:	4618      	mov	r0, r3
 8018e12:	3718      	adds	r7, #24
 8018e14:	46bd      	mov	sp, r7
 8018e16:	bd80      	pop	{r7, pc}

08018e18 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b082      	sub	sp, #8
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	4618      	mov	r0, r3
 8018e26:	f7ec fd1b 	bl	8005860 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7ec fd2c 	bl	800588c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018e34:	bf00      	nop
 8018e36:	3708      	adds	r7, #8
 8018e38:	46bd      	mov	sp, r7
 8018e3a:	bd80      	pop	{r7, pc}

08018e3c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b084      	sub	sp, #16
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
 8018e44:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	6839      	ldr	r1, [r7, #0]
 8018e4c:	2200      	movs	r2, #0
 8018e4e:	4618      	mov	r0, r3
 8018e50:	f7ec fc52 	bl	80056f8 <osMessagePut>
 8018e54:	4603      	mov	r3, r0
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d102      	bne.n	8018e60 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	73fb      	strb	r3, [r7, #15]
 8018e5e:	e001      	b.n	8018e64 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018e60:	23ff      	movs	r3, #255	; 0xff
 8018e62:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	3710      	adds	r7, #16
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}

08018e70 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b08c      	sub	sp, #48	; 0x30
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	61f8      	str	r0, [r7, #28]
 8018e78:	61b9      	str	r1, [r7, #24]
 8018e7a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018e7c:	f7ec fa3b 	bl	80052f6 <osKernelSysTick>
 8018e80:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018e82:	697b      	ldr	r3, [r7, #20]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d017      	beq.n	8018eb8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018e88:	69fb      	ldr	r3, [r7, #28]
 8018e8a:	6819      	ldr	r1, [r3, #0]
 8018e8c:	f107 0320 	add.w	r3, r7, #32
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	4618      	mov	r0, r3
 8018e94:	f7ec fc70 	bl	8005778 <osMessageGet>

    if(event.status == osEventMessage)
 8018e98:	6a3b      	ldr	r3, [r7, #32]
 8018e9a:	2b10      	cmp	r3, #16
 8018e9c:	d109      	bne.n	8018eb2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea0:	461a      	mov	r2, r3
 8018ea2:	69bb      	ldr	r3, [r7, #24]
 8018ea4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018ea6:	f7ec fa26 	bl	80052f6 <osKernelSysTick>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eae:	1ad3      	subs	r3, r2, r3
 8018eb0:	e019      	b.n	8018ee6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8018eb6:	e016      	b.n	8018ee6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018eb8:	69fb      	ldr	r3, [r7, #28]
 8018eba:	6819      	ldr	r1, [r3, #0]
 8018ebc:	463b      	mov	r3, r7
 8018ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7ec fc58 	bl	8005778 <osMessageGet>
 8018ec8:	f107 0320 	add.w	r3, r7, #32
 8018ecc:	463a      	mov	r2, r7
 8018ece:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ed0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed6:	461a      	mov	r2, r3
 8018ed8:	69bb      	ldr	r3, [r7, #24]
 8018eda:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018edc:	f7ec fa0b 	bl	80052f6 <osKernelSysTick>
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ee4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	3730      	adds	r7, #48	; 0x30
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}

08018eee <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018eee:	b580      	push	{r7, lr}
 8018ef0:	b086      	sub	sp, #24
 8018ef2:	af00      	add	r7, sp, #0
 8018ef4:	6078      	str	r0, [r7, #4]
 8018ef6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	6819      	ldr	r1, [r3, #0]
 8018efc:	f107 030c 	add.w	r3, r7, #12
 8018f00:	2200      	movs	r2, #0
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7ec fc38 	bl	8005778 <osMessageGet>

  if(event.status == osEventMessage)
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	2b10      	cmp	r3, #16
 8018f0c:	d105      	bne.n	8018f1a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	461a      	mov	r2, r3
 8018f12:	683b      	ldr	r3, [r7, #0]
 8018f14:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018f16:	2300      	movs	r3, #0
 8018f18:	e001      	b.n	8018f1e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018f1a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018f1e:	4618      	mov	r0, r3
 8018f20:	3718      	adds	r7, #24
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}

08018f26 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018f26:	b480      	push	{r7}
 8018f28:	b083      	sub	sp, #12
 8018f2a:	af00      	add	r7, sp, #0
 8018f2c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018f2e:	687b      	ldr	r3, [r7, #4]
 8018f30:	681b      	ldr	r3, [r3, #0]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d101      	bne.n	8018f3a <sys_mbox_valid+0x14>
    return 0;
 8018f36:	2300      	movs	r3, #0
 8018f38:	e000      	b.n	8018f3c <sys_mbox_valid+0x16>
  else
    return 1;
 8018f3a:	2301      	movs	r3, #1
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	370c      	adds	r7, #12
 8018f40:	46bd      	mov	sp, r7
 8018f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f46:	4770      	bx	lr

08018f48 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018f48:	b480      	push	{r7}
 8018f4a:	b083      	sub	sp, #12
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	2200      	movs	r2, #0
 8018f54:	601a      	str	r2, [r3, #0]
}
 8018f56:	bf00      	nop
 8018f58:	370c      	adds	r7, #12
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f60:	4770      	bx	lr

08018f62 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018f62:	b580      	push	{r7, lr}
 8018f64:	b084      	sub	sp, #16
 8018f66:	af00      	add	r7, sp, #0
 8018f68:	6078      	str	r0, [r7, #4]
 8018f6a:	460b      	mov	r3, r1
 8018f6c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018f6e:	2300      	movs	r3, #0
 8018f70:	60bb      	str	r3, [r7, #8]
 8018f72:	2300      	movs	r3, #0
 8018f74:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018f76:	f107 0308 	add.w	r3, r7, #8
 8018f7a:	2101      	movs	r1, #1
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	f7ec fac7 	bl	8005510 <osSemaphoreCreate>
 8018f82:	4602      	mov	r2, r0
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d102      	bne.n	8018f96 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018f90:	f04f 33ff 	mov.w	r3, #4294967295
 8018f94:	e009      	b.n	8018faa <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8018f96:	78fb      	ldrb	r3, [r7, #3]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d105      	bne.n	8018fa8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2100      	movs	r1, #0
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7ec fae8 	bl	8005578 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018fa8:	2300      	movs	r3, #0
}
 8018faa:	4618      	mov	r0, r3
 8018fac:	3710      	adds	r7, #16
 8018fae:	46bd      	mov	sp, r7
 8018fb0:	bd80      	pop	{r7, pc}

08018fb2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018fb2:	b580      	push	{r7, lr}
 8018fb4:	b084      	sub	sp, #16
 8018fb6:	af00      	add	r7, sp, #0
 8018fb8:	6078      	str	r0, [r7, #4]
 8018fba:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018fbc:	f7ec f99b 	bl	80052f6 <osKernelSysTick>
 8018fc0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018fc2:	683b      	ldr	r3, [r7, #0]
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d011      	beq.n	8018fec <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018fc8:	687b      	ldr	r3, [r7, #4]
 8018fca:	681b      	ldr	r3, [r3, #0]
 8018fcc:	6839      	ldr	r1, [r7, #0]
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7ec fad2 	bl	8005578 <osSemaphoreWait>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d105      	bne.n	8018fe6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018fda:	f7ec f98c 	bl	80052f6 <osKernelSysTick>
 8018fde:	4602      	mov	r2, r0
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	1ad3      	subs	r3, r2, r3
 8018fe4:	e012      	b.n	801900c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8018fea:	e00f      	b.n	801900c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018fec:	bf00      	nop
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7ec fabe 	bl	8005578 <osSemaphoreWait>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d1f5      	bne.n	8018fee <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8019002:	f7ec f978 	bl	80052f6 <osKernelSysTick>
 8019006:	4602      	mov	r2, r0
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801900c:	4618      	mov	r0, r3
 801900e:	3710      	adds	r7, #16
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}

08019014 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b082      	sub	sp, #8
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	681b      	ldr	r3, [r3, #0]
 8019020:	4618      	mov	r0, r3
 8019022:	f7ec faf7 	bl	8005614 <osSemaphoreRelease>
}
 8019026:	bf00      	nop
 8019028:	3708      	adds	r7, #8
 801902a:	46bd      	mov	sp, r7
 801902c:	bd80      	pop	{r7, pc}

0801902e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801902e:	b580      	push	{r7, lr}
 8019030:	b082      	sub	sp, #8
 8019032:	af00      	add	r7, sp, #0
 8019034:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	4618      	mov	r0, r3
 801903c:	f7ec fb20 	bl	8005680 <osSemaphoreDelete>
}
 8019040:	bf00      	nop
 8019042:	3708      	adds	r7, #8
 8019044:	46bd      	mov	sp, r7
 8019046:	bd80      	pop	{r7, pc}

08019048 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019048:	b480      	push	{r7}
 801904a:	b083      	sub	sp, #12
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	2b00      	cmp	r3, #0
 8019056:	d101      	bne.n	801905c <sys_sem_valid+0x14>
    return 0;
 8019058:	2300      	movs	r3, #0
 801905a:	e000      	b.n	801905e <sys_sem_valid+0x16>
  else
    return 1;
 801905c:	2301      	movs	r3, #1
}
 801905e:	4618      	mov	r0, r3
 8019060:	370c      	adds	r7, #12
 8019062:	46bd      	mov	sp, r7
 8019064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019068:	4770      	bx	lr

0801906a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801906a:	b480      	push	{r7}
 801906c:	b083      	sub	sp, #12
 801906e:	af00      	add	r7, sp, #0
 8019070:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	2200      	movs	r2, #0
 8019076:	601a      	str	r2, [r3, #0]
}
 8019078:	bf00      	nop
 801907a:	370c      	adds	r7, #12
 801907c:	46bd      	mov	sp, r7
 801907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019082:	4770      	bx	lr

08019084 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019084:	b580      	push	{r7, lr}
 8019086:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8019088:	4803      	ldr	r0, [pc, #12]	; (8019098 <sys_init+0x14>)
 801908a:	f7ec f9a4 	bl	80053d6 <osMutexCreate>
 801908e:	4602      	mov	r2, r0
 8019090:	4b02      	ldr	r3, [pc, #8]	; (801909c <sys_init+0x18>)
 8019092:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019094:	bf00      	nop
 8019096:	bd80      	pop	{r7, pc}
 8019098:	08021ba8 	.word	0x08021ba8
 801909c:	200280e4 	.word	0x200280e4

080190a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80190a0:	b580      	push	{r7, lr}
 80190a2:	b084      	sub	sp, #16
 80190a4:	af00      	add	r7, sp, #0
 80190a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80190a8:	2300      	movs	r3, #0
 80190aa:	60bb      	str	r3, [r7, #8]
 80190ac:	2300      	movs	r3, #0
 80190ae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80190b0:	f107 0308 	add.w	r3, r7, #8
 80190b4:	4618      	mov	r0, r3
 80190b6:	f7ec f98e 	bl	80053d6 <osMutexCreate>
 80190ba:	4602      	mov	r2, r0
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d102      	bne.n	80190ce <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80190c8:	f04f 33ff 	mov.w	r3, #4294967295
 80190cc:	e000      	b.n	80190d0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80190ce:	2300      	movs	r3, #0
}
 80190d0:	4618      	mov	r0, r3
 80190d2:	3710      	adds	r7, #16
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}

080190d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80190d8:	b580      	push	{r7, lr}
 80190da:	b082      	sub	sp, #8
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	f04f 31ff 	mov.w	r1, #4294967295
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7ec f98d 	bl	8005408 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80190ee:	bf00      	nop
 80190f0:	3708      	adds	r7, #8
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}

080190f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80190f6:	b580      	push	{r7, lr}
 80190f8:	b082      	sub	sp, #8
 80190fa:	af00      	add	r7, sp, #0
 80190fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	4618      	mov	r0, r3
 8019104:	f7ec f9ce 	bl	80054a4 <osMutexRelease>
}
 8019108:	bf00      	nop
 801910a:	3708      	adds	r7, #8
 801910c:	46bd      	mov	sp, r7
 801910e:	bd80      	pop	{r7, pc}

08019110 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b08c      	sub	sp, #48	; 0x30
 8019114:	af00      	add	r7, sp, #0
 8019116:	60f8      	str	r0, [r7, #12]
 8019118:	60b9      	str	r1, [r7, #8]
 801911a:	607a      	str	r2, [r7, #4]
 801911c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801911e:	f107 0314 	add.w	r3, r7, #20
 8019122:	2200      	movs	r2, #0
 8019124:	601a      	str	r2, [r3, #0]
 8019126:	605a      	str	r2, [r3, #4]
 8019128:	609a      	str	r2, [r3, #8]
 801912a:	60da      	str	r2, [r3, #12]
 801912c:	611a      	str	r2, [r3, #16]
 801912e:	615a      	str	r2, [r3, #20]
 8019130:	619a      	str	r2, [r3, #24]
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	617b      	str	r3, [r7, #20]
 8019136:	68bb      	ldr	r3, [r7, #8]
 8019138:	61bb      	str	r3, [r7, #24]
 801913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801913c:	b21b      	sxth	r3, r3
 801913e:	83bb      	strh	r3, [r7, #28]
 8019140:	683b      	ldr	r3, [r7, #0]
 8019142:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8019144:	f107 0314 	add.w	r3, r7, #20
 8019148:	6879      	ldr	r1, [r7, #4]
 801914a:	4618      	mov	r0, r3
 801914c:	f7ec f8e3 	bl	8005316 <osThreadCreate>
 8019150:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8019152:	4618      	mov	r0, r3
 8019154:	3730      	adds	r7, #48	; 0x30
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
	...

0801915c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019160:	4b04      	ldr	r3, [pc, #16]	; (8019174 <sys_arch_protect+0x18>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	f04f 31ff 	mov.w	r1, #4294967295
 8019168:	4618      	mov	r0, r3
 801916a:	f7ec f94d 	bl	8005408 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801916e:	2301      	movs	r3, #1
}
 8019170:	4618      	mov	r0, r3
 8019172:	bd80      	pop	{r7, pc}
 8019174:	200280e4 	.word	0x200280e4

08019178 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b082      	sub	sp, #8
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019180:	4b04      	ldr	r3, [pc, #16]	; (8019194 <sys_arch_unprotect+0x1c>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	4618      	mov	r0, r3
 8019186:	f7ec f98d 	bl	80054a4 <osMutexRelease>
}
 801918a:	bf00      	nop
 801918c:	3708      	adds	r7, #8
 801918e:	46bd      	mov	sp, r7
 8019190:	bd80      	pop	{r7, pc}
 8019192:	bf00      	nop
 8019194:	200280e4 	.word	0x200280e4

08019198 <__libc_init_array>:
 8019198:	b570      	push	{r4, r5, r6, lr}
 801919a:	4e0d      	ldr	r6, [pc, #52]	; (80191d0 <__libc_init_array+0x38>)
 801919c:	4c0d      	ldr	r4, [pc, #52]	; (80191d4 <__libc_init_array+0x3c>)
 801919e:	1ba4      	subs	r4, r4, r6
 80191a0:	10a4      	asrs	r4, r4, #2
 80191a2:	2500      	movs	r5, #0
 80191a4:	42a5      	cmp	r5, r4
 80191a6:	d109      	bne.n	80191bc <__libc_init_array+0x24>
 80191a8:	4e0b      	ldr	r6, [pc, #44]	; (80191d8 <__libc_init_array+0x40>)
 80191aa:	4c0c      	ldr	r4, [pc, #48]	; (80191dc <__libc_init_array+0x44>)
 80191ac:	f004 fee4 	bl	801df78 <_init>
 80191b0:	1ba4      	subs	r4, r4, r6
 80191b2:	10a4      	asrs	r4, r4, #2
 80191b4:	2500      	movs	r5, #0
 80191b6:	42a5      	cmp	r5, r4
 80191b8:	d105      	bne.n	80191c6 <__libc_init_array+0x2e>
 80191ba:	bd70      	pop	{r4, r5, r6, pc}
 80191bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80191c0:	4798      	blx	r3
 80191c2:	3501      	adds	r5, #1
 80191c4:	e7ee      	b.n	80191a4 <__libc_init_array+0xc>
 80191c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80191ca:	4798      	blx	r3
 80191cc:	3501      	adds	r5, #1
 80191ce:	e7f2      	b.n	80191b6 <__libc_init_array+0x1e>
 80191d0:	08021ee8 	.word	0x08021ee8
 80191d4:	08021ee8 	.word	0x08021ee8
 80191d8:	08021ee8 	.word	0x08021ee8
 80191dc:	08021eec 	.word	0x08021eec

080191e0 <__locale_ctype_ptr_l>:
 80191e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80191e4:	4770      	bx	lr
	...

080191e8 <__locale_ctype_ptr>:
 80191e8:	4b04      	ldr	r3, [pc, #16]	; (80191fc <__locale_ctype_ptr+0x14>)
 80191ea:	4a05      	ldr	r2, [pc, #20]	; (8019200 <__locale_ctype_ptr+0x18>)
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	6a1b      	ldr	r3, [r3, #32]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	bf08      	it	eq
 80191f4:	4613      	moveq	r3, r2
 80191f6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80191fa:	4770      	bx	lr
 80191fc:	20000020 	.word	0x20000020
 8019200:	20000084 	.word	0x20000084

08019204 <__ascii_mbtowc>:
 8019204:	b082      	sub	sp, #8
 8019206:	b901      	cbnz	r1, 801920a <__ascii_mbtowc+0x6>
 8019208:	a901      	add	r1, sp, #4
 801920a:	b142      	cbz	r2, 801921e <__ascii_mbtowc+0x1a>
 801920c:	b14b      	cbz	r3, 8019222 <__ascii_mbtowc+0x1e>
 801920e:	7813      	ldrb	r3, [r2, #0]
 8019210:	600b      	str	r3, [r1, #0]
 8019212:	7812      	ldrb	r2, [r2, #0]
 8019214:	1c10      	adds	r0, r2, #0
 8019216:	bf18      	it	ne
 8019218:	2001      	movne	r0, #1
 801921a:	b002      	add	sp, #8
 801921c:	4770      	bx	lr
 801921e:	4610      	mov	r0, r2
 8019220:	e7fb      	b.n	801921a <__ascii_mbtowc+0x16>
 8019222:	f06f 0001 	mvn.w	r0, #1
 8019226:	e7f8      	b.n	801921a <__ascii_mbtowc+0x16>

08019228 <memcmp>:
 8019228:	b530      	push	{r4, r5, lr}
 801922a:	2400      	movs	r4, #0
 801922c:	42a2      	cmp	r2, r4
 801922e:	d101      	bne.n	8019234 <memcmp+0xc>
 8019230:	2000      	movs	r0, #0
 8019232:	e007      	b.n	8019244 <memcmp+0x1c>
 8019234:	5d03      	ldrb	r3, [r0, r4]
 8019236:	3401      	adds	r4, #1
 8019238:	190d      	adds	r5, r1, r4
 801923a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801923e:	42ab      	cmp	r3, r5
 8019240:	d0f4      	beq.n	801922c <memcmp+0x4>
 8019242:	1b58      	subs	r0, r3, r5
 8019244:	bd30      	pop	{r4, r5, pc}

08019246 <memcpy>:
 8019246:	b510      	push	{r4, lr}
 8019248:	1e43      	subs	r3, r0, #1
 801924a:	440a      	add	r2, r1
 801924c:	4291      	cmp	r1, r2
 801924e:	d100      	bne.n	8019252 <memcpy+0xc>
 8019250:	bd10      	pop	{r4, pc}
 8019252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019256:	f803 4f01 	strb.w	r4, [r3, #1]!
 801925a:	e7f7      	b.n	801924c <memcpy+0x6>

0801925c <memmove>:
 801925c:	4288      	cmp	r0, r1
 801925e:	b510      	push	{r4, lr}
 8019260:	eb01 0302 	add.w	r3, r1, r2
 8019264:	d807      	bhi.n	8019276 <memmove+0x1a>
 8019266:	1e42      	subs	r2, r0, #1
 8019268:	4299      	cmp	r1, r3
 801926a:	d00a      	beq.n	8019282 <memmove+0x26>
 801926c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019270:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019274:	e7f8      	b.n	8019268 <memmove+0xc>
 8019276:	4283      	cmp	r3, r0
 8019278:	d9f5      	bls.n	8019266 <memmove+0xa>
 801927a:	1881      	adds	r1, r0, r2
 801927c:	1ad2      	subs	r2, r2, r3
 801927e:	42d3      	cmn	r3, r2
 8019280:	d100      	bne.n	8019284 <memmove+0x28>
 8019282:	bd10      	pop	{r4, pc}
 8019284:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019288:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801928c:	e7f7      	b.n	801927e <memmove+0x22>

0801928e <memset>:
 801928e:	4402      	add	r2, r0
 8019290:	4603      	mov	r3, r0
 8019292:	4293      	cmp	r3, r2
 8019294:	d100      	bne.n	8019298 <memset+0xa>
 8019296:	4770      	bx	lr
 8019298:	f803 1b01 	strb.w	r1, [r3], #1
 801929c:	e7f9      	b.n	8019292 <memset+0x4>

0801929e <__cvt>:
 801929e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80192a2:	ec55 4b10 	vmov	r4, r5, d0
 80192a6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80192a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80192ac:	2d00      	cmp	r5, #0
 80192ae:	460e      	mov	r6, r1
 80192b0:	4691      	mov	r9, r2
 80192b2:	4619      	mov	r1, r3
 80192b4:	bfb8      	it	lt
 80192b6:	4622      	movlt	r2, r4
 80192b8:	462b      	mov	r3, r5
 80192ba:	f027 0720 	bic.w	r7, r7, #32
 80192be:	bfbb      	ittet	lt
 80192c0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80192c4:	461d      	movlt	r5, r3
 80192c6:	2300      	movge	r3, #0
 80192c8:	232d      	movlt	r3, #45	; 0x2d
 80192ca:	bfb8      	it	lt
 80192cc:	4614      	movlt	r4, r2
 80192ce:	2f46      	cmp	r7, #70	; 0x46
 80192d0:	700b      	strb	r3, [r1, #0]
 80192d2:	d004      	beq.n	80192de <__cvt+0x40>
 80192d4:	2f45      	cmp	r7, #69	; 0x45
 80192d6:	d100      	bne.n	80192da <__cvt+0x3c>
 80192d8:	3601      	adds	r6, #1
 80192da:	2102      	movs	r1, #2
 80192dc:	e000      	b.n	80192e0 <__cvt+0x42>
 80192de:	2103      	movs	r1, #3
 80192e0:	ab03      	add	r3, sp, #12
 80192e2:	9301      	str	r3, [sp, #4]
 80192e4:	ab02      	add	r3, sp, #8
 80192e6:	9300      	str	r3, [sp, #0]
 80192e8:	4632      	mov	r2, r6
 80192ea:	4653      	mov	r3, sl
 80192ec:	ec45 4b10 	vmov	d0, r4, r5
 80192f0:	f001 ffa6 	bl	801b240 <_dtoa_r>
 80192f4:	2f47      	cmp	r7, #71	; 0x47
 80192f6:	4680      	mov	r8, r0
 80192f8:	d102      	bne.n	8019300 <__cvt+0x62>
 80192fa:	f019 0f01 	tst.w	r9, #1
 80192fe:	d026      	beq.n	801934e <__cvt+0xb0>
 8019300:	2f46      	cmp	r7, #70	; 0x46
 8019302:	eb08 0906 	add.w	r9, r8, r6
 8019306:	d111      	bne.n	801932c <__cvt+0x8e>
 8019308:	f898 3000 	ldrb.w	r3, [r8]
 801930c:	2b30      	cmp	r3, #48	; 0x30
 801930e:	d10a      	bne.n	8019326 <__cvt+0x88>
 8019310:	2200      	movs	r2, #0
 8019312:	2300      	movs	r3, #0
 8019314:	4620      	mov	r0, r4
 8019316:	4629      	mov	r1, r5
 8019318:	f7e7 fbf6 	bl	8000b08 <__aeabi_dcmpeq>
 801931c:	b918      	cbnz	r0, 8019326 <__cvt+0x88>
 801931e:	f1c6 0601 	rsb	r6, r6, #1
 8019322:	f8ca 6000 	str.w	r6, [sl]
 8019326:	f8da 3000 	ldr.w	r3, [sl]
 801932a:	4499      	add	r9, r3
 801932c:	2200      	movs	r2, #0
 801932e:	2300      	movs	r3, #0
 8019330:	4620      	mov	r0, r4
 8019332:	4629      	mov	r1, r5
 8019334:	f7e7 fbe8 	bl	8000b08 <__aeabi_dcmpeq>
 8019338:	b938      	cbnz	r0, 801934a <__cvt+0xac>
 801933a:	2230      	movs	r2, #48	; 0x30
 801933c:	9b03      	ldr	r3, [sp, #12]
 801933e:	454b      	cmp	r3, r9
 8019340:	d205      	bcs.n	801934e <__cvt+0xb0>
 8019342:	1c59      	adds	r1, r3, #1
 8019344:	9103      	str	r1, [sp, #12]
 8019346:	701a      	strb	r2, [r3, #0]
 8019348:	e7f8      	b.n	801933c <__cvt+0x9e>
 801934a:	f8cd 900c 	str.w	r9, [sp, #12]
 801934e:	9b03      	ldr	r3, [sp, #12]
 8019350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019352:	eba3 0308 	sub.w	r3, r3, r8
 8019356:	4640      	mov	r0, r8
 8019358:	6013      	str	r3, [r2, #0]
 801935a:	b004      	add	sp, #16
 801935c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019360 <__exponent>:
 8019360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019362:	2900      	cmp	r1, #0
 8019364:	4604      	mov	r4, r0
 8019366:	bfba      	itte	lt
 8019368:	4249      	neglt	r1, r1
 801936a:	232d      	movlt	r3, #45	; 0x2d
 801936c:	232b      	movge	r3, #43	; 0x2b
 801936e:	2909      	cmp	r1, #9
 8019370:	f804 2b02 	strb.w	r2, [r4], #2
 8019374:	7043      	strb	r3, [r0, #1]
 8019376:	dd20      	ble.n	80193ba <__exponent+0x5a>
 8019378:	f10d 0307 	add.w	r3, sp, #7
 801937c:	461f      	mov	r7, r3
 801937e:	260a      	movs	r6, #10
 8019380:	fb91 f5f6 	sdiv	r5, r1, r6
 8019384:	fb06 1115 	mls	r1, r6, r5, r1
 8019388:	3130      	adds	r1, #48	; 0x30
 801938a:	2d09      	cmp	r5, #9
 801938c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019390:	f103 32ff 	add.w	r2, r3, #4294967295
 8019394:	4629      	mov	r1, r5
 8019396:	dc09      	bgt.n	80193ac <__exponent+0x4c>
 8019398:	3130      	adds	r1, #48	; 0x30
 801939a:	3b02      	subs	r3, #2
 801939c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80193a0:	42bb      	cmp	r3, r7
 80193a2:	4622      	mov	r2, r4
 80193a4:	d304      	bcc.n	80193b0 <__exponent+0x50>
 80193a6:	1a10      	subs	r0, r2, r0
 80193a8:	b003      	add	sp, #12
 80193aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193ac:	4613      	mov	r3, r2
 80193ae:	e7e7      	b.n	8019380 <__exponent+0x20>
 80193b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80193b4:	f804 2b01 	strb.w	r2, [r4], #1
 80193b8:	e7f2      	b.n	80193a0 <__exponent+0x40>
 80193ba:	2330      	movs	r3, #48	; 0x30
 80193bc:	4419      	add	r1, r3
 80193be:	7083      	strb	r3, [r0, #2]
 80193c0:	1d02      	adds	r2, r0, #4
 80193c2:	70c1      	strb	r1, [r0, #3]
 80193c4:	e7ef      	b.n	80193a6 <__exponent+0x46>
	...

080193c8 <_printf_float>:
 80193c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193cc:	b08d      	sub	sp, #52	; 0x34
 80193ce:	460c      	mov	r4, r1
 80193d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80193d4:	4616      	mov	r6, r2
 80193d6:	461f      	mov	r7, r3
 80193d8:	4605      	mov	r5, r0
 80193da:	f003 f98b 	bl	801c6f4 <_localeconv_r>
 80193de:	6803      	ldr	r3, [r0, #0]
 80193e0:	9304      	str	r3, [sp, #16]
 80193e2:	4618      	mov	r0, r3
 80193e4:	f7e6 ff14 	bl	8000210 <strlen>
 80193e8:	2300      	movs	r3, #0
 80193ea:	930a      	str	r3, [sp, #40]	; 0x28
 80193ec:	f8d8 3000 	ldr.w	r3, [r8]
 80193f0:	9005      	str	r0, [sp, #20]
 80193f2:	3307      	adds	r3, #7
 80193f4:	f023 0307 	bic.w	r3, r3, #7
 80193f8:	f103 0208 	add.w	r2, r3, #8
 80193fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019400:	f8d4 b000 	ldr.w	fp, [r4]
 8019404:	f8c8 2000 	str.w	r2, [r8]
 8019408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801940c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019410:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019414:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019418:	9307      	str	r3, [sp, #28]
 801941a:	f8cd 8018 	str.w	r8, [sp, #24]
 801941e:	f04f 32ff 	mov.w	r2, #4294967295
 8019422:	4ba7      	ldr	r3, [pc, #668]	; (80196c0 <_printf_float+0x2f8>)
 8019424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019428:	f7e7 fba0 	bl	8000b6c <__aeabi_dcmpun>
 801942c:	bb70      	cbnz	r0, 801948c <_printf_float+0xc4>
 801942e:	f04f 32ff 	mov.w	r2, #4294967295
 8019432:	4ba3      	ldr	r3, [pc, #652]	; (80196c0 <_printf_float+0x2f8>)
 8019434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019438:	f7e7 fb7a 	bl	8000b30 <__aeabi_dcmple>
 801943c:	bb30      	cbnz	r0, 801948c <_printf_float+0xc4>
 801943e:	2200      	movs	r2, #0
 8019440:	2300      	movs	r3, #0
 8019442:	4640      	mov	r0, r8
 8019444:	4649      	mov	r1, r9
 8019446:	f7e7 fb69 	bl	8000b1c <__aeabi_dcmplt>
 801944a:	b110      	cbz	r0, 8019452 <_printf_float+0x8a>
 801944c:	232d      	movs	r3, #45	; 0x2d
 801944e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019452:	4a9c      	ldr	r2, [pc, #624]	; (80196c4 <_printf_float+0x2fc>)
 8019454:	4b9c      	ldr	r3, [pc, #624]	; (80196c8 <_printf_float+0x300>)
 8019456:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801945a:	bf8c      	ite	hi
 801945c:	4690      	movhi	r8, r2
 801945e:	4698      	movls	r8, r3
 8019460:	2303      	movs	r3, #3
 8019462:	f02b 0204 	bic.w	r2, fp, #4
 8019466:	6123      	str	r3, [r4, #16]
 8019468:	6022      	str	r2, [r4, #0]
 801946a:	f04f 0900 	mov.w	r9, #0
 801946e:	9700      	str	r7, [sp, #0]
 8019470:	4633      	mov	r3, r6
 8019472:	aa0b      	add	r2, sp, #44	; 0x2c
 8019474:	4621      	mov	r1, r4
 8019476:	4628      	mov	r0, r5
 8019478:	f000 f9e6 	bl	8019848 <_printf_common>
 801947c:	3001      	adds	r0, #1
 801947e:	f040 808d 	bne.w	801959c <_printf_float+0x1d4>
 8019482:	f04f 30ff 	mov.w	r0, #4294967295
 8019486:	b00d      	add	sp, #52	; 0x34
 8019488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801948c:	4642      	mov	r2, r8
 801948e:	464b      	mov	r3, r9
 8019490:	4640      	mov	r0, r8
 8019492:	4649      	mov	r1, r9
 8019494:	f7e7 fb6a 	bl	8000b6c <__aeabi_dcmpun>
 8019498:	b110      	cbz	r0, 80194a0 <_printf_float+0xd8>
 801949a:	4a8c      	ldr	r2, [pc, #560]	; (80196cc <_printf_float+0x304>)
 801949c:	4b8c      	ldr	r3, [pc, #560]	; (80196d0 <_printf_float+0x308>)
 801949e:	e7da      	b.n	8019456 <_printf_float+0x8e>
 80194a0:	6861      	ldr	r1, [r4, #4]
 80194a2:	1c4b      	adds	r3, r1, #1
 80194a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80194a8:	a80a      	add	r0, sp, #40	; 0x28
 80194aa:	d13e      	bne.n	801952a <_printf_float+0x162>
 80194ac:	2306      	movs	r3, #6
 80194ae:	6063      	str	r3, [r4, #4]
 80194b0:	2300      	movs	r3, #0
 80194b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80194b6:	ab09      	add	r3, sp, #36	; 0x24
 80194b8:	9300      	str	r3, [sp, #0]
 80194ba:	ec49 8b10 	vmov	d0, r8, r9
 80194be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80194c2:	6022      	str	r2, [r4, #0]
 80194c4:	f8cd a004 	str.w	sl, [sp, #4]
 80194c8:	6861      	ldr	r1, [r4, #4]
 80194ca:	4628      	mov	r0, r5
 80194cc:	f7ff fee7 	bl	801929e <__cvt>
 80194d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80194d4:	2b47      	cmp	r3, #71	; 0x47
 80194d6:	4680      	mov	r8, r0
 80194d8:	d109      	bne.n	80194ee <_printf_float+0x126>
 80194da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194dc:	1cd8      	adds	r0, r3, #3
 80194de:	db02      	blt.n	80194e6 <_printf_float+0x11e>
 80194e0:	6862      	ldr	r2, [r4, #4]
 80194e2:	4293      	cmp	r3, r2
 80194e4:	dd47      	ble.n	8019576 <_printf_float+0x1ae>
 80194e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80194ea:	fa5f fa8a 	uxtb.w	sl, sl
 80194ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80194f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80194f4:	d824      	bhi.n	8019540 <_printf_float+0x178>
 80194f6:	3901      	subs	r1, #1
 80194f8:	4652      	mov	r2, sl
 80194fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80194fe:	9109      	str	r1, [sp, #36]	; 0x24
 8019500:	f7ff ff2e 	bl	8019360 <__exponent>
 8019504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019506:	1813      	adds	r3, r2, r0
 8019508:	2a01      	cmp	r2, #1
 801950a:	4681      	mov	r9, r0
 801950c:	6123      	str	r3, [r4, #16]
 801950e:	dc02      	bgt.n	8019516 <_printf_float+0x14e>
 8019510:	6822      	ldr	r2, [r4, #0]
 8019512:	07d1      	lsls	r1, r2, #31
 8019514:	d501      	bpl.n	801951a <_printf_float+0x152>
 8019516:	3301      	adds	r3, #1
 8019518:	6123      	str	r3, [r4, #16]
 801951a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801951e:	2b00      	cmp	r3, #0
 8019520:	d0a5      	beq.n	801946e <_printf_float+0xa6>
 8019522:	232d      	movs	r3, #45	; 0x2d
 8019524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019528:	e7a1      	b.n	801946e <_printf_float+0xa6>
 801952a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801952e:	f000 8177 	beq.w	8019820 <_printf_float+0x458>
 8019532:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8019536:	d1bb      	bne.n	80194b0 <_printf_float+0xe8>
 8019538:	2900      	cmp	r1, #0
 801953a:	d1b9      	bne.n	80194b0 <_printf_float+0xe8>
 801953c:	2301      	movs	r3, #1
 801953e:	e7b6      	b.n	80194ae <_printf_float+0xe6>
 8019540:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8019544:	d119      	bne.n	801957a <_printf_float+0x1b2>
 8019546:	2900      	cmp	r1, #0
 8019548:	6863      	ldr	r3, [r4, #4]
 801954a:	dd0c      	ble.n	8019566 <_printf_float+0x19e>
 801954c:	6121      	str	r1, [r4, #16]
 801954e:	b913      	cbnz	r3, 8019556 <_printf_float+0x18e>
 8019550:	6822      	ldr	r2, [r4, #0]
 8019552:	07d2      	lsls	r2, r2, #31
 8019554:	d502      	bpl.n	801955c <_printf_float+0x194>
 8019556:	3301      	adds	r3, #1
 8019558:	440b      	add	r3, r1
 801955a:	6123      	str	r3, [r4, #16]
 801955c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801955e:	65a3      	str	r3, [r4, #88]	; 0x58
 8019560:	f04f 0900 	mov.w	r9, #0
 8019564:	e7d9      	b.n	801951a <_printf_float+0x152>
 8019566:	b913      	cbnz	r3, 801956e <_printf_float+0x1a6>
 8019568:	6822      	ldr	r2, [r4, #0]
 801956a:	07d0      	lsls	r0, r2, #31
 801956c:	d501      	bpl.n	8019572 <_printf_float+0x1aa>
 801956e:	3302      	adds	r3, #2
 8019570:	e7f3      	b.n	801955a <_printf_float+0x192>
 8019572:	2301      	movs	r3, #1
 8019574:	e7f1      	b.n	801955a <_printf_float+0x192>
 8019576:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801957a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801957e:	4293      	cmp	r3, r2
 8019580:	db05      	blt.n	801958e <_printf_float+0x1c6>
 8019582:	6822      	ldr	r2, [r4, #0]
 8019584:	6123      	str	r3, [r4, #16]
 8019586:	07d1      	lsls	r1, r2, #31
 8019588:	d5e8      	bpl.n	801955c <_printf_float+0x194>
 801958a:	3301      	adds	r3, #1
 801958c:	e7e5      	b.n	801955a <_printf_float+0x192>
 801958e:	2b00      	cmp	r3, #0
 8019590:	bfd4      	ite	le
 8019592:	f1c3 0302 	rsble	r3, r3, #2
 8019596:	2301      	movgt	r3, #1
 8019598:	4413      	add	r3, r2
 801959a:	e7de      	b.n	801955a <_printf_float+0x192>
 801959c:	6823      	ldr	r3, [r4, #0]
 801959e:	055a      	lsls	r2, r3, #21
 80195a0:	d407      	bmi.n	80195b2 <_printf_float+0x1ea>
 80195a2:	6923      	ldr	r3, [r4, #16]
 80195a4:	4642      	mov	r2, r8
 80195a6:	4631      	mov	r1, r6
 80195a8:	4628      	mov	r0, r5
 80195aa:	47b8      	blx	r7
 80195ac:	3001      	adds	r0, #1
 80195ae:	d12b      	bne.n	8019608 <_printf_float+0x240>
 80195b0:	e767      	b.n	8019482 <_printf_float+0xba>
 80195b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80195b6:	f240 80dc 	bls.w	8019772 <_printf_float+0x3aa>
 80195ba:	2200      	movs	r2, #0
 80195bc:	2300      	movs	r3, #0
 80195be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80195c2:	f7e7 faa1 	bl	8000b08 <__aeabi_dcmpeq>
 80195c6:	2800      	cmp	r0, #0
 80195c8:	d033      	beq.n	8019632 <_printf_float+0x26a>
 80195ca:	2301      	movs	r3, #1
 80195cc:	4a41      	ldr	r2, [pc, #260]	; (80196d4 <_printf_float+0x30c>)
 80195ce:	4631      	mov	r1, r6
 80195d0:	4628      	mov	r0, r5
 80195d2:	47b8      	blx	r7
 80195d4:	3001      	adds	r0, #1
 80195d6:	f43f af54 	beq.w	8019482 <_printf_float+0xba>
 80195da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80195de:	429a      	cmp	r2, r3
 80195e0:	db02      	blt.n	80195e8 <_printf_float+0x220>
 80195e2:	6823      	ldr	r3, [r4, #0]
 80195e4:	07d8      	lsls	r0, r3, #31
 80195e6:	d50f      	bpl.n	8019608 <_printf_float+0x240>
 80195e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80195ec:	4631      	mov	r1, r6
 80195ee:	4628      	mov	r0, r5
 80195f0:	47b8      	blx	r7
 80195f2:	3001      	adds	r0, #1
 80195f4:	f43f af45 	beq.w	8019482 <_printf_float+0xba>
 80195f8:	f04f 0800 	mov.w	r8, #0
 80195fc:	f104 091a 	add.w	r9, r4, #26
 8019600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019602:	3b01      	subs	r3, #1
 8019604:	4543      	cmp	r3, r8
 8019606:	dc09      	bgt.n	801961c <_printf_float+0x254>
 8019608:	6823      	ldr	r3, [r4, #0]
 801960a:	079b      	lsls	r3, r3, #30
 801960c:	f100 8103 	bmi.w	8019816 <_printf_float+0x44e>
 8019610:	68e0      	ldr	r0, [r4, #12]
 8019612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019614:	4298      	cmp	r0, r3
 8019616:	bfb8      	it	lt
 8019618:	4618      	movlt	r0, r3
 801961a:	e734      	b.n	8019486 <_printf_float+0xbe>
 801961c:	2301      	movs	r3, #1
 801961e:	464a      	mov	r2, r9
 8019620:	4631      	mov	r1, r6
 8019622:	4628      	mov	r0, r5
 8019624:	47b8      	blx	r7
 8019626:	3001      	adds	r0, #1
 8019628:	f43f af2b 	beq.w	8019482 <_printf_float+0xba>
 801962c:	f108 0801 	add.w	r8, r8, #1
 8019630:	e7e6      	b.n	8019600 <_printf_float+0x238>
 8019632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019634:	2b00      	cmp	r3, #0
 8019636:	dc2b      	bgt.n	8019690 <_printf_float+0x2c8>
 8019638:	2301      	movs	r3, #1
 801963a:	4a26      	ldr	r2, [pc, #152]	; (80196d4 <_printf_float+0x30c>)
 801963c:	4631      	mov	r1, r6
 801963e:	4628      	mov	r0, r5
 8019640:	47b8      	blx	r7
 8019642:	3001      	adds	r0, #1
 8019644:	f43f af1d 	beq.w	8019482 <_printf_float+0xba>
 8019648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801964a:	b923      	cbnz	r3, 8019656 <_printf_float+0x28e>
 801964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801964e:	b913      	cbnz	r3, 8019656 <_printf_float+0x28e>
 8019650:	6823      	ldr	r3, [r4, #0]
 8019652:	07d9      	lsls	r1, r3, #31
 8019654:	d5d8      	bpl.n	8019608 <_printf_float+0x240>
 8019656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801965a:	4631      	mov	r1, r6
 801965c:	4628      	mov	r0, r5
 801965e:	47b8      	blx	r7
 8019660:	3001      	adds	r0, #1
 8019662:	f43f af0e 	beq.w	8019482 <_printf_float+0xba>
 8019666:	f04f 0900 	mov.w	r9, #0
 801966a:	f104 0a1a 	add.w	sl, r4, #26
 801966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019670:	425b      	negs	r3, r3
 8019672:	454b      	cmp	r3, r9
 8019674:	dc01      	bgt.n	801967a <_printf_float+0x2b2>
 8019676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019678:	e794      	b.n	80195a4 <_printf_float+0x1dc>
 801967a:	2301      	movs	r3, #1
 801967c:	4652      	mov	r2, sl
 801967e:	4631      	mov	r1, r6
 8019680:	4628      	mov	r0, r5
 8019682:	47b8      	blx	r7
 8019684:	3001      	adds	r0, #1
 8019686:	f43f aefc 	beq.w	8019482 <_printf_float+0xba>
 801968a:	f109 0901 	add.w	r9, r9, #1
 801968e:	e7ee      	b.n	801966e <_printf_float+0x2a6>
 8019690:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019694:	429a      	cmp	r2, r3
 8019696:	bfa8      	it	ge
 8019698:	461a      	movge	r2, r3
 801969a:	2a00      	cmp	r2, #0
 801969c:	4691      	mov	r9, r2
 801969e:	dd07      	ble.n	80196b0 <_printf_float+0x2e8>
 80196a0:	4613      	mov	r3, r2
 80196a2:	4631      	mov	r1, r6
 80196a4:	4642      	mov	r2, r8
 80196a6:	4628      	mov	r0, r5
 80196a8:	47b8      	blx	r7
 80196aa:	3001      	adds	r0, #1
 80196ac:	f43f aee9 	beq.w	8019482 <_printf_float+0xba>
 80196b0:	f104 031a 	add.w	r3, r4, #26
 80196b4:	f04f 0b00 	mov.w	fp, #0
 80196b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80196bc:	9306      	str	r3, [sp, #24]
 80196be:	e015      	b.n	80196ec <_printf_float+0x324>
 80196c0:	7fefffff 	.word	0x7fefffff
 80196c4:	08021bc2 	.word	0x08021bc2
 80196c8:	08021bbe 	.word	0x08021bbe
 80196cc:	08021bca 	.word	0x08021bca
 80196d0:	08021bc6 	.word	0x08021bc6
 80196d4:	08021edb 	.word	0x08021edb
 80196d8:	2301      	movs	r3, #1
 80196da:	9a06      	ldr	r2, [sp, #24]
 80196dc:	4631      	mov	r1, r6
 80196de:	4628      	mov	r0, r5
 80196e0:	47b8      	blx	r7
 80196e2:	3001      	adds	r0, #1
 80196e4:	f43f aecd 	beq.w	8019482 <_printf_float+0xba>
 80196e8:	f10b 0b01 	add.w	fp, fp, #1
 80196ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80196f0:	ebaa 0309 	sub.w	r3, sl, r9
 80196f4:	455b      	cmp	r3, fp
 80196f6:	dcef      	bgt.n	80196d8 <_printf_float+0x310>
 80196f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80196fc:	429a      	cmp	r2, r3
 80196fe:	44d0      	add	r8, sl
 8019700:	db15      	blt.n	801972e <_printf_float+0x366>
 8019702:	6823      	ldr	r3, [r4, #0]
 8019704:	07da      	lsls	r2, r3, #31
 8019706:	d412      	bmi.n	801972e <_printf_float+0x366>
 8019708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801970a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801970c:	eba3 020a 	sub.w	r2, r3, sl
 8019710:	eba3 0a01 	sub.w	sl, r3, r1
 8019714:	4592      	cmp	sl, r2
 8019716:	bfa8      	it	ge
 8019718:	4692      	movge	sl, r2
 801971a:	f1ba 0f00 	cmp.w	sl, #0
 801971e:	dc0e      	bgt.n	801973e <_printf_float+0x376>
 8019720:	f04f 0800 	mov.w	r8, #0
 8019724:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019728:	f104 091a 	add.w	r9, r4, #26
 801972c:	e019      	b.n	8019762 <_printf_float+0x39a>
 801972e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019732:	4631      	mov	r1, r6
 8019734:	4628      	mov	r0, r5
 8019736:	47b8      	blx	r7
 8019738:	3001      	adds	r0, #1
 801973a:	d1e5      	bne.n	8019708 <_printf_float+0x340>
 801973c:	e6a1      	b.n	8019482 <_printf_float+0xba>
 801973e:	4653      	mov	r3, sl
 8019740:	4642      	mov	r2, r8
 8019742:	4631      	mov	r1, r6
 8019744:	4628      	mov	r0, r5
 8019746:	47b8      	blx	r7
 8019748:	3001      	adds	r0, #1
 801974a:	d1e9      	bne.n	8019720 <_printf_float+0x358>
 801974c:	e699      	b.n	8019482 <_printf_float+0xba>
 801974e:	2301      	movs	r3, #1
 8019750:	464a      	mov	r2, r9
 8019752:	4631      	mov	r1, r6
 8019754:	4628      	mov	r0, r5
 8019756:	47b8      	blx	r7
 8019758:	3001      	adds	r0, #1
 801975a:	f43f ae92 	beq.w	8019482 <_printf_float+0xba>
 801975e:	f108 0801 	add.w	r8, r8, #1
 8019762:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019766:	1a9b      	subs	r3, r3, r2
 8019768:	eba3 030a 	sub.w	r3, r3, sl
 801976c:	4543      	cmp	r3, r8
 801976e:	dcee      	bgt.n	801974e <_printf_float+0x386>
 8019770:	e74a      	b.n	8019608 <_printf_float+0x240>
 8019772:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019774:	2a01      	cmp	r2, #1
 8019776:	dc01      	bgt.n	801977c <_printf_float+0x3b4>
 8019778:	07db      	lsls	r3, r3, #31
 801977a:	d53a      	bpl.n	80197f2 <_printf_float+0x42a>
 801977c:	2301      	movs	r3, #1
 801977e:	4642      	mov	r2, r8
 8019780:	4631      	mov	r1, r6
 8019782:	4628      	mov	r0, r5
 8019784:	47b8      	blx	r7
 8019786:	3001      	adds	r0, #1
 8019788:	f43f ae7b 	beq.w	8019482 <_printf_float+0xba>
 801978c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019790:	4631      	mov	r1, r6
 8019792:	4628      	mov	r0, r5
 8019794:	47b8      	blx	r7
 8019796:	3001      	adds	r0, #1
 8019798:	f108 0801 	add.w	r8, r8, #1
 801979c:	f43f ae71 	beq.w	8019482 <_printf_float+0xba>
 80197a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197a2:	2200      	movs	r2, #0
 80197a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80197a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80197ac:	2300      	movs	r3, #0
 80197ae:	f7e7 f9ab 	bl	8000b08 <__aeabi_dcmpeq>
 80197b2:	b9c8      	cbnz	r0, 80197e8 <_printf_float+0x420>
 80197b4:	4653      	mov	r3, sl
 80197b6:	4642      	mov	r2, r8
 80197b8:	4631      	mov	r1, r6
 80197ba:	4628      	mov	r0, r5
 80197bc:	47b8      	blx	r7
 80197be:	3001      	adds	r0, #1
 80197c0:	d10e      	bne.n	80197e0 <_printf_float+0x418>
 80197c2:	e65e      	b.n	8019482 <_printf_float+0xba>
 80197c4:	2301      	movs	r3, #1
 80197c6:	4652      	mov	r2, sl
 80197c8:	4631      	mov	r1, r6
 80197ca:	4628      	mov	r0, r5
 80197cc:	47b8      	blx	r7
 80197ce:	3001      	adds	r0, #1
 80197d0:	f43f ae57 	beq.w	8019482 <_printf_float+0xba>
 80197d4:	f108 0801 	add.w	r8, r8, #1
 80197d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80197da:	3b01      	subs	r3, #1
 80197dc:	4543      	cmp	r3, r8
 80197de:	dcf1      	bgt.n	80197c4 <_printf_float+0x3fc>
 80197e0:	464b      	mov	r3, r9
 80197e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80197e6:	e6de      	b.n	80195a6 <_printf_float+0x1de>
 80197e8:	f04f 0800 	mov.w	r8, #0
 80197ec:	f104 0a1a 	add.w	sl, r4, #26
 80197f0:	e7f2      	b.n	80197d8 <_printf_float+0x410>
 80197f2:	2301      	movs	r3, #1
 80197f4:	e7df      	b.n	80197b6 <_printf_float+0x3ee>
 80197f6:	2301      	movs	r3, #1
 80197f8:	464a      	mov	r2, r9
 80197fa:	4631      	mov	r1, r6
 80197fc:	4628      	mov	r0, r5
 80197fe:	47b8      	blx	r7
 8019800:	3001      	adds	r0, #1
 8019802:	f43f ae3e 	beq.w	8019482 <_printf_float+0xba>
 8019806:	f108 0801 	add.w	r8, r8, #1
 801980a:	68e3      	ldr	r3, [r4, #12]
 801980c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801980e:	1a9b      	subs	r3, r3, r2
 8019810:	4543      	cmp	r3, r8
 8019812:	dcf0      	bgt.n	80197f6 <_printf_float+0x42e>
 8019814:	e6fc      	b.n	8019610 <_printf_float+0x248>
 8019816:	f04f 0800 	mov.w	r8, #0
 801981a:	f104 0919 	add.w	r9, r4, #25
 801981e:	e7f4      	b.n	801980a <_printf_float+0x442>
 8019820:	2900      	cmp	r1, #0
 8019822:	f43f ae8b 	beq.w	801953c <_printf_float+0x174>
 8019826:	2300      	movs	r3, #0
 8019828:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801982c:	ab09      	add	r3, sp, #36	; 0x24
 801982e:	9300      	str	r3, [sp, #0]
 8019830:	ec49 8b10 	vmov	d0, r8, r9
 8019834:	6022      	str	r2, [r4, #0]
 8019836:	f8cd a004 	str.w	sl, [sp, #4]
 801983a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801983e:	4628      	mov	r0, r5
 8019840:	f7ff fd2d 	bl	801929e <__cvt>
 8019844:	4680      	mov	r8, r0
 8019846:	e648      	b.n	80194da <_printf_float+0x112>

08019848 <_printf_common>:
 8019848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801984c:	4691      	mov	r9, r2
 801984e:	461f      	mov	r7, r3
 8019850:	688a      	ldr	r2, [r1, #8]
 8019852:	690b      	ldr	r3, [r1, #16]
 8019854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019858:	4293      	cmp	r3, r2
 801985a:	bfb8      	it	lt
 801985c:	4613      	movlt	r3, r2
 801985e:	f8c9 3000 	str.w	r3, [r9]
 8019862:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019866:	4606      	mov	r6, r0
 8019868:	460c      	mov	r4, r1
 801986a:	b112      	cbz	r2, 8019872 <_printf_common+0x2a>
 801986c:	3301      	adds	r3, #1
 801986e:	f8c9 3000 	str.w	r3, [r9]
 8019872:	6823      	ldr	r3, [r4, #0]
 8019874:	0699      	lsls	r1, r3, #26
 8019876:	bf42      	ittt	mi
 8019878:	f8d9 3000 	ldrmi.w	r3, [r9]
 801987c:	3302      	addmi	r3, #2
 801987e:	f8c9 3000 	strmi.w	r3, [r9]
 8019882:	6825      	ldr	r5, [r4, #0]
 8019884:	f015 0506 	ands.w	r5, r5, #6
 8019888:	d107      	bne.n	801989a <_printf_common+0x52>
 801988a:	f104 0a19 	add.w	sl, r4, #25
 801988e:	68e3      	ldr	r3, [r4, #12]
 8019890:	f8d9 2000 	ldr.w	r2, [r9]
 8019894:	1a9b      	subs	r3, r3, r2
 8019896:	42ab      	cmp	r3, r5
 8019898:	dc28      	bgt.n	80198ec <_printf_common+0xa4>
 801989a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801989e:	6822      	ldr	r2, [r4, #0]
 80198a0:	3300      	adds	r3, #0
 80198a2:	bf18      	it	ne
 80198a4:	2301      	movne	r3, #1
 80198a6:	0692      	lsls	r2, r2, #26
 80198a8:	d42d      	bmi.n	8019906 <_printf_common+0xbe>
 80198aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80198ae:	4639      	mov	r1, r7
 80198b0:	4630      	mov	r0, r6
 80198b2:	47c0      	blx	r8
 80198b4:	3001      	adds	r0, #1
 80198b6:	d020      	beq.n	80198fa <_printf_common+0xb2>
 80198b8:	6823      	ldr	r3, [r4, #0]
 80198ba:	68e5      	ldr	r5, [r4, #12]
 80198bc:	f8d9 2000 	ldr.w	r2, [r9]
 80198c0:	f003 0306 	and.w	r3, r3, #6
 80198c4:	2b04      	cmp	r3, #4
 80198c6:	bf08      	it	eq
 80198c8:	1aad      	subeq	r5, r5, r2
 80198ca:	68a3      	ldr	r3, [r4, #8]
 80198cc:	6922      	ldr	r2, [r4, #16]
 80198ce:	bf0c      	ite	eq
 80198d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80198d4:	2500      	movne	r5, #0
 80198d6:	4293      	cmp	r3, r2
 80198d8:	bfc4      	itt	gt
 80198da:	1a9b      	subgt	r3, r3, r2
 80198dc:	18ed      	addgt	r5, r5, r3
 80198de:	f04f 0900 	mov.w	r9, #0
 80198e2:	341a      	adds	r4, #26
 80198e4:	454d      	cmp	r5, r9
 80198e6:	d11a      	bne.n	801991e <_printf_common+0xd6>
 80198e8:	2000      	movs	r0, #0
 80198ea:	e008      	b.n	80198fe <_printf_common+0xb6>
 80198ec:	2301      	movs	r3, #1
 80198ee:	4652      	mov	r2, sl
 80198f0:	4639      	mov	r1, r7
 80198f2:	4630      	mov	r0, r6
 80198f4:	47c0      	blx	r8
 80198f6:	3001      	adds	r0, #1
 80198f8:	d103      	bne.n	8019902 <_printf_common+0xba>
 80198fa:	f04f 30ff 	mov.w	r0, #4294967295
 80198fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019902:	3501      	adds	r5, #1
 8019904:	e7c3      	b.n	801988e <_printf_common+0x46>
 8019906:	18e1      	adds	r1, r4, r3
 8019908:	1c5a      	adds	r2, r3, #1
 801990a:	2030      	movs	r0, #48	; 0x30
 801990c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019910:	4422      	add	r2, r4
 8019912:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019916:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801991a:	3302      	adds	r3, #2
 801991c:	e7c5      	b.n	80198aa <_printf_common+0x62>
 801991e:	2301      	movs	r3, #1
 8019920:	4622      	mov	r2, r4
 8019922:	4639      	mov	r1, r7
 8019924:	4630      	mov	r0, r6
 8019926:	47c0      	blx	r8
 8019928:	3001      	adds	r0, #1
 801992a:	d0e6      	beq.n	80198fa <_printf_common+0xb2>
 801992c:	f109 0901 	add.w	r9, r9, #1
 8019930:	e7d8      	b.n	80198e4 <_printf_common+0x9c>
	...

08019934 <_printf_i>:
 8019934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019938:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801993c:	460c      	mov	r4, r1
 801993e:	7e09      	ldrb	r1, [r1, #24]
 8019940:	b085      	sub	sp, #20
 8019942:	296e      	cmp	r1, #110	; 0x6e
 8019944:	4617      	mov	r7, r2
 8019946:	4606      	mov	r6, r0
 8019948:	4698      	mov	r8, r3
 801994a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801994c:	f000 80b3 	beq.w	8019ab6 <_printf_i+0x182>
 8019950:	d822      	bhi.n	8019998 <_printf_i+0x64>
 8019952:	2963      	cmp	r1, #99	; 0x63
 8019954:	d036      	beq.n	80199c4 <_printf_i+0x90>
 8019956:	d80a      	bhi.n	801996e <_printf_i+0x3a>
 8019958:	2900      	cmp	r1, #0
 801995a:	f000 80b9 	beq.w	8019ad0 <_printf_i+0x19c>
 801995e:	2958      	cmp	r1, #88	; 0x58
 8019960:	f000 8083 	beq.w	8019a6a <_printf_i+0x136>
 8019964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019968:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801996c:	e032      	b.n	80199d4 <_printf_i+0xa0>
 801996e:	2964      	cmp	r1, #100	; 0x64
 8019970:	d001      	beq.n	8019976 <_printf_i+0x42>
 8019972:	2969      	cmp	r1, #105	; 0x69
 8019974:	d1f6      	bne.n	8019964 <_printf_i+0x30>
 8019976:	6820      	ldr	r0, [r4, #0]
 8019978:	6813      	ldr	r3, [r2, #0]
 801997a:	0605      	lsls	r5, r0, #24
 801997c:	f103 0104 	add.w	r1, r3, #4
 8019980:	d52a      	bpl.n	80199d8 <_printf_i+0xa4>
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	6011      	str	r1, [r2, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	da03      	bge.n	8019992 <_printf_i+0x5e>
 801998a:	222d      	movs	r2, #45	; 0x2d
 801998c:	425b      	negs	r3, r3
 801998e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019992:	486f      	ldr	r0, [pc, #444]	; (8019b50 <_printf_i+0x21c>)
 8019994:	220a      	movs	r2, #10
 8019996:	e039      	b.n	8019a0c <_printf_i+0xd8>
 8019998:	2973      	cmp	r1, #115	; 0x73
 801999a:	f000 809d 	beq.w	8019ad8 <_printf_i+0x1a4>
 801999e:	d808      	bhi.n	80199b2 <_printf_i+0x7e>
 80199a0:	296f      	cmp	r1, #111	; 0x6f
 80199a2:	d020      	beq.n	80199e6 <_printf_i+0xb2>
 80199a4:	2970      	cmp	r1, #112	; 0x70
 80199a6:	d1dd      	bne.n	8019964 <_printf_i+0x30>
 80199a8:	6823      	ldr	r3, [r4, #0]
 80199aa:	f043 0320 	orr.w	r3, r3, #32
 80199ae:	6023      	str	r3, [r4, #0]
 80199b0:	e003      	b.n	80199ba <_printf_i+0x86>
 80199b2:	2975      	cmp	r1, #117	; 0x75
 80199b4:	d017      	beq.n	80199e6 <_printf_i+0xb2>
 80199b6:	2978      	cmp	r1, #120	; 0x78
 80199b8:	d1d4      	bne.n	8019964 <_printf_i+0x30>
 80199ba:	2378      	movs	r3, #120	; 0x78
 80199bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80199c0:	4864      	ldr	r0, [pc, #400]	; (8019b54 <_printf_i+0x220>)
 80199c2:	e055      	b.n	8019a70 <_printf_i+0x13c>
 80199c4:	6813      	ldr	r3, [r2, #0]
 80199c6:	1d19      	adds	r1, r3, #4
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	6011      	str	r1, [r2, #0]
 80199cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80199d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80199d4:	2301      	movs	r3, #1
 80199d6:	e08c      	b.n	8019af2 <_printf_i+0x1be>
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	6011      	str	r1, [r2, #0]
 80199dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80199e0:	bf18      	it	ne
 80199e2:	b21b      	sxthne	r3, r3
 80199e4:	e7cf      	b.n	8019986 <_printf_i+0x52>
 80199e6:	6813      	ldr	r3, [r2, #0]
 80199e8:	6825      	ldr	r5, [r4, #0]
 80199ea:	1d18      	adds	r0, r3, #4
 80199ec:	6010      	str	r0, [r2, #0]
 80199ee:	0628      	lsls	r0, r5, #24
 80199f0:	d501      	bpl.n	80199f6 <_printf_i+0xc2>
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	e002      	b.n	80199fc <_printf_i+0xc8>
 80199f6:	0668      	lsls	r0, r5, #25
 80199f8:	d5fb      	bpl.n	80199f2 <_printf_i+0xbe>
 80199fa:	881b      	ldrh	r3, [r3, #0]
 80199fc:	4854      	ldr	r0, [pc, #336]	; (8019b50 <_printf_i+0x21c>)
 80199fe:	296f      	cmp	r1, #111	; 0x6f
 8019a00:	bf14      	ite	ne
 8019a02:	220a      	movne	r2, #10
 8019a04:	2208      	moveq	r2, #8
 8019a06:	2100      	movs	r1, #0
 8019a08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019a0c:	6865      	ldr	r5, [r4, #4]
 8019a0e:	60a5      	str	r5, [r4, #8]
 8019a10:	2d00      	cmp	r5, #0
 8019a12:	f2c0 8095 	blt.w	8019b40 <_printf_i+0x20c>
 8019a16:	6821      	ldr	r1, [r4, #0]
 8019a18:	f021 0104 	bic.w	r1, r1, #4
 8019a1c:	6021      	str	r1, [r4, #0]
 8019a1e:	2b00      	cmp	r3, #0
 8019a20:	d13d      	bne.n	8019a9e <_printf_i+0x16a>
 8019a22:	2d00      	cmp	r5, #0
 8019a24:	f040 808e 	bne.w	8019b44 <_printf_i+0x210>
 8019a28:	4665      	mov	r5, ip
 8019a2a:	2a08      	cmp	r2, #8
 8019a2c:	d10b      	bne.n	8019a46 <_printf_i+0x112>
 8019a2e:	6823      	ldr	r3, [r4, #0]
 8019a30:	07db      	lsls	r3, r3, #31
 8019a32:	d508      	bpl.n	8019a46 <_printf_i+0x112>
 8019a34:	6923      	ldr	r3, [r4, #16]
 8019a36:	6862      	ldr	r2, [r4, #4]
 8019a38:	429a      	cmp	r2, r3
 8019a3a:	bfde      	ittt	le
 8019a3c:	2330      	movle	r3, #48	; 0x30
 8019a3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019a42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019a46:	ebac 0305 	sub.w	r3, ip, r5
 8019a4a:	6123      	str	r3, [r4, #16]
 8019a4c:	f8cd 8000 	str.w	r8, [sp]
 8019a50:	463b      	mov	r3, r7
 8019a52:	aa03      	add	r2, sp, #12
 8019a54:	4621      	mov	r1, r4
 8019a56:	4630      	mov	r0, r6
 8019a58:	f7ff fef6 	bl	8019848 <_printf_common>
 8019a5c:	3001      	adds	r0, #1
 8019a5e:	d14d      	bne.n	8019afc <_printf_i+0x1c8>
 8019a60:	f04f 30ff 	mov.w	r0, #4294967295
 8019a64:	b005      	add	sp, #20
 8019a66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a6a:	4839      	ldr	r0, [pc, #228]	; (8019b50 <_printf_i+0x21c>)
 8019a6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019a70:	6813      	ldr	r3, [r2, #0]
 8019a72:	6821      	ldr	r1, [r4, #0]
 8019a74:	1d1d      	adds	r5, r3, #4
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	6015      	str	r5, [r2, #0]
 8019a7a:	060a      	lsls	r2, r1, #24
 8019a7c:	d50b      	bpl.n	8019a96 <_printf_i+0x162>
 8019a7e:	07ca      	lsls	r2, r1, #31
 8019a80:	bf44      	itt	mi
 8019a82:	f041 0120 	orrmi.w	r1, r1, #32
 8019a86:	6021      	strmi	r1, [r4, #0]
 8019a88:	b91b      	cbnz	r3, 8019a92 <_printf_i+0x15e>
 8019a8a:	6822      	ldr	r2, [r4, #0]
 8019a8c:	f022 0220 	bic.w	r2, r2, #32
 8019a90:	6022      	str	r2, [r4, #0]
 8019a92:	2210      	movs	r2, #16
 8019a94:	e7b7      	b.n	8019a06 <_printf_i+0xd2>
 8019a96:	064d      	lsls	r5, r1, #25
 8019a98:	bf48      	it	mi
 8019a9a:	b29b      	uxthmi	r3, r3
 8019a9c:	e7ef      	b.n	8019a7e <_printf_i+0x14a>
 8019a9e:	4665      	mov	r5, ip
 8019aa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8019aa4:	fb02 3311 	mls	r3, r2, r1, r3
 8019aa8:	5cc3      	ldrb	r3, [r0, r3]
 8019aaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019aae:	460b      	mov	r3, r1
 8019ab0:	2900      	cmp	r1, #0
 8019ab2:	d1f5      	bne.n	8019aa0 <_printf_i+0x16c>
 8019ab4:	e7b9      	b.n	8019a2a <_printf_i+0xf6>
 8019ab6:	6813      	ldr	r3, [r2, #0]
 8019ab8:	6825      	ldr	r5, [r4, #0]
 8019aba:	6961      	ldr	r1, [r4, #20]
 8019abc:	1d18      	adds	r0, r3, #4
 8019abe:	6010      	str	r0, [r2, #0]
 8019ac0:	0628      	lsls	r0, r5, #24
 8019ac2:	681b      	ldr	r3, [r3, #0]
 8019ac4:	d501      	bpl.n	8019aca <_printf_i+0x196>
 8019ac6:	6019      	str	r1, [r3, #0]
 8019ac8:	e002      	b.n	8019ad0 <_printf_i+0x19c>
 8019aca:	066a      	lsls	r2, r5, #25
 8019acc:	d5fb      	bpl.n	8019ac6 <_printf_i+0x192>
 8019ace:	8019      	strh	r1, [r3, #0]
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	6123      	str	r3, [r4, #16]
 8019ad4:	4665      	mov	r5, ip
 8019ad6:	e7b9      	b.n	8019a4c <_printf_i+0x118>
 8019ad8:	6813      	ldr	r3, [r2, #0]
 8019ada:	1d19      	adds	r1, r3, #4
 8019adc:	6011      	str	r1, [r2, #0]
 8019ade:	681d      	ldr	r5, [r3, #0]
 8019ae0:	6862      	ldr	r2, [r4, #4]
 8019ae2:	2100      	movs	r1, #0
 8019ae4:	4628      	mov	r0, r5
 8019ae6:	f7e6 fb9b 	bl	8000220 <memchr>
 8019aea:	b108      	cbz	r0, 8019af0 <_printf_i+0x1bc>
 8019aec:	1b40      	subs	r0, r0, r5
 8019aee:	6060      	str	r0, [r4, #4]
 8019af0:	6863      	ldr	r3, [r4, #4]
 8019af2:	6123      	str	r3, [r4, #16]
 8019af4:	2300      	movs	r3, #0
 8019af6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019afa:	e7a7      	b.n	8019a4c <_printf_i+0x118>
 8019afc:	6923      	ldr	r3, [r4, #16]
 8019afe:	462a      	mov	r2, r5
 8019b00:	4639      	mov	r1, r7
 8019b02:	4630      	mov	r0, r6
 8019b04:	47c0      	blx	r8
 8019b06:	3001      	adds	r0, #1
 8019b08:	d0aa      	beq.n	8019a60 <_printf_i+0x12c>
 8019b0a:	6823      	ldr	r3, [r4, #0]
 8019b0c:	079b      	lsls	r3, r3, #30
 8019b0e:	d413      	bmi.n	8019b38 <_printf_i+0x204>
 8019b10:	68e0      	ldr	r0, [r4, #12]
 8019b12:	9b03      	ldr	r3, [sp, #12]
 8019b14:	4298      	cmp	r0, r3
 8019b16:	bfb8      	it	lt
 8019b18:	4618      	movlt	r0, r3
 8019b1a:	e7a3      	b.n	8019a64 <_printf_i+0x130>
 8019b1c:	2301      	movs	r3, #1
 8019b1e:	464a      	mov	r2, r9
 8019b20:	4639      	mov	r1, r7
 8019b22:	4630      	mov	r0, r6
 8019b24:	47c0      	blx	r8
 8019b26:	3001      	adds	r0, #1
 8019b28:	d09a      	beq.n	8019a60 <_printf_i+0x12c>
 8019b2a:	3501      	adds	r5, #1
 8019b2c:	68e3      	ldr	r3, [r4, #12]
 8019b2e:	9a03      	ldr	r2, [sp, #12]
 8019b30:	1a9b      	subs	r3, r3, r2
 8019b32:	42ab      	cmp	r3, r5
 8019b34:	dcf2      	bgt.n	8019b1c <_printf_i+0x1e8>
 8019b36:	e7eb      	b.n	8019b10 <_printf_i+0x1dc>
 8019b38:	2500      	movs	r5, #0
 8019b3a:	f104 0919 	add.w	r9, r4, #25
 8019b3e:	e7f5      	b.n	8019b2c <_printf_i+0x1f8>
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d1ac      	bne.n	8019a9e <_printf_i+0x16a>
 8019b44:	7803      	ldrb	r3, [r0, #0]
 8019b46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b4e:	e76c      	b.n	8019a2a <_printf_i+0xf6>
 8019b50:	08021bce 	.word	0x08021bce
 8019b54:	08021bdf 	.word	0x08021bdf

08019b58 <_scanf_float>:
 8019b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b5c:	469a      	mov	sl, r3
 8019b5e:	688b      	ldr	r3, [r1, #8]
 8019b60:	4616      	mov	r6, r2
 8019b62:	1e5a      	subs	r2, r3, #1
 8019b64:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019b68:	b087      	sub	sp, #28
 8019b6a:	bf83      	ittte	hi
 8019b6c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8019b70:	189b      	addhi	r3, r3, r2
 8019b72:	9301      	strhi	r3, [sp, #4]
 8019b74:	2300      	movls	r3, #0
 8019b76:	bf86      	itte	hi
 8019b78:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019b7c:	608b      	strhi	r3, [r1, #8]
 8019b7e:	9301      	strls	r3, [sp, #4]
 8019b80:	680b      	ldr	r3, [r1, #0]
 8019b82:	4688      	mov	r8, r1
 8019b84:	f04f 0b00 	mov.w	fp, #0
 8019b88:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019b8c:	f848 3b1c 	str.w	r3, [r8], #28
 8019b90:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8019b94:	4607      	mov	r7, r0
 8019b96:	460c      	mov	r4, r1
 8019b98:	4645      	mov	r5, r8
 8019b9a:	465a      	mov	r2, fp
 8019b9c:	46d9      	mov	r9, fp
 8019b9e:	f8cd b008 	str.w	fp, [sp, #8]
 8019ba2:	68a1      	ldr	r1, [r4, #8]
 8019ba4:	b181      	cbz	r1, 8019bc8 <_scanf_float+0x70>
 8019ba6:	6833      	ldr	r3, [r6, #0]
 8019ba8:	781b      	ldrb	r3, [r3, #0]
 8019baa:	2b49      	cmp	r3, #73	; 0x49
 8019bac:	d071      	beq.n	8019c92 <_scanf_float+0x13a>
 8019bae:	d84d      	bhi.n	8019c4c <_scanf_float+0xf4>
 8019bb0:	2b39      	cmp	r3, #57	; 0x39
 8019bb2:	d840      	bhi.n	8019c36 <_scanf_float+0xde>
 8019bb4:	2b31      	cmp	r3, #49	; 0x31
 8019bb6:	f080 8088 	bcs.w	8019cca <_scanf_float+0x172>
 8019bba:	2b2d      	cmp	r3, #45	; 0x2d
 8019bbc:	f000 8090 	beq.w	8019ce0 <_scanf_float+0x188>
 8019bc0:	d815      	bhi.n	8019bee <_scanf_float+0x96>
 8019bc2:	2b2b      	cmp	r3, #43	; 0x2b
 8019bc4:	f000 808c 	beq.w	8019ce0 <_scanf_float+0x188>
 8019bc8:	f1b9 0f00 	cmp.w	r9, #0
 8019bcc:	d003      	beq.n	8019bd6 <_scanf_float+0x7e>
 8019bce:	6823      	ldr	r3, [r4, #0]
 8019bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019bd4:	6023      	str	r3, [r4, #0]
 8019bd6:	3a01      	subs	r2, #1
 8019bd8:	2a01      	cmp	r2, #1
 8019bda:	f200 80ea 	bhi.w	8019db2 <_scanf_float+0x25a>
 8019bde:	4545      	cmp	r5, r8
 8019be0:	f200 80dc 	bhi.w	8019d9c <_scanf_float+0x244>
 8019be4:	2601      	movs	r6, #1
 8019be6:	4630      	mov	r0, r6
 8019be8:	b007      	add	sp, #28
 8019bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bee:	2b2e      	cmp	r3, #46	; 0x2e
 8019bf0:	f000 809f 	beq.w	8019d32 <_scanf_float+0x1da>
 8019bf4:	2b30      	cmp	r3, #48	; 0x30
 8019bf6:	d1e7      	bne.n	8019bc8 <_scanf_float+0x70>
 8019bf8:	6820      	ldr	r0, [r4, #0]
 8019bfa:	f410 7f80 	tst.w	r0, #256	; 0x100
 8019bfe:	d064      	beq.n	8019cca <_scanf_float+0x172>
 8019c00:	9b01      	ldr	r3, [sp, #4]
 8019c02:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8019c06:	6020      	str	r0, [r4, #0]
 8019c08:	f109 0901 	add.w	r9, r9, #1
 8019c0c:	b11b      	cbz	r3, 8019c16 <_scanf_float+0xbe>
 8019c0e:	3b01      	subs	r3, #1
 8019c10:	3101      	adds	r1, #1
 8019c12:	9301      	str	r3, [sp, #4]
 8019c14:	60a1      	str	r1, [r4, #8]
 8019c16:	68a3      	ldr	r3, [r4, #8]
 8019c18:	3b01      	subs	r3, #1
 8019c1a:	60a3      	str	r3, [r4, #8]
 8019c1c:	6923      	ldr	r3, [r4, #16]
 8019c1e:	3301      	adds	r3, #1
 8019c20:	6123      	str	r3, [r4, #16]
 8019c22:	6873      	ldr	r3, [r6, #4]
 8019c24:	3b01      	subs	r3, #1
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	6073      	str	r3, [r6, #4]
 8019c2a:	f340 80ac 	ble.w	8019d86 <_scanf_float+0x22e>
 8019c2e:	6833      	ldr	r3, [r6, #0]
 8019c30:	3301      	adds	r3, #1
 8019c32:	6033      	str	r3, [r6, #0]
 8019c34:	e7b5      	b.n	8019ba2 <_scanf_float+0x4a>
 8019c36:	2b45      	cmp	r3, #69	; 0x45
 8019c38:	f000 8085 	beq.w	8019d46 <_scanf_float+0x1ee>
 8019c3c:	2b46      	cmp	r3, #70	; 0x46
 8019c3e:	d06a      	beq.n	8019d16 <_scanf_float+0x1be>
 8019c40:	2b41      	cmp	r3, #65	; 0x41
 8019c42:	d1c1      	bne.n	8019bc8 <_scanf_float+0x70>
 8019c44:	2a01      	cmp	r2, #1
 8019c46:	d1bf      	bne.n	8019bc8 <_scanf_float+0x70>
 8019c48:	2202      	movs	r2, #2
 8019c4a:	e046      	b.n	8019cda <_scanf_float+0x182>
 8019c4c:	2b65      	cmp	r3, #101	; 0x65
 8019c4e:	d07a      	beq.n	8019d46 <_scanf_float+0x1ee>
 8019c50:	d818      	bhi.n	8019c84 <_scanf_float+0x12c>
 8019c52:	2b54      	cmp	r3, #84	; 0x54
 8019c54:	d066      	beq.n	8019d24 <_scanf_float+0x1cc>
 8019c56:	d811      	bhi.n	8019c7c <_scanf_float+0x124>
 8019c58:	2b4e      	cmp	r3, #78	; 0x4e
 8019c5a:	d1b5      	bne.n	8019bc8 <_scanf_float+0x70>
 8019c5c:	2a00      	cmp	r2, #0
 8019c5e:	d146      	bne.n	8019cee <_scanf_float+0x196>
 8019c60:	f1b9 0f00 	cmp.w	r9, #0
 8019c64:	d145      	bne.n	8019cf2 <_scanf_float+0x19a>
 8019c66:	6821      	ldr	r1, [r4, #0]
 8019c68:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8019c6c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8019c70:	d13f      	bne.n	8019cf2 <_scanf_float+0x19a>
 8019c72:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8019c76:	6021      	str	r1, [r4, #0]
 8019c78:	2201      	movs	r2, #1
 8019c7a:	e02e      	b.n	8019cda <_scanf_float+0x182>
 8019c7c:	2b59      	cmp	r3, #89	; 0x59
 8019c7e:	d01e      	beq.n	8019cbe <_scanf_float+0x166>
 8019c80:	2b61      	cmp	r3, #97	; 0x61
 8019c82:	e7de      	b.n	8019c42 <_scanf_float+0xea>
 8019c84:	2b6e      	cmp	r3, #110	; 0x6e
 8019c86:	d0e9      	beq.n	8019c5c <_scanf_float+0x104>
 8019c88:	d815      	bhi.n	8019cb6 <_scanf_float+0x15e>
 8019c8a:	2b66      	cmp	r3, #102	; 0x66
 8019c8c:	d043      	beq.n	8019d16 <_scanf_float+0x1be>
 8019c8e:	2b69      	cmp	r3, #105	; 0x69
 8019c90:	d19a      	bne.n	8019bc8 <_scanf_float+0x70>
 8019c92:	f1bb 0f00 	cmp.w	fp, #0
 8019c96:	d138      	bne.n	8019d0a <_scanf_float+0x1b2>
 8019c98:	f1b9 0f00 	cmp.w	r9, #0
 8019c9c:	d197      	bne.n	8019bce <_scanf_float+0x76>
 8019c9e:	6821      	ldr	r1, [r4, #0]
 8019ca0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8019ca4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8019ca8:	d195      	bne.n	8019bd6 <_scanf_float+0x7e>
 8019caa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8019cae:	6021      	str	r1, [r4, #0]
 8019cb0:	f04f 0b01 	mov.w	fp, #1
 8019cb4:	e011      	b.n	8019cda <_scanf_float+0x182>
 8019cb6:	2b74      	cmp	r3, #116	; 0x74
 8019cb8:	d034      	beq.n	8019d24 <_scanf_float+0x1cc>
 8019cba:	2b79      	cmp	r3, #121	; 0x79
 8019cbc:	d184      	bne.n	8019bc8 <_scanf_float+0x70>
 8019cbe:	f1bb 0f07 	cmp.w	fp, #7
 8019cc2:	d181      	bne.n	8019bc8 <_scanf_float+0x70>
 8019cc4:	f04f 0b08 	mov.w	fp, #8
 8019cc8:	e007      	b.n	8019cda <_scanf_float+0x182>
 8019cca:	eb12 0f0b 	cmn.w	r2, fp
 8019cce:	f47f af7b 	bne.w	8019bc8 <_scanf_float+0x70>
 8019cd2:	6821      	ldr	r1, [r4, #0]
 8019cd4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8019cd8:	6021      	str	r1, [r4, #0]
 8019cda:	702b      	strb	r3, [r5, #0]
 8019cdc:	3501      	adds	r5, #1
 8019cde:	e79a      	b.n	8019c16 <_scanf_float+0xbe>
 8019ce0:	6821      	ldr	r1, [r4, #0]
 8019ce2:	0608      	lsls	r0, r1, #24
 8019ce4:	f57f af70 	bpl.w	8019bc8 <_scanf_float+0x70>
 8019ce8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019cec:	e7f4      	b.n	8019cd8 <_scanf_float+0x180>
 8019cee:	2a02      	cmp	r2, #2
 8019cf0:	d047      	beq.n	8019d82 <_scanf_float+0x22a>
 8019cf2:	f1bb 0f01 	cmp.w	fp, #1
 8019cf6:	d003      	beq.n	8019d00 <_scanf_float+0x1a8>
 8019cf8:	f1bb 0f04 	cmp.w	fp, #4
 8019cfc:	f47f af64 	bne.w	8019bc8 <_scanf_float+0x70>
 8019d00:	f10b 0b01 	add.w	fp, fp, #1
 8019d04:	fa5f fb8b 	uxtb.w	fp, fp
 8019d08:	e7e7      	b.n	8019cda <_scanf_float+0x182>
 8019d0a:	f1bb 0f03 	cmp.w	fp, #3
 8019d0e:	d0f7      	beq.n	8019d00 <_scanf_float+0x1a8>
 8019d10:	f1bb 0f05 	cmp.w	fp, #5
 8019d14:	e7f2      	b.n	8019cfc <_scanf_float+0x1a4>
 8019d16:	f1bb 0f02 	cmp.w	fp, #2
 8019d1a:	f47f af55 	bne.w	8019bc8 <_scanf_float+0x70>
 8019d1e:	f04f 0b03 	mov.w	fp, #3
 8019d22:	e7da      	b.n	8019cda <_scanf_float+0x182>
 8019d24:	f1bb 0f06 	cmp.w	fp, #6
 8019d28:	f47f af4e 	bne.w	8019bc8 <_scanf_float+0x70>
 8019d2c:	f04f 0b07 	mov.w	fp, #7
 8019d30:	e7d3      	b.n	8019cda <_scanf_float+0x182>
 8019d32:	6821      	ldr	r1, [r4, #0]
 8019d34:	0588      	lsls	r0, r1, #22
 8019d36:	f57f af47 	bpl.w	8019bc8 <_scanf_float+0x70>
 8019d3a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8019d3e:	6021      	str	r1, [r4, #0]
 8019d40:	f8cd 9008 	str.w	r9, [sp, #8]
 8019d44:	e7c9      	b.n	8019cda <_scanf_float+0x182>
 8019d46:	6821      	ldr	r1, [r4, #0]
 8019d48:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8019d4c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019d50:	d006      	beq.n	8019d60 <_scanf_float+0x208>
 8019d52:	0548      	lsls	r0, r1, #21
 8019d54:	f57f af38 	bpl.w	8019bc8 <_scanf_float+0x70>
 8019d58:	f1b9 0f00 	cmp.w	r9, #0
 8019d5c:	f43f af3b 	beq.w	8019bd6 <_scanf_float+0x7e>
 8019d60:	0588      	lsls	r0, r1, #22
 8019d62:	bf58      	it	pl
 8019d64:	9802      	ldrpl	r0, [sp, #8]
 8019d66:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8019d6a:	bf58      	it	pl
 8019d6c:	eba9 0000 	subpl.w	r0, r9, r0
 8019d70:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8019d74:	bf58      	it	pl
 8019d76:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8019d7a:	6021      	str	r1, [r4, #0]
 8019d7c:	f04f 0900 	mov.w	r9, #0
 8019d80:	e7ab      	b.n	8019cda <_scanf_float+0x182>
 8019d82:	2203      	movs	r2, #3
 8019d84:	e7a9      	b.n	8019cda <_scanf_float+0x182>
 8019d86:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019d8a:	9205      	str	r2, [sp, #20]
 8019d8c:	4631      	mov	r1, r6
 8019d8e:	4638      	mov	r0, r7
 8019d90:	4798      	blx	r3
 8019d92:	9a05      	ldr	r2, [sp, #20]
 8019d94:	2800      	cmp	r0, #0
 8019d96:	f43f af04 	beq.w	8019ba2 <_scanf_float+0x4a>
 8019d9a:	e715      	b.n	8019bc8 <_scanf_float+0x70>
 8019d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019da0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8019da4:	4632      	mov	r2, r6
 8019da6:	4638      	mov	r0, r7
 8019da8:	4798      	blx	r3
 8019daa:	6923      	ldr	r3, [r4, #16]
 8019dac:	3b01      	subs	r3, #1
 8019dae:	6123      	str	r3, [r4, #16]
 8019db0:	e715      	b.n	8019bde <_scanf_float+0x86>
 8019db2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8019db6:	2b06      	cmp	r3, #6
 8019db8:	d80a      	bhi.n	8019dd0 <_scanf_float+0x278>
 8019dba:	f1bb 0f02 	cmp.w	fp, #2
 8019dbe:	d968      	bls.n	8019e92 <_scanf_float+0x33a>
 8019dc0:	f1ab 0b03 	sub.w	fp, fp, #3
 8019dc4:	fa5f fb8b 	uxtb.w	fp, fp
 8019dc8:	eba5 0b0b 	sub.w	fp, r5, fp
 8019dcc:	455d      	cmp	r5, fp
 8019dce:	d14b      	bne.n	8019e68 <_scanf_float+0x310>
 8019dd0:	6823      	ldr	r3, [r4, #0]
 8019dd2:	05da      	lsls	r2, r3, #23
 8019dd4:	d51f      	bpl.n	8019e16 <_scanf_float+0x2be>
 8019dd6:	055b      	lsls	r3, r3, #21
 8019dd8:	d468      	bmi.n	8019eac <_scanf_float+0x354>
 8019dda:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019dde:	6923      	ldr	r3, [r4, #16]
 8019de0:	2965      	cmp	r1, #101	; 0x65
 8019de2:	f103 33ff 	add.w	r3, r3, #4294967295
 8019de6:	f105 3bff 	add.w	fp, r5, #4294967295
 8019dea:	6123      	str	r3, [r4, #16]
 8019dec:	d00d      	beq.n	8019e0a <_scanf_float+0x2b2>
 8019dee:	2945      	cmp	r1, #69	; 0x45
 8019df0:	d00b      	beq.n	8019e0a <_scanf_float+0x2b2>
 8019df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019df6:	4632      	mov	r2, r6
 8019df8:	4638      	mov	r0, r7
 8019dfa:	4798      	blx	r3
 8019dfc:	6923      	ldr	r3, [r4, #16]
 8019dfe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8019e02:	3b01      	subs	r3, #1
 8019e04:	f1a5 0b02 	sub.w	fp, r5, #2
 8019e08:	6123      	str	r3, [r4, #16]
 8019e0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e0e:	4632      	mov	r2, r6
 8019e10:	4638      	mov	r0, r7
 8019e12:	4798      	blx	r3
 8019e14:	465d      	mov	r5, fp
 8019e16:	6826      	ldr	r6, [r4, #0]
 8019e18:	f016 0610 	ands.w	r6, r6, #16
 8019e1c:	d17a      	bne.n	8019f14 <_scanf_float+0x3bc>
 8019e1e:	702e      	strb	r6, [r5, #0]
 8019e20:	6823      	ldr	r3, [r4, #0]
 8019e22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019e2a:	d142      	bne.n	8019eb2 <_scanf_float+0x35a>
 8019e2c:	9b02      	ldr	r3, [sp, #8]
 8019e2e:	eba9 0303 	sub.w	r3, r9, r3
 8019e32:	425a      	negs	r2, r3
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d149      	bne.n	8019ecc <_scanf_float+0x374>
 8019e38:	2200      	movs	r2, #0
 8019e3a:	4641      	mov	r1, r8
 8019e3c:	4638      	mov	r0, r7
 8019e3e:	f000 ffe3 	bl	801ae08 <_strtod_r>
 8019e42:	6825      	ldr	r5, [r4, #0]
 8019e44:	f8da 3000 	ldr.w	r3, [sl]
 8019e48:	f015 0f02 	tst.w	r5, #2
 8019e4c:	f103 0204 	add.w	r2, r3, #4
 8019e50:	ec59 8b10 	vmov	r8, r9, d0
 8019e54:	f8ca 2000 	str.w	r2, [sl]
 8019e58:	d043      	beq.n	8019ee2 <_scanf_float+0x38a>
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	e9c3 8900 	strd	r8, r9, [r3]
 8019e60:	68e3      	ldr	r3, [r4, #12]
 8019e62:	3301      	adds	r3, #1
 8019e64:	60e3      	str	r3, [r4, #12]
 8019e66:	e6be      	b.n	8019be6 <_scanf_float+0x8e>
 8019e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8019e70:	4632      	mov	r2, r6
 8019e72:	4638      	mov	r0, r7
 8019e74:	4798      	blx	r3
 8019e76:	6923      	ldr	r3, [r4, #16]
 8019e78:	3b01      	subs	r3, #1
 8019e7a:	6123      	str	r3, [r4, #16]
 8019e7c:	e7a6      	b.n	8019dcc <_scanf_float+0x274>
 8019e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8019e86:	4632      	mov	r2, r6
 8019e88:	4638      	mov	r0, r7
 8019e8a:	4798      	blx	r3
 8019e8c:	6923      	ldr	r3, [r4, #16]
 8019e8e:	3b01      	subs	r3, #1
 8019e90:	6123      	str	r3, [r4, #16]
 8019e92:	4545      	cmp	r5, r8
 8019e94:	d8f3      	bhi.n	8019e7e <_scanf_float+0x326>
 8019e96:	e6a5      	b.n	8019be4 <_scanf_float+0x8c>
 8019e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019e9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8019ea0:	4632      	mov	r2, r6
 8019ea2:	4638      	mov	r0, r7
 8019ea4:	4798      	blx	r3
 8019ea6:	6923      	ldr	r3, [r4, #16]
 8019ea8:	3b01      	subs	r3, #1
 8019eaa:	6123      	str	r3, [r4, #16]
 8019eac:	4545      	cmp	r5, r8
 8019eae:	d8f3      	bhi.n	8019e98 <_scanf_float+0x340>
 8019eb0:	e698      	b.n	8019be4 <_scanf_float+0x8c>
 8019eb2:	9b03      	ldr	r3, [sp, #12]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d0bf      	beq.n	8019e38 <_scanf_float+0x2e0>
 8019eb8:	9904      	ldr	r1, [sp, #16]
 8019eba:	230a      	movs	r3, #10
 8019ebc:	4632      	mov	r2, r6
 8019ebe:	3101      	adds	r1, #1
 8019ec0:	4638      	mov	r0, r7
 8019ec2:	f001 f82d 	bl	801af20 <_strtol_r>
 8019ec6:	9b03      	ldr	r3, [sp, #12]
 8019ec8:	9d04      	ldr	r5, [sp, #16]
 8019eca:	1ac2      	subs	r2, r0, r3
 8019ecc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019ed0:	429d      	cmp	r5, r3
 8019ed2:	bf28      	it	cs
 8019ed4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8019ed8:	490f      	ldr	r1, [pc, #60]	; (8019f18 <_scanf_float+0x3c0>)
 8019eda:	4628      	mov	r0, r5
 8019edc:	f000 f8d4 	bl	801a088 <siprintf>
 8019ee0:	e7aa      	b.n	8019e38 <_scanf_float+0x2e0>
 8019ee2:	f015 0504 	ands.w	r5, r5, #4
 8019ee6:	d1b8      	bne.n	8019e5a <_scanf_float+0x302>
 8019ee8:	681f      	ldr	r7, [r3, #0]
 8019eea:	ee10 2a10 	vmov	r2, s0
 8019eee:	464b      	mov	r3, r9
 8019ef0:	ee10 0a10 	vmov	r0, s0
 8019ef4:	4649      	mov	r1, r9
 8019ef6:	f7e6 fe39 	bl	8000b6c <__aeabi_dcmpun>
 8019efa:	b128      	cbz	r0, 8019f08 <_scanf_float+0x3b0>
 8019efc:	4628      	mov	r0, r5
 8019efe:	f000 f8bd 	bl	801a07c <nanf>
 8019f02:	ed87 0a00 	vstr	s0, [r7]
 8019f06:	e7ab      	b.n	8019e60 <_scanf_float+0x308>
 8019f08:	4640      	mov	r0, r8
 8019f0a:	4649      	mov	r1, r9
 8019f0c:	f7e6 fe8c 	bl	8000c28 <__aeabi_d2f>
 8019f10:	6038      	str	r0, [r7, #0]
 8019f12:	e7a5      	b.n	8019e60 <_scanf_float+0x308>
 8019f14:	2600      	movs	r6, #0
 8019f16:	e666      	b.n	8019be6 <_scanf_float+0x8e>
 8019f18:	08021bf0 	.word	0x08021bf0

08019f1c <iprintf>:
 8019f1c:	b40f      	push	{r0, r1, r2, r3}
 8019f1e:	4b0a      	ldr	r3, [pc, #40]	; (8019f48 <iprintf+0x2c>)
 8019f20:	b513      	push	{r0, r1, r4, lr}
 8019f22:	681c      	ldr	r4, [r3, #0]
 8019f24:	b124      	cbz	r4, 8019f30 <iprintf+0x14>
 8019f26:	69a3      	ldr	r3, [r4, #24]
 8019f28:	b913      	cbnz	r3, 8019f30 <iprintf+0x14>
 8019f2a:	4620      	mov	r0, r4
 8019f2c:	f002 f830 	bl	801bf90 <__sinit>
 8019f30:	ab05      	add	r3, sp, #20
 8019f32:	9a04      	ldr	r2, [sp, #16]
 8019f34:	68a1      	ldr	r1, [r4, #8]
 8019f36:	9301      	str	r3, [sp, #4]
 8019f38:	4620      	mov	r0, r4
 8019f3a:	f003 fc43 	bl	801d7c4 <_vfiprintf_r>
 8019f3e:	b002      	add	sp, #8
 8019f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f44:	b004      	add	sp, #16
 8019f46:	4770      	bx	lr
 8019f48:	20000020 	.word	0x20000020

08019f4c <_puts_r>:
 8019f4c:	b570      	push	{r4, r5, r6, lr}
 8019f4e:	460e      	mov	r6, r1
 8019f50:	4605      	mov	r5, r0
 8019f52:	b118      	cbz	r0, 8019f5c <_puts_r+0x10>
 8019f54:	6983      	ldr	r3, [r0, #24]
 8019f56:	b90b      	cbnz	r3, 8019f5c <_puts_r+0x10>
 8019f58:	f002 f81a 	bl	801bf90 <__sinit>
 8019f5c:	69ab      	ldr	r3, [r5, #24]
 8019f5e:	68ac      	ldr	r4, [r5, #8]
 8019f60:	b913      	cbnz	r3, 8019f68 <_puts_r+0x1c>
 8019f62:	4628      	mov	r0, r5
 8019f64:	f002 f814 	bl	801bf90 <__sinit>
 8019f68:	4b23      	ldr	r3, [pc, #140]	; (8019ff8 <_puts_r+0xac>)
 8019f6a:	429c      	cmp	r4, r3
 8019f6c:	d117      	bne.n	8019f9e <_puts_r+0x52>
 8019f6e:	686c      	ldr	r4, [r5, #4]
 8019f70:	89a3      	ldrh	r3, [r4, #12]
 8019f72:	071b      	lsls	r3, r3, #28
 8019f74:	d51d      	bpl.n	8019fb2 <_puts_r+0x66>
 8019f76:	6923      	ldr	r3, [r4, #16]
 8019f78:	b1db      	cbz	r3, 8019fb2 <_puts_r+0x66>
 8019f7a:	3e01      	subs	r6, #1
 8019f7c:	68a3      	ldr	r3, [r4, #8]
 8019f7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019f82:	3b01      	subs	r3, #1
 8019f84:	60a3      	str	r3, [r4, #8]
 8019f86:	b9e9      	cbnz	r1, 8019fc4 <_puts_r+0x78>
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	da2e      	bge.n	8019fea <_puts_r+0x9e>
 8019f8c:	4622      	mov	r2, r4
 8019f8e:	210a      	movs	r1, #10
 8019f90:	4628      	mov	r0, r5
 8019f92:	f000 ffd7 	bl	801af44 <__swbuf_r>
 8019f96:	3001      	adds	r0, #1
 8019f98:	d011      	beq.n	8019fbe <_puts_r+0x72>
 8019f9a:	200a      	movs	r0, #10
 8019f9c:	e011      	b.n	8019fc2 <_puts_r+0x76>
 8019f9e:	4b17      	ldr	r3, [pc, #92]	; (8019ffc <_puts_r+0xb0>)
 8019fa0:	429c      	cmp	r4, r3
 8019fa2:	d101      	bne.n	8019fa8 <_puts_r+0x5c>
 8019fa4:	68ac      	ldr	r4, [r5, #8]
 8019fa6:	e7e3      	b.n	8019f70 <_puts_r+0x24>
 8019fa8:	4b15      	ldr	r3, [pc, #84]	; (801a000 <_puts_r+0xb4>)
 8019faa:	429c      	cmp	r4, r3
 8019fac:	bf08      	it	eq
 8019fae:	68ec      	ldreq	r4, [r5, #12]
 8019fb0:	e7de      	b.n	8019f70 <_puts_r+0x24>
 8019fb2:	4621      	mov	r1, r4
 8019fb4:	4628      	mov	r0, r5
 8019fb6:	f001 f837 	bl	801b028 <__swsetup_r>
 8019fba:	2800      	cmp	r0, #0
 8019fbc:	d0dd      	beq.n	8019f7a <_puts_r+0x2e>
 8019fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8019fc2:	bd70      	pop	{r4, r5, r6, pc}
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	da04      	bge.n	8019fd2 <_puts_r+0x86>
 8019fc8:	69a2      	ldr	r2, [r4, #24]
 8019fca:	429a      	cmp	r2, r3
 8019fcc:	dc06      	bgt.n	8019fdc <_puts_r+0x90>
 8019fce:	290a      	cmp	r1, #10
 8019fd0:	d004      	beq.n	8019fdc <_puts_r+0x90>
 8019fd2:	6823      	ldr	r3, [r4, #0]
 8019fd4:	1c5a      	adds	r2, r3, #1
 8019fd6:	6022      	str	r2, [r4, #0]
 8019fd8:	7019      	strb	r1, [r3, #0]
 8019fda:	e7cf      	b.n	8019f7c <_puts_r+0x30>
 8019fdc:	4622      	mov	r2, r4
 8019fde:	4628      	mov	r0, r5
 8019fe0:	f000 ffb0 	bl	801af44 <__swbuf_r>
 8019fe4:	3001      	adds	r0, #1
 8019fe6:	d1c9      	bne.n	8019f7c <_puts_r+0x30>
 8019fe8:	e7e9      	b.n	8019fbe <_puts_r+0x72>
 8019fea:	6823      	ldr	r3, [r4, #0]
 8019fec:	200a      	movs	r0, #10
 8019fee:	1c5a      	adds	r2, r3, #1
 8019ff0:	6022      	str	r2, [r4, #0]
 8019ff2:	7018      	strb	r0, [r3, #0]
 8019ff4:	e7e5      	b.n	8019fc2 <_puts_r+0x76>
 8019ff6:	bf00      	nop
 8019ff8:	08021d78 	.word	0x08021d78
 8019ffc:	08021d98 	.word	0x08021d98
 801a000:	08021d58 	.word	0x08021d58

0801a004 <puts>:
 801a004:	4b02      	ldr	r3, [pc, #8]	; (801a010 <puts+0xc>)
 801a006:	4601      	mov	r1, r0
 801a008:	6818      	ldr	r0, [r3, #0]
 801a00a:	f7ff bf9f 	b.w	8019f4c <_puts_r>
 801a00e:	bf00      	nop
 801a010:	20000020 	.word	0x20000020

0801a014 <rand>:
 801a014:	b538      	push	{r3, r4, r5, lr}
 801a016:	4b13      	ldr	r3, [pc, #76]	; (801a064 <rand+0x50>)
 801a018:	681c      	ldr	r4, [r3, #0]
 801a01a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a01c:	b97b      	cbnz	r3, 801a03e <rand+0x2a>
 801a01e:	2018      	movs	r0, #24
 801a020:	f002 fbec 	bl	801c7fc <malloc>
 801a024:	4a10      	ldr	r2, [pc, #64]	; (801a068 <rand+0x54>)
 801a026:	4b11      	ldr	r3, [pc, #68]	; (801a06c <rand+0x58>)
 801a028:	63a0      	str	r0, [r4, #56]	; 0x38
 801a02a:	e9c0 2300 	strd	r2, r3, [r0]
 801a02e:	4b10      	ldr	r3, [pc, #64]	; (801a070 <rand+0x5c>)
 801a030:	6083      	str	r3, [r0, #8]
 801a032:	230b      	movs	r3, #11
 801a034:	8183      	strh	r3, [r0, #12]
 801a036:	2201      	movs	r2, #1
 801a038:	2300      	movs	r3, #0
 801a03a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a03e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a040:	480c      	ldr	r0, [pc, #48]	; (801a074 <rand+0x60>)
 801a042:	690a      	ldr	r2, [r1, #16]
 801a044:	694b      	ldr	r3, [r1, #20]
 801a046:	4c0c      	ldr	r4, [pc, #48]	; (801a078 <rand+0x64>)
 801a048:	4350      	muls	r0, r2
 801a04a:	fb04 0003 	mla	r0, r4, r3, r0
 801a04e:	fba2 2304 	umull	r2, r3, r2, r4
 801a052:	4403      	add	r3, r0
 801a054:	1c54      	adds	r4, r2, #1
 801a056:	f143 0500 	adc.w	r5, r3, #0
 801a05a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801a05e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801a062:	bd38      	pop	{r3, r4, r5, pc}
 801a064:	20000020 	.word	0x20000020
 801a068:	abcd330e 	.word	0xabcd330e
 801a06c:	e66d1234 	.word	0xe66d1234
 801a070:	0005deec 	.word	0x0005deec
 801a074:	5851f42d 	.word	0x5851f42d
 801a078:	4c957f2d 	.word	0x4c957f2d

0801a07c <nanf>:
 801a07c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a084 <nanf+0x8>
 801a080:	4770      	bx	lr
 801a082:	bf00      	nop
 801a084:	7fc00000 	.word	0x7fc00000

0801a088 <siprintf>:
 801a088:	b40e      	push	{r1, r2, r3}
 801a08a:	b500      	push	{lr}
 801a08c:	b09c      	sub	sp, #112	; 0x70
 801a08e:	ab1d      	add	r3, sp, #116	; 0x74
 801a090:	9002      	str	r0, [sp, #8]
 801a092:	9006      	str	r0, [sp, #24]
 801a094:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a098:	4809      	ldr	r0, [pc, #36]	; (801a0c0 <siprintf+0x38>)
 801a09a:	9107      	str	r1, [sp, #28]
 801a09c:	9104      	str	r1, [sp, #16]
 801a09e:	4909      	ldr	r1, [pc, #36]	; (801a0c4 <siprintf+0x3c>)
 801a0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0a4:	9105      	str	r1, [sp, #20]
 801a0a6:	6800      	ldr	r0, [r0, #0]
 801a0a8:	9301      	str	r3, [sp, #4]
 801a0aa:	a902      	add	r1, sp, #8
 801a0ac:	f003 f8be 	bl	801d22c <_svfiprintf_r>
 801a0b0:	9b02      	ldr	r3, [sp, #8]
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	701a      	strb	r2, [r3, #0]
 801a0b6:	b01c      	add	sp, #112	; 0x70
 801a0b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0bc:	b003      	add	sp, #12
 801a0be:	4770      	bx	lr
 801a0c0:	20000020 	.word	0x20000020
 801a0c4:	ffff0208 	.word	0xffff0208

0801a0c8 <siscanf>:
 801a0c8:	b40e      	push	{r1, r2, r3}
 801a0ca:	b530      	push	{r4, r5, lr}
 801a0cc:	b09c      	sub	sp, #112	; 0x70
 801a0ce:	ac1f      	add	r4, sp, #124	; 0x7c
 801a0d0:	f44f 7201 	mov.w	r2, #516	; 0x204
 801a0d4:	f854 5b04 	ldr.w	r5, [r4], #4
 801a0d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a0dc:	9002      	str	r0, [sp, #8]
 801a0de:	9006      	str	r0, [sp, #24]
 801a0e0:	f7e6 f896 	bl	8000210 <strlen>
 801a0e4:	4b0b      	ldr	r3, [pc, #44]	; (801a114 <siscanf+0x4c>)
 801a0e6:	9003      	str	r0, [sp, #12]
 801a0e8:	9007      	str	r0, [sp, #28]
 801a0ea:	930b      	str	r3, [sp, #44]	; 0x2c
 801a0ec:	480a      	ldr	r0, [pc, #40]	; (801a118 <siscanf+0x50>)
 801a0ee:	9401      	str	r4, [sp, #4]
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	930f      	str	r3, [sp, #60]	; 0x3c
 801a0f4:	9314      	str	r3, [sp, #80]	; 0x50
 801a0f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a0fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a0fe:	462a      	mov	r2, r5
 801a100:	4623      	mov	r3, r4
 801a102:	a902      	add	r1, sp, #8
 801a104:	6800      	ldr	r0, [r0, #0]
 801a106:	f003 f9e3 	bl	801d4d0 <__ssvfiscanf_r>
 801a10a:	b01c      	add	sp, #112	; 0x70
 801a10c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a110:	b003      	add	sp, #12
 801a112:	4770      	bx	lr
 801a114:	0801a13f 	.word	0x0801a13f
 801a118:	20000020 	.word	0x20000020

0801a11c <__sread>:
 801a11c:	b510      	push	{r4, lr}
 801a11e:	460c      	mov	r4, r1
 801a120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a124:	f003 fdbc 	bl	801dca0 <_read_r>
 801a128:	2800      	cmp	r0, #0
 801a12a:	bfab      	itete	ge
 801a12c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a12e:	89a3      	ldrhlt	r3, [r4, #12]
 801a130:	181b      	addge	r3, r3, r0
 801a132:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a136:	bfac      	ite	ge
 801a138:	6563      	strge	r3, [r4, #84]	; 0x54
 801a13a:	81a3      	strhlt	r3, [r4, #12]
 801a13c:	bd10      	pop	{r4, pc}

0801a13e <__seofread>:
 801a13e:	2000      	movs	r0, #0
 801a140:	4770      	bx	lr

0801a142 <__swrite>:
 801a142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a146:	461f      	mov	r7, r3
 801a148:	898b      	ldrh	r3, [r1, #12]
 801a14a:	05db      	lsls	r3, r3, #23
 801a14c:	4605      	mov	r5, r0
 801a14e:	460c      	mov	r4, r1
 801a150:	4616      	mov	r6, r2
 801a152:	d505      	bpl.n	801a160 <__swrite+0x1e>
 801a154:	2302      	movs	r3, #2
 801a156:	2200      	movs	r2, #0
 801a158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a15c:	f002 fad8 	bl	801c710 <_lseek_r>
 801a160:	89a3      	ldrh	r3, [r4, #12]
 801a162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a16a:	81a3      	strh	r3, [r4, #12]
 801a16c:	4632      	mov	r2, r6
 801a16e:	463b      	mov	r3, r7
 801a170:	4628      	mov	r0, r5
 801a172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a176:	f000 bf45 	b.w	801b004 <_write_r>

0801a17a <__sseek>:
 801a17a:	b510      	push	{r4, lr}
 801a17c:	460c      	mov	r4, r1
 801a17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a182:	f002 fac5 	bl	801c710 <_lseek_r>
 801a186:	1c43      	adds	r3, r0, #1
 801a188:	89a3      	ldrh	r3, [r4, #12]
 801a18a:	bf15      	itete	ne
 801a18c:	6560      	strne	r0, [r4, #84]	; 0x54
 801a18e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a196:	81a3      	strheq	r3, [r4, #12]
 801a198:	bf18      	it	ne
 801a19a:	81a3      	strhne	r3, [r4, #12]
 801a19c:	bd10      	pop	{r4, pc}

0801a19e <__sclose>:
 801a19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1a2:	f000 bfaf 	b.w	801b104 <_close_r>

0801a1a6 <strchr>:
 801a1a6:	b2c9      	uxtb	r1, r1
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1ae:	b11a      	cbz	r2, 801a1b8 <strchr+0x12>
 801a1b0:	428a      	cmp	r2, r1
 801a1b2:	d1f9      	bne.n	801a1a8 <strchr+0x2>
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	4770      	bx	lr
 801a1b8:	2900      	cmp	r1, #0
 801a1ba:	bf18      	it	ne
 801a1bc:	2300      	movne	r3, #0
 801a1be:	e7f9      	b.n	801a1b4 <strchr+0xe>

0801a1c0 <strncmp>:
 801a1c0:	b510      	push	{r4, lr}
 801a1c2:	b16a      	cbz	r2, 801a1e0 <strncmp+0x20>
 801a1c4:	3901      	subs	r1, #1
 801a1c6:	1884      	adds	r4, r0, r2
 801a1c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a1cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a1d0:	4293      	cmp	r3, r2
 801a1d2:	d103      	bne.n	801a1dc <strncmp+0x1c>
 801a1d4:	42a0      	cmp	r0, r4
 801a1d6:	d001      	beq.n	801a1dc <strncmp+0x1c>
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d1f5      	bne.n	801a1c8 <strncmp+0x8>
 801a1dc:	1a98      	subs	r0, r3, r2
 801a1de:	bd10      	pop	{r4, pc}
 801a1e0:	4610      	mov	r0, r2
 801a1e2:	e7fc      	b.n	801a1de <strncmp+0x1e>

0801a1e4 <sulp>:
 801a1e4:	b570      	push	{r4, r5, r6, lr}
 801a1e6:	4604      	mov	r4, r0
 801a1e8:	460d      	mov	r5, r1
 801a1ea:	ec45 4b10 	vmov	d0, r4, r5
 801a1ee:	4616      	mov	r6, r2
 801a1f0:	f002 fdd8 	bl	801cda4 <__ulp>
 801a1f4:	ec51 0b10 	vmov	r0, r1, d0
 801a1f8:	b17e      	cbz	r6, 801a21a <sulp+0x36>
 801a1fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a1fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a202:	2b00      	cmp	r3, #0
 801a204:	dd09      	ble.n	801a21a <sulp+0x36>
 801a206:	051b      	lsls	r3, r3, #20
 801a208:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a20c:	2400      	movs	r4, #0
 801a20e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a212:	4622      	mov	r2, r4
 801a214:	462b      	mov	r3, r5
 801a216:	f7e6 fa0f 	bl	8000638 <__aeabi_dmul>
 801a21a:	bd70      	pop	{r4, r5, r6, pc}
 801a21c:	0000      	movs	r0, r0
	...

0801a220 <_strtod_l>:
 801a220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a224:	461f      	mov	r7, r3
 801a226:	b0a1      	sub	sp, #132	; 0x84
 801a228:	2300      	movs	r3, #0
 801a22a:	4681      	mov	r9, r0
 801a22c:	4638      	mov	r0, r7
 801a22e:	460e      	mov	r6, r1
 801a230:	9217      	str	r2, [sp, #92]	; 0x5c
 801a232:	931c      	str	r3, [sp, #112]	; 0x70
 801a234:	f002 fa5c 	bl	801c6f0 <__localeconv_l>
 801a238:	4680      	mov	r8, r0
 801a23a:	6800      	ldr	r0, [r0, #0]
 801a23c:	f7e5 ffe8 	bl	8000210 <strlen>
 801a240:	f04f 0a00 	mov.w	sl, #0
 801a244:	4604      	mov	r4, r0
 801a246:	f04f 0b00 	mov.w	fp, #0
 801a24a:	961b      	str	r6, [sp, #108]	; 0x6c
 801a24c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a24e:	781a      	ldrb	r2, [r3, #0]
 801a250:	2a0d      	cmp	r2, #13
 801a252:	d832      	bhi.n	801a2ba <_strtod_l+0x9a>
 801a254:	2a09      	cmp	r2, #9
 801a256:	d236      	bcs.n	801a2c6 <_strtod_l+0xa6>
 801a258:	2a00      	cmp	r2, #0
 801a25a:	d03e      	beq.n	801a2da <_strtod_l+0xba>
 801a25c:	2300      	movs	r3, #0
 801a25e:	930d      	str	r3, [sp, #52]	; 0x34
 801a260:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801a262:	782b      	ldrb	r3, [r5, #0]
 801a264:	2b30      	cmp	r3, #48	; 0x30
 801a266:	f040 80ac 	bne.w	801a3c2 <_strtod_l+0x1a2>
 801a26a:	786b      	ldrb	r3, [r5, #1]
 801a26c:	2b58      	cmp	r3, #88	; 0x58
 801a26e:	d001      	beq.n	801a274 <_strtod_l+0x54>
 801a270:	2b78      	cmp	r3, #120	; 0x78
 801a272:	d167      	bne.n	801a344 <_strtod_l+0x124>
 801a274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a276:	9301      	str	r3, [sp, #4]
 801a278:	ab1c      	add	r3, sp, #112	; 0x70
 801a27a:	9300      	str	r3, [sp, #0]
 801a27c:	9702      	str	r7, [sp, #8]
 801a27e:	ab1d      	add	r3, sp, #116	; 0x74
 801a280:	4a88      	ldr	r2, [pc, #544]	; (801a4a4 <_strtod_l+0x284>)
 801a282:	a91b      	add	r1, sp, #108	; 0x6c
 801a284:	4648      	mov	r0, r9
 801a286:	f001 ff5c 	bl	801c142 <__gethex>
 801a28a:	f010 0407 	ands.w	r4, r0, #7
 801a28e:	4606      	mov	r6, r0
 801a290:	d005      	beq.n	801a29e <_strtod_l+0x7e>
 801a292:	2c06      	cmp	r4, #6
 801a294:	d12b      	bne.n	801a2ee <_strtod_l+0xce>
 801a296:	3501      	adds	r5, #1
 801a298:	2300      	movs	r3, #0
 801a29a:	951b      	str	r5, [sp, #108]	; 0x6c
 801a29c:	930d      	str	r3, [sp, #52]	; 0x34
 801a29e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	f040 859a 	bne.w	801adda <_strtod_l+0xbba>
 801a2a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2a8:	b1e3      	cbz	r3, 801a2e4 <_strtod_l+0xc4>
 801a2aa:	4652      	mov	r2, sl
 801a2ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a2b0:	ec43 2b10 	vmov	d0, r2, r3
 801a2b4:	b021      	add	sp, #132	; 0x84
 801a2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ba:	2a2b      	cmp	r2, #43	; 0x2b
 801a2bc:	d015      	beq.n	801a2ea <_strtod_l+0xca>
 801a2be:	2a2d      	cmp	r2, #45	; 0x2d
 801a2c0:	d004      	beq.n	801a2cc <_strtod_l+0xac>
 801a2c2:	2a20      	cmp	r2, #32
 801a2c4:	d1ca      	bne.n	801a25c <_strtod_l+0x3c>
 801a2c6:	3301      	adds	r3, #1
 801a2c8:	931b      	str	r3, [sp, #108]	; 0x6c
 801a2ca:	e7bf      	b.n	801a24c <_strtod_l+0x2c>
 801a2cc:	2201      	movs	r2, #1
 801a2ce:	920d      	str	r2, [sp, #52]	; 0x34
 801a2d0:	1c5a      	adds	r2, r3, #1
 801a2d2:	921b      	str	r2, [sp, #108]	; 0x6c
 801a2d4:	785b      	ldrb	r3, [r3, #1]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d1c2      	bne.n	801a260 <_strtod_l+0x40>
 801a2da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a2dc:	961b      	str	r6, [sp, #108]	; 0x6c
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	f040 8579 	bne.w	801add6 <_strtod_l+0xbb6>
 801a2e4:	4652      	mov	r2, sl
 801a2e6:	465b      	mov	r3, fp
 801a2e8:	e7e2      	b.n	801a2b0 <_strtod_l+0x90>
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	e7ef      	b.n	801a2ce <_strtod_l+0xae>
 801a2ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a2f0:	b13a      	cbz	r2, 801a302 <_strtod_l+0xe2>
 801a2f2:	2135      	movs	r1, #53	; 0x35
 801a2f4:	a81e      	add	r0, sp, #120	; 0x78
 801a2f6:	f002 fe4d 	bl	801cf94 <__copybits>
 801a2fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a2fc:	4648      	mov	r0, r9
 801a2fe:	f002 fab9 	bl	801c874 <_Bfree>
 801a302:	3c01      	subs	r4, #1
 801a304:	2c04      	cmp	r4, #4
 801a306:	d806      	bhi.n	801a316 <_strtod_l+0xf6>
 801a308:	e8df f004 	tbb	[pc, r4]
 801a30c:	1714030a 	.word	0x1714030a
 801a310:	0a          	.byte	0x0a
 801a311:	00          	.byte	0x00
 801a312:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801a316:	0730      	lsls	r0, r6, #28
 801a318:	d5c1      	bpl.n	801a29e <_strtod_l+0x7e>
 801a31a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a31e:	e7be      	b.n	801a29e <_strtod_l+0x7e>
 801a320:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801a324:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a326:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a32a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a32e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a332:	e7f0      	b.n	801a316 <_strtod_l+0xf6>
 801a334:	f8df b170 	ldr.w	fp, [pc, #368]	; 801a4a8 <_strtod_l+0x288>
 801a338:	e7ed      	b.n	801a316 <_strtod_l+0xf6>
 801a33a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a33e:	f04f 3aff 	mov.w	sl, #4294967295
 801a342:	e7e8      	b.n	801a316 <_strtod_l+0xf6>
 801a344:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a346:	1c5a      	adds	r2, r3, #1
 801a348:	921b      	str	r2, [sp, #108]	; 0x6c
 801a34a:	785b      	ldrb	r3, [r3, #1]
 801a34c:	2b30      	cmp	r3, #48	; 0x30
 801a34e:	d0f9      	beq.n	801a344 <_strtod_l+0x124>
 801a350:	2b00      	cmp	r3, #0
 801a352:	d0a4      	beq.n	801a29e <_strtod_l+0x7e>
 801a354:	2301      	movs	r3, #1
 801a356:	2500      	movs	r5, #0
 801a358:	9306      	str	r3, [sp, #24]
 801a35a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a35c:	9308      	str	r3, [sp, #32]
 801a35e:	9507      	str	r5, [sp, #28]
 801a360:	9505      	str	r5, [sp, #20]
 801a362:	220a      	movs	r2, #10
 801a364:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801a366:	7807      	ldrb	r7, [r0, #0]
 801a368:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801a36c:	b2d9      	uxtb	r1, r3
 801a36e:	2909      	cmp	r1, #9
 801a370:	d929      	bls.n	801a3c6 <_strtod_l+0x1a6>
 801a372:	4622      	mov	r2, r4
 801a374:	f8d8 1000 	ldr.w	r1, [r8]
 801a378:	f7ff ff22 	bl	801a1c0 <strncmp>
 801a37c:	2800      	cmp	r0, #0
 801a37e:	d031      	beq.n	801a3e4 <_strtod_l+0x1c4>
 801a380:	2000      	movs	r0, #0
 801a382:	9c05      	ldr	r4, [sp, #20]
 801a384:	9004      	str	r0, [sp, #16]
 801a386:	463b      	mov	r3, r7
 801a388:	4602      	mov	r2, r0
 801a38a:	2b65      	cmp	r3, #101	; 0x65
 801a38c:	d001      	beq.n	801a392 <_strtod_l+0x172>
 801a38e:	2b45      	cmp	r3, #69	; 0x45
 801a390:	d114      	bne.n	801a3bc <_strtod_l+0x19c>
 801a392:	b924      	cbnz	r4, 801a39e <_strtod_l+0x17e>
 801a394:	b910      	cbnz	r0, 801a39c <_strtod_l+0x17c>
 801a396:	9b06      	ldr	r3, [sp, #24]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d09e      	beq.n	801a2da <_strtod_l+0xba>
 801a39c:	2400      	movs	r4, #0
 801a39e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801a3a0:	1c73      	adds	r3, r6, #1
 801a3a2:	931b      	str	r3, [sp, #108]	; 0x6c
 801a3a4:	7873      	ldrb	r3, [r6, #1]
 801a3a6:	2b2b      	cmp	r3, #43	; 0x2b
 801a3a8:	d078      	beq.n	801a49c <_strtod_l+0x27c>
 801a3aa:	2b2d      	cmp	r3, #45	; 0x2d
 801a3ac:	d070      	beq.n	801a490 <_strtod_l+0x270>
 801a3ae:	f04f 0c00 	mov.w	ip, #0
 801a3b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801a3b6:	2f09      	cmp	r7, #9
 801a3b8:	d97c      	bls.n	801a4b4 <_strtod_l+0x294>
 801a3ba:	961b      	str	r6, [sp, #108]	; 0x6c
 801a3bc:	f04f 0e00 	mov.w	lr, #0
 801a3c0:	e09a      	b.n	801a4f8 <_strtod_l+0x2d8>
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	e7c7      	b.n	801a356 <_strtod_l+0x136>
 801a3c6:	9905      	ldr	r1, [sp, #20]
 801a3c8:	2908      	cmp	r1, #8
 801a3ca:	bfdd      	ittte	le
 801a3cc:	9907      	ldrle	r1, [sp, #28]
 801a3ce:	fb02 3301 	mlale	r3, r2, r1, r3
 801a3d2:	9307      	strle	r3, [sp, #28]
 801a3d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 801a3d8:	9b05      	ldr	r3, [sp, #20]
 801a3da:	3001      	adds	r0, #1
 801a3dc:	3301      	adds	r3, #1
 801a3de:	9305      	str	r3, [sp, #20]
 801a3e0:	901b      	str	r0, [sp, #108]	; 0x6c
 801a3e2:	e7bf      	b.n	801a364 <_strtod_l+0x144>
 801a3e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a3e6:	191a      	adds	r2, r3, r4
 801a3e8:	921b      	str	r2, [sp, #108]	; 0x6c
 801a3ea:	9a05      	ldr	r2, [sp, #20]
 801a3ec:	5d1b      	ldrb	r3, [r3, r4]
 801a3ee:	2a00      	cmp	r2, #0
 801a3f0:	d037      	beq.n	801a462 <_strtod_l+0x242>
 801a3f2:	9c05      	ldr	r4, [sp, #20]
 801a3f4:	4602      	mov	r2, r0
 801a3f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801a3fa:	2909      	cmp	r1, #9
 801a3fc:	d913      	bls.n	801a426 <_strtod_l+0x206>
 801a3fe:	2101      	movs	r1, #1
 801a400:	9104      	str	r1, [sp, #16]
 801a402:	e7c2      	b.n	801a38a <_strtod_l+0x16a>
 801a404:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a406:	1c5a      	adds	r2, r3, #1
 801a408:	921b      	str	r2, [sp, #108]	; 0x6c
 801a40a:	785b      	ldrb	r3, [r3, #1]
 801a40c:	3001      	adds	r0, #1
 801a40e:	2b30      	cmp	r3, #48	; 0x30
 801a410:	d0f8      	beq.n	801a404 <_strtod_l+0x1e4>
 801a412:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801a416:	2a08      	cmp	r2, #8
 801a418:	f200 84e4 	bhi.w	801ade4 <_strtod_l+0xbc4>
 801a41c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a41e:	9208      	str	r2, [sp, #32]
 801a420:	4602      	mov	r2, r0
 801a422:	2000      	movs	r0, #0
 801a424:	4604      	mov	r4, r0
 801a426:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801a42a:	f100 0101 	add.w	r1, r0, #1
 801a42e:	d012      	beq.n	801a456 <_strtod_l+0x236>
 801a430:	440a      	add	r2, r1
 801a432:	eb00 0c04 	add.w	ip, r0, r4
 801a436:	4621      	mov	r1, r4
 801a438:	270a      	movs	r7, #10
 801a43a:	458c      	cmp	ip, r1
 801a43c:	d113      	bne.n	801a466 <_strtod_l+0x246>
 801a43e:	1821      	adds	r1, r4, r0
 801a440:	2908      	cmp	r1, #8
 801a442:	f104 0401 	add.w	r4, r4, #1
 801a446:	4404      	add	r4, r0
 801a448:	dc19      	bgt.n	801a47e <_strtod_l+0x25e>
 801a44a:	9b07      	ldr	r3, [sp, #28]
 801a44c:	210a      	movs	r1, #10
 801a44e:	fb01 e303 	mla	r3, r1, r3, lr
 801a452:	9307      	str	r3, [sp, #28]
 801a454:	2100      	movs	r1, #0
 801a456:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a458:	1c58      	adds	r0, r3, #1
 801a45a:	901b      	str	r0, [sp, #108]	; 0x6c
 801a45c:	785b      	ldrb	r3, [r3, #1]
 801a45e:	4608      	mov	r0, r1
 801a460:	e7c9      	b.n	801a3f6 <_strtod_l+0x1d6>
 801a462:	9805      	ldr	r0, [sp, #20]
 801a464:	e7d3      	b.n	801a40e <_strtod_l+0x1ee>
 801a466:	2908      	cmp	r1, #8
 801a468:	f101 0101 	add.w	r1, r1, #1
 801a46c:	dc03      	bgt.n	801a476 <_strtod_l+0x256>
 801a46e:	9b07      	ldr	r3, [sp, #28]
 801a470:	437b      	muls	r3, r7
 801a472:	9307      	str	r3, [sp, #28]
 801a474:	e7e1      	b.n	801a43a <_strtod_l+0x21a>
 801a476:	2910      	cmp	r1, #16
 801a478:	bfd8      	it	le
 801a47a:	437d      	mulle	r5, r7
 801a47c:	e7dd      	b.n	801a43a <_strtod_l+0x21a>
 801a47e:	2c10      	cmp	r4, #16
 801a480:	bfdc      	itt	le
 801a482:	210a      	movle	r1, #10
 801a484:	fb01 e505 	mlale	r5, r1, r5, lr
 801a488:	e7e4      	b.n	801a454 <_strtod_l+0x234>
 801a48a:	2301      	movs	r3, #1
 801a48c:	9304      	str	r3, [sp, #16]
 801a48e:	e781      	b.n	801a394 <_strtod_l+0x174>
 801a490:	f04f 0c01 	mov.w	ip, #1
 801a494:	1cb3      	adds	r3, r6, #2
 801a496:	931b      	str	r3, [sp, #108]	; 0x6c
 801a498:	78b3      	ldrb	r3, [r6, #2]
 801a49a:	e78a      	b.n	801a3b2 <_strtod_l+0x192>
 801a49c:	f04f 0c00 	mov.w	ip, #0
 801a4a0:	e7f8      	b.n	801a494 <_strtod_l+0x274>
 801a4a2:	bf00      	nop
 801a4a4:	08021bf8 	.word	0x08021bf8
 801a4a8:	7ff00000 	.word	0x7ff00000
 801a4ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a4ae:	1c5f      	adds	r7, r3, #1
 801a4b0:	971b      	str	r7, [sp, #108]	; 0x6c
 801a4b2:	785b      	ldrb	r3, [r3, #1]
 801a4b4:	2b30      	cmp	r3, #48	; 0x30
 801a4b6:	d0f9      	beq.n	801a4ac <_strtod_l+0x28c>
 801a4b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801a4bc:	2f08      	cmp	r7, #8
 801a4be:	f63f af7d 	bhi.w	801a3bc <_strtod_l+0x19c>
 801a4c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801a4c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a4c8:	930a      	str	r3, [sp, #40]	; 0x28
 801a4ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a4cc:	1c5f      	adds	r7, r3, #1
 801a4ce:	971b      	str	r7, [sp, #108]	; 0x6c
 801a4d0:	785b      	ldrb	r3, [r3, #1]
 801a4d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801a4d6:	f1b8 0f09 	cmp.w	r8, #9
 801a4da:	d937      	bls.n	801a54c <_strtod_l+0x32c>
 801a4dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a4de:	1a7f      	subs	r7, r7, r1
 801a4e0:	2f08      	cmp	r7, #8
 801a4e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801a4e6:	dc37      	bgt.n	801a558 <_strtod_l+0x338>
 801a4e8:	45be      	cmp	lr, r7
 801a4ea:	bfa8      	it	ge
 801a4ec:	46be      	movge	lr, r7
 801a4ee:	f1bc 0f00 	cmp.w	ip, #0
 801a4f2:	d001      	beq.n	801a4f8 <_strtod_l+0x2d8>
 801a4f4:	f1ce 0e00 	rsb	lr, lr, #0
 801a4f8:	2c00      	cmp	r4, #0
 801a4fa:	d151      	bne.n	801a5a0 <_strtod_l+0x380>
 801a4fc:	2800      	cmp	r0, #0
 801a4fe:	f47f aece 	bne.w	801a29e <_strtod_l+0x7e>
 801a502:	9a06      	ldr	r2, [sp, #24]
 801a504:	2a00      	cmp	r2, #0
 801a506:	f47f aeca 	bne.w	801a29e <_strtod_l+0x7e>
 801a50a:	9a04      	ldr	r2, [sp, #16]
 801a50c:	2a00      	cmp	r2, #0
 801a50e:	f47f aee4 	bne.w	801a2da <_strtod_l+0xba>
 801a512:	2b4e      	cmp	r3, #78	; 0x4e
 801a514:	d027      	beq.n	801a566 <_strtod_l+0x346>
 801a516:	dc21      	bgt.n	801a55c <_strtod_l+0x33c>
 801a518:	2b49      	cmp	r3, #73	; 0x49
 801a51a:	f47f aede 	bne.w	801a2da <_strtod_l+0xba>
 801a51e:	49a0      	ldr	r1, [pc, #640]	; (801a7a0 <_strtod_l+0x580>)
 801a520:	a81b      	add	r0, sp, #108	; 0x6c
 801a522:	f002 f841 	bl	801c5a8 <__match>
 801a526:	2800      	cmp	r0, #0
 801a528:	f43f aed7 	beq.w	801a2da <_strtod_l+0xba>
 801a52c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a52e:	499d      	ldr	r1, [pc, #628]	; (801a7a4 <_strtod_l+0x584>)
 801a530:	3b01      	subs	r3, #1
 801a532:	a81b      	add	r0, sp, #108	; 0x6c
 801a534:	931b      	str	r3, [sp, #108]	; 0x6c
 801a536:	f002 f837 	bl	801c5a8 <__match>
 801a53a:	b910      	cbnz	r0, 801a542 <_strtod_l+0x322>
 801a53c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a53e:	3301      	adds	r3, #1
 801a540:	931b      	str	r3, [sp, #108]	; 0x6c
 801a542:	f8df b274 	ldr.w	fp, [pc, #628]	; 801a7b8 <_strtod_l+0x598>
 801a546:	f04f 0a00 	mov.w	sl, #0
 801a54a:	e6a8      	b.n	801a29e <_strtod_l+0x7e>
 801a54c:	210a      	movs	r1, #10
 801a54e:	fb01 3e0e 	mla	lr, r1, lr, r3
 801a552:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a556:	e7b8      	b.n	801a4ca <_strtod_l+0x2aa>
 801a558:	46be      	mov	lr, r7
 801a55a:	e7c8      	b.n	801a4ee <_strtod_l+0x2ce>
 801a55c:	2b69      	cmp	r3, #105	; 0x69
 801a55e:	d0de      	beq.n	801a51e <_strtod_l+0x2fe>
 801a560:	2b6e      	cmp	r3, #110	; 0x6e
 801a562:	f47f aeba 	bne.w	801a2da <_strtod_l+0xba>
 801a566:	4990      	ldr	r1, [pc, #576]	; (801a7a8 <_strtod_l+0x588>)
 801a568:	a81b      	add	r0, sp, #108	; 0x6c
 801a56a:	f002 f81d 	bl	801c5a8 <__match>
 801a56e:	2800      	cmp	r0, #0
 801a570:	f43f aeb3 	beq.w	801a2da <_strtod_l+0xba>
 801a574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a576:	781b      	ldrb	r3, [r3, #0]
 801a578:	2b28      	cmp	r3, #40	; 0x28
 801a57a:	d10e      	bne.n	801a59a <_strtod_l+0x37a>
 801a57c:	aa1e      	add	r2, sp, #120	; 0x78
 801a57e:	498b      	ldr	r1, [pc, #556]	; (801a7ac <_strtod_l+0x58c>)
 801a580:	a81b      	add	r0, sp, #108	; 0x6c
 801a582:	f002 f825 	bl	801c5d0 <__hexnan>
 801a586:	2805      	cmp	r0, #5
 801a588:	d107      	bne.n	801a59a <_strtod_l+0x37a>
 801a58a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801a58c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 801a590:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a594:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a598:	e681      	b.n	801a29e <_strtod_l+0x7e>
 801a59a:	f8df b224 	ldr.w	fp, [pc, #548]	; 801a7c0 <_strtod_l+0x5a0>
 801a59e:	e7d2      	b.n	801a546 <_strtod_l+0x326>
 801a5a0:	ebae 0302 	sub.w	r3, lr, r2
 801a5a4:	9306      	str	r3, [sp, #24]
 801a5a6:	9b05      	ldr	r3, [sp, #20]
 801a5a8:	9807      	ldr	r0, [sp, #28]
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	bf08      	it	eq
 801a5ae:	4623      	moveq	r3, r4
 801a5b0:	2c10      	cmp	r4, #16
 801a5b2:	9305      	str	r3, [sp, #20]
 801a5b4:	46a0      	mov	r8, r4
 801a5b6:	bfa8      	it	ge
 801a5b8:	f04f 0810 	movge.w	r8, #16
 801a5bc:	f7e5 ffc2 	bl	8000544 <__aeabi_ui2d>
 801a5c0:	2c09      	cmp	r4, #9
 801a5c2:	4682      	mov	sl, r0
 801a5c4:	468b      	mov	fp, r1
 801a5c6:	dc13      	bgt.n	801a5f0 <_strtod_l+0x3d0>
 801a5c8:	9b06      	ldr	r3, [sp, #24]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	f43f ae67 	beq.w	801a29e <_strtod_l+0x7e>
 801a5d0:	9b06      	ldr	r3, [sp, #24]
 801a5d2:	dd7a      	ble.n	801a6ca <_strtod_l+0x4aa>
 801a5d4:	2b16      	cmp	r3, #22
 801a5d6:	dc61      	bgt.n	801a69c <_strtod_l+0x47c>
 801a5d8:	4a75      	ldr	r2, [pc, #468]	; (801a7b0 <_strtod_l+0x590>)
 801a5da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801a5de:	e9de 0100 	ldrd	r0, r1, [lr]
 801a5e2:	4652      	mov	r2, sl
 801a5e4:	465b      	mov	r3, fp
 801a5e6:	f7e6 f827 	bl	8000638 <__aeabi_dmul>
 801a5ea:	4682      	mov	sl, r0
 801a5ec:	468b      	mov	fp, r1
 801a5ee:	e656      	b.n	801a29e <_strtod_l+0x7e>
 801a5f0:	4b6f      	ldr	r3, [pc, #444]	; (801a7b0 <_strtod_l+0x590>)
 801a5f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a5f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a5fa:	f7e6 f81d 	bl	8000638 <__aeabi_dmul>
 801a5fe:	4606      	mov	r6, r0
 801a600:	4628      	mov	r0, r5
 801a602:	460f      	mov	r7, r1
 801a604:	f7e5 ff9e 	bl	8000544 <__aeabi_ui2d>
 801a608:	4602      	mov	r2, r0
 801a60a:	460b      	mov	r3, r1
 801a60c:	4630      	mov	r0, r6
 801a60e:	4639      	mov	r1, r7
 801a610:	f7e5 fe5c 	bl	80002cc <__adddf3>
 801a614:	2c0f      	cmp	r4, #15
 801a616:	4682      	mov	sl, r0
 801a618:	468b      	mov	fp, r1
 801a61a:	ddd5      	ble.n	801a5c8 <_strtod_l+0x3a8>
 801a61c:	9b06      	ldr	r3, [sp, #24]
 801a61e:	eba4 0808 	sub.w	r8, r4, r8
 801a622:	4498      	add	r8, r3
 801a624:	f1b8 0f00 	cmp.w	r8, #0
 801a628:	f340 8096 	ble.w	801a758 <_strtod_l+0x538>
 801a62c:	f018 030f 	ands.w	r3, r8, #15
 801a630:	d00a      	beq.n	801a648 <_strtod_l+0x428>
 801a632:	495f      	ldr	r1, [pc, #380]	; (801a7b0 <_strtod_l+0x590>)
 801a634:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a638:	4652      	mov	r2, sl
 801a63a:	465b      	mov	r3, fp
 801a63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a640:	f7e5 fffa 	bl	8000638 <__aeabi_dmul>
 801a644:	4682      	mov	sl, r0
 801a646:	468b      	mov	fp, r1
 801a648:	f038 080f 	bics.w	r8, r8, #15
 801a64c:	d073      	beq.n	801a736 <_strtod_l+0x516>
 801a64e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a652:	dd47      	ble.n	801a6e4 <_strtod_l+0x4c4>
 801a654:	2400      	movs	r4, #0
 801a656:	46a0      	mov	r8, r4
 801a658:	9407      	str	r4, [sp, #28]
 801a65a:	9405      	str	r4, [sp, #20]
 801a65c:	2322      	movs	r3, #34	; 0x22
 801a65e:	f8df b158 	ldr.w	fp, [pc, #344]	; 801a7b8 <_strtod_l+0x598>
 801a662:	f8c9 3000 	str.w	r3, [r9]
 801a666:	f04f 0a00 	mov.w	sl, #0
 801a66a:	9b07      	ldr	r3, [sp, #28]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	f43f ae16 	beq.w	801a29e <_strtod_l+0x7e>
 801a672:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a674:	4648      	mov	r0, r9
 801a676:	f002 f8fd 	bl	801c874 <_Bfree>
 801a67a:	9905      	ldr	r1, [sp, #20]
 801a67c:	4648      	mov	r0, r9
 801a67e:	f002 f8f9 	bl	801c874 <_Bfree>
 801a682:	4641      	mov	r1, r8
 801a684:	4648      	mov	r0, r9
 801a686:	f002 f8f5 	bl	801c874 <_Bfree>
 801a68a:	9907      	ldr	r1, [sp, #28]
 801a68c:	4648      	mov	r0, r9
 801a68e:	f002 f8f1 	bl	801c874 <_Bfree>
 801a692:	4621      	mov	r1, r4
 801a694:	4648      	mov	r0, r9
 801a696:	f002 f8ed 	bl	801c874 <_Bfree>
 801a69a:	e600      	b.n	801a29e <_strtod_l+0x7e>
 801a69c:	9a06      	ldr	r2, [sp, #24]
 801a69e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801a6a2:	4293      	cmp	r3, r2
 801a6a4:	dbba      	blt.n	801a61c <_strtod_l+0x3fc>
 801a6a6:	4d42      	ldr	r5, [pc, #264]	; (801a7b0 <_strtod_l+0x590>)
 801a6a8:	f1c4 040f 	rsb	r4, r4, #15
 801a6ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801a6b0:	4652      	mov	r2, sl
 801a6b2:	465b      	mov	r3, fp
 801a6b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a6b8:	f7e5 ffbe 	bl	8000638 <__aeabi_dmul>
 801a6bc:	9b06      	ldr	r3, [sp, #24]
 801a6be:	1b1c      	subs	r4, r3, r4
 801a6c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801a6c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a6c8:	e78d      	b.n	801a5e6 <_strtod_l+0x3c6>
 801a6ca:	f113 0f16 	cmn.w	r3, #22
 801a6ce:	dba5      	blt.n	801a61c <_strtod_l+0x3fc>
 801a6d0:	4a37      	ldr	r2, [pc, #220]	; (801a7b0 <_strtod_l+0x590>)
 801a6d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801a6d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 801a6da:	4650      	mov	r0, sl
 801a6dc:	4659      	mov	r1, fp
 801a6de:	f7e6 f8d5 	bl	800088c <__aeabi_ddiv>
 801a6e2:	e782      	b.n	801a5ea <_strtod_l+0x3ca>
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	4e33      	ldr	r6, [pc, #204]	; (801a7b4 <_strtod_l+0x594>)
 801a6e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a6ec:	4650      	mov	r0, sl
 801a6ee:	4659      	mov	r1, fp
 801a6f0:	461d      	mov	r5, r3
 801a6f2:	f1b8 0f01 	cmp.w	r8, #1
 801a6f6:	dc21      	bgt.n	801a73c <_strtod_l+0x51c>
 801a6f8:	b10b      	cbz	r3, 801a6fe <_strtod_l+0x4de>
 801a6fa:	4682      	mov	sl, r0
 801a6fc:	468b      	mov	fp, r1
 801a6fe:	4b2d      	ldr	r3, [pc, #180]	; (801a7b4 <_strtod_l+0x594>)
 801a700:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a704:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801a708:	4652      	mov	r2, sl
 801a70a:	465b      	mov	r3, fp
 801a70c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a710:	f7e5 ff92 	bl	8000638 <__aeabi_dmul>
 801a714:	4b28      	ldr	r3, [pc, #160]	; (801a7b8 <_strtod_l+0x598>)
 801a716:	460a      	mov	r2, r1
 801a718:	400b      	ands	r3, r1
 801a71a:	4928      	ldr	r1, [pc, #160]	; (801a7bc <_strtod_l+0x59c>)
 801a71c:	428b      	cmp	r3, r1
 801a71e:	4682      	mov	sl, r0
 801a720:	d898      	bhi.n	801a654 <_strtod_l+0x434>
 801a722:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a726:	428b      	cmp	r3, r1
 801a728:	bf86      	itte	hi
 801a72a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a7c4 <_strtod_l+0x5a4>
 801a72e:	f04f 3aff 	movhi.w	sl, #4294967295
 801a732:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a736:	2300      	movs	r3, #0
 801a738:	9304      	str	r3, [sp, #16]
 801a73a:	e077      	b.n	801a82c <_strtod_l+0x60c>
 801a73c:	f018 0f01 	tst.w	r8, #1
 801a740:	d006      	beq.n	801a750 <_strtod_l+0x530>
 801a742:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a74a:	f7e5 ff75 	bl	8000638 <__aeabi_dmul>
 801a74e:	2301      	movs	r3, #1
 801a750:	3501      	adds	r5, #1
 801a752:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a756:	e7cc      	b.n	801a6f2 <_strtod_l+0x4d2>
 801a758:	d0ed      	beq.n	801a736 <_strtod_l+0x516>
 801a75a:	f1c8 0800 	rsb	r8, r8, #0
 801a75e:	f018 020f 	ands.w	r2, r8, #15
 801a762:	d00a      	beq.n	801a77a <_strtod_l+0x55a>
 801a764:	4b12      	ldr	r3, [pc, #72]	; (801a7b0 <_strtod_l+0x590>)
 801a766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a76a:	4650      	mov	r0, sl
 801a76c:	4659      	mov	r1, fp
 801a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a772:	f7e6 f88b 	bl	800088c <__aeabi_ddiv>
 801a776:	4682      	mov	sl, r0
 801a778:	468b      	mov	fp, r1
 801a77a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a77e:	d0da      	beq.n	801a736 <_strtod_l+0x516>
 801a780:	f1b8 0f1f 	cmp.w	r8, #31
 801a784:	dd20      	ble.n	801a7c8 <_strtod_l+0x5a8>
 801a786:	2400      	movs	r4, #0
 801a788:	46a0      	mov	r8, r4
 801a78a:	9407      	str	r4, [sp, #28]
 801a78c:	9405      	str	r4, [sp, #20]
 801a78e:	2322      	movs	r3, #34	; 0x22
 801a790:	f04f 0a00 	mov.w	sl, #0
 801a794:	f04f 0b00 	mov.w	fp, #0
 801a798:	f8c9 3000 	str.w	r3, [r9]
 801a79c:	e765      	b.n	801a66a <_strtod_l+0x44a>
 801a79e:	bf00      	nop
 801a7a0:	08021bc3 	.word	0x08021bc3
 801a7a4:	08021d4c 	.word	0x08021d4c
 801a7a8:	08021bcb 	.word	0x08021bcb
 801a7ac:	08021c0c 	.word	0x08021c0c
 801a7b0:	08021de0 	.word	0x08021de0
 801a7b4:	08021db8 	.word	0x08021db8
 801a7b8:	7ff00000 	.word	0x7ff00000
 801a7bc:	7ca00000 	.word	0x7ca00000
 801a7c0:	fff80000 	.word	0xfff80000
 801a7c4:	7fefffff 	.word	0x7fefffff
 801a7c8:	f018 0310 	ands.w	r3, r8, #16
 801a7cc:	bf18      	it	ne
 801a7ce:	236a      	movne	r3, #106	; 0x6a
 801a7d0:	4da0      	ldr	r5, [pc, #640]	; (801aa54 <_strtod_l+0x834>)
 801a7d2:	9304      	str	r3, [sp, #16]
 801a7d4:	4650      	mov	r0, sl
 801a7d6:	4659      	mov	r1, fp
 801a7d8:	2300      	movs	r3, #0
 801a7da:	f1b8 0f00 	cmp.w	r8, #0
 801a7de:	f300 810a 	bgt.w	801a9f6 <_strtod_l+0x7d6>
 801a7e2:	b10b      	cbz	r3, 801a7e8 <_strtod_l+0x5c8>
 801a7e4:	4682      	mov	sl, r0
 801a7e6:	468b      	mov	fp, r1
 801a7e8:	9b04      	ldr	r3, [sp, #16]
 801a7ea:	b1bb      	cbz	r3, 801a81c <_strtod_l+0x5fc>
 801a7ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a7f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	4659      	mov	r1, fp
 801a7f8:	dd10      	ble.n	801a81c <_strtod_l+0x5fc>
 801a7fa:	2b1f      	cmp	r3, #31
 801a7fc:	f340 8107 	ble.w	801aa0e <_strtod_l+0x7ee>
 801a800:	2b34      	cmp	r3, #52	; 0x34
 801a802:	bfde      	ittt	le
 801a804:	3b20      	suble	r3, #32
 801a806:	f04f 32ff 	movle.w	r2, #4294967295
 801a80a:	fa02 f303 	lslle.w	r3, r2, r3
 801a80e:	f04f 0a00 	mov.w	sl, #0
 801a812:	bfcc      	ite	gt
 801a814:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a818:	ea03 0b01 	andle.w	fp, r3, r1
 801a81c:	2200      	movs	r2, #0
 801a81e:	2300      	movs	r3, #0
 801a820:	4650      	mov	r0, sl
 801a822:	4659      	mov	r1, fp
 801a824:	f7e6 f970 	bl	8000b08 <__aeabi_dcmpeq>
 801a828:	2800      	cmp	r0, #0
 801a82a:	d1ac      	bne.n	801a786 <_strtod_l+0x566>
 801a82c:	9b07      	ldr	r3, [sp, #28]
 801a82e:	9300      	str	r3, [sp, #0]
 801a830:	9a05      	ldr	r2, [sp, #20]
 801a832:	9908      	ldr	r1, [sp, #32]
 801a834:	4623      	mov	r3, r4
 801a836:	4648      	mov	r0, r9
 801a838:	f002 f86e 	bl	801c918 <__s2b>
 801a83c:	9007      	str	r0, [sp, #28]
 801a83e:	2800      	cmp	r0, #0
 801a840:	f43f af08 	beq.w	801a654 <_strtod_l+0x434>
 801a844:	9a06      	ldr	r2, [sp, #24]
 801a846:	9b06      	ldr	r3, [sp, #24]
 801a848:	2a00      	cmp	r2, #0
 801a84a:	f1c3 0300 	rsb	r3, r3, #0
 801a84e:	bfa8      	it	ge
 801a850:	2300      	movge	r3, #0
 801a852:	930e      	str	r3, [sp, #56]	; 0x38
 801a854:	2400      	movs	r4, #0
 801a856:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a85a:	9316      	str	r3, [sp, #88]	; 0x58
 801a85c:	46a0      	mov	r8, r4
 801a85e:	9b07      	ldr	r3, [sp, #28]
 801a860:	4648      	mov	r0, r9
 801a862:	6859      	ldr	r1, [r3, #4]
 801a864:	f001 ffd2 	bl	801c80c <_Balloc>
 801a868:	9005      	str	r0, [sp, #20]
 801a86a:	2800      	cmp	r0, #0
 801a86c:	f43f aef6 	beq.w	801a65c <_strtod_l+0x43c>
 801a870:	9b07      	ldr	r3, [sp, #28]
 801a872:	691a      	ldr	r2, [r3, #16]
 801a874:	3202      	adds	r2, #2
 801a876:	f103 010c 	add.w	r1, r3, #12
 801a87a:	0092      	lsls	r2, r2, #2
 801a87c:	300c      	adds	r0, #12
 801a87e:	f7fe fce2 	bl	8019246 <memcpy>
 801a882:	aa1e      	add	r2, sp, #120	; 0x78
 801a884:	a91d      	add	r1, sp, #116	; 0x74
 801a886:	ec4b ab10 	vmov	d0, sl, fp
 801a88a:	4648      	mov	r0, r9
 801a88c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a890:	f002 fafe 	bl	801ce90 <__d2b>
 801a894:	901c      	str	r0, [sp, #112]	; 0x70
 801a896:	2800      	cmp	r0, #0
 801a898:	f43f aee0 	beq.w	801a65c <_strtod_l+0x43c>
 801a89c:	2101      	movs	r1, #1
 801a89e:	4648      	mov	r0, r9
 801a8a0:	f002 f8c6 	bl	801ca30 <__i2b>
 801a8a4:	4680      	mov	r8, r0
 801a8a6:	2800      	cmp	r0, #0
 801a8a8:	f43f aed8 	beq.w	801a65c <_strtod_l+0x43c>
 801a8ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a8ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a8b0:	2e00      	cmp	r6, #0
 801a8b2:	bfab      	itete	ge
 801a8b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801a8b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801a8b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801a8ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801a8bc:	bfac      	ite	ge
 801a8be:	18f7      	addge	r7, r6, r3
 801a8c0:	1b9d      	sublt	r5, r3, r6
 801a8c2:	9b04      	ldr	r3, [sp, #16]
 801a8c4:	1af6      	subs	r6, r6, r3
 801a8c6:	4416      	add	r6, r2
 801a8c8:	4b63      	ldr	r3, [pc, #396]	; (801aa58 <_strtod_l+0x838>)
 801a8ca:	3e01      	subs	r6, #1
 801a8cc:	429e      	cmp	r6, r3
 801a8ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a8d2:	f280 80af 	bge.w	801aa34 <_strtod_l+0x814>
 801a8d6:	1b9b      	subs	r3, r3, r6
 801a8d8:	2b1f      	cmp	r3, #31
 801a8da:	eba2 0203 	sub.w	r2, r2, r3
 801a8de:	f04f 0101 	mov.w	r1, #1
 801a8e2:	f300 809b 	bgt.w	801aa1c <_strtod_l+0x7fc>
 801a8e6:	fa01 f303 	lsl.w	r3, r1, r3
 801a8ea:	930f      	str	r3, [sp, #60]	; 0x3c
 801a8ec:	2300      	movs	r3, #0
 801a8ee:	930a      	str	r3, [sp, #40]	; 0x28
 801a8f0:	18be      	adds	r6, r7, r2
 801a8f2:	9b04      	ldr	r3, [sp, #16]
 801a8f4:	42b7      	cmp	r7, r6
 801a8f6:	4415      	add	r5, r2
 801a8f8:	441d      	add	r5, r3
 801a8fa:	463b      	mov	r3, r7
 801a8fc:	bfa8      	it	ge
 801a8fe:	4633      	movge	r3, r6
 801a900:	42ab      	cmp	r3, r5
 801a902:	bfa8      	it	ge
 801a904:	462b      	movge	r3, r5
 801a906:	2b00      	cmp	r3, #0
 801a908:	bfc2      	ittt	gt
 801a90a:	1af6      	subgt	r6, r6, r3
 801a90c:	1aed      	subgt	r5, r5, r3
 801a90e:	1aff      	subgt	r7, r7, r3
 801a910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a912:	b1bb      	cbz	r3, 801a944 <_strtod_l+0x724>
 801a914:	4641      	mov	r1, r8
 801a916:	461a      	mov	r2, r3
 801a918:	4648      	mov	r0, r9
 801a91a:	f002 f929 	bl	801cb70 <__pow5mult>
 801a91e:	4680      	mov	r8, r0
 801a920:	2800      	cmp	r0, #0
 801a922:	f43f ae9b 	beq.w	801a65c <_strtod_l+0x43c>
 801a926:	4601      	mov	r1, r0
 801a928:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a92a:	4648      	mov	r0, r9
 801a92c:	f002 f889 	bl	801ca42 <__multiply>
 801a930:	900c      	str	r0, [sp, #48]	; 0x30
 801a932:	2800      	cmp	r0, #0
 801a934:	f43f ae92 	beq.w	801a65c <_strtod_l+0x43c>
 801a938:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a93a:	4648      	mov	r0, r9
 801a93c:	f001 ff9a 	bl	801c874 <_Bfree>
 801a940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a942:	931c      	str	r3, [sp, #112]	; 0x70
 801a944:	2e00      	cmp	r6, #0
 801a946:	dc7a      	bgt.n	801aa3e <_strtod_l+0x81e>
 801a948:	9b06      	ldr	r3, [sp, #24]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	dd08      	ble.n	801a960 <_strtod_l+0x740>
 801a94e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a950:	9905      	ldr	r1, [sp, #20]
 801a952:	4648      	mov	r0, r9
 801a954:	f002 f90c 	bl	801cb70 <__pow5mult>
 801a958:	9005      	str	r0, [sp, #20]
 801a95a:	2800      	cmp	r0, #0
 801a95c:	f43f ae7e 	beq.w	801a65c <_strtod_l+0x43c>
 801a960:	2d00      	cmp	r5, #0
 801a962:	dd08      	ble.n	801a976 <_strtod_l+0x756>
 801a964:	462a      	mov	r2, r5
 801a966:	9905      	ldr	r1, [sp, #20]
 801a968:	4648      	mov	r0, r9
 801a96a:	f002 f94f 	bl	801cc0c <__lshift>
 801a96e:	9005      	str	r0, [sp, #20]
 801a970:	2800      	cmp	r0, #0
 801a972:	f43f ae73 	beq.w	801a65c <_strtod_l+0x43c>
 801a976:	2f00      	cmp	r7, #0
 801a978:	dd08      	ble.n	801a98c <_strtod_l+0x76c>
 801a97a:	4641      	mov	r1, r8
 801a97c:	463a      	mov	r2, r7
 801a97e:	4648      	mov	r0, r9
 801a980:	f002 f944 	bl	801cc0c <__lshift>
 801a984:	4680      	mov	r8, r0
 801a986:	2800      	cmp	r0, #0
 801a988:	f43f ae68 	beq.w	801a65c <_strtod_l+0x43c>
 801a98c:	9a05      	ldr	r2, [sp, #20]
 801a98e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a990:	4648      	mov	r0, r9
 801a992:	f002 f9a9 	bl	801cce8 <__mdiff>
 801a996:	4604      	mov	r4, r0
 801a998:	2800      	cmp	r0, #0
 801a99a:	f43f ae5f 	beq.w	801a65c <_strtod_l+0x43c>
 801a99e:	68c3      	ldr	r3, [r0, #12]
 801a9a0:	930c      	str	r3, [sp, #48]	; 0x30
 801a9a2:	2300      	movs	r3, #0
 801a9a4:	60c3      	str	r3, [r0, #12]
 801a9a6:	4641      	mov	r1, r8
 801a9a8:	f002 f984 	bl	801ccb4 <__mcmp>
 801a9ac:	2800      	cmp	r0, #0
 801a9ae:	da55      	bge.n	801aa5c <_strtod_l+0x83c>
 801a9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a9b2:	b9e3      	cbnz	r3, 801a9ee <_strtod_l+0x7ce>
 801a9b4:	f1ba 0f00 	cmp.w	sl, #0
 801a9b8:	d119      	bne.n	801a9ee <_strtod_l+0x7ce>
 801a9ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a9be:	b9b3      	cbnz	r3, 801a9ee <_strtod_l+0x7ce>
 801a9c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a9c4:	0d1b      	lsrs	r3, r3, #20
 801a9c6:	051b      	lsls	r3, r3, #20
 801a9c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a9cc:	d90f      	bls.n	801a9ee <_strtod_l+0x7ce>
 801a9ce:	6963      	ldr	r3, [r4, #20]
 801a9d0:	b913      	cbnz	r3, 801a9d8 <_strtod_l+0x7b8>
 801a9d2:	6923      	ldr	r3, [r4, #16]
 801a9d4:	2b01      	cmp	r3, #1
 801a9d6:	dd0a      	ble.n	801a9ee <_strtod_l+0x7ce>
 801a9d8:	4621      	mov	r1, r4
 801a9da:	2201      	movs	r2, #1
 801a9dc:	4648      	mov	r0, r9
 801a9de:	f002 f915 	bl	801cc0c <__lshift>
 801a9e2:	4641      	mov	r1, r8
 801a9e4:	4604      	mov	r4, r0
 801a9e6:	f002 f965 	bl	801ccb4 <__mcmp>
 801a9ea:	2800      	cmp	r0, #0
 801a9ec:	dc67      	bgt.n	801aabe <_strtod_l+0x89e>
 801a9ee:	9b04      	ldr	r3, [sp, #16]
 801a9f0:	2b00      	cmp	r3, #0
 801a9f2:	d171      	bne.n	801aad8 <_strtod_l+0x8b8>
 801a9f4:	e63d      	b.n	801a672 <_strtod_l+0x452>
 801a9f6:	f018 0f01 	tst.w	r8, #1
 801a9fa:	d004      	beq.n	801aa06 <_strtod_l+0x7e6>
 801a9fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801aa00:	f7e5 fe1a 	bl	8000638 <__aeabi_dmul>
 801aa04:	2301      	movs	r3, #1
 801aa06:	ea4f 0868 	mov.w	r8, r8, asr #1
 801aa0a:	3508      	adds	r5, #8
 801aa0c:	e6e5      	b.n	801a7da <_strtod_l+0x5ba>
 801aa0e:	f04f 32ff 	mov.w	r2, #4294967295
 801aa12:	fa02 f303 	lsl.w	r3, r2, r3
 801aa16:	ea03 0a0a 	and.w	sl, r3, sl
 801aa1a:	e6ff      	b.n	801a81c <_strtod_l+0x5fc>
 801aa1c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801aa20:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801aa24:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801aa28:	36e2      	adds	r6, #226	; 0xe2
 801aa2a:	fa01 f306 	lsl.w	r3, r1, r6
 801aa2e:	930a      	str	r3, [sp, #40]	; 0x28
 801aa30:	910f      	str	r1, [sp, #60]	; 0x3c
 801aa32:	e75d      	b.n	801a8f0 <_strtod_l+0x6d0>
 801aa34:	2300      	movs	r3, #0
 801aa36:	930a      	str	r3, [sp, #40]	; 0x28
 801aa38:	2301      	movs	r3, #1
 801aa3a:	930f      	str	r3, [sp, #60]	; 0x3c
 801aa3c:	e758      	b.n	801a8f0 <_strtod_l+0x6d0>
 801aa3e:	4632      	mov	r2, r6
 801aa40:	991c      	ldr	r1, [sp, #112]	; 0x70
 801aa42:	4648      	mov	r0, r9
 801aa44:	f002 f8e2 	bl	801cc0c <__lshift>
 801aa48:	901c      	str	r0, [sp, #112]	; 0x70
 801aa4a:	2800      	cmp	r0, #0
 801aa4c:	f47f af7c 	bne.w	801a948 <_strtod_l+0x728>
 801aa50:	e604      	b.n	801a65c <_strtod_l+0x43c>
 801aa52:	bf00      	nop
 801aa54:	08021c20 	.word	0x08021c20
 801aa58:	fffffc02 	.word	0xfffffc02
 801aa5c:	465d      	mov	r5, fp
 801aa5e:	f040 8086 	bne.w	801ab6e <_strtod_l+0x94e>
 801aa62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801aa64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801aa68:	b32a      	cbz	r2, 801aab6 <_strtod_l+0x896>
 801aa6a:	4aaf      	ldr	r2, [pc, #700]	; (801ad28 <_strtod_l+0xb08>)
 801aa6c:	4293      	cmp	r3, r2
 801aa6e:	d153      	bne.n	801ab18 <_strtod_l+0x8f8>
 801aa70:	9b04      	ldr	r3, [sp, #16]
 801aa72:	4650      	mov	r0, sl
 801aa74:	b1d3      	cbz	r3, 801aaac <_strtod_l+0x88c>
 801aa76:	4aad      	ldr	r2, [pc, #692]	; (801ad2c <_strtod_l+0xb0c>)
 801aa78:	402a      	ands	r2, r5
 801aa7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801aa7e:	f04f 31ff 	mov.w	r1, #4294967295
 801aa82:	d816      	bhi.n	801aab2 <_strtod_l+0x892>
 801aa84:	0d12      	lsrs	r2, r2, #20
 801aa86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801aa8a:	fa01 f303 	lsl.w	r3, r1, r3
 801aa8e:	4298      	cmp	r0, r3
 801aa90:	d142      	bne.n	801ab18 <_strtod_l+0x8f8>
 801aa92:	4ba7      	ldr	r3, [pc, #668]	; (801ad30 <_strtod_l+0xb10>)
 801aa94:	429d      	cmp	r5, r3
 801aa96:	d102      	bne.n	801aa9e <_strtod_l+0x87e>
 801aa98:	3001      	adds	r0, #1
 801aa9a:	f43f addf 	beq.w	801a65c <_strtod_l+0x43c>
 801aa9e:	4ba3      	ldr	r3, [pc, #652]	; (801ad2c <_strtod_l+0xb0c>)
 801aaa0:	402b      	ands	r3, r5
 801aaa2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801aaa6:	f04f 0a00 	mov.w	sl, #0
 801aaaa:	e7a0      	b.n	801a9ee <_strtod_l+0x7ce>
 801aaac:	f04f 33ff 	mov.w	r3, #4294967295
 801aab0:	e7ed      	b.n	801aa8e <_strtod_l+0x86e>
 801aab2:	460b      	mov	r3, r1
 801aab4:	e7eb      	b.n	801aa8e <_strtod_l+0x86e>
 801aab6:	bb7b      	cbnz	r3, 801ab18 <_strtod_l+0x8f8>
 801aab8:	f1ba 0f00 	cmp.w	sl, #0
 801aabc:	d12c      	bne.n	801ab18 <_strtod_l+0x8f8>
 801aabe:	9904      	ldr	r1, [sp, #16]
 801aac0:	4a9a      	ldr	r2, [pc, #616]	; (801ad2c <_strtod_l+0xb0c>)
 801aac2:	465b      	mov	r3, fp
 801aac4:	b1f1      	cbz	r1, 801ab04 <_strtod_l+0x8e4>
 801aac6:	ea02 010b 	and.w	r1, r2, fp
 801aaca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801aace:	dc19      	bgt.n	801ab04 <_strtod_l+0x8e4>
 801aad0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801aad4:	f77f ae5b 	ble.w	801a78e <_strtod_l+0x56e>
 801aad8:	4a96      	ldr	r2, [pc, #600]	; (801ad34 <_strtod_l+0xb14>)
 801aada:	2300      	movs	r3, #0
 801aadc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801aae0:	4650      	mov	r0, sl
 801aae2:	4659      	mov	r1, fp
 801aae4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801aae8:	f7e5 fda6 	bl	8000638 <__aeabi_dmul>
 801aaec:	4682      	mov	sl, r0
 801aaee:	468b      	mov	fp, r1
 801aaf0:	2900      	cmp	r1, #0
 801aaf2:	f47f adbe 	bne.w	801a672 <_strtod_l+0x452>
 801aaf6:	2800      	cmp	r0, #0
 801aaf8:	f47f adbb 	bne.w	801a672 <_strtod_l+0x452>
 801aafc:	2322      	movs	r3, #34	; 0x22
 801aafe:	f8c9 3000 	str.w	r3, [r9]
 801ab02:	e5b6      	b.n	801a672 <_strtod_l+0x452>
 801ab04:	4013      	ands	r3, r2
 801ab06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ab0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ab0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ab12:	f04f 3aff 	mov.w	sl, #4294967295
 801ab16:	e76a      	b.n	801a9ee <_strtod_l+0x7ce>
 801ab18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab1a:	b193      	cbz	r3, 801ab42 <_strtod_l+0x922>
 801ab1c:	422b      	tst	r3, r5
 801ab1e:	f43f af66 	beq.w	801a9ee <_strtod_l+0x7ce>
 801ab22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab24:	9a04      	ldr	r2, [sp, #16]
 801ab26:	4650      	mov	r0, sl
 801ab28:	4659      	mov	r1, fp
 801ab2a:	b173      	cbz	r3, 801ab4a <_strtod_l+0x92a>
 801ab2c:	f7ff fb5a 	bl	801a1e4 <sulp>
 801ab30:	4602      	mov	r2, r0
 801ab32:	460b      	mov	r3, r1
 801ab34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ab38:	f7e5 fbc8 	bl	80002cc <__adddf3>
 801ab3c:	4682      	mov	sl, r0
 801ab3e:	468b      	mov	fp, r1
 801ab40:	e755      	b.n	801a9ee <_strtod_l+0x7ce>
 801ab42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab44:	ea13 0f0a 	tst.w	r3, sl
 801ab48:	e7e9      	b.n	801ab1e <_strtod_l+0x8fe>
 801ab4a:	f7ff fb4b 	bl	801a1e4 <sulp>
 801ab4e:	4602      	mov	r2, r0
 801ab50:	460b      	mov	r3, r1
 801ab52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ab56:	f7e5 fbb7 	bl	80002c8 <__aeabi_dsub>
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	4682      	mov	sl, r0
 801ab60:	468b      	mov	fp, r1
 801ab62:	f7e5 ffd1 	bl	8000b08 <__aeabi_dcmpeq>
 801ab66:	2800      	cmp	r0, #0
 801ab68:	f47f ae11 	bne.w	801a78e <_strtod_l+0x56e>
 801ab6c:	e73f      	b.n	801a9ee <_strtod_l+0x7ce>
 801ab6e:	4641      	mov	r1, r8
 801ab70:	4620      	mov	r0, r4
 801ab72:	f002 f9dc 	bl	801cf2e <__ratio>
 801ab76:	ec57 6b10 	vmov	r6, r7, d0
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ab80:	ee10 0a10 	vmov	r0, s0
 801ab84:	4639      	mov	r1, r7
 801ab86:	f7e5 ffd3 	bl	8000b30 <__aeabi_dcmple>
 801ab8a:	2800      	cmp	r0, #0
 801ab8c:	d077      	beq.n	801ac7e <_strtod_l+0xa5e>
 801ab8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d04a      	beq.n	801ac2a <_strtod_l+0xa0a>
 801ab94:	4b68      	ldr	r3, [pc, #416]	; (801ad38 <_strtod_l+0xb18>)
 801ab96:	2200      	movs	r2, #0
 801ab98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ab9c:	4f66      	ldr	r7, [pc, #408]	; (801ad38 <_strtod_l+0xb18>)
 801ab9e:	2600      	movs	r6, #0
 801aba0:	4b62      	ldr	r3, [pc, #392]	; (801ad2c <_strtod_l+0xb0c>)
 801aba2:	402b      	ands	r3, r5
 801aba4:	930f      	str	r3, [sp, #60]	; 0x3c
 801aba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801aba8:	4b64      	ldr	r3, [pc, #400]	; (801ad3c <_strtod_l+0xb1c>)
 801abaa:	429a      	cmp	r2, r3
 801abac:	f040 80ce 	bne.w	801ad4c <_strtod_l+0xb2c>
 801abb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801abb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801abb8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801abbc:	ec4b ab10 	vmov	d0, sl, fp
 801abc0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801abc4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801abc8:	f002 f8ec 	bl	801cda4 <__ulp>
 801abcc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801abd0:	ec53 2b10 	vmov	r2, r3, d0
 801abd4:	f7e5 fd30 	bl	8000638 <__aeabi_dmul>
 801abd8:	4652      	mov	r2, sl
 801abda:	465b      	mov	r3, fp
 801abdc:	f7e5 fb76 	bl	80002cc <__adddf3>
 801abe0:	460b      	mov	r3, r1
 801abe2:	4952      	ldr	r1, [pc, #328]	; (801ad2c <_strtod_l+0xb0c>)
 801abe4:	4a56      	ldr	r2, [pc, #344]	; (801ad40 <_strtod_l+0xb20>)
 801abe6:	4019      	ands	r1, r3
 801abe8:	4291      	cmp	r1, r2
 801abea:	4682      	mov	sl, r0
 801abec:	d95b      	bls.n	801aca6 <_strtod_l+0xa86>
 801abee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abf0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801abf4:	4293      	cmp	r3, r2
 801abf6:	d103      	bne.n	801ac00 <_strtod_l+0x9e0>
 801abf8:	9b08      	ldr	r3, [sp, #32]
 801abfa:	3301      	adds	r3, #1
 801abfc:	f43f ad2e 	beq.w	801a65c <_strtod_l+0x43c>
 801ac00:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801ad30 <_strtod_l+0xb10>
 801ac04:	f04f 3aff 	mov.w	sl, #4294967295
 801ac08:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ac0a:	4648      	mov	r0, r9
 801ac0c:	f001 fe32 	bl	801c874 <_Bfree>
 801ac10:	9905      	ldr	r1, [sp, #20]
 801ac12:	4648      	mov	r0, r9
 801ac14:	f001 fe2e 	bl	801c874 <_Bfree>
 801ac18:	4641      	mov	r1, r8
 801ac1a:	4648      	mov	r0, r9
 801ac1c:	f001 fe2a 	bl	801c874 <_Bfree>
 801ac20:	4621      	mov	r1, r4
 801ac22:	4648      	mov	r0, r9
 801ac24:	f001 fe26 	bl	801c874 <_Bfree>
 801ac28:	e619      	b.n	801a85e <_strtod_l+0x63e>
 801ac2a:	f1ba 0f00 	cmp.w	sl, #0
 801ac2e:	d11a      	bne.n	801ac66 <_strtod_l+0xa46>
 801ac30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ac34:	b9eb      	cbnz	r3, 801ac72 <_strtod_l+0xa52>
 801ac36:	2200      	movs	r2, #0
 801ac38:	4b3f      	ldr	r3, [pc, #252]	; (801ad38 <_strtod_l+0xb18>)
 801ac3a:	4630      	mov	r0, r6
 801ac3c:	4639      	mov	r1, r7
 801ac3e:	f7e5 ff6d 	bl	8000b1c <__aeabi_dcmplt>
 801ac42:	b9c8      	cbnz	r0, 801ac78 <_strtod_l+0xa58>
 801ac44:	4630      	mov	r0, r6
 801ac46:	4639      	mov	r1, r7
 801ac48:	2200      	movs	r2, #0
 801ac4a:	4b3e      	ldr	r3, [pc, #248]	; (801ad44 <_strtod_l+0xb24>)
 801ac4c:	f7e5 fcf4 	bl	8000638 <__aeabi_dmul>
 801ac50:	4606      	mov	r6, r0
 801ac52:	460f      	mov	r7, r1
 801ac54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801ac58:	9618      	str	r6, [sp, #96]	; 0x60
 801ac5a:	9319      	str	r3, [sp, #100]	; 0x64
 801ac5c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801ac60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ac64:	e79c      	b.n	801aba0 <_strtod_l+0x980>
 801ac66:	f1ba 0f01 	cmp.w	sl, #1
 801ac6a:	d102      	bne.n	801ac72 <_strtod_l+0xa52>
 801ac6c:	2d00      	cmp	r5, #0
 801ac6e:	f43f ad8e 	beq.w	801a78e <_strtod_l+0x56e>
 801ac72:	2200      	movs	r2, #0
 801ac74:	4b34      	ldr	r3, [pc, #208]	; (801ad48 <_strtod_l+0xb28>)
 801ac76:	e78f      	b.n	801ab98 <_strtod_l+0x978>
 801ac78:	2600      	movs	r6, #0
 801ac7a:	4f32      	ldr	r7, [pc, #200]	; (801ad44 <_strtod_l+0xb24>)
 801ac7c:	e7ea      	b.n	801ac54 <_strtod_l+0xa34>
 801ac7e:	4b31      	ldr	r3, [pc, #196]	; (801ad44 <_strtod_l+0xb24>)
 801ac80:	4630      	mov	r0, r6
 801ac82:	4639      	mov	r1, r7
 801ac84:	2200      	movs	r2, #0
 801ac86:	f7e5 fcd7 	bl	8000638 <__aeabi_dmul>
 801ac8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ac8c:	4606      	mov	r6, r0
 801ac8e:	460f      	mov	r7, r1
 801ac90:	b933      	cbnz	r3, 801aca0 <_strtod_l+0xa80>
 801ac92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ac96:	9010      	str	r0, [sp, #64]	; 0x40
 801ac98:	9311      	str	r3, [sp, #68]	; 0x44
 801ac9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801ac9e:	e7df      	b.n	801ac60 <_strtod_l+0xa40>
 801aca0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801aca4:	e7f9      	b.n	801ac9a <_strtod_l+0xa7a>
 801aca6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801acaa:	9b04      	ldr	r3, [sp, #16]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d1ab      	bne.n	801ac08 <_strtod_l+0x9e8>
 801acb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801acb4:	0d1b      	lsrs	r3, r3, #20
 801acb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801acb8:	051b      	lsls	r3, r3, #20
 801acba:	429a      	cmp	r2, r3
 801acbc:	465d      	mov	r5, fp
 801acbe:	d1a3      	bne.n	801ac08 <_strtod_l+0x9e8>
 801acc0:	4639      	mov	r1, r7
 801acc2:	4630      	mov	r0, r6
 801acc4:	f7e5 ff68 	bl	8000b98 <__aeabi_d2iz>
 801acc8:	f7e5 fc4c 	bl	8000564 <__aeabi_i2d>
 801accc:	460b      	mov	r3, r1
 801acce:	4602      	mov	r2, r0
 801acd0:	4639      	mov	r1, r7
 801acd2:	4630      	mov	r0, r6
 801acd4:	f7e5 faf8 	bl	80002c8 <__aeabi_dsub>
 801acd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801acda:	4606      	mov	r6, r0
 801acdc:	460f      	mov	r7, r1
 801acde:	b933      	cbnz	r3, 801acee <_strtod_l+0xace>
 801ace0:	f1ba 0f00 	cmp.w	sl, #0
 801ace4:	d103      	bne.n	801acee <_strtod_l+0xace>
 801ace6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801acea:	2d00      	cmp	r5, #0
 801acec:	d06d      	beq.n	801adca <_strtod_l+0xbaa>
 801acee:	a30a      	add	r3, pc, #40	; (adr r3, 801ad18 <_strtod_l+0xaf8>)
 801acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acf4:	4630      	mov	r0, r6
 801acf6:	4639      	mov	r1, r7
 801acf8:	f7e5 ff10 	bl	8000b1c <__aeabi_dcmplt>
 801acfc:	2800      	cmp	r0, #0
 801acfe:	f47f acb8 	bne.w	801a672 <_strtod_l+0x452>
 801ad02:	a307      	add	r3, pc, #28	; (adr r3, 801ad20 <_strtod_l+0xb00>)
 801ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad08:	4630      	mov	r0, r6
 801ad0a:	4639      	mov	r1, r7
 801ad0c:	f7e5 ff24 	bl	8000b58 <__aeabi_dcmpgt>
 801ad10:	2800      	cmp	r0, #0
 801ad12:	f43f af79 	beq.w	801ac08 <_strtod_l+0x9e8>
 801ad16:	e4ac      	b.n	801a672 <_strtod_l+0x452>
 801ad18:	94a03595 	.word	0x94a03595
 801ad1c:	3fdfffff 	.word	0x3fdfffff
 801ad20:	35afe535 	.word	0x35afe535
 801ad24:	3fe00000 	.word	0x3fe00000
 801ad28:	000fffff 	.word	0x000fffff
 801ad2c:	7ff00000 	.word	0x7ff00000
 801ad30:	7fefffff 	.word	0x7fefffff
 801ad34:	39500000 	.word	0x39500000
 801ad38:	3ff00000 	.word	0x3ff00000
 801ad3c:	7fe00000 	.word	0x7fe00000
 801ad40:	7c9fffff 	.word	0x7c9fffff
 801ad44:	3fe00000 	.word	0x3fe00000
 801ad48:	bff00000 	.word	0xbff00000
 801ad4c:	9b04      	ldr	r3, [sp, #16]
 801ad4e:	b333      	cbz	r3, 801ad9e <_strtod_l+0xb7e>
 801ad50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ad52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ad56:	d822      	bhi.n	801ad9e <_strtod_l+0xb7e>
 801ad58:	a327      	add	r3, pc, #156	; (adr r3, 801adf8 <_strtod_l+0xbd8>)
 801ad5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad5e:	4630      	mov	r0, r6
 801ad60:	4639      	mov	r1, r7
 801ad62:	f7e5 fee5 	bl	8000b30 <__aeabi_dcmple>
 801ad66:	b1a0      	cbz	r0, 801ad92 <_strtod_l+0xb72>
 801ad68:	4639      	mov	r1, r7
 801ad6a:	4630      	mov	r0, r6
 801ad6c:	f7e5 ff3c 	bl	8000be8 <__aeabi_d2uiz>
 801ad70:	2800      	cmp	r0, #0
 801ad72:	bf08      	it	eq
 801ad74:	2001      	moveq	r0, #1
 801ad76:	f7e5 fbe5 	bl	8000544 <__aeabi_ui2d>
 801ad7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad7c:	4606      	mov	r6, r0
 801ad7e:	460f      	mov	r7, r1
 801ad80:	bb03      	cbnz	r3, 801adc4 <_strtod_l+0xba4>
 801ad82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ad86:	9012      	str	r0, [sp, #72]	; 0x48
 801ad88:	9313      	str	r3, [sp, #76]	; 0x4c
 801ad8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801ad8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801ad92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ad96:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801ad9a:	1a9b      	subs	r3, r3, r2
 801ad9c:	930b      	str	r3, [sp, #44]	; 0x2c
 801ad9e:	ed9d 0b08 	vldr	d0, [sp, #32]
 801ada2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801ada6:	f001 fffd 	bl	801cda4 <__ulp>
 801adaa:	4650      	mov	r0, sl
 801adac:	ec53 2b10 	vmov	r2, r3, d0
 801adb0:	4659      	mov	r1, fp
 801adb2:	f7e5 fc41 	bl	8000638 <__aeabi_dmul>
 801adb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801adba:	f7e5 fa87 	bl	80002cc <__adddf3>
 801adbe:	4682      	mov	sl, r0
 801adc0:	468b      	mov	fp, r1
 801adc2:	e772      	b.n	801acaa <_strtod_l+0xa8a>
 801adc4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801adc8:	e7df      	b.n	801ad8a <_strtod_l+0xb6a>
 801adca:	a30d      	add	r3, pc, #52	; (adr r3, 801ae00 <_strtod_l+0xbe0>)
 801adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add0:	f7e5 fea4 	bl	8000b1c <__aeabi_dcmplt>
 801add4:	e79c      	b.n	801ad10 <_strtod_l+0xaf0>
 801add6:	2300      	movs	r3, #0
 801add8:	930d      	str	r3, [sp, #52]	; 0x34
 801adda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801addc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801adde:	6013      	str	r3, [r2, #0]
 801ade0:	f7ff ba61 	b.w	801a2a6 <_strtod_l+0x86>
 801ade4:	2b65      	cmp	r3, #101	; 0x65
 801ade6:	f04f 0200 	mov.w	r2, #0
 801adea:	f43f ab4e 	beq.w	801a48a <_strtod_l+0x26a>
 801adee:	2101      	movs	r1, #1
 801adf0:	4614      	mov	r4, r2
 801adf2:	9104      	str	r1, [sp, #16]
 801adf4:	f7ff bacb 	b.w	801a38e <_strtod_l+0x16e>
 801adf8:	ffc00000 	.word	0xffc00000
 801adfc:	41dfffff 	.word	0x41dfffff
 801ae00:	94a03595 	.word	0x94a03595
 801ae04:	3fcfffff 	.word	0x3fcfffff

0801ae08 <_strtod_r>:
 801ae08:	4b05      	ldr	r3, [pc, #20]	; (801ae20 <_strtod_r+0x18>)
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	b410      	push	{r4}
 801ae0e:	6a1b      	ldr	r3, [r3, #32]
 801ae10:	4c04      	ldr	r4, [pc, #16]	; (801ae24 <_strtod_r+0x1c>)
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	bf08      	it	eq
 801ae16:	4623      	moveq	r3, r4
 801ae18:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae1c:	f7ff ba00 	b.w	801a220 <_strtod_l>
 801ae20:	20000020 	.word	0x20000020
 801ae24:	20000084 	.word	0x20000084

0801ae28 <_strtol_l.isra.0>:
 801ae28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae2c:	4680      	mov	r8, r0
 801ae2e:	4689      	mov	r9, r1
 801ae30:	4692      	mov	sl, r2
 801ae32:	461e      	mov	r6, r3
 801ae34:	460f      	mov	r7, r1
 801ae36:	463d      	mov	r5, r7
 801ae38:	9808      	ldr	r0, [sp, #32]
 801ae3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ae3e:	f7fe f9cf 	bl	80191e0 <__locale_ctype_ptr_l>
 801ae42:	4420      	add	r0, r4
 801ae44:	7843      	ldrb	r3, [r0, #1]
 801ae46:	f013 0308 	ands.w	r3, r3, #8
 801ae4a:	d132      	bne.n	801aeb2 <_strtol_l.isra.0+0x8a>
 801ae4c:	2c2d      	cmp	r4, #45	; 0x2d
 801ae4e:	d132      	bne.n	801aeb6 <_strtol_l.isra.0+0x8e>
 801ae50:	787c      	ldrb	r4, [r7, #1]
 801ae52:	1cbd      	adds	r5, r7, #2
 801ae54:	2201      	movs	r2, #1
 801ae56:	2e00      	cmp	r6, #0
 801ae58:	d05d      	beq.n	801af16 <_strtol_l.isra.0+0xee>
 801ae5a:	2e10      	cmp	r6, #16
 801ae5c:	d109      	bne.n	801ae72 <_strtol_l.isra.0+0x4a>
 801ae5e:	2c30      	cmp	r4, #48	; 0x30
 801ae60:	d107      	bne.n	801ae72 <_strtol_l.isra.0+0x4a>
 801ae62:	782b      	ldrb	r3, [r5, #0]
 801ae64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ae68:	2b58      	cmp	r3, #88	; 0x58
 801ae6a:	d14f      	bne.n	801af0c <_strtol_l.isra.0+0xe4>
 801ae6c:	786c      	ldrb	r4, [r5, #1]
 801ae6e:	2610      	movs	r6, #16
 801ae70:	3502      	adds	r5, #2
 801ae72:	2a00      	cmp	r2, #0
 801ae74:	bf14      	ite	ne
 801ae76:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801ae7a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801ae7e:	2700      	movs	r7, #0
 801ae80:	fbb1 fcf6 	udiv	ip, r1, r6
 801ae84:	4638      	mov	r0, r7
 801ae86:	fb06 1e1c 	mls	lr, r6, ip, r1
 801ae8a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801ae8e:	2b09      	cmp	r3, #9
 801ae90:	d817      	bhi.n	801aec2 <_strtol_l.isra.0+0x9a>
 801ae92:	461c      	mov	r4, r3
 801ae94:	42a6      	cmp	r6, r4
 801ae96:	dd23      	ble.n	801aee0 <_strtol_l.isra.0+0xb8>
 801ae98:	1c7b      	adds	r3, r7, #1
 801ae9a:	d007      	beq.n	801aeac <_strtol_l.isra.0+0x84>
 801ae9c:	4584      	cmp	ip, r0
 801ae9e:	d31c      	bcc.n	801aeda <_strtol_l.isra.0+0xb2>
 801aea0:	d101      	bne.n	801aea6 <_strtol_l.isra.0+0x7e>
 801aea2:	45a6      	cmp	lr, r4
 801aea4:	db19      	blt.n	801aeda <_strtol_l.isra.0+0xb2>
 801aea6:	fb00 4006 	mla	r0, r0, r6, r4
 801aeaa:	2701      	movs	r7, #1
 801aeac:	f815 4b01 	ldrb.w	r4, [r5], #1
 801aeb0:	e7eb      	b.n	801ae8a <_strtol_l.isra.0+0x62>
 801aeb2:	462f      	mov	r7, r5
 801aeb4:	e7bf      	b.n	801ae36 <_strtol_l.isra.0+0xe>
 801aeb6:	2c2b      	cmp	r4, #43	; 0x2b
 801aeb8:	bf04      	itt	eq
 801aeba:	1cbd      	addeq	r5, r7, #2
 801aebc:	787c      	ldrbeq	r4, [r7, #1]
 801aebe:	461a      	mov	r2, r3
 801aec0:	e7c9      	b.n	801ae56 <_strtol_l.isra.0+0x2e>
 801aec2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801aec6:	2b19      	cmp	r3, #25
 801aec8:	d801      	bhi.n	801aece <_strtol_l.isra.0+0xa6>
 801aeca:	3c37      	subs	r4, #55	; 0x37
 801aecc:	e7e2      	b.n	801ae94 <_strtol_l.isra.0+0x6c>
 801aece:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801aed2:	2b19      	cmp	r3, #25
 801aed4:	d804      	bhi.n	801aee0 <_strtol_l.isra.0+0xb8>
 801aed6:	3c57      	subs	r4, #87	; 0x57
 801aed8:	e7dc      	b.n	801ae94 <_strtol_l.isra.0+0x6c>
 801aeda:	f04f 37ff 	mov.w	r7, #4294967295
 801aede:	e7e5      	b.n	801aeac <_strtol_l.isra.0+0x84>
 801aee0:	1c7b      	adds	r3, r7, #1
 801aee2:	d108      	bne.n	801aef6 <_strtol_l.isra.0+0xce>
 801aee4:	2322      	movs	r3, #34	; 0x22
 801aee6:	f8c8 3000 	str.w	r3, [r8]
 801aeea:	4608      	mov	r0, r1
 801aeec:	f1ba 0f00 	cmp.w	sl, #0
 801aef0:	d107      	bne.n	801af02 <_strtol_l.isra.0+0xda>
 801aef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aef6:	b102      	cbz	r2, 801aefa <_strtol_l.isra.0+0xd2>
 801aef8:	4240      	negs	r0, r0
 801aefa:	f1ba 0f00 	cmp.w	sl, #0
 801aefe:	d0f8      	beq.n	801aef2 <_strtol_l.isra.0+0xca>
 801af00:	b10f      	cbz	r7, 801af06 <_strtol_l.isra.0+0xde>
 801af02:	f105 39ff 	add.w	r9, r5, #4294967295
 801af06:	f8ca 9000 	str.w	r9, [sl]
 801af0a:	e7f2      	b.n	801aef2 <_strtol_l.isra.0+0xca>
 801af0c:	2430      	movs	r4, #48	; 0x30
 801af0e:	2e00      	cmp	r6, #0
 801af10:	d1af      	bne.n	801ae72 <_strtol_l.isra.0+0x4a>
 801af12:	2608      	movs	r6, #8
 801af14:	e7ad      	b.n	801ae72 <_strtol_l.isra.0+0x4a>
 801af16:	2c30      	cmp	r4, #48	; 0x30
 801af18:	d0a3      	beq.n	801ae62 <_strtol_l.isra.0+0x3a>
 801af1a:	260a      	movs	r6, #10
 801af1c:	e7a9      	b.n	801ae72 <_strtol_l.isra.0+0x4a>
	...

0801af20 <_strtol_r>:
 801af20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af22:	4c06      	ldr	r4, [pc, #24]	; (801af3c <_strtol_r+0x1c>)
 801af24:	4d06      	ldr	r5, [pc, #24]	; (801af40 <_strtol_r+0x20>)
 801af26:	6824      	ldr	r4, [r4, #0]
 801af28:	6a24      	ldr	r4, [r4, #32]
 801af2a:	2c00      	cmp	r4, #0
 801af2c:	bf08      	it	eq
 801af2e:	462c      	moveq	r4, r5
 801af30:	9400      	str	r4, [sp, #0]
 801af32:	f7ff ff79 	bl	801ae28 <_strtol_l.isra.0>
 801af36:	b003      	add	sp, #12
 801af38:	bd30      	pop	{r4, r5, pc}
 801af3a:	bf00      	nop
 801af3c:	20000020 	.word	0x20000020
 801af40:	20000084 	.word	0x20000084

0801af44 <__swbuf_r>:
 801af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af46:	460e      	mov	r6, r1
 801af48:	4614      	mov	r4, r2
 801af4a:	4605      	mov	r5, r0
 801af4c:	b118      	cbz	r0, 801af56 <__swbuf_r+0x12>
 801af4e:	6983      	ldr	r3, [r0, #24]
 801af50:	b90b      	cbnz	r3, 801af56 <__swbuf_r+0x12>
 801af52:	f001 f81d 	bl	801bf90 <__sinit>
 801af56:	4b21      	ldr	r3, [pc, #132]	; (801afdc <__swbuf_r+0x98>)
 801af58:	429c      	cmp	r4, r3
 801af5a:	d12a      	bne.n	801afb2 <__swbuf_r+0x6e>
 801af5c:	686c      	ldr	r4, [r5, #4]
 801af5e:	69a3      	ldr	r3, [r4, #24]
 801af60:	60a3      	str	r3, [r4, #8]
 801af62:	89a3      	ldrh	r3, [r4, #12]
 801af64:	071a      	lsls	r2, r3, #28
 801af66:	d52e      	bpl.n	801afc6 <__swbuf_r+0x82>
 801af68:	6923      	ldr	r3, [r4, #16]
 801af6a:	b363      	cbz	r3, 801afc6 <__swbuf_r+0x82>
 801af6c:	6923      	ldr	r3, [r4, #16]
 801af6e:	6820      	ldr	r0, [r4, #0]
 801af70:	1ac0      	subs	r0, r0, r3
 801af72:	6963      	ldr	r3, [r4, #20]
 801af74:	b2f6      	uxtb	r6, r6
 801af76:	4283      	cmp	r3, r0
 801af78:	4637      	mov	r7, r6
 801af7a:	dc04      	bgt.n	801af86 <__swbuf_r+0x42>
 801af7c:	4621      	mov	r1, r4
 801af7e:	4628      	mov	r0, r5
 801af80:	f000 ff9c 	bl	801bebc <_fflush_r>
 801af84:	bb28      	cbnz	r0, 801afd2 <__swbuf_r+0x8e>
 801af86:	68a3      	ldr	r3, [r4, #8]
 801af88:	3b01      	subs	r3, #1
 801af8a:	60a3      	str	r3, [r4, #8]
 801af8c:	6823      	ldr	r3, [r4, #0]
 801af8e:	1c5a      	adds	r2, r3, #1
 801af90:	6022      	str	r2, [r4, #0]
 801af92:	701e      	strb	r6, [r3, #0]
 801af94:	6963      	ldr	r3, [r4, #20]
 801af96:	3001      	adds	r0, #1
 801af98:	4283      	cmp	r3, r0
 801af9a:	d004      	beq.n	801afa6 <__swbuf_r+0x62>
 801af9c:	89a3      	ldrh	r3, [r4, #12]
 801af9e:	07db      	lsls	r3, r3, #31
 801afa0:	d519      	bpl.n	801afd6 <__swbuf_r+0x92>
 801afa2:	2e0a      	cmp	r6, #10
 801afa4:	d117      	bne.n	801afd6 <__swbuf_r+0x92>
 801afa6:	4621      	mov	r1, r4
 801afa8:	4628      	mov	r0, r5
 801afaa:	f000 ff87 	bl	801bebc <_fflush_r>
 801afae:	b190      	cbz	r0, 801afd6 <__swbuf_r+0x92>
 801afb0:	e00f      	b.n	801afd2 <__swbuf_r+0x8e>
 801afb2:	4b0b      	ldr	r3, [pc, #44]	; (801afe0 <__swbuf_r+0x9c>)
 801afb4:	429c      	cmp	r4, r3
 801afb6:	d101      	bne.n	801afbc <__swbuf_r+0x78>
 801afb8:	68ac      	ldr	r4, [r5, #8]
 801afba:	e7d0      	b.n	801af5e <__swbuf_r+0x1a>
 801afbc:	4b09      	ldr	r3, [pc, #36]	; (801afe4 <__swbuf_r+0xa0>)
 801afbe:	429c      	cmp	r4, r3
 801afc0:	bf08      	it	eq
 801afc2:	68ec      	ldreq	r4, [r5, #12]
 801afc4:	e7cb      	b.n	801af5e <__swbuf_r+0x1a>
 801afc6:	4621      	mov	r1, r4
 801afc8:	4628      	mov	r0, r5
 801afca:	f000 f82d 	bl	801b028 <__swsetup_r>
 801afce:	2800      	cmp	r0, #0
 801afd0:	d0cc      	beq.n	801af6c <__swbuf_r+0x28>
 801afd2:	f04f 37ff 	mov.w	r7, #4294967295
 801afd6:	4638      	mov	r0, r7
 801afd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afda:	bf00      	nop
 801afdc:	08021d78 	.word	0x08021d78
 801afe0:	08021d98 	.word	0x08021d98
 801afe4:	08021d58 	.word	0x08021d58

0801afe8 <__ascii_wctomb>:
 801afe8:	b149      	cbz	r1, 801affe <__ascii_wctomb+0x16>
 801afea:	2aff      	cmp	r2, #255	; 0xff
 801afec:	bf85      	ittet	hi
 801afee:	238a      	movhi	r3, #138	; 0x8a
 801aff0:	6003      	strhi	r3, [r0, #0]
 801aff2:	700a      	strbls	r2, [r1, #0]
 801aff4:	f04f 30ff 	movhi.w	r0, #4294967295
 801aff8:	bf98      	it	ls
 801affa:	2001      	movls	r0, #1
 801affc:	4770      	bx	lr
 801affe:	4608      	mov	r0, r1
 801b000:	4770      	bx	lr
	...

0801b004 <_write_r>:
 801b004:	b538      	push	{r3, r4, r5, lr}
 801b006:	4c07      	ldr	r4, [pc, #28]	; (801b024 <_write_r+0x20>)
 801b008:	4605      	mov	r5, r0
 801b00a:	4608      	mov	r0, r1
 801b00c:	4611      	mov	r1, r2
 801b00e:	2200      	movs	r2, #0
 801b010:	6022      	str	r2, [r4, #0]
 801b012:	461a      	mov	r2, r3
 801b014:	f7e6 f9f3 	bl	80013fe <_write>
 801b018:	1c43      	adds	r3, r0, #1
 801b01a:	d102      	bne.n	801b022 <_write_r+0x1e>
 801b01c:	6823      	ldr	r3, [r4, #0]
 801b01e:	b103      	cbz	r3, 801b022 <_write_r+0x1e>
 801b020:	602b      	str	r3, [r5, #0]
 801b022:	bd38      	pop	{r3, r4, r5, pc}
 801b024:	200280e0 	.word	0x200280e0

0801b028 <__swsetup_r>:
 801b028:	4b32      	ldr	r3, [pc, #200]	; (801b0f4 <__swsetup_r+0xcc>)
 801b02a:	b570      	push	{r4, r5, r6, lr}
 801b02c:	681d      	ldr	r5, [r3, #0]
 801b02e:	4606      	mov	r6, r0
 801b030:	460c      	mov	r4, r1
 801b032:	b125      	cbz	r5, 801b03e <__swsetup_r+0x16>
 801b034:	69ab      	ldr	r3, [r5, #24]
 801b036:	b913      	cbnz	r3, 801b03e <__swsetup_r+0x16>
 801b038:	4628      	mov	r0, r5
 801b03a:	f000 ffa9 	bl	801bf90 <__sinit>
 801b03e:	4b2e      	ldr	r3, [pc, #184]	; (801b0f8 <__swsetup_r+0xd0>)
 801b040:	429c      	cmp	r4, r3
 801b042:	d10f      	bne.n	801b064 <__swsetup_r+0x3c>
 801b044:	686c      	ldr	r4, [r5, #4]
 801b046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b04a:	b29a      	uxth	r2, r3
 801b04c:	0715      	lsls	r5, r2, #28
 801b04e:	d42c      	bmi.n	801b0aa <__swsetup_r+0x82>
 801b050:	06d0      	lsls	r0, r2, #27
 801b052:	d411      	bmi.n	801b078 <__swsetup_r+0x50>
 801b054:	2209      	movs	r2, #9
 801b056:	6032      	str	r2, [r6, #0]
 801b058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b05c:	81a3      	strh	r3, [r4, #12]
 801b05e:	f04f 30ff 	mov.w	r0, #4294967295
 801b062:	e03e      	b.n	801b0e2 <__swsetup_r+0xba>
 801b064:	4b25      	ldr	r3, [pc, #148]	; (801b0fc <__swsetup_r+0xd4>)
 801b066:	429c      	cmp	r4, r3
 801b068:	d101      	bne.n	801b06e <__swsetup_r+0x46>
 801b06a:	68ac      	ldr	r4, [r5, #8]
 801b06c:	e7eb      	b.n	801b046 <__swsetup_r+0x1e>
 801b06e:	4b24      	ldr	r3, [pc, #144]	; (801b100 <__swsetup_r+0xd8>)
 801b070:	429c      	cmp	r4, r3
 801b072:	bf08      	it	eq
 801b074:	68ec      	ldreq	r4, [r5, #12]
 801b076:	e7e6      	b.n	801b046 <__swsetup_r+0x1e>
 801b078:	0751      	lsls	r1, r2, #29
 801b07a:	d512      	bpl.n	801b0a2 <__swsetup_r+0x7a>
 801b07c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b07e:	b141      	cbz	r1, 801b092 <__swsetup_r+0x6a>
 801b080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b084:	4299      	cmp	r1, r3
 801b086:	d002      	beq.n	801b08e <__swsetup_r+0x66>
 801b088:	4630      	mov	r0, r6
 801b08a:	f001 ffcd 	bl	801d028 <_free_r>
 801b08e:	2300      	movs	r3, #0
 801b090:	6363      	str	r3, [r4, #52]	; 0x34
 801b092:	89a3      	ldrh	r3, [r4, #12]
 801b094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b098:	81a3      	strh	r3, [r4, #12]
 801b09a:	2300      	movs	r3, #0
 801b09c:	6063      	str	r3, [r4, #4]
 801b09e:	6923      	ldr	r3, [r4, #16]
 801b0a0:	6023      	str	r3, [r4, #0]
 801b0a2:	89a3      	ldrh	r3, [r4, #12]
 801b0a4:	f043 0308 	orr.w	r3, r3, #8
 801b0a8:	81a3      	strh	r3, [r4, #12]
 801b0aa:	6923      	ldr	r3, [r4, #16]
 801b0ac:	b94b      	cbnz	r3, 801b0c2 <__swsetup_r+0x9a>
 801b0ae:	89a3      	ldrh	r3, [r4, #12]
 801b0b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0b8:	d003      	beq.n	801b0c2 <__swsetup_r+0x9a>
 801b0ba:	4621      	mov	r1, r4
 801b0bc:	4630      	mov	r0, r6
 801b0be:	f001 fb5d 	bl	801c77c <__smakebuf_r>
 801b0c2:	89a2      	ldrh	r2, [r4, #12]
 801b0c4:	f012 0301 	ands.w	r3, r2, #1
 801b0c8:	d00c      	beq.n	801b0e4 <__swsetup_r+0xbc>
 801b0ca:	2300      	movs	r3, #0
 801b0cc:	60a3      	str	r3, [r4, #8]
 801b0ce:	6963      	ldr	r3, [r4, #20]
 801b0d0:	425b      	negs	r3, r3
 801b0d2:	61a3      	str	r3, [r4, #24]
 801b0d4:	6923      	ldr	r3, [r4, #16]
 801b0d6:	b953      	cbnz	r3, 801b0ee <__swsetup_r+0xc6>
 801b0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b0dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b0e0:	d1ba      	bne.n	801b058 <__swsetup_r+0x30>
 801b0e2:	bd70      	pop	{r4, r5, r6, pc}
 801b0e4:	0792      	lsls	r2, r2, #30
 801b0e6:	bf58      	it	pl
 801b0e8:	6963      	ldrpl	r3, [r4, #20]
 801b0ea:	60a3      	str	r3, [r4, #8]
 801b0ec:	e7f2      	b.n	801b0d4 <__swsetup_r+0xac>
 801b0ee:	2000      	movs	r0, #0
 801b0f0:	e7f7      	b.n	801b0e2 <__swsetup_r+0xba>
 801b0f2:	bf00      	nop
 801b0f4:	20000020 	.word	0x20000020
 801b0f8:	08021d78 	.word	0x08021d78
 801b0fc:	08021d98 	.word	0x08021d98
 801b100:	08021d58 	.word	0x08021d58

0801b104 <_close_r>:
 801b104:	b538      	push	{r3, r4, r5, lr}
 801b106:	4c06      	ldr	r4, [pc, #24]	; (801b120 <_close_r+0x1c>)
 801b108:	2300      	movs	r3, #0
 801b10a:	4605      	mov	r5, r0
 801b10c:	4608      	mov	r0, r1
 801b10e:	6023      	str	r3, [r4, #0]
 801b110:	f7e6 faf7 	bl	8001702 <_close>
 801b114:	1c43      	adds	r3, r0, #1
 801b116:	d102      	bne.n	801b11e <_close_r+0x1a>
 801b118:	6823      	ldr	r3, [r4, #0]
 801b11a:	b103      	cbz	r3, 801b11e <_close_r+0x1a>
 801b11c:	602b      	str	r3, [r5, #0]
 801b11e:	bd38      	pop	{r3, r4, r5, pc}
 801b120:	200280e0 	.word	0x200280e0

0801b124 <quorem>:
 801b124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b128:	6903      	ldr	r3, [r0, #16]
 801b12a:	690c      	ldr	r4, [r1, #16]
 801b12c:	42a3      	cmp	r3, r4
 801b12e:	4680      	mov	r8, r0
 801b130:	f2c0 8082 	blt.w	801b238 <quorem+0x114>
 801b134:	3c01      	subs	r4, #1
 801b136:	f101 0714 	add.w	r7, r1, #20
 801b13a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801b13e:	f100 0614 	add.w	r6, r0, #20
 801b142:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801b146:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801b14a:	eb06 030c 	add.w	r3, r6, ip
 801b14e:	3501      	adds	r5, #1
 801b150:	eb07 090c 	add.w	r9, r7, ip
 801b154:	9301      	str	r3, [sp, #4]
 801b156:	fbb0 f5f5 	udiv	r5, r0, r5
 801b15a:	b395      	cbz	r5, 801b1c2 <quorem+0x9e>
 801b15c:	f04f 0a00 	mov.w	sl, #0
 801b160:	4638      	mov	r0, r7
 801b162:	46b6      	mov	lr, r6
 801b164:	46d3      	mov	fp, sl
 801b166:	f850 2b04 	ldr.w	r2, [r0], #4
 801b16a:	b293      	uxth	r3, r2
 801b16c:	fb05 a303 	mla	r3, r5, r3, sl
 801b170:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b174:	b29b      	uxth	r3, r3
 801b176:	ebab 0303 	sub.w	r3, fp, r3
 801b17a:	0c12      	lsrs	r2, r2, #16
 801b17c:	f8de b000 	ldr.w	fp, [lr]
 801b180:	fb05 a202 	mla	r2, r5, r2, sl
 801b184:	fa13 f38b 	uxtah	r3, r3, fp
 801b188:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801b18c:	fa1f fb82 	uxth.w	fp, r2
 801b190:	f8de 2000 	ldr.w	r2, [lr]
 801b194:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801b198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b19c:	b29b      	uxth	r3, r3
 801b19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b1a2:	4581      	cmp	r9, r0
 801b1a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801b1a8:	f84e 3b04 	str.w	r3, [lr], #4
 801b1ac:	d2db      	bcs.n	801b166 <quorem+0x42>
 801b1ae:	f856 300c 	ldr.w	r3, [r6, ip]
 801b1b2:	b933      	cbnz	r3, 801b1c2 <quorem+0x9e>
 801b1b4:	9b01      	ldr	r3, [sp, #4]
 801b1b6:	3b04      	subs	r3, #4
 801b1b8:	429e      	cmp	r6, r3
 801b1ba:	461a      	mov	r2, r3
 801b1bc:	d330      	bcc.n	801b220 <quorem+0xfc>
 801b1be:	f8c8 4010 	str.w	r4, [r8, #16]
 801b1c2:	4640      	mov	r0, r8
 801b1c4:	f001 fd76 	bl	801ccb4 <__mcmp>
 801b1c8:	2800      	cmp	r0, #0
 801b1ca:	db25      	blt.n	801b218 <quorem+0xf4>
 801b1cc:	3501      	adds	r5, #1
 801b1ce:	4630      	mov	r0, r6
 801b1d0:	f04f 0c00 	mov.w	ip, #0
 801b1d4:	f857 2b04 	ldr.w	r2, [r7], #4
 801b1d8:	f8d0 e000 	ldr.w	lr, [r0]
 801b1dc:	b293      	uxth	r3, r2
 801b1de:	ebac 0303 	sub.w	r3, ip, r3
 801b1e2:	0c12      	lsrs	r2, r2, #16
 801b1e4:	fa13 f38e 	uxtah	r3, r3, lr
 801b1e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b1ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b1f0:	b29b      	uxth	r3, r3
 801b1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b1f6:	45b9      	cmp	r9, r7
 801b1f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b1fc:	f840 3b04 	str.w	r3, [r0], #4
 801b200:	d2e8      	bcs.n	801b1d4 <quorem+0xb0>
 801b202:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801b206:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b20a:	b92a      	cbnz	r2, 801b218 <quorem+0xf4>
 801b20c:	3b04      	subs	r3, #4
 801b20e:	429e      	cmp	r6, r3
 801b210:	461a      	mov	r2, r3
 801b212:	d30b      	bcc.n	801b22c <quorem+0x108>
 801b214:	f8c8 4010 	str.w	r4, [r8, #16]
 801b218:	4628      	mov	r0, r5
 801b21a:	b003      	add	sp, #12
 801b21c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b220:	6812      	ldr	r2, [r2, #0]
 801b222:	3b04      	subs	r3, #4
 801b224:	2a00      	cmp	r2, #0
 801b226:	d1ca      	bne.n	801b1be <quorem+0x9a>
 801b228:	3c01      	subs	r4, #1
 801b22a:	e7c5      	b.n	801b1b8 <quorem+0x94>
 801b22c:	6812      	ldr	r2, [r2, #0]
 801b22e:	3b04      	subs	r3, #4
 801b230:	2a00      	cmp	r2, #0
 801b232:	d1ef      	bne.n	801b214 <quorem+0xf0>
 801b234:	3c01      	subs	r4, #1
 801b236:	e7ea      	b.n	801b20e <quorem+0xea>
 801b238:	2000      	movs	r0, #0
 801b23a:	e7ee      	b.n	801b21a <quorem+0xf6>
 801b23c:	0000      	movs	r0, r0
	...

0801b240 <_dtoa_r>:
 801b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b244:	ec57 6b10 	vmov	r6, r7, d0
 801b248:	b097      	sub	sp, #92	; 0x5c
 801b24a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b24c:	9106      	str	r1, [sp, #24]
 801b24e:	4604      	mov	r4, r0
 801b250:	920b      	str	r2, [sp, #44]	; 0x2c
 801b252:	9312      	str	r3, [sp, #72]	; 0x48
 801b254:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b258:	e9cd 6700 	strd	r6, r7, [sp]
 801b25c:	b93d      	cbnz	r5, 801b26e <_dtoa_r+0x2e>
 801b25e:	2010      	movs	r0, #16
 801b260:	f001 facc 	bl	801c7fc <malloc>
 801b264:	6260      	str	r0, [r4, #36]	; 0x24
 801b266:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b26a:	6005      	str	r5, [r0, #0]
 801b26c:	60c5      	str	r5, [r0, #12]
 801b26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b270:	6819      	ldr	r1, [r3, #0]
 801b272:	b151      	cbz	r1, 801b28a <_dtoa_r+0x4a>
 801b274:	685a      	ldr	r2, [r3, #4]
 801b276:	604a      	str	r2, [r1, #4]
 801b278:	2301      	movs	r3, #1
 801b27a:	4093      	lsls	r3, r2
 801b27c:	608b      	str	r3, [r1, #8]
 801b27e:	4620      	mov	r0, r4
 801b280:	f001 faf8 	bl	801c874 <_Bfree>
 801b284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b286:	2200      	movs	r2, #0
 801b288:	601a      	str	r2, [r3, #0]
 801b28a:	1e3b      	subs	r3, r7, #0
 801b28c:	bfbb      	ittet	lt
 801b28e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b292:	9301      	strlt	r3, [sp, #4]
 801b294:	2300      	movge	r3, #0
 801b296:	2201      	movlt	r2, #1
 801b298:	bfac      	ite	ge
 801b29a:	f8c8 3000 	strge.w	r3, [r8]
 801b29e:	f8c8 2000 	strlt.w	r2, [r8]
 801b2a2:	4baf      	ldr	r3, [pc, #700]	; (801b560 <_dtoa_r+0x320>)
 801b2a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b2a8:	ea33 0308 	bics.w	r3, r3, r8
 801b2ac:	d114      	bne.n	801b2d8 <_dtoa_r+0x98>
 801b2ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2b0:	f242 730f 	movw	r3, #9999	; 0x270f
 801b2b4:	6013      	str	r3, [r2, #0]
 801b2b6:	9b00      	ldr	r3, [sp, #0]
 801b2b8:	b923      	cbnz	r3, 801b2c4 <_dtoa_r+0x84>
 801b2ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801b2be:	2800      	cmp	r0, #0
 801b2c0:	f000 8542 	beq.w	801bd48 <_dtoa_r+0xb08>
 801b2c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b2c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801b574 <_dtoa_r+0x334>
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	f000 8544 	beq.w	801bd58 <_dtoa_r+0xb18>
 801b2d0:	f10b 0303 	add.w	r3, fp, #3
 801b2d4:	f000 bd3e 	b.w	801bd54 <_dtoa_r+0xb14>
 801b2d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b2dc:	2200      	movs	r2, #0
 801b2de:	2300      	movs	r3, #0
 801b2e0:	4630      	mov	r0, r6
 801b2e2:	4639      	mov	r1, r7
 801b2e4:	f7e5 fc10 	bl	8000b08 <__aeabi_dcmpeq>
 801b2e8:	4681      	mov	r9, r0
 801b2ea:	b168      	cbz	r0, 801b308 <_dtoa_r+0xc8>
 801b2ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b2ee:	2301      	movs	r3, #1
 801b2f0:	6013      	str	r3, [r2, #0]
 801b2f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	f000 8524 	beq.w	801bd42 <_dtoa_r+0xb02>
 801b2fa:	4b9a      	ldr	r3, [pc, #616]	; (801b564 <_dtoa_r+0x324>)
 801b2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b2fe:	f103 3bff 	add.w	fp, r3, #4294967295
 801b302:	6013      	str	r3, [r2, #0]
 801b304:	f000 bd28 	b.w	801bd58 <_dtoa_r+0xb18>
 801b308:	aa14      	add	r2, sp, #80	; 0x50
 801b30a:	a915      	add	r1, sp, #84	; 0x54
 801b30c:	ec47 6b10 	vmov	d0, r6, r7
 801b310:	4620      	mov	r0, r4
 801b312:	f001 fdbd 	bl	801ce90 <__d2b>
 801b316:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801b31a:	9004      	str	r0, [sp, #16]
 801b31c:	2d00      	cmp	r5, #0
 801b31e:	d07c      	beq.n	801b41a <_dtoa_r+0x1da>
 801b320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b324:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801b328:	46b2      	mov	sl, r6
 801b32a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801b32e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b332:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801b336:	2200      	movs	r2, #0
 801b338:	4b8b      	ldr	r3, [pc, #556]	; (801b568 <_dtoa_r+0x328>)
 801b33a:	4650      	mov	r0, sl
 801b33c:	4659      	mov	r1, fp
 801b33e:	f7e4 ffc3 	bl	80002c8 <__aeabi_dsub>
 801b342:	a381      	add	r3, pc, #516	; (adr r3, 801b548 <_dtoa_r+0x308>)
 801b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b348:	f7e5 f976 	bl	8000638 <__aeabi_dmul>
 801b34c:	a380      	add	r3, pc, #512	; (adr r3, 801b550 <_dtoa_r+0x310>)
 801b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b352:	f7e4 ffbb 	bl	80002cc <__adddf3>
 801b356:	4606      	mov	r6, r0
 801b358:	4628      	mov	r0, r5
 801b35a:	460f      	mov	r7, r1
 801b35c:	f7e5 f902 	bl	8000564 <__aeabi_i2d>
 801b360:	a37d      	add	r3, pc, #500	; (adr r3, 801b558 <_dtoa_r+0x318>)
 801b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b366:	f7e5 f967 	bl	8000638 <__aeabi_dmul>
 801b36a:	4602      	mov	r2, r0
 801b36c:	460b      	mov	r3, r1
 801b36e:	4630      	mov	r0, r6
 801b370:	4639      	mov	r1, r7
 801b372:	f7e4 ffab 	bl	80002cc <__adddf3>
 801b376:	4606      	mov	r6, r0
 801b378:	460f      	mov	r7, r1
 801b37a:	f7e5 fc0d 	bl	8000b98 <__aeabi_d2iz>
 801b37e:	2200      	movs	r2, #0
 801b380:	4682      	mov	sl, r0
 801b382:	2300      	movs	r3, #0
 801b384:	4630      	mov	r0, r6
 801b386:	4639      	mov	r1, r7
 801b388:	f7e5 fbc8 	bl	8000b1c <__aeabi_dcmplt>
 801b38c:	b148      	cbz	r0, 801b3a2 <_dtoa_r+0x162>
 801b38e:	4650      	mov	r0, sl
 801b390:	f7e5 f8e8 	bl	8000564 <__aeabi_i2d>
 801b394:	4632      	mov	r2, r6
 801b396:	463b      	mov	r3, r7
 801b398:	f7e5 fbb6 	bl	8000b08 <__aeabi_dcmpeq>
 801b39c:	b908      	cbnz	r0, 801b3a2 <_dtoa_r+0x162>
 801b39e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b3a2:	f1ba 0f16 	cmp.w	sl, #22
 801b3a6:	d859      	bhi.n	801b45c <_dtoa_r+0x21c>
 801b3a8:	4970      	ldr	r1, [pc, #448]	; (801b56c <_dtoa_r+0x32c>)
 801b3aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801b3ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b3b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b3b6:	f7e5 fbcf 	bl	8000b58 <__aeabi_dcmpgt>
 801b3ba:	2800      	cmp	r0, #0
 801b3bc:	d050      	beq.n	801b460 <_dtoa_r+0x220>
 801b3be:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	930f      	str	r3, [sp, #60]	; 0x3c
 801b3c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b3c8:	1b5d      	subs	r5, r3, r5
 801b3ca:	f1b5 0801 	subs.w	r8, r5, #1
 801b3ce:	bf49      	itett	mi
 801b3d0:	f1c5 0301 	rsbmi	r3, r5, #1
 801b3d4:	2300      	movpl	r3, #0
 801b3d6:	9305      	strmi	r3, [sp, #20]
 801b3d8:	f04f 0800 	movmi.w	r8, #0
 801b3dc:	bf58      	it	pl
 801b3de:	9305      	strpl	r3, [sp, #20]
 801b3e0:	f1ba 0f00 	cmp.w	sl, #0
 801b3e4:	db3e      	blt.n	801b464 <_dtoa_r+0x224>
 801b3e6:	2300      	movs	r3, #0
 801b3e8:	44d0      	add	r8, sl
 801b3ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801b3ee:	9307      	str	r3, [sp, #28]
 801b3f0:	9b06      	ldr	r3, [sp, #24]
 801b3f2:	2b09      	cmp	r3, #9
 801b3f4:	f200 8090 	bhi.w	801b518 <_dtoa_r+0x2d8>
 801b3f8:	2b05      	cmp	r3, #5
 801b3fa:	bfc4      	itt	gt
 801b3fc:	3b04      	subgt	r3, #4
 801b3fe:	9306      	strgt	r3, [sp, #24]
 801b400:	9b06      	ldr	r3, [sp, #24]
 801b402:	f1a3 0302 	sub.w	r3, r3, #2
 801b406:	bfcc      	ite	gt
 801b408:	2500      	movgt	r5, #0
 801b40a:	2501      	movle	r5, #1
 801b40c:	2b03      	cmp	r3, #3
 801b40e:	f200 808f 	bhi.w	801b530 <_dtoa_r+0x2f0>
 801b412:	e8df f003 	tbb	[pc, r3]
 801b416:	7f7d      	.short	0x7f7d
 801b418:	7131      	.short	0x7131
 801b41a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801b41e:	441d      	add	r5, r3
 801b420:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801b424:	2820      	cmp	r0, #32
 801b426:	dd13      	ble.n	801b450 <_dtoa_r+0x210>
 801b428:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801b42c:	9b00      	ldr	r3, [sp, #0]
 801b42e:	fa08 f800 	lsl.w	r8, r8, r0
 801b432:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801b436:	fa23 f000 	lsr.w	r0, r3, r0
 801b43a:	ea48 0000 	orr.w	r0, r8, r0
 801b43e:	f7e5 f881 	bl	8000544 <__aeabi_ui2d>
 801b442:	2301      	movs	r3, #1
 801b444:	4682      	mov	sl, r0
 801b446:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801b44a:	3d01      	subs	r5, #1
 801b44c:	9313      	str	r3, [sp, #76]	; 0x4c
 801b44e:	e772      	b.n	801b336 <_dtoa_r+0xf6>
 801b450:	9b00      	ldr	r3, [sp, #0]
 801b452:	f1c0 0020 	rsb	r0, r0, #32
 801b456:	fa03 f000 	lsl.w	r0, r3, r0
 801b45a:	e7f0      	b.n	801b43e <_dtoa_r+0x1fe>
 801b45c:	2301      	movs	r3, #1
 801b45e:	e7b1      	b.n	801b3c4 <_dtoa_r+0x184>
 801b460:	900f      	str	r0, [sp, #60]	; 0x3c
 801b462:	e7b0      	b.n	801b3c6 <_dtoa_r+0x186>
 801b464:	9b05      	ldr	r3, [sp, #20]
 801b466:	eba3 030a 	sub.w	r3, r3, sl
 801b46a:	9305      	str	r3, [sp, #20]
 801b46c:	f1ca 0300 	rsb	r3, sl, #0
 801b470:	9307      	str	r3, [sp, #28]
 801b472:	2300      	movs	r3, #0
 801b474:	930e      	str	r3, [sp, #56]	; 0x38
 801b476:	e7bb      	b.n	801b3f0 <_dtoa_r+0x1b0>
 801b478:	2301      	movs	r3, #1
 801b47a:	930a      	str	r3, [sp, #40]	; 0x28
 801b47c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b47e:	2b00      	cmp	r3, #0
 801b480:	dd59      	ble.n	801b536 <_dtoa_r+0x2f6>
 801b482:	9302      	str	r3, [sp, #8]
 801b484:	4699      	mov	r9, r3
 801b486:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b488:	2200      	movs	r2, #0
 801b48a:	6072      	str	r2, [r6, #4]
 801b48c:	2204      	movs	r2, #4
 801b48e:	f102 0014 	add.w	r0, r2, #20
 801b492:	4298      	cmp	r0, r3
 801b494:	6871      	ldr	r1, [r6, #4]
 801b496:	d953      	bls.n	801b540 <_dtoa_r+0x300>
 801b498:	4620      	mov	r0, r4
 801b49a:	f001 f9b7 	bl	801c80c <_Balloc>
 801b49e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4a0:	6030      	str	r0, [r6, #0]
 801b4a2:	f1b9 0f0e 	cmp.w	r9, #14
 801b4a6:	f8d3 b000 	ldr.w	fp, [r3]
 801b4aa:	f200 80e6 	bhi.w	801b67a <_dtoa_r+0x43a>
 801b4ae:	2d00      	cmp	r5, #0
 801b4b0:	f000 80e3 	beq.w	801b67a <_dtoa_r+0x43a>
 801b4b4:	ed9d 7b00 	vldr	d7, [sp]
 801b4b8:	f1ba 0f00 	cmp.w	sl, #0
 801b4bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801b4c0:	dd74      	ble.n	801b5ac <_dtoa_r+0x36c>
 801b4c2:	4a2a      	ldr	r2, [pc, #168]	; (801b56c <_dtoa_r+0x32c>)
 801b4c4:	f00a 030f 	and.w	r3, sl, #15
 801b4c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b4cc:	ed93 7b00 	vldr	d7, [r3]
 801b4d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 801b4d4:	06f0      	lsls	r0, r6, #27
 801b4d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 801b4da:	d565      	bpl.n	801b5a8 <_dtoa_r+0x368>
 801b4dc:	4b24      	ldr	r3, [pc, #144]	; (801b570 <_dtoa_r+0x330>)
 801b4de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b4e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b4e6:	f7e5 f9d1 	bl	800088c <__aeabi_ddiv>
 801b4ea:	e9cd 0100 	strd	r0, r1, [sp]
 801b4ee:	f006 060f 	and.w	r6, r6, #15
 801b4f2:	2503      	movs	r5, #3
 801b4f4:	4f1e      	ldr	r7, [pc, #120]	; (801b570 <_dtoa_r+0x330>)
 801b4f6:	e04c      	b.n	801b592 <_dtoa_r+0x352>
 801b4f8:	2301      	movs	r3, #1
 801b4fa:	930a      	str	r3, [sp, #40]	; 0x28
 801b4fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4fe:	4453      	add	r3, sl
 801b500:	f103 0901 	add.w	r9, r3, #1
 801b504:	9302      	str	r3, [sp, #8]
 801b506:	464b      	mov	r3, r9
 801b508:	2b01      	cmp	r3, #1
 801b50a:	bfb8      	it	lt
 801b50c:	2301      	movlt	r3, #1
 801b50e:	e7ba      	b.n	801b486 <_dtoa_r+0x246>
 801b510:	2300      	movs	r3, #0
 801b512:	e7b2      	b.n	801b47a <_dtoa_r+0x23a>
 801b514:	2300      	movs	r3, #0
 801b516:	e7f0      	b.n	801b4fa <_dtoa_r+0x2ba>
 801b518:	2501      	movs	r5, #1
 801b51a:	2300      	movs	r3, #0
 801b51c:	9306      	str	r3, [sp, #24]
 801b51e:	950a      	str	r5, [sp, #40]	; 0x28
 801b520:	f04f 33ff 	mov.w	r3, #4294967295
 801b524:	9302      	str	r3, [sp, #8]
 801b526:	4699      	mov	r9, r3
 801b528:	2200      	movs	r2, #0
 801b52a:	2312      	movs	r3, #18
 801b52c:	920b      	str	r2, [sp, #44]	; 0x2c
 801b52e:	e7aa      	b.n	801b486 <_dtoa_r+0x246>
 801b530:	2301      	movs	r3, #1
 801b532:	930a      	str	r3, [sp, #40]	; 0x28
 801b534:	e7f4      	b.n	801b520 <_dtoa_r+0x2e0>
 801b536:	2301      	movs	r3, #1
 801b538:	9302      	str	r3, [sp, #8]
 801b53a:	4699      	mov	r9, r3
 801b53c:	461a      	mov	r2, r3
 801b53e:	e7f5      	b.n	801b52c <_dtoa_r+0x2ec>
 801b540:	3101      	adds	r1, #1
 801b542:	6071      	str	r1, [r6, #4]
 801b544:	0052      	lsls	r2, r2, #1
 801b546:	e7a2      	b.n	801b48e <_dtoa_r+0x24e>
 801b548:	636f4361 	.word	0x636f4361
 801b54c:	3fd287a7 	.word	0x3fd287a7
 801b550:	8b60c8b3 	.word	0x8b60c8b3
 801b554:	3fc68a28 	.word	0x3fc68a28
 801b558:	509f79fb 	.word	0x509f79fb
 801b55c:	3fd34413 	.word	0x3fd34413
 801b560:	7ff00000 	.word	0x7ff00000
 801b564:	08021edc 	.word	0x08021edc
 801b568:	3ff80000 	.word	0x3ff80000
 801b56c:	08021de0 	.word	0x08021de0
 801b570:	08021db8 	.word	0x08021db8
 801b574:	08021d52 	.word	0x08021d52
 801b578:	07f1      	lsls	r1, r6, #31
 801b57a:	d508      	bpl.n	801b58e <_dtoa_r+0x34e>
 801b57c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b580:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b584:	f7e5 f858 	bl	8000638 <__aeabi_dmul>
 801b588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b58c:	3501      	adds	r5, #1
 801b58e:	1076      	asrs	r6, r6, #1
 801b590:	3708      	adds	r7, #8
 801b592:	2e00      	cmp	r6, #0
 801b594:	d1f0      	bne.n	801b578 <_dtoa_r+0x338>
 801b596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801b59a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b59e:	f7e5 f975 	bl	800088c <__aeabi_ddiv>
 801b5a2:	e9cd 0100 	strd	r0, r1, [sp]
 801b5a6:	e01a      	b.n	801b5de <_dtoa_r+0x39e>
 801b5a8:	2502      	movs	r5, #2
 801b5aa:	e7a3      	b.n	801b4f4 <_dtoa_r+0x2b4>
 801b5ac:	f000 80a0 	beq.w	801b6f0 <_dtoa_r+0x4b0>
 801b5b0:	f1ca 0600 	rsb	r6, sl, #0
 801b5b4:	4b9f      	ldr	r3, [pc, #636]	; (801b834 <_dtoa_r+0x5f4>)
 801b5b6:	4fa0      	ldr	r7, [pc, #640]	; (801b838 <_dtoa_r+0x5f8>)
 801b5b8:	f006 020f 	and.w	r2, r6, #15
 801b5bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801b5c8:	f7e5 f836 	bl	8000638 <__aeabi_dmul>
 801b5cc:	e9cd 0100 	strd	r0, r1, [sp]
 801b5d0:	1136      	asrs	r6, r6, #4
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	2502      	movs	r5, #2
 801b5d6:	2e00      	cmp	r6, #0
 801b5d8:	d17f      	bne.n	801b6da <_dtoa_r+0x49a>
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d1e1      	bne.n	801b5a2 <_dtoa_r+0x362>
 801b5de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	f000 8087 	beq.w	801b6f4 <_dtoa_r+0x4b4>
 801b5e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	4b93      	ldr	r3, [pc, #588]	; (801b83c <_dtoa_r+0x5fc>)
 801b5ee:	4630      	mov	r0, r6
 801b5f0:	4639      	mov	r1, r7
 801b5f2:	f7e5 fa93 	bl	8000b1c <__aeabi_dcmplt>
 801b5f6:	2800      	cmp	r0, #0
 801b5f8:	d07c      	beq.n	801b6f4 <_dtoa_r+0x4b4>
 801b5fa:	f1b9 0f00 	cmp.w	r9, #0
 801b5fe:	d079      	beq.n	801b6f4 <_dtoa_r+0x4b4>
 801b600:	9b02      	ldr	r3, [sp, #8]
 801b602:	2b00      	cmp	r3, #0
 801b604:	dd35      	ble.n	801b672 <_dtoa_r+0x432>
 801b606:	f10a 33ff 	add.w	r3, sl, #4294967295
 801b60a:	9308      	str	r3, [sp, #32]
 801b60c:	4639      	mov	r1, r7
 801b60e:	2200      	movs	r2, #0
 801b610:	4b8b      	ldr	r3, [pc, #556]	; (801b840 <_dtoa_r+0x600>)
 801b612:	4630      	mov	r0, r6
 801b614:	f7e5 f810 	bl	8000638 <__aeabi_dmul>
 801b618:	e9cd 0100 	strd	r0, r1, [sp]
 801b61c:	9f02      	ldr	r7, [sp, #8]
 801b61e:	3501      	adds	r5, #1
 801b620:	4628      	mov	r0, r5
 801b622:	f7e4 ff9f 	bl	8000564 <__aeabi_i2d>
 801b626:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b62a:	f7e5 f805 	bl	8000638 <__aeabi_dmul>
 801b62e:	2200      	movs	r2, #0
 801b630:	4b84      	ldr	r3, [pc, #528]	; (801b844 <_dtoa_r+0x604>)
 801b632:	f7e4 fe4b 	bl	80002cc <__adddf3>
 801b636:	4605      	mov	r5, r0
 801b638:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801b63c:	2f00      	cmp	r7, #0
 801b63e:	d15d      	bne.n	801b6fc <_dtoa_r+0x4bc>
 801b640:	2200      	movs	r2, #0
 801b642:	4b81      	ldr	r3, [pc, #516]	; (801b848 <_dtoa_r+0x608>)
 801b644:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b648:	f7e4 fe3e 	bl	80002c8 <__aeabi_dsub>
 801b64c:	462a      	mov	r2, r5
 801b64e:	4633      	mov	r3, r6
 801b650:	e9cd 0100 	strd	r0, r1, [sp]
 801b654:	f7e5 fa80 	bl	8000b58 <__aeabi_dcmpgt>
 801b658:	2800      	cmp	r0, #0
 801b65a:	f040 8288 	bne.w	801bb6e <_dtoa_r+0x92e>
 801b65e:	462a      	mov	r2, r5
 801b660:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801b664:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b668:	f7e5 fa58 	bl	8000b1c <__aeabi_dcmplt>
 801b66c:	2800      	cmp	r0, #0
 801b66e:	f040 827c 	bne.w	801bb6a <_dtoa_r+0x92a>
 801b672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b676:	e9cd 2300 	strd	r2, r3, [sp]
 801b67a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	f2c0 8150 	blt.w	801b922 <_dtoa_r+0x6e2>
 801b682:	f1ba 0f0e 	cmp.w	sl, #14
 801b686:	f300 814c 	bgt.w	801b922 <_dtoa_r+0x6e2>
 801b68a:	4b6a      	ldr	r3, [pc, #424]	; (801b834 <_dtoa_r+0x5f4>)
 801b68c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b690:	ed93 7b00 	vldr	d7, [r3]
 801b694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b696:	2b00      	cmp	r3, #0
 801b698:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b69c:	f280 80d8 	bge.w	801b850 <_dtoa_r+0x610>
 801b6a0:	f1b9 0f00 	cmp.w	r9, #0
 801b6a4:	f300 80d4 	bgt.w	801b850 <_dtoa_r+0x610>
 801b6a8:	f040 825e 	bne.w	801bb68 <_dtoa_r+0x928>
 801b6ac:	2200      	movs	r2, #0
 801b6ae:	4b66      	ldr	r3, [pc, #408]	; (801b848 <_dtoa_r+0x608>)
 801b6b0:	ec51 0b17 	vmov	r0, r1, d7
 801b6b4:	f7e4 ffc0 	bl	8000638 <__aeabi_dmul>
 801b6b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b6bc:	f7e5 fa42 	bl	8000b44 <__aeabi_dcmpge>
 801b6c0:	464f      	mov	r7, r9
 801b6c2:	464e      	mov	r6, r9
 801b6c4:	2800      	cmp	r0, #0
 801b6c6:	f040 8234 	bne.w	801bb32 <_dtoa_r+0x8f2>
 801b6ca:	2331      	movs	r3, #49	; 0x31
 801b6cc:	f10b 0501 	add.w	r5, fp, #1
 801b6d0:	f88b 3000 	strb.w	r3, [fp]
 801b6d4:	f10a 0a01 	add.w	sl, sl, #1
 801b6d8:	e22f      	b.n	801bb3a <_dtoa_r+0x8fa>
 801b6da:	07f2      	lsls	r2, r6, #31
 801b6dc:	d505      	bpl.n	801b6ea <_dtoa_r+0x4aa>
 801b6de:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b6e2:	f7e4 ffa9 	bl	8000638 <__aeabi_dmul>
 801b6e6:	3501      	adds	r5, #1
 801b6e8:	2301      	movs	r3, #1
 801b6ea:	1076      	asrs	r6, r6, #1
 801b6ec:	3708      	adds	r7, #8
 801b6ee:	e772      	b.n	801b5d6 <_dtoa_r+0x396>
 801b6f0:	2502      	movs	r5, #2
 801b6f2:	e774      	b.n	801b5de <_dtoa_r+0x39e>
 801b6f4:	f8cd a020 	str.w	sl, [sp, #32]
 801b6f8:	464f      	mov	r7, r9
 801b6fa:	e791      	b.n	801b620 <_dtoa_r+0x3e0>
 801b6fc:	4b4d      	ldr	r3, [pc, #308]	; (801b834 <_dtoa_r+0x5f4>)
 801b6fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b702:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801b706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b708:	2b00      	cmp	r3, #0
 801b70a:	d047      	beq.n	801b79c <_dtoa_r+0x55c>
 801b70c:	4602      	mov	r2, r0
 801b70e:	460b      	mov	r3, r1
 801b710:	2000      	movs	r0, #0
 801b712:	494e      	ldr	r1, [pc, #312]	; (801b84c <_dtoa_r+0x60c>)
 801b714:	f7e5 f8ba 	bl	800088c <__aeabi_ddiv>
 801b718:	462a      	mov	r2, r5
 801b71a:	4633      	mov	r3, r6
 801b71c:	f7e4 fdd4 	bl	80002c8 <__aeabi_dsub>
 801b720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b724:	465d      	mov	r5, fp
 801b726:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b72a:	f7e5 fa35 	bl	8000b98 <__aeabi_d2iz>
 801b72e:	4606      	mov	r6, r0
 801b730:	f7e4 ff18 	bl	8000564 <__aeabi_i2d>
 801b734:	4602      	mov	r2, r0
 801b736:	460b      	mov	r3, r1
 801b738:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b73c:	f7e4 fdc4 	bl	80002c8 <__aeabi_dsub>
 801b740:	3630      	adds	r6, #48	; 0x30
 801b742:	f805 6b01 	strb.w	r6, [r5], #1
 801b746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b74a:	e9cd 0100 	strd	r0, r1, [sp]
 801b74e:	f7e5 f9e5 	bl	8000b1c <__aeabi_dcmplt>
 801b752:	2800      	cmp	r0, #0
 801b754:	d163      	bne.n	801b81e <_dtoa_r+0x5de>
 801b756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b75a:	2000      	movs	r0, #0
 801b75c:	4937      	ldr	r1, [pc, #220]	; (801b83c <_dtoa_r+0x5fc>)
 801b75e:	f7e4 fdb3 	bl	80002c8 <__aeabi_dsub>
 801b762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b766:	f7e5 f9d9 	bl	8000b1c <__aeabi_dcmplt>
 801b76a:	2800      	cmp	r0, #0
 801b76c:	f040 80b7 	bne.w	801b8de <_dtoa_r+0x69e>
 801b770:	eba5 030b 	sub.w	r3, r5, fp
 801b774:	429f      	cmp	r7, r3
 801b776:	f77f af7c 	ble.w	801b672 <_dtoa_r+0x432>
 801b77a:	2200      	movs	r2, #0
 801b77c:	4b30      	ldr	r3, [pc, #192]	; (801b840 <_dtoa_r+0x600>)
 801b77e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b782:	f7e4 ff59 	bl	8000638 <__aeabi_dmul>
 801b786:	2200      	movs	r2, #0
 801b788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b78c:	4b2c      	ldr	r3, [pc, #176]	; (801b840 <_dtoa_r+0x600>)
 801b78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b792:	f7e4 ff51 	bl	8000638 <__aeabi_dmul>
 801b796:	e9cd 0100 	strd	r0, r1, [sp]
 801b79a:	e7c4      	b.n	801b726 <_dtoa_r+0x4e6>
 801b79c:	462a      	mov	r2, r5
 801b79e:	4633      	mov	r3, r6
 801b7a0:	f7e4 ff4a 	bl	8000638 <__aeabi_dmul>
 801b7a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801b7a8:	eb0b 0507 	add.w	r5, fp, r7
 801b7ac:	465e      	mov	r6, fp
 801b7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b7b2:	f7e5 f9f1 	bl	8000b98 <__aeabi_d2iz>
 801b7b6:	4607      	mov	r7, r0
 801b7b8:	f7e4 fed4 	bl	8000564 <__aeabi_i2d>
 801b7bc:	3730      	adds	r7, #48	; 0x30
 801b7be:	4602      	mov	r2, r0
 801b7c0:	460b      	mov	r3, r1
 801b7c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b7c6:	f7e4 fd7f 	bl	80002c8 <__aeabi_dsub>
 801b7ca:	f806 7b01 	strb.w	r7, [r6], #1
 801b7ce:	42ae      	cmp	r6, r5
 801b7d0:	e9cd 0100 	strd	r0, r1, [sp]
 801b7d4:	f04f 0200 	mov.w	r2, #0
 801b7d8:	d126      	bne.n	801b828 <_dtoa_r+0x5e8>
 801b7da:	4b1c      	ldr	r3, [pc, #112]	; (801b84c <_dtoa_r+0x60c>)
 801b7dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801b7e0:	f7e4 fd74 	bl	80002cc <__adddf3>
 801b7e4:	4602      	mov	r2, r0
 801b7e6:	460b      	mov	r3, r1
 801b7e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b7ec:	f7e5 f9b4 	bl	8000b58 <__aeabi_dcmpgt>
 801b7f0:	2800      	cmp	r0, #0
 801b7f2:	d174      	bne.n	801b8de <_dtoa_r+0x69e>
 801b7f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801b7f8:	2000      	movs	r0, #0
 801b7fa:	4914      	ldr	r1, [pc, #80]	; (801b84c <_dtoa_r+0x60c>)
 801b7fc:	f7e4 fd64 	bl	80002c8 <__aeabi_dsub>
 801b800:	4602      	mov	r2, r0
 801b802:	460b      	mov	r3, r1
 801b804:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b808:	f7e5 f988 	bl	8000b1c <__aeabi_dcmplt>
 801b80c:	2800      	cmp	r0, #0
 801b80e:	f43f af30 	beq.w	801b672 <_dtoa_r+0x432>
 801b812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b816:	2b30      	cmp	r3, #48	; 0x30
 801b818:	f105 32ff 	add.w	r2, r5, #4294967295
 801b81c:	d002      	beq.n	801b824 <_dtoa_r+0x5e4>
 801b81e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b822:	e04a      	b.n	801b8ba <_dtoa_r+0x67a>
 801b824:	4615      	mov	r5, r2
 801b826:	e7f4      	b.n	801b812 <_dtoa_r+0x5d2>
 801b828:	4b05      	ldr	r3, [pc, #20]	; (801b840 <_dtoa_r+0x600>)
 801b82a:	f7e4 ff05 	bl	8000638 <__aeabi_dmul>
 801b82e:	e9cd 0100 	strd	r0, r1, [sp]
 801b832:	e7bc      	b.n	801b7ae <_dtoa_r+0x56e>
 801b834:	08021de0 	.word	0x08021de0
 801b838:	08021db8 	.word	0x08021db8
 801b83c:	3ff00000 	.word	0x3ff00000
 801b840:	40240000 	.word	0x40240000
 801b844:	401c0000 	.word	0x401c0000
 801b848:	40140000 	.word	0x40140000
 801b84c:	3fe00000 	.word	0x3fe00000
 801b850:	e9dd 6700 	ldrd	r6, r7, [sp]
 801b854:	465d      	mov	r5, fp
 801b856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b85a:	4630      	mov	r0, r6
 801b85c:	4639      	mov	r1, r7
 801b85e:	f7e5 f815 	bl	800088c <__aeabi_ddiv>
 801b862:	f7e5 f999 	bl	8000b98 <__aeabi_d2iz>
 801b866:	4680      	mov	r8, r0
 801b868:	f7e4 fe7c 	bl	8000564 <__aeabi_i2d>
 801b86c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b870:	f7e4 fee2 	bl	8000638 <__aeabi_dmul>
 801b874:	4602      	mov	r2, r0
 801b876:	460b      	mov	r3, r1
 801b878:	4630      	mov	r0, r6
 801b87a:	4639      	mov	r1, r7
 801b87c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801b880:	f7e4 fd22 	bl	80002c8 <__aeabi_dsub>
 801b884:	f805 6b01 	strb.w	r6, [r5], #1
 801b888:	eba5 060b 	sub.w	r6, r5, fp
 801b88c:	45b1      	cmp	r9, r6
 801b88e:	4602      	mov	r2, r0
 801b890:	460b      	mov	r3, r1
 801b892:	d139      	bne.n	801b908 <_dtoa_r+0x6c8>
 801b894:	f7e4 fd1a 	bl	80002cc <__adddf3>
 801b898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b89c:	4606      	mov	r6, r0
 801b89e:	460f      	mov	r7, r1
 801b8a0:	f7e5 f95a 	bl	8000b58 <__aeabi_dcmpgt>
 801b8a4:	b9c8      	cbnz	r0, 801b8da <_dtoa_r+0x69a>
 801b8a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b8aa:	4630      	mov	r0, r6
 801b8ac:	4639      	mov	r1, r7
 801b8ae:	f7e5 f92b 	bl	8000b08 <__aeabi_dcmpeq>
 801b8b2:	b110      	cbz	r0, 801b8ba <_dtoa_r+0x67a>
 801b8b4:	f018 0f01 	tst.w	r8, #1
 801b8b8:	d10f      	bne.n	801b8da <_dtoa_r+0x69a>
 801b8ba:	9904      	ldr	r1, [sp, #16]
 801b8bc:	4620      	mov	r0, r4
 801b8be:	f000 ffd9 	bl	801c874 <_Bfree>
 801b8c2:	2300      	movs	r3, #0
 801b8c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b8c6:	702b      	strb	r3, [r5, #0]
 801b8c8:	f10a 0301 	add.w	r3, sl, #1
 801b8cc:	6013      	str	r3, [r2, #0]
 801b8ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	f000 8241 	beq.w	801bd58 <_dtoa_r+0xb18>
 801b8d6:	601d      	str	r5, [r3, #0]
 801b8d8:	e23e      	b.n	801bd58 <_dtoa_r+0xb18>
 801b8da:	f8cd a020 	str.w	sl, [sp, #32]
 801b8de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b8e2:	2a39      	cmp	r2, #57	; 0x39
 801b8e4:	f105 33ff 	add.w	r3, r5, #4294967295
 801b8e8:	d108      	bne.n	801b8fc <_dtoa_r+0x6bc>
 801b8ea:	459b      	cmp	fp, r3
 801b8ec:	d10a      	bne.n	801b904 <_dtoa_r+0x6c4>
 801b8ee:	9b08      	ldr	r3, [sp, #32]
 801b8f0:	3301      	adds	r3, #1
 801b8f2:	9308      	str	r3, [sp, #32]
 801b8f4:	2330      	movs	r3, #48	; 0x30
 801b8f6:	f88b 3000 	strb.w	r3, [fp]
 801b8fa:	465b      	mov	r3, fp
 801b8fc:	781a      	ldrb	r2, [r3, #0]
 801b8fe:	3201      	adds	r2, #1
 801b900:	701a      	strb	r2, [r3, #0]
 801b902:	e78c      	b.n	801b81e <_dtoa_r+0x5de>
 801b904:	461d      	mov	r5, r3
 801b906:	e7ea      	b.n	801b8de <_dtoa_r+0x69e>
 801b908:	2200      	movs	r2, #0
 801b90a:	4b9b      	ldr	r3, [pc, #620]	; (801bb78 <_dtoa_r+0x938>)
 801b90c:	f7e4 fe94 	bl	8000638 <__aeabi_dmul>
 801b910:	2200      	movs	r2, #0
 801b912:	2300      	movs	r3, #0
 801b914:	4606      	mov	r6, r0
 801b916:	460f      	mov	r7, r1
 801b918:	f7e5 f8f6 	bl	8000b08 <__aeabi_dcmpeq>
 801b91c:	2800      	cmp	r0, #0
 801b91e:	d09a      	beq.n	801b856 <_dtoa_r+0x616>
 801b920:	e7cb      	b.n	801b8ba <_dtoa_r+0x67a>
 801b922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b924:	2a00      	cmp	r2, #0
 801b926:	f000 808b 	beq.w	801ba40 <_dtoa_r+0x800>
 801b92a:	9a06      	ldr	r2, [sp, #24]
 801b92c:	2a01      	cmp	r2, #1
 801b92e:	dc6e      	bgt.n	801ba0e <_dtoa_r+0x7ce>
 801b930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b932:	2a00      	cmp	r2, #0
 801b934:	d067      	beq.n	801ba06 <_dtoa_r+0x7c6>
 801b936:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b93a:	9f07      	ldr	r7, [sp, #28]
 801b93c:	9d05      	ldr	r5, [sp, #20]
 801b93e:	9a05      	ldr	r2, [sp, #20]
 801b940:	2101      	movs	r1, #1
 801b942:	441a      	add	r2, r3
 801b944:	4620      	mov	r0, r4
 801b946:	9205      	str	r2, [sp, #20]
 801b948:	4498      	add	r8, r3
 801b94a:	f001 f871 	bl	801ca30 <__i2b>
 801b94e:	4606      	mov	r6, r0
 801b950:	2d00      	cmp	r5, #0
 801b952:	dd0c      	ble.n	801b96e <_dtoa_r+0x72e>
 801b954:	f1b8 0f00 	cmp.w	r8, #0
 801b958:	dd09      	ble.n	801b96e <_dtoa_r+0x72e>
 801b95a:	4545      	cmp	r5, r8
 801b95c:	9a05      	ldr	r2, [sp, #20]
 801b95e:	462b      	mov	r3, r5
 801b960:	bfa8      	it	ge
 801b962:	4643      	movge	r3, r8
 801b964:	1ad2      	subs	r2, r2, r3
 801b966:	9205      	str	r2, [sp, #20]
 801b968:	1aed      	subs	r5, r5, r3
 801b96a:	eba8 0803 	sub.w	r8, r8, r3
 801b96e:	9b07      	ldr	r3, [sp, #28]
 801b970:	b1eb      	cbz	r3, 801b9ae <_dtoa_r+0x76e>
 801b972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b974:	2b00      	cmp	r3, #0
 801b976:	d067      	beq.n	801ba48 <_dtoa_r+0x808>
 801b978:	b18f      	cbz	r7, 801b99e <_dtoa_r+0x75e>
 801b97a:	4631      	mov	r1, r6
 801b97c:	463a      	mov	r2, r7
 801b97e:	4620      	mov	r0, r4
 801b980:	f001 f8f6 	bl	801cb70 <__pow5mult>
 801b984:	9a04      	ldr	r2, [sp, #16]
 801b986:	4601      	mov	r1, r0
 801b988:	4606      	mov	r6, r0
 801b98a:	4620      	mov	r0, r4
 801b98c:	f001 f859 	bl	801ca42 <__multiply>
 801b990:	9904      	ldr	r1, [sp, #16]
 801b992:	9008      	str	r0, [sp, #32]
 801b994:	4620      	mov	r0, r4
 801b996:	f000 ff6d 	bl	801c874 <_Bfree>
 801b99a:	9b08      	ldr	r3, [sp, #32]
 801b99c:	9304      	str	r3, [sp, #16]
 801b99e:	9b07      	ldr	r3, [sp, #28]
 801b9a0:	1bda      	subs	r2, r3, r7
 801b9a2:	d004      	beq.n	801b9ae <_dtoa_r+0x76e>
 801b9a4:	9904      	ldr	r1, [sp, #16]
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	f001 f8e2 	bl	801cb70 <__pow5mult>
 801b9ac:	9004      	str	r0, [sp, #16]
 801b9ae:	2101      	movs	r1, #1
 801b9b0:	4620      	mov	r0, r4
 801b9b2:	f001 f83d 	bl	801ca30 <__i2b>
 801b9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9b8:	4607      	mov	r7, r0
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	f000 81d0 	beq.w	801bd60 <_dtoa_r+0xb20>
 801b9c0:	461a      	mov	r2, r3
 801b9c2:	4601      	mov	r1, r0
 801b9c4:	4620      	mov	r0, r4
 801b9c6:	f001 f8d3 	bl	801cb70 <__pow5mult>
 801b9ca:	9b06      	ldr	r3, [sp, #24]
 801b9cc:	2b01      	cmp	r3, #1
 801b9ce:	4607      	mov	r7, r0
 801b9d0:	dc40      	bgt.n	801ba54 <_dtoa_r+0x814>
 801b9d2:	9b00      	ldr	r3, [sp, #0]
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d139      	bne.n	801ba4c <_dtoa_r+0x80c>
 801b9d8:	9b01      	ldr	r3, [sp, #4]
 801b9da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d136      	bne.n	801ba50 <_dtoa_r+0x810>
 801b9e2:	9b01      	ldr	r3, [sp, #4]
 801b9e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b9e8:	0d1b      	lsrs	r3, r3, #20
 801b9ea:	051b      	lsls	r3, r3, #20
 801b9ec:	b12b      	cbz	r3, 801b9fa <_dtoa_r+0x7ba>
 801b9ee:	9b05      	ldr	r3, [sp, #20]
 801b9f0:	3301      	adds	r3, #1
 801b9f2:	9305      	str	r3, [sp, #20]
 801b9f4:	f108 0801 	add.w	r8, r8, #1
 801b9f8:	2301      	movs	r3, #1
 801b9fa:	9307      	str	r3, [sp, #28]
 801b9fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9fe:	2b00      	cmp	r3, #0
 801ba00:	d12a      	bne.n	801ba58 <_dtoa_r+0x818>
 801ba02:	2001      	movs	r0, #1
 801ba04:	e030      	b.n	801ba68 <_dtoa_r+0x828>
 801ba06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ba08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801ba0c:	e795      	b.n	801b93a <_dtoa_r+0x6fa>
 801ba0e:	9b07      	ldr	r3, [sp, #28]
 801ba10:	f109 37ff 	add.w	r7, r9, #4294967295
 801ba14:	42bb      	cmp	r3, r7
 801ba16:	bfbf      	itttt	lt
 801ba18:	9b07      	ldrlt	r3, [sp, #28]
 801ba1a:	9707      	strlt	r7, [sp, #28]
 801ba1c:	1afa      	sublt	r2, r7, r3
 801ba1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801ba20:	bfbb      	ittet	lt
 801ba22:	189b      	addlt	r3, r3, r2
 801ba24:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ba26:	1bdf      	subge	r7, r3, r7
 801ba28:	2700      	movlt	r7, #0
 801ba2a:	f1b9 0f00 	cmp.w	r9, #0
 801ba2e:	bfb5      	itete	lt
 801ba30:	9b05      	ldrlt	r3, [sp, #20]
 801ba32:	9d05      	ldrge	r5, [sp, #20]
 801ba34:	eba3 0509 	sublt.w	r5, r3, r9
 801ba38:	464b      	movge	r3, r9
 801ba3a:	bfb8      	it	lt
 801ba3c:	2300      	movlt	r3, #0
 801ba3e:	e77e      	b.n	801b93e <_dtoa_r+0x6fe>
 801ba40:	9f07      	ldr	r7, [sp, #28]
 801ba42:	9d05      	ldr	r5, [sp, #20]
 801ba44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801ba46:	e783      	b.n	801b950 <_dtoa_r+0x710>
 801ba48:	9a07      	ldr	r2, [sp, #28]
 801ba4a:	e7ab      	b.n	801b9a4 <_dtoa_r+0x764>
 801ba4c:	2300      	movs	r3, #0
 801ba4e:	e7d4      	b.n	801b9fa <_dtoa_r+0x7ba>
 801ba50:	9b00      	ldr	r3, [sp, #0]
 801ba52:	e7d2      	b.n	801b9fa <_dtoa_r+0x7ba>
 801ba54:	2300      	movs	r3, #0
 801ba56:	9307      	str	r3, [sp, #28]
 801ba58:	693b      	ldr	r3, [r7, #16]
 801ba5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801ba5e:	6918      	ldr	r0, [r3, #16]
 801ba60:	f000 ff98 	bl	801c994 <__hi0bits>
 801ba64:	f1c0 0020 	rsb	r0, r0, #32
 801ba68:	4440      	add	r0, r8
 801ba6a:	f010 001f 	ands.w	r0, r0, #31
 801ba6e:	d047      	beq.n	801bb00 <_dtoa_r+0x8c0>
 801ba70:	f1c0 0320 	rsb	r3, r0, #32
 801ba74:	2b04      	cmp	r3, #4
 801ba76:	dd3b      	ble.n	801baf0 <_dtoa_r+0x8b0>
 801ba78:	9b05      	ldr	r3, [sp, #20]
 801ba7a:	f1c0 001c 	rsb	r0, r0, #28
 801ba7e:	4403      	add	r3, r0
 801ba80:	9305      	str	r3, [sp, #20]
 801ba82:	4405      	add	r5, r0
 801ba84:	4480      	add	r8, r0
 801ba86:	9b05      	ldr	r3, [sp, #20]
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	dd05      	ble.n	801ba98 <_dtoa_r+0x858>
 801ba8c:	461a      	mov	r2, r3
 801ba8e:	9904      	ldr	r1, [sp, #16]
 801ba90:	4620      	mov	r0, r4
 801ba92:	f001 f8bb 	bl	801cc0c <__lshift>
 801ba96:	9004      	str	r0, [sp, #16]
 801ba98:	f1b8 0f00 	cmp.w	r8, #0
 801ba9c:	dd05      	ble.n	801baaa <_dtoa_r+0x86a>
 801ba9e:	4639      	mov	r1, r7
 801baa0:	4642      	mov	r2, r8
 801baa2:	4620      	mov	r0, r4
 801baa4:	f001 f8b2 	bl	801cc0c <__lshift>
 801baa8:	4607      	mov	r7, r0
 801baaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801baac:	b353      	cbz	r3, 801bb04 <_dtoa_r+0x8c4>
 801baae:	4639      	mov	r1, r7
 801bab0:	9804      	ldr	r0, [sp, #16]
 801bab2:	f001 f8ff 	bl	801ccb4 <__mcmp>
 801bab6:	2800      	cmp	r0, #0
 801bab8:	da24      	bge.n	801bb04 <_dtoa_r+0x8c4>
 801baba:	2300      	movs	r3, #0
 801babc:	220a      	movs	r2, #10
 801babe:	9904      	ldr	r1, [sp, #16]
 801bac0:	4620      	mov	r0, r4
 801bac2:	f000 feee 	bl	801c8a2 <__multadd>
 801bac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bac8:	9004      	str	r0, [sp, #16]
 801baca:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bace:	2b00      	cmp	r3, #0
 801bad0:	f000 814d 	beq.w	801bd6e <_dtoa_r+0xb2e>
 801bad4:	2300      	movs	r3, #0
 801bad6:	4631      	mov	r1, r6
 801bad8:	220a      	movs	r2, #10
 801bada:	4620      	mov	r0, r4
 801badc:	f000 fee1 	bl	801c8a2 <__multadd>
 801bae0:	9b02      	ldr	r3, [sp, #8]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	4606      	mov	r6, r0
 801bae6:	dc4f      	bgt.n	801bb88 <_dtoa_r+0x948>
 801bae8:	9b06      	ldr	r3, [sp, #24]
 801baea:	2b02      	cmp	r3, #2
 801baec:	dd4c      	ble.n	801bb88 <_dtoa_r+0x948>
 801baee:	e011      	b.n	801bb14 <_dtoa_r+0x8d4>
 801baf0:	d0c9      	beq.n	801ba86 <_dtoa_r+0x846>
 801baf2:	9a05      	ldr	r2, [sp, #20]
 801baf4:	331c      	adds	r3, #28
 801baf6:	441a      	add	r2, r3
 801baf8:	9205      	str	r2, [sp, #20]
 801bafa:	441d      	add	r5, r3
 801bafc:	4498      	add	r8, r3
 801bafe:	e7c2      	b.n	801ba86 <_dtoa_r+0x846>
 801bb00:	4603      	mov	r3, r0
 801bb02:	e7f6      	b.n	801baf2 <_dtoa_r+0x8b2>
 801bb04:	f1b9 0f00 	cmp.w	r9, #0
 801bb08:	dc38      	bgt.n	801bb7c <_dtoa_r+0x93c>
 801bb0a:	9b06      	ldr	r3, [sp, #24]
 801bb0c:	2b02      	cmp	r3, #2
 801bb0e:	dd35      	ble.n	801bb7c <_dtoa_r+0x93c>
 801bb10:	f8cd 9008 	str.w	r9, [sp, #8]
 801bb14:	9b02      	ldr	r3, [sp, #8]
 801bb16:	b963      	cbnz	r3, 801bb32 <_dtoa_r+0x8f2>
 801bb18:	4639      	mov	r1, r7
 801bb1a:	2205      	movs	r2, #5
 801bb1c:	4620      	mov	r0, r4
 801bb1e:	f000 fec0 	bl	801c8a2 <__multadd>
 801bb22:	4601      	mov	r1, r0
 801bb24:	4607      	mov	r7, r0
 801bb26:	9804      	ldr	r0, [sp, #16]
 801bb28:	f001 f8c4 	bl	801ccb4 <__mcmp>
 801bb2c:	2800      	cmp	r0, #0
 801bb2e:	f73f adcc 	bgt.w	801b6ca <_dtoa_r+0x48a>
 801bb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb34:	465d      	mov	r5, fp
 801bb36:	ea6f 0a03 	mvn.w	sl, r3
 801bb3a:	f04f 0900 	mov.w	r9, #0
 801bb3e:	4639      	mov	r1, r7
 801bb40:	4620      	mov	r0, r4
 801bb42:	f000 fe97 	bl	801c874 <_Bfree>
 801bb46:	2e00      	cmp	r6, #0
 801bb48:	f43f aeb7 	beq.w	801b8ba <_dtoa_r+0x67a>
 801bb4c:	f1b9 0f00 	cmp.w	r9, #0
 801bb50:	d005      	beq.n	801bb5e <_dtoa_r+0x91e>
 801bb52:	45b1      	cmp	r9, r6
 801bb54:	d003      	beq.n	801bb5e <_dtoa_r+0x91e>
 801bb56:	4649      	mov	r1, r9
 801bb58:	4620      	mov	r0, r4
 801bb5a:	f000 fe8b 	bl	801c874 <_Bfree>
 801bb5e:	4631      	mov	r1, r6
 801bb60:	4620      	mov	r0, r4
 801bb62:	f000 fe87 	bl	801c874 <_Bfree>
 801bb66:	e6a8      	b.n	801b8ba <_dtoa_r+0x67a>
 801bb68:	2700      	movs	r7, #0
 801bb6a:	463e      	mov	r6, r7
 801bb6c:	e7e1      	b.n	801bb32 <_dtoa_r+0x8f2>
 801bb6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801bb72:	463e      	mov	r6, r7
 801bb74:	e5a9      	b.n	801b6ca <_dtoa_r+0x48a>
 801bb76:	bf00      	nop
 801bb78:	40240000 	.word	0x40240000
 801bb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb7e:	f8cd 9008 	str.w	r9, [sp, #8]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	f000 80fa 	beq.w	801bd7c <_dtoa_r+0xb3c>
 801bb88:	2d00      	cmp	r5, #0
 801bb8a:	dd05      	ble.n	801bb98 <_dtoa_r+0x958>
 801bb8c:	4631      	mov	r1, r6
 801bb8e:	462a      	mov	r2, r5
 801bb90:	4620      	mov	r0, r4
 801bb92:	f001 f83b 	bl	801cc0c <__lshift>
 801bb96:	4606      	mov	r6, r0
 801bb98:	9b07      	ldr	r3, [sp, #28]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d04c      	beq.n	801bc38 <_dtoa_r+0x9f8>
 801bb9e:	6871      	ldr	r1, [r6, #4]
 801bba0:	4620      	mov	r0, r4
 801bba2:	f000 fe33 	bl	801c80c <_Balloc>
 801bba6:	6932      	ldr	r2, [r6, #16]
 801bba8:	3202      	adds	r2, #2
 801bbaa:	4605      	mov	r5, r0
 801bbac:	0092      	lsls	r2, r2, #2
 801bbae:	f106 010c 	add.w	r1, r6, #12
 801bbb2:	300c      	adds	r0, #12
 801bbb4:	f7fd fb47 	bl	8019246 <memcpy>
 801bbb8:	2201      	movs	r2, #1
 801bbba:	4629      	mov	r1, r5
 801bbbc:	4620      	mov	r0, r4
 801bbbe:	f001 f825 	bl	801cc0c <__lshift>
 801bbc2:	9b00      	ldr	r3, [sp, #0]
 801bbc4:	f8cd b014 	str.w	fp, [sp, #20]
 801bbc8:	f003 0301 	and.w	r3, r3, #1
 801bbcc:	46b1      	mov	r9, r6
 801bbce:	9307      	str	r3, [sp, #28]
 801bbd0:	4606      	mov	r6, r0
 801bbd2:	4639      	mov	r1, r7
 801bbd4:	9804      	ldr	r0, [sp, #16]
 801bbd6:	f7ff faa5 	bl	801b124 <quorem>
 801bbda:	4649      	mov	r1, r9
 801bbdc:	4605      	mov	r5, r0
 801bbde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801bbe2:	9804      	ldr	r0, [sp, #16]
 801bbe4:	f001 f866 	bl	801ccb4 <__mcmp>
 801bbe8:	4632      	mov	r2, r6
 801bbea:	9000      	str	r0, [sp, #0]
 801bbec:	4639      	mov	r1, r7
 801bbee:	4620      	mov	r0, r4
 801bbf0:	f001 f87a 	bl	801cce8 <__mdiff>
 801bbf4:	68c3      	ldr	r3, [r0, #12]
 801bbf6:	4602      	mov	r2, r0
 801bbf8:	bb03      	cbnz	r3, 801bc3c <_dtoa_r+0x9fc>
 801bbfa:	4601      	mov	r1, r0
 801bbfc:	9008      	str	r0, [sp, #32]
 801bbfe:	9804      	ldr	r0, [sp, #16]
 801bc00:	f001 f858 	bl	801ccb4 <__mcmp>
 801bc04:	9a08      	ldr	r2, [sp, #32]
 801bc06:	4603      	mov	r3, r0
 801bc08:	4611      	mov	r1, r2
 801bc0a:	4620      	mov	r0, r4
 801bc0c:	9308      	str	r3, [sp, #32]
 801bc0e:	f000 fe31 	bl	801c874 <_Bfree>
 801bc12:	9b08      	ldr	r3, [sp, #32]
 801bc14:	b9a3      	cbnz	r3, 801bc40 <_dtoa_r+0xa00>
 801bc16:	9a06      	ldr	r2, [sp, #24]
 801bc18:	b992      	cbnz	r2, 801bc40 <_dtoa_r+0xa00>
 801bc1a:	9a07      	ldr	r2, [sp, #28]
 801bc1c:	b982      	cbnz	r2, 801bc40 <_dtoa_r+0xa00>
 801bc1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801bc22:	d029      	beq.n	801bc78 <_dtoa_r+0xa38>
 801bc24:	9b00      	ldr	r3, [sp, #0]
 801bc26:	2b00      	cmp	r3, #0
 801bc28:	dd01      	ble.n	801bc2e <_dtoa_r+0x9ee>
 801bc2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801bc2e:	9b05      	ldr	r3, [sp, #20]
 801bc30:	1c5d      	adds	r5, r3, #1
 801bc32:	f883 8000 	strb.w	r8, [r3]
 801bc36:	e782      	b.n	801bb3e <_dtoa_r+0x8fe>
 801bc38:	4630      	mov	r0, r6
 801bc3a:	e7c2      	b.n	801bbc2 <_dtoa_r+0x982>
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	e7e3      	b.n	801bc08 <_dtoa_r+0x9c8>
 801bc40:	9a00      	ldr	r2, [sp, #0]
 801bc42:	2a00      	cmp	r2, #0
 801bc44:	db04      	blt.n	801bc50 <_dtoa_r+0xa10>
 801bc46:	d125      	bne.n	801bc94 <_dtoa_r+0xa54>
 801bc48:	9a06      	ldr	r2, [sp, #24]
 801bc4a:	bb1a      	cbnz	r2, 801bc94 <_dtoa_r+0xa54>
 801bc4c:	9a07      	ldr	r2, [sp, #28]
 801bc4e:	bb0a      	cbnz	r2, 801bc94 <_dtoa_r+0xa54>
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	ddec      	ble.n	801bc2e <_dtoa_r+0x9ee>
 801bc54:	2201      	movs	r2, #1
 801bc56:	9904      	ldr	r1, [sp, #16]
 801bc58:	4620      	mov	r0, r4
 801bc5a:	f000 ffd7 	bl	801cc0c <__lshift>
 801bc5e:	4639      	mov	r1, r7
 801bc60:	9004      	str	r0, [sp, #16]
 801bc62:	f001 f827 	bl	801ccb4 <__mcmp>
 801bc66:	2800      	cmp	r0, #0
 801bc68:	dc03      	bgt.n	801bc72 <_dtoa_r+0xa32>
 801bc6a:	d1e0      	bne.n	801bc2e <_dtoa_r+0x9ee>
 801bc6c:	f018 0f01 	tst.w	r8, #1
 801bc70:	d0dd      	beq.n	801bc2e <_dtoa_r+0x9ee>
 801bc72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801bc76:	d1d8      	bne.n	801bc2a <_dtoa_r+0x9ea>
 801bc78:	9b05      	ldr	r3, [sp, #20]
 801bc7a:	9a05      	ldr	r2, [sp, #20]
 801bc7c:	1c5d      	adds	r5, r3, #1
 801bc7e:	2339      	movs	r3, #57	; 0x39
 801bc80:	7013      	strb	r3, [r2, #0]
 801bc82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bc86:	2b39      	cmp	r3, #57	; 0x39
 801bc88:	f105 32ff 	add.w	r2, r5, #4294967295
 801bc8c:	d04f      	beq.n	801bd2e <_dtoa_r+0xaee>
 801bc8e:	3301      	adds	r3, #1
 801bc90:	7013      	strb	r3, [r2, #0]
 801bc92:	e754      	b.n	801bb3e <_dtoa_r+0x8fe>
 801bc94:	9a05      	ldr	r2, [sp, #20]
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	f102 0501 	add.w	r5, r2, #1
 801bc9c:	dd06      	ble.n	801bcac <_dtoa_r+0xa6c>
 801bc9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801bca2:	d0e9      	beq.n	801bc78 <_dtoa_r+0xa38>
 801bca4:	f108 0801 	add.w	r8, r8, #1
 801bca8:	9b05      	ldr	r3, [sp, #20]
 801bcaa:	e7c2      	b.n	801bc32 <_dtoa_r+0x9f2>
 801bcac:	9a02      	ldr	r2, [sp, #8]
 801bcae:	f805 8c01 	strb.w	r8, [r5, #-1]
 801bcb2:	eba5 030b 	sub.w	r3, r5, fp
 801bcb6:	4293      	cmp	r3, r2
 801bcb8:	d021      	beq.n	801bcfe <_dtoa_r+0xabe>
 801bcba:	2300      	movs	r3, #0
 801bcbc:	220a      	movs	r2, #10
 801bcbe:	9904      	ldr	r1, [sp, #16]
 801bcc0:	4620      	mov	r0, r4
 801bcc2:	f000 fdee 	bl	801c8a2 <__multadd>
 801bcc6:	45b1      	cmp	r9, r6
 801bcc8:	9004      	str	r0, [sp, #16]
 801bcca:	f04f 0300 	mov.w	r3, #0
 801bcce:	f04f 020a 	mov.w	r2, #10
 801bcd2:	4649      	mov	r1, r9
 801bcd4:	4620      	mov	r0, r4
 801bcd6:	d105      	bne.n	801bce4 <_dtoa_r+0xaa4>
 801bcd8:	f000 fde3 	bl	801c8a2 <__multadd>
 801bcdc:	4681      	mov	r9, r0
 801bcde:	4606      	mov	r6, r0
 801bce0:	9505      	str	r5, [sp, #20]
 801bce2:	e776      	b.n	801bbd2 <_dtoa_r+0x992>
 801bce4:	f000 fddd 	bl	801c8a2 <__multadd>
 801bce8:	4631      	mov	r1, r6
 801bcea:	4681      	mov	r9, r0
 801bcec:	2300      	movs	r3, #0
 801bcee:	220a      	movs	r2, #10
 801bcf0:	4620      	mov	r0, r4
 801bcf2:	f000 fdd6 	bl	801c8a2 <__multadd>
 801bcf6:	4606      	mov	r6, r0
 801bcf8:	e7f2      	b.n	801bce0 <_dtoa_r+0xaa0>
 801bcfa:	f04f 0900 	mov.w	r9, #0
 801bcfe:	2201      	movs	r2, #1
 801bd00:	9904      	ldr	r1, [sp, #16]
 801bd02:	4620      	mov	r0, r4
 801bd04:	f000 ff82 	bl	801cc0c <__lshift>
 801bd08:	4639      	mov	r1, r7
 801bd0a:	9004      	str	r0, [sp, #16]
 801bd0c:	f000 ffd2 	bl	801ccb4 <__mcmp>
 801bd10:	2800      	cmp	r0, #0
 801bd12:	dcb6      	bgt.n	801bc82 <_dtoa_r+0xa42>
 801bd14:	d102      	bne.n	801bd1c <_dtoa_r+0xadc>
 801bd16:	f018 0f01 	tst.w	r8, #1
 801bd1a:	d1b2      	bne.n	801bc82 <_dtoa_r+0xa42>
 801bd1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bd20:	2b30      	cmp	r3, #48	; 0x30
 801bd22:	f105 32ff 	add.w	r2, r5, #4294967295
 801bd26:	f47f af0a 	bne.w	801bb3e <_dtoa_r+0x8fe>
 801bd2a:	4615      	mov	r5, r2
 801bd2c:	e7f6      	b.n	801bd1c <_dtoa_r+0xadc>
 801bd2e:	4593      	cmp	fp, r2
 801bd30:	d105      	bne.n	801bd3e <_dtoa_r+0xafe>
 801bd32:	2331      	movs	r3, #49	; 0x31
 801bd34:	f10a 0a01 	add.w	sl, sl, #1
 801bd38:	f88b 3000 	strb.w	r3, [fp]
 801bd3c:	e6ff      	b.n	801bb3e <_dtoa_r+0x8fe>
 801bd3e:	4615      	mov	r5, r2
 801bd40:	e79f      	b.n	801bc82 <_dtoa_r+0xa42>
 801bd42:	f8df b064 	ldr.w	fp, [pc, #100]	; 801bda8 <_dtoa_r+0xb68>
 801bd46:	e007      	b.n	801bd58 <_dtoa_r+0xb18>
 801bd48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bd4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801bdac <_dtoa_r+0xb6c>
 801bd4e:	b11b      	cbz	r3, 801bd58 <_dtoa_r+0xb18>
 801bd50:	f10b 0308 	add.w	r3, fp, #8
 801bd54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bd56:	6013      	str	r3, [r2, #0]
 801bd58:	4658      	mov	r0, fp
 801bd5a:	b017      	add	sp, #92	; 0x5c
 801bd5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd60:	9b06      	ldr	r3, [sp, #24]
 801bd62:	2b01      	cmp	r3, #1
 801bd64:	f77f ae35 	ble.w	801b9d2 <_dtoa_r+0x792>
 801bd68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bd6a:	9307      	str	r3, [sp, #28]
 801bd6c:	e649      	b.n	801ba02 <_dtoa_r+0x7c2>
 801bd6e:	9b02      	ldr	r3, [sp, #8]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	dc03      	bgt.n	801bd7c <_dtoa_r+0xb3c>
 801bd74:	9b06      	ldr	r3, [sp, #24]
 801bd76:	2b02      	cmp	r3, #2
 801bd78:	f73f aecc 	bgt.w	801bb14 <_dtoa_r+0x8d4>
 801bd7c:	465d      	mov	r5, fp
 801bd7e:	4639      	mov	r1, r7
 801bd80:	9804      	ldr	r0, [sp, #16]
 801bd82:	f7ff f9cf 	bl	801b124 <quorem>
 801bd86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801bd8a:	f805 8b01 	strb.w	r8, [r5], #1
 801bd8e:	9a02      	ldr	r2, [sp, #8]
 801bd90:	eba5 030b 	sub.w	r3, r5, fp
 801bd94:	429a      	cmp	r2, r3
 801bd96:	ddb0      	ble.n	801bcfa <_dtoa_r+0xaba>
 801bd98:	2300      	movs	r3, #0
 801bd9a:	220a      	movs	r2, #10
 801bd9c:	9904      	ldr	r1, [sp, #16]
 801bd9e:	4620      	mov	r0, r4
 801bda0:	f000 fd7f 	bl	801c8a2 <__multadd>
 801bda4:	9004      	str	r0, [sp, #16]
 801bda6:	e7ea      	b.n	801bd7e <_dtoa_r+0xb3e>
 801bda8:	08021edb 	.word	0x08021edb
 801bdac:	08021d49 	.word	0x08021d49

0801bdb0 <__sflush_r>:
 801bdb0:	898a      	ldrh	r2, [r1, #12]
 801bdb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdb6:	4605      	mov	r5, r0
 801bdb8:	0710      	lsls	r0, r2, #28
 801bdba:	460c      	mov	r4, r1
 801bdbc:	d458      	bmi.n	801be70 <__sflush_r+0xc0>
 801bdbe:	684b      	ldr	r3, [r1, #4]
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	dc05      	bgt.n	801bdd0 <__sflush_r+0x20>
 801bdc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	dc02      	bgt.n	801bdd0 <__sflush_r+0x20>
 801bdca:	2000      	movs	r0, #0
 801bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bdd2:	2e00      	cmp	r6, #0
 801bdd4:	d0f9      	beq.n	801bdca <__sflush_r+0x1a>
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bddc:	682f      	ldr	r7, [r5, #0]
 801bdde:	6a21      	ldr	r1, [r4, #32]
 801bde0:	602b      	str	r3, [r5, #0]
 801bde2:	d032      	beq.n	801be4a <__sflush_r+0x9a>
 801bde4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bde6:	89a3      	ldrh	r3, [r4, #12]
 801bde8:	075a      	lsls	r2, r3, #29
 801bdea:	d505      	bpl.n	801bdf8 <__sflush_r+0x48>
 801bdec:	6863      	ldr	r3, [r4, #4]
 801bdee:	1ac0      	subs	r0, r0, r3
 801bdf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bdf2:	b10b      	cbz	r3, 801bdf8 <__sflush_r+0x48>
 801bdf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bdf6:	1ac0      	subs	r0, r0, r3
 801bdf8:	2300      	movs	r3, #0
 801bdfa:	4602      	mov	r2, r0
 801bdfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bdfe:	6a21      	ldr	r1, [r4, #32]
 801be00:	4628      	mov	r0, r5
 801be02:	47b0      	blx	r6
 801be04:	1c43      	adds	r3, r0, #1
 801be06:	89a3      	ldrh	r3, [r4, #12]
 801be08:	d106      	bne.n	801be18 <__sflush_r+0x68>
 801be0a:	6829      	ldr	r1, [r5, #0]
 801be0c:	291d      	cmp	r1, #29
 801be0e:	d848      	bhi.n	801bea2 <__sflush_r+0xf2>
 801be10:	4a29      	ldr	r2, [pc, #164]	; (801beb8 <__sflush_r+0x108>)
 801be12:	40ca      	lsrs	r2, r1
 801be14:	07d6      	lsls	r6, r2, #31
 801be16:	d544      	bpl.n	801bea2 <__sflush_r+0xf2>
 801be18:	2200      	movs	r2, #0
 801be1a:	6062      	str	r2, [r4, #4]
 801be1c:	04d9      	lsls	r1, r3, #19
 801be1e:	6922      	ldr	r2, [r4, #16]
 801be20:	6022      	str	r2, [r4, #0]
 801be22:	d504      	bpl.n	801be2e <__sflush_r+0x7e>
 801be24:	1c42      	adds	r2, r0, #1
 801be26:	d101      	bne.n	801be2c <__sflush_r+0x7c>
 801be28:	682b      	ldr	r3, [r5, #0]
 801be2a:	b903      	cbnz	r3, 801be2e <__sflush_r+0x7e>
 801be2c:	6560      	str	r0, [r4, #84]	; 0x54
 801be2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801be30:	602f      	str	r7, [r5, #0]
 801be32:	2900      	cmp	r1, #0
 801be34:	d0c9      	beq.n	801bdca <__sflush_r+0x1a>
 801be36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801be3a:	4299      	cmp	r1, r3
 801be3c:	d002      	beq.n	801be44 <__sflush_r+0x94>
 801be3e:	4628      	mov	r0, r5
 801be40:	f001 f8f2 	bl	801d028 <_free_r>
 801be44:	2000      	movs	r0, #0
 801be46:	6360      	str	r0, [r4, #52]	; 0x34
 801be48:	e7c0      	b.n	801bdcc <__sflush_r+0x1c>
 801be4a:	2301      	movs	r3, #1
 801be4c:	4628      	mov	r0, r5
 801be4e:	47b0      	blx	r6
 801be50:	1c41      	adds	r1, r0, #1
 801be52:	d1c8      	bne.n	801bde6 <__sflush_r+0x36>
 801be54:	682b      	ldr	r3, [r5, #0]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d0c5      	beq.n	801bde6 <__sflush_r+0x36>
 801be5a:	2b1d      	cmp	r3, #29
 801be5c:	d001      	beq.n	801be62 <__sflush_r+0xb2>
 801be5e:	2b16      	cmp	r3, #22
 801be60:	d101      	bne.n	801be66 <__sflush_r+0xb6>
 801be62:	602f      	str	r7, [r5, #0]
 801be64:	e7b1      	b.n	801bdca <__sflush_r+0x1a>
 801be66:	89a3      	ldrh	r3, [r4, #12]
 801be68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801be6c:	81a3      	strh	r3, [r4, #12]
 801be6e:	e7ad      	b.n	801bdcc <__sflush_r+0x1c>
 801be70:	690f      	ldr	r7, [r1, #16]
 801be72:	2f00      	cmp	r7, #0
 801be74:	d0a9      	beq.n	801bdca <__sflush_r+0x1a>
 801be76:	0793      	lsls	r3, r2, #30
 801be78:	680e      	ldr	r6, [r1, #0]
 801be7a:	bf08      	it	eq
 801be7c:	694b      	ldreq	r3, [r1, #20]
 801be7e:	600f      	str	r7, [r1, #0]
 801be80:	bf18      	it	ne
 801be82:	2300      	movne	r3, #0
 801be84:	eba6 0807 	sub.w	r8, r6, r7
 801be88:	608b      	str	r3, [r1, #8]
 801be8a:	f1b8 0f00 	cmp.w	r8, #0
 801be8e:	dd9c      	ble.n	801bdca <__sflush_r+0x1a>
 801be90:	4643      	mov	r3, r8
 801be92:	463a      	mov	r2, r7
 801be94:	6a21      	ldr	r1, [r4, #32]
 801be96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801be98:	4628      	mov	r0, r5
 801be9a:	47b0      	blx	r6
 801be9c:	2800      	cmp	r0, #0
 801be9e:	dc06      	bgt.n	801beae <__sflush_r+0xfe>
 801bea0:	89a3      	ldrh	r3, [r4, #12]
 801bea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bea6:	81a3      	strh	r3, [r4, #12]
 801bea8:	f04f 30ff 	mov.w	r0, #4294967295
 801beac:	e78e      	b.n	801bdcc <__sflush_r+0x1c>
 801beae:	4407      	add	r7, r0
 801beb0:	eba8 0800 	sub.w	r8, r8, r0
 801beb4:	e7e9      	b.n	801be8a <__sflush_r+0xda>
 801beb6:	bf00      	nop
 801beb8:	20400001 	.word	0x20400001

0801bebc <_fflush_r>:
 801bebc:	b538      	push	{r3, r4, r5, lr}
 801bebe:	690b      	ldr	r3, [r1, #16]
 801bec0:	4605      	mov	r5, r0
 801bec2:	460c      	mov	r4, r1
 801bec4:	b1db      	cbz	r3, 801befe <_fflush_r+0x42>
 801bec6:	b118      	cbz	r0, 801bed0 <_fflush_r+0x14>
 801bec8:	6983      	ldr	r3, [r0, #24]
 801beca:	b90b      	cbnz	r3, 801bed0 <_fflush_r+0x14>
 801becc:	f000 f860 	bl	801bf90 <__sinit>
 801bed0:	4b0c      	ldr	r3, [pc, #48]	; (801bf04 <_fflush_r+0x48>)
 801bed2:	429c      	cmp	r4, r3
 801bed4:	d109      	bne.n	801beea <_fflush_r+0x2e>
 801bed6:	686c      	ldr	r4, [r5, #4]
 801bed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bedc:	b17b      	cbz	r3, 801befe <_fflush_r+0x42>
 801bede:	4621      	mov	r1, r4
 801bee0:	4628      	mov	r0, r5
 801bee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bee6:	f7ff bf63 	b.w	801bdb0 <__sflush_r>
 801beea:	4b07      	ldr	r3, [pc, #28]	; (801bf08 <_fflush_r+0x4c>)
 801beec:	429c      	cmp	r4, r3
 801beee:	d101      	bne.n	801bef4 <_fflush_r+0x38>
 801bef0:	68ac      	ldr	r4, [r5, #8]
 801bef2:	e7f1      	b.n	801bed8 <_fflush_r+0x1c>
 801bef4:	4b05      	ldr	r3, [pc, #20]	; (801bf0c <_fflush_r+0x50>)
 801bef6:	429c      	cmp	r4, r3
 801bef8:	bf08      	it	eq
 801befa:	68ec      	ldreq	r4, [r5, #12]
 801befc:	e7ec      	b.n	801bed8 <_fflush_r+0x1c>
 801befe:	2000      	movs	r0, #0
 801bf00:	bd38      	pop	{r3, r4, r5, pc}
 801bf02:	bf00      	nop
 801bf04:	08021d78 	.word	0x08021d78
 801bf08:	08021d98 	.word	0x08021d98
 801bf0c:	08021d58 	.word	0x08021d58

0801bf10 <std>:
 801bf10:	2300      	movs	r3, #0
 801bf12:	b510      	push	{r4, lr}
 801bf14:	4604      	mov	r4, r0
 801bf16:	e9c0 3300 	strd	r3, r3, [r0]
 801bf1a:	6083      	str	r3, [r0, #8]
 801bf1c:	8181      	strh	r1, [r0, #12]
 801bf1e:	6643      	str	r3, [r0, #100]	; 0x64
 801bf20:	81c2      	strh	r2, [r0, #14]
 801bf22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bf26:	6183      	str	r3, [r0, #24]
 801bf28:	4619      	mov	r1, r3
 801bf2a:	2208      	movs	r2, #8
 801bf2c:	305c      	adds	r0, #92	; 0x5c
 801bf2e:	f7fd f9ae 	bl	801928e <memset>
 801bf32:	4b05      	ldr	r3, [pc, #20]	; (801bf48 <std+0x38>)
 801bf34:	6263      	str	r3, [r4, #36]	; 0x24
 801bf36:	4b05      	ldr	r3, [pc, #20]	; (801bf4c <std+0x3c>)
 801bf38:	62a3      	str	r3, [r4, #40]	; 0x28
 801bf3a:	4b05      	ldr	r3, [pc, #20]	; (801bf50 <std+0x40>)
 801bf3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bf3e:	4b05      	ldr	r3, [pc, #20]	; (801bf54 <std+0x44>)
 801bf40:	6224      	str	r4, [r4, #32]
 801bf42:	6323      	str	r3, [r4, #48]	; 0x30
 801bf44:	bd10      	pop	{r4, pc}
 801bf46:	bf00      	nop
 801bf48:	0801a11d 	.word	0x0801a11d
 801bf4c:	0801a143 	.word	0x0801a143
 801bf50:	0801a17b 	.word	0x0801a17b
 801bf54:	0801a19f 	.word	0x0801a19f

0801bf58 <_cleanup_r>:
 801bf58:	4901      	ldr	r1, [pc, #4]	; (801bf60 <_cleanup_r+0x8>)
 801bf5a:	f000 b885 	b.w	801c068 <_fwalk_reent>
 801bf5e:	bf00      	nop
 801bf60:	0801bebd 	.word	0x0801bebd

0801bf64 <__sfmoreglue>:
 801bf64:	b570      	push	{r4, r5, r6, lr}
 801bf66:	1e4a      	subs	r2, r1, #1
 801bf68:	2568      	movs	r5, #104	; 0x68
 801bf6a:	4355      	muls	r5, r2
 801bf6c:	460e      	mov	r6, r1
 801bf6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bf72:	f001 f8a7 	bl	801d0c4 <_malloc_r>
 801bf76:	4604      	mov	r4, r0
 801bf78:	b140      	cbz	r0, 801bf8c <__sfmoreglue+0x28>
 801bf7a:	2100      	movs	r1, #0
 801bf7c:	e9c0 1600 	strd	r1, r6, [r0]
 801bf80:	300c      	adds	r0, #12
 801bf82:	60a0      	str	r0, [r4, #8]
 801bf84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bf88:	f7fd f981 	bl	801928e <memset>
 801bf8c:	4620      	mov	r0, r4
 801bf8e:	bd70      	pop	{r4, r5, r6, pc}

0801bf90 <__sinit>:
 801bf90:	6983      	ldr	r3, [r0, #24]
 801bf92:	b510      	push	{r4, lr}
 801bf94:	4604      	mov	r4, r0
 801bf96:	bb33      	cbnz	r3, 801bfe6 <__sinit+0x56>
 801bf98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801bf9c:	6503      	str	r3, [r0, #80]	; 0x50
 801bf9e:	4b12      	ldr	r3, [pc, #72]	; (801bfe8 <__sinit+0x58>)
 801bfa0:	4a12      	ldr	r2, [pc, #72]	; (801bfec <__sinit+0x5c>)
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	6282      	str	r2, [r0, #40]	; 0x28
 801bfa6:	4298      	cmp	r0, r3
 801bfa8:	bf04      	itt	eq
 801bfaa:	2301      	moveq	r3, #1
 801bfac:	6183      	streq	r3, [r0, #24]
 801bfae:	f000 f81f 	bl	801bff0 <__sfp>
 801bfb2:	6060      	str	r0, [r4, #4]
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f000 f81b 	bl	801bff0 <__sfp>
 801bfba:	60a0      	str	r0, [r4, #8]
 801bfbc:	4620      	mov	r0, r4
 801bfbe:	f000 f817 	bl	801bff0 <__sfp>
 801bfc2:	2200      	movs	r2, #0
 801bfc4:	60e0      	str	r0, [r4, #12]
 801bfc6:	2104      	movs	r1, #4
 801bfc8:	6860      	ldr	r0, [r4, #4]
 801bfca:	f7ff ffa1 	bl	801bf10 <std>
 801bfce:	2201      	movs	r2, #1
 801bfd0:	2109      	movs	r1, #9
 801bfd2:	68a0      	ldr	r0, [r4, #8]
 801bfd4:	f7ff ff9c 	bl	801bf10 <std>
 801bfd8:	2202      	movs	r2, #2
 801bfda:	2112      	movs	r1, #18
 801bfdc:	68e0      	ldr	r0, [r4, #12]
 801bfde:	f7ff ff97 	bl	801bf10 <std>
 801bfe2:	2301      	movs	r3, #1
 801bfe4:	61a3      	str	r3, [r4, #24]
 801bfe6:	bd10      	pop	{r4, pc}
 801bfe8:	08021bb0 	.word	0x08021bb0
 801bfec:	0801bf59 	.word	0x0801bf59

0801bff0 <__sfp>:
 801bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bff2:	4b1b      	ldr	r3, [pc, #108]	; (801c060 <__sfp+0x70>)
 801bff4:	681e      	ldr	r6, [r3, #0]
 801bff6:	69b3      	ldr	r3, [r6, #24]
 801bff8:	4607      	mov	r7, r0
 801bffa:	b913      	cbnz	r3, 801c002 <__sfp+0x12>
 801bffc:	4630      	mov	r0, r6
 801bffe:	f7ff ffc7 	bl	801bf90 <__sinit>
 801c002:	3648      	adds	r6, #72	; 0x48
 801c004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c008:	3b01      	subs	r3, #1
 801c00a:	d503      	bpl.n	801c014 <__sfp+0x24>
 801c00c:	6833      	ldr	r3, [r6, #0]
 801c00e:	b133      	cbz	r3, 801c01e <__sfp+0x2e>
 801c010:	6836      	ldr	r6, [r6, #0]
 801c012:	e7f7      	b.n	801c004 <__sfp+0x14>
 801c014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c018:	b16d      	cbz	r5, 801c036 <__sfp+0x46>
 801c01a:	3468      	adds	r4, #104	; 0x68
 801c01c:	e7f4      	b.n	801c008 <__sfp+0x18>
 801c01e:	2104      	movs	r1, #4
 801c020:	4638      	mov	r0, r7
 801c022:	f7ff ff9f 	bl	801bf64 <__sfmoreglue>
 801c026:	6030      	str	r0, [r6, #0]
 801c028:	2800      	cmp	r0, #0
 801c02a:	d1f1      	bne.n	801c010 <__sfp+0x20>
 801c02c:	230c      	movs	r3, #12
 801c02e:	603b      	str	r3, [r7, #0]
 801c030:	4604      	mov	r4, r0
 801c032:	4620      	mov	r0, r4
 801c034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c036:	4b0b      	ldr	r3, [pc, #44]	; (801c064 <__sfp+0x74>)
 801c038:	6665      	str	r5, [r4, #100]	; 0x64
 801c03a:	e9c4 5500 	strd	r5, r5, [r4]
 801c03e:	60a5      	str	r5, [r4, #8]
 801c040:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c044:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c048:	2208      	movs	r2, #8
 801c04a:	4629      	mov	r1, r5
 801c04c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c050:	f7fd f91d 	bl	801928e <memset>
 801c054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c05c:	e7e9      	b.n	801c032 <__sfp+0x42>
 801c05e:	bf00      	nop
 801c060:	08021bb0 	.word	0x08021bb0
 801c064:	ffff0001 	.word	0xffff0001

0801c068 <_fwalk_reent>:
 801c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c06c:	4680      	mov	r8, r0
 801c06e:	4689      	mov	r9, r1
 801c070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c074:	2600      	movs	r6, #0
 801c076:	b914      	cbnz	r4, 801c07e <_fwalk_reent+0x16>
 801c078:	4630      	mov	r0, r6
 801c07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c07e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c082:	3f01      	subs	r7, #1
 801c084:	d501      	bpl.n	801c08a <_fwalk_reent+0x22>
 801c086:	6824      	ldr	r4, [r4, #0]
 801c088:	e7f5      	b.n	801c076 <_fwalk_reent+0xe>
 801c08a:	89ab      	ldrh	r3, [r5, #12]
 801c08c:	2b01      	cmp	r3, #1
 801c08e:	d907      	bls.n	801c0a0 <_fwalk_reent+0x38>
 801c090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c094:	3301      	adds	r3, #1
 801c096:	d003      	beq.n	801c0a0 <_fwalk_reent+0x38>
 801c098:	4629      	mov	r1, r5
 801c09a:	4640      	mov	r0, r8
 801c09c:	47c8      	blx	r9
 801c09e:	4306      	orrs	r6, r0
 801c0a0:	3568      	adds	r5, #104	; 0x68
 801c0a2:	e7ee      	b.n	801c082 <_fwalk_reent+0x1a>

0801c0a4 <rshift>:
 801c0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c0a6:	6906      	ldr	r6, [r0, #16]
 801c0a8:	114b      	asrs	r3, r1, #5
 801c0aa:	429e      	cmp	r6, r3
 801c0ac:	f100 0414 	add.w	r4, r0, #20
 801c0b0:	dd30      	ble.n	801c114 <rshift+0x70>
 801c0b2:	f011 011f 	ands.w	r1, r1, #31
 801c0b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801c0ba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801c0be:	d108      	bne.n	801c0d2 <rshift+0x2e>
 801c0c0:	4621      	mov	r1, r4
 801c0c2:	42b2      	cmp	r2, r6
 801c0c4:	460b      	mov	r3, r1
 801c0c6:	d211      	bcs.n	801c0ec <rshift+0x48>
 801c0c8:	f852 3b04 	ldr.w	r3, [r2], #4
 801c0cc:	f841 3b04 	str.w	r3, [r1], #4
 801c0d0:	e7f7      	b.n	801c0c2 <rshift+0x1e>
 801c0d2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801c0d6:	f1c1 0c20 	rsb	ip, r1, #32
 801c0da:	40cd      	lsrs	r5, r1
 801c0dc:	3204      	adds	r2, #4
 801c0de:	4623      	mov	r3, r4
 801c0e0:	42b2      	cmp	r2, r6
 801c0e2:	4617      	mov	r7, r2
 801c0e4:	d30c      	bcc.n	801c100 <rshift+0x5c>
 801c0e6:	601d      	str	r5, [r3, #0]
 801c0e8:	b105      	cbz	r5, 801c0ec <rshift+0x48>
 801c0ea:	3304      	adds	r3, #4
 801c0ec:	1b1a      	subs	r2, r3, r4
 801c0ee:	42a3      	cmp	r3, r4
 801c0f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c0f4:	bf08      	it	eq
 801c0f6:	2300      	moveq	r3, #0
 801c0f8:	6102      	str	r2, [r0, #16]
 801c0fa:	bf08      	it	eq
 801c0fc:	6143      	streq	r3, [r0, #20]
 801c0fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c100:	683f      	ldr	r7, [r7, #0]
 801c102:	fa07 f70c 	lsl.w	r7, r7, ip
 801c106:	433d      	orrs	r5, r7
 801c108:	f843 5b04 	str.w	r5, [r3], #4
 801c10c:	f852 5b04 	ldr.w	r5, [r2], #4
 801c110:	40cd      	lsrs	r5, r1
 801c112:	e7e5      	b.n	801c0e0 <rshift+0x3c>
 801c114:	4623      	mov	r3, r4
 801c116:	e7e9      	b.n	801c0ec <rshift+0x48>

0801c118 <__hexdig_fun>:
 801c118:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c11c:	2b09      	cmp	r3, #9
 801c11e:	d802      	bhi.n	801c126 <__hexdig_fun+0xe>
 801c120:	3820      	subs	r0, #32
 801c122:	b2c0      	uxtb	r0, r0
 801c124:	4770      	bx	lr
 801c126:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c12a:	2b05      	cmp	r3, #5
 801c12c:	d801      	bhi.n	801c132 <__hexdig_fun+0x1a>
 801c12e:	3847      	subs	r0, #71	; 0x47
 801c130:	e7f7      	b.n	801c122 <__hexdig_fun+0xa>
 801c132:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c136:	2b05      	cmp	r3, #5
 801c138:	d801      	bhi.n	801c13e <__hexdig_fun+0x26>
 801c13a:	3827      	subs	r0, #39	; 0x27
 801c13c:	e7f1      	b.n	801c122 <__hexdig_fun+0xa>
 801c13e:	2000      	movs	r0, #0
 801c140:	4770      	bx	lr

0801c142 <__gethex>:
 801c142:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c146:	b08b      	sub	sp, #44	; 0x2c
 801c148:	468a      	mov	sl, r1
 801c14a:	9002      	str	r0, [sp, #8]
 801c14c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c14e:	9306      	str	r3, [sp, #24]
 801c150:	4690      	mov	r8, r2
 801c152:	f000 facd 	bl	801c6f0 <__localeconv_l>
 801c156:	6803      	ldr	r3, [r0, #0]
 801c158:	9303      	str	r3, [sp, #12]
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7e4 f858 	bl	8000210 <strlen>
 801c160:	9b03      	ldr	r3, [sp, #12]
 801c162:	9001      	str	r0, [sp, #4]
 801c164:	4403      	add	r3, r0
 801c166:	f04f 0b00 	mov.w	fp, #0
 801c16a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c16e:	9307      	str	r3, [sp, #28]
 801c170:	f8da 3000 	ldr.w	r3, [sl]
 801c174:	3302      	adds	r3, #2
 801c176:	461f      	mov	r7, r3
 801c178:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c17c:	2830      	cmp	r0, #48	; 0x30
 801c17e:	d06c      	beq.n	801c25a <__gethex+0x118>
 801c180:	f7ff ffca 	bl	801c118 <__hexdig_fun>
 801c184:	4604      	mov	r4, r0
 801c186:	2800      	cmp	r0, #0
 801c188:	d16a      	bne.n	801c260 <__gethex+0x11e>
 801c18a:	9a01      	ldr	r2, [sp, #4]
 801c18c:	9903      	ldr	r1, [sp, #12]
 801c18e:	4638      	mov	r0, r7
 801c190:	f7fe f816 	bl	801a1c0 <strncmp>
 801c194:	2800      	cmp	r0, #0
 801c196:	d166      	bne.n	801c266 <__gethex+0x124>
 801c198:	9b01      	ldr	r3, [sp, #4]
 801c19a:	5cf8      	ldrb	r0, [r7, r3]
 801c19c:	18fe      	adds	r6, r7, r3
 801c19e:	f7ff ffbb 	bl	801c118 <__hexdig_fun>
 801c1a2:	2800      	cmp	r0, #0
 801c1a4:	d062      	beq.n	801c26c <__gethex+0x12a>
 801c1a6:	4633      	mov	r3, r6
 801c1a8:	7818      	ldrb	r0, [r3, #0]
 801c1aa:	2830      	cmp	r0, #48	; 0x30
 801c1ac:	461f      	mov	r7, r3
 801c1ae:	f103 0301 	add.w	r3, r3, #1
 801c1b2:	d0f9      	beq.n	801c1a8 <__gethex+0x66>
 801c1b4:	f7ff ffb0 	bl	801c118 <__hexdig_fun>
 801c1b8:	fab0 f580 	clz	r5, r0
 801c1bc:	096d      	lsrs	r5, r5, #5
 801c1be:	4634      	mov	r4, r6
 801c1c0:	f04f 0b01 	mov.w	fp, #1
 801c1c4:	463a      	mov	r2, r7
 801c1c6:	4616      	mov	r6, r2
 801c1c8:	3201      	adds	r2, #1
 801c1ca:	7830      	ldrb	r0, [r6, #0]
 801c1cc:	f7ff ffa4 	bl	801c118 <__hexdig_fun>
 801c1d0:	2800      	cmp	r0, #0
 801c1d2:	d1f8      	bne.n	801c1c6 <__gethex+0x84>
 801c1d4:	9a01      	ldr	r2, [sp, #4]
 801c1d6:	9903      	ldr	r1, [sp, #12]
 801c1d8:	4630      	mov	r0, r6
 801c1da:	f7fd fff1 	bl	801a1c0 <strncmp>
 801c1de:	b950      	cbnz	r0, 801c1f6 <__gethex+0xb4>
 801c1e0:	b954      	cbnz	r4, 801c1f8 <__gethex+0xb6>
 801c1e2:	9b01      	ldr	r3, [sp, #4]
 801c1e4:	18f4      	adds	r4, r6, r3
 801c1e6:	4622      	mov	r2, r4
 801c1e8:	4616      	mov	r6, r2
 801c1ea:	3201      	adds	r2, #1
 801c1ec:	7830      	ldrb	r0, [r6, #0]
 801c1ee:	f7ff ff93 	bl	801c118 <__hexdig_fun>
 801c1f2:	2800      	cmp	r0, #0
 801c1f4:	d1f8      	bne.n	801c1e8 <__gethex+0xa6>
 801c1f6:	b10c      	cbz	r4, 801c1fc <__gethex+0xba>
 801c1f8:	1ba4      	subs	r4, r4, r6
 801c1fa:	00a4      	lsls	r4, r4, #2
 801c1fc:	7833      	ldrb	r3, [r6, #0]
 801c1fe:	2b50      	cmp	r3, #80	; 0x50
 801c200:	d001      	beq.n	801c206 <__gethex+0xc4>
 801c202:	2b70      	cmp	r3, #112	; 0x70
 801c204:	d140      	bne.n	801c288 <__gethex+0x146>
 801c206:	7873      	ldrb	r3, [r6, #1]
 801c208:	2b2b      	cmp	r3, #43	; 0x2b
 801c20a:	d031      	beq.n	801c270 <__gethex+0x12e>
 801c20c:	2b2d      	cmp	r3, #45	; 0x2d
 801c20e:	d033      	beq.n	801c278 <__gethex+0x136>
 801c210:	1c71      	adds	r1, r6, #1
 801c212:	f04f 0900 	mov.w	r9, #0
 801c216:	7808      	ldrb	r0, [r1, #0]
 801c218:	f7ff ff7e 	bl	801c118 <__hexdig_fun>
 801c21c:	1e43      	subs	r3, r0, #1
 801c21e:	b2db      	uxtb	r3, r3
 801c220:	2b18      	cmp	r3, #24
 801c222:	d831      	bhi.n	801c288 <__gethex+0x146>
 801c224:	f1a0 0210 	sub.w	r2, r0, #16
 801c228:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c22c:	f7ff ff74 	bl	801c118 <__hexdig_fun>
 801c230:	1e43      	subs	r3, r0, #1
 801c232:	b2db      	uxtb	r3, r3
 801c234:	2b18      	cmp	r3, #24
 801c236:	d922      	bls.n	801c27e <__gethex+0x13c>
 801c238:	f1b9 0f00 	cmp.w	r9, #0
 801c23c:	d000      	beq.n	801c240 <__gethex+0xfe>
 801c23e:	4252      	negs	r2, r2
 801c240:	4414      	add	r4, r2
 801c242:	f8ca 1000 	str.w	r1, [sl]
 801c246:	b30d      	cbz	r5, 801c28c <__gethex+0x14a>
 801c248:	f1bb 0f00 	cmp.w	fp, #0
 801c24c:	bf0c      	ite	eq
 801c24e:	2706      	moveq	r7, #6
 801c250:	2700      	movne	r7, #0
 801c252:	4638      	mov	r0, r7
 801c254:	b00b      	add	sp, #44	; 0x2c
 801c256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c25a:	f10b 0b01 	add.w	fp, fp, #1
 801c25e:	e78a      	b.n	801c176 <__gethex+0x34>
 801c260:	2500      	movs	r5, #0
 801c262:	462c      	mov	r4, r5
 801c264:	e7ae      	b.n	801c1c4 <__gethex+0x82>
 801c266:	463e      	mov	r6, r7
 801c268:	2501      	movs	r5, #1
 801c26a:	e7c7      	b.n	801c1fc <__gethex+0xba>
 801c26c:	4604      	mov	r4, r0
 801c26e:	e7fb      	b.n	801c268 <__gethex+0x126>
 801c270:	f04f 0900 	mov.w	r9, #0
 801c274:	1cb1      	adds	r1, r6, #2
 801c276:	e7ce      	b.n	801c216 <__gethex+0xd4>
 801c278:	f04f 0901 	mov.w	r9, #1
 801c27c:	e7fa      	b.n	801c274 <__gethex+0x132>
 801c27e:	230a      	movs	r3, #10
 801c280:	fb03 0202 	mla	r2, r3, r2, r0
 801c284:	3a10      	subs	r2, #16
 801c286:	e7cf      	b.n	801c228 <__gethex+0xe6>
 801c288:	4631      	mov	r1, r6
 801c28a:	e7da      	b.n	801c242 <__gethex+0x100>
 801c28c:	1bf3      	subs	r3, r6, r7
 801c28e:	3b01      	subs	r3, #1
 801c290:	4629      	mov	r1, r5
 801c292:	2b07      	cmp	r3, #7
 801c294:	dc49      	bgt.n	801c32a <__gethex+0x1e8>
 801c296:	9802      	ldr	r0, [sp, #8]
 801c298:	f000 fab8 	bl	801c80c <_Balloc>
 801c29c:	9b01      	ldr	r3, [sp, #4]
 801c29e:	f100 0914 	add.w	r9, r0, #20
 801c2a2:	f04f 0b00 	mov.w	fp, #0
 801c2a6:	f1c3 0301 	rsb	r3, r3, #1
 801c2aa:	4605      	mov	r5, r0
 801c2ac:	f8cd 9010 	str.w	r9, [sp, #16]
 801c2b0:	46da      	mov	sl, fp
 801c2b2:	9308      	str	r3, [sp, #32]
 801c2b4:	42b7      	cmp	r7, r6
 801c2b6:	d33b      	bcc.n	801c330 <__gethex+0x1ee>
 801c2b8:	9804      	ldr	r0, [sp, #16]
 801c2ba:	f840 ab04 	str.w	sl, [r0], #4
 801c2be:	eba0 0009 	sub.w	r0, r0, r9
 801c2c2:	1080      	asrs	r0, r0, #2
 801c2c4:	6128      	str	r0, [r5, #16]
 801c2c6:	0147      	lsls	r7, r0, #5
 801c2c8:	4650      	mov	r0, sl
 801c2ca:	f000 fb63 	bl	801c994 <__hi0bits>
 801c2ce:	f8d8 6000 	ldr.w	r6, [r8]
 801c2d2:	1a3f      	subs	r7, r7, r0
 801c2d4:	42b7      	cmp	r7, r6
 801c2d6:	dd64      	ble.n	801c3a2 <__gethex+0x260>
 801c2d8:	1bbf      	subs	r7, r7, r6
 801c2da:	4639      	mov	r1, r7
 801c2dc:	4628      	mov	r0, r5
 801c2de:	f000 fe73 	bl	801cfc8 <__any_on>
 801c2e2:	4682      	mov	sl, r0
 801c2e4:	b178      	cbz	r0, 801c306 <__gethex+0x1c4>
 801c2e6:	1e7b      	subs	r3, r7, #1
 801c2e8:	1159      	asrs	r1, r3, #5
 801c2ea:	f003 021f 	and.w	r2, r3, #31
 801c2ee:	f04f 0a01 	mov.w	sl, #1
 801c2f2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c2f6:	fa0a f202 	lsl.w	r2, sl, r2
 801c2fa:	420a      	tst	r2, r1
 801c2fc:	d003      	beq.n	801c306 <__gethex+0x1c4>
 801c2fe:	4553      	cmp	r3, sl
 801c300:	dc46      	bgt.n	801c390 <__gethex+0x24e>
 801c302:	f04f 0a02 	mov.w	sl, #2
 801c306:	4639      	mov	r1, r7
 801c308:	4628      	mov	r0, r5
 801c30a:	f7ff fecb 	bl	801c0a4 <rshift>
 801c30e:	443c      	add	r4, r7
 801c310:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c314:	42a3      	cmp	r3, r4
 801c316:	da52      	bge.n	801c3be <__gethex+0x27c>
 801c318:	4629      	mov	r1, r5
 801c31a:	9802      	ldr	r0, [sp, #8]
 801c31c:	f000 faaa 	bl	801c874 <_Bfree>
 801c320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c322:	2300      	movs	r3, #0
 801c324:	6013      	str	r3, [r2, #0]
 801c326:	27a3      	movs	r7, #163	; 0xa3
 801c328:	e793      	b.n	801c252 <__gethex+0x110>
 801c32a:	3101      	adds	r1, #1
 801c32c:	105b      	asrs	r3, r3, #1
 801c32e:	e7b0      	b.n	801c292 <__gethex+0x150>
 801c330:	1e73      	subs	r3, r6, #1
 801c332:	9305      	str	r3, [sp, #20]
 801c334:	9a07      	ldr	r2, [sp, #28]
 801c336:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c33a:	4293      	cmp	r3, r2
 801c33c:	d018      	beq.n	801c370 <__gethex+0x22e>
 801c33e:	f1bb 0f20 	cmp.w	fp, #32
 801c342:	d107      	bne.n	801c354 <__gethex+0x212>
 801c344:	9b04      	ldr	r3, [sp, #16]
 801c346:	f8c3 a000 	str.w	sl, [r3]
 801c34a:	3304      	adds	r3, #4
 801c34c:	f04f 0a00 	mov.w	sl, #0
 801c350:	9304      	str	r3, [sp, #16]
 801c352:	46d3      	mov	fp, sl
 801c354:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c358:	f7ff fede 	bl	801c118 <__hexdig_fun>
 801c35c:	f000 000f 	and.w	r0, r0, #15
 801c360:	fa00 f00b 	lsl.w	r0, r0, fp
 801c364:	ea4a 0a00 	orr.w	sl, sl, r0
 801c368:	f10b 0b04 	add.w	fp, fp, #4
 801c36c:	9b05      	ldr	r3, [sp, #20]
 801c36e:	e00d      	b.n	801c38c <__gethex+0x24a>
 801c370:	9b05      	ldr	r3, [sp, #20]
 801c372:	9a08      	ldr	r2, [sp, #32]
 801c374:	4413      	add	r3, r2
 801c376:	42bb      	cmp	r3, r7
 801c378:	d3e1      	bcc.n	801c33e <__gethex+0x1fc>
 801c37a:	4618      	mov	r0, r3
 801c37c:	9a01      	ldr	r2, [sp, #4]
 801c37e:	9903      	ldr	r1, [sp, #12]
 801c380:	9309      	str	r3, [sp, #36]	; 0x24
 801c382:	f7fd ff1d 	bl	801a1c0 <strncmp>
 801c386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c388:	2800      	cmp	r0, #0
 801c38a:	d1d8      	bne.n	801c33e <__gethex+0x1fc>
 801c38c:	461e      	mov	r6, r3
 801c38e:	e791      	b.n	801c2b4 <__gethex+0x172>
 801c390:	1eb9      	subs	r1, r7, #2
 801c392:	4628      	mov	r0, r5
 801c394:	f000 fe18 	bl	801cfc8 <__any_on>
 801c398:	2800      	cmp	r0, #0
 801c39a:	d0b2      	beq.n	801c302 <__gethex+0x1c0>
 801c39c:	f04f 0a03 	mov.w	sl, #3
 801c3a0:	e7b1      	b.n	801c306 <__gethex+0x1c4>
 801c3a2:	da09      	bge.n	801c3b8 <__gethex+0x276>
 801c3a4:	1bf7      	subs	r7, r6, r7
 801c3a6:	4629      	mov	r1, r5
 801c3a8:	463a      	mov	r2, r7
 801c3aa:	9802      	ldr	r0, [sp, #8]
 801c3ac:	f000 fc2e 	bl	801cc0c <__lshift>
 801c3b0:	1be4      	subs	r4, r4, r7
 801c3b2:	4605      	mov	r5, r0
 801c3b4:	f100 0914 	add.w	r9, r0, #20
 801c3b8:	f04f 0a00 	mov.w	sl, #0
 801c3bc:	e7a8      	b.n	801c310 <__gethex+0x1ce>
 801c3be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c3c2:	42a0      	cmp	r0, r4
 801c3c4:	dd6a      	ble.n	801c49c <__gethex+0x35a>
 801c3c6:	1b04      	subs	r4, r0, r4
 801c3c8:	42a6      	cmp	r6, r4
 801c3ca:	dc2e      	bgt.n	801c42a <__gethex+0x2e8>
 801c3cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c3d0:	2b02      	cmp	r3, #2
 801c3d2:	d022      	beq.n	801c41a <__gethex+0x2d8>
 801c3d4:	2b03      	cmp	r3, #3
 801c3d6:	d024      	beq.n	801c422 <__gethex+0x2e0>
 801c3d8:	2b01      	cmp	r3, #1
 801c3da:	d115      	bne.n	801c408 <__gethex+0x2c6>
 801c3dc:	42a6      	cmp	r6, r4
 801c3de:	d113      	bne.n	801c408 <__gethex+0x2c6>
 801c3e0:	2e01      	cmp	r6, #1
 801c3e2:	dc0b      	bgt.n	801c3fc <__gethex+0x2ba>
 801c3e4:	9a06      	ldr	r2, [sp, #24]
 801c3e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c3ea:	6013      	str	r3, [r2, #0]
 801c3ec:	2301      	movs	r3, #1
 801c3ee:	612b      	str	r3, [r5, #16]
 801c3f0:	f8c9 3000 	str.w	r3, [r9]
 801c3f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c3f6:	2762      	movs	r7, #98	; 0x62
 801c3f8:	601d      	str	r5, [r3, #0]
 801c3fa:	e72a      	b.n	801c252 <__gethex+0x110>
 801c3fc:	1e71      	subs	r1, r6, #1
 801c3fe:	4628      	mov	r0, r5
 801c400:	f000 fde2 	bl	801cfc8 <__any_on>
 801c404:	2800      	cmp	r0, #0
 801c406:	d1ed      	bne.n	801c3e4 <__gethex+0x2a2>
 801c408:	4629      	mov	r1, r5
 801c40a:	9802      	ldr	r0, [sp, #8]
 801c40c:	f000 fa32 	bl	801c874 <_Bfree>
 801c410:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c412:	2300      	movs	r3, #0
 801c414:	6013      	str	r3, [r2, #0]
 801c416:	2750      	movs	r7, #80	; 0x50
 801c418:	e71b      	b.n	801c252 <__gethex+0x110>
 801c41a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d0e1      	beq.n	801c3e4 <__gethex+0x2a2>
 801c420:	e7f2      	b.n	801c408 <__gethex+0x2c6>
 801c422:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c424:	2b00      	cmp	r3, #0
 801c426:	d1dd      	bne.n	801c3e4 <__gethex+0x2a2>
 801c428:	e7ee      	b.n	801c408 <__gethex+0x2c6>
 801c42a:	1e67      	subs	r7, r4, #1
 801c42c:	f1ba 0f00 	cmp.w	sl, #0
 801c430:	d131      	bne.n	801c496 <__gethex+0x354>
 801c432:	b127      	cbz	r7, 801c43e <__gethex+0x2fc>
 801c434:	4639      	mov	r1, r7
 801c436:	4628      	mov	r0, r5
 801c438:	f000 fdc6 	bl	801cfc8 <__any_on>
 801c43c:	4682      	mov	sl, r0
 801c43e:	117a      	asrs	r2, r7, #5
 801c440:	2301      	movs	r3, #1
 801c442:	f007 071f 	and.w	r7, r7, #31
 801c446:	fa03 f707 	lsl.w	r7, r3, r7
 801c44a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801c44e:	4621      	mov	r1, r4
 801c450:	421f      	tst	r7, r3
 801c452:	4628      	mov	r0, r5
 801c454:	bf18      	it	ne
 801c456:	f04a 0a02 	orrne.w	sl, sl, #2
 801c45a:	1b36      	subs	r6, r6, r4
 801c45c:	f7ff fe22 	bl	801c0a4 <rshift>
 801c460:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c464:	2702      	movs	r7, #2
 801c466:	f1ba 0f00 	cmp.w	sl, #0
 801c46a:	d048      	beq.n	801c4fe <__gethex+0x3bc>
 801c46c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c470:	2b02      	cmp	r3, #2
 801c472:	d015      	beq.n	801c4a0 <__gethex+0x35e>
 801c474:	2b03      	cmp	r3, #3
 801c476:	d017      	beq.n	801c4a8 <__gethex+0x366>
 801c478:	2b01      	cmp	r3, #1
 801c47a:	d109      	bne.n	801c490 <__gethex+0x34e>
 801c47c:	f01a 0f02 	tst.w	sl, #2
 801c480:	d006      	beq.n	801c490 <__gethex+0x34e>
 801c482:	f8d9 3000 	ldr.w	r3, [r9]
 801c486:	ea4a 0a03 	orr.w	sl, sl, r3
 801c48a:	f01a 0f01 	tst.w	sl, #1
 801c48e:	d10e      	bne.n	801c4ae <__gethex+0x36c>
 801c490:	f047 0710 	orr.w	r7, r7, #16
 801c494:	e033      	b.n	801c4fe <__gethex+0x3bc>
 801c496:	f04f 0a01 	mov.w	sl, #1
 801c49a:	e7d0      	b.n	801c43e <__gethex+0x2fc>
 801c49c:	2701      	movs	r7, #1
 801c49e:	e7e2      	b.n	801c466 <__gethex+0x324>
 801c4a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4a2:	f1c3 0301 	rsb	r3, r3, #1
 801c4a6:	9315      	str	r3, [sp, #84]	; 0x54
 801c4a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d0f0      	beq.n	801c490 <__gethex+0x34e>
 801c4ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801c4b2:	f105 0314 	add.w	r3, r5, #20
 801c4b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801c4ba:	eb03 010a 	add.w	r1, r3, sl
 801c4be:	f04f 0c00 	mov.w	ip, #0
 801c4c2:	4618      	mov	r0, r3
 801c4c4:	f853 2b04 	ldr.w	r2, [r3], #4
 801c4c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c4cc:	d01c      	beq.n	801c508 <__gethex+0x3c6>
 801c4ce:	3201      	adds	r2, #1
 801c4d0:	6002      	str	r2, [r0, #0]
 801c4d2:	2f02      	cmp	r7, #2
 801c4d4:	f105 0314 	add.w	r3, r5, #20
 801c4d8:	d138      	bne.n	801c54c <__gethex+0x40a>
 801c4da:	f8d8 2000 	ldr.w	r2, [r8]
 801c4de:	3a01      	subs	r2, #1
 801c4e0:	42b2      	cmp	r2, r6
 801c4e2:	d10a      	bne.n	801c4fa <__gethex+0x3b8>
 801c4e4:	1171      	asrs	r1, r6, #5
 801c4e6:	2201      	movs	r2, #1
 801c4e8:	f006 061f 	and.w	r6, r6, #31
 801c4ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c4f0:	fa02 f606 	lsl.w	r6, r2, r6
 801c4f4:	421e      	tst	r6, r3
 801c4f6:	bf18      	it	ne
 801c4f8:	4617      	movne	r7, r2
 801c4fa:	f047 0720 	orr.w	r7, r7, #32
 801c4fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c500:	601d      	str	r5, [r3, #0]
 801c502:	9b06      	ldr	r3, [sp, #24]
 801c504:	601c      	str	r4, [r3, #0]
 801c506:	e6a4      	b.n	801c252 <__gethex+0x110>
 801c508:	4299      	cmp	r1, r3
 801c50a:	f843 cc04 	str.w	ip, [r3, #-4]
 801c50e:	d8d8      	bhi.n	801c4c2 <__gethex+0x380>
 801c510:	68ab      	ldr	r3, [r5, #8]
 801c512:	4599      	cmp	r9, r3
 801c514:	db12      	blt.n	801c53c <__gethex+0x3fa>
 801c516:	6869      	ldr	r1, [r5, #4]
 801c518:	9802      	ldr	r0, [sp, #8]
 801c51a:	3101      	adds	r1, #1
 801c51c:	f000 f976 	bl	801c80c <_Balloc>
 801c520:	692a      	ldr	r2, [r5, #16]
 801c522:	3202      	adds	r2, #2
 801c524:	f105 010c 	add.w	r1, r5, #12
 801c528:	4683      	mov	fp, r0
 801c52a:	0092      	lsls	r2, r2, #2
 801c52c:	300c      	adds	r0, #12
 801c52e:	f7fc fe8a 	bl	8019246 <memcpy>
 801c532:	4629      	mov	r1, r5
 801c534:	9802      	ldr	r0, [sp, #8]
 801c536:	f000 f99d 	bl	801c874 <_Bfree>
 801c53a:	465d      	mov	r5, fp
 801c53c:	692b      	ldr	r3, [r5, #16]
 801c53e:	1c5a      	adds	r2, r3, #1
 801c540:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801c544:	612a      	str	r2, [r5, #16]
 801c546:	2201      	movs	r2, #1
 801c548:	615a      	str	r2, [r3, #20]
 801c54a:	e7c2      	b.n	801c4d2 <__gethex+0x390>
 801c54c:	692a      	ldr	r2, [r5, #16]
 801c54e:	454a      	cmp	r2, r9
 801c550:	dd0b      	ble.n	801c56a <__gethex+0x428>
 801c552:	2101      	movs	r1, #1
 801c554:	4628      	mov	r0, r5
 801c556:	f7ff fda5 	bl	801c0a4 <rshift>
 801c55a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c55e:	3401      	adds	r4, #1
 801c560:	42a3      	cmp	r3, r4
 801c562:	f6ff aed9 	blt.w	801c318 <__gethex+0x1d6>
 801c566:	2701      	movs	r7, #1
 801c568:	e7c7      	b.n	801c4fa <__gethex+0x3b8>
 801c56a:	f016 061f 	ands.w	r6, r6, #31
 801c56e:	d0fa      	beq.n	801c566 <__gethex+0x424>
 801c570:	449a      	add	sl, r3
 801c572:	f1c6 0620 	rsb	r6, r6, #32
 801c576:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801c57a:	f000 fa0b 	bl	801c994 <__hi0bits>
 801c57e:	42b0      	cmp	r0, r6
 801c580:	dbe7      	blt.n	801c552 <__gethex+0x410>
 801c582:	e7f0      	b.n	801c566 <__gethex+0x424>

0801c584 <L_shift>:
 801c584:	f1c2 0208 	rsb	r2, r2, #8
 801c588:	0092      	lsls	r2, r2, #2
 801c58a:	b570      	push	{r4, r5, r6, lr}
 801c58c:	f1c2 0620 	rsb	r6, r2, #32
 801c590:	6843      	ldr	r3, [r0, #4]
 801c592:	6804      	ldr	r4, [r0, #0]
 801c594:	fa03 f506 	lsl.w	r5, r3, r6
 801c598:	432c      	orrs	r4, r5
 801c59a:	40d3      	lsrs	r3, r2
 801c59c:	6004      	str	r4, [r0, #0]
 801c59e:	f840 3f04 	str.w	r3, [r0, #4]!
 801c5a2:	4288      	cmp	r0, r1
 801c5a4:	d3f4      	bcc.n	801c590 <L_shift+0xc>
 801c5a6:	bd70      	pop	{r4, r5, r6, pc}

0801c5a8 <__match>:
 801c5a8:	b530      	push	{r4, r5, lr}
 801c5aa:	6803      	ldr	r3, [r0, #0]
 801c5ac:	3301      	adds	r3, #1
 801c5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c5b2:	b914      	cbnz	r4, 801c5ba <__match+0x12>
 801c5b4:	6003      	str	r3, [r0, #0]
 801c5b6:	2001      	movs	r0, #1
 801c5b8:	bd30      	pop	{r4, r5, pc}
 801c5ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c5be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c5c2:	2d19      	cmp	r5, #25
 801c5c4:	bf98      	it	ls
 801c5c6:	3220      	addls	r2, #32
 801c5c8:	42a2      	cmp	r2, r4
 801c5ca:	d0f0      	beq.n	801c5ae <__match+0x6>
 801c5cc:	2000      	movs	r0, #0
 801c5ce:	e7f3      	b.n	801c5b8 <__match+0x10>

0801c5d0 <__hexnan>:
 801c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5d4:	680b      	ldr	r3, [r1, #0]
 801c5d6:	6801      	ldr	r1, [r0, #0]
 801c5d8:	115f      	asrs	r7, r3, #5
 801c5da:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801c5de:	f013 031f 	ands.w	r3, r3, #31
 801c5e2:	b087      	sub	sp, #28
 801c5e4:	bf18      	it	ne
 801c5e6:	3704      	addne	r7, #4
 801c5e8:	2500      	movs	r5, #0
 801c5ea:	1f3e      	subs	r6, r7, #4
 801c5ec:	4682      	mov	sl, r0
 801c5ee:	4690      	mov	r8, r2
 801c5f0:	9301      	str	r3, [sp, #4]
 801c5f2:	f847 5c04 	str.w	r5, [r7, #-4]
 801c5f6:	46b1      	mov	r9, r6
 801c5f8:	4634      	mov	r4, r6
 801c5fa:	9502      	str	r5, [sp, #8]
 801c5fc:	46ab      	mov	fp, r5
 801c5fe:	784a      	ldrb	r2, [r1, #1]
 801c600:	1c4b      	adds	r3, r1, #1
 801c602:	9303      	str	r3, [sp, #12]
 801c604:	b342      	cbz	r2, 801c658 <__hexnan+0x88>
 801c606:	4610      	mov	r0, r2
 801c608:	9105      	str	r1, [sp, #20]
 801c60a:	9204      	str	r2, [sp, #16]
 801c60c:	f7ff fd84 	bl	801c118 <__hexdig_fun>
 801c610:	2800      	cmp	r0, #0
 801c612:	d143      	bne.n	801c69c <__hexnan+0xcc>
 801c614:	9a04      	ldr	r2, [sp, #16]
 801c616:	9905      	ldr	r1, [sp, #20]
 801c618:	2a20      	cmp	r2, #32
 801c61a:	d818      	bhi.n	801c64e <__hexnan+0x7e>
 801c61c:	9b02      	ldr	r3, [sp, #8]
 801c61e:	459b      	cmp	fp, r3
 801c620:	dd13      	ble.n	801c64a <__hexnan+0x7a>
 801c622:	454c      	cmp	r4, r9
 801c624:	d206      	bcs.n	801c634 <__hexnan+0x64>
 801c626:	2d07      	cmp	r5, #7
 801c628:	dc04      	bgt.n	801c634 <__hexnan+0x64>
 801c62a:	462a      	mov	r2, r5
 801c62c:	4649      	mov	r1, r9
 801c62e:	4620      	mov	r0, r4
 801c630:	f7ff ffa8 	bl	801c584 <L_shift>
 801c634:	4544      	cmp	r4, r8
 801c636:	d944      	bls.n	801c6c2 <__hexnan+0xf2>
 801c638:	2300      	movs	r3, #0
 801c63a:	f1a4 0904 	sub.w	r9, r4, #4
 801c63e:	f844 3c04 	str.w	r3, [r4, #-4]
 801c642:	f8cd b008 	str.w	fp, [sp, #8]
 801c646:	464c      	mov	r4, r9
 801c648:	461d      	mov	r5, r3
 801c64a:	9903      	ldr	r1, [sp, #12]
 801c64c:	e7d7      	b.n	801c5fe <__hexnan+0x2e>
 801c64e:	2a29      	cmp	r2, #41	; 0x29
 801c650:	d14a      	bne.n	801c6e8 <__hexnan+0x118>
 801c652:	3102      	adds	r1, #2
 801c654:	f8ca 1000 	str.w	r1, [sl]
 801c658:	f1bb 0f00 	cmp.w	fp, #0
 801c65c:	d044      	beq.n	801c6e8 <__hexnan+0x118>
 801c65e:	454c      	cmp	r4, r9
 801c660:	d206      	bcs.n	801c670 <__hexnan+0xa0>
 801c662:	2d07      	cmp	r5, #7
 801c664:	dc04      	bgt.n	801c670 <__hexnan+0xa0>
 801c666:	462a      	mov	r2, r5
 801c668:	4649      	mov	r1, r9
 801c66a:	4620      	mov	r0, r4
 801c66c:	f7ff ff8a 	bl	801c584 <L_shift>
 801c670:	4544      	cmp	r4, r8
 801c672:	d928      	bls.n	801c6c6 <__hexnan+0xf6>
 801c674:	4643      	mov	r3, r8
 801c676:	f854 2b04 	ldr.w	r2, [r4], #4
 801c67a:	f843 2b04 	str.w	r2, [r3], #4
 801c67e:	42a6      	cmp	r6, r4
 801c680:	d2f9      	bcs.n	801c676 <__hexnan+0xa6>
 801c682:	2200      	movs	r2, #0
 801c684:	f843 2b04 	str.w	r2, [r3], #4
 801c688:	429e      	cmp	r6, r3
 801c68a:	d2fb      	bcs.n	801c684 <__hexnan+0xb4>
 801c68c:	6833      	ldr	r3, [r6, #0]
 801c68e:	b91b      	cbnz	r3, 801c698 <__hexnan+0xc8>
 801c690:	4546      	cmp	r6, r8
 801c692:	d127      	bne.n	801c6e4 <__hexnan+0x114>
 801c694:	2301      	movs	r3, #1
 801c696:	6033      	str	r3, [r6, #0]
 801c698:	2005      	movs	r0, #5
 801c69a:	e026      	b.n	801c6ea <__hexnan+0x11a>
 801c69c:	3501      	adds	r5, #1
 801c69e:	2d08      	cmp	r5, #8
 801c6a0:	f10b 0b01 	add.w	fp, fp, #1
 801c6a4:	dd06      	ble.n	801c6b4 <__hexnan+0xe4>
 801c6a6:	4544      	cmp	r4, r8
 801c6a8:	d9cf      	bls.n	801c64a <__hexnan+0x7a>
 801c6aa:	2300      	movs	r3, #0
 801c6ac:	f844 3c04 	str.w	r3, [r4, #-4]
 801c6b0:	2501      	movs	r5, #1
 801c6b2:	3c04      	subs	r4, #4
 801c6b4:	6822      	ldr	r2, [r4, #0]
 801c6b6:	f000 000f 	and.w	r0, r0, #15
 801c6ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801c6be:	6020      	str	r0, [r4, #0]
 801c6c0:	e7c3      	b.n	801c64a <__hexnan+0x7a>
 801c6c2:	2508      	movs	r5, #8
 801c6c4:	e7c1      	b.n	801c64a <__hexnan+0x7a>
 801c6c6:	9b01      	ldr	r3, [sp, #4]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d0df      	beq.n	801c68c <__hexnan+0xbc>
 801c6cc:	f04f 32ff 	mov.w	r2, #4294967295
 801c6d0:	f1c3 0320 	rsb	r3, r3, #32
 801c6d4:	fa22 f303 	lsr.w	r3, r2, r3
 801c6d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801c6dc:	401a      	ands	r2, r3
 801c6de:	f847 2c04 	str.w	r2, [r7, #-4]
 801c6e2:	e7d3      	b.n	801c68c <__hexnan+0xbc>
 801c6e4:	3e04      	subs	r6, #4
 801c6e6:	e7d1      	b.n	801c68c <__hexnan+0xbc>
 801c6e8:	2004      	movs	r0, #4
 801c6ea:	b007      	add	sp, #28
 801c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c6f0 <__localeconv_l>:
 801c6f0:	30f0      	adds	r0, #240	; 0xf0
 801c6f2:	4770      	bx	lr

0801c6f4 <_localeconv_r>:
 801c6f4:	4b04      	ldr	r3, [pc, #16]	; (801c708 <_localeconv_r+0x14>)
 801c6f6:	681b      	ldr	r3, [r3, #0]
 801c6f8:	6a18      	ldr	r0, [r3, #32]
 801c6fa:	4b04      	ldr	r3, [pc, #16]	; (801c70c <_localeconv_r+0x18>)
 801c6fc:	2800      	cmp	r0, #0
 801c6fe:	bf08      	it	eq
 801c700:	4618      	moveq	r0, r3
 801c702:	30f0      	adds	r0, #240	; 0xf0
 801c704:	4770      	bx	lr
 801c706:	bf00      	nop
 801c708:	20000020 	.word	0x20000020
 801c70c:	20000084 	.word	0x20000084

0801c710 <_lseek_r>:
 801c710:	b538      	push	{r3, r4, r5, lr}
 801c712:	4c07      	ldr	r4, [pc, #28]	; (801c730 <_lseek_r+0x20>)
 801c714:	4605      	mov	r5, r0
 801c716:	4608      	mov	r0, r1
 801c718:	4611      	mov	r1, r2
 801c71a:	2200      	movs	r2, #0
 801c71c:	6022      	str	r2, [r4, #0]
 801c71e:	461a      	mov	r2, r3
 801c720:	f7e5 f816 	bl	8001750 <_lseek>
 801c724:	1c43      	adds	r3, r0, #1
 801c726:	d102      	bne.n	801c72e <_lseek_r+0x1e>
 801c728:	6823      	ldr	r3, [r4, #0]
 801c72a:	b103      	cbz	r3, 801c72e <_lseek_r+0x1e>
 801c72c:	602b      	str	r3, [r5, #0]
 801c72e:	bd38      	pop	{r3, r4, r5, pc}
 801c730:	200280e0 	.word	0x200280e0

0801c734 <__swhatbuf_r>:
 801c734:	b570      	push	{r4, r5, r6, lr}
 801c736:	460e      	mov	r6, r1
 801c738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c73c:	2900      	cmp	r1, #0
 801c73e:	b096      	sub	sp, #88	; 0x58
 801c740:	4614      	mov	r4, r2
 801c742:	461d      	mov	r5, r3
 801c744:	da07      	bge.n	801c756 <__swhatbuf_r+0x22>
 801c746:	2300      	movs	r3, #0
 801c748:	602b      	str	r3, [r5, #0]
 801c74a:	89b3      	ldrh	r3, [r6, #12]
 801c74c:	061a      	lsls	r2, r3, #24
 801c74e:	d410      	bmi.n	801c772 <__swhatbuf_r+0x3e>
 801c750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c754:	e00e      	b.n	801c774 <__swhatbuf_r+0x40>
 801c756:	466a      	mov	r2, sp
 801c758:	f001 fbbc 	bl	801ded4 <_fstat_r>
 801c75c:	2800      	cmp	r0, #0
 801c75e:	dbf2      	blt.n	801c746 <__swhatbuf_r+0x12>
 801c760:	9a01      	ldr	r2, [sp, #4]
 801c762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c76a:	425a      	negs	r2, r3
 801c76c:	415a      	adcs	r2, r3
 801c76e:	602a      	str	r2, [r5, #0]
 801c770:	e7ee      	b.n	801c750 <__swhatbuf_r+0x1c>
 801c772:	2340      	movs	r3, #64	; 0x40
 801c774:	2000      	movs	r0, #0
 801c776:	6023      	str	r3, [r4, #0]
 801c778:	b016      	add	sp, #88	; 0x58
 801c77a:	bd70      	pop	{r4, r5, r6, pc}

0801c77c <__smakebuf_r>:
 801c77c:	898b      	ldrh	r3, [r1, #12]
 801c77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c780:	079d      	lsls	r5, r3, #30
 801c782:	4606      	mov	r6, r0
 801c784:	460c      	mov	r4, r1
 801c786:	d507      	bpl.n	801c798 <__smakebuf_r+0x1c>
 801c788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c78c:	6023      	str	r3, [r4, #0]
 801c78e:	6123      	str	r3, [r4, #16]
 801c790:	2301      	movs	r3, #1
 801c792:	6163      	str	r3, [r4, #20]
 801c794:	b002      	add	sp, #8
 801c796:	bd70      	pop	{r4, r5, r6, pc}
 801c798:	ab01      	add	r3, sp, #4
 801c79a:	466a      	mov	r2, sp
 801c79c:	f7ff ffca 	bl	801c734 <__swhatbuf_r>
 801c7a0:	9900      	ldr	r1, [sp, #0]
 801c7a2:	4605      	mov	r5, r0
 801c7a4:	4630      	mov	r0, r6
 801c7a6:	f000 fc8d 	bl	801d0c4 <_malloc_r>
 801c7aa:	b948      	cbnz	r0, 801c7c0 <__smakebuf_r+0x44>
 801c7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7b0:	059a      	lsls	r2, r3, #22
 801c7b2:	d4ef      	bmi.n	801c794 <__smakebuf_r+0x18>
 801c7b4:	f023 0303 	bic.w	r3, r3, #3
 801c7b8:	f043 0302 	orr.w	r3, r3, #2
 801c7bc:	81a3      	strh	r3, [r4, #12]
 801c7be:	e7e3      	b.n	801c788 <__smakebuf_r+0xc>
 801c7c0:	4b0d      	ldr	r3, [pc, #52]	; (801c7f8 <__smakebuf_r+0x7c>)
 801c7c2:	62b3      	str	r3, [r6, #40]	; 0x28
 801c7c4:	89a3      	ldrh	r3, [r4, #12]
 801c7c6:	6020      	str	r0, [r4, #0]
 801c7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c7cc:	81a3      	strh	r3, [r4, #12]
 801c7ce:	9b00      	ldr	r3, [sp, #0]
 801c7d0:	6163      	str	r3, [r4, #20]
 801c7d2:	9b01      	ldr	r3, [sp, #4]
 801c7d4:	6120      	str	r0, [r4, #16]
 801c7d6:	b15b      	cbz	r3, 801c7f0 <__smakebuf_r+0x74>
 801c7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c7dc:	4630      	mov	r0, r6
 801c7de:	f001 fb8b 	bl	801def8 <_isatty_r>
 801c7e2:	b128      	cbz	r0, 801c7f0 <__smakebuf_r+0x74>
 801c7e4:	89a3      	ldrh	r3, [r4, #12]
 801c7e6:	f023 0303 	bic.w	r3, r3, #3
 801c7ea:	f043 0301 	orr.w	r3, r3, #1
 801c7ee:	81a3      	strh	r3, [r4, #12]
 801c7f0:	89a3      	ldrh	r3, [r4, #12]
 801c7f2:	431d      	orrs	r5, r3
 801c7f4:	81a5      	strh	r5, [r4, #12]
 801c7f6:	e7cd      	b.n	801c794 <__smakebuf_r+0x18>
 801c7f8:	0801bf59 	.word	0x0801bf59

0801c7fc <malloc>:
 801c7fc:	4b02      	ldr	r3, [pc, #8]	; (801c808 <malloc+0xc>)
 801c7fe:	4601      	mov	r1, r0
 801c800:	6818      	ldr	r0, [r3, #0]
 801c802:	f000 bc5f 	b.w	801d0c4 <_malloc_r>
 801c806:	bf00      	nop
 801c808:	20000020 	.word	0x20000020

0801c80c <_Balloc>:
 801c80c:	b570      	push	{r4, r5, r6, lr}
 801c80e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c810:	4604      	mov	r4, r0
 801c812:	460e      	mov	r6, r1
 801c814:	b93d      	cbnz	r5, 801c826 <_Balloc+0x1a>
 801c816:	2010      	movs	r0, #16
 801c818:	f7ff fff0 	bl	801c7fc <malloc>
 801c81c:	6260      	str	r0, [r4, #36]	; 0x24
 801c81e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c822:	6005      	str	r5, [r0, #0]
 801c824:	60c5      	str	r5, [r0, #12]
 801c826:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801c828:	68eb      	ldr	r3, [r5, #12]
 801c82a:	b183      	cbz	r3, 801c84e <_Balloc+0x42>
 801c82c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c82e:	68db      	ldr	r3, [r3, #12]
 801c830:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801c834:	b9b8      	cbnz	r0, 801c866 <_Balloc+0x5a>
 801c836:	2101      	movs	r1, #1
 801c838:	fa01 f506 	lsl.w	r5, r1, r6
 801c83c:	1d6a      	adds	r2, r5, #5
 801c83e:	0092      	lsls	r2, r2, #2
 801c840:	4620      	mov	r0, r4
 801c842:	f000 fbe2 	bl	801d00a <_calloc_r>
 801c846:	b160      	cbz	r0, 801c862 <_Balloc+0x56>
 801c848:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801c84c:	e00e      	b.n	801c86c <_Balloc+0x60>
 801c84e:	2221      	movs	r2, #33	; 0x21
 801c850:	2104      	movs	r1, #4
 801c852:	4620      	mov	r0, r4
 801c854:	f000 fbd9 	bl	801d00a <_calloc_r>
 801c858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c85a:	60e8      	str	r0, [r5, #12]
 801c85c:	68db      	ldr	r3, [r3, #12]
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d1e4      	bne.n	801c82c <_Balloc+0x20>
 801c862:	2000      	movs	r0, #0
 801c864:	bd70      	pop	{r4, r5, r6, pc}
 801c866:	6802      	ldr	r2, [r0, #0]
 801c868:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801c86c:	2300      	movs	r3, #0
 801c86e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c872:	e7f7      	b.n	801c864 <_Balloc+0x58>

0801c874 <_Bfree>:
 801c874:	b570      	push	{r4, r5, r6, lr}
 801c876:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801c878:	4606      	mov	r6, r0
 801c87a:	460d      	mov	r5, r1
 801c87c:	b93c      	cbnz	r4, 801c88e <_Bfree+0x1a>
 801c87e:	2010      	movs	r0, #16
 801c880:	f7ff ffbc 	bl	801c7fc <malloc>
 801c884:	6270      	str	r0, [r6, #36]	; 0x24
 801c886:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c88a:	6004      	str	r4, [r0, #0]
 801c88c:	60c4      	str	r4, [r0, #12]
 801c88e:	b13d      	cbz	r5, 801c8a0 <_Bfree+0x2c>
 801c890:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c892:	686a      	ldr	r2, [r5, #4]
 801c894:	68db      	ldr	r3, [r3, #12]
 801c896:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c89a:	6029      	str	r1, [r5, #0]
 801c89c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801c8a0:	bd70      	pop	{r4, r5, r6, pc}

0801c8a2 <__multadd>:
 801c8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8a6:	690d      	ldr	r5, [r1, #16]
 801c8a8:	461f      	mov	r7, r3
 801c8aa:	4606      	mov	r6, r0
 801c8ac:	460c      	mov	r4, r1
 801c8ae:	f101 0c14 	add.w	ip, r1, #20
 801c8b2:	2300      	movs	r3, #0
 801c8b4:	f8dc 0000 	ldr.w	r0, [ip]
 801c8b8:	b281      	uxth	r1, r0
 801c8ba:	fb02 7101 	mla	r1, r2, r1, r7
 801c8be:	0c0f      	lsrs	r7, r1, #16
 801c8c0:	0c00      	lsrs	r0, r0, #16
 801c8c2:	fb02 7000 	mla	r0, r2, r0, r7
 801c8c6:	b289      	uxth	r1, r1
 801c8c8:	3301      	adds	r3, #1
 801c8ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801c8ce:	429d      	cmp	r5, r3
 801c8d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801c8d4:	f84c 1b04 	str.w	r1, [ip], #4
 801c8d8:	dcec      	bgt.n	801c8b4 <__multadd+0x12>
 801c8da:	b1d7      	cbz	r7, 801c912 <__multadd+0x70>
 801c8dc:	68a3      	ldr	r3, [r4, #8]
 801c8de:	42ab      	cmp	r3, r5
 801c8e0:	dc12      	bgt.n	801c908 <__multadd+0x66>
 801c8e2:	6861      	ldr	r1, [r4, #4]
 801c8e4:	4630      	mov	r0, r6
 801c8e6:	3101      	adds	r1, #1
 801c8e8:	f7ff ff90 	bl	801c80c <_Balloc>
 801c8ec:	6922      	ldr	r2, [r4, #16]
 801c8ee:	3202      	adds	r2, #2
 801c8f0:	f104 010c 	add.w	r1, r4, #12
 801c8f4:	4680      	mov	r8, r0
 801c8f6:	0092      	lsls	r2, r2, #2
 801c8f8:	300c      	adds	r0, #12
 801c8fa:	f7fc fca4 	bl	8019246 <memcpy>
 801c8fe:	4621      	mov	r1, r4
 801c900:	4630      	mov	r0, r6
 801c902:	f7ff ffb7 	bl	801c874 <_Bfree>
 801c906:	4644      	mov	r4, r8
 801c908:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c90c:	3501      	adds	r5, #1
 801c90e:	615f      	str	r7, [r3, #20]
 801c910:	6125      	str	r5, [r4, #16]
 801c912:	4620      	mov	r0, r4
 801c914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801c918 <__s2b>:
 801c918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c91c:	460c      	mov	r4, r1
 801c91e:	4615      	mov	r5, r2
 801c920:	461f      	mov	r7, r3
 801c922:	2209      	movs	r2, #9
 801c924:	3308      	adds	r3, #8
 801c926:	4606      	mov	r6, r0
 801c928:	fb93 f3f2 	sdiv	r3, r3, r2
 801c92c:	2100      	movs	r1, #0
 801c92e:	2201      	movs	r2, #1
 801c930:	429a      	cmp	r2, r3
 801c932:	db20      	blt.n	801c976 <__s2b+0x5e>
 801c934:	4630      	mov	r0, r6
 801c936:	f7ff ff69 	bl	801c80c <_Balloc>
 801c93a:	9b08      	ldr	r3, [sp, #32]
 801c93c:	6143      	str	r3, [r0, #20]
 801c93e:	2d09      	cmp	r5, #9
 801c940:	f04f 0301 	mov.w	r3, #1
 801c944:	6103      	str	r3, [r0, #16]
 801c946:	dd19      	ble.n	801c97c <__s2b+0x64>
 801c948:	f104 0809 	add.w	r8, r4, #9
 801c94c:	46c1      	mov	r9, r8
 801c94e:	442c      	add	r4, r5
 801c950:	f819 3b01 	ldrb.w	r3, [r9], #1
 801c954:	4601      	mov	r1, r0
 801c956:	3b30      	subs	r3, #48	; 0x30
 801c958:	220a      	movs	r2, #10
 801c95a:	4630      	mov	r0, r6
 801c95c:	f7ff ffa1 	bl	801c8a2 <__multadd>
 801c960:	45a1      	cmp	r9, r4
 801c962:	d1f5      	bne.n	801c950 <__s2b+0x38>
 801c964:	eb08 0405 	add.w	r4, r8, r5
 801c968:	3c08      	subs	r4, #8
 801c96a:	1b2d      	subs	r5, r5, r4
 801c96c:	1963      	adds	r3, r4, r5
 801c96e:	42bb      	cmp	r3, r7
 801c970:	db07      	blt.n	801c982 <__s2b+0x6a>
 801c972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c976:	0052      	lsls	r2, r2, #1
 801c978:	3101      	adds	r1, #1
 801c97a:	e7d9      	b.n	801c930 <__s2b+0x18>
 801c97c:	340a      	adds	r4, #10
 801c97e:	2509      	movs	r5, #9
 801c980:	e7f3      	b.n	801c96a <__s2b+0x52>
 801c982:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c986:	4601      	mov	r1, r0
 801c988:	3b30      	subs	r3, #48	; 0x30
 801c98a:	220a      	movs	r2, #10
 801c98c:	4630      	mov	r0, r6
 801c98e:	f7ff ff88 	bl	801c8a2 <__multadd>
 801c992:	e7eb      	b.n	801c96c <__s2b+0x54>

0801c994 <__hi0bits>:
 801c994:	0c02      	lsrs	r2, r0, #16
 801c996:	0412      	lsls	r2, r2, #16
 801c998:	4603      	mov	r3, r0
 801c99a:	b9b2      	cbnz	r2, 801c9ca <__hi0bits+0x36>
 801c99c:	0403      	lsls	r3, r0, #16
 801c99e:	2010      	movs	r0, #16
 801c9a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c9a4:	bf04      	itt	eq
 801c9a6:	021b      	lsleq	r3, r3, #8
 801c9a8:	3008      	addeq	r0, #8
 801c9aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c9ae:	bf04      	itt	eq
 801c9b0:	011b      	lsleq	r3, r3, #4
 801c9b2:	3004      	addeq	r0, #4
 801c9b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c9b8:	bf04      	itt	eq
 801c9ba:	009b      	lsleq	r3, r3, #2
 801c9bc:	3002      	addeq	r0, #2
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	db06      	blt.n	801c9d0 <__hi0bits+0x3c>
 801c9c2:	005b      	lsls	r3, r3, #1
 801c9c4:	d503      	bpl.n	801c9ce <__hi0bits+0x3a>
 801c9c6:	3001      	adds	r0, #1
 801c9c8:	4770      	bx	lr
 801c9ca:	2000      	movs	r0, #0
 801c9cc:	e7e8      	b.n	801c9a0 <__hi0bits+0xc>
 801c9ce:	2020      	movs	r0, #32
 801c9d0:	4770      	bx	lr

0801c9d2 <__lo0bits>:
 801c9d2:	6803      	ldr	r3, [r0, #0]
 801c9d4:	f013 0207 	ands.w	r2, r3, #7
 801c9d8:	4601      	mov	r1, r0
 801c9da:	d00b      	beq.n	801c9f4 <__lo0bits+0x22>
 801c9dc:	07da      	lsls	r2, r3, #31
 801c9de:	d423      	bmi.n	801ca28 <__lo0bits+0x56>
 801c9e0:	0798      	lsls	r0, r3, #30
 801c9e2:	bf49      	itett	mi
 801c9e4:	085b      	lsrmi	r3, r3, #1
 801c9e6:	089b      	lsrpl	r3, r3, #2
 801c9e8:	2001      	movmi	r0, #1
 801c9ea:	600b      	strmi	r3, [r1, #0]
 801c9ec:	bf5c      	itt	pl
 801c9ee:	600b      	strpl	r3, [r1, #0]
 801c9f0:	2002      	movpl	r0, #2
 801c9f2:	4770      	bx	lr
 801c9f4:	b298      	uxth	r0, r3
 801c9f6:	b9a8      	cbnz	r0, 801ca24 <__lo0bits+0x52>
 801c9f8:	0c1b      	lsrs	r3, r3, #16
 801c9fa:	2010      	movs	r0, #16
 801c9fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 801ca00:	bf04      	itt	eq
 801ca02:	0a1b      	lsreq	r3, r3, #8
 801ca04:	3008      	addeq	r0, #8
 801ca06:	071a      	lsls	r2, r3, #28
 801ca08:	bf04      	itt	eq
 801ca0a:	091b      	lsreq	r3, r3, #4
 801ca0c:	3004      	addeq	r0, #4
 801ca0e:	079a      	lsls	r2, r3, #30
 801ca10:	bf04      	itt	eq
 801ca12:	089b      	lsreq	r3, r3, #2
 801ca14:	3002      	addeq	r0, #2
 801ca16:	07da      	lsls	r2, r3, #31
 801ca18:	d402      	bmi.n	801ca20 <__lo0bits+0x4e>
 801ca1a:	085b      	lsrs	r3, r3, #1
 801ca1c:	d006      	beq.n	801ca2c <__lo0bits+0x5a>
 801ca1e:	3001      	adds	r0, #1
 801ca20:	600b      	str	r3, [r1, #0]
 801ca22:	4770      	bx	lr
 801ca24:	4610      	mov	r0, r2
 801ca26:	e7e9      	b.n	801c9fc <__lo0bits+0x2a>
 801ca28:	2000      	movs	r0, #0
 801ca2a:	4770      	bx	lr
 801ca2c:	2020      	movs	r0, #32
 801ca2e:	4770      	bx	lr

0801ca30 <__i2b>:
 801ca30:	b510      	push	{r4, lr}
 801ca32:	460c      	mov	r4, r1
 801ca34:	2101      	movs	r1, #1
 801ca36:	f7ff fee9 	bl	801c80c <_Balloc>
 801ca3a:	2201      	movs	r2, #1
 801ca3c:	6144      	str	r4, [r0, #20]
 801ca3e:	6102      	str	r2, [r0, #16]
 801ca40:	bd10      	pop	{r4, pc}

0801ca42 <__multiply>:
 801ca42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca46:	4614      	mov	r4, r2
 801ca48:	690a      	ldr	r2, [r1, #16]
 801ca4a:	6923      	ldr	r3, [r4, #16]
 801ca4c:	429a      	cmp	r2, r3
 801ca4e:	bfb8      	it	lt
 801ca50:	460b      	movlt	r3, r1
 801ca52:	4688      	mov	r8, r1
 801ca54:	bfbc      	itt	lt
 801ca56:	46a0      	movlt	r8, r4
 801ca58:	461c      	movlt	r4, r3
 801ca5a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ca5e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801ca62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ca66:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ca6a:	eb07 0609 	add.w	r6, r7, r9
 801ca6e:	42b3      	cmp	r3, r6
 801ca70:	bfb8      	it	lt
 801ca72:	3101      	addlt	r1, #1
 801ca74:	f7ff feca 	bl	801c80c <_Balloc>
 801ca78:	f100 0514 	add.w	r5, r0, #20
 801ca7c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801ca80:	462b      	mov	r3, r5
 801ca82:	2200      	movs	r2, #0
 801ca84:	4573      	cmp	r3, lr
 801ca86:	d316      	bcc.n	801cab6 <__multiply+0x74>
 801ca88:	f104 0214 	add.w	r2, r4, #20
 801ca8c:	f108 0114 	add.w	r1, r8, #20
 801ca90:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801ca94:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801ca98:	9300      	str	r3, [sp, #0]
 801ca9a:	9b00      	ldr	r3, [sp, #0]
 801ca9c:	9201      	str	r2, [sp, #4]
 801ca9e:	4293      	cmp	r3, r2
 801caa0:	d80c      	bhi.n	801cabc <__multiply+0x7a>
 801caa2:	2e00      	cmp	r6, #0
 801caa4:	dd03      	ble.n	801caae <__multiply+0x6c>
 801caa6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d05d      	beq.n	801cb6a <__multiply+0x128>
 801caae:	6106      	str	r6, [r0, #16]
 801cab0:	b003      	add	sp, #12
 801cab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cab6:	f843 2b04 	str.w	r2, [r3], #4
 801caba:	e7e3      	b.n	801ca84 <__multiply+0x42>
 801cabc:	f8b2 b000 	ldrh.w	fp, [r2]
 801cac0:	f1bb 0f00 	cmp.w	fp, #0
 801cac4:	d023      	beq.n	801cb0e <__multiply+0xcc>
 801cac6:	4689      	mov	r9, r1
 801cac8:	46ac      	mov	ip, r5
 801caca:	f04f 0800 	mov.w	r8, #0
 801cace:	f859 4b04 	ldr.w	r4, [r9], #4
 801cad2:	f8dc a000 	ldr.w	sl, [ip]
 801cad6:	b2a3      	uxth	r3, r4
 801cad8:	fa1f fa8a 	uxth.w	sl, sl
 801cadc:	fb0b a303 	mla	r3, fp, r3, sl
 801cae0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801cae4:	f8dc 4000 	ldr.w	r4, [ip]
 801cae8:	4443      	add	r3, r8
 801caea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801caee:	fb0b 840a 	mla	r4, fp, sl, r8
 801caf2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801caf6:	46e2      	mov	sl, ip
 801caf8:	b29b      	uxth	r3, r3
 801cafa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801cafe:	454f      	cmp	r7, r9
 801cb00:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801cb04:	f84a 3b04 	str.w	r3, [sl], #4
 801cb08:	d82b      	bhi.n	801cb62 <__multiply+0x120>
 801cb0a:	f8cc 8004 	str.w	r8, [ip, #4]
 801cb0e:	9b01      	ldr	r3, [sp, #4]
 801cb10:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801cb14:	3204      	adds	r2, #4
 801cb16:	f1ba 0f00 	cmp.w	sl, #0
 801cb1a:	d020      	beq.n	801cb5e <__multiply+0x11c>
 801cb1c:	682b      	ldr	r3, [r5, #0]
 801cb1e:	4689      	mov	r9, r1
 801cb20:	46a8      	mov	r8, r5
 801cb22:	f04f 0b00 	mov.w	fp, #0
 801cb26:	f8b9 c000 	ldrh.w	ip, [r9]
 801cb2a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801cb2e:	fb0a 440c 	mla	r4, sl, ip, r4
 801cb32:	445c      	add	r4, fp
 801cb34:	46c4      	mov	ip, r8
 801cb36:	b29b      	uxth	r3, r3
 801cb38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801cb3c:	f84c 3b04 	str.w	r3, [ip], #4
 801cb40:	f859 3b04 	ldr.w	r3, [r9], #4
 801cb44:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801cb48:	0c1b      	lsrs	r3, r3, #16
 801cb4a:	fb0a b303 	mla	r3, sl, r3, fp
 801cb4e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801cb52:	454f      	cmp	r7, r9
 801cb54:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801cb58:	d805      	bhi.n	801cb66 <__multiply+0x124>
 801cb5a:	f8c8 3004 	str.w	r3, [r8, #4]
 801cb5e:	3504      	adds	r5, #4
 801cb60:	e79b      	b.n	801ca9a <__multiply+0x58>
 801cb62:	46d4      	mov	ip, sl
 801cb64:	e7b3      	b.n	801cace <__multiply+0x8c>
 801cb66:	46e0      	mov	r8, ip
 801cb68:	e7dd      	b.n	801cb26 <__multiply+0xe4>
 801cb6a:	3e01      	subs	r6, #1
 801cb6c:	e799      	b.n	801caa2 <__multiply+0x60>
	...

0801cb70 <__pow5mult>:
 801cb70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cb74:	4615      	mov	r5, r2
 801cb76:	f012 0203 	ands.w	r2, r2, #3
 801cb7a:	4606      	mov	r6, r0
 801cb7c:	460f      	mov	r7, r1
 801cb7e:	d007      	beq.n	801cb90 <__pow5mult+0x20>
 801cb80:	3a01      	subs	r2, #1
 801cb82:	4c21      	ldr	r4, [pc, #132]	; (801cc08 <__pow5mult+0x98>)
 801cb84:	2300      	movs	r3, #0
 801cb86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cb8a:	f7ff fe8a 	bl	801c8a2 <__multadd>
 801cb8e:	4607      	mov	r7, r0
 801cb90:	10ad      	asrs	r5, r5, #2
 801cb92:	d035      	beq.n	801cc00 <__pow5mult+0x90>
 801cb94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801cb96:	b93c      	cbnz	r4, 801cba8 <__pow5mult+0x38>
 801cb98:	2010      	movs	r0, #16
 801cb9a:	f7ff fe2f 	bl	801c7fc <malloc>
 801cb9e:	6270      	str	r0, [r6, #36]	; 0x24
 801cba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cba4:	6004      	str	r4, [r0, #0]
 801cba6:	60c4      	str	r4, [r0, #12]
 801cba8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801cbac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cbb0:	b94c      	cbnz	r4, 801cbc6 <__pow5mult+0x56>
 801cbb2:	f240 2171 	movw	r1, #625	; 0x271
 801cbb6:	4630      	mov	r0, r6
 801cbb8:	f7ff ff3a 	bl	801ca30 <__i2b>
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	f8c8 0008 	str.w	r0, [r8, #8]
 801cbc2:	4604      	mov	r4, r0
 801cbc4:	6003      	str	r3, [r0, #0]
 801cbc6:	f04f 0800 	mov.w	r8, #0
 801cbca:	07eb      	lsls	r3, r5, #31
 801cbcc:	d50a      	bpl.n	801cbe4 <__pow5mult+0x74>
 801cbce:	4639      	mov	r1, r7
 801cbd0:	4622      	mov	r2, r4
 801cbd2:	4630      	mov	r0, r6
 801cbd4:	f7ff ff35 	bl	801ca42 <__multiply>
 801cbd8:	4639      	mov	r1, r7
 801cbda:	4681      	mov	r9, r0
 801cbdc:	4630      	mov	r0, r6
 801cbde:	f7ff fe49 	bl	801c874 <_Bfree>
 801cbe2:	464f      	mov	r7, r9
 801cbe4:	106d      	asrs	r5, r5, #1
 801cbe6:	d00b      	beq.n	801cc00 <__pow5mult+0x90>
 801cbe8:	6820      	ldr	r0, [r4, #0]
 801cbea:	b938      	cbnz	r0, 801cbfc <__pow5mult+0x8c>
 801cbec:	4622      	mov	r2, r4
 801cbee:	4621      	mov	r1, r4
 801cbf0:	4630      	mov	r0, r6
 801cbf2:	f7ff ff26 	bl	801ca42 <__multiply>
 801cbf6:	6020      	str	r0, [r4, #0]
 801cbf8:	f8c0 8000 	str.w	r8, [r0]
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	e7e4      	b.n	801cbca <__pow5mult+0x5a>
 801cc00:	4638      	mov	r0, r7
 801cc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc06:	bf00      	nop
 801cc08:	08021ea8 	.word	0x08021ea8

0801cc0c <__lshift>:
 801cc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc10:	460c      	mov	r4, r1
 801cc12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cc16:	6923      	ldr	r3, [r4, #16]
 801cc18:	6849      	ldr	r1, [r1, #4]
 801cc1a:	eb0a 0903 	add.w	r9, sl, r3
 801cc1e:	68a3      	ldr	r3, [r4, #8]
 801cc20:	4607      	mov	r7, r0
 801cc22:	4616      	mov	r6, r2
 801cc24:	f109 0501 	add.w	r5, r9, #1
 801cc28:	42ab      	cmp	r3, r5
 801cc2a:	db32      	blt.n	801cc92 <__lshift+0x86>
 801cc2c:	4638      	mov	r0, r7
 801cc2e:	f7ff fded 	bl	801c80c <_Balloc>
 801cc32:	2300      	movs	r3, #0
 801cc34:	4680      	mov	r8, r0
 801cc36:	f100 0114 	add.w	r1, r0, #20
 801cc3a:	461a      	mov	r2, r3
 801cc3c:	4553      	cmp	r3, sl
 801cc3e:	db2b      	blt.n	801cc98 <__lshift+0x8c>
 801cc40:	6920      	ldr	r0, [r4, #16]
 801cc42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cc46:	f104 0314 	add.w	r3, r4, #20
 801cc4a:	f016 021f 	ands.w	r2, r6, #31
 801cc4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cc52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cc56:	d025      	beq.n	801cca4 <__lshift+0x98>
 801cc58:	f1c2 0e20 	rsb	lr, r2, #32
 801cc5c:	2000      	movs	r0, #0
 801cc5e:	681e      	ldr	r6, [r3, #0]
 801cc60:	468a      	mov	sl, r1
 801cc62:	4096      	lsls	r6, r2
 801cc64:	4330      	orrs	r0, r6
 801cc66:	f84a 0b04 	str.w	r0, [sl], #4
 801cc6a:	f853 0b04 	ldr.w	r0, [r3], #4
 801cc6e:	459c      	cmp	ip, r3
 801cc70:	fa20 f00e 	lsr.w	r0, r0, lr
 801cc74:	d814      	bhi.n	801cca0 <__lshift+0x94>
 801cc76:	6048      	str	r0, [r1, #4]
 801cc78:	b108      	cbz	r0, 801cc7e <__lshift+0x72>
 801cc7a:	f109 0502 	add.w	r5, r9, #2
 801cc7e:	3d01      	subs	r5, #1
 801cc80:	4638      	mov	r0, r7
 801cc82:	f8c8 5010 	str.w	r5, [r8, #16]
 801cc86:	4621      	mov	r1, r4
 801cc88:	f7ff fdf4 	bl	801c874 <_Bfree>
 801cc8c:	4640      	mov	r0, r8
 801cc8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc92:	3101      	adds	r1, #1
 801cc94:	005b      	lsls	r3, r3, #1
 801cc96:	e7c7      	b.n	801cc28 <__lshift+0x1c>
 801cc98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801cc9c:	3301      	adds	r3, #1
 801cc9e:	e7cd      	b.n	801cc3c <__lshift+0x30>
 801cca0:	4651      	mov	r1, sl
 801cca2:	e7dc      	b.n	801cc5e <__lshift+0x52>
 801cca4:	3904      	subs	r1, #4
 801cca6:	f853 2b04 	ldr.w	r2, [r3], #4
 801ccaa:	f841 2f04 	str.w	r2, [r1, #4]!
 801ccae:	459c      	cmp	ip, r3
 801ccb0:	d8f9      	bhi.n	801cca6 <__lshift+0x9a>
 801ccb2:	e7e4      	b.n	801cc7e <__lshift+0x72>

0801ccb4 <__mcmp>:
 801ccb4:	6903      	ldr	r3, [r0, #16]
 801ccb6:	690a      	ldr	r2, [r1, #16]
 801ccb8:	1a9b      	subs	r3, r3, r2
 801ccba:	b530      	push	{r4, r5, lr}
 801ccbc:	d10c      	bne.n	801ccd8 <__mcmp+0x24>
 801ccbe:	0092      	lsls	r2, r2, #2
 801ccc0:	3014      	adds	r0, #20
 801ccc2:	3114      	adds	r1, #20
 801ccc4:	1884      	adds	r4, r0, r2
 801ccc6:	4411      	add	r1, r2
 801ccc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cccc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ccd0:	4295      	cmp	r5, r2
 801ccd2:	d003      	beq.n	801ccdc <__mcmp+0x28>
 801ccd4:	d305      	bcc.n	801cce2 <__mcmp+0x2e>
 801ccd6:	2301      	movs	r3, #1
 801ccd8:	4618      	mov	r0, r3
 801ccda:	bd30      	pop	{r4, r5, pc}
 801ccdc:	42a0      	cmp	r0, r4
 801ccde:	d3f3      	bcc.n	801ccc8 <__mcmp+0x14>
 801cce0:	e7fa      	b.n	801ccd8 <__mcmp+0x24>
 801cce2:	f04f 33ff 	mov.w	r3, #4294967295
 801cce6:	e7f7      	b.n	801ccd8 <__mcmp+0x24>

0801cce8 <__mdiff>:
 801cce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ccec:	460d      	mov	r5, r1
 801ccee:	4607      	mov	r7, r0
 801ccf0:	4611      	mov	r1, r2
 801ccf2:	4628      	mov	r0, r5
 801ccf4:	4614      	mov	r4, r2
 801ccf6:	f7ff ffdd 	bl	801ccb4 <__mcmp>
 801ccfa:	1e06      	subs	r6, r0, #0
 801ccfc:	d108      	bne.n	801cd10 <__mdiff+0x28>
 801ccfe:	4631      	mov	r1, r6
 801cd00:	4638      	mov	r0, r7
 801cd02:	f7ff fd83 	bl	801c80c <_Balloc>
 801cd06:	2301      	movs	r3, #1
 801cd08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801cd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd10:	bfa4      	itt	ge
 801cd12:	4623      	movge	r3, r4
 801cd14:	462c      	movge	r4, r5
 801cd16:	4638      	mov	r0, r7
 801cd18:	6861      	ldr	r1, [r4, #4]
 801cd1a:	bfa6      	itte	ge
 801cd1c:	461d      	movge	r5, r3
 801cd1e:	2600      	movge	r6, #0
 801cd20:	2601      	movlt	r6, #1
 801cd22:	f7ff fd73 	bl	801c80c <_Balloc>
 801cd26:	692b      	ldr	r3, [r5, #16]
 801cd28:	60c6      	str	r6, [r0, #12]
 801cd2a:	6926      	ldr	r6, [r4, #16]
 801cd2c:	f105 0914 	add.w	r9, r5, #20
 801cd30:	f104 0214 	add.w	r2, r4, #20
 801cd34:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801cd38:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801cd3c:	f100 0514 	add.w	r5, r0, #20
 801cd40:	f04f 0e00 	mov.w	lr, #0
 801cd44:	f852 ab04 	ldr.w	sl, [r2], #4
 801cd48:	f859 4b04 	ldr.w	r4, [r9], #4
 801cd4c:	fa1e f18a 	uxtah	r1, lr, sl
 801cd50:	b2a3      	uxth	r3, r4
 801cd52:	1ac9      	subs	r1, r1, r3
 801cd54:	0c23      	lsrs	r3, r4, #16
 801cd56:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801cd5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801cd5e:	b289      	uxth	r1, r1
 801cd60:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801cd64:	45c8      	cmp	r8, r9
 801cd66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801cd6a:	4694      	mov	ip, r2
 801cd6c:	f845 3b04 	str.w	r3, [r5], #4
 801cd70:	d8e8      	bhi.n	801cd44 <__mdiff+0x5c>
 801cd72:	45bc      	cmp	ip, r7
 801cd74:	d304      	bcc.n	801cd80 <__mdiff+0x98>
 801cd76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801cd7a:	b183      	cbz	r3, 801cd9e <__mdiff+0xb6>
 801cd7c:	6106      	str	r6, [r0, #16]
 801cd7e:	e7c5      	b.n	801cd0c <__mdiff+0x24>
 801cd80:	f85c 1b04 	ldr.w	r1, [ip], #4
 801cd84:	fa1e f381 	uxtah	r3, lr, r1
 801cd88:	141a      	asrs	r2, r3, #16
 801cd8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cd8e:	b29b      	uxth	r3, r3
 801cd90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cd94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801cd98:	f845 3b04 	str.w	r3, [r5], #4
 801cd9c:	e7e9      	b.n	801cd72 <__mdiff+0x8a>
 801cd9e:	3e01      	subs	r6, #1
 801cda0:	e7e9      	b.n	801cd76 <__mdiff+0x8e>
	...

0801cda4 <__ulp>:
 801cda4:	4b12      	ldr	r3, [pc, #72]	; (801cdf0 <__ulp+0x4c>)
 801cda6:	ee10 2a90 	vmov	r2, s1
 801cdaa:	401a      	ands	r2, r3
 801cdac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	dd04      	ble.n	801cdbe <__ulp+0x1a>
 801cdb4:	2000      	movs	r0, #0
 801cdb6:	4619      	mov	r1, r3
 801cdb8:	ec41 0b10 	vmov	d0, r0, r1
 801cdbc:	4770      	bx	lr
 801cdbe:	425b      	negs	r3, r3
 801cdc0:	151b      	asrs	r3, r3, #20
 801cdc2:	2b13      	cmp	r3, #19
 801cdc4:	f04f 0000 	mov.w	r0, #0
 801cdc8:	f04f 0100 	mov.w	r1, #0
 801cdcc:	dc04      	bgt.n	801cdd8 <__ulp+0x34>
 801cdce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801cdd2:	fa42 f103 	asr.w	r1, r2, r3
 801cdd6:	e7ef      	b.n	801cdb8 <__ulp+0x14>
 801cdd8:	3b14      	subs	r3, #20
 801cdda:	2b1e      	cmp	r3, #30
 801cddc:	f04f 0201 	mov.w	r2, #1
 801cde0:	bfda      	itte	le
 801cde2:	f1c3 031f 	rsble	r3, r3, #31
 801cde6:	fa02 f303 	lslle.w	r3, r2, r3
 801cdea:	4613      	movgt	r3, r2
 801cdec:	4618      	mov	r0, r3
 801cdee:	e7e3      	b.n	801cdb8 <__ulp+0x14>
 801cdf0:	7ff00000 	.word	0x7ff00000

0801cdf4 <__b2d>:
 801cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdf6:	6905      	ldr	r5, [r0, #16]
 801cdf8:	f100 0714 	add.w	r7, r0, #20
 801cdfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ce00:	1f2e      	subs	r6, r5, #4
 801ce02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ce06:	4620      	mov	r0, r4
 801ce08:	f7ff fdc4 	bl	801c994 <__hi0bits>
 801ce0c:	f1c0 0320 	rsb	r3, r0, #32
 801ce10:	280a      	cmp	r0, #10
 801ce12:	600b      	str	r3, [r1, #0]
 801ce14:	f8df c074 	ldr.w	ip, [pc, #116]	; 801ce8c <__b2d+0x98>
 801ce18:	dc14      	bgt.n	801ce44 <__b2d+0x50>
 801ce1a:	f1c0 0e0b 	rsb	lr, r0, #11
 801ce1e:	fa24 f10e 	lsr.w	r1, r4, lr
 801ce22:	42b7      	cmp	r7, r6
 801ce24:	ea41 030c 	orr.w	r3, r1, ip
 801ce28:	bf34      	ite	cc
 801ce2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ce2e:	2100      	movcs	r1, #0
 801ce30:	3015      	adds	r0, #21
 801ce32:	fa04 f000 	lsl.w	r0, r4, r0
 801ce36:	fa21 f10e 	lsr.w	r1, r1, lr
 801ce3a:	ea40 0201 	orr.w	r2, r0, r1
 801ce3e:	ec43 2b10 	vmov	d0, r2, r3
 801ce42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ce44:	42b7      	cmp	r7, r6
 801ce46:	bf3a      	itte	cc
 801ce48:	f1a5 0608 	subcc.w	r6, r5, #8
 801ce4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ce50:	2100      	movcs	r1, #0
 801ce52:	380b      	subs	r0, #11
 801ce54:	d015      	beq.n	801ce82 <__b2d+0x8e>
 801ce56:	4084      	lsls	r4, r0
 801ce58:	f1c0 0520 	rsb	r5, r0, #32
 801ce5c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801ce60:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801ce64:	42be      	cmp	r6, r7
 801ce66:	fa21 fc05 	lsr.w	ip, r1, r5
 801ce6a:	ea44 030c 	orr.w	r3, r4, ip
 801ce6e:	bf8c      	ite	hi
 801ce70:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801ce74:	2400      	movls	r4, #0
 801ce76:	fa01 f000 	lsl.w	r0, r1, r0
 801ce7a:	40ec      	lsrs	r4, r5
 801ce7c:	ea40 0204 	orr.w	r2, r0, r4
 801ce80:	e7dd      	b.n	801ce3e <__b2d+0x4a>
 801ce82:	ea44 030c 	orr.w	r3, r4, ip
 801ce86:	460a      	mov	r2, r1
 801ce88:	e7d9      	b.n	801ce3e <__b2d+0x4a>
 801ce8a:	bf00      	nop
 801ce8c:	3ff00000 	.word	0x3ff00000

0801ce90 <__d2b>:
 801ce90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801ce94:	460e      	mov	r6, r1
 801ce96:	2101      	movs	r1, #1
 801ce98:	ec59 8b10 	vmov	r8, r9, d0
 801ce9c:	4615      	mov	r5, r2
 801ce9e:	f7ff fcb5 	bl	801c80c <_Balloc>
 801cea2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801cea6:	4607      	mov	r7, r0
 801cea8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ceac:	bb34      	cbnz	r4, 801cefc <__d2b+0x6c>
 801ceae:	9301      	str	r3, [sp, #4]
 801ceb0:	f1b8 0300 	subs.w	r3, r8, #0
 801ceb4:	d027      	beq.n	801cf06 <__d2b+0x76>
 801ceb6:	a802      	add	r0, sp, #8
 801ceb8:	f840 3d08 	str.w	r3, [r0, #-8]!
 801cebc:	f7ff fd89 	bl	801c9d2 <__lo0bits>
 801cec0:	9900      	ldr	r1, [sp, #0]
 801cec2:	b1f0      	cbz	r0, 801cf02 <__d2b+0x72>
 801cec4:	9a01      	ldr	r2, [sp, #4]
 801cec6:	f1c0 0320 	rsb	r3, r0, #32
 801ceca:	fa02 f303 	lsl.w	r3, r2, r3
 801cece:	430b      	orrs	r3, r1
 801ced0:	40c2      	lsrs	r2, r0
 801ced2:	617b      	str	r3, [r7, #20]
 801ced4:	9201      	str	r2, [sp, #4]
 801ced6:	9b01      	ldr	r3, [sp, #4]
 801ced8:	61bb      	str	r3, [r7, #24]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	bf14      	ite	ne
 801cede:	2102      	movne	r1, #2
 801cee0:	2101      	moveq	r1, #1
 801cee2:	6139      	str	r1, [r7, #16]
 801cee4:	b1c4      	cbz	r4, 801cf18 <__d2b+0x88>
 801cee6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801ceea:	4404      	add	r4, r0
 801ceec:	6034      	str	r4, [r6, #0]
 801ceee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cef2:	6028      	str	r0, [r5, #0]
 801cef4:	4638      	mov	r0, r7
 801cef6:	b003      	add	sp, #12
 801cef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cf00:	e7d5      	b.n	801ceae <__d2b+0x1e>
 801cf02:	6179      	str	r1, [r7, #20]
 801cf04:	e7e7      	b.n	801ced6 <__d2b+0x46>
 801cf06:	a801      	add	r0, sp, #4
 801cf08:	f7ff fd63 	bl	801c9d2 <__lo0bits>
 801cf0c:	9b01      	ldr	r3, [sp, #4]
 801cf0e:	617b      	str	r3, [r7, #20]
 801cf10:	2101      	movs	r1, #1
 801cf12:	6139      	str	r1, [r7, #16]
 801cf14:	3020      	adds	r0, #32
 801cf16:	e7e5      	b.n	801cee4 <__d2b+0x54>
 801cf18:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801cf1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cf20:	6030      	str	r0, [r6, #0]
 801cf22:	6918      	ldr	r0, [r3, #16]
 801cf24:	f7ff fd36 	bl	801c994 <__hi0bits>
 801cf28:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801cf2c:	e7e1      	b.n	801cef2 <__d2b+0x62>

0801cf2e <__ratio>:
 801cf2e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf32:	4688      	mov	r8, r1
 801cf34:	4669      	mov	r1, sp
 801cf36:	4681      	mov	r9, r0
 801cf38:	f7ff ff5c 	bl	801cdf4 <__b2d>
 801cf3c:	a901      	add	r1, sp, #4
 801cf3e:	4640      	mov	r0, r8
 801cf40:	ec57 6b10 	vmov	r6, r7, d0
 801cf44:	f7ff ff56 	bl	801cdf4 <__b2d>
 801cf48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cf4c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801cf50:	eba3 0c02 	sub.w	ip, r3, r2
 801cf54:	e9dd 3200 	ldrd	r3, r2, [sp]
 801cf58:	1a9b      	subs	r3, r3, r2
 801cf5a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801cf5e:	ec5b ab10 	vmov	sl, fp, d0
 801cf62:	2b00      	cmp	r3, #0
 801cf64:	bfce      	itee	gt
 801cf66:	463a      	movgt	r2, r7
 801cf68:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801cf6c:	465a      	movle	r2, fp
 801cf6e:	4659      	mov	r1, fp
 801cf70:	463d      	mov	r5, r7
 801cf72:	bfd4      	ite	le
 801cf74:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801cf78:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801cf7c:	4630      	mov	r0, r6
 801cf7e:	ee10 2a10 	vmov	r2, s0
 801cf82:	460b      	mov	r3, r1
 801cf84:	4629      	mov	r1, r5
 801cf86:	f7e3 fc81 	bl	800088c <__aeabi_ddiv>
 801cf8a:	ec41 0b10 	vmov	d0, r0, r1
 801cf8e:	b003      	add	sp, #12
 801cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf94 <__copybits>:
 801cf94:	3901      	subs	r1, #1
 801cf96:	b510      	push	{r4, lr}
 801cf98:	1149      	asrs	r1, r1, #5
 801cf9a:	6914      	ldr	r4, [r2, #16]
 801cf9c:	3101      	adds	r1, #1
 801cf9e:	f102 0314 	add.w	r3, r2, #20
 801cfa2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cfa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cfaa:	42a3      	cmp	r3, r4
 801cfac:	4602      	mov	r2, r0
 801cfae:	d303      	bcc.n	801cfb8 <__copybits+0x24>
 801cfb0:	2300      	movs	r3, #0
 801cfb2:	428a      	cmp	r2, r1
 801cfb4:	d305      	bcc.n	801cfc2 <__copybits+0x2e>
 801cfb6:	bd10      	pop	{r4, pc}
 801cfb8:	f853 2b04 	ldr.w	r2, [r3], #4
 801cfbc:	f840 2b04 	str.w	r2, [r0], #4
 801cfc0:	e7f3      	b.n	801cfaa <__copybits+0x16>
 801cfc2:	f842 3b04 	str.w	r3, [r2], #4
 801cfc6:	e7f4      	b.n	801cfb2 <__copybits+0x1e>

0801cfc8 <__any_on>:
 801cfc8:	f100 0214 	add.w	r2, r0, #20
 801cfcc:	6900      	ldr	r0, [r0, #16]
 801cfce:	114b      	asrs	r3, r1, #5
 801cfd0:	4298      	cmp	r0, r3
 801cfd2:	b510      	push	{r4, lr}
 801cfd4:	db11      	blt.n	801cffa <__any_on+0x32>
 801cfd6:	dd0a      	ble.n	801cfee <__any_on+0x26>
 801cfd8:	f011 011f 	ands.w	r1, r1, #31
 801cfdc:	d007      	beq.n	801cfee <__any_on+0x26>
 801cfde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cfe2:	fa24 f001 	lsr.w	r0, r4, r1
 801cfe6:	fa00 f101 	lsl.w	r1, r0, r1
 801cfea:	428c      	cmp	r4, r1
 801cfec:	d10b      	bne.n	801d006 <__any_on+0x3e>
 801cfee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cff2:	4293      	cmp	r3, r2
 801cff4:	d803      	bhi.n	801cffe <__any_on+0x36>
 801cff6:	2000      	movs	r0, #0
 801cff8:	bd10      	pop	{r4, pc}
 801cffa:	4603      	mov	r3, r0
 801cffc:	e7f7      	b.n	801cfee <__any_on+0x26>
 801cffe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d002:	2900      	cmp	r1, #0
 801d004:	d0f5      	beq.n	801cff2 <__any_on+0x2a>
 801d006:	2001      	movs	r0, #1
 801d008:	e7f6      	b.n	801cff8 <__any_on+0x30>

0801d00a <_calloc_r>:
 801d00a:	b538      	push	{r3, r4, r5, lr}
 801d00c:	fb02 f401 	mul.w	r4, r2, r1
 801d010:	4621      	mov	r1, r4
 801d012:	f000 f857 	bl	801d0c4 <_malloc_r>
 801d016:	4605      	mov	r5, r0
 801d018:	b118      	cbz	r0, 801d022 <_calloc_r+0x18>
 801d01a:	4622      	mov	r2, r4
 801d01c:	2100      	movs	r1, #0
 801d01e:	f7fc f936 	bl	801928e <memset>
 801d022:	4628      	mov	r0, r5
 801d024:	bd38      	pop	{r3, r4, r5, pc}
	...

0801d028 <_free_r>:
 801d028:	b538      	push	{r3, r4, r5, lr}
 801d02a:	4605      	mov	r5, r0
 801d02c:	2900      	cmp	r1, #0
 801d02e:	d045      	beq.n	801d0bc <_free_r+0x94>
 801d030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d034:	1f0c      	subs	r4, r1, #4
 801d036:	2b00      	cmp	r3, #0
 801d038:	bfb8      	it	lt
 801d03a:	18e4      	addlt	r4, r4, r3
 801d03c:	f000 ff6c 	bl	801df18 <__malloc_lock>
 801d040:	4a1f      	ldr	r2, [pc, #124]	; (801d0c0 <_free_r+0x98>)
 801d042:	6813      	ldr	r3, [r2, #0]
 801d044:	4610      	mov	r0, r2
 801d046:	b933      	cbnz	r3, 801d056 <_free_r+0x2e>
 801d048:	6063      	str	r3, [r4, #4]
 801d04a:	6014      	str	r4, [r2, #0]
 801d04c:	4628      	mov	r0, r5
 801d04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d052:	f000 bf62 	b.w	801df1a <__malloc_unlock>
 801d056:	42a3      	cmp	r3, r4
 801d058:	d90c      	bls.n	801d074 <_free_r+0x4c>
 801d05a:	6821      	ldr	r1, [r4, #0]
 801d05c:	1862      	adds	r2, r4, r1
 801d05e:	4293      	cmp	r3, r2
 801d060:	bf04      	itt	eq
 801d062:	681a      	ldreq	r2, [r3, #0]
 801d064:	685b      	ldreq	r3, [r3, #4]
 801d066:	6063      	str	r3, [r4, #4]
 801d068:	bf04      	itt	eq
 801d06a:	1852      	addeq	r2, r2, r1
 801d06c:	6022      	streq	r2, [r4, #0]
 801d06e:	6004      	str	r4, [r0, #0]
 801d070:	e7ec      	b.n	801d04c <_free_r+0x24>
 801d072:	4613      	mov	r3, r2
 801d074:	685a      	ldr	r2, [r3, #4]
 801d076:	b10a      	cbz	r2, 801d07c <_free_r+0x54>
 801d078:	42a2      	cmp	r2, r4
 801d07a:	d9fa      	bls.n	801d072 <_free_r+0x4a>
 801d07c:	6819      	ldr	r1, [r3, #0]
 801d07e:	1858      	adds	r0, r3, r1
 801d080:	42a0      	cmp	r0, r4
 801d082:	d10b      	bne.n	801d09c <_free_r+0x74>
 801d084:	6820      	ldr	r0, [r4, #0]
 801d086:	4401      	add	r1, r0
 801d088:	1858      	adds	r0, r3, r1
 801d08a:	4282      	cmp	r2, r0
 801d08c:	6019      	str	r1, [r3, #0]
 801d08e:	d1dd      	bne.n	801d04c <_free_r+0x24>
 801d090:	6810      	ldr	r0, [r2, #0]
 801d092:	6852      	ldr	r2, [r2, #4]
 801d094:	605a      	str	r2, [r3, #4]
 801d096:	4401      	add	r1, r0
 801d098:	6019      	str	r1, [r3, #0]
 801d09a:	e7d7      	b.n	801d04c <_free_r+0x24>
 801d09c:	d902      	bls.n	801d0a4 <_free_r+0x7c>
 801d09e:	230c      	movs	r3, #12
 801d0a0:	602b      	str	r3, [r5, #0]
 801d0a2:	e7d3      	b.n	801d04c <_free_r+0x24>
 801d0a4:	6820      	ldr	r0, [r4, #0]
 801d0a6:	1821      	adds	r1, r4, r0
 801d0a8:	428a      	cmp	r2, r1
 801d0aa:	bf04      	itt	eq
 801d0ac:	6811      	ldreq	r1, [r2, #0]
 801d0ae:	6852      	ldreq	r2, [r2, #4]
 801d0b0:	6062      	str	r2, [r4, #4]
 801d0b2:	bf04      	itt	eq
 801d0b4:	1809      	addeq	r1, r1, r0
 801d0b6:	6021      	streq	r1, [r4, #0]
 801d0b8:	605c      	str	r4, [r3, #4]
 801d0ba:	e7c7      	b.n	801d04c <_free_r+0x24>
 801d0bc:	bd38      	pop	{r3, r4, r5, pc}
 801d0be:	bf00      	nop
 801d0c0:	200215f4 	.word	0x200215f4

0801d0c4 <_malloc_r>:
 801d0c4:	b570      	push	{r4, r5, r6, lr}
 801d0c6:	1ccd      	adds	r5, r1, #3
 801d0c8:	f025 0503 	bic.w	r5, r5, #3
 801d0cc:	3508      	adds	r5, #8
 801d0ce:	2d0c      	cmp	r5, #12
 801d0d0:	bf38      	it	cc
 801d0d2:	250c      	movcc	r5, #12
 801d0d4:	2d00      	cmp	r5, #0
 801d0d6:	4606      	mov	r6, r0
 801d0d8:	db01      	blt.n	801d0de <_malloc_r+0x1a>
 801d0da:	42a9      	cmp	r1, r5
 801d0dc:	d903      	bls.n	801d0e6 <_malloc_r+0x22>
 801d0de:	230c      	movs	r3, #12
 801d0e0:	6033      	str	r3, [r6, #0]
 801d0e2:	2000      	movs	r0, #0
 801d0e4:	bd70      	pop	{r4, r5, r6, pc}
 801d0e6:	f000 ff17 	bl	801df18 <__malloc_lock>
 801d0ea:	4a21      	ldr	r2, [pc, #132]	; (801d170 <_malloc_r+0xac>)
 801d0ec:	6814      	ldr	r4, [r2, #0]
 801d0ee:	4621      	mov	r1, r4
 801d0f0:	b991      	cbnz	r1, 801d118 <_malloc_r+0x54>
 801d0f2:	4c20      	ldr	r4, [pc, #128]	; (801d174 <_malloc_r+0xb0>)
 801d0f4:	6823      	ldr	r3, [r4, #0]
 801d0f6:	b91b      	cbnz	r3, 801d100 <_malloc_r+0x3c>
 801d0f8:	4630      	mov	r0, r6
 801d0fa:	f000 fde3 	bl	801dcc4 <_sbrk_r>
 801d0fe:	6020      	str	r0, [r4, #0]
 801d100:	4629      	mov	r1, r5
 801d102:	4630      	mov	r0, r6
 801d104:	f000 fdde 	bl	801dcc4 <_sbrk_r>
 801d108:	1c43      	adds	r3, r0, #1
 801d10a:	d124      	bne.n	801d156 <_malloc_r+0x92>
 801d10c:	230c      	movs	r3, #12
 801d10e:	6033      	str	r3, [r6, #0]
 801d110:	4630      	mov	r0, r6
 801d112:	f000 ff02 	bl	801df1a <__malloc_unlock>
 801d116:	e7e4      	b.n	801d0e2 <_malloc_r+0x1e>
 801d118:	680b      	ldr	r3, [r1, #0]
 801d11a:	1b5b      	subs	r3, r3, r5
 801d11c:	d418      	bmi.n	801d150 <_malloc_r+0x8c>
 801d11e:	2b0b      	cmp	r3, #11
 801d120:	d90f      	bls.n	801d142 <_malloc_r+0x7e>
 801d122:	600b      	str	r3, [r1, #0]
 801d124:	50cd      	str	r5, [r1, r3]
 801d126:	18cc      	adds	r4, r1, r3
 801d128:	4630      	mov	r0, r6
 801d12a:	f000 fef6 	bl	801df1a <__malloc_unlock>
 801d12e:	f104 000b 	add.w	r0, r4, #11
 801d132:	1d23      	adds	r3, r4, #4
 801d134:	f020 0007 	bic.w	r0, r0, #7
 801d138:	1ac3      	subs	r3, r0, r3
 801d13a:	d0d3      	beq.n	801d0e4 <_malloc_r+0x20>
 801d13c:	425a      	negs	r2, r3
 801d13e:	50e2      	str	r2, [r4, r3]
 801d140:	e7d0      	b.n	801d0e4 <_malloc_r+0x20>
 801d142:	428c      	cmp	r4, r1
 801d144:	684b      	ldr	r3, [r1, #4]
 801d146:	bf16      	itet	ne
 801d148:	6063      	strne	r3, [r4, #4]
 801d14a:	6013      	streq	r3, [r2, #0]
 801d14c:	460c      	movne	r4, r1
 801d14e:	e7eb      	b.n	801d128 <_malloc_r+0x64>
 801d150:	460c      	mov	r4, r1
 801d152:	6849      	ldr	r1, [r1, #4]
 801d154:	e7cc      	b.n	801d0f0 <_malloc_r+0x2c>
 801d156:	1cc4      	adds	r4, r0, #3
 801d158:	f024 0403 	bic.w	r4, r4, #3
 801d15c:	42a0      	cmp	r0, r4
 801d15e:	d005      	beq.n	801d16c <_malloc_r+0xa8>
 801d160:	1a21      	subs	r1, r4, r0
 801d162:	4630      	mov	r0, r6
 801d164:	f000 fdae 	bl	801dcc4 <_sbrk_r>
 801d168:	3001      	adds	r0, #1
 801d16a:	d0cf      	beq.n	801d10c <_malloc_r+0x48>
 801d16c:	6025      	str	r5, [r4, #0]
 801d16e:	e7db      	b.n	801d128 <_malloc_r+0x64>
 801d170:	200215f4 	.word	0x200215f4
 801d174:	200215f8 	.word	0x200215f8

0801d178 <__ssputs_r>:
 801d178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d17c:	688e      	ldr	r6, [r1, #8]
 801d17e:	429e      	cmp	r6, r3
 801d180:	4682      	mov	sl, r0
 801d182:	460c      	mov	r4, r1
 801d184:	4690      	mov	r8, r2
 801d186:	4699      	mov	r9, r3
 801d188:	d837      	bhi.n	801d1fa <__ssputs_r+0x82>
 801d18a:	898a      	ldrh	r2, [r1, #12]
 801d18c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d190:	d031      	beq.n	801d1f6 <__ssputs_r+0x7e>
 801d192:	6825      	ldr	r5, [r4, #0]
 801d194:	6909      	ldr	r1, [r1, #16]
 801d196:	1a6f      	subs	r7, r5, r1
 801d198:	6965      	ldr	r5, [r4, #20]
 801d19a:	2302      	movs	r3, #2
 801d19c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d1a0:	fb95 f5f3 	sdiv	r5, r5, r3
 801d1a4:	f109 0301 	add.w	r3, r9, #1
 801d1a8:	443b      	add	r3, r7
 801d1aa:	429d      	cmp	r5, r3
 801d1ac:	bf38      	it	cc
 801d1ae:	461d      	movcc	r5, r3
 801d1b0:	0553      	lsls	r3, r2, #21
 801d1b2:	d530      	bpl.n	801d216 <__ssputs_r+0x9e>
 801d1b4:	4629      	mov	r1, r5
 801d1b6:	f7ff ff85 	bl	801d0c4 <_malloc_r>
 801d1ba:	4606      	mov	r6, r0
 801d1bc:	b950      	cbnz	r0, 801d1d4 <__ssputs_r+0x5c>
 801d1be:	230c      	movs	r3, #12
 801d1c0:	f8ca 3000 	str.w	r3, [sl]
 801d1c4:	89a3      	ldrh	r3, [r4, #12]
 801d1c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d1ca:	81a3      	strh	r3, [r4, #12]
 801d1cc:	f04f 30ff 	mov.w	r0, #4294967295
 801d1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1d4:	463a      	mov	r2, r7
 801d1d6:	6921      	ldr	r1, [r4, #16]
 801d1d8:	f7fc f835 	bl	8019246 <memcpy>
 801d1dc:	89a3      	ldrh	r3, [r4, #12]
 801d1de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d1e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d1e6:	81a3      	strh	r3, [r4, #12]
 801d1e8:	6126      	str	r6, [r4, #16]
 801d1ea:	6165      	str	r5, [r4, #20]
 801d1ec:	443e      	add	r6, r7
 801d1ee:	1bed      	subs	r5, r5, r7
 801d1f0:	6026      	str	r6, [r4, #0]
 801d1f2:	60a5      	str	r5, [r4, #8]
 801d1f4:	464e      	mov	r6, r9
 801d1f6:	454e      	cmp	r6, r9
 801d1f8:	d900      	bls.n	801d1fc <__ssputs_r+0x84>
 801d1fa:	464e      	mov	r6, r9
 801d1fc:	4632      	mov	r2, r6
 801d1fe:	4641      	mov	r1, r8
 801d200:	6820      	ldr	r0, [r4, #0]
 801d202:	f7fc f82b 	bl	801925c <memmove>
 801d206:	68a3      	ldr	r3, [r4, #8]
 801d208:	1b9b      	subs	r3, r3, r6
 801d20a:	60a3      	str	r3, [r4, #8]
 801d20c:	6823      	ldr	r3, [r4, #0]
 801d20e:	441e      	add	r6, r3
 801d210:	6026      	str	r6, [r4, #0]
 801d212:	2000      	movs	r0, #0
 801d214:	e7dc      	b.n	801d1d0 <__ssputs_r+0x58>
 801d216:	462a      	mov	r2, r5
 801d218:	f000 fe80 	bl	801df1c <_realloc_r>
 801d21c:	4606      	mov	r6, r0
 801d21e:	2800      	cmp	r0, #0
 801d220:	d1e2      	bne.n	801d1e8 <__ssputs_r+0x70>
 801d222:	6921      	ldr	r1, [r4, #16]
 801d224:	4650      	mov	r0, sl
 801d226:	f7ff feff 	bl	801d028 <_free_r>
 801d22a:	e7c8      	b.n	801d1be <__ssputs_r+0x46>

0801d22c <_svfiprintf_r>:
 801d22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d230:	461d      	mov	r5, r3
 801d232:	898b      	ldrh	r3, [r1, #12]
 801d234:	061f      	lsls	r7, r3, #24
 801d236:	b09d      	sub	sp, #116	; 0x74
 801d238:	4680      	mov	r8, r0
 801d23a:	460c      	mov	r4, r1
 801d23c:	4616      	mov	r6, r2
 801d23e:	d50f      	bpl.n	801d260 <_svfiprintf_r+0x34>
 801d240:	690b      	ldr	r3, [r1, #16]
 801d242:	b96b      	cbnz	r3, 801d260 <_svfiprintf_r+0x34>
 801d244:	2140      	movs	r1, #64	; 0x40
 801d246:	f7ff ff3d 	bl	801d0c4 <_malloc_r>
 801d24a:	6020      	str	r0, [r4, #0]
 801d24c:	6120      	str	r0, [r4, #16]
 801d24e:	b928      	cbnz	r0, 801d25c <_svfiprintf_r+0x30>
 801d250:	230c      	movs	r3, #12
 801d252:	f8c8 3000 	str.w	r3, [r8]
 801d256:	f04f 30ff 	mov.w	r0, #4294967295
 801d25a:	e0c8      	b.n	801d3ee <_svfiprintf_r+0x1c2>
 801d25c:	2340      	movs	r3, #64	; 0x40
 801d25e:	6163      	str	r3, [r4, #20]
 801d260:	2300      	movs	r3, #0
 801d262:	9309      	str	r3, [sp, #36]	; 0x24
 801d264:	2320      	movs	r3, #32
 801d266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d26a:	2330      	movs	r3, #48	; 0x30
 801d26c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d270:	9503      	str	r5, [sp, #12]
 801d272:	f04f 0b01 	mov.w	fp, #1
 801d276:	4637      	mov	r7, r6
 801d278:	463d      	mov	r5, r7
 801d27a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d27e:	b10b      	cbz	r3, 801d284 <_svfiprintf_r+0x58>
 801d280:	2b25      	cmp	r3, #37	; 0x25
 801d282:	d13e      	bne.n	801d302 <_svfiprintf_r+0xd6>
 801d284:	ebb7 0a06 	subs.w	sl, r7, r6
 801d288:	d00b      	beq.n	801d2a2 <_svfiprintf_r+0x76>
 801d28a:	4653      	mov	r3, sl
 801d28c:	4632      	mov	r2, r6
 801d28e:	4621      	mov	r1, r4
 801d290:	4640      	mov	r0, r8
 801d292:	f7ff ff71 	bl	801d178 <__ssputs_r>
 801d296:	3001      	adds	r0, #1
 801d298:	f000 80a4 	beq.w	801d3e4 <_svfiprintf_r+0x1b8>
 801d29c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d29e:	4453      	add	r3, sl
 801d2a0:	9309      	str	r3, [sp, #36]	; 0x24
 801d2a2:	783b      	ldrb	r3, [r7, #0]
 801d2a4:	2b00      	cmp	r3, #0
 801d2a6:	f000 809d 	beq.w	801d3e4 <_svfiprintf_r+0x1b8>
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	f04f 32ff 	mov.w	r2, #4294967295
 801d2b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d2b4:	9304      	str	r3, [sp, #16]
 801d2b6:	9307      	str	r3, [sp, #28]
 801d2b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d2bc:	931a      	str	r3, [sp, #104]	; 0x68
 801d2be:	462f      	mov	r7, r5
 801d2c0:	2205      	movs	r2, #5
 801d2c2:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d2c6:	4850      	ldr	r0, [pc, #320]	; (801d408 <_svfiprintf_r+0x1dc>)
 801d2c8:	f7e2 ffaa 	bl	8000220 <memchr>
 801d2cc:	9b04      	ldr	r3, [sp, #16]
 801d2ce:	b9d0      	cbnz	r0, 801d306 <_svfiprintf_r+0xda>
 801d2d0:	06d9      	lsls	r1, r3, #27
 801d2d2:	bf44      	itt	mi
 801d2d4:	2220      	movmi	r2, #32
 801d2d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d2da:	071a      	lsls	r2, r3, #28
 801d2dc:	bf44      	itt	mi
 801d2de:	222b      	movmi	r2, #43	; 0x2b
 801d2e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d2e4:	782a      	ldrb	r2, [r5, #0]
 801d2e6:	2a2a      	cmp	r2, #42	; 0x2a
 801d2e8:	d015      	beq.n	801d316 <_svfiprintf_r+0xea>
 801d2ea:	9a07      	ldr	r2, [sp, #28]
 801d2ec:	462f      	mov	r7, r5
 801d2ee:	2000      	movs	r0, #0
 801d2f0:	250a      	movs	r5, #10
 801d2f2:	4639      	mov	r1, r7
 801d2f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d2f8:	3b30      	subs	r3, #48	; 0x30
 801d2fa:	2b09      	cmp	r3, #9
 801d2fc:	d94d      	bls.n	801d39a <_svfiprintf_r+0x16e>
 801d2fe:	b1b8      	cbz	r0, 801d330 <_svfiprintf_r+0x104>
 801d300:	e00f      	b.n	801d322 <_svfiprintf_r+0xf6>
 801d302:	462f      	mov	r7, r5
 801d304:	e7b8      	b.n	801d278 <_svfiprintf_r+0x4c>
 801d306:	4a40      	ldr	r2, [pc, #256]	; (801d408 <_svfiprintf_r+0x1dc>)
 801d308:	1a80      	subs	r0, r0, r2
 801d30a:	fa0b f000 	lsl.w	r0, fp, r0
 801d30e:	4318      	orrs	r0, r3
 801d310:	9004      	str	r0, [sp, #16]
 801d312:	463d      	mov	r5, r7
 801d314:	e7d3      	b.n	801d2be <_svfiprintf_r+0x92>
 801d316:	9a03      	ldr	r2, [sp, #12]
 801d318:	1d11      	adds	r1, r2, #4
 801d31a:	6812      	ldr	r2, [r2, #0]
 801d31c:	9103      	str	r1, [sp, #12]
 801d31e:	2a00      	cmp	r2, #0
 801d320:	db01      	blt.n	801d326 <_svfiprintf_r+0xfa>
 801d322:	9207      	str	r2, [sp, #28]
 801d324:	e004      	b.n	801d330 <_svfiprintf_r+0x104>
 801d326:	4252      	negs	r2, r2
 801d328:	f043 0302 	orr.w	r3, r3, #2
 801d32c:	9207      	str	r2, [sp, #28]
 801d32e:	9304      	str	r3, [sp, #16]
 801d330:	783b      	ldrb	r3, [r7, #0]
 801d332:	2b2e      	cmp	r3, #46	; 0x2e
 801d334:	d10c      	bne.n	801d350 <_svfiprintf_r+0x124>
 801d336:	787b      	ldrb	r3, [r7, #1]
 801d338:	2b2a      	cmp	r3, #42	; 0x2a
 801d33a:	d133      	bne.n	801d3a4 <_svfiprintf_r+0x178>
 801d33c:	9b03      	ldr	r3, [sp, #12]
 801d33e:	1d1a      	adds	r2, r3, #4
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	9203      	str	r2, [sp, #12]
 801d344:	2b00      	cmp	r3, #0
 801d346:	bfb8      	it	lt
 801d348:	f04f 33ff 	movlt.w	r3, #4294967295
 801d34c:	3702      	adds	r7, #2
 801d34e:	9305      	str	r3, [sp, #20]
 801d350:	4d2e      	ldr	r5, [pc, #184]	; (801d40c <_svfiprintf_r+0x1e0>)
 801d352:	7839      	ldrb	r1, [r7, #0]
 801d354:	2203      	movs	r2, #3
 801d356:	4628      	mov	r0, r5
 801d358:	f7e2 ff62 	bl	8000220 <memchr>
 801d35c:	b138      	cbz	r0, 801d36e <_svfiprintf_r+0x142>
 801d35e:	2340      	movs	r3, #64	; 0x40
 801d360:	1b40      	subs	r0, r0, r5
 801d362:	fa03 f000 	lsl.w	r0, r3, r0
 801d366:	9b04      	ldr	r3, [sp, #16]
 801d368:	4303      	orrs	r3, r0
 801d36a:	3701      	adds	r7, #1
 801d36c:	9304      	str	r3, [sp, #16]
 801d36e:	7839      	ldrb	r1, [r7, #0]
 801d370:	4827      	ldr	r0, [pc, #156]	; (801d410 <_svfiprintf_r+0x1e4>)
 801d372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d376:	2206      	movs	r2, #6
 801d378:	1c7e      	adds	r6, r7, #1
 801d37a:	f7e2 ff51 	bl	8000220 <memchr>
 801d37e:	2800      	cmp	r0, #0
 801d380:	d038      	beq.n	801d3f4 <_svfiprintf_r+0x1c8>
 801d382:	4b24      	ldr	r3, [pc, #144]	; (801d414 <_svfiprintf_r+0x1e8>)
 801d384:	bb13      	cbnz	r3, 801d3cc <_svfiprintf_r+0x1a0>
 801d386:	9b03      	ldr	r3, [sp, #12]
 801d388:	3307      	adds	r3, #7
 801d38a:	f023 0307 	bic.w	r3, r3, #7
 801d38e:	3308      	adds	r3, #8
 801d390:	9303      	str	r3, [sp, #12]
 801d392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d394:	444b      	add	r3, r9
 801d396:	9309      	str	r3, [sp, #36]	; 0x24
 801d398:	e76d      	b.n	801d276 <_svfiprintf_r+0x4a>
 801d39a:	fb05 3202 	mla	r2, r5, r2, r3
 801d39e:	2001      	movs	r0, #1
 801d3a0:	460f      	mov	r7, r1
 801d3a2:	e7a6      	b.n	801d2f2 <_svfiprintf_r+0xc6>
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	3701      	adds	r7, #1
 801d3a8:	9305      	str	r3, [sp, #20]
 801d3aa:	4619      	mov	r1, r3
 801d3ac:	250a      	movs	r5, #10
 801d3ae:	4638      	mov	r0, r7
 801d3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d3b4:	3a30      	subs	r2, #48	; 0x30
 801d3b6:	2a09      	cmp	r2, #9
 801d3b8:	d903      	bls.n	801d3c2 <_svfiprintf_r+0x196>
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d0c8      	beq.n	801d350 <_svfiprintf_r+0x124>
 801d3be:	9105      	str	r1, [sp, #20]
 801d3c0:	e7c6      	b.n	801d350 <_svfiprintf_r+0x124>
 801d3c2:	fb05 2101 	mla	r1, r5, r1, r2
 801d3c6:	2301      	movs	r3, #1
 801d3c8:	4607      	mov	r7, r0
 801d3ca:	e7f0      	b.n	801d3ae <_svfiprintf_r+0x182>
 801d3cc:	ab03      	add	r3, sp, #12
 801d3ce:	9300      	str	r3, [sp, #0]
 801d3d0:	4622      	mov	r2, r4
 801d3d2:	4b11      	ldr	r3, [pc, #68]	; (801d418 <_svfiprintf_r+0x1ec>)
 801d3d4:	a904      	add	r1, sp, #16
 801d3d6:	4640      	mov	r0, r8
 801d3d8:	f7fb fff6 	bl	80193c8 <_printf_float>
 801d3dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d3e0:	4681      	mov	r9, r0
 801d3e2:	d1d6      	bne.n	801d392 <_svfiprintf_r+0x166>
 801d3e4:	89a3      	ldrh	r3, [r4, #12]
 801d3e6:	065b      	lsls	r3, r3, #25
 801d3e8:	f53f af35 	bmi.w	801d256 <_svfiprintf_r+0x2a>
 801d3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d3ee:	b01d      	add	sp, #116	; 0x74
 801d3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3f4:	ab03      	add	r3, sp, #12
 801d3f6:	9300      	str	r3, [sp, #0]
 801d3f8:	4622      	mov	r2, r4
 801d3fa:	4b07      	ldr	r3, [pc, #28]	; (801d418 <_svfiprintf_r+0x1ec>)
 801d3fc:	a904      	add	r1, sp, #16
 801d3fe:	4640      	mov	r0, r8
 801d400:	f7fc fa98 	bl	8019934 <_printf_i>
 801d404:	e7ea      	b.n	801d3dc <_svfiprintf_r+0x1b0>
 801d406:	bf00      	nop
 801d408:	08021eb4 	.word	0x08021eb4
 801d40c:	08021eba 	.word	0x08021eba
 801d410:	08021ebe 	.word	0x08021ebe
 801d414:	080193c9 	.word	0x080193c9
 801d418:	0801d179 	.word	0x0801d179

0801d41c <_sungetc_r>:
 801d41c:	b538      	push	{r3, r4, r5, lr}
 801d41e:	1c4b      	adds	r3, r1, #1
 801d420:	4614      	mov	r4, r2
 801d422:	d103      	bne.n	801d42c <_sungetc_r+0x10>
 801d424:	f04f 35ff 	mov.w	r5, #4294967295
 801d428:	4628      	mov	r0, r5
 801d42a:	bd38      	pop	{r3, r4, r5, pc}
 801d42c:	8993      	ldrh	r3, [r2, #12]
 801d42e:	f023 0320 	bic.w	r3, r3, #32
 801d432:	8193      	strh	r3, [r2, #12]
 801d434:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d436:	6852      	ldr	r2, [r2, #4]
 801d438:	b2cd      	uxtb	r5, r1
 801d43a:	b18b      	cbz	r3, 801d460 <_sungetc_r+0x44>
 801d43c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d43e:	4293      	cmp	r3, r2
 801d440:	dd08      	ble.n	801d454 <_sungetc_r+0x38>
 801d442:	6823      	ldr	r3, [r4, #0]
 801d444:	1e5a      	subs	r2, r3, #1
 801d446:	6022      	str	r2, [r4, #0]
 801d448:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d44c:	6863      	ldr	r3, [r4, #4]
 801d44e:	3301      	adds	r3, #1
 801d450:	6063      	str	r3, [r4, #4]
 801d452:	e7e9      	b.n	801d428 <_sungetc_r+0xc>
 801d454:	4621      	mov	r1, r4
 801d456:	f000 fd03 	bl	801de60 <__submore>
 801d45a:	2800      	cmp	r0, #0
 801d45c:	d0f1      	beq.n	801d442 <_sungetc_r+0x26>
 801d45e:	e7e1      	b.n	801d424 <_sungetc_r+0x8>
 801d460:	6921      	ldr	r1, [r4, #16]
 801d462:	6823      	ldr	r3, [r4, #0]
 801d464:	b151      	cbz	r1, 801d47c <_sungetc_r+0x60>
 801d466:	4299      	cmp	r1, r3
 801d468:	d208      	bcs.n	801d47c <_sungetc_r+0x60>
 801d46a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801d46e:	42a9      	cmp	r1, r5
 801d470:	d104      	bne.n	801d47c <_sungetc_r+0x60>
 801d472:	3b01      	subs	r3, #1
 801d474:	3201      	adds	r2, #1
 801d476:	6023      	str	r3, [r4, #0]
 801d478:	6062      	str	r2, [r4, #4]
 801d47a:	e7d5      	b.n	801d428 <_sungetc_r+0xc>
 801d47c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801d480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d484:	6363      	str	r3, [r4, #52]	; 0x34
 801d486:	2303      	movs	r3, #3
 801d488:	63a3      	str	r3, [r4, #56]	; 0x38
 801d48a:	4623      	mov	r3, r4
 801d48c:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d490:	6023      	str	r3, [r4, #0]
 801d492:	2301      	movs	r3, #1
 801d494:	e7dc      	b.n	801d450 <_sungetc_r+0x34>

0801d496 <__ssrefill_r>:
 801d496:	b510      	push	{r4, lr}
 801d498:	460c      	mov	r4, r1
 801d49a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801d49c:	b169      	cbz	r1, 801d4ba <__ssrefill_r+0x24>
 801d49e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d4a2:	4299      	cmp	r1, r3
 801d4a4:	d001      	beq.n	801d4aa <__ssrefill_r+0x14>
 801d4a6:	f7ff fdbf 	bl	801d028 <_free_r>
 801d4aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d4ac:	6063      	str	r3, [r4, #4]
 801d4ae:	2000      	movs	r0, #0
 801d4b0:	6360      	str	r0, [r4, #52]	; 0x34
 801d4b2:	b113      	cbz	r3, 801d4ba <__ssrefill_r+0x24>
 801d4b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801d4b6:	6023      	str	r3, [r4, #0]
 801d4b8:	bd10      	pop	{r4, pc}
 801d4ba:	6923      	ldr	r3, [r4, #16]
 801d4bc:	6023      	str	r3, [r4, #0]
 801d4be:	2300      	movs	r3, #0
 801d4c0:	6063      	str	r3, [r4, #4]
 801d4c2:	89a3      	ldrh	r3, [r4, #12]
 801d4c4:	f043 0320 	orr.w	r3, r3, #32
 801d4c8:	81a3      	strh	r3, [r4, #12]
 801d4ca:	f04f 30ff 	mov.w	r0, #4294967295
 801d4ce:	e7f3      	b.n	801d4b8 <__ssrefill_r+0x22>

0801d4d0 <__ssvfiscanf_r>:
 801d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4d4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801d4d8:	460c      	mov	r4, r1
 801d4da:	2100      	movs	r1, #0
 801d4dc:	9144      	str	r1, [sp, #272]	; 0x110
 801d4de:	9145      	str	r1, [sp, #276]	; 0x114
 801d4e0:	499f      	ldr	r1, [pc, #636]	; (801d760 <__ssvfiscanf_r+0x290>)
 801d4e2:	91a0      	str	r1, [sp, #640]	; 0x280
 801d4e4:	f10d 0804 	add.w	r8, sp, #4
 801d4e8:	499e      	ldr	r1, [pc, #632]	; (801d764 <__ssvfiscanf_r+0x294>)
 801d4ea:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801d768 <__ssvfiscanf_r+0x298>
 801d4ee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801d4f2:	4606      	mov	r6, r0
 801d4f4:	4692      	mov	sl, r2
 801d4f6:	91a1      	str	r1, [sp, #644]	; 0x284
 801d4f8:	9300      	str	r3, [sp, #0]
 801d4fa:	270a      	movs	r7, #10
 801d4fc:	f89a 3000 	ldrb.w	r3, [sl]
 801d500:	2b00      	cmp	r3, #0
 801d502:	f000 812a 	beq.w	801d75a <__ssvfiscanf_r+0x28a>
 801d506:	4655      	mov	r5, sl
 801d508:	f7fb fe6e 	bl	80191e8 <__locale_ctype_ptr>
 801d50c:	f815 bb01 	ldrb.w	fp, [r5], #1
 801d510:	4458      	add	r0, fp
 801d512:	7843      	ldrb	r3, [r0, #1]
 801d514:	f013 0308 	ands.w	r3, r3, #8
 801d518:	d01c      	beq.n	801d554 <__ssvfiscanf_r+0x84>
 801d51a:	6863      	ldr	r3, [r4, #4]
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	dd12      	ble.n	801d546 <__ssvfiscanf_r+0x76>
 801d520:	f7fb fe62 	bl	80191e8 <__locale_ctype_ptr>
 801d524:	6823      	ldr	r3, [r4, #0]
 801d526:	781a      	ldrb	r2, [r3, #0]
 801d528:	4410      	add	r0, r2
 801d52a:	7842      	ldrb	r2, [r0, #1]
 801d52c:	0712      	lsls	r2, r2, #28
 801d52e:	d401      	bmi.n	801d534 <__ssvfiscanf_r+0x64>
 801d530:	46aa      	mov	sl, r5
 801d532:	e7e3      	b.n	801d4fc <__ssvfiscanf_r+0x2c>
 801d534:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d536:	3201      	adds	r2, #1
 801d538:	9245      	str	r2, [sp, #276]	; 0x114
 801d53a:	6862      	ldr	r2, [r4, #4]
 801d53c:	3301      	adds	r3, #1
 801d53e:	3a01      	subs	r2, #1
 801d540:	6062      	str	r2, [r4, #4]
 801d542:	6023      	str	r3, [r4, #0]
 801d544:	e7e9      	b.n	801d51a <__ssvfiscanf_r+0x4a>
 801d546:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d548:	4621      	mov	r1, r4
 801d54a:	4630      	mov	r0, r6
 801d54c:	4798      	blx	r3
 801d54e:	2800      	cmp	r0, #0
 801d550:	d0e6      	beq.n	801d520 <__ssvfiscanf_r+0x50>
 801d552:	e7ed      	b.n	801d530 <__ssvfiscanf_r+0x60>
 801d554:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801d558:	f040 8082 	bne.w	801d660 <__ssvfiscanf_r+0x190>
 801d55c:	9343      	str	r3, [sp, #268]	; 0x10c
 801d55e:	9341      	str	r3, [sp, #260]	; 0x104
 801d560:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801d564:	2b2a      	cmp	r3, #42	; 0x2a
 801d566:	d103      	bne.n	801d570 <__ssvfiscanf_r+0xa0>
 801d568:	2310      	movs	r3, #16
 801d56a:	9341      	str	r3, [sp, #260]	; 0x104
 801d56c:	f10a 0502 	add.w	r5, sl, #2
 801d570:	46aa      	mov	sl, r5
 801d572:	f815 1b01 	ldrb.w	r1, [r5], #1
 801d576:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801d57a:	2a09      	cmp	r2, #9
 801d57c:	d922      	bls.n	801d5c4 <__ssvfiscanf_r+0xf4>
 801d57e:	2203      	movs	r2, #3
 801d580:	4879      	ldr	r0, [pc, #484]	; (801d768 <__ssvfiscanf_r+0x298>)
 801d582:	f7e2 fe4d 	bl	8000220 <memchr>
 801d586:	b138      	cbz	r0, 801d598 <__ssvfiscanf_r+0xc8>
 801d588:	eba0 0309 	sub.w	r3, r0, r9
 801d58c:	2001      	movs	r0, #1
 801d58e:	4098      	lsls	r0, r3
 801d590:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d592:	4318      	orrs	r0, r3
 801d594:	9041      	str	r0, [sp, #260]	; 0x104
 801d596:	46aa      	mov	sl, r5
 801d598:	f89a 3000 	ldrb.w	r3, [sl]
 801d59c:	2b67      	cmp	r3, #103	; 0x67
 801d59e:	f10a 0501 	add.w	r5, sl, #1
 801d5a2:	d82b      	bhi.n	801d5fc <__ssvfiscanf_r+0x12c>
 801d5a4:	2b65      	cmp	r3, #101	; 0x65
 801d5a6:	f080 809f 	bcs.w	801d6e8 <__ssvfiscanf_r+0x218>
 801d5aa:	2b47      	cmp	r3, #71	; 0x47
 801d5ac:	d810      	bhi.n	801d5d0 <__ssvfiscanf_r+0x100>
 801d5ae:	2b45      	cmp	r3, #69	; 0x45
 801d5b0:	f080 809a 	bcs.w	801d6e8 <__ssvfiscanf_r+0x218>
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d06c      	beq.n	801d692 <__ssvfiscanf_r+0x1c2>
 801d5b8:	2b25      	cmp	r3, #37	; 0x25
 801d5ba:	d051      	beq.n	801d660 <__ssvfiscanf_r+0x190>
 801d5bc:	2303      	movs	r3, #3
 801d5be:	9347      	str	r3, [sp, #284]	; 0x11c
 801d5c0:	9742      	str	r7, [sp, #264]	; 0x108
 801d5c2:	e027      	b.n	801d614 <__ssvfiscanf_r+0x144>
 801d5c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801d5c6:	fb07 1303 	mla	r3, r7, r3, r1
 801d5ca:	3b30      	subs	r3, #48	; 0x30
 801d5cc:	9343      	str	r3, [sp, #268]	; 0x10c
 801d5ce:	e7cf      	b.n	801d570 <__ssvfiscanf_r+0xa0>
 801d5d0:	2b5b      	cmp	r3, #91	; 0x5b
 801d5d2:	d06a      	beq.n	801d6aa <__ssvfiscanf_r+0x1da>
 801d5d4:	d80c      	bhi.n	801d5f0 <__ssvfiscanf_r+0x120>
 801d5d6:	2b58      	cmp	r3, #88	; 0x58
 801d5d8:	d1f0      	bne.n	801d5bc <__ssvfiscanf_r+0xec>
 801d5da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d5dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801d5e0:	9241      	str	r2, [sp, #260]	; 0x104
 801d5e2:	2210      	movs	r2, #16
 801d5e4:	9242      	str	r2, [sp, #264]	; 0x108
 801d5e6:	2b6e      	cmp	r3, #110	; 0x6e
 801d5e8:	bf8c      	ite	hi
 801d5ea:	2304      	movhi	r3, #4
 801d5ec:	2303      	movls	r3, #3
 801d5ee:	e010      	b.n	801d612 <__ssvfiscanf_r+0x142>
 801d5f0:	2b63      	cmp	r3, #99	; 0x63
 801d5f2:	d065      	beq.n	801d6c0 <__ssvfiscanf_r+0x1f0>
 801d5f4:	2b64      	cmp	r3, #100	; 0x64
 801d5f6:	d1e1      	bne.n	801d5bc <__ssvfiscanf_r+0xec>
 801d5f8:	9742      	str	r7, [sp, #264]	; 0x108
 801d5fa:	e7f4      	b.n	801d5e6 <__ssvfiscanf_r+0x116>
 801d5fc:	2b70      	cmp	r3, #112	; 0x70
 801d5fe:	d04b      	beq.n	801d698 <__ssvfiscanf_r+0x1c8>
 801d600:	d826      	bhi.n	801d650 <__ssvfiscanf_r+0x180>
 801d602:	2b6e      	cmp	r3, #110	; 0x6e
 801d604:	d062      	beq.n	801d6cc <__ssvfiscanf_r+0x1fc>
 801d606:	d84c      	bhi.n	801d6a2 <__ssvfiscanf_r+0x1d2>
 801d608:	2b69      	cmp	r3, #105	; 0x69
 801d60a:	d1d7      	bne.n	801d5bc <__ssvfiscanf_r+0xec>
 801d60c:	2300      	movs	r3, #0
 801d60e:	9342      	str	r3, [sp, #264]	; 0x108
 801d610:	2303      	movs	r3, #3
 801d612:	9347      	str	r3, [sp, #284]	; 0x11c
 801d614:	6863      	ldr	r3, [r4, #4]
 801d616:	2b00      	cmp	r3, #0
 801d618:	dd68      	ble.n	801d6ec <__ssvfiscanf_r+0x21c>
 801d61a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d61c:	0659      	lsls	r1, r3, #25
 801d61e:	d407      	bmi.n	801d630 <__ssvfiscanf_r+0x160>
 801d620:	f7fb fde2 	bl	80191e8 <__locale_ctype_ptr>
 801d624:	6823      	ldr	r3, [r4, #0]
 801d626:	781a      	ldrb	r2, [r3, #0]
 801d628:	4410      	add	r0, r2
 801d62a:	7842      	ldrb	r2, [r0, #1]
 801d62c:	0712      	lsls	r2, r2, #28
 801d62e:	d464      	bmi.n	801d6fa <__ssvfiscanf_r+0x22a>
 801d630:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801d632:	2b02      	cmp	r3, #2
 801d634:	dc73      	bgt.n	801d71e <__ssvfiscanf_r+0x24e>
 801d636:	466b      	mov	r3, sp
 801d638:	4622      	mov	r2, r4
 801d63a:	a941      	add	r1, sp, #260	; 0x104
 801d63c:	4630      	mov	r0, r6
 801d63e:	f000 f9d7 	bl	801d9f0 <_scanf_chars>
 801d642:	2801      	cmp	r0, #1
 801d644:	f000 8089 	beq.w	801d75a <__ssvfiscanf_r+0x28a>
 801d648:	2802      	cmp	r0, #2
 801d64a:	f47f af71 	bne.w	801d530 <__ssvfiscanf_r+0x60>
 801d64e:	e01d      	b.n	801d68c <__ssvfiscanf_r+0x1bc>
 801d650:	2b75      	cmp	r3, #117	; 0x75
 801d652:	d0d1      	beq.n	801d5f8 <__ssvfiscanf_r+0x128>
 801d654:	2b78      	cmp	r3, #120	; 0x78
 801d656:	d0c0      	beq.n	801d5da <__ssvfiscanf_r+0x10a>
 801d658:	2b73      	cmp	r3, #115	; 0x73
 801d65a:	d1af      	bne.n	801d5bc <__ssvfiscanf_r+0xec>
 801d65c:	2302      	movs	r3, #2
 801d65e:	e7d8      	b.n	801d612 <__ssvfiscanf_r+0x142>
 801d660:	6863      	ldr	r3, [r4, #4]
 801d662:	2b00      	cmp	r3, #0
 801d664:	dd0c      	ble.n	801d680 <__ssvfiscanf_r+0x1b0>
 801d666:	6823      	ldr	r3, [r4, #0]
 801d668:	781a      	ldrb	r2, [r3, #0]
 801d66a:	455a      	cmp	r2, fp
 801d66c:	d175      	bne.n	801d75a <__ssvfiscanf_r+0x28a>
 801d66e:	3301      	adds	r3, #1
 801d670:	6862      	ldr	r2, [r4, #4]
 801d672:	6023      	str	r3, [r4, #0]
 801d674:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801d676:	3a01      	subs	r2, #1
 801d678:	3301      	adds	r3, #1
 801d67a:	6062      	str	r2, [r4, #4]
 801d67c:	9345      	str	r3, [sp, #276]	; 0x114
 801d67e:	e757      	b.n	801d530 <__ssvfiscanf_r+0x60>
 801d680:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d682:	4621      	mov	r1, r4
 801d684:	4630      	mov	r0, r6
 801d686:	4798      	blx	r3
 801d688:	2800      	cmp	r0, #0
 801d68a:	d0ec      	beq.n	801d666 <__ssvfiscanf_r+0x196>
 801d68c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801d68e:	2800      	cmp	r0, #0
 801d690:	d159      	bne.n	801d746 <__ssvfiscanf_r+0x276>
 801d692:	f04f 30ff 	mov.w	r0, #4294967295
 801d696:	e05c      	b.n	801d752 <__ssvfiscanf_r+0x282>
 801d698:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801d69a:	f042 0220 	orr.w	r2, r2, #32
 801d69e:	9241      	str	r2, [sp, #260]	; 0x104
 801d6a0:	e79b      	b.n	801d5da <__ssvfiscanf_r+0x10a>
 801d6a2:	2308      	movs	r3, #8
 801d6a4:	9342      	str	r3, [sp, #264]	; 0x108
 801d6a6:	2304      	movs	r3, #4
 801d6a8:	e7b3      	b.n	801d612 <__ssvfiscanf_r+0x142>
 801d6aa:	4629      	mov	r1, r5
 801d6ac:	4640      	mov	r0, r8
 801d6ae:	f000 fb19 	bl	801dce4 <__sccl>
 801d6b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6b8:	9341      	str	r3, [sp, #260]	; 0x104
 801d6ba:	4605      	mov	r5, r0
 801d6bc:	2301      	movs	r3, #1
 801d6be:	e7a8      	b.n	801d612 <__ssvfiscanf_r+0x142>
 801d6c0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801d6c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d6c6:	9341      	str	r3, [sp, #260]	; 0x104
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	e7a2      	b.n	801d612 <__ssvfiscanf_r+0x142>
 801d6cc:	9841      	ldr	r0, [sp, #260]	; 0x104
 801d6ce:	06c3      	lsls	r3, r0, #27
 801d6d0:	f53f af2e 	bmi.w	801d530 <__ssvfiscanf_r+0x60>
 801d6d4:	9b00      	ldr	r3, [sp, #0]
 801d6d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d6d8:	1d19      	adds	r1, r3, #4
 801d6da:	9100      	str	r1, [sp, #0]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	07c0      	lsls	r0, r0, #31
 801d6e0:	bf4c      	ite	mi
 801d6e2:	801a      	strhmi	r2, [r3, #0]
 801d6e4:	601a      	strpl	r2, [r3, #0]
 801d6e6:	e723      	b.n	801d530 <__ssvfiscanf_r+0x60>
 801d6e8:	2305      	movs	r3, #5
 801d6ea:	e792      	b.n	801d612 <__ssvfiscanf_r+0x142>
 801d6ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d6ee:	4621      	mov	r1, r4
 801d6f0:	4630      	mov	r0, r6
 801d6f2:	4798      	blx	r3
 801d6f4:	2800      	cmp	r0, #0
 801d6f6:	d090      	beq.n	801d61a <__ssvfiscanf_r+0x14a>
 801d6f8:	e7c8      	b.n	801d68c <__ssvfiscanf_r+0x1bc>
 801d6fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801d6fc:	3201      	adds	r2, #1
 801d6fe:	9245      	str	r2, [sp, #276]	; 0x114
 801d700:	6862      	ldr	r2, [r4, #4]
 801d702:	3a01      	subs	r2, #1
 801d704:	2a00      	cmp	r2, #0
 801d706:	6062      	str	r2, [r4, #4]
 801d708:	dd02      	ble.n	801d710 <__ssvfiscanf_r+0x240>
 801d70a:	3301      	adds	r3, #1
 801d70c:	6023      	str	r3, [r4, #0]
 801d70e:	e787      	b.n	801d620 <__ssvfiscanf_r+0x150>
 801d710:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801d712:	4621      	mov	r1, r4
 801d714:	4630      	mov	r0, r6
 801d716:	4798      	blx	r3
 801d718:	2800      	cmp	r0, #0
 801d71a:	d081      	beq.n	801d620 <__ssvfiscanf_r+0x150>
 801d71c:	e7b6      	b.n	801d68c <__ssvfiscanf_r+0x1bc>
 801d71e:	2b04      	cmp	r3, #4
 801d720:	dc06      	bgt.n	801d730 <__ssvfiscanf_r+0x260>
 801d722:	466b      	mov	r3, sp
 801d724:	4622      	mov	r2, r4
 801d726:	a941      	add	r1, sp, #260	; 0x104
 801d728:	4630      	mov	r0, r6
 801d72a:	f000 f9c5 	bl	801dab8 <_scanf_i>
 801d72e:	e788      	b.n	801d642 <__ssvfiscanf_r+0x172>
 801d730:	4b0e      	ldr	r3, [pc, #56]	; (801d76c <__ssvfiscanf_r+0x29c>)
 801d732:	2b00      	cmp	r3, #0
 801d734:	f43f aefc 	beq.w	801d530 <__ssvfiscanf_r+0x60>
 801d738:	466b      	mov	r3, sp
 801d73a:	4622      	mov	r2, r4
 801d73c:	a941      	add	r1, sp, #260	; 0x104
 801d73e:	4630      	mov	r0, r6
 801d740:	f7fc fa0a 	bl	8019b58 <_scanf_float>
 801d744:	e77d      	b.n	801d642 <__ssvfiscanf_r+0x172>
 801d746:	89a3      	ldrh	r3, [r4, #12]
 801d748:	f013 0f40 	tst.w	r3, #64	; 0x40
 801d74c:	bf18      	it	ne
 801d74e:	f04f 30ff 	movne.w	r0, #4294967295
 801d752:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801d756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d75a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801d75c:	e7f9      	b.n	801d752 <__ssvfiscanf_r+0x282>
 801d75e:	bf00      	nop
 801d760:	0801d41d 	.word	0x0801d41d
 801d764:	0801d497 	.word	0x0801d497
 801d768:	08021eba 	.word	0x08021eba
 801d76c:	08019b59 	.word	0x08019b59

0801d770 <__sfputc_r>:
 801d770:	6893      	ldr	r3, [r2, #8]
 801d772:	3b01      	subs	r3, #1
 801d774:	2b00      	cmp	r3, #0
 801d776:	b410      	push	{r4}
 801d778:	6093      	str	r3, [r2, #8]
 801d77a:	da08      	bge.n	801d78e <__sfputc_r+0x1e>
 801d77c:	6994      	ldr	r4, [r2, #24]
 801d77e:	42a3      	cmp	r3, r4
 801d780:	db01      	blt.n	801d786 <__sfputc_r+0x16>
 801d782:	290a      	cmp	r1, #10
 801d784:	d103      	bne.n	801d78e <__sfputc_r+0x1e>
 801d786:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d78a:	f7fd bbdb 	b.w	801af44 <__swbuf_r>
 801d78e:	6813      	ldr	r3, [r2, #0]
 801d790:	1c58      	adds	r0, r3, #1
 801d792:	6010      	str	r0, [r2, #0]
 801d794:	7019      	strb	r1, [r3, #0]
 801d796:	4608      	mov	r0, r1
 801d798:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d79c:	4770      	bx	lr

0801d79e <__sfputs_r>:
 801d79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d7a0:	4606      	mov	r6, r0
 801d7a2:	460f      	mov	r7, r1
 801d7a4:	4614      	mov	r4, r2
 801d7a6:	18d5      	adds	r5, r2, r3
 801d7a8:	42ac      	cmp	r4, r5
 801d7aa:	d101      	bne.n	801d7b0 <__sfputs_r+0x12>
 801d7ac:	2000      	movs	r0, #0
 801d7ae:	e007      	b.n	801d7c0 <__sfputs_r+0x22>
 801d7b0:	463a      	mov	r2, r7
 801d7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7b6:	4630      	mov	r0, r6
 801d7b8:	f7ff ffda 	bl	801d770 <__sfputc_r>
 801d7bc:	1c43      	adds	r3, r0, #1
 801d7be:	d1f3      	bne.n	801d7a8 <__sfputs_r+0xa>
 801d7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d7c4 <_vfiprintf_r>:
 801d7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c8:	460c      	mov	r4, r1
 801d7ca:	b09d      	sub	sp, #116	; 0x74
 801d7cc:	4617      	mov	r7, r2
 801d7ce:	461d      	mov	r5, r3
 801d7d0:	4606      	mov	r6, r0
 801d7d2:	b118      	cbz	r0, 801d7dc <_vfiprintf_r+0x18>
 801d7d4:	6983      	ldr	r3, [r0, #24]
 801d7d6:	b90b      	cbnz	r3, 801d7dc <_vfiprintf_r+0x18>
 801d7d8:	f7fe fbda 	bl	801bf90 <__sinit>
 801d7dc:	4b7c      	ldr	r3, [pc, #496]	; (801d9d0 <_vfiprintf_r+0x20c>)
 801d7de:	429c      	cmp	r4, r3
 801d7e0:	d158      	bne.n	801d894 <_vfiprintf_r+0xd0>
 801d7e2:	6874      	ldr	r4, [r6, #4]
 801d7e4:	89a3      	ldrh	r3, [r4, #12]
 801d7e6:	0718      	lsls	r0, r3, #28
 801d7e8:	d55e      	bpl.n	801d8a8 <_vfiprintf_r+0xe4>
 801d7ea:	6923      	ldr	r3, [r4, #16]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d05b      	beq.n	801d8a8 <_vfiprintf_r+0xe4>
 801d7f0:	2300      	movs	r3, #0
 801d7f2:	9309      	str	r3, [sp, #36]	; 0x24
 801d7f4:	2320      	movs	r3, #32
 801d7f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d7fa:	2330      	movs	r3, #48	; 0x30
 801d7fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d800:	9503      	str	r5, [sp, #12]
 801d802:	f04f 0b01 	mov.w	fp, #1
 801d806:	46b8      	mov	r8, r7
 801d808:	4645      	mov	r5, r8
 801d80a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d80e:	b10b      	cbz	r3, 801d814 <_vfiprintf_r+0x50>
 801d810:	2b25      	cmp	r3, #37	; 0x25
 801d812:	d154      	bne.n	801d8be <_vfiprintf_r+0xfa>
 801d814:	ebb8 0a07 	subs.w	sl, r8, r7
 801d818:	d00b      	beq.n	801d832 <_vfiprintf_r+0x6e>
 801d81a:	4653      	mov	r3, sl
 801d81c:	463a      	mov	r2, r7
 801d81e:	4621      	mov	r1, r4
 801d820:	4630      	mov	r0, r6
 801d822:	f7ff ffbc 	bl	801d79e <__sfputs_r>
 801d826:	3001      	adds	r0, #1
 801d828:	f000 80c2 	beq.w	801d9b0 <_vfiprintf_r+0x1ec>
 801d82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d82e:	4453      	add	r3, sl
 801d830:	9309      	str	r3, [sp, #36]	; 0x24
 801d832:	f898 3000 	ldrb.w	r3, [r8]
 801d836:	2b00      	cmp	r3, #0
 801d838:	f000 80ba 	beq.w	801d9b0 <_vfiprintf_r+0x1ec>
 801d83c:	2300      	movs	r3, #0
 801d83e:	f04f 32ff 	mov.w	r2, #4294967295
 801d842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d846:	9304      	str	r3, [sp, #16]
 801d848:	9307      	str	r3, [sp, #28]
 801d84a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d84e:	931a      	str	r3, [sp, #104]	; 0x68
 801d850:	46a8      	mov	r8, r5
 801d852:	2205      	movs	r2, #5
 801d854:	f818 1b01 	ldrb.w	r1, [r8], #1
 801d858:	485e      	ldr	r0, [pc, #376]	; (801d9d4 <_vfiprintf_r+0x210>)
 801d85a:	f7e2 fce1 	bl	8000220 <memchr>
 801d85e:	9b04      	ldr	r3, [sp, #16]
 801d860:	bb78      	cbnz	r0, 801d8c2 <_vfiprintf_r+0xfe>
 801d862:	06d9      	lsls	r1, r3, #27
 801d864:	bf44      	itt	mi
 801d866:	2220      	movmi	r2, #32
 801d868:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d86c:	071a      	lsls	r2, r3, #28
 801d86e:	bf44      	itt	mi
 801d870:	222b      	movmi	r2, #43	; 0x2b
 801d872:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d876:	782a      	ldrb	r2, [r5, #0]
 801d878:	2a2a      	cmp	r2, #42	; 0x2a
 801d87a:	d02a      	beq.n	801d8d2 <_vfiprintf_r+0x10e>
 801d87c:	9a07      	ldr	r2, [sp, #28]
 801d87e:	46a8      	mov	r8, r5
 801d880:	2000      	movs	r0, #0
 801d882:	250a      	movs	r5, #10
 801d884:	4641      	mov	r1, r8
 801d886:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d88a:	3b30      	subs	r3, #48	; 0x30
 801d88c:	2b09      	cmp	r3, #9
 801d88e:	d969      	bls.n	801d964 <_vfiprintf_r+0x1a0>
 801d890:	b360      	cbz	r0, 801d8ec <_vfiprintf_r+0x128>
 801d892:	e024      	b.n	801d8de <_vfiprintf_r+0x11a>
 801d894:	4b50      	ldr	r3, [pc, #320]	; (801d9d8 <_vfiprintf_r+0x214>)
 801d896:	429c      	cmp	r4, r3
 801d898:	d101      	bne.n	801d89e <_vfiprintf_r+0xda>
 801d89a:	68b4      	ldr	r4, [r6, #8]
 801d89c:	e7a2      	b.n	801d7e4 <_vfiprintf_r+0x20>
 801d89e:	4b4f      	ldr	r3, [pc, #316]	; (801d9dc <_vfiprintf_r+0x218>)
 801d8a0:	429c      	cmp	r4, r3
 801d8a2:	bf08      	it	eq
 801d8a4:	68f4      	ldreq	r4, [r6, #12]
 801d8a6:	e79d      	b.n	801d7e4 <_vfiprintf_r+0x20>
 801d8a8:	4621      	mov	r1, r4
 801d8aa:	4630      	mov	r0, r6
 801d8ac:	f7fd fbbc 	bl	801b028 <__swsetup_r>
 801d8b0:	2800      	cmp	r0, #0
 801d8b2:	d09d      	beq.n	801d7f0 <_vfiprintf_r+0x2c>
 801d8b4:	f04f 30ff 	mov.w	r0, #4294967295
 801d8b8:	b01d      	add	sp, #116	; 0x74
 801d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8be:	46a8      	mov	r8, r5
 801d8c0:	e7a2      	b.n	801d808 <_vfiprintf_r+0x44>
 801d8c2:	4a44      	ldr	r2, [pc, #272]	; (801d9d4 <_vfiprintf_r+0x210>)
 801d8c4:	1a80      	subs	r0, r0, r2
 801d8c6:	fa0b f000 	lsl.w	r0, fp, r0
 801d8ca:	4318      	orrs	r0, r3
 801d8cc:	9004      	str	r0, [sp, #16]
 801d8ce:	4645      	mov	r5, r8
 801d8d0:	e7be      	b.n	801d850 <_vfiprintf_r+0x8c>
 801d8d2:	9a03      	ldr	r2, [sp, #12]
 801d8d4:	1d11      	adds	r1, r2, #4
 801d8d6:	6812      	ldr	r2, [r2, #0]
 801d8d8:	9103      	str	r1, [sp, #12]
 801d8da:	2a00      	cmp	r2, #0
 801d8dc:	db01      	blt.n	801d8e2 <_vfiprintf_r+0x11e>
 801d8de:	9207      	str	r2, [sp, #28]
 801d8e0:	e004      	b.n	801d8ec <_vfiprintf_r+0x128>
 801d8e2:	4252      	negs	r2, r2
 801d8e4:	f043 0302 	orr.w	r3, r3, #2
 801d8e8:	9207      	str	r2, [sp, #28]
 801d8ea:	9304      	str	r3, [sp, #16]
 801d8ec:	f898 3000 	ldrb.w	r3, [r8]
 801d8f0:	2b2e      	cmp	r3, #46	; 0x2e
 801d8f2:	d10e      	bne.n	801d912 <_vfiprintf_r+0x14e>
 801d8f4:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d8f8:	2b2a      	cmp	r3, #42	; 0x2a
 801d8fa:	d138      	bne.n	801d96e <_vfiprintf_r+0x1aa>
 801d8fc:	9b03      	ldr	r3, [sp, #12]
 801d8fe:	1d1a      	adds	r2, r3, #4
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	9203      	str	r2, [sp, #12]
 801d904:	2b00      	cmp	r3, #0
 801d906:	bfb8      	it	lt
 801d908:	f04f 33ff 	movlt.w	r3, #4294967295
 801d90c:	f108 0802 	add.w	r8, r8, #2
 801d910:	9305      	str	r3, [sp, #20]
 801d912:	4d33      	ldr	r5, [pc, #204]	; (801d9e0 <_vfiprintf_r+0x21c>)
 801d914:	f898 1000 	ldrb.w	r1, [r8]
 801d918:	2203      	movs	r2, #3
 801d91a:	4628      	mov	r0, r5
 801d91c:	f7e2 fc80 	bl	8000220 <memchr>
 801d920:	b140      	cbz	r0, 801d934 <_vfiprintf_r+0x170>
 801d922:	2340      	movs	r3, #64	; 0x40
 801d924:	1b40      	subs	r0, r0, r5
 801d926:	fa03 f000 	lsl.w	r0, r3, r0
 801d92a:	9b04      	ldr	r3, [sp, #16]
 801d92c:	4303      	orrs	r3, r0
 801d92e:	f108 0801 	add.w	r8, r8, #1
 801d932:	9304      	str	r3, [sp, #16]
 801d934:	f898 1000 	ldrb.w	r1, [r8]
 801d938:	482a      	ldr	r0, [pc, #168]	; (801d9e4 <_vfiprintf_r+0x220>)
 801d93a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d93e:	2206      	movs	r2, #6
 801d940:	f108 0701 	add.w	r7, r8, #1
 801d944:	f7e2 fc6c 	bl	8000220 <memchr>
 801d948:	2800      	cmp	r0, #0
 801d94a:	d037      	beq.n	801d9bc <_vfiprintf_r+0x1f8>
 801d94c:	4b26      	ldr	r3, [pc, #152]	; (801d9e8 <_vfiprintf_r+0x224>)
 801d94e:	bb1b      	cbnz	r3, 801d998 <_vfiprintf_r+0x1d4>
 801d950:	9b03      	ldr	r3, [sp, #12]
 801d952:	3307      	adds	r3, #7
 801d954:	f023 0307 	bic.w	r3, r3, #7
 801d958:	3308      	adds	r3, #8
 801d95a:	9303      	str	r3, [sp, #12]
 801d95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d95e:	444b      	add	r3, r9
 801d960:	9309      	str	r3, [sp, #36]	; 0x24
 801d962:	e750      	b.n	801d806 <_vfiprintf_r+0x42>
 801d964:	fb05 3202 	mla	r2, r5, r2, r3
 801d968:	2001      	movs	r0, #1
 801d96a:	4688      	mov	r8, r1
 801d96c:	e78a      	b.n	801d884 <_vfiprintf_r+0xc0>
 801d96e:	2300      	movs	r3, #0
 801d970:	f108 0801 	add.w	r8, r8, #1
 801d974:	9305      	str	r3, [sp, #20]
 801d976:	4619      	mov	r1, r3
 801d978:	250a      	movs	r5, #10
 801d97a:	4640      	mov	r0, r8
 801d97c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d980:	3a30      	subs	r2, #48	; 0x30
 801d982:	2a09      	cmp	r2, #9
 801d984:	d903      	bls.n	801d98e <_vfiprintf_r+0x1ca>
 801d986:	2b00      	cmp	r3, #0
 801d988:	d0c3      	beq.n	801d912 <_vfiprintf_r+0x14e>
 801d98a:	9105      	str	r1, [sp, #20]
 801d98c:	e7c1      	b.n	801d912 <_vfiprintf_r+0x14e>
 801d98e:	fb05 2101 	mla	r1, r5, r1, r2
 801d992:	2301      	movs	r3, #1
 801d994:	4680      	mov	r8, r0
 801d996:	e7f0      	b.n	801d97a <_vfiprintf_r+0x1b6>
 801d998:	ab03      	add	r3, sp, #12
 801d99a:	9300      	str	r3, [sp, #0]
 801d99c:	4622      	mov	r2, r4
 801d99e:	4b13      	ldr	r3, [pc, #76]	; (801d9ec <_vfiprintf_r+0x228>)
 801d9a0:	a904      	add	r1, sp, #16
 801d9a2:	4630      	mov	r0, r6
 801d9a4:	f7fb fd10 	bl	80193c8 <_printf_float>
 801d9a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d9ac:	4681      	mov	r9, r0
 801d9ae:	d1d5      	bne.n	801d95c <_vfiprintf_r+0x198>
 801d9b0:	89a3      	ldrh	r3, [r4, #12]
 801d9b2:	065b      	lsls	r3, r3, #25
 801d9b4:	f53f af7e 	bmi.w	801d8b4 <_vfiprintf_r+0xf0>
 801d9b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d9ba:	e77d      	b.n	801d8b8 <_vfiprintf_r+0xf4>
 801d9bc:	ab03      	add	r3, sp, #12
 801d9be:	9300      	str	r3, [sp, #0]
 801d9c0:	4622      	mov	r2, r4
 801d9c2:	4b0a      	ldr	r3, [pc, #40]	; (801d9ec <_vfiprintf_r+0x228>)
 801d9c4:	a904      	add	r1, sp, #16
 801d9c6:	4630      	mov	r0, r6
 801d9c8:	f7fb ffb4 	bl	8019934 <_printf_i>
 801d9cc:	e7ec      	b.n	801d9a8 <_vfiprintf_r+0x1e4>
 801d9ce:	bf00      	nop
 801d9d0:	08021d78 	.word	0x08021d78
 801d9d4:	08021eb4 	.word	0x08021eb4
 801d9d8:	08021d98 	.word	0x08021d98
 801d9dc:	08021d58 	.word	0x08021d58
 801d9e0:	08021eba 	.word	0x08021eba
 801d9e4:	08021ebe 	.word	0x08021ebe
 801d9e8:	080193c9 	.word	0x080193c9
 801d9ec:	0801d79f 	.word	0x0801d79f

0801d9f0 <_scanf_chars>:
 801d9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9f4:	4615      	mov	r5, r2
 801d9f6:	688a      	ldr	r2, [r1, #8]
 801d9f8:	4680      	mov	r8, r0
 801d9fa:	460c      	mov	r4, r1
 801d9fc:	b932      	cbnz	r2, 801da0c <_scanf_chars+0x1c>
 801d9fe:	698a      	ldr	r2, [r1, #24]
 801da00:	2a00      	cmp	r2, #0
 801da02:	bf14      	ite	ne
 801da04:	f04f 32ff 	movne.w	r2, #4294967295
 801da08:	2201      	moveq	r2, #1
 801da0a:	608a      	str	r2, [r1, #8]
 801da0c:	6822      	ldr	r2, [r4, #0]
 801da0e:	06d1      	lsls	r1, r2, #27
 801da10:	bf5f      	itttt	pl
 801da12:	681a      	ldrpl	r2, [r3, #0]
 801da14:	1d11      	addpl	r1, r2, #4
 801da16:	6019      	strpl	r1, [r3, #0]
 801da18:	6817      	ldrpl	r7, [r2, #0]
 801da1a:	2600      	movs	r6, #0
 801da1c:	69a3      	ldr	r3, [r4, #24]
 801da1e:	b1db      	cbz	r3, 801da58 <_scanf_chars+0x68>
 801da20:	2b01      	cmp	r3, #1
 801da22:	d107      	bne.n	801da34 <_scanf_chars+0x44>
 801da24:	682b      	ldr	r3, [r5, #0]
 801da26:	6962      	ldr	r2, [r4, #20]
 801da28:	781b      	ldrb	r3, [r3, #0]
 801da2a:	5cd3      	ldrb	r3, [r2, r3]
 801da2c:	b9a3      	cbnz	r3, 801da58 <_scanf_chars+0x68>
 801da2e:	2e00      	cmp	r6, #0
 801da30:	d132      	bne.n	801da98 <_scanf_chars+0xa8>
 801da32:	e006      	b.n	801da42 <_scanf_chars+0x52>
 801da34:	2b02      	cmp	r3, #2
 801da36:	d007      	beq.n	801da48 <_scanf_chars+0x58>
 801da38:	2e00      	cmp	r6, #0
 801da3a:	d12d      	bne.n	801da98 <_scanf_chars+0xa8>
 801da3c:	69a3      	ldr	r3, [r4, #24]
 801da3e:	2b01      	cmp	r3, #1
 801da40:	d12a      	bne.n	801da98 <_scanf_chars+0xa8>
 801da42:	2001      	movs	r0, #1
 801da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da48:	f7fb fbce 	bl	80191e8 <__locale_ctype_ptr>
 801da4c:	682b      	ldr	r3, [r5, #0]
 801da4e:	781b      	ldrb	r3, [r3, #0]
 801da50:	4418      	add	r0, r3
 801da52:	7843      	ldrb	r3, [r0, #1]
 801da54:	071b      	lsls	r3, r3, #28
 801da56:	d4ef      	bmi.n	801da38 <_scanf_chars+0x48>
 801da58:	6823      	ldr	r3, [r4, #0]
 801da5a:	06da      	lsls	r2, r3, #27
 801da5c:	bf5e      	ittt	pl
 801da5e:	682b      	ldrpl	r3, [r5, #0]
 801da60:	781b      	ldrbpl	r3, [r3, #0]
 801da62:	703b      	strbpl	r3, [r7, #0]
 801da64:	682a      	ldr	r2, [r5, #0]
 801da66:	686b      	ldr	r3, [r5, #4]
 801da68:	f102 0201 	add.w	r2, r2, #1
 801da6c:	602a      	str	r2, [r5, #0]
 801da6e:	68a2      	ldr	r2, [r4, #8]
 801da70:	f103 33ff 	add.w	r3, r3, #4294967295
 801da74:	f102 32ff 	add.w	r2, r2, #4294967295
 801da78:	606b      	str	r3, [r5, #4]
 801da7a:	f106 0601 	add.w	r6, r6, #1
 801da7e:	bf58      	it	pl
 801da80:	3701      	addpl	r7, #1
 801da82:	60a2      	str	r2, [r4, #8]
 801da84:	b142      	cbz	r2, 801da98 <_scanf_chars+0xa8>
 801da86:	2b00      	cmp	r3, #0
 801da88:	dcc8      	bgt.n	801da1c <_scanf_chars+0x2c>
 801da8a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801da8e:	4629      	mov	r1, r5
 801da90:	4640      	mov	r0, r8
 801da92:	4798      	blx	r3
 801da94:	2800      	cmp	r0, #0
 801da96:	d0c1      	beq.n	801da1c <_scanf_chars+0x2c>
 801da98:	6823      	ldr	r3, [r4, #0]
 801da9a:	f013 0310 	ands.w	r3, r3, #16
 801da9e:	d105      	bne.n	801daac <_scanf_chars+0xbc>
 801daa0:	68e2      	ldr	r2, [r4, #12]
 801daa2:	3201      	adds	r2, #1
 801daa4:	60e2      	str	r2, [r4, #12]
 801daa6:	69a2      	ldr	r2, [r4, #24]
 801daa8:	b102      	cbz	r2, 801daac <_scanf_chars+0xbc>
 801daaa:	703b      	strb	r3, [r7, #0]
 801daac:	6923      	ldr	r3, [r4, #16]
 801daae:	441e      	add	r6, r3
 801dab0:	6126      	str	r6, [r4, #16]
 801dab2:	2000      	movs	r0, #0
 801dab4:	e7c6      	b.n	801da44 <_scanf_chars+0x54>
	...

0801dab8 <_scanf_i>:
 801dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dabc:	469a      	mov	sl, r3
 801dabe:	4b74      	ldr	r3, [pc, #464]	; (801dc90 <_scanf_i+0x1d8>)
 801dac0:	460c      	mov	r4, r1
 801dac2:	4683      	mov	fp, r0
 801dac4:	4616      	mov	r6, r2
 801dac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801daca:	b087      	sub	sp, #28
 801dacc:	ab03      	add	r3, sp, #12
 801dace:	68a7      	ldr	r7, [r4, #8]
 801dad0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801dad4:	4b6f      	ldr	r3, [pc, #444]	; (801dc94 <_scanf_i+0x1dc>)
 801dad6:	69a1      	ldr	r1, [r4, #24]
 801dad8:	4a6f      	ldr	r2, [pc, #444]	; (801dc98 <_scanf_i+0x1e0>)
 801dada:	2903      	cmp	r1, #3
 801dadc:	bf08      	it	eq
 801dade:	461a      	moveq	r2, r3
 801dae0:	1e7b      	subs	r3, r7, #1
 801dae2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801dae6:	bf84      	itt	hi
 801dae8:	f240 135d 	movwhi	r3, #349	; 0x15d
 801daec:	60a3      	strhi	r3, [r4, #8]
 801daee:	6823      	ldr	r3, [r4, #0]
 801daf0:	9200      	str	r2, [sp, #0]
 801daf2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801daf6:	bf88      	it	hi
 801daf8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801dafc:	f104 091c 	add.w	r9, r4, #28
 801db00:	6023      	str	r3, [r4, #0]
 801db02:	bf8c      	ite	hi
 801db04:	197f      	addhi	r7, r7, r5
 801db06:	2700      	movls	r7, #0
 801db08:	464b      	mov	r3, r9
 801db0a:	f04f 0800 	mov.w	r8, #0
 801db0e:	9301      	str	r3, [sp, #4]
 801db10:	6831      	ldr	r1, [r6, #0]
 801db12:	ab03      	add	r3, sp, #12
 801db14:	2202      	movs	r2, #2
 801db16:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801db1a:	7809      	ldrb	r1, [r1, #0]
 801db1c:	f7e2 fb80 	bl	8000220 <memchr>
 801db20:	9b01      	ldr	r3, [sp, #4]
 801db22:	b330      	cbz	r0, 801db72 <_scanf_i+0xba>
 801db24:	f1b8 0f01 	cmp.w	r8, #1
 801db28:	d15a      	bne.n	801dbe0 <_scanf_i+0x128>
 801db2a:	6862      	ldr	r2, [r4, #4]
 801db2c:	b92a      	cbnz	r2, 801db3a <_scanf_i+0x82>
 801db2e:	6822      	ldr	r2, [r4, #0]
 801db30:	2108      	movs	r1, #8
 801db32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801db36:	6061      	str	r1, [r4, #4]
 801db38:	6022      	str	r2, [r4, #0]
 801db3a:	6822      	ldr	r2, [r4, #0]
 801db3c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801db40:	6022      	str	r2, [r4, #0]
 801db42:	68a2      	ldr	r2, [r4, #8]
 801db44:	1e51      	subs	r1, r2, #1
 801db46:	60a1      	str	r1, [r4, #8]
 801db48:	b19a      	cbz	r2, 801db72 <_scanf_i+0xba>
 801db4a:	6832      	ldr	r2, [r6, #0]
 801db4c:	1c51      	adds	r1, r2, #1
 801db4e:	6031      	str	r1, [r6, #0]
 801db50:	7812      	ldrb	r2, [r2, #0]
 801db52:	701a      	strb	r2, [r3, #0]
 801db54:	1c5d      	adds	r5, r3, #1
 801db56:	6873      	ldr	r3, [r6, #4]
 801db58:	3b01      	subs	r3, #1
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	6073      	str	r3, [r6, #4]
 801db5e:	dc07      	bgt.n	801db70 <_scanf_i+0xb8>
 801db60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801db64:	4631      	mov	r1, r6
 801db66:	4658      	mov	r0, fp
 801db68:	4798      	blx	r3
 801db6a:	2800      	cmp	r0, #0
 801db6c:	f040 8086 	bne.w	801dc7c <_scanf_i+0x1c4>
 801db70:	462b      	mov	r3, r5
 801db72:	f108 0801 	add.w	r8, r8, #1
 801db76:	f1b8 0f03 	cmp.w	r8, #3
 801db7a:	d1c8      	bne.n	801db0e <_scanf_i+0x56>
 801db7c:	6862      	ldr	r2, [r4, #4]
 801db7e:	b90a      	cbnz	r2, 801db84 <_scanf_i+0xcc>
 801db80:	220a      	movs	r2, #10
 801db82:	6062      	str	r2, [r4, #4]
 801db84:	6862      	ldr	r2, [r4, #4]
 801db86:	4945      	ldr	r1, [pc, #276]	; (801dc9c <_scanf_i+0x1e4>)
 801db88:	6960      	ldr	r0, [r4, #20]
 801db8a:	9301      	str	r3, [sp, #4]
 801db8c:	1a89      	subs	r1, r1, r2
 801db8e:	f000 f8a9 	bl	801dce4 <__sccl>
 801db92:	9b01      	ldr	r3, [sp, #4]
 801db94:	f04f 0800 	mov.w	r8, #0
 801db98:	461d      	mov	r5, r3
 801db9a:	68a3      	ldr	r3, [r4, #8]
 801db9c:	6822      	ldr	r2, [r4, #0]
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d03a      	beq.n	801dc18 <_scanf_i+0x160>
 801dba2:	6831      	ldr	r1, [r6, #0]
 801dba4:	6960      	ldr	r0, [r4, #20]
 801dba6:	f891 c000 	ldrb.w	ip, [r1]
 801dbaa:	f810 000c 	ldrb.w	r0, [r0, ip]
 801dbae:	2800      	cmp	r0, #0
 801dbb0:	d032      	beq.n	801dc18 <_scanf_i+0x160>
 801dbb2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801dbb6:	d121      	bne.n	801dbfc <_scanf_i+0x144>
 801dbb8:	0510      	lsls	r0, r2, #20
 801dbba:	d51f      	bpl.n	801dbfc <_scanf_i+0x144>
 801dbbc:	f108 0801 	add.w	r8, r8, #1
 801dbc0:	b117      	cbz	r7, 801dbc8 <_scanf_i+0x110>
 801dbc2:	3301      	adds	r3, #1
 801dbc4:	3f01      	subs	r7, #1
 801dbc6:	60a3      	str	r3, [r4, #8]
 801dbc8:	6873      	ldr	r3, [r6, #4]
 801dbca:	3b01      	subs	r3, #1
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	6073      	str	r3, [r6, #4]
 801dbd0:	dd1b      	ble.n	801dc0a <_scanf_i+0x152>
 801dbd2:	6833      	ldr	r3, [r6, #0]
 801dbd4:	3301      	adds	r3, #1
 801dbd6:	6033      	str	r3, [r6, #0]
 801dbd8:	68a3      	ldr	r3, [r4, #8]
 801dbda:	3b01      	subs	r3, #1
 801dbdc:	60a3      	str	r3, [r4, #8]
 801dbde:	e7dc      	b.n	801db9a <_scanf_i+0xe2>
 801dbe0:	f1b8 0f02 	cmp.w	r8, #2
 801dbe4:	d1ad      	bne.n	801db42 <_scanf_i+0x8a>
 801dbe6:	6822      	ldr	r2, [r4, #0]
 801dbe8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801dbec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801dbf0:	d1bf      	bne.n	801db72 <_scanf_i+0xba>
 801dbf2:	2110      	movs	r1, #16
 801dbf4:	6061      	str	r1, [r4, #4]
 801dbf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801dbfa:	e7a1      	b.n	801db40 <_scanf_i+0x88>
 801dbfc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801dc00:	6022      	str	r2, [r4, #0]
 801dc02:	780b      	ldrb	r3, [r1, #0]
 801dc04:	702b      	strb	r3, [r5, #0]
 801dc06:	3501      	adds	r5, #1
 801dc08:	e7de      	b.n	801dbc8 <_scanf_i+0x110>
 801dc0a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801dc0e:	4631      	mov	r1, r6
 801dc10:	4658      	mov	r0, fp
 801dc12:	4798      	blx	r3
 801dc14:	2800      	cmp	r0, #0
 801dc16:	d0df      	beq.n	801dbd8 <_scanf_i+0x120>
 801dc18:	6823      	ldr	r3, [r4, #0]
 801dc1a:	05d9      	lsls	r1, r3, #23
 801dc1c:	d50c      	bpl.n	801dc38 <_scanf_i+0x180>
 801dc1e:	454d      	cmp	r5, r9
 801dc20:	d908      	bls.n	801dc34 <_scanf_i+0x17c>
 801dc22:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801dc26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801dc2a:	4632      	mov	r2, r6
 801dc2c:	4658      	mov	r0, fp
 801dc2e:	4798      	blx	r3
 801dc30:	1e6f      	subs	r7, r5, #1
 801dc32:	463d      	mov	r5, r7
 801dc34:	454d      	cmp	r5, r9
 801dc36:	d029      	beq.n	801dc8c <_scanf_i+0x1d4>
 801dc38:	6822      	ldr	r2, [r4, #0]
 801dc3a:	f012 0210 	ands.w	r2, r2, #16
 801dc3e:	d113      	bne.n	801dc68 <_scanf_i+0x1b0>
 801dc40:	702a      	strb	r2, [r5, #0]
 801dc42:	6863      	ldr	r3, [r4, #4]
 801dc44:	9e00      	ldr	r6, [sp, #0]
 801dc46:	4649      	mov	r1, r9
 801dc48:	4658      	mov	r0, fp
 801dc4a:	47b0      	blx	r6
 801dc4c:	f8da 3000 	ldr.w	r3, [sl]
 801dc50:	6821      	ldr	r1, [r4, #0]
 801dc52:	1d1a      	adds	r2, r3, #4
 801dc54:	f8ca 2000 	str.w	r2, [sl]
 801dc58:	f011 0f20 	tst.w	r1, #32
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	d010      	beq.n	801dc82 <_scanf_i+0x1ca>
 801dc60:	6018      	str	r0, [r3, #0]
 801dc62:	68e3      	ldr	r3, [r4, #12]
 801dc64:	3301      	adds	r3, #1
 801dc66:	60e3      	str	r3, [r4, #12]
 801dc68:	eba5 0509 	sub.w	r5, r5, r9
 801dc6c:	44a8      	add	r8, r5
 801dc6e:	6925      	ldr	r5, [r4, #16]
 801dc70:	4445      	add	r5, r8
 801dc72:	6125      	str	r5, [r4, #16]
 801dc74:	2000      	movs	r0, #0
 801dc76:	b007      	add	sp, #28
 801dc78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc7c:	f04f 0800 	mov.w	r8, #0
 801dc80:	e7ca      	b.n	801dc18 <_scanf_i+0x160>
 801dc82:	07ca      	lsls	r2, r1, #31
 801dc84:	bf4c      	ite	mi
 801dc86:	8018      	strhmi	r0, [r3, #0]
 801dc88:	6018      	strpl	r0, [r3, #0]
 801dc8a:	e7ea      	b.n	801dc62 <_scanf_i+0x1aa>
 801dc8c:	2001      	movs	r0, #1
 801dc8e:	e7f2      	b.n	801dc76 <_scanf_i+0x1be>
 801dc90:	08021a30 	.word	0x08021a30
 801dc94:	0801af21 	.word	0x0801af21
 801dc98:	0801de3d 	.word	0x0801de3d
 801dc9c:	08021ed5 	.word	0x08021ed5

0801dca0 <_read_r>:
 801dca0:	b538      	push	{r3, r4, r5, lr}
 801dca2:	4c07      	ldr	r4, [pc, #28]	; (801dcc0 <_read_r+0x20>)
 801dca4:	4605      	mov	r5, r0
 801dca6:	4608      	mov	r0, r1
 801dca8:	4611      	mov	r1, r2
 801dcaa:	2200      	movs	r2, #0
 801dcac:	6022      	str	r2, [r4, #0]
 801dcae:	461a      	mov	r2, r3
 801dcb0:	f7e3 fd0a 	bl	80016c8 <_read>
 801dcb4:	1c43      	adds	r3, r0, #1
 801dcb6:	d102      	bne.n	801dcbe <_read_r+0x1e>
 801dcb8:	6823      	ldr	r3, [r4, #0]
 801dcba:	b103      	cbz	r3, 801dcbe <_read_r+0x1e>
 801dcbc:	602b      	str	r3, [r5, #0]
 801dcbe:	bd38      	pop	{r3, r4, r5, pc}
 801dcc0:	200280e0 	.word	0x200280e0

0801dcc4 <_sbrk_r>:
 801dcc4:	b538      	push	{r3, r4, r5, lr}
 801dcc6:	4c06      	ldr	r4, [pc, #24]	; (801dce0 <_sbrk_r+0x1c>)
 801dcc8:	2300      	movs	r3, #0
 801dcca:	4605      	mov	r5, r0
 801dccc:	4608      	mov	r0, r1
 801dcce:	6023      	str	r3, [r4, #0]
 801dcd0:	f7e3 fd4c 	bl	800176c <_sbrk>
 801dcd4:	1c43      	adds	r3, r0, #1
 801dcd6:	d102      	bne.n	801dcde <_sbrk_r+0x1a>
 801dcd8:	6823      	ldr	r3, [r4, #0]
 801dcda:	b103      	cbz	r3, 801dcde <_sbrk_r+0x1a>
 801dcdc:	602b      	str	r3, [r5, #0]
 801dcde:	bd38      	pop	{r3, r4, r5, pc}
 801dce0:	200280e0 	.word	0x200280e0

0801dce4 <__sccl>:
 801dce4:	b570      	push	{r4, r5, r6, lr}
 801dce6:	780b      	ldrb	r3, [r1, #0]
 801dce8:	2b5e      	cmp	r3, #94	; 0x5e
 801dcea:	bf13      	iteet	ne
 801dcec:	1c4a      	addne	r2, r1, #1
 801dcee:	1c8a      	addeq	r2, r1, #2
 801dcf0:	784b      	ldrbeq	r3, [r1, #1]
 801dcf2:	2100      	movne	r1, #0
 801dcf4:	bf08      	it	eq
 801dcf6:	2101      	moveq	r1, #1
 801dcf8:	1e44      	subs	r4, r0, #1
 801dcfa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801dcfe:	f804 1f01 	strb.w	r1, [r4, #1]!
 801dd02:	42ac      	cmp	r4, r5
 801dd04:	d1fb      	bne.n	801dcfe <__sccl+0x1a>
 801dd06:	b913      	cbnz	r3, 801dd0e <__sccl+0x2a>
 801dd08:	3a01      	subs	r2, #1
 801dd0a:	4610      	mov	r0, r2
 801dd0c:	bd70      	pop	{r4, r5, r6, pc}
 801dd0e:	f081 0401 	eor.w	r4, r1, #1
 801dd12:	54c4      	strb	r4, [r0, r3]
 801dd14:	1c51      	adds	r1, r2, #1
 801dd16:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801dd1a:	2d2d      	cmp	r5, #45	; 0x2d
 801dd1c:	f101 36ff 	add.w	r6, r1, #4294967295
 801dd20:	460a      	mov	r2, r1
 801dd22:	d006      	beq.n	801dd32 <__sccl+0x4e>
 801dd24:	2d5d      	cmp	r5, #93	; 0x5d
 801dd26:	d0f0      	beq.n	801dd0a <__sccl+0x26>
 801dd28:	b90d      	cbnz	r5, 801dd2e <__sccl+0x4a>
 801dd2a:	4632      	mov	r2, r6
 801dd2c:	e7ed      	b.n	801dd0a <__sccl+0x26>
 801dd2e:	462b      	mov	r3, r5
 801dd30:	e7ef      	b.n	801dd12 <__sccl+0x2e>
 801dd32:	780e      	ldrb	r6, [r1, #0]
 801dd34:	2e5d      	cmp	r6, #93	; 0x5d
 801dd36:	d0fa      	beq.n	801dd2e <__sccl+0x4a>
 801dd38:	42b3      	cmp	r3, r6
 801dd3a:	dcf8      	bgt.n	801dd2e <__sccl+0x4a>
 801dd3c:	3301      	adds	r3, #1
 801dd3e:	429e      	cmp	r6, r3
 801dd40:	54c4      	strb	r4, [r0, r3]
 801dd42:	dcfb      	bgt.n	801dd3c <__sccl+0x58>
 801dd44:	3102      	adds	r1, #2
 801dd46:	e7e6      	b.n	801dd16 <__sccl+0x32>

0801dd48 <_strtoul_l.isra.0>:
 801dd48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dd4c:	4680      	mov	r8, r0
 801dd4e:	4689      	mov	r9, r1
 801dd50:	4692      	mov	sl, r2
 801dd52:	461e      	mov	r6, r3
 801dd54:	460f      	mov	r7, r1
 801dd56:	463d      	mov	r5, r7
 801dd58:	9808      	ldr	r0, [sp, #32]
 801dd5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dd5e:	f7fb fa3f 	bl	80191e0 <__locale_ctype_ptr_l>
 801dd62:	4420      	add	r0, r4
 801dd64:	7843      	ldrb	r3, [r0, #1]
 801dd66:	f013 0308 	ands.w	r3, r3, #8
 801dd6a:	d130      	bne.n	801ddce <_strtoul_l.isra.0+0x86>
 801dd6c:	2c2d      	cmp	r4, #45	; 0x2d
 801dd6e:	d130      	bne.n	801ddd2 <_strtoul_l.isra.0+0x8a>
 801dd70:	787c      	ldrb	r4, [r7, #1]
 801dd72:	1cbd      	adds	r5, r7, #2
 801dd74:	2101      	movs	r1, #1
 801dd76:	2e00      	cmp	r6, #0
 801dd78:	d05c      	beq.n	801de34 <_strtoul_l.isra.0+0xec>
 801dd7a:	2e10      	cmp	r6, #16
 801dd7c:	d109      	bne.n	801dd92 <_strtoul_l.isra.0+0x4a>
 801dd7e:	2c30      	cmp	r4, #48	; 0x30
 801dd80:	d107      	bne.n	801dd92 <_strtoul_l.isra.0+0x4a>
 801dd82:	782b      	ldrb	r3, [r5, #0]
 801dd84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801dd88:	2b58      	cmp	r3, #88	; 0x58
 801dd8a:	d14e      	bne.n	801de2a <_strtoul_l.isra.0+0xe2>
 801dd8c:	786c      	ldrb	r4, [r5, #1]
 801dd8e:	2610      	movs	r6, #16
 801dd90:	3502      	adds	r5, #2
 801dd92:	f04f 32ff 	mov.w	r2, #4294967295
 801dd96:	2300      	movs	r3, #0
 801dd98:	fbb2 f2f6 	udiv	r2, r2, r6
 801dd9c:	fb06 fc02 	mul.w	ip, r6, r2
 801dda0:	ea6f 0c0c 	mvn.w	ip, ip
 801dda4:	4618      	mov	r0, r3
 801dda6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801ddaa:	2f09      	cmp	r7, #9
 801ddac:	d817      	bhi.n	801ddde <_strtoul_l.isra.0+0x96>
 801ddae:	463c      	mov	r4, r7
 801ddb0:	42a6      	cmp	r6, r4
 801ddb2:	dd23      	ble.n	801ddfc <_strtoul_l.isra.0+0xb4>
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	db1e      	blt.n	801ddf6 <_strtoul_l.isra.0+0xae>
 801ddb8:	4282      	cmp	r2, r0
 801ddba:	d31c      	bcc.n	801ddf6 <_strtoul_l.isra.0+0xae>
 801ddbc:	d101      	bne.n	801ddc2 <_strtoul_l.isra.0+0x7a>
 801ddbe:	45a4      	cmp	ip, r4
 801ddc0:	db19      	blt.n	801ddf6 <_strtoul_l.isra.0+0xae>
 801ddc2:	fb00 4006 	mla	r0, r0, r6, r4
 801ddc6:	2301      	movs	r3, #1
 801ddc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ddcc:	e7eb      	b.n	801dda6 <_strtoul_l.isra.0+0x5e>
 801ddce:	462f      	mov	r7, r5
 801ddd0:	e7c1      	b.n	801dd56 <_strtoul_l.isra.0+0xe>
 801ddd2:	2c2b      	cmp	r4, #43	; 0x2b
 801ddd4:	bf04      	itt	eq
 801ddd6:	1cbd      	addeq	r5, r7, #2
 801ddd8:	787c      	ldrbeq	r4, [r7, #1]
 801ddda:	4619      	mov	r1, r3
 801dddc:	e7cb      	b.n	801dd76 <_strtoul_l.isra.0+0x2e>
 801ddde:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801dde2:	2f19      	cmp	r7, #25
 801dde4:	d801      	bhi.n	801ddea <_strtoul_l.isra.0+0xa2>
 801dde6:	3c37      	subs	r4, #55	; 0x37
 801dde8:	e7e2      	b.n	801ddb0 <_strtoul_l.isra.0+0x68>
 801ddea:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801ddee:	2f19      	cmp	r7, #25
 801ddf0:	d804      	bhi.n	801ddfc <_strtoul_l.isra.0+0xb4>
 801ddf2:	3c57      	subs	r4, #87	; 0x57
 801ddf4:	e7dc      	b.n	801ddb0 <_strtoul_l.isra.0+0x68>
 801ddf6:	f04f 33ff 	mov.w	r3, #4294967295
 801ddfa:	e7e5      	b.n	801ddc8 <_strtoul_l.isra.0+0x80>
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	da09      	bge.n	801de14 <_strtoul_l.isra.0+0xcc>
 801de00:	2322      	movs	r3, #34	; 0x22
 801de02:	f8c8 3000 	str.w	r3, [r8]
 801de06:	f04f 30ff 	mov.w	r0, #4294967295
 801de0a:	f1ba 0f00 	cmp.w	sl, #0
 801de0e:	d107      	bne.n	801de20 <_strtoul_l.isra.0+0xd8>
 801de10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de14:	b101      	cbz	r1, 801de18 <_strtoul_l.isra.0+0xd0>
 801de16:	4240      	negs	r0, r0
 801de18:	f1ba 0f00 	cmp.w	sl, #0
 801de1c:	d0f8      	beq.n	801de10 <_strtoul_l.isra.0+0xc8>
 801de1e:	b10b      	cbz	r3, 801de24 <_strtoul_l.isra.0+0xdc>
 801de20:	f105 39ff 	add.w	r9, r5, #4294967295
 801de24:	f8ca 9000 	str.w	r9, [sl]
 801de28:	e7f2      	b.n	801de10 <_strtoul_l.isra.0+0xc8>
 801de2a:	2430      	movs	r4, #48	; 0x30
 801de2c:	2e00      	cmp	r6, #0
 801de2e:	d1b0      	bne.n	801dd92 <_strtoul_l.isra.0+0x4a>
 801de30:	2608      	movs	r6, #8
 801de32:	e7ae      	b.n	801dd92 <_strtoul_l.isra.0+0x4a>
 801de34:	2c30      	cmp	r4, #48	; 0x30
 801de36:	d0a4      	beq.n	801dd82 <_strtoul_l.isra.0+0x3a>
 801de38:	260a      	movs	r6, #10
 801de3a:	e7aa      	b.n	801dd92 <_strtoul_l.isra.0+0x4a>

0801de3c <_strtoul_r>:
 801de3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801de3e:	4c06      	ldr	r4, [pc, #24]	; (801de58 <_strtoul_r+0x1c>)
 801de40:	4d06      	ldr	r5, [pc, #24]	; (801de5c <_strtoul_r+0x20>)
 801de42:	6824      	ldr	r4, [r4, #0]
 801de44:	6a24      	ldr	r4, [r4, #32]
 801de46:	2c00      	cmp	r4, #0
 801de48:	bf08      	it	eq
 801de4a:	462c      	moveq	r4, r5
 801de4c:	9400      	str	r4, [sp, #0]
 801de4e:	f7ff ff7b 	bl	801dd48 <_strtoul_l.isra.0>
 801de52:	b003      	add	sp, #12
 801de54:	bd30      	pop	{r4, r5, pc}
 801de56:	bf00      	nop
 801de58:	20000020 	.word	0x20000020
 801de5c:	20000084 	.word	0x20000084

0801de60 <__submore>:
 801de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de64:	460c      	mov	r4, r1
 801de66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801de68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801de6c:	4299      	cmp	r1, r3
 801de6e:	d11d      	bne.n	801deac <__submore+0x4c>
 801de70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801de74:	f7ff f926 	bl	801d0c4 <_malloc_r>
 801de78:	b918      	cbnz	r0, 801de82 <__submore+0x22>
 801de7a:	f04f 30ff 	mov.w	r0, #4294967295
 801de7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801de86:	63a3      	str	r3, [r4, #56]	; 0x38
 801de88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801de8c:	6360      	str	r0, [r4, #52]	; 0x34
 801de8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801de92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801de96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801de9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801de9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801dea2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801dea6:	6020      	str	r0, [r4, #0]
 801dea8:	2000      	movs	r0, #0
 801deaa:	e7e8      	b.n	801de7e <__submore+0x1e>
 801deac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801deae:	0077      	lsls	r7, r6, #1
 801deb0:	463a      	mov	r2, r7
 801deb2:	f000 f833 	bl	801df1c <_realloc_r>
 801deb6:	4605      	mov	r5, r0
 801deb8:	2800      	cmp	r0, #0
 801deba:	d0de      	beq.n	801de7a <__submore+0x1a>
 801debc:	eb00 0806 	add.w	r8, r0, r6
 801dec0:	4601      	mov	r1, r0
 801dec2:	4632      	mov	r2, r6
 801dec4:	4640      	mov	r0, r8
 801dec6:	f7fb f9be 	bl	8019246 <memcpy>
 801deca:	f8c4 8000 	str.w	r8, [r4]
 801dece:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801ded2:	e7e9      	b.n	801dea8 <__submore+0x48>

0801ded4 <_fstat_r>:
 801ded4:	b538      	push	{r3, r4, r5, lr}
 801ded6:	4c07      	ldr	r4, [pc, #28]	; (801def4 <_fstat_r+0x20>)
 801ded8:	2300      	movs	r3, #0
 801deda:	4605      	mov	r5, r0
 801dedc:	4608      	mov	r0, r1
 801dede:	4611      	mov	r1, r2
 801dee0:	6023      	str	r3, [r4, #0]
 801dee2:	f7e3 fc1a 	bl	800171a <_fstat>
 801dee6:	1c43      	adds	r3, r0, #1
 801dee8:	d102      	bne.n	801def0 <_fstat_r+0x1c>
 801deea:	6823      	ldr	r3, [r4, #0]
 801deec:	b103      	cbz	r3, 801def0 <_fstat_r+0x1c>
 801deee:	602b      	str	r3, [r5, #0]
 801def0:	bd38      	pop	{r3, r4, r5, pc}
 801def2:	bf00      	nop
 801def4:	200280e0 	.word	0x200280e0

0801def8 <_isatty_r>:
 801def8:	b538      	push	{r3, r4, r5, lr}
 801defa:	4c06      	ldr	r4, [pc, #24]	; (801df14 <_isatty_r+0x1c>)
 801defc:	2300      	movs	r3, #0
 801defe:	4605      	mov	r5, r0
 801df00:	4608      	mov	r0, r1
 801df02:	6023      	str	r3, [r4, #0]
 801df04:	f7e3 fc19 	bl	800173a <_isatty>
 801df08:	1c43      	adds	r3, r0, #1
 801df0a:	d102      	bne.n	801df12 <_isatty_r+0x1a>
 801df0c:	6823      	ldr	r3, [r4, #0]
 801df0e:	b103      	cbz	r3, 801df12 <_isatty_r+0x1a>
 801df10:	602b      	str	r3, [r5, #0]
 801df12:	bd38      	pop	{r3, r4, r5, pc}
 801df14:	200280e0 	.word	0x200280e0

0801df18 <__malloc_lock>:
 801df18:	4770      	bx	lr

0801df1a <__malloc_unlock>:
 801df1a:	4770      	bx	lr

0801df1c <_realloc_r>:
 801df1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df1e:	4607      	mov	r7, r0
 801df20:	4614      	mov	r4, r2
 801df22:	460e      	mov	r6, r1
 801df24:	b921      	cbnz	r1, 801df30 <_realloc_r+0x14>
 801df26:	4611      	mov	r1, r2
 801df28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801df2c:	f7ff b8ca 	b.w	801d0c4 <_malloc_r>
 801df30:	b922      	cbnz	r2, 801df3c <_realloc_r+0x20>
 801df32:	f7ff f879 	bl	801d028 <_free_r>
 801df36:	4625      	mov	r5, r4
 801df38:	4628      	mov	r0, r5
 801df3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df3c:	f000 f814 	bl	801df68 <_malloc_usable_size_r>
 801df40:	42a0      	cmp	r0, r4
 801df42:	d20f      	bcs.n	801df64 <_realloc_r+0x48>
 801df44:	4621      	mov	r1, r4
 801df46:	4638      	mov	r0, r7
 801df48:	f7ff f8bc 	bl	801d0c4 <_malloc_r>
 801df4c:	4605      	mov	r5, r0
 801df4e:	2800      	cmp	r0, #0
 801df50:	d0f2      	beq.n	801df38 <_realloc_r+0x1c>
 801df52:	4631      	mov	r1, r6
 801df54:	4622      	mov	r2, r4
 801df56:	f7fb f976 	bl	8019246 <memcpy>
 801df5a:	4631      	mov	r1, r6
 801df5c:	4638      	mov	r0, r7
 801df5e:	f7ff f863 	bl	801d028 <_free_r>
 801df62:	e7e9      	b.n	801df38 <_realloc_r+0x1c>
 801df64:	4635      	mov	r5, r6
 801df66:	e7e7      	b.n	801df38 <_realloc_r+0x1c>

0801df68 <_malloc_usable_size_r>:
 801df68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df6c:	1f18      	subs	r0, r3, #4
 801df6e:	2b00      	cmp	r3, #0
 801df70:	bfbc      	itt	lt
 801df72:	580b      	ldrlt	r3, [r1, r0]
 801df74:	18c0      	addlt	r0, r0, r3
 801df76:	4770      	bx	lr

0801df78 <_init>:
 801df78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df7a:	bf00      	nop
 801df7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df7e:	bc08      	pop	{r3}
 801df80:	469e      	mov	lr, r3
 801df82:	4770      	bx	lr

0801df84 <_fini>:
 801df84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df86:	bf00      	nop
 801df88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df8a:	bc08      	pop	{r3}
 801df8c:	469e      	mov	lr, r3
 801df8e:	4770      	bx	lr
